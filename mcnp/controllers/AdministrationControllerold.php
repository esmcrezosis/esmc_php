<?php

class AdministrationController extends Zend_Controller_Action {

    public function init() {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        /* Initialize action controller here */
		
        include("Url.php");   
 
        /*$smsnbre = new Application_Model_EuSmsNbre();
        $smsnbreM = new Application_Model_EuSmsNbreMapper();
        $smsnbreM->find(1, $smsnbre);
        if($smsnbre->sms_nbre_nbre <= 50 && $smsnbre->sms_nbre_alerte == 0){

        $smsnbre->setSms_nbre_alerte(1);
		$smsnbreM->update($smsnbre);
	
        $mobilemcnp = Util_Utils::getParametre('mobile', 'sms');

        $mobilemcnp1 = "92046435";
        $mobilemcnp2 = "93030332";
        $mobilemcnp3 = "99685657";

        $compteur = Util_Utils::findConuter() + 1;
        Util_Utils::addSms($compteur, $mobilemcnp1, "Le compte SMS est bientôt épuisé. Il ne reste plus que ".$smsnbre->sms_nbre_nbre." SMS. Veuillez recharger, Merci. ESMC");  
      
        $compteur = Util_Utils::findConuter() + 1;
        Util_Utils::addSms($compteur, $mobilemcnp2, "Le compte SMS est bientôt épuisé. Il ne reste plus que ".$smsnbre->sms_nbre_nbre." SMS. Veuillez recharger, Merci. ESMC");
        
        $compteur = Util_Utils::findConuter() + 1;
        Util_Utils::addSms($compteur, $mobilemcnp3, "Le compte SMS est bientôt épuisé. Il ne reste plus que ".$smsnbre->sms_nbre_nbre." SMS. Veuillez recharger, Merci. ESMC");
	
	    }*/

    }

    public function logoutAction() {
		Zend_Session::destroy(true);
		$this->_redirect('/administration/securelogin');
    }

    public function secureloginAction() {
        $this->_helper->layout->disableLayout();
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        // Util_Utils::envoiNotificationAdministrationBiometrique("0", "0010010010010091699P","Administration ESMC", "Authentification biométrique requise");
        // $os = Util_Utils::operating_system_detection();
        $os = Util_Utils::getOS();
        $infos =  Util_Utils::detecterSysteme();
        // echo "navigateur ".$os;
        // echo "infos ".print_r($infos);
	    if(isset($_POST['ok']) && $_POST['ok']=="ok") {
	       if(isset($_POST['login']) && $_POST['login']!="" && isset($_POST['pwd']) && $_POST['pwd']!="") {

	       $euutilisateur = new Application_Model_DbTable_EuUtilisateur();
	       $select = $euutilisateur->select()->where('login = ?', $_POST['login'])
						  	       ->where('pwd = ?', md5($_POST['pwd']));
							      //->where("code_groupe = 'admin' OR code_groupe = 'acnev'");
	       $rowseuutilisateur = $euutilisateur->fetchRow($select);
           if(count($rowseuutilisateur) > 0) {
			   $sessionutilisateur->id_utilisateur = $rowseuutilisateur->id_utilisateur;
			   //$sessionutilisateur->login = $rowseuutilisateur->login;
			   $sessionutilisateur->code_groupe = $rowseuutilisateur->code_groupe;
			   $sessionutilisateur->role = $rowseuutilisateur->role;
			   $sessionutilisateur->section = $rowseuutilisateur->section;
			   $sessionutilisateur->nom_utilisateur = $rowseuutilisateur->nom_utilisateur;
			   $sessionutilisateur->prenom_utilisateur = $rowseuutilisateur->prenom_utilisateur;
			   $sessionutilisateur->pays = $rowseuutilisateur->id_pays;
			   $sessionutilisateur->code_membre = $rowseuutilisateur->code_membre;
			   $sessionutilisateur->id_filiere = $rowseuutilisateur->id_filiere;
			   $sessionutilisateur->code_acteur = $rowseuutilisateur->code_acteur;
			   $sessionutilisateur->code_groupe_create = $rowseuutilisateur->code_groupe_create;
			   $sessionutilisateur->code_agence = $rowseuutilisateur->code_agence;

               $acteur = new Application_Model_EuActeur();
               $acteurRow = $acteur->findByCodeActeur2($rowseuutilisateur->code_acteur);
			   $sessionutilisateur->code_source_create = $acteurRow->code_source_create;
			   $sessionutilisateur->code_monde_create = $acteurRow->code_monde_create;
			   $sessionutilisateur->code_zone_create = $acteurRow->code_zone_create;
			   $sessionutilisateur->id_pays = $acteurRow->id_pays;
			   $sessionutilisateur->id_region = $acteurRow->id_region;
			   $sessionutilisateur->code_secteur_create = $acteurRow->code_secteur_create;
			   $sessionutilisateur->code_agence_create = $acteurRow->code_agence_create;

               $filiere = new Application_Model_EuFiliere();
               $filiereM = new Application_Model_EuFiliereMapper();
               $filiereM->find($rowseuutilisateur->id_filiere, $filiere);
			   $sessionutilisateur->code_division = $filiere->code_division;
			   $sessionutilisateur->nom_filiere = $filiere->nom_filiere;

               $membremorale = new Application_Model_EuMembreMorale();
               $membremoraleM = new Application_Model_EuMembreMoraleMapper();
               $membremoraleM->find($rowseuutilisateur->code_membre, $membremorale);
               $sessionutilisateur->raison_sociale = $membremorale->raison_sociale;

			   $sessionutilisateur->errorlogin = "";
               if(($sessionutilisateur->code_membre != "")) {
				    $sessionutilisateur->confirmation = strtoupper(Util_Utils::genererCodeSMS(5));

					if(substr($sessionutilisateur->code_membre, -1) == "P") {
					   $m_membre = new Application_Model_EuMembreMapper();
					   $membre = new Application_Model_EuMembre();
					   $retour = $m_membre->find($sessionutilisateur->code_membre, $membre);
                    }
                    else if (substr($sessionutilisateur->code_membre, -1) == "M") {
					   $m_membre = new Application_Model_EuMembreMoraleMapper();
					   $membre = new Application_Model_EuMembreMorale();
					   $retour = $m_membre->find($sessionutilisateur->code_membre, $membre);
			        }
					
					$sessionutilisateur->desactiver = $membre->desactiver;
                    if($sessionutilisateur->code_groupe == "detentrice_pays" || $sessionutilisateur->code_groupe == "detentrice_technopole"
		              || $sessionutilisateur->code_groupe == "surveillance_pays" || $sessionutilisateur->code_groupe == "executante_pays") {
		                    $sessionutilisateur->login = $rowseuutilisateur->login;
                            $this->_redirect('/administration');
		            } else if($membre->desactiver == 0) {
                         $compteur = Util_Utils::findConuter() + 1;
                         //Util_Utils::addSms($compteur, $membre->portable_membre, "Voici votre code de confirmation: ".$sessionutilisateur->confirmation.". Veuillez le saisir dans le champ correspondant. Merci");
                         // Util_Utils::addSms3Easys($compteur, $membre->portable_membre, "Voici votre code de confirmation: ".$sessionutilisateur->confirmation.". Veuillez le saisir dans le champ correspondant. Merci");

                         $os = Util_Utils::getOS();
                         $infos =  Util_Utils::detecterSysteme();
                         $texte_confirmation = "Confirmez vous la Tentative de connection à votre compte d'administration ESMC depuis un navigateur ".$infos['browser']." sous ".$os." ?";

                         $table = new Application_Model_DbTable_EuConfirmation();
                         $entryObject = new Application_Model_EuConfirmation();
                         $mapper = new Application_Model_EuConfirmationMapper();

                         $db = Zend_Db_Table::getDefaultAdapter();

                         $entryObject->setType_confirmation("2")
                                     ->setCode_operateur($rowseuutilisateur->login)
                                     ->setNom_operateur("")
                                     ->setData_text($texte_confirmation)
                                     ->setData_json("")
                                     ->setActivite("http://prod.esmcgacsource.com/administration/securelogin")
                                     ->setStatus("1")
                                     ->setDate_creation(time())
                                     ->setDate_confirmation("")
                                     ->setTexte_confirmation($texte_confirmation)
                                     ->setPage("administration/securelogin")
                                     ->setCode_sms($sessionutilisateur->confirmation)
                                     ->setNom_appareil("")
                                     ->setImei_appareil("")
                                     ->setNumero_appareil("")
                                     ->setMac_appareil("")
                                     ->setIp_appareil("")
                                     ->setCode_membre($sessionutilisateur->code_membre);
                         $mapper->save($entryObject);
               
                         $numero_insertion = $db->lastInsertId();

                         $sessionutilisateur->numero_confirmation = $numero_insertion;

                         Util_Utils::envoiNotificationAdministrationBiometrique(""+$numero_insertion, $sessionutilisateur->code_membre,"Administration ESMC",$texte_confirmation , $sessionutilisateur->confirmation);
			  } else {
				  $sessionutilisateur->errorlogin = "Veuillez procéder à la nouvelle activation de votre compte marchand ...";
                  $this->_redirect('/administration/securelogin');
			  }
		}
        else {
		if($sessionutilisateur->code_groupe == 'admin_site' ||  $sessionutilisateur->code_groupe == 'SIF' || $sessionutilisateur->code_groupe != "detentrice_pays"
		   || $sessionutilisateur->code_groupe != "surveillance_pays" || $sessionutilisateur->code_groupe != "executante_pays") {
		     $sessionutilisateur->login = $rowseuutilisateur->login;
             $this->_redirect('/administration');
		  } else {
			 $sessionutilisateur->errorlogin = "Impossible de se connecter à cet espace ...";
             $this->_redirect('/administration/securelogin');			 
		  }
        }
        } else { $sessionutilisateur->errorlogin = "Login ou Mot de Passe Erroné"; }
        $this->_redirect('/administration/securelogin');
        } else { $sessionutilisateur->errorlogin = "Saisir Login et Mot de Passe"; }
        $this->_redirect('/administration/securelogin');
        }

    }


    public function loginAction() {
        /* page administration/login - Authentification Espace Administration */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		$this->_redirect('/administration/securelogin');
		
		
        /*
	    if(isset($_POST['ok']) && $_POST['ok']=="ok") {
	    if(isset($_POST['login']) && $_POST['login']!="" && isset($_POST['pwd']) && $_POST['pwd']!=""){

	    $euutilisateur = new Application_Model_DbTable_EuUtilisateur();
	    $select = $euutilisateur->select()->where('login = ?', $_POST['login'])
						  	  ->where('pwd = ?', md5($_POST['pwd']));
							  //->where("code_groupe = 'admin' OR code_groupe = 'acnev'");
	    $rowseuutilisateur = $euutilisateur->fetchRow($select);
        if(count($rowseuutilisateur)>0) {
				 $sessionutilisateur->id_utilisateur = $rowseuutilisateur->id_utilisateur;
				 $sessionutilisateur->login = $rowseuutilisateur->login;
				 $sessionutilisateur->code_groupe = $rowseuutilisateur->code_groupe;
				 $sessionutilisateur->nom_utilisateur = $rowseuutilisateur->nom_utilisateur;
				 $sessionutilisateur->prenom_utilisateur = $rowseuutilisateur->prenom_utilisateur;
				 $sessionutilisateur->pays = $rowseuutilisateur->id_pays;
				 $sessionutilisateur->code_membre = $rowseuutilisateur->code_membre;
				 $sessionutilisateur->id_filiere = $rowseuutilisateur->id_filiere;
				 $sessionutilisateur->code_acteur = $rowseuutilisateur->code_acteur;
				 $sessionutilisateur->code_groupe_create = $rowseuutilisateur->code_groupe_create;
				 $sessionutilisateur->code_agence = $rowseuutilisateur->code_agence;
                 $sessionutilisateur->role = $rowseuutilisateur->role;
				 
                 $acteur = new Application_Model_EuActeur();
                 $acteurRow = $acteur->findByCodeActeur2($rowseuutilisateur->code_acteur);
				 $sessionutilisateur->code_source_create = $acteurRow->code_source_create;
				 $sessionutilisateur->code_monde_create = $acteurRow->code_monde_create;
				 $sessionutilisateur->code_zone_create = $acteurRow->code_zone_create;
				 $sessionutilisateur->id_pays = $acteurRow->id_pays;
				 $sessionutilisateur->id_region = $acteurRow->id_region;
				 $sessionutilisateur->code_secteur_create = $acteurRow->code_secteur_create;
				 $sessionutilisateur->code_agence_create = $acteurRow->code_agence_create;


                 $filiere = new Application_Model_EuFiliere();
                 $filiereM = new Application_Model_EuFiliereMapper();
                 $filiereM->find($rowseuutilisateur->id_filiere, $filiere);
				 $sessionutilisateur->code_division = $filiere->code_division;
				 $sessionutilisateur->nom_filiere = $filiere->nom_filiere;

                 $membremorale = new Application_Model_EuMembreMorale();
                 $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                 $membremoraleM->find($rowseuutilisateur->code_membre, $membremorale);
                 $sessionutilisateur->raison_sociale = $membremorale->raison_sociale;

				 $sessionutilisateur->errorlogin = "";
                 if($sessionutilisateur->code_membre != "") {				 
				    $sessionutilisateur->confirmation = strtoupper(Util_Utils::genererCodeSMS(5));
				 
					if (substr($sessionutilisateur->code_membre, -1) == "P") {
					$m_membre = new Application_Model_EuMembreMapper();
					$membre = new Application_Model_EuMembre();
					$retour = $m_membre->find($sessionutilisateur->code_membre, $membre);
					}else if (substr($sessionutilisateur->code_membre, -1) == "M") {
					$m_membre = new Application_Model_EuMembreMoraleMapper();
					$membre = new Application_Model_EuMembreMorale();
					$retour = $m_membre->find($sessionutilisateur->code_membre, $membre);
					}

				 $compteur = Util_Utils::findConuter() + 1; 
//Util_Utils::addSms($compteur, $membre->portable_membre, "Voici votre code de confirmation: ".$sessionutilisateur->confirmation.". Veuillez le saisir dans le champ correspondant. Merci");        
Util_Utils::addSms3Easys($compteur, $membre->portable_membre, "Voici votre code de confirmation: ".$sessionutilisateur->confirmation.". Veuillez le saisir dans le champ correspondant. Merci");

				 
    $this->_redirect('/administration/confirmation');
}else{
    $this->_redirect('/administration');
	}
	} else { $sessionutilisateur->errorlogin = "Login ou Mot de Passe Erroné"; }
    $this->_redirect('/administration/login');
	} else { $sessionutilisateur->errorlogin = "Saisir Login et Mot de Passe"; } 
    $this->_redirect('/administration/login');
	}

*/

    }




    public function login2Action()
    {
        /* page administration/login - Authentification Espace Administration */

    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['login']) && $_POST['login']!="" && isset($_POST['pwd']) && $_POST['pwd']!=""){

    $euutilisateur = new Application_Model_DbTable_EuUtilisateur();
    $select = $euutilisateur->select()->where('login = ?', $_POST['login'])
                              ->where('pwd = ?', md5($_POST['pwd']));
                              //->where("code_groupe = 'admin' OR code_groupe = 'acnev'");
    $rowseuutilisateur = $euutilisateur->fetchRow($select);
if (count($rowseuutilisateur)>0){
                 $sessionutilisateur->id_utilisateur = $rowseuutilisateur->id_utilisateur;
                 $sessionutilisateur->login = $rowseuutilisateur->login;
                 $sessionutilisateur->code_groupe = $rowseuutilisateur->code_groupe;
                 $sessionutilisateur->nom_utilisateur = $rowseuutilisateur->nom_utilisateur;
                 $sessionutilisateur->prenom_utilisateur = $rowseuutilisateur->prenom_utilisateur;
                 $sessionutilisateur->pays = $rowseuutilisateur->id_pays;
                 $sessionutilisateur->code_membre = $rowseuutilisateur->code_membre;
                 $sessionutilisateur->id_filiere = $rowseuutilisateur->id_filiere;
                 $sessionutilisateur->code_acteur = $rowseuutilisateur->code_acteur;
                 $sessionutilisateur->code_groupe_create = $rowseuutilisateur->code_groupe_create;
                 $sessionutilisateur->code_agence = $rowseuutilisateur->code_agence;
                 $sessionutilisateur->role = $rowseuutilisateur->role;
                 
$acteur = new Application_Model_EuActeur();
$acteurRow = $acteur->findByCodeActeur2($rowseuutilisateur->code_acteur);
                 $sessionutilisateur->code_source_create = $acteurRow->code_source_create;
                 $sessionutilisateur->code_monde_create = $acteurRow->code_monde_create;
                 $sessionutilisateur->code_zone_create = $acteurRow->code_zone_create;
                 $sessionutilisateur->id_pays = $acteurRow->id_pays;
                 $sessionutilisateur->id_region = $acteurRow->id_region;
                 $sessionutilisateur->code_secteur_create = $acteurRow->code_secteur_create;
                 $sessionutilisateur->code_agence_create = $acteurRow->code_agence_create;


        $filiere = new Application_Model_EuFiliere();
        $filiereM = new Application_Model_EuFiliereMapper();
        $filiereM->find($rowseuutilisateur->id_filiere, $filiere);
                 $sessionutilisateur->code_division = $filiere->code_division;
                 $sessionutilisateur->nom_filiere = $filiere->nom_filiere;

        $membremorale = new Application_Model_EuMembreMorale();
        $membremoraleM = new Application_Model_EuMembreMoraleMapper();
        $membremoraleM->find($rowseuutilisateur->code_membre, $membremorale);
$sessionutilisateur->raison_sociale = $membremorale->raison_sociale;

                 $sessionutilisateur->errorlogin = "";
if($sessionutilisateur->code_membre != ""){              
                 $sessionutilisateur->confirmation = strtoupper(Util_Utils::genererCodeSMS(5));
                 
                    if (substr($sessionutilisateur->code_membre, -1) == "P") {
                    $m_membre = new Application_Model_EuMembreMapper();
                    $membre = new Application_Model_EuMembre();
                    $retour = $m_membre->find($sessionutilisateur->code_membre, $membre);
                    }else if (substr($sessionutilisateur->code_membre, -1) == "M") {
                    $m_membre = new Application_Model_EuMembreMoraleMapper();
                    $membre = new Application_Model_EuMembreMorale();
                    $retour = $m_membre->find($sessionutilisateur->code_membre, $membre);
                    }

                 $compteur = Util_Utils::findConuter() + 1; 
//Util_Utils::addSms($compteur, $membre->portable_membre, "Voici votre code de confirmation: ".$sessionutilisateur->confirmation.". Veuillez le saisir dans le champ correspondant. Merci");        
Util_Utils::addSms3Easys($compteur, $membre->portable_membre, "Voici votre code de confirmation: ".$sessionutilisateur->confirmation.". Veuillez le saisir dans le champ correspondant. Merci");        

                 
    $this->_redirect('/administration/confirmation');
}else{
    $this->_redirect('/administration');
    }
    } else { $sessionutilisateur->errorlogin = "Login ou Mot de Passe Erroné"; }
    $this->_redirect('/administration/login');
    } else { $sessionutilisateur->errorlogin = "Saisir Login et Mot de Passe"; } 
    $this->_redirect('/administration/login');
    }



    }

	public function passwordAction() 
	{
		/* page administration/password - Modification de mot de passe */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

		if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
			if (isset($_POST['ancien']) && $_POST['ancien'] != "" && isset($_POST['nouveau']) && $_POST['nouveau'] != "" && isset($_POST['confirmer']) && $_POST['confirmer'] == $_POST['nouveau']) {

					$euutilisateur = new Application_Model_DbTable_EuUtilisateur();
					$select = $euutilisateur->select()->where('login = ?', $sessionutilisateur->login);
					$select->where('pwd = ?', md5($_POST['ancien']));
					if ($rowseuutilisateur = $euutilisateur->fetchRow($select)) {
						$utilisateur = new Application_Model_EuUtilisateur();
						$mapper = new Application_Model_EuUtilisateurMapper();
						$mapper->find($sessionutilisateur->id_utilisateur, $utilisateur);
						
						$utilisateur->setPwd(md5($_POST['nouveau']));
						$mapper->update($utilisateur);
						$this->view->error = "Modification effectuée";
					}
			} else {
				$this->view->error = "Saisir tous les champs";
			}
			//$this->_redirect('/administration');
		}
	}

    function nocompteAction() {
	   Zend_Session::destroy(true);
       //$this->_redirect('/administration/login');
	   $this->_redirect('/administration/securelogin');
    }


	public function confirmationAction() {
        /* page administration/confirmation - Confirmation d'accès a cet espace d'administration */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}

            if(!isset($sessionutilisateur->fois)){
                $sessionutilisateur->fois = 0;
            }

        if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
            if (isset($_POST['confirme']) && $_POST['confirme'] != "" && $_POST['confirme'] == $sessionutilisateur->confirmation) {

                 $sessionutilisateur->confirmation = "";
            $this->_redirect('/administration');

            } else {
                $sessionutilisateur->error = "Erreur de Code de confirmation";
                $sessionutilisateur->fois += 1;
                if($sessionutilisateur->fois < 3){
            $this->_redirect('/administration/confirmation');
                }else{
                $sessionutilisateur->fois = 0;
            $this->_redirect('/administration/nocompte');        
                }

            }
            //$this->_redirect('/administration');
        }
    }




    public function indexAction() {
        /* page administration/index - Tableau de bord Espace Administration */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    //if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        //if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/securelogin');}
           //if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
    }


    public function detailsdemandeAction() 
    {
        /* page administration/detailsdemande - Détail demande BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $demande = new Application_Model_EuDemande();
        $demandeM = new Application_Model_EuDemandeMapper();
        $demandeM->find($id, $demande);
		$this->view->demande = $demande;

            }

	}
	
	
	
	public  function groupeAction()   {
	    $this->_helper->layout()->disableLayout();
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    $g = array();
        $tab = new Application_Model_DbTable_EuUserGroup();
	    $sel = $tab->select();
        $sel->order('libelle_groupe asc');
        $group = $tab->fetchAll($sel);
        $i = 0;
		$code_group = $sessionutilisateur->code_groupe;
		
		if($code_group == 'admin_site' || $code_group == 'detentrice' ||  $code_group == 'detentrice_monde' || $code_group == 'detentrice_zone' || $code_group == 'detentrice_pays' || $code_group == 'detentrice_region' || $code_group == 'detentrice_secteur' || $code_group == 'detentrice_agence'
		   || $code_group == 'surveillance' ||  $code_group == 'surveillance_monde' || $code_group == 'surveillance_zone' || $code_group == 'surveillance_pays' || $code_group == 'surveillance_region' || $code_group == 'surveillance_secteur' || $code_group == 'surveillance_agence'
		   || $code_group == 'executante' ||  $code_group == 'executante_monde' || $code_group == 'executante_zone' || $code_group == 'executante_pays' || $code_group == 'executante_region' || $code_group == 'executante_secteur' || $code_group == 'executante_agence') {
			$greg = array("detentrice_technopole","surveillance_filiere","executante_acnev");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
		} else if($code_group == 'detentrice_technopole') {
			$greg = array("odd1","odd2","odd3","odd4","odd5","odd6","odd7","odd8","odd9","odd10","odd11","odd12","odd13","odd14","odd15","odd16","odd17"
			,"surveillance_filiere","executante_acnev");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
			
		} else if($code_group == 'surveillance_filiere')  {
			$greg = array("odd1","odd2","odd3","odd4","odd5","odd6","odd7","odd8","odd9","odd10","odd11","odd12","odd13","odd14","odd15","odd16","odd17");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
			
		} else if($code_group == 'executante_acnev')  {
			$greg = array("odd1","odd2","odd3","odd4","odd5","odd6","odd7","odd8","odd9","odd10","odd11","odd12","odd13","odd14","odd15","odd16","odd17");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
			
		}
		
		$this->view->data = $g;
		
	}
	
	
	public function adduseradminAction() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
		
		$tab = new Application_Model_DbTable_EuUserGroup();
	    $sel = $tab->select();
        //$sel->order('libelle_groupe asc');
        $group = $tab->fetchAll($sel);
        $i = 0;
		$code_group = $sessionutilisateur->code_groupe;
		
		if($code_group == 'admin_site' || $code_group == 'detentrice' ||  $code_group == 'detentrice_monde' || $code_group == 'detentrice_zone' || $code_group == 'detentrice_pays' || $code_group == 'detentrice_region' || $code_group == 'detentrice_secteur' || $code_group == 'detentrice_agence'
		   || $code_group == 'surveillance' ||  $code_group == 'surveillance_monde' || $code_group == 'surveillance_zone' || $code_group == 'surveillance_pays' || $code_group == 'surveillance_region' || $code_group == 'surveillance_secteur' || $code_group == 'surveillance_agence'
		   || $code_group == 'executante' ||  $code_group == 'executante_monde' || $code_group == 'executante_zone' || $code_group == 'executante_pays' || $code_group == 'executante_region' || $code_group == 'executante_secteur' || $code_group == 'executante_agence') {
			$greg = array("detentrice_technopole","surveillance_filiere","executante_acnev");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
		} else if($code_group == 'detentrice_technopole') {
			$greg = array("odd_un","odd_deux","odd_trois","odd_quatre","odd_cinq","odd_six","odd_sept",
			             "odd_huit","odd_neuf","odd_dix","odd_onze","odd_douze","odd_treize","odd_quartoze","odd_quinze","odd_seize","odd_dix_sept"
			,"surveillance_filiere","executante_acnev");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
			
		} else if($code_group == 'surveillance_filiere')  {
			$greg = array("odd_un","odd_deux","odd_trois","odd_quatre","odd_cinq","odd_six","odd_sept",
			             "odd_huit","odd_neuf","odd_dix","odd_onze","odd_douze","odd_treize","odd_quartoze","odd_quinze","odd_seize","odd_dix_sept");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
			
		} else if($code_group == 'executante_acnev')  {
			$greg = array("odd_un","odd_deux","odd_trois","odd_quatre","odd_cinq","odd_six","odd_sept",
			             "odd_huit","odd_neuf","odd_dix","odd_onze","odd_douze","odd_treize","odd_quartoze","odd_quinze","odd_seize","odd_dix_sept");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
		}
		
		$t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
		
		$userin = new Application_Model_EuUtilisateur();
        $mapper = new Application_Model_EuUtilisateurMapper();
		
		$membre = new Application_Model_EuMembre();
	    $m_membre = new Application_Model_EuMembreMapper();
		
		$this->view->data = $g;
		
		$request = $this->getRequest();
		if($request->isPost()) {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
	            $find_user = $mapper->findLogin($request->getParam("login"));
			    $utilisateur = new Application_Model_EuUtilisateur();
			    $trouve_user = $mapper->find($sessionutilisateur->id_utilisateur,$utilisateur);
			    $nom = $request->getParam("nom");
			    $prenom = $request->getParam("prenom");
			    $login = $request->getParam("login");
			    $pwd = $request->getParam("pwd");
			    $pwd1 = $request->getParam("pwd1");
			    $id_pays = $request->getParam("id_pays");
			    $id_canton = $request->getParam("id_canton");
			    $groupe = $request->getParam("groupe");
				$role = $request->getParam("role");
				$section = $request->getParam("section");
			    $code_membre = $request->getParam("code_membre");
		        $findmembre = $m_membre->find($code_membre,$membre);
				  
				if($find_user != false) {
				   $db->rollback();
                   $error = 'Ce login existe déjà.';
                   $this->view->error = $error;
                   $this->view->nom = $request->getParam("nom");
                   $this->view->prenom = $request->getParam("prenom");
                   $this->view->login = $request->getParam("login");
                   return;
                } elseif ($pwd != $pwd1) {
				   $db->rollback();
                   $error = 'Erreur de confirmation du mot de passe.';
                   $this->view->error = $error;
                   $this->view->nom = $request->getParam("nom");
                   $this->view->prenom = $request->getParam("prenom");
                   $this->view->login = $request->getParam("login");
                   return;
                } elseif(stripos($login, " ") !== false) {
				   $db->rollback();
                   $error = "Le Login ne doit pas contenir d'espace";
                   $this->view->error = $error;
                   $this->view->nom = $request->getParam("nom");
                   $this->view->prenom = $request->getParam("prenom");
                   $this->view->login = $request->getParam("login");
                   return;
                 } elseif($findmembre == false) {
				   $db->rollback();
				   $error = "Le code membre de l'utilisateur  ".$code_membre."  est introuvable ...";
                   $this->view->error = $error;
                   $this->view->nom = $request->getParam("nom");
                   $this->view->prenom = $request->getParam("prenom");
                   $this->view->login = $request->getParam("login");
			       return;
			     }

                 $id_user = $mapper->findConuter() + 1;
                 $userin->setId_utilisateur($id_user);
                 $userin->setId_utilisateur_parent($sessionutilisateur->id_utilisateur); 
                 $userin->setPrenom_utilisateur($prenom);
                 $userin->setNom_utilisateur($nom);
                 $userin->setLogin(trim($login));
                 $userin->setPwd(md5($pwd));
                 $userin->setDescription(null);
                 $userin->setUlock(0);
                 $userin->setCh_pwd_flog(0);
                 $userin->setCode_groupe($groupe);
				 $userin->setRole($role);
				 $userin->setSection($section);
                 $userin->setConnecte(0);
                 $userin->setCode_agence($sessionutilisateur->code_agence);
				    		 
                 $userin->setCode_secteur($utilisateur->code_secteur);
                 $userin->setCode_zone($utilisateur->code_zone);
						
                 $userin->setId_filiere($utilisateur->id_filiere);
			   
			     $userin->setCode_acteur($utilisateur->code_acteur);	   
			     $userin->setCode_gac_filiere(null);
			     $userin->setCode_groupe_create($sessionutilisateur->code_groupe);
			     $userin->setCode_membre($code_membre);
			   
			     $userin->setId_pays($id_pays);
                 $userin->setId_canton($id_canton);
                 $userin->setCode_tegc(null);			   
                 $mapper->save($userin);					
                 $db->commit();
			   
			     $sessionutilisateur->error = "Operation bien effectuee ...";
			     $this->_redirect('/administration/listuseradmin');
                 				 
	
	        } catch (Exception $exc) {				   
			    $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
		    }
	    }
	}
	
	
	public function listuseradminAction()  {
	   /* page administration/listuser - liste des utilisateurs */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	   if(!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
       
		   $tabela = new Application_Model_DbTable_EuUtilisateur();
		   $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
		   $select->join('eu_user_group', 'eu_user_group.code_groupe = eu_utilisateur.code_groupe');
           $select->where('eu_utilisateur.id_utilisateur_parent = ?',$sessionutilisateur->id_utilisateur);
		   $select->order('id_utilisateur desc');
		   $users = $tabela->fetchAll($select);
		   $this->view->entries = $users;
	 }
	 
	 
	 public  function edituseradminAction()   {
		 /* page administration/adduserte - Ajout d'un utilisateur */
	     $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	     //$this->_helper->layout->disableLayout();
 	     $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	     if(!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
		 
		 
		 $t_zone = new Application_Model_DbTable_EuZone();
       $zones = $t_zone->fetchAll();
       $this->view->zones = $zones;
       $t_pays = new Application_Model_DbTable_EuPays();
       $pays = $t_pays->fetchAll();
       $this->view->pays = $pays;
       $t_region = new Application_Model_DbTable_EuRegion();
       $regions = $t_region->fetchAll();
       $this->view->regions = $regions;
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $prefectures = $t_prefecture->fetchAll();
       $this->view->prefectures = $prefectures;
       $t_canton = new Application_Model_DbTable_EuCanton();
       $cantons = $t_canton->fetchAll();
       $this->view->cantons = $cantons;
	   
	   $tab = new Application_Model_DbTable_EuUserGroup();
	   $sel = $tab->select();
       //$sel->order('libelle_groupe asc');
       $group = $tab->fetchAll($sel);
       $i = 0;
	   $code_group = $sessionutilisateur->code_groupe;
		
	   if($code_group == 'admin_site' || $code_group == 'detentrice' ||  $code_group == 'detentrice_monde' || $code_group == 'detentrice_zone' || $code_group == 'detentrice_pays' || $code_group == 'detentrice_region' || $code_group == 'detentrice_secteur' || $code_group == 'detentrice_agence'
		   || $code_group == 'surveillance' ||  $code_group == 'surveillance_monde' || $code_group == 'surveillance_zone' || $code_group == 'surveillance_pays' || $code_group == 'surveillance_region' || $code_group == 'surveillance_secteur' || $code_group == 'surveillance_agence'
		   || $code_group == 'executante' ||  $code_group == 'executante_monde' || $code_group == 'executante_zone' || $code_group == 'executante_pays' || $code_group == 'executante_region' || $code_group == 'executante_secteur' || $code_group == 'executante_agence') {
			$greg = array("detentrice_technopole","surveillance_filiere","executante_acnev");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
		} else if($code_group == 'detentrice_technopole') {
			$greg = array("odd1","odd2","odd3","odd4","odd5","odd6","odd7","odd8","odd9","odd10","odd11","odd12","odd13","odd14","odd15","odd16","odd17"
			,"surveillance_filiere","executante_acnev");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
			
		} else if($code_group == 'surveillance_filiere')  {
			$greg = array("odd1","odd2","odd3","odd4","odd5","odd6","odd7","odd8","odd9","odd10","odd11","odd12","odd13","odd14","odd15","odd16","odd17");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
			
		} else if($code_group == 'executante_acnev')  {
			$greg = array("odd1","odd2","odd3","odd4","odd5","odd6","odd7","odd8","odd9","odd10","odd11","odd12","odd13","odd14","odd15","odd16","odd17");
			foreach($group as $value) {
               if(in_array($value->code_groupe,$greg)) {
                    $g[$i][0] = $value->code_groupe;
                    $g[$i][1] = ucfirst(utf8_encode($value->libelle_groupe));
                    $i++;
               }
		    }
		}
		$this->view->data = $g;
		
		$request = $this->getRequest();
	    if($request->isPost())  {
		   $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
		       $find_user = $mapper->findNoLogin($request->getParam("login"),$request->getParam("id_utilisateur"));
			   $utilisateur = new Application_Model_EuUtilisateur();
			   //$trouve_user = $mapper->find($sessionmembre->id_utilisateur,$utilisateur);
			   $nom = $request->getParam("nom");
			   $prenom = $request->getParam("prenom");
			   $login = $request->getParam("login");
			   $pwdold = $request->getParam("pwdold");
			   $pwd = $request->getParam("pwd");
			   $pwd1 = $request->getParam("pwd1");
			   $id_pays = $request->getParam("id_pays");
			   $id_canton = $request->getParam("id_canton");
			   $id_user = $request->getParam("id_utilisateur");
			   $groupe = $request->getParam("groupe");
			   $role = $request->getParam("role");
			   $section = $request->getParam("section");
			   $code_membre = $request->getParam("code_membre");
		       $findmembre = $m_membre->find($code_membre,$membre);
			  
			   $mapper->find($id_user,$utilisateur);
			  
			   if($find_user != false) {
				  $db->rollback();
                  $error = 'Ce login existe déjà.';
                  $this->view->error = $error;
	              $this->view->user = $utilisateur;
                  return;
               } elseif($utilisateur->pwd != md5($pwdold)) {
				  $db->rollback();
        	      $error = 'Ancien mot de passe non conforme.';
				  $this->view->error = $error;
                  $this->view->user = $utilisateur;
                  return;		  
		       }	  
			   elseif($pwd != $pwd1) {
				 $db->rollback();
                 $error = 'Erreur de confirmation du mot de passe.';
				 $this->view->error = $error;
                 $this->view->user = $utilisateur;
                 return;
               } 
			   elseif(stripos($login, " ") !== false) {
				 $db->rollback();
                 $error = "Le Login ne doit pas contenir d'espace";
				 $this->view->error = $error;
                 $this->view->user = $utilisateur;
                 return;
              } elseif($findmembre == false) {
				 $db->rollback();
				 $error = "Le code membre de l'utilisateur  ".$code_membre."  est introuvable ...";
                 $this->view->error = $error;
                 $this->view->user = $utilisateur;
			     return;
			  }
			  
			  
			  //insertion dans la table eu_utilisateur
			  //$id_user = $mapper->findConuter() + 1;
			  $mapper->find($id_user,$userin);
              $userin->setId_utilisateur_parent($sessionutilisateur->id_utilisateur); 
              $userin->setPrenom_utilisateur($prenom);
              $userin->setNom_utilisateur($nom);
              $userin->setLogin(trim($login));
              $userin->setPwd(md5($pwd));
              $userin->setDescription(null);
              $userin->setUlock(0);
              $userin->setCh_pwd_flog(1);
              $userin->setCode_groupe($groupe);
			  $userin->setRole($role);
			  $userin->setSection($section);
              $userin->setConnecte(0);
              $userin->setCode_agence($sessionutilisateur->code_agence);    		 
              $userin->setCode_secteur($utilisateur->code_secteur);
              $userin->setCode_zone($utilisateur->code_zone);		
              $userin->setId_filiere($utilisateur->id_filiere);
			  $userin->setCode_acteur($utilisateur->code_acteur);	   
			  $userin->setCode_gac_filiere(null);
			  $userin->setCode_groupe_create($sessionutilisateur->code_groupe);
			  $userin->setCode_membre($code_membre);
			  $userin->setId_pays($id_pays);
              $userin->setId_canton($id_canton);
              $userin->setCode_tegc(null);			   
              $mapper->update($userin);					
              $db->commit();
			   
			  $sessionmembre->errorlogin = "Modification bien effectuee ...";
			  $this->_redirect('/administration/listuseradmin');
			  
		   } catch (Exception $exc) {				   
			   $db->rollback();
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
               return;
		   }
		   
		 } else {
	         $id = $this->_request->getParam('id');
	         $user   = new Application_Model_EuUtilisateur();
	         $m_user = new Application_Model_EuUtilisateurMapper();
	         $m_user->find($id,$user);
	         $this->view->user = $user;
	     }
		 
	 }
	

	

     public function listdemandeAction() {
        /* page administration/listdemande - Liste demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $demande = new Application_Model_EuDemandeMapper();
        $this->view->entries = $demande->fetchAll4($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);

        $this->view->tabletri = 1;
    }


    public function listdemandefraisAction() 
    {
	        /* page administration/listdemandefrais - Liste demande de BPS avec frais */

	$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');

	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $frais = new Application_Model_EuFraisMapper();
        $this->view->entries = $frais->fetchAll4($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);

        $this->view->tabletri = 1;
    }




    public function pdfdemandefraisAction() 
    {
        /* page administration/pdfdemandefrais - Livrer demande */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


        $id = (int) $this->_request->getParam('id');
        $idfrais = (int) $this->_request->getParam('idfrais');
        if ($id > 0 && $idfrais > 0) {
			
            $frais = new Application_Model_EuFrais();
            $m_frais = new Application_Model_EuFraisMapper();
            $m_frais->find($idfrais, $frais);
			
            $m_appeloffre = new Application_Model_EuAppelOffreMapper();
            $appeloffre = $m_appeloffre->findByDemande($id);
						
			$date = new Zend_Date(Zend_Date::ISO_8601);

            $demande = new Application_Model_EuDemande();
            $m_demande = new Application_Model_EuDemandeMapper();
            $m_demande->find($id, $demande);





        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuLivraison();
        $ma = new Application_Model_EuLivraisonMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setLivraison_id($compteur);
            $a->setLivraison_code_produit("I");
            $a->setLivraison_libelle($demande->objet_demande);
            $a->setLivraison_montant($frais->mont_projet);
            $a->setLivraison_description($demande->description_demande);
            $a->setLivraison_code_membre($demande->code_membre_morale);
            $a->setLivraison_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setLivraison_utilisateur($sessionutilisateur->id_utilisateur);
            $a->setPublier(1);
            $ma->save($a);


$date_id = new Zend_Date(Zend_Date::ISO_8601);


        $validation_quittance = new Application_Model_EuValidationQuittance();
        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
			
            $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
            $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
            $validation_quittance->setValidation_quittance_utilisateur($sessionutilisateur->id_utilisateur);
            $validation_quittance->setValidation_quittance_livraison($compteur);
            $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $validation_quittance->setPublier(1);
            $validation_quittance_mapper->save($validation_quittance);

		include("Transfert.php");







$htmlpdf = "";

$htmlpdf .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
  </tr>';
	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° Bon d\'Achat : BA'.ajoutezero($frais->id_frais).'</u></em></strong></td>
  </tr>';
		
  
/*$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>QUITTANCE CMFH/CAPS/GAC TOGO N° '.$livraison->livraison_id.'</u></em></strong></td>
  </tr>';*/
  
        $membre_morale = new Application_Model_EuMembreMorale();
        $membre_moraleM = new Application_Model_EuMembreMoraleMapper();
        $membre_moraleM->find($demande->code_membre_morale, $membre_morale);
		
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Raison sociale </u>: </em><strong><em>'.$membre_morale->raison_sociale.'</em></strong></p></td>
  </tr>';

$htmlpdf .= '
  <tr>
    <td colspan="2">&nbsp;</td>
    <td colspan="2" align="center"><strong><em>Montant Bon d\'Achat : '.number_format(($frais->mont_projet), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
  <tr>
    <td align="left"><em><strong>Libellé</strong></em></td>
    <td align="center"><strong><em>Proposition</em></strong></td>
    <td align="center"><strong><em>Salaire</em></strong></td>
    <td align="center"><em><strong>Montant</strong></em></td>
  </tr>';
  
$htmlpdf .= '
  <tr style="background-color:#999;">
    <td align="left"><em><strong>'.$demande->objet_demande.'</strong></em></td>
    <td align="center"><em>'.number_format(($frais->montant_proposition), 0, ',', ' ').'</em></td>
    <td align="center"><em>'.number_format(($frais->montant_salaire), 0, ',', ' ').'</em></td>
    <td align="center"><em>'.number_format(($frais->mont_projet), 0, ',', ' ').'</em></td>
  </tr>';

$htmlpdf .= '
  <tr>
    <td colspan="2" align="left"><em><u>Montant en  lettres </u>: '.lettre(($frais->mont_projet), 50).' CFA</em></td>
    <td colspan="2" align="left">Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
  </tr>';	  
  
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$htmlpdf .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/achats.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_achat/")) {
mkdir("../../webfiles/pdf_achat/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_achat/BONACHAT_".str_replace("/", "_", mettreaccents($frais->id_frais))."_.html";
$newnom = "BONACHAT_".str_replace("/", "_", mettreaccents($frais->id_frais)."_");
$newchemin = "../../webfiles/pdf_achat/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena	= $newnom.'.pdf';

unlink($newfile);

	
		//$this->_redirect(str_replace("../../webfiles/", "http://webfiles.gacsource.net/", $file));




if($membre_morale->email_membre != ""){

$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml("Bon d'Achat : BA".ajoutezero($frais->id_frais)." le ".$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($membre_morale->email_membre, $membre_morale->raison_sociale);
$mail->setSubject("Bon d'Achat : BA".ajoutezero($frais->id_frais)." le ".$date_id->toString('dd-MM-yyyy HH:mm')); 

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 
$mail->send($tr);

}










			
//$sessionmembre->errorlogin = "Validation de la livraison réussie ...";			
			
			/*}else {
$sessionmembre->errorlogin = "Validation de la livraison échouée ...";			
				}*/
			
        }

        $this->_redirect('/administration/listdemandefrais');
    }









    public function addappeloffreAction()
    {
        /* page administration/addappeloffre - Création de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['numero_offre']) && $_POST['numero_offre']!="" && isset($_POST['nom_appel_offre']) && $_POST['nom_appel_offre']!="" && isset($_POST['duree_projet']) && $_POST['duree_projet']>8 && isset($_FILES['descrip_appel_offre']['name']) && $_FILES['descrip_appel_offre']['name']!="" && isset($_POST['type_appel_offre']) && $_POST['type_appel_offre']!="") {
		
$appeloffre_m = new Application_Model_EuAppelOffreMapper();
$appeloffre_rows = $appeloffre_m->findByNumero($_POST['numero_offre']);
if(count($appeloffre_rows) > 0){
$this->view->error = "Choisir l'appel d'offre";
}else{
		include("Transfert.php");
		$chemin	= "appeloffres";
		$file = $_FILES['descrip_appel_offre']['name'];
		$file1='descrip_appel_offre';
		$appeloffre = $chemin."/".transfert($chemin,$file1);
			
			
		$demande = new Application_Model_EuDemande();
        $demande_m = new Application_Model_EuDemandeMapper();
		$demande_m->find($_POST['id_demande'], $demande);	
	if(($_POST['type_appel_offre'] == "ass" && $demande->livrer != 2) || ($_POST['type_appel_offre'] != "ass" && $demande->livrer == 2)){
					$this->view->error = "Veuillez vérifier si le projet en question à abouti ou pas.";
				}else{
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAppelOffre();
        $ma = new Application_Model_EuAppelOffreMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_appel_offre($compteur);
            $a->setNumero_offre($_POST['numero_offre']);
            $a->setNom_appel_offre($_POST['nom_appel_offre']);
            $a->setDescrip_appel_offre($appeloffre);
	        $a->setType_appel_offre($_POST['type_appel_offre']);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            $a->setDuree_projet($_POST['duree_projet']);
            $a->setPublier($_POST['publier']);
            $a->setId_demande($_POST['id_demande']);
            $a->setCode_membre_morale($_POST['code_membre_morale']);
            $a->setMembre_morale_executante($sessionutilisateur->code_membre);
            $a->setDate_creation($date_id->toString('yyyy-MM-dd'));
            $ma->save($a);
			
		$this->_redirect('/administration/listappeloffre');
					}
}
		} else {  $this->view->error = "Choisir l'appel d'offre";  } 
		}
		
    }




    public function listappeloffreAction()
    {
        /* page administration/listappeloffre - Liste des appels d'offres suite aux demandes de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $appeloffre = new Application_Model_EuAppelOffreMapper();
		if($sessionutilisateur->code_groupe == "executante" || $sessionutilisateur->code_groupe == "executante_pays" || $sessionutilisateur->code_groupe == "executante_region" || $sessionutilisateur->code_groupe == "executante_secteur" || $sessionutilisateur->code_groupe == "executante_agence"){
        $this->view->entries = $appeloffre->fetchAll7($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);
		}else{
        $this->view->entries = $appeloffre->fetchAll8($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create, $sessionutilisateur->id_filiere);
		}
        $this->view->tabletri = 1;

    }


    public function suppappeloffreAction()
    {
        /* page administration/suppappeloffre - Suppression de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffre = new Application_Model_EuAppelOffre();
        $appeloffreM = new Application_Model_EuAppelOffreMapper();
        $appeloffreM->find($id, $appeloffre);
		
        $appeloffreM->delete($appeloffre->id_appel_offre);
		//unlink($appeloffre->descrip_appel_offre);	

        }

		$this->_redirect('/administration/listappeloffre');
    }


    public function publierappeloffreAction()
    {
        /* page administration/publierappeloffre - Publier l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffre = new Application_Model_EuAppelOffre();
        $appeloffreM = new Application_Model_EuAppelOffreMapper();
        $appeloffreM->find($id, $appeloffre);
		
        $appeloffre->setPublier($this->_request->getParam('publier'));
		$appeloffreM->update($appeloffre);
        }

		$this->_redirect('/administration/listappeloffre');
    }


    public function listpropositionAction()
    {
        /* page administration/listproposition - Liste des propositions de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffre = new Application_Model_EuAppelOffre();
        $appeloffreM = new Application_Model_EuAppelOffreMapper();
        $appeloffreM->find($id, $appeloffre);
		$this->view->appeloffre = $appeloffre;

        $proposition = new Application_Model_EuPropositionMapper();
        $this->view->entries = $proposition->fetchAll4($id);
    }

        $this->view->tabletri = 1;

    }

    public function listpropositionpreselectionAction()
    {
        /* page administration/listproposition - Liste des propositions pre-selectionnées de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffre = new Application_Model_EuAppelOffre();
        $appeloffreM = new Application_Model_EuAppelOffreMapper();
        $appeloffreM->find($id, $appeloffre);
		$this->view->appeloffre = $appeloffre;

        $proposition = new Application_Model_EuPropositionMapper();
        $this->view->entries = $proposition->fetchAll5($id);
    }

        $this->view->tabletri = 1;

    }

    public function listpropositionfinaleAction()
    {
        /* page administration/listpropositionfinale - Liste des propositions finales de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffre = new Application_Model_EuAppelOffre();
        $appeloffreM = new Application_Model_EuAppelOffreMapper();
        $appeloffreM->find($id, $appeloffre);
		$this->view->appeloffre = $appeloffre;

        $proposition = new Application_Model_EuPropositionMapper();
        $this->view->entries = $proposition->fetchAll8($id);
    }

        $this->view->tabletri = 1;

    }
	
    public function detailpropositionAction()
    {
        /* page administration/detailproposition - Détail d'une proposition de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $proposition = new Application_Model_EuProposition();
        $propositionM = new Application_Model_EuPropositionMapper();
        $propositionM->find($id, $proposition);
		$this->view->proposition = $proposition;
		
		
        $detail_proposition = new Application_Model_EuDetailPropositionMapper();
        $this->view->entries_detail_proposition = $detail_proposition->fetchAll2($proposition->id_proposition);

		
        $membre_proposition = new Application_Model_EuMembrePropositionMapper();
        $this->view->entries_membre_proposition = $membre_proposition->fetchAll2($proposition->id_proposition);
		
		$this->view->id = $id;
		
		
		
		
        $this->view->tabletri = 1;

        }else{
		$this->_redirect('/administration/listproposition/id/'.$proposition->id_appel_offre);			
			}

    }


    public function choixpropositionAction()
    {
        /* page administration/choixproposition - Choix final des propositions de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $proposition = new Application_Model_EuProposition();
        $propositionM = new Application_Model_EuPropositionMapper();
        $propositionM->find($id, $proposition);
		
		$resultSet = $propositionM->fetchAll6($proposition->id_appel_offre);
		foreach ($resultSet as $row) {
		$proposition2 = new Application_Model_EuProposition();
        $propositionM2 = new Application_Model_EuPropositionMapper();
        $propositionM2->find($row->id_proposition, $proposition2);	
        $proposition2->setChoix_proposition(0);
		$propositionM2->update($proposition2);
		}

        $proposition->setDisponible(1);
        $proposition->setChoix_proposition($this->_request->getParam('choix_proposition'));
		$propositionM->update($proposition);
		
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $_POST["portable_membre"], "Bienvenue dans le réseau MCNP! Votre numéro de membre est: " . $code);        
		
		}

		$this->_redirect('/administration/listpropositionpreselection/id/'.$proposition->id_appel_offre);
    }



    public function preselectionpropositionAction()
    {
        /* page administration/preselectionproposition - Pré-selection des propositions de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $proposition = new Application_Model_EuProposition();
        $propositionM = new Application_Model_EuPropositionMapper();
        $propositionM->find($id, $proposition);
		
        $proposition->setPreselection($this->_request->getParam('preselection'));
		$propositionM->update($proposition);
        }

		$this->_redirect('/administration/listproposition/id/'.$proposition->id_appel_offre);
    }


    public function disponiblepropositionAction()
    {
        /* page administration/disponibleproposition - Rendre disponible une proposition de l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $proposition = new Application_Model_EuProposition();
        $propositionM = new Application_Model_EuPropositionMapper();
        $propositionM->find($id, $proposition);
		
        $proposition->setDisponible($this->_request->getParam('disponible'));
		$propositionM->update($proposition);
        }

		$this->_redirect('/administration/listpropositionfinale/id/'.$proposition->id_appel_offre);
    }



    public function addpageAction()
    {
        /* page administration/addpage - Création de page libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['titre']) && $_POST['titre']!="" && isset($_POST['resume']) && $_POST['resume']!="") {
		
		if (isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="") {
        include("Transfert.php");
		$chemin	= "pages";
		$file = $_FILES['vignette']['name'];
		$file1='vignette';
		$page = $chemin."/".transfert($chemin,$file1);
		} else {$page = "";}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuPage();
        $ma = new Application_Model_EuPageMapper();
		
		$ordre_last = $ma->findOrdre($_POST['menu']) + 1;
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_page($compteur);
            $a->setTitre($_POST['titre']);
            $a->setResume($_POST['resume']);
            $a->setVignette($page);
            $a->setDescription($_POST['description']);
            $a->setMenu($_POST['menu']);
            $a->setMenusous($_POST['menusous']);
            $a->setPublier($_POST['publier']);
            $a->setOrdre($ordre_last);
            $a->setSpotlight(0);
            $a->setDeroulant(0);
            $a->setTitre_autre($_POST['titre_autre']);
            $a->setTitre_deroulant($_POST['titre_deroulant']);
            $a->setLiendirect($_POST['liendirect']);
            $ma->save($a);
			
		$this->_redirect('/administration/listpage');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editpageAction()
    {
        /* page administration/editpage - Modification de page libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['titre']) && $_POST['titre']!="" && isset($_POST['resume']) && $_POST['resume']!="") {
		
		if (isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="") {
        include("Transfert.php");
		$chemin	= "pages";
		$file = $_FILES['vignette']['name'];
		$file1='vignette';
		$page = $chemin."/".transfert($chemin,$file1);
		} else {$page = $_POST['vignetteold'];}

			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuPage();
        $ma = new Application_Model_EuPageMapper();
		$ma->find($_POST['id_page'], $a);
			
            $a->setTitre($_POST['titre']);
            $a->setResume($_POST['resume']);
            $a->setVignette($page);
            $a->setDescription($_POST['description']);
            $a->setMenu($_POST['menu']);
            $a->setMenusous($_POST['menusous']);
            $a->setTitre_autre($_POST['titre_autre']);
            $a->setTitre_deroulant($_POST['titre_deroulant']);
            $a->setLiendirect($_POST['liendirect']);
            $ma->update($a);
			
		$this->_redirect('/administration/listpage');
	}  else {	$this->view->error = "Les champs * sont obligatoires ...";	

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuPage();
        $ma = new Application_Model_EuPageMapper();
		$ma->find($id, $a);
		$this->view->page = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuPage();
        $ma = new Application_Model_EuPageMapper();
		$ma->find($id, $a);
		$this->view->page = $a;
            }
	}
	}



    public function listpageAction()
    {
        /* page administration/listpage - Liste des page libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $page = new Application_Model_EuPageMapper();
        $this->view->entries = $page->fetchAll();

        $this->view->tabletri = 1;

    }


    public function supppageAction()
    {
        /* page administration/supppage - Suppression de page libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $page = new Application_Model_EuPage();
        $pageM = new Application_Model_EuPageMapper();
        $pageM->find($id, $page);
		
        $pageM->delete($page->id_page);

        }

		$this->_redirect('/administration/listpage');
    }


    public function publierpageAction()
    {
        /* page administration/publierpage - Publier la page libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $page = new Application_Model_EuPage();
        $pageM = new Application_Model_EuPageMapper();
        $pageM->find($id, $page);
		
        $page->setPublier($this->_request->getParam('publier'));
		$pageM->update($page);
        }

		$this->_redirect('/administration/listpage');
    }


    public function spotlightpageAction()
    {
        /* page administration/spotlightpage - Spotlight sur une page libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $page = new Application_Model_EuPage();
        $pageM = new Application_Model_EuPageMapper();
        $pageM->find($id, $page);
		
        $page->setSpotlight($this->_request->getParam('spotlight'));
		$pageM->update($page);
        }

		$this->_redirect('/administration/listpage');
    }


    public function deroulantpageAction()
    {
        /* page administration/deroulantpage - Rendre déroulant de page libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $page = new Application_Model_EuPage();
        $pageM = new Application_Model_EuPageMapper();
        $pageM->find($id, $page);
		
        $page->setDeroulant($this->_request->getParam('deroulant'));
		$pageM->update($page);
        }

		$this->_redirect('/administration/listpage');
    }


    function monterpageAction()
    {
        /* page administration/monterpage - Ordre monter la page libre d'information */

        $id = (int) $this->_request->getParam('id');
        	if ($id > 0) {
			
        $page = new Application_Model_EuPage();
        $page_mapper = new Application_Model_EuPageMapper();
		$page_mapper->find($id, $page);
		$ordre = $page->ordre;
		
        $page1 = new Application_Model_EuPage();
        $page1_mapper = new Application_Model_EuPageMapper();
		$rows = $page1_mapper->findOrdreMonter($page->menu, $page->ordre);
		$page1_mapper->find($rows->id_page, $page1);
		$ordre1 = $page1->ordre;
			
        $page->setOrdre($ordre1);
		$page_mapper->update($page);

        $page1->setOrdre($ordre);
		$page1_mapper->update($page1);
			
		$this->_redirect('/administration/listpage');
        }
    }
	
	
    function descendrepageAction()
    {
        /* page administration/descendrepage - Ordre descendre la page libre d'information */

        $id = (int) $this->_request->getParam('id');
        	if ($id > 0) {
			
        $page = new Application_Model_EuPage();
        $page_mapper = new Application_Model_EuPageMapper();
		$page_mapper->find($id, $page);
		$ordre = $page->ordre;
		
        $page1 = new Application_Model_EuPage();
        $page1_mapper = new Application_Model_EuPageMapper();
		$rows = $page1_mapper->findOrdreDescendre($page->menu, $page->ordre);
		$page1_mapper->find($rows->id_page, $page1);
		$ordre1 = $page1->ordre;
			
        $page->setOrdre($ordre1);
		$page_mapper->update($page);

        $page1->setOrdre($ordre);
		$page1_mapper->update($page1);
		
		$this->_redirect('/administration/listpage');
        }
    }




    public function adddocumentAction()
    {
        /* page administration/adddocument - Ajout de document */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_type_document']) && $_POST['id_type_document']!="" && isset($_POST['nom_document']) && $_POST['nom_document']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_document($compteur);
            $a->setId_type_document($_POST['id_type_document']);
            $a->setNom_document($_POST['nom_document']);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            $a->setPublier($_POST['publier']);
            $a->setAccord(0);
            $a->setDate_creation($date_id->toString('yyyy-MM-dd'));
            $ma->save($a);
			
		$this->_redirect('/administration/listdocument');
		} else {  $this->view->error = "Choisir le document";  } 
		}
		
    }


    public function adddocument3Action()
    {
        /* page administration/adddocument - Ajout de document */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_type_document']) && $_POST['id_type_document']!="" && isset($_POST['nom_document']) && $_POST['nom_document']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_document($compteur);
            $a->setId_type_document($_POST['id_type_document']);
            $a->setNom_document($_POST['nom_document']);
            $a->setDescrip_document($document);
            $a->setDate_debut($_POST['date_debut']);
            $a->setDate_fin($_POST['date_fin']);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            $a->setPublier(1);
            $a->setAccord(0);
            $a->setDate_creation($date_id->toString('yyyy-MM-dd'));
            $ma->save($a);
			
		$this->_redirect('/administration/listdocument');
		} else {  $this->view->error = "Choisir le document";  } 
		}
		
    }
	
    public function editdocumentAction()
    {
        /* page administration/editdocument - Modification de document */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['nom_document']) && $_POST['nom_document']!="" && isset($_POST['date_debut']) && $_POST['date_debut']!="" && isset($_POST['date_fin']) && $_POST['date_fin']!="") {
		
		include("Transfert.php");
		if (isset($_FILES['descrip_document']['name']) && $_FILES['descrip_document']['name']!="") {
		$chemin	= "documents";
		$file = $_FILES['descrip_document']['name'];
		$file1='descrip_document';
		$document = $chemin."/".transfert($chemin,$file1);
		} else {$document = $_POST['descrip_documentold'];}

			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
		$ma->find($_POST['id_document'], $a);
			
            $a->setNom_document($_POST['nom_document']);
            $a->setDescrip_document($document);
            $a->setDate_debut($_POST['date_debut']);
            $a->setDate_fin($_POST['date_fin']);
            $ma->update($a);
			
		$this->_redirect('/administration/listdocument');
	}  else {	$this->view->error = "Les champs * sont obligatoires ...";	

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
		$ma->find2($id, $a);
		$this->view->document = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
		$ma->find2($id, $a);
		$this->view->document = $a;
            }
	}
	}

    public function editdocument3Action()
    {
        /* page administration/editdocument - Modification de document */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['nom_document']) && $_POST['nom_document']!="" && isset($_POST['date_debut']) && $_POST['date_debut']!="" && isset($_POST['date_fin']) && $_POST['date_fin']!="") {
		
		include("Transfert.php");
		if (isset($_FILES['descrip_document']['name']) && $_FILES['descrip_document']['name']!="") {
		$chemin	= "documents";
		$file = $_FILES['descrip_document']['name'];
		$file1='descrip_document';
		$document = $chemin."/".transfert($chemin,$file1);
		} else {$document = $_POST['descrip_documentold'];}

			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
		$ma->find($_POST['id_document'], $a);
			
            $a->setNom_document($_POST['nom_document']);
            $a->setDescrip_document($document);
            $a->setDate_debut($_POST['date_debut']);
            $a->setDate_fin($_POST['date_fin']);
            $ma->update($a);
			
		$this->_redirect('/administration/listdocument');
	}  else {	$this->view->error = "Les champs * sont obligatoires ...";	

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
		$ma->find2($id, $a);
		$this->view->document = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
		$ma->find2($id, $a);
		$this->view->document = $a;
            }
	}
	}


    public function listdocumentAction()
    {
        /* page administration/listdocument - Liste des documents */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $document = new Application_Model_EuDocumentMapper();
        $this->view->entries = $document->fetchAll50($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);

        $this->view->tabletri = 1;

    }


    public function listdocument2Action()
    {
        /* page administration/listdocument2 - Liste des documents passés*/

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $document = new Application_Model_EuDocumentMapper();
        $this->view->entries = $document->fetchAll51($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);

        $this->view->tabletri = 1;

    }
	
    public function listdocument3Action()
    {
        /* page administration/listdocument - Liste des documents */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $document = new Application_Model_EuDocumentMapper();
        $this->view->entries = $document->fetchAll50($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);

        $this->view->tabletri = 1;

    }

    public function suppdocumentAction()
    {
        /* page administration/suppdocument - Suppression d'un document */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $document = new Application_Model_EuDocument();
        $documentM = new Application_Model_EuDocumentMapper();
        $documentM->find($id, $document);
		
        $documentM->delete($document->id_document);
		//unlink($document->descrip_document);	

        }

		$this->_redirect('/administration/listdocument');
    }


    public function publierdocumentAction()
    {
        /* page administration/publierdocument - Publier un document */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $document = new Application_Model_EuDocument();
        $documentM = new Application_Model_EuDocumentMapper();
        $documentM->find($id, $document);
		
        $document->setPublier($this->_request->getParam('publier'));
		$documentM->update($document);
        }

		$this->_redirect('/administration/listdocument');
    }






    public function addagrementAction()
    {
        /* page administration/addagrement - Ajout d'un agrement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		$t_filiere = new Application_Model_DbTable_EuFiliere();
		$this->view->entries = $t_filiere->fetchAll();
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_type_agrement']) && $_POST['id_type_agrement']!="" && isset($_POST['id_type_creneau']) && $_POST['id_type_creneau']!="" && isset($_POST['id_filiere']) && $_POST['id_filiere']!="" && isset($_POST['id_type_acteur']) && $_POST['id_type_acteur']!="" && isset($_POST['num_agrement']) && $_POST['num_agrement']!="" && isset($_POST['cel_agrement']) && $_POST['cel_agrement']!="" && isset($_POST['libelle_agrement']) && $_POST['libelle_agrement']!="" && isset($_POST['code_membre_morale_agrement']) && $_POST['code_membre_morale_agrement']!="" && isset($_FILES['desc_agrement']['name']) && $_FILES['desc_agrement']['name']!="") {
		
		include("Transfert.php");
		$chemin	= "agrements";
		$file = $_FILES['desc_agrement']['name'];
		$file1='desc_agrement';
		$agrement = $chemin."/".transfert($chemin,$file1);
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAgrement();
        $ma = new Application_Model_EuAgrementMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_agrement($compteur);
            $a->setId_type_agrement($_POST['id_type_agrement']);
            $a->setNum_agrement($_POST['num_agrement']);
            $a->setLibelle_agrement($_POST['libelle_agrement']);
            $a->setDesc_agrement($agrement);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            //$a->setCode_membre_morale($_POST['code_membre_morale']);
            $a->setCode_membre_morale_agrement($_POST['code_membre_morale_agrement']);
			$a->setDate_agrement($date_id->toString('yyyy-MM-dd'));
            $a->setCel_agrement($_POST['cel_agrement']);
            $a->setId_type_acteur($_POST['id_type_acteur']);
            $a->setId_type_creneau($_POST['id_type_creneau']);
            $a->setId_filiere($_POST['id_filiere']);
            $ma->save($a);
			
			$typeagrementM = new Application_Model_EuTypeAgrementMapper();
$typeagrement = new Application_Model_EuTypeAgrement();
$typeagrementM->find($_POST['id_type_agrement'], $typeagrement);

$typeacteurM = new Application_Model_EuTypeActeurMapper();
$typeacteur = new Application_Model_EuTypeActeur();
$typeacteurM->find($_POST['id_type_acteur'], $typeacteur);
			
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $_POST["cel_agrement"], "Vous venez d'avoir un : ".$typeagrement->libelle_type_agrement.", ".$typeacteur->lib_type_acteur.", Numero : ".$_POST['num_agrement']);
			
			
		$this->_redirect('/administration/listagrement');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editagrementAction()
    {
        /* page administration/editagrement - Modification d'un agrement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_type_agrement']) && $_POST['id_type_agrement']!="" && isset($_POST['id_type_creneau']) && $_POST['id_type_creneau']!="" && isset($_POST['id_filiere']) && $_POST['id_filiere']!="" && isset($_POST['id_type_acteur']) && $_POST['id_type_acteur']!="" && isset($_POST['num_agrement']) && $_POST['num_agrement']!="" && isset($_POST['cel_agrement']) && $_POST['cel_agrement']!="" && isset($_POST['libelle_agrement']) && $_POST['libelle_agrement']!="" && isset($_POST['code_membre_morale_agrement']) && $_POST['code_membre_morale_agrement']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['desc_agrement']['name']) && $_FILES['desc_agrement']['name']!=""){
		$chemin	= "agrements";
		$file = $_FILES['desc_agrement']['name'];
		$file1='desc_agrement';
		$agrement = $chemin."/".transfert($chemin,$file1);
		} else {$agrement = $_POST['desc_agrement_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAgrement();
        $ma = new Application_Model_EuAgrementMapper();
		$ma->find($_POST['id_agrement'], $a);
			
            $a->setId_type_agrement($_POST['id_type_agrement']);
            $a->setNum_agrement($_POST['num_agrement']);
            $a->setLibelle_agrement($_POST['libelle_agrement']);
            $a->setDesc_agrement($agrement);
            $a->setCode_membre_morale_agrement($_POST['code_membre_morale_agrement']);
            $a->setId_type_acteur($_POST['id_type_acteur']);
            $a->setCel_agrement($_POST['cel_agrement']);
            $a->setId_type_creneau($_POST['id_type_creneau']);
            $a->setId_filiere($_POST['id_filiere']);
            $ma->update($a);
			
		$this->_redirect('/administration/listagrement');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAgrement();
        $ma = new Application_Model_EuAgrementMapper();
		$ma->find($id, $a);
		$this->view->agrement = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAgrement();
        $ma = new Application_Model_EuAgrementMapper();
		$ma->find($id, $a);
		$this->view->agrement = $a;
            }
	}
	}




    public function listagrementAction()
    {
        /* page administration/listagrement - Liste des agrements */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $agrement = new Application_Model_EuAgrementMapper();
		
if($sessionutilisateur->code_groupe == "agrement_filiere"){
        $this->view->entries = $agrement->fetchAll4IdFiliere($sessionutilisateur->id_filiere);
}else{
        $this->view->entries = $agrement->fetchAll2IdFiliere($sessionutilisateur->id_filiere, $sessionutilisateur->id_utilisateur);
}		

        $this->view->tabletri = 1;

    }


    public function list2agrementAction()
    {
        /* page administration/list2agrement - Liste des agrements deja utilisés */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $agrement = new Application_Model_EuAgrementMapper();
		
if($sessionutilisateur->code_groupe == "agrement_filiere"){
        $this->view->entries = $agrement->fetchAll6IdFiliere($sessionutilisateur->id_filiere);
}else{
        $this->view->entries = $agrement->fetchAll5IdFiliere($sessionutilisateur->id_filiere, $sessionutilisateur->id_utilisateur);
}		

        $this->view->tabletri = 1;

    }

    public function suppagrementAction()
    {
        /* page administration/suppagrement - Suppression des agrements */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $agrement = new Application_Model_EuAgrement();
        $agrementM = new Application_Model_EuAgrementMapper();
        $agrementM->find($id, $agrement);
		
        $agrementM->delete($agrement->id_agrement);
		//unlink($agrement->desc_agrement);	

        }

		$this->_redirect('/administration/listagrement');
    }
	
	
	
	
	public function misechaineAction()   {
	       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           //$this->_helper->layout->disableLayout();
           $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
           if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
	
	       $t_zone = new Application_Model_DbTable_EuZone();
           $zones = $t_zone->fetchAll();
           $this->view->zones = $zones;
           $t_pays = new Application_Model_DbTable_EuPays();
           $pays = $t_pays->fetchAll();
           $this->view->pays = $pays;
           $t_region = new Application_Model_DbTable_EuRegion();
           $regions = $t_region->fetchAll();
           $this->view->regions = $regions;
           $t_prefecture = new Application_Model_DbTable_EuPrefecture();
           $prefectures = $t_prefecture->fetchAll();
           $this->view->prefectures = $prefectures;
           $t_canton = new Application_Model_DbTable_EuCanton();
           $cantons = $t_canton->fetchAll();
           $this->view->cantons = $cantons;
		   
		   $request = $this->getRequest();
		   if($request->isPost ())  {
		     $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try  {
			      $membre = new Application_Model_EuMembreMorale();
                  $mapper = new Application_Model_EuMembreMoraleMapper();
			      $code = $request->getParam("code_membre");
			      $agrement_filiere  =  $request->getParam("numero_agrement_filiere");
                  $agrement_acnev    =  $request->getParam("numero_agrement_acnev");
                  $agrement_technopole =  $request->getParam("numero_agrement_technopole");
					
				  $code_zone = $request->getParam("code_zone");
		          $id_pays = $request->getParam("id_pays");
		          $id_region = $request->getParam("id_region");
		          $id_prefecture = $request->getParam("id_prefecture");
		          $id_canton = $request->getParam("id_canton");
					
			      $id_type_acteur = "";
			      $id_type_creneau = "";
			      $id_filiere = "";
			      $date_id = new Zend_Date(Zend_Date::ISO_8601);
                  $date_idd = clone $date_id;
			      $agrement_mapper = new Application_Model_EuAgrementMapper();
                  $agrement        = new Application_Model_EuAgrement();
			      
				  $compte = new Application_Model_EuCompte();
                  $map_compte = new Application_Model_EuCompteMapper();
			
			      $contrat = new Application_Model_EuContrat();
                  $map_contrat = new Application_Model_EuContratMapper();
					
				  $findmembre = $mapper->find($code,$membre);
				  if($findmembre == false) {
				    $db->rollBack();
                    $this->view->message = " Ce membre est inexistant ..."; 
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;				   
				    return;
				  }
				  
				  $findagrement = $agrement_mapper->findagrementtechnobymembre($code);
				  if($findagrement != false) {
				    $db->rollBack();
                    $this->view->message = "La mise sur chaine de ce membre est dejà effectuée ..."; 
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;				   
				    return;
				  }
				  
					
				  $trouveagrementfiliere = $agrement_mapper->findagrementfiliere($agrement_filiere);
                  $trouveagrementacnev = $agrement_mapper->findagrementacnev($agrement_acnev);
                  $trouveagrementtechno = $agrement_mapper->findagrementtechno($agrement_technopole);
				  $code_agence = substr($code,0,12);
				  $table = new Application_Model_DbTable_EuActeur();
                  $selection = $table->select();
                  $selection->where('code_membre like ?',$code_agence.'%');
                  $selection->where('type_acteur like ?','gac_surveillance');
                  $resultat = $table->fetchAll($selection);
                  $trouvacteursur = $resultat->current();
                  $code_acteur = $trouvacteursur->code_acteur;
                  $acteur =  $code_acteur;
					
				  if($trouveagrementfiliere != false) {
                    $result = $agrement_mapper->find($trouveagrementfiliere->getId_agrement(),$agrement);
				    $id_type_acteur = $agrement->getId_type_acteur();
					$id_type_creneau = $agrement->getId_type_creneau();
					$id_filiere = $agrement->getId_filiere();
                    $agrement->setCode_membre_morale($code);
                    $agrement_mapper->update($agrement);
                  } else {
				    $db->rollBack();
                    $this->view->message = "Le numéro agrément filière  ".$agrement_filiere."  est invalide ...";
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;					
				    return;
				  }
				
				
				  if($trouveagrementacnev != false) {
                     $result = $agrement_mapper->find($trouveagrementacnev->getId_agrement(),$agrement);
                     $agrement->setCode_membre_morale($code);
                     $agrement_mapper->update($agrement);    
                  } else {
				     $db->rollBack();
                     $this->view->message = "Le numéro agrément acnev  ".$agrement_acnev."  est invalide ...";
                     $this->view->code_membre = $code;
					 $this->view->numero_agrement_filiere = $agrement_filiere;
					 $this->view->numero_agrement_acnev = $agrement_acnev;
					 $this->view->numero_agrement_technopole = $agrement_technopole;					
				     return;
				  }
            
                  if($trouveagrementtechno != false) {
                    $result = $agrement_mapper->find($trouveagrementtechno->getId_agrement(),$agrement);
                    $agrement->setCode_membre_morale($code);
                    $agrement_mapper->update($agrement); 
                  } else {
				    $db->rollBack();
                    $this->view->message = "Le numéro agrément technopole  ".$agrement_technopole."  est invalide ...";
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;			   
				    return;
				  }
				   
				  // Mise à jour des tables
				  $filiere =  new Application_Model_EuFiliere();
                  $map_filiere = new Application_Model_EuFiliereMapper();
                  $find_filiere = $map_filiere->find($id_filiere,$filiere);
				   
				  //insertion dans la table eu_acteur_creneau
                  $cm    = new Application_Model_EuActeurCreneauMapper();
                  $acren = new Application_Model_EuActeurCreneau();
				  $rep_mapper = new Application_Model_EuRepresentationMapper();
				  $rep = $rep_mapper->findbyrep($code);
				
                  
				  //Insertion dans la table eu_acteur
				  $t_acteur = new Application_Model_DbTable_EuActeur();
				  $c_acteur = new Application_Model_EuActeur();
				  
                  $table = new Application_Model_DbTable_EuActeur();
				  $model_acteur = new Application_Model_EuActeur();
				  $mapper_acteur = new Application_Model_EuActeurMapper();
				  $findacteur  =   $mapper_acteur->findByActeur($code);
				  $findcreneau =   $cm->findActeurByMembre($code);
				  
				  
                  $select = $table->select();
                  $select->where('code_acteur like ?',$acteur);
                  $resultSet = $table->fetchAll($select);
                  $ligneacteur = $resultSet->current();
                  $count = $c_acteur->findConuter() + 1;
				  
				  if($findcreneau == NULL) {
				     $acren->setNom_acteur($membre->getRaison_sociale());
                     $acren->setCode_membre($code);
                     $acren->setId_type_acteur($id_type_acteur);
              
                     $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                     $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                     $acren->setId_utilisateur($sessionutilisateur->id_utilisateur);
                     $acren->setGroupe(null);
                     $acren->setCode_creneau(NULL);
                     $acren->setCode_gac_filiere(NULL);
                     $acren->setCode_gac(NULL);
                
				     $code_zone =  substr($membre->getCode_agence(),0,3);
                     $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                     if($code_acteur == NULL) {
                       $code_acteur = 'A' . $code_zone . '0001';
                     } else {
                       $num_ordre = substr($code_acteur, -4);
                       $num_ordre++;
                       $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                     }
					 
                     $acren->setCode_acteur($code_acteur);
                     $acren->setId_filiere($id_filiere);
                     $cm->save($acren);  
				 
				  } else {
				  
				     $trouvercreneau = $cm->find($findcreneau->code_acteur,$acren);
				     $acren->setNom_acteur($membre->getRaison_sociale());
                     $acren->setCode_membre($code);
                     $acren->setId_type_acteur($id_type_acteur);
              
                     $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                     $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                     $acren->setId_utilisateur($sessionutilisateur->id_utilisateur);
					 $acren->setId_filiere($id_filiere);
                     $cm->update($acren);
					 
				  }
				  
				  if($findacteur == false) {
				     $c_acteur->setId_acteur($count)
                              ->setCode_acteur(NULL)
                              ->setCode_division($filiere->getCode_division())
                              ->setCode_membre($code)
                              ->setId_utilisateur($sessionutilisateur->id_utilisateur)
                              ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				      if($id_type_acteur == 3) {
					     $c_acteur->setCode_activite('DETAILLANT');
			          } else if($id_type_acteur == 2) {
					     $c_acteur->setCode_activite('SEMI-GROSSISTE');
			          } else if($id_type_acteur == 1) {
					     $c_acteur->setCode_activite('GROSSISTE');
				      }
					  
			          $c_acteur->setCode_source_create("SOURCE");
                      $c_acteur->setCode_monde_create("MONDE");
                      $c_acteur->setCode_zone_create($code_zone);
                      $c_acteur->setId_pays($id_pays);
                      $c_acteur->setId_region($id_region);
                      $c_acteur->setId_prefecture($id_prefecture);
                      $c_acteur->setId_canton($id_canton);
					  
					  if($id_filiere == 4) {
                         $c_acteur->setType_acteur("PBF");
					  } else {
					     $c_acteur->setType_acteur(NULL);
					  }
                    
                      $c_acteur->setCode_gac_chaine($acteur);
                      $t_acteur->insert($c_acteur->toArray());
				
				      // Mise à jour de la table eu_utilisateur
                      $user_mapper = new Application_Model_EuUtilisateurMapper();
                      $userin = new Application_Model_EuUtilisateur();
				      $trouveuser = false;
				      $code_type_acteur = $membre->getCode_type_acteur();
				
				      $finduser = $user_mapper->findByMembre($code,"personne_morale");
				      if($finduser != false) {
				         $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				      }
				
				      if($trouveuser) {
					  
					     if($id_filiere == 4) {
								      if($id_type_acteur == 3) {
									     $userin->setCode_groupe('pbf_detaillant');
                                         $userin->setCode_gac_filiere('pbf_detaillant');
                                         $userin->setCode_groupe_create('pbf_detaillant');
									  } elseif($id_type_acteur == 2) {
									     $userin->setCode_groupe('pbf_semi_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_semi_grossiste');
									  } elseif($id_type_acteur == 1) {
									     $userin->setCode_groupe('pbf_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_grossiste');
									  }
								   
								   } else {
					  
				         if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                            $userin->setCode_groupe('oe_detaillant');
                            $userin->setCode_gac_filiere('oe_detaillant');
                            $userin->setCode_groupe_create('oe_detaillant');
                         } elseif($id_type_acteur == 3 && $code_type_acteur == 'PEI') {
                            $userin->setCode_groupe('oe_detaillant');
                            $userin->setCode_gac_filiere('oe_detaillant');
                            $userin->setCode_groupe_create('oe_detaillant');
                         } elseif($id_type_acteur == 3 && $code_type_acteur == 'OE') {
                            $userin->setCode_groupe('oe_detaillant');
                            $userin->setCode_gac_filiere('oe_detaillant');
                            $userin->setCode_groupe_create('oe_detaillant');
                         } 
                         elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                            $userin->setCode_groupe('ose_detaillant');
                            $userin->setCode_gac_filiere('ose_detaillant');
                            $userin->setCode_groupe_create('ose_detaillant');
                         } elseif($id_type_acteur == 3 && $code_type_acteur == 'POSE') {
                            $userin->setCode_groupe('ose_detaillant');
                            $userin->setCode_gac_filiere('ose_detaillant');
                            $userin->setCode_groupe_create('ose_detaillant');
                         }
                         elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                            $userin->setCode_groupe('oe_semi_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_semi_grossiste');
                         } elseif($id_type_acteur == 2  && $code_type_acteur == 'PEI') {
                            $userin->setCode_groupe('oe_semi_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_semi_grossiste');
                        } elseif($id_type_acteur == 2  && $code_type_acteur == 'OE') {
                            $userin->setCode_groupe('oe_semi_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_semi_grossiste');
                        } 
						elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                            $userin->setCode_groupe('ose_semi_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('ose_semi_grossiste');
                        } elseif($id_type_acteur == 2  && $code_type_acteur == 'POSE') {
                            $userin->setCode_groupe('ose_semi_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('ose_semi_grossiste');
                        } 
                        elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                            $userin->setCode_groupe('oe_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_grossiste');
                        } elseif($id_type_acteur == 1  && $code_type_acteur == 'PEI') {
                            $userin->setCode_groupe('oe_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_grossiste');
                        } elseif($id_type_acteur == 1  && $code_type_acteur == 'OE') {
                            $userin->setCode_groupe('oe_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_grossiste');
                        }
                        elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                            $userin->setCode_groupe('ose_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('ose_grossiste');
                         } elseif($id_type_acteur == 1  && $code_type_acteur == 'POSE') {
                            $userin->setCode_groupe('ose_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('ose_grossiste');
                         }
						 }
				         $userin->setId_filiere($id_filiere);
					     $userin->setId_canton($id_canton);
                         $user_mapper->update($userin);
				     }
				  
				  } else {
				     $trouveracteur = $mapper_acteur->find($findacteur->id_acteur,$model_acteur);
				     $code_groupe = "";
					 // Mise à jour de la table eu_utilisateur
                      $user_mapper = new Application_Model_EuUtilisateurMapper();
                      $userin = new Application_Model_EuUtilisateur();
				      $trouveuser = false;
				      $code_type_acteur = $membre->getCode_type_acteur();
					  
					 if($model_acteur->getCode_activite == "DETAILLANT"  && ($code_type_acteur == 'EI' || $code_type_acteur == 'PEI' || $code_type_acteur == 'OE')) {
					    $code_groupe = "oe_detaillant";
					 } elseif($model_acteur->getCode_activite == "DETAILLANT"  && ($code_type_acteur == 'OSE' || $code_type_acteur == 'POSE')) {
					    $code_groupe = "ose_detaillant";
					 } elseif($model_acteur->getCode_activite == "SEMI-GROSSISTE"  && ($code_type_acteur == 'EI' || $code_type_acteur == 'PEI' || $code_type_acteur == 'OE')) {
					    $code_groupe = "oe_semi_grossiste";
						
					 } elseif($model_acteur->getCode_activite == "SEMI-GROSSISTE"  && ($code_type_acteur == 'OSE' || $code_type_acteur == 'POSE')) {
					    $code_groupe = "ose_semi_grossiste";
					 } elseif($model_acteur->getCode_activite == "GROSSISTE"  && ($code_type_acteur == 'EI' || $code_type_acteur == 'PEI' || $code_type_acteur == 'OE')) {
					    $code_groupe = "oe_grossiste";
						
					 } elseif($model_acteur->getCode_activite == "GROSSISTE"  && ($code_type_acteur == 'OSE' || $code_type_acteur == 'POSE')) {
					    $code_groupe = "ose_grossiste";
					 }
					 
					 
				
				      $finduser = $user_mapper->findByMembre($code,$code_groupe);
				      if($finduser != false) {
				         $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				      }
				
				      if($trouveuser) {
				         if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                            $userin->setCode_groupe('oe_detaillant');
                            $userin->setCode_gac_filiere('oe_detaillant');
                            $userin->setCode_groupe_create('oe_detaillant');
                         } 
                         elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                            $userin->setCode_groupe('ose_detaillant');
                            $userin->setCode_gac_filiere('ose_detaillant');
                            $userin->setCode_groupe_create('ose_detaillant');
                         }
                         elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                            $userin->setCode_groupe('oe_semi_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_semi_grossiste');
                         } 
						 elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                            $userin->setCode_groupe('ose_semi_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('ose_semi_grossiste');
                         } 
                         elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                            $userin->setCode_groupe('oe_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('oe_grossiste');
                         }
                         elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                            $userin->setCode_groupe('ose_grossiste');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('ose_grossiste');
                         }
				         $userin->setId_filiere($id_filiere);
					     $userin->setId_canton($id_canton);
                         $user_mapper->update($userin);
				     }
					 
				     $trouveracteur = $mapper_acteur->find($findacteur->id_acteur,$model_acteur);
                     $model_acteur->setCode_acteur(NULL)
                                  ->setCode_division($filiere->getCode_division())
                                  ->setCode_membre($code)
                                  ->setId_utilisateur($sessionutilisateur->id_utilisateur)
                                  ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				     if($id_type_acteur == 3) {
					   $model_acteur->setCode_activite('DETAILLANT');
			         } else if($id_type_acteur == 2) {
					   $model_acteur->setCode_activite('SEMI-GROSSISTE');
			         } else if($id_type_acteur == 1) {
					   $model_acteur->setCode_activite('GROSSISTE');
				     }
					  
			         $model_acteur->setCode_source_create("SOURCE");
                     $model_acteur->setCode_monde_create("MONDE");
                     $model_acteur->setCode_zone_create($code_zone);
                     $model_acteur->setId_pays($id_pays);
                     $model_acteur->setId_region($id_region);
                     $model_acteur->setId_prefecture($id_prefecture);
                     $model_acteur->setId_canton($id_canton);
                     $model_acteur->setType_acteur(null);
                    
                     $model_acteur->setCode_gac_chaine($acteur);
					 $mapper_acteur->update($model_acteur);
					 
				  }
				  
				  // creation du TE
				  $prk = new Application_Model_EuPrk();
                  $m_prk = new Application_Model_EuPrkMapper();
							   	   
                  $te   = new Application_Model_EuTegc();
				  $m_te = new Application_Model_EuTegcMapper();
				  $code_te = "";
					  
				  $eutegc = new Application_Model_DbTable_EuTegc();
                  $select = $eutegc->select();
				  $select->where("code_membre like ? ", $code);
                  $rowseutegc = $eutegc->fetchAll($select);  
				  if(count($rowseutegc) <= 0)  {
					 $code_te = $m_te->getLastTegcByMembre($code);
					 if($code_te == NULL) {
			           $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			         } else {
			           $num_ordre = substr($code_te, -5);
                       $num_ordre++;
                       $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			         }
								  
					 $te->setCode_tegc($code_te);
			         $te->setId_filiere($id_filiere);
			         $te->setMdv(12);
			         $te->setTranche_payement(1);
			         $te->setCode_membre($code);
                     $te->setCode_membre_physique(null);								  
			         $te->setMontant(0);
			         $te->setMontant_utilise(0);
			         $te->setSolde_tegc(0);
			         $te->setId_utilisateur($sessionutilisateur->id_utilisateur);
			         $te->setNom_tegc($nom_tegc);
			         $te->setNom_produit($filiere->getNom_filiere());
			         $te->setDate_tegc($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
					 $te->setType_tegc("DISTRIBUTEUR");
                     $te->setRecurrent_illimite(0);
					 $te->setRecurrent_limite(0);
					 $te->setNonrecurrent(1);
					 $te->setPeriode1(0);
					 $te->setPeriode2(0);
					 $te->setPeriode3(0);
					 $te->setFormel(0);
					 $te->setRegime_tva(0);
					 $te->setSpecial(0);
					 $te->setOrdinaire(0);
					 $te->setSubvention(0);
										
					 $te->setCode_zone($request->getParam("code_zone"));
				     $te->setId_pays($request->getParam("id_pays"));
				     $te->setId_region($request->getParam("id_region"));
				     $te->setId_prefecture($request->getParam("id_prefecture"));
				     $te->setId_canton($request->getParam("id_canton"));

                     $m_te->save($te);

                     $id_prk = $m_prk->findConuter() + 1;
					 $prk->setId_prk($id_prk);
					 $prk->setCode_tegc($code_te);
					 $prk->setValeur(null);
					 $m_prk->save($prk);  
					  
				 }
				  
				  
				 //Mise à jour de la table eu_membre_morale
				 $membre->setId_filiere($id_filiere);
				 $mapper->update($membre);

                 $code_compte = 'NB-TPAGCP-'.$code;
				 $res = $map_compte->find($code_compte,$compte);
				
				 if(!$res) {
                    $compte->setCode_cat('TPAGCP')
                           ->setCode_compte($code_compte)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setCode_type_compte('NB')
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte('TPAGCP')
                           ->setSolde(0);
                    $map_compte->save($compte); 
                }
				
				$code_comptets = 'NB-TSGCP-'.$code;
				$rests = $map_compte->find($code_comptets,$compte);
				
				if(!$rests) {
                    $compte->setCode_cat('TSGCP')
                           ->setCode_compte($code_comptets)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setCode_type_compte('NB')
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte('TSGCP')
                           ->setSolde(0);
                    $map_compte->save($compte); 
                }
				
                //Mise à jour de la table eu_contrat
				$findcontrat = $map_contrat->findByMembre($code);
				$trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				$contrat->setId_type_creneau($id_type_creneau);
				$contrat->setId_type_acteur($id_type_acteur);
				$map_contrat->update($contrat);

                $db->commit();
				$this->view->message = "Mise sur chaine bien effectuée ...";				
					
			   } catch(Exception $exc) {
		           $db->rollback();
		           $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
	           }
		   
		   }   
	
	}
	
	
	public function listmisechaineAction()  {
	   /* page administration/listacteurinterim - Liste des acteurs intérimaires */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	   if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
           
	   $tabela = new Application_Model_DbTable_EuActeurCreneau();
	   $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
	   $select->setIntegrityCheck(false);
	   $select->join('eu_type_acteur','eu_type_acteur.id_type_acteur = eu_acteurs_creneaux.id_type_acteur');
	   $select->join('eu_filiere','eu_filiere.id_filiere = eu_acteurs_creneaux.id_filiere');
		   
	   $acteurs = $tabela->fetchAll($select);
		   
	   $this->view->entries = $acteurs;		   

       $this->view->tabletri = 1;
	
	}
	
	


    public function focusacteurcreneauAction()
    {
        /* page administration/focusacteurcreneau - Publier une focusacteurcreneau */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $code = $this->_request->getParam('code');
        if (isset($code) && $code != "") {

        $acteurcreneau = new Application_Model_EuActeurCreneau();
        $acteurcreneauM = new Application_Model_EuActeurCreneauMapper();
        $acteurcreneauM->find($code, $acteurcreneau);
        
        $acteurcreneau->setFocus($this->_request->getParam('focus'));
        $acteurcreneauM->update($acteurcreneau);
        }

        $this->_redirect('/administration/listmisechaine');
    }


    
	 
	 public function creeruserAction()  {
	     $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		 //$this->_helper->layout->disableLayout();
		 $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

		 //if(!isset($sessionmembre->code_membre)) {
			//$this->_redirect('/');
		 //}
		 
		 $userin = new Application_Model_EuUtilisateur();
         $mapper = new Application_Model_EuUtilisateurMapper();
		 
		 $t_zone = new Application_Model_DbTable_EuZone();
         $zones = $t_zone->fetchAll();
         $this->view->zones = $zones;
         $t_pays = new Application_Model_DbTable_EuPays();
         $pays = $t_pays->fetchAll();
         $this->view->pays = $pays;
         $t_region = new Application_Model_DbTable_EuRegion();
         $regions = $t_region->fetchAll();
         $this->view->regions = $regions;
         $t_prefecture = new Application_Model_DbTable_EuPrefecture();
         $prefectures = $t_prefecture->fetchAll();
         $this->view->prefectures = $prefectures;
         $t_canton = new Application_Model_DbTable_EuCanton();
         $cantons = $t_canton->fetchAll();
         $this->view->cantons = $cantons;
		 
		 $request = $this->getRequest();
		 if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
		        $find_user = $mapper->findLogin($request->getParam("login"));
				//$utilisateur = new Application_Model_EuUtilisateur();
				//$trouve_user = $mapper->find($sessionmembre->id_utilisateur,$utilisateur);
				$nom = $request->getParam("nom");
				$prenom = $request->getParam("prenom");
				$login = $request->getParam("login");
				$pwd = $request->getParam("pwd");
				$pwd1 = $request->getParam("pwd1");
				$id_pays = $request->getParam("id_pays");
				$id_canton = $request->getParam("id_canton");
				$code_membre = $request->getParam("code_membre");
				
				$date_id = Zend_Date::now();
				if ($find_user != false) {
                    $error = 'Ce login existe déjà.';
                    $this->view->error = $error;
                    $this->view->nom = $request->getParam("nom");
                    $this->view->prenom = $request->getParam("prenom");
                    $this->view->login = $request->getParam("login");
                    return;
                } elseif ($pwd != $pwd1) {
                    $error = 'Erreur de confirmation du mot de passe.';
                    $this->view->error = $error;
                    $this->view->nom = $request->getParam("nom");
                    $this->view->prenom = $request->getParam("prenom");
                    $this->view->login = $request->getParam("login");
                    return;
               } 
			   elseif (stripos($login, " ") !== false) {
                    $error = "Le Login ne doit pas contenir d'espace";
                    $this->view->error = $error;
                    $this->view->nom = $request->getParam("nom");
                    $this->view->prenom = $request->getParam("prenom");
                    $this->view->login = $request->getParam("login");
                    return;
               }
			   
			   //insertion dans la table eu_utilisateur
			   $id_user = $mapper->findConuter() + 1;
               $userin->setId_utilisateur($id_user);
               $userin->setId_utilisateur_parent(NULL); 
               $userin->setPrenom_utilisateur($prenom);
               $userin->setNom_utilisateur($nom);
               $userin->setLogin(trim($login));
               $userin->setPwd(md5($pwd));
               $userin->setDescription(null);
               $userin->setUlock(0);
               $userin->setCh_pwd_flog(0);
               $userin->setCode_groupe('cm');
               $userin->setConnecte(0);
               $userin->setCode_agence(null);    		 
               $userin->setCode_secteur(null);
               $userin->setCode_zone($code_zone);		
               $userin->setId_filiere(NULL);
			   $userin->setCode_acteur(NULL);	   
			   $userin->setCode_gac_filiere(null);
			   $userin->setCode_groupe_create(NULL);
			   $userin->setCode_membre($code_membre);
			   
			   $userin->setId_pays($id_pays);
               $userin->setId_canton($id_canton);
               $userin->setCode_tegc(NULL);			   
               $mapper->save($userin);
				  
               $db->commit();
			   $sessionutilisateur->errorlogin = "Operation bien effectuee ...";
			   $this->_redirect('/administration/creeruser');
		 
		    } catch (Exception $exc) {				   
			    $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
		    }
		 
		 }
	  
	  }
	
	


    public function addlicenceAction() {
        /* page administration/addlicence - Ajout de licence */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['num_licence']) && $_POST['num_licence']!="" && isset($_POST['libelle_licence']) && $_POST['libelle_licence']!="" && isset($_FILES['desc_licence']['name']) && $_FILES['desc_licence']['name']!="") {
		
		include("Transfert.php");
		$chemin	= "licences";
		$file = $_FILES['desc_licence']['name'];
		$file1='desc_licence';
		$licence = $chemin."/".transfert($chemin,$file1);
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuLicence();
        $ma = new Application_Model_EuLicenceMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_licence($compteur);
            $a->setNum_licence($_POST['num_licence']);
            $a->setLibelle_licence($_POST['libelle_licence']);
            $a->setDesc_licence($licence);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            //$a->setCode_membre_morale($_POST['code_membre_morale']);
            $a->setDate_licence($date_id->toString('yyyy-MM-dd'));
            $ma->save($a);
			
		$this->_redirect('/administration/listlicence');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editlicenceAction()
    {
        /* page administration/editlicence - Modification d'une licence */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['num_licence']) && $_POST['num_licence']!="" && isset($_POST['libelle_licence']) && $_POST['libelle_licence']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['desc_licence']['name']) && $_FILES['desc_licence']['name']!=""){
		$chemin	= "licences";
		$file = $_FILES['desc_licence']['name'];
		$file1='desc_licence';
		$licence = $chemin."/".transfert($chemin,$file1);
		} else {$licence = $_POST['desc_licence_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuLicence();
        $ma = new Application_Model_EuLicenceMapper();
		$ma->find($_POST['id_licence'], $a);
			
            $a->setNum_licence($_POST['num_licence']);
            $a->setLibelle_licence($_POST['libelle_licence']);
            $a->setDesc_licence($licence);
            $ma->update($a);
			
		$this->_redirect('/administration/listlicence');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuLicence();
        $ma = new Application_Model_EuLicenceMapper();
		$ma->find($id, $a);
		$this->view->licence = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuLicence();
        $ma = new Application_Model_EuLicenceMapper();
		$ma->find($id, $a);
		$this->view->licence = $a;
            }
	}
	}




    public function listlicenceAction()
    {
        /* page administration/listlicence - Liste des licences */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $licence = new Application_Model_EuLicenceMapper();
        $this->view->entries = $licence->fetchAll2($sessionutilisateur->id_utilisateur);

        $this->view->tabletri = 1;

    }


    public function supplicenceAction()
    {
        /* page administration/supplicence - Suppression de licence */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $licence = new Application_Model_EuLicence();
        $licenceM = new Application_Model_EuLicenceMapper();
        $licenceM->find($id, $licence);
		
        $licenceM->delete($licence->id_licence);
		//unlink($licence->desc_licence);	

        }

		$this->_redirect('/administration/listlicence');
    }







    public function addpubliciteAction() {
        /* page administration/addpublicite - Ajout de publicité */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
           if (isset($_POST['libelle_publicite']) && $_POST['libelle_publicite']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['desc_publicite']['name']) && $_FILES['desc_publicite']['name']!=""){
        $chemin = "publicites";
        $file = $_FILES['desc_publicite']['name'];
        $file1='desc_publicite';
        $publicite = $chemin."/".transfert($chemin,$file1);
        } else {$publicite = "";}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuPublicite();
        $ma = new Application_Model_EuPubliciteMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setId_publicite($compteur);
            $a->setType_publicite($_POST['type_publicite']);
            $a->setCategorie_publicite($_POST['categorie_publicite']);
            $a->setLien_publicite($_POST['lien_publicite']);
            $a->setLibelle_publicite($_POST['libelle_publicite']);
            $a->setDesc_publicite($publicite);
            //$a->setDuree_publicite($_POST['duree_publicite']);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            $a->setDate_publicite($date_id->toString('yyyy-MM-dd'));
            $a->setBox_publicite($_POST['box_publicite']);
            $a->setInterface_publicite($_POST['interface_publicite']);
            $a->setAncien_publicite($_POST['ancien_publicite']);
            $a->setStatus(0);
            $ma->save($a);
            
        $this->_redirect('/administration/listpublicite');
        } else {  $this->view->error = "Champs * obligatoire ...";  } 
        }
        
    }


    public function editpubliciteAction()
    {
        /* page administration/editpublicite - Modification de publicité */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['libelle_publicite']) && $_POST['libelle_publicite']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['desc_publicite']['name']) && $_FILES['desc_publicite']['name']!=""){
        $chemin = "publicites";
        $file = $_FILES['desc_publicite']['name'];
        $file1='desc_publicite';
        $publicite = $chemin."/".transfert($chemin,$file1);
        } else {$publicite = $_POST['desc_publicite_old'];}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuPublicite();
        $ma = new Application_Model_EuPubliciteMapper();
        $ma->find($_POST['id_publicite'], $a);
            
            $a->setType_publicite($_POST['type_publicite']);
            $a->setLien_publicite($_POST['lien_publicite']);
            $a->setCategorie_publicite($_POST['categorie_publicite']);
            $a->setLibelle_publicite($_POST['libelle_publicite']);
            //$a->setDuree_publicite($_POST['duree_publicite']);
            $a->setDesc_publicite($publicite);
            $a->setBox_publicite($_POST['box_publicite']);
            $a->setInterface_publicite($_POST['interface_publicite']);
            $a->setAncien_publicite($_POST['ancien_publicite']);
            //$a->setStatus(0);
            $ma->update($a);
            
        $this->_redirect('/administration/listpublicite');
        } else {  $this->view->error = "Champs * obligatoire ..."; 
         
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuPublicite();
        $ma = new Application_Model_EuPubliciteMapper();
        $ma->find($id, $a);
        $this->view->publicite = $a;
            }
    }
           
    } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuPublicite();
        $ma = new Application_Model_EuPubliciteMapper();
        $ma->find($id, $a);
        $this->view->publicite = $a;
            }
    }
    }




    public function listpubliciteAction()
    {
        /* page administration/listpublicite - Liste des publicités */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $publicite = new Application_Model_EuPubliciteMapper();
        $this->view->entries = $publicite->fetchAll();

        $this->view->tabletri = 1;

    }


    public function supppubliciteAction()
    {
        /* page administration/supppublicite - Suppression de publicité */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $publicite = new Application_Model_EuPublicite();
        $publiciteM = new Application_Model_EuPubliciteMapper();
        $publiciteM->find($id, $publicite);
        
        $publiciteM->delete($publicite->id_publicite);
        //unlink($publicite->desc_publicite);   

        }

        $this->_redirect('/administration/listpublicite');
    }
    

    public function statuspubliciteAction()
    {
        /* page administration/statuspublicite - Publier la publicite libre d'information */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $publicite = new Application_Model_EuPublicite();
        $publiciteM = new Application_Model_EuPubliciteMapper();
        $publiciteM->find($id, $publicite);
        
        $publicite->setStatus($this->_request->getParam('status'));
        $publiciteM->update($publicite);
        }

        $this->_redirect('/administration/listpublicite');
    }

    








    public function addappeloffresAction()
    {
        /* page administration/addappeloffres - Ajout d'un dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_document']) && $_POST['id_document']!="" && isset($_POST['num_appeloffres']) && $_POST['num_appeloffres']!="" && isset($_POST['libelle_appeloffres']) && $_POST['libelle_appeloffres']!="" && isset($_FILES['desc_appeloffres']['name']) && $_FILES['desc_appeloffres']['name']!="") {
		
		include("Transfert.php");
		$chemin	= "appeloffress";
		$file = $_FILES['desc_appeloffres']['name'];
		$file1='desc_appeloffres';
		$appeloffres = $chemin."/".transfert($chemin,$file1);
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_appeloffres($compteur);
            $a->setId_document($_POST['id_document']);
            $a->setNum_appeloffres($_POST['num_appeloffres']);
            $a->setLibelle_appeloffres($_POST['libelle_appeloffres']);
            $a->setDesc_appeloffres($appeloffres);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            $a->setPreselection(0);
            $a->setSelection(0);
            $a->setPropo(0);
            $a->setOkfinal(0);
			$a->setDate_appeloffres($date_id->toString('yyyy-MM-dd'));
            $ma->save($a);
			
		$this->_redirect('/administration/listappeloffres');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }

    public function addappeloffres3Action()
    {
        /* page administration/addappeloffres - Ajout d'un dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_document']) && $_POST['id_document']!="" && isset($_POST['num_appeloffres']) && $_POST['num_appeloffres']!="" && isset($_POST['libelle_appeloffres']) && $_POST['libelle_appeloffres']!="" && isset($_FILES['desc_appeloffres']['name']) && $_FILES['desc_appeloffres']['name']!="") {
		
		include("Transfert.php");
		$chemin	= "appeloffress";
		$file = $_FILES['desc_appeloffres']['name'];
		$file1='desc_appeloffres';
		$appeloffres = $chemin."/".transfert($chemin,$file1);
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setId_appeloffres($compteur);
            $a->setId_document($_POST['id_document']);
            $a->setNum_appeloffres($_POST['num_appeloffres']);
            $a->setLibelle_appeloffres($_POST['libelle_appeloffres']);
            $a->setDesc_appeloffres($appeloffres);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            $a->setPreselection(0);
            $a->setSelection(0);
            $a->setPropo(0);
            $a->setOkfinal(0);
			$a->setDate_appeloffres($date_id->toString('yyyy-MM-dd'));
            $ma->save($a);
			
		$this->_redirect('/administration/listappeloffres3');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }

    public function editappeloffresAction()
    {
        /* page administration/editappeloffres - Modification d'un dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_document']) && $_POST['id_document']!="" && isset($_POST['num_appeloffres']) && $_POST['num_appeloffres']!="" && isset($_POST['libelle_appeloffres']) && $_POST['libelle_appeloffres']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['desc_appeloffres']['name']) && $_FILES['desc_appeloffres']['name']!=""){
		$chemin	= "appeloffress";
		$file = $_FILES['desc_appeloffres']['name'];
		$file1='desc_appeloffres';
		$appeloffres = $chemin."/".transfert($chemin,$file1);
		} else {$appeloffres = $_POST['desc_appeloffres_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
		$ma->find($_POST['id_appeloffres'], $a);
			
            $a->setId_document($_POST['id_document']);
            $a->setNum_appeloffres($_POST['num_appeloffres']);
            $a->setLibelle_appeloffres($_POST['libelle_appeloffres']);
            $a->setDesc_appeloffres($appeloffres);
			$a->setId_utilisateur($sessionutilisateur->id_utilisateur);
            $ma->update($a);
			
		$this->_redirect('/administration/listappeloffres');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
		$ma->find($id, $a);
		$this->view->appeloffres = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
		$ma->find($id, $a);
		$this->view->appeloffres = $a;
            }
	}
	}

    public function editappeloffres3Action()
    {
        /* page administration/editappeloffres - Modification d'un dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['id_document']) && $_POST['id_document']!="" && isset($_POST['num_appeloffres']) && $_POST['num_appeloffres']!="" && isset($_POST['libelle_appeloffres']) && $_POST['libelle_appeloffres']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['desc_appeloffres']['name']) && $_FILES['desc_appeloffres']['name']!=""){
		$chemin	= "appeloffress";
		$file = $_FILES['desc_appeloffres']['name'];
		$file1='desc_appeloffres';
		$appeloffres = $chemin."/".transfert($chemin,$file1);
		} else {$appeloffres = $_POST['desc_appeloffres_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
		$ma->find($_POST['id_appeloffres'], $a);
			
            $a->setId_document($_POST['id_document']);
            $a->setNum_appeloffres($_POST['num_appeloffres']);
            $a->setLibelle_appeloffres($_POST['libelle_appeloffres']);
            $a->setDesc_appeloffres($appeloffres);
			$a->setId_utilisateur($sessionutilisateur->id_utilisateur);
            $ma->update($a);
			
		$this->_redirect('/administration/listappeloffres3');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
		$ma->find($id, $a);
		$this->view->appeloffres = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
		$ma->find($id, $a);
		$this->view->appeloffres = $a;
            }
	}
	}



    public function listappeloffresAction()
    {
        /* page administration/listappeloffres - Liste des dossiers d'appels à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $appeloffres = new Application_Model_EuAppeloffresMapper();
		
if($sessionutilisateur->code_groupe == "detentrice" || $sessionutilisateur->code_groupe == "detentrice_pays" || $sessionutilisateur->code_groupe == "detentrice_region" || $sessionutilisateur->code_groupe == "detentrice_secteur" || $sessionutilisateur->code_groupe == "detentrice_agence"){
	        $this->view->entries = $appeloffres->fetchAll9($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);
}else{
	        $this->view->entries = $appeloffres->fetchAll8($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);
}

        $this->view->tabletri = 1;

    }


    public function listappeloffres2Action()
    {
        /* page administration/listappeloffres2 - Liste des dossiers d'appels à candidature (DAC) déjà traité */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $appeloffres = new Application_Model_EuAppeloffresMapper();
		
if($sessionutilisateur->code_groupe == "detentrice" || $sessionutilisateur->code_groupe == "detentrice_pays" || $sessionutilisateur->code_groupe == "detentrice_region" || $sessionutilisateur->code_groupe == "detentrice_secteur" || $sessionutilisateur->code_groupe == "detentrice_agence"){
	        $this->view->entries = $appeloffres->fetchAll11($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);
}else{
	        $this->view->entries = $appeloffres->fetchAll10($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);
}

        $this->view->tabletri = 1;

    }

    public function listappeloffres3Action()
    {
        /* page administration/listappeloffres2 - Liste des dossiers d'appels à candidature (DAC) déjà traité */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $appeloffres = new Application_Model_EuAppeloffresMapper();
		
if($sessionutilisateur->code_groupe == "detentrice" || $sessionutilisateur->code_groupe == "detentrice_pays" || $sessionutilisateur->code_groupe == "detentrice_region" || $sessionutilisateur->code_groupe == "detentrice_secteur" || $sessionutilisateur->code_groupe == "detentrice_agence"){
	        $this->view->entries = $appeloffres->fetchAll12($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);
}else{
	        $this->view->entries = $appeloffres->fetchAll10($sessionutilisateur->code_source_create, $sessionutilisateur->code_monde_create, $sessionutilisateur->code_zone_create, $sessionutilisateur->id_pays, $sessionutilisateur->id_region, $sessionutilisateur->code_secteur_create, $sessionutilisateur->code_agence_create);
}

        $this->view->tabletri = 1;

    }
	
	
    public function suppappeloffresAction()
    {
        /* page administration/suppappeloffres - Suppression de dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffresM->delete($appeloffres->id_appeloffres);
		//unlink($appeloffres->desc_appeloffres);	

        }

		$this->_redirect('/administration/listappeloffres');
    }


	
    public function suppappeloffres3Action()
    {
        /* page administration/suppappeloffres - Suppression de dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffresM->delete($appeloffres->id_appeloffres);
		//unlink($appeloffres->desc_appeloffres);	

        }

		$this->_redirect('/administration/listappeloffres3');
    }


    public function preselectionappeloffresAction()
    {
        /* page administration/preselectionappeloffres - Pré-selection des dossiers d'appels à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffres->setPreselection($this->_request->getParam('preselection'));
		$appeloffresM->update($appeloffres);
		
		if($this->_request->getParam('preselection') == 0){
        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffres->setSelection($this->_request->getParam('preselection'));
		$appeloffresM->update($appeloffres);
			}
        }

		$this->_redirect('/administration/listappeloffres');
    }


    public function preselectionappeloffres3Action()
    {
        /* page administration/preselectionappeloffres - Pré-selection des dossiers d'appels à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffres->setPreselection($this->_request->getParam('preselection'));
		$appeloffresM->update($appeloffres);
		
		if($this->_request->getParam('preselection') == 0){
        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffres->setSelection($this->_request->getParam('preselection'));
		$appeloffresM->update($appeloffres);
			}
        }

		$this->_redirect('/administration/listappeloffres3');
    }


    public function selectionappeloffresAction()
    {
        /* page administration/selectionappeloffres - Selection finale de dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
		$resultSet = $appeloffresM->fetchAll6($appeloffres->id_document);
		foreach ($resultSet as $row) {
		$appeloffres2 = new Application_Model_EuAppeloffres();
        $appeloffresM2 = new Application_Model_EuAppeloffresMapper();
        $appeloffresM2->find($row->id_appeloffres, $appeloffres2);	
        $appeloffres2->setSelection(0);
		$appeloffresM2->update($appeloffres2);
		}

        $appeloffres->setSelection($this->_request->getParam('selection'));
		$appeloffresM->update($appeloffres);
				
		}

		$this->_redirect('/administration/listappeloffres');
    }

    public function selectionappeloffres3Action()
    {
        /* page administration/selectionappeloffres - Selection finale de dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
		$resultSet = $appeloffresM->fetchAll6($appeloffres->id_document);
		foreach ($resultSet as $row) {
		$appeloffres2 = new Application_Model_EuAppeloffres();
        $appeloffresM2 = new Application_Model_EuAppeloffresMapper();
        $appeloffresM2->find($row->id_appeloffres, $appeloffres2);	
        $appeloffres2->setSelection(0);
		$appeloffresM2->update($appeloffres2);
		}

        $appeloffres->setSelection($this->_request->getParam('selection'));
		$appeloffresM->update($appeloffres);
				
		}

		$this->_redirect('/administration/listappeloffres3');
    }
	
    public function proposerappeloffresAction()
    {
        /* page administration/proposerappeloffres - Proposer des dossiers d'appels à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffres->setPropo($this->_request->getParam('propo'));
		$appeloffresM->update($appeloffres);
				
		}

		$this->_redirect('/administration/listappeloffres');
    }

    public function okfinalappeloffresAction()
    {
        /* page administration/okfinalappeloffres - Ok final de dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffres->setOkfinal($this->_request->getParam('okfinal'));
		$appeloffresM->update($appeloffres);
				
		}

		$this->_redirect('/administration/listappeloffres');
    }
	
	
    public function okfinalappeloffres3Action()
    {
        /* page administration/okfinalappeloffres - Ok final de dossier d'appel à candidature (DAC) */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($id, $appeloffres);
		
        $appeloffres->setOkfinal($this->_request->getParam('okfinal'));
		$appeloffresM->update($appeloffres);
				
		}

		$this->_redirect('/administration/listappeloffres3');
    }
	
    public function accorddocumentAction()
    {
        /* page administration/accorddocument - Accord de document */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $document = new Application_Model_EuDocument();
        $documentM = new Application_Model_EuDocumentMapper();
        $documentM->find($id, $document);
		
        $appeloffres = new Application_Model_EuAppeloffres();
        $appeloffresM = new Application_Model_EuAppeloffresMapper();
        $appeloffresM->find($this->_request->getParam('num'), $appeloffres);
			
        $document->setAccord($this->_request->getParam('accord'));
		if($this->_request->getParam('accord') == 2){
        $document->setNum_appeloffres($appeloffres->num_appeloffres);
		}
		$documentM->update($document);
		
		if($this->_request->getParam('accord') == 0){
        $appeloffres->setSelection(0);
		$appeloffresM->update($appeloffres);
		}
        }

		$this->_redirect('/administration/listappeloffres');
    }




    public function livrerdemandeAction() 
    {
        /* page administration/livrerdemande - Livrer demande */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


        $id = (int) $this->_request->getParam('id');
        $idfrais = (int) $this->_request->getParam('idfrais');
        if ($id > 0 && $idfrais > 0) {
			
            $frais = new Application_Model_EuFrais();
            $m_frais = new Application_Model_EuFraisMapper();
            $m_frais->find($idfrais, $frais);
			
            $m_appeloffre = new Application_Model_EuAppelOffreMapper();
            $appeloffre = $m_appeloffre->findByDemande($id);
						
			$date = new Zend_Date(Zend_Date::ISO_8601);

            $m_appelnn = new Application_Model_EuAppelNnMapper();
            $appelnn = $m_appelnn->findByAppel($frais->id_proposition);
            $code_compte = 'NN-TPAGCP-' . $appeloffre->membre_morale_executante;
			
            $compte_gcp = new Application_Model_EuCompte();
            $m_compte_gcp = new Application_Model_EuCompteMapper();
            $m_compte_gcp->find($code_compte, $compte_gcp);
			
            $m_domiciliation = new Application_Model_EuDomiciliationMapper();
            $domiciliation = $m_domiciliation->findByProposition($frais->id_proposition);
			
			//if($frais->mont_projet <= $compte_gcp->solde && $domiciliation->montant_subvent == $domiciliation->montant_domicilier && $domiciliation->reste_duree == 0){
			
                    $compte_gcp->setSolde($compte_gcp->getSolde() - $frais->mont_projet);
                    $m_compte_gcp->update($compte_gcp);
					
                $m_compte = new Application_Model_EuCompteMapper();
                $compte = new Application_Model_EuCompte();
                $code_compte = 'NN-GCPREP-' . $appelnn->code_membre_morale;
                $ret_req = $m_compte->find($code_compte, $compte);
                if ($ret_req == FALSE) {
                    $compte->setCode_cat('GCPREP');
                    if (substr($code_membre, -1) == "P") {
                        $compte->setCode_membre($code_membre);
                    } else if (substr($code_membre, -1) == "M") {
                        $compte->setCode_membre_morale($code_membre);
                    }
                    $compte->setCode_compte($code_compte)
                            ->setCode_type_compte('NN')
                            ->setDate_alloc($date->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setDesactiver(0)
                            ->setLib_compte('Gcp Répartition')
                            ->setSolde($frais->mont_projet);
                    $m_compte->save($compte);
                } else {
                    $compte->setSolde($compte->getSolde() + $frais->mont_projet);
                    $m_compte->update($compte);
                }

            $demande = new Application_Model_EuDemande();
            $m_demande = new Application_Model_EuDemandeMapper();
            $m_demande->find($id, $demande);

            $demande->setLivrer($this->_request->getParam('livrer'));
            $m_demande->update($demande);
			
$sessionmembre->errorlogin = "Validation de la livraison réussie ...";			
			
			/*}else {
$sessionmembre->errorlogin = "Validation de la livraison échouée ...";			
				}*/
			
        }

        $this->_redirect('/administration/listdemandefrais');
    }








    public function listcontactAction()
    {
        /* page administration/listcontact - Liste des messages de contacts */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $contact = new Application_Model_EuContactMapper();
        $this->view->entries = $contact->fetchAll2();

        $this->view->tabletri = 1;

    }


    public function suppcontactAction()
    {
        /* page administration/suppcontact - Suppression d'un message de contacts */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $contact = new Application_Model_EuContact();
        $contactM = new Application_Model_EuContactMapper();
        $contactM->find($id, $contact);
		
        $contactM->delete($contact->contact_id);

        }

		$this->_redirect('/administration/listcontact');
    }


    public function detailscontactAction() 
    {
        /* page administration/detailscontact - Detail d'un message de contacts */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $contact = new Application_Model_EuContact();
        $contactM = new Application_Model_EuContactMapper();
        $contactM->find($id, $contact);
		$this->view->contact = $contact;

            }

	}


    public function traitercontactAction()
    {
        /* page administration/traitercontact - Traiter un message de contacts */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $contact = new Application_Model_EuContact();
        $contactM = new Application_Model_EuContactMapper();
        $contactM->find($id, $contact);
		
        $contact->setTraiter($this->_request->getParam('traiter'));
		$contactM->update($contact);
        }

		$this->_redirect('/administration/listcontact');
    }


	
	public  function  editzoneAction()  {
	   /* page administration/editzone - Modifier la zone */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	
	   $t_devise =  new Application_Model_DbTable_EuDevise();
       $devises  = $t_devise->fetchAll();
	   $this->view->devises = $devises;
	  
	   $request = $this->getRequest();
	   if($request->isPost()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try {
		      $date_id = Zend_Date::now();
		      $zone = new Application_Model_EuZone();
		      $zone_mapper = new Application_Model_EuZoneMapper();
			  $code_zone = $request->getParam("code_zone");
              $nom_zone = $request->getParam("nom_zone");
              $code_dev = $request->getParam("code_dev");

              $zone_mapper->find($code_zone,$zone);
			  $zone->setDate_creation($date_id->toString('yyyy-MM-dd'));
			  $zone->setNom_zone($nom_zone);
			  $zone->setCode_dev($code_dev);
              $zone_mapper->update($zone);			  
		      
              $db->commit();
			  $sessionutilisateur->error = "Modification bien effectuee ...";
			  $this->_redirect('/administration/listezones');			  
		  
		  } catch (Exception $exc) {
            $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();
            return;
          }
		  
	   } else {
          $id = $this->_request->getParam('id');
	      $zone   = new Application_Model_EuZone();
	      $m_zone = new Application_Model_EuZoneMapper();
	      $m_zone->find($id,$zone);
	      $this->view->zone = $zone;
       }	   
	
	}
	
	
	public  function addzoneAction() {
	   /* page administration/addzone - Ajout d'une zone */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $t_devise =  new Application_Model_DbTable_EuDevise();
       $devises  = $t_devise->fetchAll();
	   $this->view->devises = $devises;
	  
	   $request = $this->getRequest();
	   if($request->isPost()) {
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
		    $date_id = Zend_Date::now();
		    $zone = new Application_Model_EuZone();
			$zoneM = new Application_Model_EuZoneMapper();
            $code_dev = $request->getParam("code_dev");
			$nom_zone = $request->getParam("nom_zone");
			$code_zone = "";
			
			$code = $mapper->getLastCodeZone();
            if($code == null) {
              $code_zone = '001';
            } else {
              $num_ordre = substr($code, -3);
              $num_ordre++;
              $code_zone = str_pad($num_ordre, 3, 0, STR_PAD_LEFT);
            }
			
			$zone->setCode_zone($code_zone);
			$zone->setDate_creation($date_id->toString('yyyy-MM-dd'));
			$zone->setNom_zone($nom_zone);
			$zone->setCode_dev($code_dev);
            $zoneM->save($zone);
            
            $db->commit();
			$sessionutilisateur->error = "Operation reussie";
            $this->_redirect('/administration/listezones');			
		 
		} catch (Exception $exc) {
            $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();
            return;
        }		
	  
	  }
	
	}
	
	
	public  function listezonesAction() {
	   /* page administration/listezone - liste */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   
	   if (!isset($sessionutilisateur->login))        {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}

       $m_zone = new Application_Model_EuZoneMapper();
       $this->view->entries = $m_zone->fetchAll();

       $this->view->tabletri = 1; 
	
	}
	
	
	
	
	public  function  editpaysAction()  {
	   /* page administration/editpays -  */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $t_zone =  new Application_Model_DbTable_EuZone();
       $zones  = $t_zone->fetchAll();
	   $this->view->zones = $zones;
	   
	   $request = $this->getRequest ();
	   if($request->isPost()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try {
		      $pays = new Application_Model_EuPays();
			  $pays_mapper = new Application_Model_EuPaysMapper();
			  $id_pays = $request->getParam("id_pays");
              $code_pays = $request->getParam("code_pays");
              $libelle_pays = $request->getParam("libelle_pays");	
              $nat_pays = $request->getParam("nat_pays");			
	          $code_tel = $request->getParam("code_tel");
              $code_zone = $request->getParam("code_zone");
		       
			  $pays_mapper->find($id_pays,$pays);
			  
              $pays->setCode_pays($code_pays);
              $pays->setLibelle_pays(ucfirst($libelle_pays));
              $pays->setNationalite(ucfirst($nat_pays));
              $pays->setCode_telephonique($code_tel);
              $pays->setCode_zone($code_zone);
              $pays_mapper->update($pays);
			  
			  $db->commit();
			  $sessionutilisateur->error = "Modification bien effectuee ...";
			  $this->_redirect('/administration/listepays');
		  
		  } catch (Exception $exc) {
            $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();
            return;
         }
		 
	   } else {
          $id = $this->_request->getParam('id');
	      $pays   = new Application_Model_EuPays();
	      $m_pays = new Application_Model_EuPaysMapper();
	      $m_pays->find($id,$pays);
	      $this->view->pays = $pays;

       }	   
	
	}
	
	
	
	public  function addpaysAction() {
	   /* page administration/addpays - Ajout d'un pays */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $t_zone =  new Application_Model_DbTable_EuZone();
       $zones  = $t_zone->fetchAll();
	   $this->view->zones = $zones;
	  
	   $request = $this->getRequest ();
	   if($request->isPost()) {
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
            $pays = new Application_Model_EuPays();
			$paysM = new Application_Model_EuPaysMapper();
			$id_pays = $paysM->findConuter() + 1;
            $code_pays = $request->getParam("code_pays");
            $libelle_pays = $request->getParam("libelle_pays");	
            $nat_pays = $request->getParam("nat_pays");			
	        $code_tel = $request->getParam("code_tel");
            $code_zone = $request->getParam("code_zone");			
			
            $pays->setId_pays($id_pays);
            $pays->setCode_pays($code_pays);
            $pays->setLibelle_pays(ucfirst($libelle_pays));
            $pays->setNationalite(ucfirst($nat_pays));
            $pays->setCode_telephonique($code_tel);
            $pays->setCode_zone($code_zone);
            $paysM->save($pays);			
			  
			$db->commit();
			$sessionutilisateur->error = "Operation reussie";
            $this->_redirect('/administration/listepays');  
			  
	     } catch (Exception $exc) {
            $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();
            return;
         }
	  }
	
	}
	
	public  function listepaysAction() {
	   /* page administration/listepays */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   
	   if (!isset($sessionutilisateur->login))        {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}

       $m_pays = new Application_Model_EuPaysMapper();
       $this->view->entries = $m_pays->fetchAll();

       $this->view->tabletri = 1;
	   
	   
	   
	}
	
	
	
	
	public  function editregionAction()  {
	    /* page administration/editregion */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	    $t_pays =  new Application_Model_DbTable_EuPays();
        $pays  = $t_pays->fetchAll();
	    $this->view->pays = $pays;
		
		$request = $this->getRequest ();
	    if($request->isPost()) {
	       $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
	           $region = new Application_Model_EuRegion();
			   $region_mapper = new Application_Model_EuRegionMapper();
			   $id_region = $request->getParam("id_region");
			   $id_pays = $request->getParam("id_pays");
			   $nom_region = $request->getParam("nom_region");

			   $region_mapper->find($id_region,$region);
			   
               $region->setNom_region($nom_region);
               $region->setId_pays($id_pays);
               $region_mapper->update($region);

               $db->commit();
			   $sessionutilisateur->error = "Modification bien effectuee ...";
			   $this->_redirect('/administration/listeregions');               
	    
		   } catch (Exception $exc) {
              $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
              $db->rollback();
              return;
           }
		   
		} else {
            $id = $this->_request->getParam('id');
	        $region   = new Application_Model_EuRegion();
	        $m_region = new Application_Model_EuRegionMapper();
	        $m_region->find($id,$region);
	        $this->view->region = $region;
        }		
	
	}
	
	
	
	
	public  function addregionAction() {
	  /* page administration/addregion */
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	  $t_pays =  new Application_Model_DbTable_EuPays();
      $pays  = $t_pays->fetchAll();
	  $this->view->pays = $pays;
	  
	  $request = $this->getRequest ();
	  if($request->isPost()) {
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
            $region = new Application_Model_EuRegion();
			$regionM = new Application_Model_EuRegionMapper();
			$id_region = $regionM->findConuter() + 1;
			$id_pays = $request->getParam("id_pays");
			$nom_region = $request->getParam("nom_region");

            $region->setId_region($id_region);
            $region->setNom_region($nom_region);
            $region->setId_pays($id_pays);
            $regionM->save($region);			
        
		    $db->commit();
			$sessionutilisateur->error = "Operation reussie";
            $this->_redirect('/administration/listeregions');
		
		} catch (Exception $exc) {
            $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();
            return;
        }
	  }
	   
	   
	   
	   
	   
	}
	
	public  function listeregionsAction() {
	   /* page administration/listeregions */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $m_region = new Application_Model_EuRegionMapper();
       $this->view->entries = $m_region->fetchAll();

       $this->view->tabletri = 1;
	   
	}
	
	
	
	public function editsecteurAction() {
	  /* page administration/editsecteur - */
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	  $t_region =  new Application_Model_DbTable_EuRegion();
      $regions  = $t_region->fetchAll();
	  $this->view->regions = $regions;
	  
	  $t_prefecture =  new Application_Model_DbTable_EuPrefecture();
      $prefectures  = $t_prefecture->fetchAll();
	  $this->view->prefectures = $prefectures;
	  
	  $request = $this->getRequest ();
	  if($request->isPost()) {
	     $db = Zend_Db_Table::getDefaultAdapter();
         $db->beginTransaction();
		 try {
		     $date_id = Zend_Date::now();
	         $secteur = new Application_Model_EuSecteur();
			 $secteur_mapper = new Application_Model_EuSecteurMapper();

             $region = new Application_Model_EuRegion();
			 $region_mapper = new Application_Model_EuRegionMapper();
			 
			 $pays = new Application_Model_EuPays();
			 $pays_mapper = new Application_Model_EuPaysMapper();
			
			 $code_secteur = $request->getParam("code_secteur");
			 $nom_secteur = $request->getParam("nom_secteur");
			 $id_region = $request->getParam("id_region");
			 $id_prefecture = $request->getParam("id_prefecture");
             $region_mapper->find($id_region,$region);
			 $id_pays = $region->id_pays;

             $secteur_mapper->find($code_secteur,$secteur);			
			
             $secteur->setNom_secteur($nom_secteur);
			 $secteur->setId_pays($id_pays);
			 $secteur->setId_region($id_region);
			 $secteur->setId_prefecture($id_prefecture);
			 $secteur->setCode_membre(NULL);
			 $secteur->setDate_creation($date_id->toString('yyyy-MM-dd'));
			 $secteur_mapper->update($secteur);

             $db->commit();
			 $sessionutilisateur->error = "Modification bien effectuee ...";
			 $this->_redirect('/administration/listesecteurs');			 
	
	     } catch (Exception $exc) {
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             $db->rollback();
             return;
         }
		 
	   } else {
	      $id = $this->_request->getParam('id');
	      $secteur   = new Application_Model_EuSecteur();
	      $m_secteur = new Application_Model_EuSecteurMapper();
	      $m_secteur->find($id,$secteur);
	      $this->view->secteur = $secteur;
	   }
	
	}
	
	
	
	
	public  function addsecteurAction() {
	  /* page administration/addsecteur - Ajout d'un secteur */
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	  $t_region =  new Application_Model_DbTable_EuRegion();
      $regions  = $t_region->fetchAll();
	  $this->view->regions = $regions;
	  
	  $t_prefecture =  new Application_Model_DbTable_EuPrefecture();
      $prefectures  = $t_prefecture->fetchAll();
	  $this->view->prefectures = $prefectures;
	  
	  $request = $this->getRequest ();
	  if($request->isPost()) {
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
	        $secteur = new Application_Model_EuSecteur();
			$secteurM = new Application_Model_EuSecteurMapper();

            $region = new Application_Model_EuRegion();
			$regionM = new Application_Model_EuRegionMapper();
			 
			$pays = new Application_Model_EuPays();
			$paysM = new Application_Model_EuPaysMapper();
			
			$nom_secteur = $request->getParam("nom_secteur");
			$id_region = $request->getParam("id_region");
			$id_prefecture = $request->getParam("id_prefecture");
            $regionM->find($id_region,$region);
			
			$id_pays = $region->id_pays;
			$code_zone = "";
			$code_secteur = "";
			
			$t_pays = new Application_Model_DbTable_EuPays();
            $rows = $t_pays->find($id_pays);
            if(count($rows) > 0) {
               $code_zone = $rows->current()->code_zone;
            }
			
			$code = $secteurM->getLastCodeSectByZone($id_pays,$id_region);
			if($code == null) {
			  $id_region = str_pad($id_region,3,'0',STR_PAD_LEFT);
              $code_secteur = $code_zone . $id_region . '001';
			} else {
			  $num_ordre = substr($code,-3);
              $num_ordre++;
              $ordre = str_pad($num_ordre,3,0,STR_PAD_LEFT);
              $id_region = str_pad($id_region,3,'0',STR_PAD_LEFT);
              $code_secteur = $code_zone. $id_region . $ordre;			  
			}
			$date_id = Zend_Date::now();
			
			$secteur->setCode_secteur($code_secteur);
			$secteur->setNom_secteur($nom_secteur);
			$secteur->setId_pays($id_pays);
			$secteur->setId_region($id_region);
			$secteur->setId_prefecture($id_prefecture);
			$secteur->setCode_membre(NULL);
			$secteur->setDate_creation($date_id->toString('yyyy-MM-dd'));
			$secteurM->save($secteur);
			
			$db->commit();
			$sessionutilisateur->error = "Operation reussie";
            $this->_redirect('/administration/listesecteurs');
			
	     } catch (Exception $exc) {
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             $db->rollback();
             return;
         }
		 
	  }
	   
	}
	
	public  function listesecteursAction() {
	   /* page administration/listesecteur  */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   
	   $m_secteur = new Application_Model_EuSecteurMapper();
       $this->view->entries = $m_secteur->fetchAll();

       $this->view->tabletri = 1;
	}
	
	
	public  function editagenceAction() {
	  /* page administration/addagence - Ajout d'une agence */
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	  $t_secteur =  new Application_Model_DbTable_EuSecteur();
      $secteurs  = $t_secteur->fetchAll();
	  $this->view->secteurs = $secteurs;
	  
	  $t_zone =  new Application_Model_DbTable_EuZone();
      $zones  = $t_zone->fetchAll();
	  $this->view->zones = $zones;
	  
	  $t_pays =  new Application_Model_DbTable_EuPays();
      $pays  = $t_pays->fetchAll();
	  $this->view->pays = $pays;
	  
	  $t_region =  new Application_Model_DbTable_EuRegion();
      $regions  = $t_region->fetchAll();
	  $this->view->regions = $regions;
	  
	  $t_prefecture =  new Application_Model_DbTable_EuPrefecture();
      $prefectures  = $t_prefecture->fetchAll();
	  $this->view->prefectures = $prefectures;
	  
	  $t_canton =  new Application_Model_DbTable_EuCanton();
      $cantons  = $t_canton->fetchAll();
	  $this->view->cantons = $cantons;
	  
	  $request = $this->getRequest ();
	  if($request->isPost()) {
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
	        $date_id = new Zend_Date();
            $date_creation = clone $date_id;	         

			$agence = new Application_Model_EuAgence();
			$agence_mapper = new Application_Model_EuAgenceMapper();
			
			$code_agence = $request->getParam("code_agence");
			$nom_agence = $request->getParam("libelle_agence");
			$code_secteur = $request->getParam("code_secteur");
			$code_zone = $request->getParam("code_zone");
			$id_pays = $request->getParam("id_pays");
			$id_region = $request->getParam("id_region");
			$id_prefecture = $request->getParam("id_prefecture");
			$id_canton = $request->getParam("id_canton");

			$agence_mapper->find($code_agence,$agence);
			
            $agence->setDate_creation($date_creation->toString('yyyy-MM-dd'));
			$agence->setLibelle_agence($nom_agence);
			$agence->setCode_zone($code_zone);
			$agence->setId_pays($id_pays);
			$agence->setId_region($id_region);
			$agence->setId_prefecture($id_prefecture);
			$agence->setId_canton($id_canton);
			$agence->setCode_secteur($code_secteur);
			$agence_mapper->update($agence);
			
			$db->commit();
			$sessionutilisateur->error = "Modification bien effectuee ...";
			$this->_redirect('/administration/listeagences');
            			
	    } catch (Exception $exc) {
           $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
           $db->rollback();
           return;
        }
		
	   } else {
	      $id = $this->_request->getParam('id');
	      $agence   = new Application_Model_EuAgence();
	      $m_agence = new Application_Model_EuAgenceMapper();
	      $m_agence->find($id,$agence);
	      $this->view->agence = $agence;
	   }
	}
	
	
	
	public  function addagenceAction() {
	  /* page administration/addagence - Ajout d'une agence */
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	  $t_secteur =  new Application_Model_DbTable_EuSecteur();
      $secteurs  = $t_secteur->fetchAll();
	  $this->view->secteurs = $secteurs;
	  
	  $t_zone =  new Application_Model_DbTable_EuZone();
      $zones  = $t_zone->fetchAll();
	  $this->view->zones = $zones;
	  
	  $t_pays =  new Application_Model_DbTable_EuPays();
      $pays  = $t_pays->fetchAll();
	  $this->view->pays = $pays;
	  
	  $t_region =  new Application_Model_DbTable_EuRegion();
      $regions  = $t_region->fetchAll();
	  $this->view->regions = $regions;
	  
	  $t_prefecture =  new Application_Model_DbTable_EuPrefecture();
      $prefectures  = $t_prefecture->fetchAll();
	  $this->view->prefectures = $prefectures;
	  
	  $t_canton =  new Application_Model_DbTable_EuCanton();
      $cantons  = $t_canton->fetchAll();
	  $this->view->cantons = $cantons;
	  
	  $request = $this->getRequest ();
	  if($request->isPost()) {
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
            $date_id = new Zend_Date();
            $date_creation = clone $date_id;	         

			$agence = new Application_Model_EuAgence();
			$agenceM = new Application_Model_EuAgenceMapper();
			
			$nom_agence = $request->getParam("nom_agence");
			$code_secteur = $request->getParam("code_secteur");
			$code_zone = $request->getParam("code_zone");
			$id_pays = $request->getParam("id_pays");
			$id_region = $request->getParam("id_region");
			$id_prefecture = $request->getParam("id_prefecture");
			$id_canton = $request->getParam("id_canton");
			
			$code = $agenceM->getLastCodeAgenceBySect($code_secteur);
			if($code == null) {
              $code_agence = $code_secteur . '001';
            } else {
              $num_ordre = substr($code,-3);
              $num_ordre++;
              $code_agence = $code_secteur . str_pad($num_ordre,3,0,STR_PAD_LEFT);
            }
			
			$agence->setCode_agence($code_agence);
			$agence->setDate_creation($date_creation->toString('yyyy-MM-dd'));
			$agence->setLibelle_agence($nom_agence);
			$agence->setCode_zone($code_zone);
			$agence->setId_pays($id_pays);
			$agence->setId_region($id_region);
			$agence->setId_prefecture($id_prefecture);
			$agence->setId_canton($id_canton);
			$agence->setCode_secteur($code_secteur);
			$agenceM->save($agence);
			
            $db->commit();
			$sessionutilisateur->error = "Operation reussie";
            $this->_redirect('/administration/listeagences'); 
	  
	    } catch (Exception $exc) {
           $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
           $db->rollback();
           return;
        }
		 
	  }
	   
	   
	}
	
	
	
	public  function listeagencesAction() {
	   /* page administration/listeagence -  */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   
	   $m_agence = new Application_Model_EuAgenceMapper();
       $this->view->entries = $m_agence->fetchAll();

       $this->view->tabletri = 1;
	   
	   
	}
	
	
	
	
	
	






    public function addtacheAction()
    {
        /* page administration/addtache - Ajout d'une tache */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['tache_description']) && $_POST['tache_description']!="" && isset($_POST['tache_code']) && $_POST['tache_code']!="" && isset($_POST['tache_libelle']) && $_POST['tache_libelle']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['tache_url']['name']) && $_FILES['tache_url']['name']!=""){
		$chemin	= "taches";
		$file = $_FILES['tache_url']['name'];
		$file1='tache_url';
		$tache = $chemin."/".transfert($chemin,$file1);
		} else {$tache = "";}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuTache();
        $ma = new Application_Model_EuTacheMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setTache_id($compteur);
            $a->setTache_description($_POST['tache_description']);
            $a->setTache_code($_POST['tache_code']);
            $a->setTache_libelle($_POST['tache_libelle']);
            $a->setTache_url($tache);
            $a->setPublier($_POST['publier']);
            $ma->save($a);
			
		$this->_redirect('/administration/listtache');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function edittacheAction()
    {
        /* page administration/edittache - Modification d'une tache */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['tache_description']) && $_POST['tache_description']!="" && isset($_POST['tache_code']) && $_POST['tache_code']!="" && isset($_POST['tache_libelle']) && $_POST['tache_libelle']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['tache_url']['name']) && $_FILES['tache_url']['name']!=""){
		$chemin	= "taches";
		$file = $_FILES['tache_url']['name'];
		$file1='tache_url';
		$tache = $chemin."/".transfert($chemin,$file1);
		} else {$tache = $_POST['tache_url_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuTache();
        $ma = new Application_Model_EuTacheMapper();
		$ma->find($_POST['tache_id'], $a);
			
            $a->setTache_description($_POST['tache_description']);
            $a->setTache_code($_POST['tache_code']);
            $a->setTache_libelle($_POST['tache_libelle']);
            $a->setTache_url($tache);
            $ma->update($a);
			
		$this->_redirect('/administration/listtache');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuTache();
        $ma = new Application_Model_EuTacheMapper();
		$ma->find($id, $a);
		$this->view->tache = $a;
            }
	}
		   
	} else {


            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuTache();
        $ma = new Application_Model_EuTacheMapper();
		$ma->find($id, $a);
		$this->view->tache = $a;
            }
	}
	}




    public function listtacheAction()
    {
        /* page administration/listtache - Liste des taches */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $tache = new Application_Model_EuTacheMapper();
        $this->view->entries = $tache->fetchAll();

        $this->view->tabletri = 1;

    }



    public function supptacheAction()
    {
        /* page administration/supptache - Suppression d'une tache */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $tache = new Application_Model_EuTache();
        $tacheM = new Application_Model_EuTacheMapper();
        $tacheM->find($id, $tache);
		
        $tacheM->delete($tache->tache_id);
		//unlink($tache->tache_url);	

        }

		$this->_redirect('/administration/listtache');
    }


    public function detailstacheAction() 
    {
        /* page administration/detailstache - Detail d'une tache */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $tache = new Application_Model_EuTache();
        $tacheM = new Application_Model_EuTacheMapper();
        $tacheM->find($id, $tache);
		$this->view->tache = $tache;

            }

	}


    public function publiertacheAction()
    {
        /* page administration/publiertache - Publier une tache */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $tache = new Application_Model_EuTache();
        $tacheM = new Application_Model_EuTacheMapper();
        $tacheM->find($id, $tache);
		
        $tache->setPublier($this->_request->getParam('publier'));
		$tacheM->update($tache);
        }

		$this->_redirect('/administration/listtache');
    }











    public function addvideoAction()
    {
        /* page administration/addvideo - Ajout d'une video */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['video_description']) && $_POST['video_description']!="" && isset($_POST['video_categorie']) && $_POST['video_categorie']!="" && isset($_POST['video_libelle']) && $_POST['video_libelle']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuVideo();
        $ma = new Application_Model_EuVideoMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setVideo_id($compteur);
            $a->setVideo_description($_POST['video_description']);
            $a->setVideo_categorie($_POST['video_categorie']);
            $a->setVideo_libelle($_POST['video_libelle']);
            $a->setVideo_type($_POST['video_type']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);
			
		$this->_redirect('/administration/listvideo');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editvideoAction()
    {
        /* page administration/editvideo - Modification d'une video */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['video_description']) && $_POST['video_description']!="" && isset($_POST['video_categorie']) && $_POST['video_categorie']!="" && isset($_POST['video_libelle']) && $_POST['video_libelle']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuVideo();
        $ma = new Application_Model_EuVideoMapper();
		$ma->find($_POST['video_id'], $a);
			
            $a->setVideo_description($_POST['video_description']);
            $a->setVideo_categorie($_POST['video_categorie']);
            $a->setVideo_libelle($_POST['video_libelle']);
            $a->setVideo_type($_POST['video_type']);
            $ma->update($a);
			
		$this->_redirect('/administration/listvideo');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuVideo();
        $ma = new Application_Model_EuVideoMapper();
		$ma->find($id, $a);
		$this->view->video = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuVideo();
        $ma = new Application_Model_EuVideoMapper();
		$ma->find($id, $a);
		$this->view->video = $a;
            }
	}
	}




    public function listvideoAction()
    {
        /* page administration/listvideo - Liste des videos */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $video = new Application_Model_EuVideoMapper();
        $this->view->entries = $video->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppvideoAction()
    {
        /* page administration/suppvideo - Supression d'une video */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $video = new Application_Model_EuVideo();
        $videoM = new Application_Model_EuVideoMapper();
        $videoM->find($id, $video);
		
        $videoM->delete($video->video_id);
		//unlink($video->video_url);	

        }

		$this->_redirect('/administration/listvideo');
    }




    public function publiervideoAction()
    {
        /* page administration/publiervideo - Publier une video */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $video = new Application_Model_EuVideo();
        $videoM = new Application_Model_EuVideoMapper();
        $videoM->find($id, $video);
		
        $video->setPublier($this->_request->getParam('publier'));
		$videoM->update($video);
        }

		$this->_redirect('/administration/listvideo');
    }





    public function addmenuAction()
    {
        /* page administration/addmenu - Ajout d'un menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['menu_libelle']) && $_POST['menu_libelle']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuMenu();
        $ma = new Application_Model_EuMenuMapper();
		
		$ordre_last = $ma->findOrdre() + 1;
			
            $compteur = $ma->findConuter() + 1;
            $a->setMenu_id($compteur);
            $a->setMenu_libelle($_POST['menu_libelle']);
            $a->setMenu_type($_POST['menu_type']);
            $a->setOrdre($ordre_last);
            $a->setPublier(0);
            $ma->save($a);
			
		$this->_redirect('/administration/listmenu');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editmenuAction()
    {
        /* page administration/editmenu - Modification d'un menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['menu_libelle']) && $_POST['menu_libelle']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuMenu();
        $ma = new Application_Model_EuMenuMapper();
		$ma->find($_POST['menu_id'], $a);
			
            $a->setMenu_libelle($_POST['menu_libelle']);
            $a->setMenu_type($_POST['menu_type']);
            $ma->update($a);
			
		$this->_redirect('/administration/listmenu');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMenu();
        $ma = new Application_Model_EuMenuMapper();
		$ma->find($id, $a);
		$this->view->menu = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMenu();
        $ma = new Application_Model_EuMenuMapper();
		$ma->find($id, $a);
		$this->view->menu = $a;
            }
	}
	}




    public function listmenuAction()
    {
        /* page administration/listmenu - Liste des menus */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $menu = new Application_Model_EuMenuMapper();
        $this->view->entries = $menu->fetchAll();

        $this->view->tabletri = 1;

    }
	
	
	
	public function editsousdivisionAction()   {
	   /* page administration/addagrement - Ajout d'un agrement */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $t_division = new Application_Model_DbTable_EuDivision();		
		
       $divisions = $t_division->fetchAll();		
       $this->view->divisions = $divisions;
	   
	   $request = $this->getRequest();  
	   if($request->isPost())  {
	     $db = Zend_Db_Table::getDefaultAdapter();
         $db->beginTransaction();
		 try {
		     $sousdivision   = new Application_Model_EuSousDivision();
	         $m_sousdivision = new Application_Model_EuSousDivisionMapper();
		   
             $id_sousdivision = $request->getParam("id_sousdivision");
			 $nom_sousdivision = $request->getParam("nom_sousdivision");
			 $id_division = $request->getParam("id_division");
			 $desc_sousdivision = $request->getParam("desc");
				
             $m_sousdivision->find($id_sousdivision,$sousdivision);
			  
			 $sousdivision->setNom_sous_division($nom_sousdivision);
			 $sousdivision->setId_division($id_division);
			 $sousdivision->setDesc_sous_division($desc_sousdivision);
			 $m_sousdivision->update($sousdivision);
				
			 $db->commit();
			 $sessionutilisateur->error = "Modification bien effectuee ...";
			 $this->_redirect('/administration/listsousdivision'); 			  

          } catch (Exception $exc) {
		     $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
             return;
		  }
	    
	
	   } else {		
		   $id = $this->_request->getParam('id');
	       $sousdivision   = new Application_Model_EuSousDivision();
	       $m_sousdivision = new Application_Model_EuSousDivisionMapper();
	       $m_sousdivision->find($id,$sousdivision);
	       $this->view->sousdivision = $sousdivision;
	   }
	   
	   
	
	}
	
	
	
	
	public function editdivisionAction() {
	    /* page administration/addagrement - Ajout d'un agrement */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	
	    $request = $this->getRequest();  
	    if($request->isPost())   {
		  $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try {
		      $division   = new Application_Model_EuDivision();
	          $m_division = new Application_Model_EuDivisionMapper();
		   
              $id_division = $request->getParam("id_division");
			  $nom_division = $request->getParam("nom_division");
			  $code_division = $request->getParam("code_division");
			  $desc_division = $request->getParam("desc");
				
              $m_division->find($id_division,$division);
			  
			  $division->setNom_division($nom_division);
			  $division->setCode_division($code_division);
			  $division->setDesc_division($desc_division);
			  $m_division->update($division);
				
			  $db->commit();
			  $sessionutilisateur->error = "Modification bien effectuee ...";
			  $this->_redirect('/administration/listdivision'); 			  

          } catch (Exception $exc) {
		     $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
             return;
		  }		   
        
        } else {		
		   $id = $this->_request->getParam('id');
	       $division   = new Application_Model_EuDivision();
	       $m_division = new Application_Model_EuDivisionMapper();
	       $m_division->find($id,$division);
	       $this->view->division = $division;
		}
	
	}
	
	

    public function adddivisionAction()   {
	   /* page administration/addagrement - Ajout d'un agrement */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   $request = $this->getRequest();  
	   if($request->isPost())   {
		  $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try  {
		       $division = new Application_Model_EuDivision();
		       $division_mapper = new Application_Model_EuDivisionMapper();
				
			   $nom_division = $request->getParam("nom_division");
			   $code_division = $request->getParam("code_division");
			   $desc = $request->getParam("desc");
				
			   $id_division = $division_mapper->findConuter() + 1;
				
			   $division->setId_division($id_division);
			   $division->setNom_division($nom_division);
			   $division->setCode_division($code_division);
			   $division->setDesc_division($desc);
			   $division->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			   $division_mapper->save($division);
				
			   $db->commit();
			   $sessionutilisateur->error = "Operation bien effectuee ...";
			   $this->_redirect('/administration/listdivision');
		  

		  } catch (Exception $exc) {
		     $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
             return;
		  }
		
	   }
	
	}
	
	public function addsousdivisionAction() {
	   /* page administration/addagrement - Ajout d'un agrement */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $t_division = new Application_Model_DbTable_EuDivision();		
		
       $divisions = $t_division->fetchAll();		
       $this->view->divisions = $divisions;
	   
	   $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   $request = $this->getRequest();  
	   if($request->isPost())   {
		 $db = Zend_Db_Table::getDefaultAdapter();
         $db->beginTransaction();
		 try {
		     $sousdivision = new Application_Model_EuSousDivision();
		     $sousdivision_mapper = new Application_Model_EuSousDivisionMapper();
				
			 $nom_sousdivision = $request->getParam("nom_sousdivision");
			 $id_division = $request->getParam("id_division");
			 $desc = $request->getParam("desc");
				
			 $id_sousdivision = $sousdivision_mapper->findConuter() + 1;
				
			 $sousdivision->setId_sous_division($id_sousdivision);
			 $sousdivision->setId_division($id_division);
			 $sousdivision->setNom_sous_division($nom_sousdivision);
			 $sousdivision->setDesc_sous_division($desc);
			 $sousdivision->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			 $sousdivision_mapper->save($sousdivision);
				
			 $db->commit();
			 $sessionutilisateur->error = "Operation bien effectuee ...";
			 $this->_redirect('/administration/listsousdivision');
		  
		  } catch (Exception $exc) {
		     $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
             return;
		  }
		
	   }
	   
	}
	
	
	public function editfiliereAction() {
	   /* page administration/addagrement - Ajout d'un agrement */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	  
	   $t_sousdivision = new Application_Model_DbTable_EuSousDivision();		
		
       $sousdivisions = $t_sousdivision->fetchAll();		
       $this->view->sousdivisions = $sousdivisions;
	  
	   $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   $request = $this->getRequest();
	   
	   if($request->isPost()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try { 
              $filiere = new Application_Model_EuFiliere();
		      $filiere_mapper = new Application_Model_EuFiliereMapper();
 
              $sousdivision = new Application_Model_EuSousDivision();
		      $sousdivision_mapper = new Application_Model_EuSousDivisionMapper();

              $division = new Application_Model_EuDivision();
		      $division_mapper = new Application_Model_EuDivisionMapper();

			  $id_filiere = $request->getParam("id_filiere");
              $nom_filiere = $request->getParam("nom_filiere");
			  $id_sousdivision = $request->getParam("id_sousdivision");
			  $desc = $request->getParam("desc");
			  $code_division = "";
			 
			  if($id_sousdivision != "") {
			    $sousdivision_mapper->find($id_sousdivision,$sousdivision);
			    $division_mapper->find($sousdivision->id_division,$division);
				$code_division = $division->code_division;
              } else {
                $id_sousdivision = null;
                $code_division = null;
              }			  
			  
			  $filiere_mapper->find($id_filiere,$filiere);

              $filiere->setNom_filiere($nom_filiere);
			  $filiere->setDescrip_filiere($desc);
			  $filiere->setId_sous_division($id_sousdivision);
			  $filiere->setCode_division($code_division);
			  //$filiere->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			  $filiere_mapper->update($filiere);
				
		      $db->commit();
			  $sessionutilisateur->error = "Modification bien effectuee ...";
			  $this->_redirect('/administration/listfiliere');
			       
	      } catch (Exception $exc) {
		     $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
             return;
		  }
	
	   } else {		
		  $id = $this->_request->getParam('id');
	      $filiere   = new Application_Model_EuFiliere();
	      $m_filiere = new Application_Model_EuFiliereMapper();
	      $m_filiere->find($id,$filiere);
	      $this->view->filiere = $filiere;
	   }
	   
	   
	}
	
	
	public function addfiliereAction() {
	  /* page administration/addagrement - Ajout d'un agrement */
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	  $t_sousdivision = new Application_Model_DbTable_EuSousDivision();		
		
      $sousdivisions = $t_sousdivision->fetchAll();		
      $this->view->sousdivisions = $sousdivisions;
	  
	  $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   
	  $request = $this->getRequest();
      if($request->isPost())   {
        $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
		    $filiere = new Application_Model_EuFiliere();
		    $filiere_mapper = new Application_Model_EuFiliereMapper();
 
            $sousdivision = new Application_Model_EuSousDivision();
		    $sousdivision_mapper = new Application_Model_EuSousDivisionMapper();

            $division = new Application_Model_EuDivision();
		    $division_mapper = new Application_Model_EuDivisionMapper();

            $nom_filiere = $request->getParam("nom_filiere");
			$id_sousdivision = $request->getParam("id_sousdivision");
			$desc = $request->getParam("desc");
			 
			$sousdivision_mapper->find($id_sousdivision,$sousdivision);
			$division_mapper->find($sousdivision->id_division,$division);
			 
			$id_filiere = $filiere_mapper->findConuter() + 1;
				
			$filiere->setId_filiere($id_filiere);
			$filiere->setNom_filiere($nom_filiere);
			$filiere->setDescrip_filiere($desc);
			$filiere->setId_sous_division($id_sousdivision);
			$filiere->setCode_division($division->code_division);
			$filiere->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			 
			$filiere_mapper->save($filiere);
				
			$db->commit();
			$sessionutilisateur->error = "Operation bien effectuee ...";
			$this->_redirect('/administration/listfiliere'); 
		 
		 } catch (Exception $exc) {
		    $db->rollback();
            $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
            return;
		 }


      }
	  
	   
	}
	
	
	public function listdivisionAction() {
	   /* page administration/addagrement - Ajout d'un agrement */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   if (!isset($sessionutilisateur->login))        {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}

       $m_division = new Application_Model_EuDivisionMapper();
       $this->view->entries = $m_division->fetchAll();

       $this->view->tabletri = 1;
	
	}
	
	
	public function listsousdivisionAction() {
	   /* page administration/addagrement - Ajout d'un agrement */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		  
		  $tabela = new Application_Model_DbTable_EuSousDivision();
		  $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		  $select->setIntegrityCheck(false);
		  $select->join('eu_division','eu_division.id_division = eu_sous_division.id_division');
		  $select->order('eu_sous_division.id_sous_division desc');
		   
		  $sousdivisions = $tabela->fetchAll($select);
		   
		  $this->view->entries = $sousdivisions;		   

          $this->view->tabletri = 1;
		  	  
	}
	
	
	public function listfiliereAction() {
	   /* page administration/addagrement - Ajout d'un agrement */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   if (!isset($sessionutilisateur->login))        {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}

          $m_filiere = new Application_Model_EuFiliereMapper();
          $this->view->entries = $m_filiere->fetchAll();

          $this->view->tabletri = 1;
	}
	
	
	
	
	
	
	
    public function suppmenuAction()
    {
        /* page administration/suppmenu - Suppression d'un menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $menu = new Application_Model_EuMenu();
        $menuM = new Application_Model_EuMenuMapper();
        $menuM->find($id, $menu);
		
        $menuM->delete($menu->menu_id);
		//unlink($menu->menu_url);	

        }

		$this->_redirect('/administration/listmenu');
    }




    public function publiermenuAction()
    {
        /* page administration/publiermenu - Publier un menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $menu = new Application_Model_EuMenu();
        $menuM = new Application_Model_EuMenuMapper();
        $menuM->find($id, $menu);
		
        $menu->setPublier($this->_request->getParam('publier'));
		$menuM->update($menu);
        }

		$this->_redirect('/administration/listmenu');
    }


    function montermenuAction()
    {
        /* page administration/montermenu - Monter dans l'ordre d'un menu */

        $id = (int) $this->_request->getParam('id');
        	if ($id > 0) {
			
        $menu = new Application_Model_EuMenu();
        $menu_mapper = new Application_Model_EuMenuMapper();
		$menu_mapper->find($id, $menu);
		$ordre = $menu->ordre;
		
        $menu1 = new Application_Model_EuMenu();
        $menu1_mapper = new Application_Model_EuMenuMapper();
		$rows = $menu1_mapper->findOrdreMonter($menu->ordre);
		$menu1_mapper->find($rows->menu_id, $menu1);
		$ordre1 = $menu1->ordre;
			
        $menu->setOrdre($ordre1);
		$menu_mapper->update($menu);

        $menu1->setOrdre($ordre);
		$menu1_mapper->update($menu1);
			
		$this->_redirect('/administration/listmenu');
        }
    }
	
	
    function descendremenuAction()
    {
        /* page administration/descendremenu - Descendre dans l'ordre d'un menu */

        $id = (int) $this->_request->getParam('id');
        	if ($id > 0) {
			
        $menu = new Application_Model_EuMenu();
        $menu_mapper = new Application_Model_EuMenuMapper();
		$menu_mapper->find($id, $menu);
		$ordre = $menu->ordre;
		
        $menu1 = new Application_Model_EuMenu();
        $menu1_mapper = new Application_Model_EuMenuMapper();
		$rows = $menu1_mapper->findOrdreDescendre($menu->ordre);
		$menu1_mapper->find($rows->menu_id, $menu1);
		$ordre1 = $menu1->ordre;
			
        $menu->setOrdre($ordre1);
		$menu_mapper->update($menu);

        $menu1->setOrdre($ordre);
		$menu1_mapper->update($menu1);
		
		$this->_redirect('/administration/listmenu');
        }
    }





    public function addmenusousAction()
    {
        /* page administration/addmenusous - Ajout d'un sous menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['menusous_menu']) && $_POST['menusous_menu']!="" && isset($_POST['menusous_libelle']) && $_POST['menusous_libelle']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuMenuSous();
        $ma = new Application_Model_EuMenuSousMapper();
		
		$ordre_last = $ma->findOrdre($_POST['menusous_menu']) + 1;
			
            $compteur = $ma->findConuter() + 1;
            $a->setMenuSous_id($compteur);
            $a->setMenuSous_menu($_POST['menusous_menu']);
            $a->setMenuSous_libelle($_POST['menusous_libelle']);
            $a->setMenuSous_url($_POST['menusous_url']);
            $a->setOrdre($ordre_last);
            $a->setPublier(0);
            $ma->save($a);
			
		$this->_redirect('/administration/listmenusous');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editmenusousAction()
    {
        /* page administration/editmenusous - Modification d'un sous menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['menusous_menu']) && $_POST['menusous_menu']!="" && isset($_POST['menusous_libelle']) && $_POST['menusous_libelle']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuMenuSous();
        $ma = new Application_Model_EuMenuSousMapper();
		$ma->find($_POST['menusous_id'], $a);
			
            $a->setMenuSous_menu($_POST['menusous_menu']);
            $a->setMenuSous_libelle($_POST['menusous_libelle']);
            $a->setMenuSous_url($_POST['menusous_url']);
            $ma->update($a);
			
		$this->_redirect('/administration/listmenusous');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMenuSous();
        $ma = new Application_Model_EuMenuSousMapper();
		$ma->find($id, $a);
		$this->view->menusous = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMenuSous();
        $ma = new Application_Model_EuMenuSousMapper();
		$ma->find($id, $a);
		$this->view->menusous = $a;
            }
	}
	}




    public function listmenusousAction()
    {
        /* page administration/listmenusous - Liste des sous menus */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $menusous = new Application_Model_EuMenuSousMapper();
        $this->view->entries = $menusous->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppmenusousAction()
    {
        /* page administration/suppmenusous - Suppression d'un sous menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $menusous = new Application_Model_EuMenuSous();
        $menusousM = new Application_Model_EuMenuSousMapper();
        $menusousM->find($id, $menusous);
		
        $menusousM->delete($menusous->menusous_id);
		//unlink($menusous->menusous_url);	

        }

		$this->_redirect('/administration/listmenusous');
    }




    public function publiermenusousAction()
    {
        /* page administration/publiermenusous - Publier un sous menu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $menusous = new Application_Model_EuMenuSous();
        $menusousM = new Application_Model_EuMenuSousMapper();
        $menusousM->find($id, $menusous);
		
        $menusous->setPublier($this->_request->getParam('publier'));
		$menusousM->update($menusous);
        }

		$this->_redirect('/administration/listmenusous');
    }



    function montermenusousAction()
    {
        /* page administration/montermenusous - Monter dans l'ordre d'un sous menu */

         $id = (int) $this->_request->getParam('id');
        	if ($id > 0) {
			
        $menusous = new Application_Model_EuMenuSous();
        $menusous_mapper = new Application_Model_EuMenuSousMapper();
		$menusous_mapper->find($id, $menusous);
		$ordre = $menusous->ordre;
		
        $menusous1 = new Application_Model_EuMenuSous();
        $menusous1_mapper = new Application_Model_EuMenuSousMapper();
		$rows = $menusous1_mapper->findOrdreMonter($menusous->menusous_menu, $menusous->ordre);
		$menusous1_mapper->find($rows->menusous_id, $menusous1);
		$ordre1 = $menusous1->ordre;
			
        $menusous->setOrdre($ordre1);
		$menusous_mapper->update($menusous);

        $menusous1->setOrdre($ordre);
		$menusous1_mapper->update($menusous1);
			
		$this->_redirect('/administration/listmenusous');
        }
    }
	
	
    function descendremenusousAction()
    {
        /* page administration/descendremenusous - Descendre dans l'ordre d'un sous menu */

        $id = (int) $this->_request->getParam('id');
        	if ($id > 0) {
			
        $menusous = new Application_Model_EuMenuSous();
        $menusous_mapper = new Application_Model_EuMenuSousMapper();
		$menusous_mapper->find($id, $menusous);
		$ordre = $menusous->ordre;
		
        $menusous1 = new Application_Model_EuMenuSous();
        $menusous1_mapper = new Application_Model_EuMenuSousMapper();
		$rows = $menusous1_mapper->findOrdreDescendre($menusous->menusous_menu, $menusous->ordre);
		$menusous1_mapper->find($rows->menusous_id, $menusous1);
		$ordre1 = $menusous1->ordre;
			
        $menusous->setOrdre($ordre1);
		$menusous_mapper->update($menusous);

        $menusous1->setOrdre($ordre);
		$menusous1_mapper->update($menusous1);
		
		$this->_redirect('/administration/listmenusous');
        }
    }


    public function listacheteurAction()
    {
        /* page administration/listacheteur - Liste des acheteurs persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
if($sessionutilisateur->code_groupe == "espace_kacm"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert0("PP", "AERL", $sessionutilisateur->code_agence);
}else if($sessionutilisateur->code_groupe == "espace_capa"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert0("PP", "CAPA", $sessionutilisateur->code_agence);
}else{
        $this->view->entries = $acheteur->fetchAll30("PP", $sessionutilisateur->code_agence);
}

        $this->view->tabletri = 1;

    }

    public function listacheteurpmAction()
    {
        /* page administration/listacheteurpm - Liste des acheteurs persones morales de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		


	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
if($sessionutilisateur->code_groupe == "espace_kacm"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert0("PM", "AERL2", $sessionutilisateur->code_agence);
}else if($sessionutilisateur->code_groupe == "espace_capa"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert0("PM", "CAPA", $sessionutilisateur->code_agence);
}else{
        $this->view->entries = $acheteur->fetchAll30("PM", $sessionutilisateur->code_agence);
}

        $this->view->tabletri = 1;

    }
	

    public function listacheteurarchiveAction()
    {
        /* page administration/listacheteurarchive - Liste des acheteurs persones physiques de KACM archive */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
if($sessionutilisateur->code_groupe == "espace_kacm"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert1("PP", "AERL", $sessionutilisateur->code_agence);
}else if($sessionutilisateur->code_groupe == "espace_capa"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert1("PP", "CAPA", $sessionutilisateur->code_agence);
}else{
        $this->view->entries = $acheteur->fetchAll31("PP", $sessionutilisateur->code_agence);
}

        $this->view->tabletri = 1;

    }

    public function listacheteurpmarchiveAction()
    {
        /* page administration/listacheteurpmarchive - Liste des acheteurs persones morales de KACM archive */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		


	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
if($sessionutilisateur->code_groupe == "espace_kacm"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert1("PM", "AERL2", $sessionutilisateur->code_agence);
}else if($sessionutilisateur->code_groupe == "espace_capa"){
        $this->view->entries = $acheteur->fetchAllByTypeTransfert1("PM", "CAPA", $sessionutilisateur->code_agence);
}else{
        $this->view->entries = $acheteur->fetchAll31("PM", $sessionutilisateur->code_agence);
}

        $this->view->tabletri = 1;

    }
	

	
    public function publieracheteur2Action()
    {
        /* page administration/publieracheteur - Publier acheteur persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $acheteur = new Application_Model_EuAcheteur();
        $acheteurM = new Application_Model_EuAcheteurMapper();
        $acheteurM->find($id, $acheteur);
		
        $acheteur->setPublier($this->_request->getParam('publier'));
		$acheteurM->update($acheteur);

        }

		$this->_redirect('/administration/listacheteur');
    }


    public function listacheteur1Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $acheteur->fetchAllByPublier(0, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $acheteur->fetchAllByPublier(0, "");
				}

        $this->view->tabletri = 1;

    }
	
    public function listacheteur2Action()
    {
        /* page administration/listacheteur - Liste des acheteurs persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $acheteur->fetchAllByPublier(1, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $acheteur->fetchAllByPublier(1, "");
				}

        $this->view->tabletri = 1;

    }


	
    public function listacheteur3Action()
    {
        /* page administration/listacheteur - Liste des acheteurs persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $acheteur->fetchAllByPublier(2, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $acheteur->fetchAllByPublier(2, "");
				}

        $this->view->tabletri = 1;

    }


	
    public function listacheteur4Action()
    {
        /* page administration/listacheteur - Liste des acheteurs persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $acheteur->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $acheteur->fetchAllByPublier(3, "");
				}

        $this->view->tabletri = 1;

    }

	
    public function listacheteur41Action()
    {
        /* page administration/listacheteur - Liste des acheteurs persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $acheteur->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $acheteur->fetchAllByPublier(3, "");
				}

        $this->view->tabletri = 1;

    }


	
    public function listacheteur5Action()
    {
        /* page administration/listacheteur - Liste des acheteurs persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $acheteur->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $acheteur->fetchAllByPublier(3, "");
				}

        $this->view->tabletri = 1;

    }

	
	
    public function listacheteur6Action()
    {
        /* page administration/listacheteur - Liste des acheteurs persones physiques de KACM */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $acheteur = new Application_Model_EuAcheteurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $acheteur->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $acheteur->fetchAllByPublier(3, "");
				}

        $this->view->tabletri = 1;

    }


    public function publieracheteurAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		
        $acheteur_mapper = new Application_Model_EuAcheteurMapper();
		
		if($sessionutilisateur->code_agence != "001001001001"){
        $acheteur = $acheteur_mapper->fetchAllByPublier($_POST['id'] - 1, $sessionutilisateur->code_agence);
			}else{
        $acheteur = $acheteur_mapper->fetchAllByPublier($_POST['id'] - 1, "");
				}

		foreach ($acheteur as $entry):
		if(isset($_POST['publier'.$entry->acheteur_id.'']) && $_POST['publier'.$entry->acheteur_id.''] == $_POST['id']){

        $acheteur = new Application_Model_EuAcheteur();
        $acheteurM = new Application_Model_EuAcheteurMapper();
        $acheteurM->find($entry->acheteur_id, $acheteur);
		
        $acheteur->setPublier($_POST['publier'.$entry->acheteur_id.'']);
		$acheteurM->update($acheteur);


$date_id = new Zend_Date(Zend_Date::ISO_8601);


        $validation_quittance = new Application_Model_EuValidationQuittance();
        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
			
            $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
            $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
            $validation_quittance->setValidation_quittance_utilisateur($sessionutilisateur->id_utilisateur);
            $validation_quittance->setValidation_quittance_acheteur($entry->acheteur_id);
            $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $validation_quittance->setPublier(1);
            $validation_quittance_mapper->save($validation_quittance);

		include("Transfert.php");





if($_POST['id'] == 3){


$htmlpdf = "";

$htmlpdf .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
  </tr>';
if($acheteur->acheteur_type == "PP"){
		
        $achet = new Application_Model_EuAcheteur();
        $achet_mapper = new Application_Model_EuAcheteurMapper();
        $compteur_achet = $achet_mapper->findConuterOrdre($acheteur->acheteur_type);
	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° Reçu Bon de Consommation Personne Physique : BC-PP'.ajoutezero($compteur_achet + 1).'</u></em></strong></td>
  </tr>';
		
}else if($acheteur->acheteur_type == "PM"){
		
        $achet = new Application_Model_EuAcheteur();
        $achet_mapper = new Application_Model_EuAcheteurMapper();
        $compteur_achet = $achet_mapper->findConuterOrdre($acheteur->acheteur_type);
	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° Reçu Bon de Consommation Personne Morale : BC-PM'.ajoutezero($compteur_achet + 1).'</u></em></strong></td>
  </tr>';
	
}
  
/*$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>QUITTANCE CMFH/CAPS/GAC TOGO N° '.$acheteur->acheteur_id.'</u></em></strong></td>
  </tr>';*/
  
        $acheteur = new Application_Model_EuAcheteur();
        $acheteurM = new Application_Model_EuAcheteurMapper();
        $acheteurM->find($entry->acheteur_id, $acheteur);
		
        $acheteur->setAcheteur_ordre($compteur_achet + 1);
		$acheteurM->update($acheteur);
		  
if($acheteur->acheteur_type == "PP"){
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$acheteur->acheteur_nom.' '.$acheteur->acheteur_prenom.'</em></strong></p></td>
  </tr>';
}else if($acheteur->acheteur_type == "PM"){
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$acheteur->acheteur_raison.'</em></strong></p></td>
  </tr>';
}
$htmlpdf .= '
  <tr>
    <td colspan="4" align="right"><strong><em>Montant Bon de Consommation : '.number_format(($acheteur->mont_transfert), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
  <tr>
    <td align="left"><em><strong>Libellé</strong></em></td>
    <td align="left">&nbsp;</td>
    <td align="center"><strong><em>Type</em></strong></td>
    <td align="center"><em><strong>Montant</strong></em></td>
  </tr>
  <tr style="background-color:#999;">
    <td align="left"><em><strong>Achat de Bon de Consommation</strong></em></td>
    <td align="left">&nbsp;</td>
    <td align="center"><em>'.$acheteur->type_transfert.'</em></td>
    <td align="center"><em>'.number_format(($acheteur->mont_transfert), 0, ',', ' ').' FCFA</em></td>
  </tr>
  <tr>
    <td colspan="2" align="left"><em><u>Montant en  lettres&nbsp;</u>: '.lettre(($acheteur->mont_transfert), 50).' CFA</em></td>
    <td colspan="2" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
  </tr>';	
  
/*$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>';*/
  
  
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center">';
	if($acheteur->acheteur_vignette != "" && (substr($acheteur->acheteur_vignette, 0, 3) == "jpg" || substr($acheteur->acheteur_vignette, 0, 3) == "jpeg" || substr($acheteur->acheteur_vignette, 0, 3) == "JPG" || substr($acheteur->acheteur_vignette, 0, 3) == "JPEG")){
list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$acheteur->acheteur_vignette);
	$pourcent = 700 * 100 / $width;
	$width2 = 700;
	$height2 = $pourcent * $height / 100;
$htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$acheteur->acheteur_vignette.'" width="'.$width2.'" height="'.$height2.'" />

';
}
$htmlpdf .= '  </td>
	</tr>
  
  </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$htmlpdf .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/acheteurs.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_acheteur/")) {
mkdir("../../webfiles/pdf_acheteur/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_acheteur/ACHETEUR_".str_replace("/", "_", mettreaccents($acheteur->acheteur_id))."_.html";
$newnom = "ACHETEUR_".str_replace("/", "_", mettreaccents($acheteur->acheteur_id)."_");
$newchemin = "../../webfiles/pdf_acheteur/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena	= $newnom.'.pdf';

unlink($newfile);

	
		//$this->_redirect(str_replace("../../webfiles/", "http://webfiles.gacsource.net/", $file));




if($acheteur->acheteur_email != ""){

$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Validation Bon de Consommation du recu numero : '.$acheteur->acheteur_numero.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
if($acheteur->acheteur_type == "PP"){
$mail->addTo($acheteur->acheteur_email, $acheteur->acheteur_nom." ".$acheteur->acheteur_prenom);
}else{
$mail->addTo($acheteur->acheteur_email, $acheteur->acheteur_raison_sociale);
}
$mail->setSubject('Alerte sur la validation  Bon de Consommation: '.$date_id->toString('dd-MM-yyyy HH:mm')); 

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 
$mail->send($tr);

}




}



if($_POST['id'] == 1 || $_POST['id'] == 2 || $_POST['id'] == 3){
	
if($_POST['id'] == 1){
	$agrement = "agrement_filiere";
}else if($_POST['id'] == 2){
	$agrement = "agrement_technopole";
}else if($_POST['id'] == 3){
	$agrement = "agrement_acnev";
}
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateur = $utilisateurM->fetchAllByAgenceCodeGroupe($sessionutilisateur->code_agence, $agrement);
		
foreach ($utilisateur as $entryagrement):
if (substr($entryagrement->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($entryagrement->code_membre, $membre);
$membre_email = $membre->email_membre;
$membre_nom = $membre->nom_membre." ".$membre->prenom_membre;
} else if (substr($entryagrement->code_membre, -1) == "M") {
$membremorale = new Application_Model_EuMembreMorale();
$mapper_membremorale = new Application_Model_EuMembreMoraleMapper();
$mapper_membremorale->find($entryagrement->code_membre, $membremorale);
$membre_email = $membre->email_membre;
$membre_nom = $membre->raison_sociale;
}


if($membre_email != ""){
$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Alerte sur la validation Bon de Consommation du recu numero : '.$entry->acheteur_numero.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($membre_email, $membre_nom);
$mail->setSubject('Alerte sur la validation  Bon de Consommation: '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);
}
endforeach;
}


			}
		endforeach;

if($_POST['id'] == 3){
		$this->_redirect('/administration/listacheteur41');
}else{
		$this->_redirect('/administration/listacheteur'.$_POST['id'].'');
	}
        }
    }








    public function listcandidatAction()
    {
        /* page administration/listcandidat - Liste des candidats CMFH */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $candidat = new Application_Model_EuCandidatMapper();
        $this->view->entries = $candidat->fetchAll();

        $this->view->tabletri = 1;

    }

    public function publiercandidatAction()
    {
        /* page administration/publiercandidat - Publier candidat CMFH */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $candidat = new Application_Model_EuCandidat();
        $candidatM = new Application_Model_EuCandidatMapper();
        $candidatM->find($id, $candidat);
		
        $candidat->setPublier($this->_request->getParam('publier'));
		$candidatM->update($candidat);
        }

		$this->_redirect('/administration/listcandidat');
    }






    public function listquittanceAction()
    {
        /* page administration/listquittance - Liste des quitances CMFH/CAPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $quittance = new Application_Model_EuQuittanceMapper();
if ($sessionutilisateur->code_groupe == "espace_cmfh"){
	        $this->view->entries = $quittance->fetchAllByCandidat(1);
}else if ($sessionutilisateur->code_groupe == "espace_caps"){
	        $this->view->entries = $quittance->fetchAllByCandidat(0);
}else{
	        $this->view->entries = $quittance->fetchAll();
}
        $this->view->tabletri = 1;

    }

    public function publierquittanceAction()
    {
        /* page administration/publierquittance - Publier quitance CMFH/CAPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $quittance = new Application_Model_EuQuittance();
        $quittanceM = new Application_Model_EuQuittanceMapper();
        $quittanceM->find($id, $quittance);
		
        $quittance->setPublier($this->_request->getParam('publier'));
        $quittance->setQuittance_code_membre($_POST['quittance_code_membre']);
		$quittanceM->update($quittance);




        $candidat = new Application_Model_EuCandidat();
        $candidatM = new Application_Model_EuCandidatMapper();
        $candidatM->find($quittance->quittance_candidat, $candidat);
		
        $candidat->setPublier($this->_request->getParam('publier'));
		$candidatM->update($candidat);

        }

		$this->_redirect('/administration/listquittance');
    }



    public function detailscandidatAction() 
    {
        /* page administration/detailscandidat - Detail d'un candidat CMFH */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $candidat = new Application_Model_EuCandidat();
        $candidatM = new Application_Model_EuCandidatMapper();
        $candidatM->find($id, $candidat);
		$this->view->candidat = $candidat;

            }

	}





    public function addfichierAction()
    {
        /* page administration/addfichier - Ajout d'un fichier */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['fichier_type']) && $_POST['fichier_type']!="" && isset($_POST['fichier_categorie']) && $_POST['fichier_categorie']!="" && isset($_POST['fichier_libelle']) && $_POST['fichier_libelle']!="" && isset($_FILES['fichier_url']['name']) && $_FILES['fichier_url']['name']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['fichier_url']['name']) && $_FILES['fichier_url']['name']!=""){
		$chemin	= "fichiers";
		$file = $_FILES['fichier_url']['name'];
		$file1='fichier_url';
		$fichier = $chemin."/".transfert($chemin,$file1);
		} else {$fichier = "";}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFichier();
        $ma = new Application_Model_EuFichierMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setFichier_id($compteur);
            $a->setFichier_type($_POST['fichier_type']);
            $a->setFichier_categorie($_POST['fichier_categorie']);
            $a->setFichier_libelle($_POST['fichier_libelle']);
            $a->setFichier_url($fichier);
            $a->setPublier($_POST['publier']);
            $ma->save($a);
			
		$this->_redirect('/administration/listfichier');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editfichierAction()
    {
        /* page administration/editfichier - Modification d'un fichier */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['fichier_type']) && $_POST['fichier_type']!="" && isset($_POST['fichier_categorie']) && $_POST['fichier_categorie']!="" && isset($_POST['fichier_libelle']) && $_POST['fichier_libelle']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['fichier_url']['name']) && $_FILES['fichier_url']['name']!=""){
		$chemin	= "fichiers";
		$file = $_FILES['fichier_url']['name'];
		$file1='fichier_url';
		$fichier = $chemin."/".transfert($chemin,$file1);
		} else {$fichier = $_POST['fichier_url_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFichier();
        $ma = new Application_Model_EuFichierMapper();
		$ma->find($_POST['fichier_id'], $a);
			
            $a->setFichier_type($_POST['fichier_type']);
            $a->setFichier_categorie($_POST['fichier_categorie']);
            $a->setFichier_libelle($_POST['fichier_libelle']);
            $a->setFichier_url($fichier);
            $ma->update($a);
			
		$this->_redirect('/administration/listfichier');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFichier();
        $ma = new Application_Model_EuFichierMapper();
		$ma->find($id, $a);
		$this->view->fichier = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFichier();
        $ma = new Application_Model_EuFichierMapper();
		$ma->find($id, $a);
		$this->view->fichier = $a;
            }
	}
	}




    public function listfichierAction()
    {
        /* page administration/listfichier - Liste des fichiers */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $fichier = new Application_Model_EuFichierMapper();
        $this->view->entries = $fichier->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppfichierAction()
    {
        /* page administration/suppfichier - Suppression d'un fichier */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $fichier = new Application_Model_EuFichier();
        $fichierM = new Application_Model_EuFichierMapper();
        $fichierM->find($id, $fichier);
		
        $fichierM->delete($fichier->fichier_id);
		//unlink($fichier->fichier_url);	

        }

		$this->_redirect('/administration/listfichier');
    }




    public function publierfichierAction()
    {
        /* page administration/publierfichier - Publier un fichier */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $fichier = new Application_Model_EuFichier();
        $fichierM = new Application_Model_EuFichierMapper();
        $fichierM->find($id, $fichier);
		
        $fichier->setPublier($this->_request->getParam('publier'));
		$fichierM->update($fichier);
        }

		$this->_redirect('/administration/listfichier');
    }







    public function addactualiteAction()
    {
        /* page administration/addactualite - Ajout d'une actualite */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['actualite_resume']) && $_POST['actualite_resume']!="" && isset($_POST['actualite_libelle']) && $_POST['actualite_libelle']!="" && isset($_POST['actualite_date']) && $_POST['actualite_date']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['actualite_vignette']['name']) && $_FILES['actualite_vignette']['name']!=""){
		$chemin	= "actualites";
		$file = $_FILES['actualite_vignette']['name'];
		$file1='actualite_vignette';
		$actualite = $chemin."/".transfert($chemin,$file1);
		} else {$actualite = "";}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuActualite();
        $ma = new Application_Model_EuActualiteMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setActualite_id($compteur);
            $a->setActualite_type($_POST['actualite_type']);
            $a->setActualite_resume($_POST['actualite_resume']);
            $a->setActualite_libelle($_POST['actualite_libelle']);
            $a->setActualite_description($_POST['actualite_description']);
            $a->setActualite_vignette($actualite);
            $a->setActualite_date($_POST['actualite_date']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);

		$this->_redirect('/administration/listactualite');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editactualiteAction()
    {
        /* page administration/editactualite - Modification d'une actualite */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['actualite_resume']) && $_POST['actualite_resume']!="" && isset($_POST['actualite_libelle']) && $_POST['actualite_libelle']!="" && isset($_POST['actualite_date']) && $_POST['actualite_date']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['actualite_vignette']['name']) && $_FILES['actualite_vignette']['name']!=""){
		$chemin	= "actualites";
		$file = $_FILES['actualite_vignette']['name'];
		$file1='actualite_vignette';
		$actualite = $chemin."/".transfert($chemin,$file1);
		} else {$actualite = $_POST['actualite_vignette_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuActualite();
        $ma = new Application_Model_EuActualiteMapper();
		$ma->find($_POST['actualite_id'], $a);
			
            $a->setActualite_type($_POST['actualite_type']);
            $a->setActualite_resume($_POST['actualite_resume']);
            $a->setActualite_libelle($_POST['actualite_libelle']);
            $a->setActualite_description($_POST['actualite_description']);
            $a->setActualite_vignette($actualite);
            $a->setActualite_date($_POST['actualite_date']);
            $ma->update($a);
			
		$this->_redirect('/administration/listactualite');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuActualite();
        $ma = new Application_Model_EuActualiteMapper();
		$ma->find($id, $a);
		$this->view->actualite = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuActualite();
        $ma = new Application_Model_EuActualiteMapper();
		$ma->find($id, $a);
		$this->view->actualite = $a;
            }
	}
	}




    public function listactualiteAction()
    {
        /* page administration/listactualite - Liste des actualites */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $actualite = new Application_Model_EuActualiteMapper();
        $this->view->entries = $actualite->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppactualiteAction()
    {
        /* page administration/suppactualite - Suppression d'une actualite */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $actualite = new Application_Model_EuActualite();
        $actualiteM = new Application_Model_EuActualiteMapper();
        $actualiteM->find($id, $actualite);
		
        $actualiteM->delete($actualite->actualite_id);
		//unlink($actualite->actualite_vignette);	

        }

		$this->_redirect('/administration/listactualite');
    }




    public function publieractualiteAction()
    {
        /* page administration/publieractualite - Publier une actualite */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $actualite = new Application_Model_EuActualite();
        $actualiteM = new Application_Model_EuActualiteMapper();
        $actualiteM->find($id, $actualite);
		
        $actualite->setPublier($this->_request->getParam('publier'));
		$actualiteM->update($actualite);
        }

		$this->_redirect('/administration/listactualite');
    }




    public function listpreinscriptionAction()
    {
        /* page administration/listpreinscription - Liste pré-inscription personne physique */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $preinscription = new Application_Model_EuPreinscriptionMapper();
        $this->view->entries = $preinscription->fetchAll();

        $this->view->tabletri = 1;

    }



    public function listpreinscriptionmoraleAction()
    {
        /* page administration/listpreinscriptionmorale - Liste pré-inscription personne morale */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();
        $this->view->entries = $preinscriptionmorale->fetchAll();

        $this->view->tabletri = 1;

    }



    public function addcentreAction()
    {
        /* page administration/addcentre - Ajout de centre d'enrolement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['centre_ville']) && $_POST['centre_ville']!="" && isset($_POST['centre_quartier']) && $_POST['centre_quartier']!="" && isset($_POST['centre_libelle']) && $_POST['centre_libelle']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuCentre();
        $ma = new Application_Model_EuCentreMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setCentre_id($compteur);
            $a->setCentre_description($_POST['centre_description']);
            $a->setCentre_quartier($_POST['centre_quartier']);
            $a->setCentre_libelle($_POST['centre_libelle']);
            $a->setCentre_ville($_POST['centre_ville']);
            $a->setId_pays($_POST['id_pays']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);
			

                    for ($i = 0; $i < sizeof($_POST['code_membre']); $i++) {
                        $centre_membre = new Application_Model_EuCentreMembre();
                        $m_centre_membre = new Application_Model_EuCentreMembreMapper();

                        $compt_centre_membre = $m_centre_membre->findConuter() + 1;

                        $m_centre = new Application_Model_EuCentreMapper();
                        $compt_centre = $m_centre->findConuter();


                        $centre_membre->setCentre_membre_id($compt_centre_membre);
                        $centre_membre->setCentre_id($compt_centre);
                        $centre_membre->setCode_membre($_POST['code_membre'][$i]);
                        $m_centre_membre->save($centre_membre);
                    }/**/
			
			
		$this->_redirect('/administration/listcentre');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editcentreAction()
    {
        /* page administration/editcentre - Modification de centre d'enrolement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['centre_ville']) && $_POST['centre_ville']!="" && isset($_POST['centre_quartier']) && $_POST['centre_quartier']!="" && isset($_POST['centre_libelle']) && $_POST['centre_libelle']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuCentre();
        $ma = new Application_Model_EuCentreMapper();
		$ma->find($_POST['centre_id'], $a);
			
            $a->setCentre_description($_POST['centre_description']);
            $a->setCentre_quartier($_POST['centre_quartier']);
            $a->setCentre_libelle($_POST['centre_libelle']);
            $a->setCentre_ville($_POST['centre_ville']);
            $a->setId_pays($_POST['id_pays']);
            $ma->update($a);
			
			
			
$centremembreM = new Application_Model_EuCentreMembreMapper();
$centremembre = $centremembreM->fetchAll2($a->centre_id);
foreach ($centremembre as $membre):
        $centremembreM->delete($membre->centre_membre_id);
endforeach;			



                    for ($i = 0; $i < sizeof($_POST['code_membre']); $i++) {
                        $centre_membre = new Application_Model_EuCentreMembre();
                        $m_centre_membre = new Application_Model_EuCentreMembreMapper();

                        $compt_centre_membre = $m_centre_membre->findConuter() + 1;

                        $m_centre = new Application_Model_EuCentreMapper();
                        $compt_centre = $a->centre_id;


                        $centre_membre->setCentre_membre_id($compt_centre_membre);
                        $centre_membre->setCentre_id($compt_centre);
                        $centre_membre->setCode_membre($_POST['code_membre'][$i]);
                        $m_centre_membre->save($centre_membre);
                    }/**/
			
			
			
			
			
			
			
			
		$this->_redirect('/administration/listcentre');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuCentre();
        $ma = new Application_Model_EuCentreMapper();
		$ma->find($id, $a);
		$this->view->centre = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuCentre();
        $ma = new Application_Model_EuCentreMapper();
		$ma->find($id, $a);
		$this->view->centre = $a;
            }
	}
	}




    public function listcentreAction()
    {
        /* page administration/listcentre - Liste de centre d'enrolement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $centre = new Application_Model_EuCentreMapper();
        $this->view->entries = $centre->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppcentreAction()
    {
        /* page administration/suppcentre - Suppression de centre d'enrolement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $centre = new Application_Model_EuCentre();
        $centreM = new Application_Model_EuCentreMapper();
        $centreM->find($id, $centre);
		
        $centreM->delete($centre->centre_id);

        }

		$this->_redirect('/administration/listcentre');
    }




    public function publiercentreAction()
    {
        /* page administration/publiercentre - Publier un centre d'enrolement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');

		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $centre = new Application_Model_EuCentre();
        $centreM = new Application_Model_EuCentreMapper();
        $centreM->find($id, $centre);
		
        $centre->setPublier($this->_request->getParam('publier'));
		$centreM->update($centre);
        }

		$this->_redirect('/administration/listcentre');
    }


    public function suppcentremembreAction()
    {
        /* page administration/suppcentremembre - Suppression d'un membre de centre d'enrolement */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $centremembre = new Application_Model_EuCentreMembre();
        $centremembreM = new Application_Model_EuCentreMembreMapper();
        $centremembreM->find($id, $centremembre);
		
        $centremembreM->delete($centremembre->centre_membre_id);

        }

		$this->_redirect('/administration/listcentre');
    }






    public function addzppeAction()
    {
        /* page administration/addzppe - Ajout de ZPPE */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['zppe_resume']) && $_POST['zppe_resume']!="" && isset($_POST['zppe_libelle']) && $_POST['zppe_libelle']!="" && isset($_POST['zppe_portable']) && $_POST['zppe_portable']!="" && isset($_POST['zppe_email']) && $_POST['zppe_email']!="" && isset($_POST['zppe_login']) && $_POST['zppe_login']!="" && isset($_POST['zppe_password']) && $_POST['zppe_password']==$_POST['confirme']) {
		
		include("Transfert.php");
		if(isset($_FILES['zppe_vignette']['name']) && $_FILES['zppe_vignette']['name']!=""){
		$chemin	= "zppes";
		$file = $_FILES['zppe_vignette']['name'];
		$file1='zppe_vignette';
		$zppe = $chemin."/".transfert($chemin,$file1);
		} else {$zppe = "";}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuZppe();
        $ma = new Application_Model_EuZppeMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setZppe_id($compteur);
            $a->setZppe_resume($_POST['zppe_resume']);
            $a->setZppe_libelle($_POST['zppe_libelle']);
            $a->setZppe_description($_POST['zppe_description']);
            $a->setZppe_vignette($zppe);
            $a->setZppe_login($_POST['zppe_login']);
            $a->setZppe_password(md5($_POST['zppe_password']));
            $a->setZppe_date_genere($date_id->toString('yyyy-MM-dd'));
            $a->setZppe_portable($_POST['zppe_portable']);
            $a->setZppe_email($_POST['zppe_email']);
            $a->setZppe_code_membre($_POST['zppe_membre']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);

		$this->_redirect('/administration/listzppe');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editzppeAction()
    {
        /* page administration/editzppe - Modification de ZPPE */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['zppe_resume']) && $_POST['zppe_resume']!="" && isset($_POST['zppe_libelle']) && $_POST['zppe_libelle']!="" && isset($_POST['zppe_portable']) && $_POST['zppe_portable']!="" && isset($_POST['zppe_email']) && $_POST['zppe_email']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['zppe_vignette']['name']) && $_FILES['zppe_vignette']['name']!=""){
		$chemin	= "zppes";
		$file = $_FILES['zppe_vignette']['name'];
		$file1='zppe_vignette';
		$zppe = $chemin."/".transfert($chemin,$file1);
		} else {$zppe = $_POST['zppe_vignette_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuZppe();
        $ma = new Application_Model_EuZppeMapper();
		$ma->find($_POST['zppe_id'], $a);
			
            $a->setZppe_resume($_POST['zppe_resume']);
            $a->setZppe_libelle($_POST['zppe_libelle']);
            $a->setZppe_description($_POST['zppe_description']);
            $a->setZppe_vignette($zppe);
            //$a->setZppe_login($_POST['zppe_login']);
            //$a->setZppe_password($_POST['zppe_password']);
            $a->setZppe_portable($_POST['zppe_portable']);
            $a->setZppe_email($_POST['zppe_email']);
            $a->setZppe_code_membre($_POST['zppe_membre']);
            $ma->update($a);
			
		$this->_redirect('/administration/listzppe');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuZppe();
        $ma = new Application_Model_EuZppeMapper();
		$ma->find($id, $a);
		$this->view->zppe = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuZppe();
        $ma = new Application_Model_EuZppeMapper();
		$ma->find($id, $a);
		$this->view->zppe = $a;
            }
	}
	}




    public function listzppeAction()
    {
        /* page administration/listzppe - Liste des ZPPEs */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $zppe = new Application_Model_EuZppeMapper();
        $this->view->entries = $zppe->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppzppeAction()
    {
        /* page administration/suppzppe - Suppression de ZPPE */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $zppe = new Application_Model_EuZppe();
        $zppeM = new Application_Model_EuZppeMapper();
        $zppeM->find($id, $zppe);
		
        $zppeM->delete($zppe->zppe_id);
		//unlink($zppe->zppe_vignette);	

        }

		$this->_redirect('/administration/listzppe');
    }




    public function publierzppeAction()
    {
        /* page administration/publierzppe - Publier un ZPPE */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $zppe = new Application_Model_EuZppe();
        $zppeM = new Application_Model_EuZppeMapper();
        $zppeM->find($id, $zppe);
		
        $zppe->setPublier($this->_request->getParam('publier'));
		$zppeM->update($zppe);
        }

		$this->_redirect('/administration/listzppe');
    }


    public function excelzppeAction()
    {
        /* page administration/excelzppe - Export de ZPPE */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
   
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		
		
		include("Transfert.php");


        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $zppe = new Application_Model_EuZppe();
        $zppeM = new Application_Model_EuZppeMapper();
        $zppeM->find($id, $zppe);
		
		
require_once 'PHPExcel/PHPExcel.php';
		
		
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("MCNP")
							 ->setLastModifiedBy($sessionutilisateur->login)
							 ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
							 ->setSubject("Export Liste Bon")
							 ->setDescription("")
							 ->setKeywords("")
							 ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);										  

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(7);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(18);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(18);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);


$objPHPExcel->getActiveSheet()->setCellValue('A1', "#");
$objPHPExcel->getActiveSheet()->setCellValue('B1', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C1', "Numéro");
$objPHPExcel->getActiveSheet()->setCellValue('D1', "Montant");
$objPHPExcel->getActiveSheet()->setCellValue('E1', "Montant crédit");
$objPHPExcel->getActiveSheet()->setCellValue('F1', "Code Membre");



        $bon = new Application_Model_EuBonMapper();
        $bonentries = $bon->fetchAllByZppeExcel($zppe->zppe_id, $date_id->toString('yyyy-MM-dd'));
$y = 2;
foreach ($bonentries as $entry):
	
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $entry->bon_id);
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $entry->bon_date);
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->bon_numero);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->bon_montant);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_montant_credit);
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $entry->bon_code_membre);

$y++; 	
endforeach;



$objPHPExcel->getActiveSheet()->setTitle($zppe->zppe_libelle);
$objPHPExcel->setActiveSheetIndex(0);





$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

if (!is_dir("excel_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle)))) {
mkdir("excel_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle)), 0777);
}

rename("../application/controllers/AdministrationController.xlsx", "excel_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle))."/BON_".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle)."_".str_replace("/", "-", mettreaccents($zppe->zppe_date_genere)))."_".$date_id->toString('yyyy-MM-dd').".xlsx");

 
 
        $zppe->setZppe_date_genere($date_id->toString('yyyy-MM-dd'));
		$zppeM->update($zppe);
		
		
		
		
$fichier = "excel_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle))."/BON_".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle)."_".str_replace("/", "-", mettreaccents($zppe->zppe_date_genere)))."_".$date_id->toString('yyyy-MM-dd').".xlsx";
		
$filena = "BON_".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle)."_".str_replace("/", "-", mettreaccents($zppe->zppe_date_genere)))."_".$date_id->toString('yyyy-MM-dd').".xlsx";
		
		
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $zppe->zppe_portable, "Un mail vient d'être envoyé à l'adresse ".$zppe->zppe_email.". Ci-joint la liste des bons émis.");        
		
///////////////////////////////

$esmc_email	 = "esmcsarlu@gmail.com";	
		
	
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('La liste des bons émis depuis '.$zppe->zppe_date_genere.'.');
$mail->setFrom($esmc_email, 'ESMC');
$mail->addTo($zppe->zppe_email, $zppe->zppe_libelle);
$mail->setSubject('Les bons emis depuis '.$zppe->zppe_date_genere.'');


$monImage = file_get_contents($fichier);

$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype

$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $fichier);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 

$mail->send($tr);
		
		
        }

		$this->_redirect('/administration/listzppe');
    }


    public function addbonAction()
    {
        /* page administration/addbon - Ajout de bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['bon_zppe']) && $_POST['bon_zppe']!="" && isset($_POST['bon_numero']) && $_POST['bon_numero']!="" && isset($_POST['bon_code_membre']) && $_POST['bon_code_membre']!="" && isset($_POST['bon_montant']) && $_POST['bon_montant']!="" && isset($_POST['bon_montant_credit']) && $_POST['bon_montant_credit']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuBon();
        $ma = new Application_Model_EuBonMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setBon_id($compteur);
            $a->setBon_zppe($_POST['bon_zppe']);
            $a->setBon_numero($_POST['bon_numero']);
            $a->setBon_montant($_POST['bon_montant']);
            $a->setBon_montant_credit($_POST['bon_montant_credit']);
            $a->setBon_code_membre($_POST['bon_code_membre']);
            $a->setBon_date($date_id->toString('yyyy-MM-dd'));
            $a->setBon_utilisateur($_POST['bon_utilisateur']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);



					
					for($i = 0; $i < count($_POST['bon_detail_reference']); $i++){
        $a = new Application_Model_EuBonDetail();
        $ma = new Application_Model_EuBonDetailMapper();
			
            $compteur_bon_detail = $ma->findConuter() + 1;
            $a->setBon_detail_id($compteur_bon_detail);
            $a->setBon_id($compteur);
            $a->setBon_detail_reference($_POST['bon_detail_reference'][$i]);
            $a->setBon_detail_libelle($_POST['bon_detail_libelle'][$i]);
            $a->setBon_detail_prix_unitaire($_POST['bon_detail_prix_unitaire'][$i]);
            $a->setBon_detail_quantite($_POST['bon_detail_quantite'][$i]);
            $ma->save($a);
                    }





		$this->_redirect('/administration/listbon');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editbonAction()
    {
        /* page administration/editbon - Modification de bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['bon_zppe']) && $_POST['bon_zppe']!="" && isset($_POST['bon_numero']) && $_POST['bon_numero']!="" && isset($_POST['bon_code_membre']) && $_POST['bon_code_membre']!="" && isset($_POST['bon_montant']) && $_POST['bon_montant']!="" && isset($_POST['bon_montant_credit']) && $_POST['bon_montant_credit']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuBon();
        $ma = new Application_Model_EuBonMapper();
		$ma->find($_POST['bon_id'], $a);
			
            $a->setBon_zppe($_POST['bon_zppe']);
            $a->setBon_numero($_POST['bon_numero']);
            $a->setBon_montant($_POST['bon_montant']);
            $a->setBon_montant_credit($_POST['bon_montant_credit']);
            $a->setBon_code_membre($_POST['bon_code_membre']);
            $a->setBon_date($date_id->toString('yyyy-MM-dd'));
            $a->setBon_utilisateur($_POST['bon_utilisateur']);
            //$a->setPublier($_POST['publier']);
            $ma->update($a);
			
		$this->_redirect('/administration/listbon');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuBon();
        $ma = new Application_Model_EuBonMapper();
		$ma->find($id, $a);
		$this->view->bon = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuBon();
        $ma = new Application_Model_EuBonMapper();
		$ma->find($id, $a);
		$this->view->bon = $a;
            }
	}
	}




    public function listbonAction()
    {
        /* page administration/listbon - Liste des bons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $bon = new Application_Model_EuBonMapper();
if($sessionutilisateur->code_groupe != "admin_site"){
        $this->view->entries = $bon->fetchAllByUtilisateur($sessionutilisateur->id_utilisateur);
} else {
        $this->view->entries = $bon->fetchAll();
}
        $this->view->tabletri = 1;

    }


    public function suppbonAction()
    {
        /* page administration/suppbon - Suppression de bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $bon = new Application_Model_EuBon();
        $bonM = new Application_Model_EuBonMapper();
        $bonM->find($id, $bon);
		
        $bonM->delete($bon->bon_id);

        }

		$this->_redirect('/administration/listbon');
    }




    public function publierbonAction()
    {
        /* page administration/publierbon - Publier un bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $bon = new Application_Model_EuBon();
        $bonM = new Application_Model_EuBonMapper();
        $bonM->find($id, $bon);
		
        $bon->setPublier($this->_request->getParam('publier'));
		$bonM->update($bon);
        }

		$this->_redirect('/administration/listbon');
    }

    public function codebarreAction()
    {
        /* page administration/codebarre - Code Barre */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

		$this->view->id = $id;

        }

		//$this->_redirect('/administration/listbon');
    }


    public function pdfbonAction()
    {
        /* page administration/pdfbon - Génération de bon en PDF */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		include("Transfert.php");
		



	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        $bon = new Application_Model_EuBon();
        $bonM = new Application_Model_EuBonMapper();
        $bonM->find($id, $bon);

$zppe = new Application_Model_EuZppe();
        $zppeM = new Application_Model_EuZppeMapper();
        $zppeM->find($bon->bon_zppe, $zppe);

        $utilisateur = new Application_Model_EuUtilisateur();
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateurM->find($bon->bon_utilisateur, $utilisateur);



$html = "";

$html .= '
    <page_footer>
        <table>
      <tr>
        <td align="right">
		<barcode type="C128B" value="'.$bon->bon_numero.$utilisateur->code_membre.'" style="width:150mm; height:10mm;" label="none"></barcode>
		</td>
      </tr>
<tr>
	<td><hr></td>
</tr>
<tr>
    <td align="center">Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet<br />
RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
  </tr>
<tr>
	<td style="width: 34%; text-align: center">[[page_cu]]/[[page_nb]]</td>
</tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="http://testing.gacsource.net/images/entete.gif" width="738" height="156" /></td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left" valign="middle"><table width="100%" border="0" style="font-size:10px;">
  <tr>
    <td align="right" valign="middle">/__________</td>
    <td align="right" valign="middle">/__________</td>
    <td align="right" valign="middle">/__________</td>
    <td align="right" valign="middle">/__________</td>
    <td align="right" valign="middle">/__________</td>
    <td align="right" valign="middle">/__________</td>
    <td align="right" valign="middle">/__________/</td>
  </tr>
  <tr align="center">
    <td valign="middle">TGSSA</td>
    <td valign="middle">AGSSA</td>
    <td valign="middle">FGSSA</td>
    <td valign="middle">TGSDA</td>
    <td valign="middle">AGSDA</td>
    <td valign="middle">FGSDA</td>
    <td valign="middle">AGSEA</td>
  </tr>
</table></td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  <tr>
    <td>
<strong><u><h2>BON A LIVRER</h2></u></strong>
N°  BON : <strong style="font-size:16px;">'.$bon->bon_numero.'</strong><br />
Date d&rsquo;émission  du Bon : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td width="60%" align="center" valign="middle"><img src="http://testing.gacsource.net/images/payernonlivre.jpg" width="200" height="100" /></td>
    <td><strong>A <br /><br />'.$zppe->zppe_libelle.'</strong><br />'.$zppe->zppe_resume.'</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>';
        $bon_detail = new Application_Model_EuBonDetailMapper();
        $entriesbondetail = $bon_detail->fetchAll3($id);
if(count($entriesbondetail)>0){	  
$html .= '
  <tr>
    <td colspan="2" width="768"><table border="0" cellpadding="0" cellspacing="0">
      <tr style="background-color:#CCC;">
        <th align="center" style="border:1px solid #CCC;">Ref.</th>
        <th align="center" style="border:1px solid #CCC;">Libellé</th>
        <th align="center" style="border:1px solid #CCC;">Quantité</th>
        <th align="center" style="border:1px solid #CCC;">Prix Unitaire</th>
        <th align="center" style="border:1px solid #CCC;">Montant</th>

      </tr>';
$montanttotal = 0;	  
foreach ($entriesbondetail as $entry):
$montant = $entry->bon_detail_quantite * $entry->bon_detail_prix_unitaire;
$montanttotal += $montant;	  
$html .= '
      <tr>
        <td align="left" style="border:1px solid #CCC;">'.$entry->bon_detail_reference.'</td>
        <td align="left" style="border:1px solid #CCC;">'.$entry->bon_detail_libelle.'</td>
        <td align="right" style="border:1px solid #CCC;">'.number_format($entry->bon_detail_quantite, 0, ',', ' ').'</td>
        <td align="right" style="border:1px solid #CCC;">'.number_format($entry->bon_detail_prix_unitaire, 0, ',', ' ').'</td>
        <td align="right" style="border:1px solid #CCC;">'.number_format($montant, 0, ',', ' ').'</td>
      </tr>';
endforeach;
$montanttva = $montanttotal * 0.18;
$html .= '
      <tr>
        <td align="left">&nbsp;</td>
        <td align="left">&nbsp;</td>
        <td align="right">&nbsp;</td>
        <td align="right"><strong>Montant Total HT</strong></td>
        <td align="right" style="border:1px solid #CCC;">'.number_format(($montanttotal - $montanttva), 0, ',', ' ').'</td>
      </tr>
      <tr>
        <td align="left">&nbsp;</td>
        <td align="left">&nbsp;</td>
        <td align="right">&nbsp;</td>
        <td align="right"><strong>Montant TVA 18%</strong></td>
        <td align="right" style="border:1px solid #CCC;">'.number_format($montanttva, 0, ',', ' ').'</td>
      </tr>
      <tr>
        <td colspan="4" align="left">Bon  arrêté (en FCFA) &agrave; la somme de : <i>'.lettre($montanttotal, 75).'</i></td>
        <td align="right" style="border:1px solid #CCC;">'.number_format(($montanttotal), 0, ',', ' ').'</td>
      </tr>
      <tr>
        <td align="left">&nbsp;</td>
        <td align="left">&nbsp;</td>
        <td align="right">&nbsp;</td>
        <td align="right">&nbsp;</td>
        <td align="right">&nbsp;</td>
      </tr>
      <tr>
        <td colspan="4" align="left">Bon  arrêté (en unités bleues en nr) &agrave; la somme de : <i>'.lettre($bon->bon_montant_credit, 50).'</i></td>
        <td align="right" style="border:1px solid #CCC;">'.number_format($bon->bon_montant_credit, 0, ',', ' ').'</td>
      </tr>
      <tr>
        <td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
      </tr>
    </table></td>
  </tr>';
	}	  
$html .= '
  <tr>
    <td colspan="2" width="768"><table border="0">
      <tr>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td align="center">Nom &amp;  prénom  <br />
          Emetteur du Bon</td>
        <td align="center">Nom  &amp; prénom Personne <br />
          habileté à viser le Bon</td>
        <td align="center">Reçu par : </td>
      </tr>
      <tr>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
      </tr>
	  <tr>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
      </tr>
	  <tr>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
      </tr>
	  <tr>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
        <td align="center">&nbsp;</td>
      </tr>
';
$utilisateurM = new Application_Model_EuUtilisateurMapper();
$utilisateur = new Application_Model_EuUtilisateur();
$utilisateurM->find($bon->bon_utilisateur, $utilisateur);

$html .= '
		<tr>
        <td align="center">'.$utilisateur->nom_utilisateur.' '.$utilisateur->prenom_utilisateur.'</td>
        <td align="center">&nbsp;</td>
	  ';
if (substr($bon->bon_code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($bon->bon_code_membre, $membre);

$paysM = new Application_Model_EuPaysMapper();
$pays = new Application_Model_EuPays();
$paysM->find($membre->id_pays, $pays);
$html .= '
        <td align="center">
		'.$membre->nom_membre.' '.$membre->prenom_membre.' <br />
      <strong>'.$membre->code_membre.'</strong>
	  <br />Tél.: '.$membre->tel_membre.' / '.$membre->portable_membre.'
	  </td>
	  ';
} else if (substr($bon->bon_code_membre, -1) == "M") {
$membremorale = new Application_Model_EuMembreMorale();
$mapper_membremorale = new Application_Model_EuMembreMoraleMapper();
$mapper_membremorale->find($bon->bon_code_membre, $membremorale);

$mapper_rep = new Application_Model_EuRepresentationMapper();
$rep = $mapper_rep->findbyrep($membremorale->code_membre_morale);

$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($rep->code_membre, $membre);

$paysM = new Application_Model_EuPaysMapper();
$pays = new Application_Model_EuPays();
$paysM->find($membremorale->id_pays, $pays);
$html .= '
        <td align="center">
	'.$membremorale->raison_sociale.' <br />
      '.$membre->nom_membre.' '.$membre->prenom_membre.' <br />
      <strong>'.$membremorale->code_membre_morale.'</strong><br />
	  N° RCCM : '.$membremorale->num_registre_membre.'
	  <br />Tél.: '.$membremorale->tel_membre.' / '.$membremorale->portable_membre.'
	  </td>
';
$utilisateurM = new Application_Model_EuUtilisateurMapper();
$utilisateur = new Application_Model_EuUtilisateur();
$utilisateurM->find($bon->bon_utilisateur, $utilisateur);
}

$html .= '
      </tr>
	  ';
$html .= '
      <tr>
        <td align="center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
      </tr>
    </table></td>
  </tr>
  
</table>


';

		
        $bon->setPublier(1);
		$bonM->update($bon);

////////////////////////////////////////////////////////////////////////////////
$filename = '/var/www/html/mcnp/public/bon.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle)))) {
mkdir("../../webfiles/pdf_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle)), 0777);
}

$newfile = "../../webfiles/pdf_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle))."/BON_".str_replace("/", "_", mettreaccents($bon->bon_numero)."_".mettreaccents($bon->bon_code_membre)."_".str_replace("/", "_", mettreaccents($bon->bon_date))).".html"	;
$newnom = "BON_".str_replace("/", "_", mettreaccents($bon->bon_numero)."_".mettreaccents($bon->bon_code_membre)."_".str_replace("/", "_", mettreaccents($bon->bon_date)));
$newchemin = "../../webfiles/pdf_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle))."/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

		
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $zppe->zppe_portable, "Un mail vient d'être envoyé à l'adresse ".$zppe->zppe_email.". Ci-joint le bon émis.");        
///////////////////////////////

$esmc_email	 = "esmcsarlu@gmail.com";	
		
$fichier = $file;	
$filena	= $newnom.'.pdf';
	
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Le bon &eacute;mis le '.$zppe->zppe_date_genere.'.');
$mail->setFrom($esmc_email, 'ESMC');
$mail->addTo($zppe->zppe_email, $zppe->zppe_libelle);
$mail->setSubject('Un bon emis le '.$zppe->zppe_date_genere.'');


$monImage = file_get_contents($fichier);

$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype

$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $fichier);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 

$mail->send($tr);
		



////////////////////////////////////////////////////////////////////////////



if (substr($bon->bon_code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($bon->bon_code_membre, $membre);
$nom = $membre->nom_membre.' '.$membre->prenom_membre;
} else if (substr($bon->bon_code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$mapper_membre = new Application_Model_EuMembreMoraleMapper();
$mapper_membre->find($bon->bon_code_membre, $membre);
$nom = $membre->raison_sociale;
}
		
		
		
		
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $membre->portable_membre, "Un mail vient d'être envoyé à l'adresse ".$membre->email_membre.". Ci-joint le bon émis.");        
///////////////////////////////


$esmc_email	 = "esmcsarlu@gmail.com";	
		
$fichier = $file;	
$filena	= $newnom.'.pdf';
	
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Le bon &eacute;mis le '.$zppe->zppe_date_genere.'.');
$mail->setFrom($esmc_email, 'ESMC');
$mail->addTo($membre->email_membre, $nom);
$mail->setSubject('Un bon emis le '.$zppe->zppe_date_genere.'');


$monImage = file_get_contents($fichier);

$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype

$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $fichier);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 

$mail->send($tr);





		
        }

		$this->_redirect('/administration/listbon');
    }


    public function telechargerbonAction()
    {
        /* page administration/telechargerbon - Télécharger de bon */

		/*$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}*/

		include("Transfert.php");

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        $bon = new Application_Model_EuBon();
        $bonM = new Application_Model_EuBonMapper();
        $bonM->find($id, $bon);

$zppe = new Application_Model_EuZppe();
        $zppeM = new Application_Model_EuZppeMapper();
        $zppeM->find($bon->bon_zppe, $zppe);

$newnom = "BON_".str_replace("/", "_", mettreaccents($bon->bon_numero)."_".mettreaccents($bon->bon_code_membre)."_".str_replace("/", "_", mettreaccents($bon->bon_date)));
$newchemin = "../../webfiles/pdf_bon/".str_replace(" ", "_", mettreaccents($zppe->zppe_libelle))."/"	;

$file = $newchemin.$newnom.'.pdf';

if (file_exists($file)) {
    header('Content-Description: File Transfer');
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename='.basename($file));
    header('Content-Transfer-Encoding: binary');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Content-Length: ' . filesize($file));
    ob_clean();
    flush();
    readfile($file);
    exit;
}
		//$this->_redirect('/administration/listbon');
		}
	}
	
	
    public function addbondetailAction()
    {
        /* page administration/addbondetail - Ajout detail de bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
$this->view->id = $id;

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['bon_detail_reference']) && $_POST['bon_detail_reference']!="" && isset($_POST['bon_detail_libelle']) && $_POST['bon_detail_libelle']!="" && isset($_POST['bon_detail_quantite']) && $_POST['bon_detail_quantite']!="" && isset($_POST['bon_detail_prix_unitaire']) && $_POST['bon_detail_prix_unitaire']!="") {
		
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuBonDetail();
        $ma = new Application_Model_EuBonDetailMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setBon_detail_id($compteur);
            $a->setBon_id($_POST['bon_id']);
            $a->setBon_detail_reference($_POST['bon_detail_reference']);
            $a->setBon_detail_libelle($_POST['bon_detail_libelle']);
            $a->setBon_detail_prix_unitaire($_POST['bon_detail_prix_unitaire']);
            $a->setBon_detail_quantite($_POST['bon_detail_quantite']);
            $ma->save($a);

		//$this->_redirect('/administration/listbondetail');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editbondetailAction()
    {
        /* page administration/editbondetail - Modification detail de bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['bon_detail_reference']) && $_POST['bon_detail_reference']!="" && isset($_POST['bon_detail_libelle']) && $_POST['bon_detail_libelle']!="" && isset($_POST['bon_detail_quantite']) && $_POST['bon_detail_quantite']!="" && isset($_POST['bon_detail_prix_unitaire']) && $_POST['bon_detail_prix_unitaire']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuBonDetail();
        $ma = new Application_Model_EuBonDetailMapper();
		$ma->find($_POST['bon_detail_id'], $a);
			
            //$a->setBon_id($_POST['bon_id']);
            $a->setBon_detail_reference($_POST['bon_detail_reference']);
            $a->setBon_detail_libelle($_POST['bon_detail_libelle']);
            $a->setBon_detail_prix_unitaire($_POST['bon_detail_prix_unitaire']);
            $a->setBon_detail_quantite($_POST['bon_detail_quantite']);
            $ma->update($a);
			
		$this->_redirect('/administration/listbondetail/id/'.$_POST['bon_id']);
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuBonDetail();
        $ma = new Application_Model_EuBonDetailMapper();
		$ma->find($id, $a);
		$this->view->bon_detail = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuBonDetail();
        $ma = new Application_Model_EuBonDetailMapper();
		$ma->find($id, $a);
		$this->view->bon_detail = $a;
            }
	}
	}




    public function listbondetailAction()
    {
        /* page administration/listbondetail - Liste detail de bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $bon_detail = new Application_Model_EuBonDetailMapper();
        $this->view->entries = $bon_detail->fetchAll3($id);
		
$this->view->id = $id;

        $this->view->tabletri = 1;
            }else{
		$this->_redirect('/administration/listbon');
				}

    }


    public function suppbondetailAction()
    {
        /* page administration/suppbondetail - Suppression detail de bon */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $bon_detail = new Application_Model_EuBonDetail();
        $bon_detailM = new Application_Model_EuBonDetailMapper();
        $bon_detailM->find($id, $bon_detail);
		
        $bon_detailM->delete($bon_detail->bon_detail_id);

        }

		$this->_redirect('/administration/listbondetail/id/'.$bon_detail->bon_id);
    }




    public function addposteAction()
    {
        /* page administration/addposte - Ajout de poste */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['poste_utilisateur']) && $_POST['poste_utilisateur']!="" && isset($_POST['poste_tache']) && count($_POST['poste_tache']) > 0) {
		
					for($i = 0; $i < count($_POST['poste_tache']); $i++){
                    $poste_mapper = new Application_Model_EuPosteMapper();
                    $poste = new Application_Model_EuPoste();
					
							$poste_compteur = $poste_mapper->findConuter() + 1;					
					
                            $poste->setPoste_id($poste_compteur)
                               ->setPoste_tache($_POST['poste_tache'][$i])
                               ->setPoste_utilisateur($_POST['poste_utilisateur'])
							   ;
                            $poste_mapper->save($poste);
                    }
			

		$this->_redirect('/administration/listposte');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function listposteAction()
    {
        /* page administration/listposte - Liste de poste */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $poste = new Application_Model_EuPosteMapper();
        $this->view->entries = $poste->fetchAll();

        $this->view->tabletri = 1;

    }



    public function suppposteAction()
    {
        /* page administration/suppposte - Suppression de poste */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $poste = new Application_Model_EuPoste();
        $posteM = new Application_Model_EuPosteMapper();
        $posteM->find($id, $poste);
		
        $posteM->delete($poste->poste_id);

        }

		$this->_redirect('/administration/listposte');
    }


    public function liresmsrecuAction()
    {
        /* page administration/liresmsrecu - Lire SMS reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

				$tabelb = new Application_Model_DbTable_EuSmsReceive();
				$selectb = $tabelb->select();
				$selectb->where("etat = ?", 0);
				//$selectb->where("", "");
				$this->view->entries = $tabelb->fetchAll($selectb);

        $this->view->tabletri = 1;
    }

    public function liresmsrecu2Action()
    {
        /* page administration/liresmsrecu - Lire SMS reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

				$tabelb = new Application_Model_DbTable_EuSmsReceive();
				$selectb = $tabelb->select();
				$selectb->where("etat = ?", 1);
				$this->view->entries = $tabelb->fetchAll($selectb);

        $this->view->tabletri = 1;
    }



    public function traitersmsAction()
    {
        /* page administration/traitersms - Traiter SMS reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $smsreceive = new Application_Model_EuSmsReceive();
        $smsreceiveM = new Application_Model_EuSmsReceiveMapper();
        $smsreceiveM->find($id, $smsreceive);
		
        $smsreceive->setEtat($this->_request->getParam('etat'));
		$smsreceiveM->update($smsreceive);

        }

		$this->_redirect('/administration/liresmsrecu');
    }


	
	
	
	
	
	
	







    public function editquestionreponseAction()
    {
        /* page administration/editquestionreponse - Modification de question reponse */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['question_reponse_nom']) && $_POST['question_reponse_nom']!="" && isset($_POST['question_reponse_categorie']) && $_POST['question_reponse_categorie']!="" && isset($_POST['question_reponse_question']) && $_POST['question_reponse_question']!="" && isset($_POST['question_reponse_reponse']) && $_POST['question_reponse_reponse']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuQuestionReponse();
        $ma = new Application_Model_EuQuestionReponseMapper();
		$ma->find($_POST['question_reponse_id'], $a);
			
            $a->setQuestion_reponse_nom($_POST['question_reponse_nom']);
            $a->setQuestion_reponse_question($_POST['question_reponse_question']);
            $a->setQuestion_reponse_reponse($_POST['question_reponse_reponse']);
            $a->setQuestion_reponse_categorie($_POST['question_reponse_categorie']);
            $a->setQuestion_reponse_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setQuestion_reponse_utilisateur($sessionutilisateur->id_utilisateur);
            $a->setPublier($_POST['publier']);
            $ma->update($a);
			
		$this->_redirect('/administration/listquestionreponse');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuQuestionReponse();
        $ma = new Application_Model_EuQuestionReponseMapper();
		$ma->find($id, $a);
		$this->view->question_reponse = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuQuestionReponse();
        $ma = new Application_Model_EuQuestionReponseMapper();
		$ma->find($id, $a);
		$this->view->question_reponse = $a;
            }
	}
	}




    public function listquestionreponseAction()
    {
        /* page administration/listquestionreponse - Liste de question reponse */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $question_reponse = new Application_Model_EuQuestionReponseMapper();
        $this->view->entries = $question_reponse->fetchAllByCategorie($sessionutilisateur->code_groupe);

        $this->view->tabletri = 1;

    }


    public function suppquestionreponseAction()
    {
        /* page administration/suppquestionreponse - Suppression de question reponse */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $question_reponse = new Application_Model_EuQuestionReponse();
        $question_reponseM = new Application_Model_EuQuestionReponseMapper();
        $question_reponseM->find($id, $question_reponse);
		
        $question_reponseM->delete($question_reponse->question_reponse_id);

        }

		$this->_redirect('/administration/listquestionreponse');
    }



    public function publierquestionreponseAction()
    {
        /* page administration/publierquestionreponse - Publier de question reponse */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
		
        $question_reponse = new Application_Model_EuQuestionReponse();
        $question_reponseM = new Application_Model_EuQuestionReponseMapper();
        $question_reponseM->find($id, $question_reponse);
		
        $question_reponse->setQuestion_reponse_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $question_reponse->setPublier($this->_request->getParam('publier'));
		$question_reponseM->update($question_reponse);
        }

		$this->_redirect('/administration/listquestionreponse');
    }






    public function addrecubpsAction()
    {
        /* page administration/addrecubps - Ajout de reçu BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['recu_bps_libelle']) && $_POST['recu_bps_libelle']!="" && isset($_POST['recu_bps_prk']) && $_POST['recu_bps_prk']!="" && isset($_POST['zppe_id']) && $_POST['zppe_id']!="") {
		
			
        $a = new Application_Model_EuRecuBps();
        $ma = new Application_Model_EuRecuBpsMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setRecu_bps_id($compteur);
            $a->setRecu_bps_libelle($_POST['recu_bps_libelle']);
            $a->setRecu_bps_prk($_POST['recu_bps_prk']);
            $a->setZppe_id($_POST['zppe_id']);
            $ma->save($a);

		$this->_redirect('/administration/listrecubps');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editrecubpsAction()
    {
        /* page administration/editrecubps - Modification de reçu BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['recu_bps_libelle']) && $_POST['recu_bps_libelle']!="" && isset($_POST['recu_bps_prk']) && $_POST['recu_bps_prk']!="" && isset($_POST['zppe_id']) && $_POST['zppe_id']!="") {
		
			
        $a = new Application_Model_EuRecuBps();
        $ma = new Application_Model_EuRecuBpsMapper();
		$ma->find($_POST['recu_bps_id'], $a);
			
            $a->setRecu_bps_libelle($_POST['recu_bps_libelle']);
            $a->setRecu_bps_prk($_POST['recu_bps_prk']);
            $a->setZppe_id($_POST['zppe_id']);
            $ma->update($a);
			
		$this->_redirect('/administration/listrecubps');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuRecuBps();
        $ma = new Application_Model_EuRecuBpsMapper();
		$ma->find($id, $a);
		$this->view->recu_bps = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuRecuBps();
        $ma = new Application_Model_EuRecuBpsMapper();
		$ma->find($id, $a);
		$this->view->recu_bps = $a;
            }
	}
	}




    public function listrecubpsAction()
    {
        /* page administration/listrecubps - Liste de reçu BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $recu_bps = new Application_Model_EuRecuBpsMapper();

        $this->view->entries = $recu_bps->fetchAll();

        $this->view->tabletri = 1;

    }


    public function supprecubpsAction()
    {
        /* page administration/supprecubps - Suppression de reçu BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $recu_bps = new Application_Model_EuRecuBps();
        $recu_bpsM = new Application_Model_EuRecuBpsMapper();
        $recu_bpsM->find($id, $recu_bps);
		
        $recu_bpsM->delete($recu_bps->recu_bps_id);

        }

		$this->_redirect('/administration/listrecubps');
    }







    public function addrecuAction()
    {
        /* page administration/addrecu - Ajout de reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['recu_bps']) && $_POST['recu_bps']!="" && isset($_POST['recu_numero']) && $_POST['recu_numero']!="" && isset($_POST['recu_code_membre']) && $_POST['recu_code_membre']!="" && isset($_POST['recu_montant']) && $_POST['recu_montant']!="" && isset($_POST['recu_montant_credit']) && $_POST['recu_montant_credit']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRecu();
        $ma = new Application_Model_EuRecuMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setRecu_id($compteur);
            $a->setRecu_bps($_POST['recu_bps']);
            $a->setRecu_numero($_POST['recu_numero']);
            $a->setRecu_montant($_POST['recu_montant']);
            $a->setRecu_montant_credit($_POST['recu_montant_credit']);
            $a->setRecu_code_membre($_POST['recu_code_membre']);
            $a->setRecu_date($date_id->toString('yyyy-MM-dd'));
            $a->setRecu_date_debut($_POST['recu_date_debut']);
            $a->setRecu_date_fin($_POST['recu_date_fin']);
            $a->setRecu_facture($_POST['recu_facture']);
            $a->setRecu_utilisateur($_POST['recu_utilisateur']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);

		$this->_redirect('/administration/listrecu');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editrecuAction()
    {
        /* page administration/editrecu - Modification de reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['recu_bps']) && $_POST['recu_bps']!="" && isset($_POST['recu_numero']) && $_POST['recu_numero']!="" && isset($_POST['recu_code_membre']) && $_POST['recu_code_membre']!="" && isset($_POST['recu_montant']) && $_POST['recu_montant']!="" && isset($_POST['recu_montant_credit']) && $_POST['recu_montant_credit']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRecu();
        $ma = new Application_Model_EuRecuMapper();
		$ma->find($_POST['recu_id'], $a);
			
            $a->setRecu_bps($_POST['recu_bps']);
            $a->setRecu_numero($_POST['recu_numero']);
            $a->setRecu_montant($_POST['recu_montant']);
            $a->setRecu_montant_credit($_POST['recu_montant_credit']);
            $a->setRecu_code_membre($_POST['recu_code_membre']);
            $a->setRecu_date($date_id->toString('yyyy-MM-dd'));
            $a->setRecu_date_debut($_POST['recu_date_debut']);
            $a->setRecu_date_fin($_POST['recu_date_fin']);
            $a->setRecu_facture($_POST['recu_facture']);
            //$a->setPublier($_POST['publier']);
            $ma->update($a);
			
		$this->_redirect('/administration/listrecu');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuRecu();
        $ma = new Application_Model_EuRecuMapper();
		$ma->find($id, $a);
		$this->view->recu = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuRecu();
        $ma = new Application_Model_EuRecuMapper();
		$ma->find($id, $a);
		$this->view->recu = $a;
            }
	}
	}




    public function listrecuAction()
    {
        /* page administration/listrecu - Liste de reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $recu = new Application_Model_EuRecuMapper();
if($sessionutilisateur->code_groupe != "admin_site"){
        $this->view->entries = $recu->fetchAllByUtilisateur($sessionutilisateur->id_utilisateur);
} else {
        $this->view->entries = $recu->fetchAll();
        }
		$this->view->tabletri = 1;

    }


    public function supprecuAction()
    {
        /* page administration/supprecu - Suppresion de reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $recu = new Application_Model_EuRecu();
        $recuM = new Application_Model_EuRecuMapper();
        $recuM->find($id, $recu);
		
        $recuM->delete($recu->recu_id);

        }

		$this->_redirect('/administration/listrecu');
    }




    public function publierrecuAction()
    {
        /* page administration/publierrecu - Publier un reçu */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $recu = new Application_Model_EuRecu();
        $recuM = new Application_Model_EuRecuMapper();
        $recuM->find($id, $recu);
		
        $recu->setPublier($this->_request->getParam('publier'));
		$recuM->update($recu);
        }

		$this->_redirect('/administration/listrecu');
    }



    public function pdfrecuAction()
    {
        /* page administration/pdfrecu - Génération de reçu en PDF */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		include("Transfert.php");
		



	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        $recu = new Application_Model_EuRecu();
        $recuM = new Application_Model_EuRecuMapper();
        $recuM->find($id, $recu);

$recu_bps = new Application_Model_EuRecuBps();
        $recu_bpsM = new Application_Model_EuRecuBpsMapper();
        $recu_bpsM->find($recu->recu_bps, $recu_bps);

        $utilisateur = new Application_Model_EuUtilisateur();
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateurM->find($recu->recu_utilisateur, $utilisateur);


$html = "";

$html .= '
    <page_footer>
        <table>
<tr>
    <td align="center" style="font-size:7px;">Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet. RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td><img src="http://testing.gacsource.net/images/entete.gif" width="738" height="156" /></td>
  </tr>
  <tr>
    <td><strong><u><h3>REÇU DE DEBIT</h3></u></strong></td>
  </tr>
  <tr>
    <td><table width="100%" border="0">
      <tr>
        <td width="50%" align="left"><i>N° Reçu : '.$recu->recu_numero.'</i></td>
        <td width="20%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td width="30%" align="center"><i>Du : '.$recu->recu_date_debut.'   à   '.$recu->recu_date_fin.'</i></td>

      </tr>
    </table></td>
  </tr>
  <tr>
    <td>Date d’encaissement : '.$recu->recu_date.'</td>
  </tr>
  <tr>
    <td><table width="100%" border="0">
      <tr>
        <td width="50%" align="center"><i>';
if (substr($recu->recu_code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($recu->recu_code_membre, $membre);

$paysM = new Application_Model_EuPaysMapper();
$pays = new Application_Model_EuPays();
$paysM->find($membre->id_pays, $pays);

$html .= ''.$membre->nom_membre.' '.$membre->prenom_membre.'';

} else if (substr($recu->recu_code_membre, -1) == "M") {
$membremorale = new Application_Model_EuMembreMorale();
$mapper_membremorale = new Application_Model_EuMembreMoraleMapper();
$mapper_membremorale->find($recu->recu_code_membre, $membremorale);

$mapper_rep = new Application_Model_EuRepresentationMapper();
$rep = $mapper_rep->findbyrep($membremorale->code_membre_morale);

$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($rep->code_membre, $membre);

$paysM = new Application_Model_EuPaysMapper();
$pays = new Application_Model_EuPays();
$paysM->find($membremorale->id_pays, $pays);

$html .= ''.$membremorale->raison_sociale.'';
}
	  
$html .= '		
		</i></td>
        <td width="20%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td width="30%" align="right"><i>Code Membre : '.$recu->recu_code_membre.'</i></td>
      </tr>
    </table></td>
  </tr>
  <tr>
    <td><table width="100%" border="0" cellpadding="0" cellspacing="0">
      <tr>
        <th style="border-top:1px dashed color:#C9C; height:23px;" align="left"><i>Période facture</i></th>
        <th style="border-top:1px dashed color:#C9C;" align="center"><i>BPS facturé</i></th>
        <th style="border-top:1px dashed color:#C9C;" align="center"><i>N° Facture</i></th>
        <th style="border-top:1px dashed color:#C9C;" align="center"><i>Montant total</i></th>
        <th style="border-top:1px dashed color:#C9C;" align="center"><i>Montant réglé en nr</i></th>
        <th style="border-top:1px dashed color:#C9C;" align="center"><i>Montant restant</i></th>
      </tr>
      <tr style="background-color:#CCC;">
        <td style="border-top:1px dashed color:#C9C; height:23px;" align="left"><i>Du '.$recu->recu_date_debut.'   à   '.$recu->recu_date_fin.'</i></td>
        <td style="border-top:1px dashed color:#C9C;" align="center"><i>'.$recu_bps->recu_bps_libelle.'</i></td>
        <td style="border-top:1px dashed color:#C9C;" align="center"><i>'.$recu->recu_facture.'</i></td>
        <td style="border-top:1px dashed color:#C9C;" align="center"><i>'.number_format($recu->recu_montant_credit, 0, ',', ' ').'</i></td>
        <td style="border-top:1px dashed color:#C9C;" align="center"><i>'.number_format($recu->recu_montant, 0, ',', ' ').'</i></td>
        <td style="border-top:1px dashed color:#C9C;" align="center"><i>'.number_format(($recu->recu_montant - $recu->recu_montant_credit), 0, ',', ' ').'</i></td>
      </tr>
      <tr>
        <td style="border-top:1px dashed color:#C9C; height:23px;" colspan="6" align="left"><i>Mode de règlement : unités ';
if (substr($recu->recu_code_membre, -1) == "P") {
$html .= 'de consommation ';
} else if (substr($recu->recu_code_membre, -1) == "M") {
$html .= 'd’investissement ';
}
$html .= '<span style="color:#F00">MCNP</span> en non récurrent.</i></td>
        </tr>
      <tr>
        <td style="border-top:1px solid color:#999;border-bottom:1px solid color:#999; height:23px;" colspan="5" align="left"><strong><i>Montant réglé en FCFA ( '.lettre($recu->recu_montant_credit, 75).' )</i></strong></td>
        <td style="border-top:1px solid color:#999;border-bottom:1px solid color:#999;" align="center"><strong><i>'.number_format($recu->recu_montant_credit, 2, ',', ' ').'</i></strong></td>
      </tr>
    </table></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td align="left"><i>Signature de l’émetteur du reçu :</i></td>
  </tr>
  <tr>
    <td align="left"><i>';
$utilisateurM = new Application_Model_EuUtilisateurMapper();
$utilisateur = new Application_Model_EuUtilisateur();
$utilisateurM->find($recu->recu_utilisateur, $utilisateur);

$html .= ''.$utilisateur->nom_utilisateur.' '.$utilisateur->prenom_utilisateur.'';	
	
$html .= '</i></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
  </tr>
</table>


';

		
        $recu->setPublier(1);
		$recuM->update($recu);

////////////////////////////////////////////////////////////////////////////////
$filename = '/var/www/html/mcnp/public/recu.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_recu/".str_replace(" ", "_", mettreaccents($recu_bps->recu_bps_libelle)))) {
mkdir("../../webfiles/pdf_recu/".str_replace(" ", "_", mettreaccents($recu_bps->recu_bps_libelle)), 0777);
}

$newfile = "../../webfiles/pdf_recu/".str_replace(" ", "_", mettreaccents($recu_bps->recu_bps_libelle))."/RECU_".str_replace("/", "_", mettreaccents($recu->recu_numero)."_".mettreaccents($recu->recu_code_membre)."_".str_replace("/", "_", mettreaccents($recu->recu_date))).".html"	;
$newnom = "RECU_".str_replace("/", "_", mettreaccents($recu->recu_numero)."_".mettreaccents($recu->recu_code_membre)."_".str_replace("/", "_", mettreaccents($recu->recu_date)));
$newchemin = "../../webfiles/pdf_recu/".str_replace(" ", "_", mettreaccents($recu_bps->recu_bps_libelle))."/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

//$this->_redirect('/html2pdf/examples/projet.php?fichierhtml='.$newfile.'&newnom='.$newnom.'');
unlink($newfile);

///////////////////////////////

$zppe = new Application_Model_EuZppe();
        $zppeM = new Application_Model_EuZppeMapper();
        $zppeM->find($recu_bps->zppe_id, $zppe);


		
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $zppe->zppe_portable, "Un mail vient d'être envoyé à l'adresse ".$zppe->zppe_email.". Ci-joint le bon émis.");        
///////////////////////////////

$esmc_email	 = "esmcsarlu@gmail.com";	
		
$fichier = $file;	
$filena	= $newnom.'.pdf';
	
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Le bon &eacute;mis le '.$zppe->zppe_date_genere.'.');
$mail->setFrom($esmc_email, 'ESMC');
$mail->addTo($zppe->zppe_email, $zppe->zppe_libelle);
$mail->setSubject('Un bon emis le '.$zppe->zppe_date_genere.'');


$monImage = file_get_contents($fichier);

$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype

$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $fichier);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 

$mail->send($tr);
		



////////////////////////////////////////////////////////////////////////////

if (substr($recu->recu_code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($recu->recu_code_membre, $membre);
$nom = $membre->nom_membre.' '.$membre->prenom_membre;
} else if (substr($recu->recu_code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$mapper_membre = new Application_Model_EuMembreMoraleMapper();
$mapper_membre->find($recu->recu_code_membre, $membre);
$nom = $membre->raison_sociale;
}
		
		
		
		
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $membre->portable_membre, "Un mail vient d'être envoyé à l'adresse ".$membre->email_membre.". Ci-joint le reçu de votre achat de code SMS.");        
///////////////////////////////

$esmc_email	 = "esmcsarlu@gmail.com";	
		
$fichier = $file;	
$filena	= $newnom.'.pdf';
	
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Le reçu &eacute;mis le '.$recu->recu_date.'.');
$mail->setFrom($esmc_email, 'ESMC');
$mail->addTo($membre->email_membre, $nom);
$mail->setSubject('Un reçu emis le '.$recu->recu_date.'');


$monImage = file_get_contents($fichier);

$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype

$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $fichier);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 

$mail->send($tr);
		

				
        }

		$this->_redirect('/administration/listrecu');
    }



    public function telechargerrecuAction()
    {
        /* page administration/telechargerrecu - Télécharger un reçu */

		/*$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}*/

		include("Transfert.php");

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        $recu = new Application_Model_EuRecu();
        $recuM = new Application_Model_EuRecuMapper();
        $recuM->find($id, $recu);

$recu_bps = new Application_Model_EuRecuBps();
        $recu_bpsM = new Application_Model_EuRecuBpsMapper();
        $recu_bpsM->find($recu->recu_bps, $recu_bps);

        $utilisateur = new Application_Model_EuUtilisateur();
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateurM->find($recu->recu_utilisateur, $utilisateur);

$newfile = "../../webfiles/pdf_recu/".str_replace(" ", "_", mettreaccents($recu_bps->recu_bps_libelle))."/RECU_".str_replace("/", "_", mettreaccents($recu->recu_numero)."_".mettreaccents($recu->recu_code_membre)."_".str_replace("/", "_", mettreaccents($recu->recu_date))).".html"	;
$newnom = "RECU_".str_replace("/", "_", mettreaccents($recu->recu_numero)."_".mettreaccents($recu->recu_code_membre)."_".str_replace("/", "_", mettreaccents($recu->recu_date)));
$newchemin = "../../webfiles/pdf_recu/".str_replace(" ", "_", mettreaccents($recu_bps->recu_bps_libelle))."/"	;

$file = $newchemin.$newnom.'.pdf';

if (file_exists($file)) {
    header('Content-Description: File Transfer');
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename='.basename($file));
    header('Content-Transfer-Encoding: binary');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Content-Length: ' . filesize($file));
    ob_clean();
    flush();
    readfile($file);
    exit;
}
		//$this->_redirect('/administration/listrecu');
		}
	}
	







    public function testAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');



    }








    public function addfactureAction()
    {
        /* page administration/addfacture - Ajout de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['facture_numero']) && $_POST['facture_numero']!="" && isset($_POST['facture_code_membre']) && $_POST['facture_code_membre']!="" && isset($_POST['facture_montant']) && $_POST['facture_montant']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFactures();
        $ma = new Application_Model_EuFacturesMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setFacture_id($compteur);
            $a->setFacture_numero($_POST['facture_numero']);
            $a->setFacture_montant($_POST['facture_montant']);
            $a->setFacture_code_membre($_POST['facture_code_membre']);
            $a->setFacture_date($date_id->toString('yyyy-MM-dd'));
            $a->setFacture_utilisateur($_POST['facture_utilisateur']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);



					
					for($i = 0; $i < count($_POST['facture_detail_reference']); $i++){
        $a = new Application_Model_EuFacturesDetail();
        $ma = new Application_Model_EuFacturesDetailMapper();
			
            $compteur_facture_detail = $ma->findConuter() + 1;
            $a->setFacture_detail_id($compteur_facture_detail);
            $a->setFacture_id($compteur);
            $a->setFacture_detail_reference($_POST['facture_detail_reference'][$i]);
            $a->setFacture_detail_libelle($_POST['facture_detail_libelle'][$i]);
            $a->setFacture_detail_prix_unitaire($_POST['facture_detail_prix_unitaire'][$i]);
            $a->setFacture_detail_quantite($_POST['facture_detail_quantite'][$i]);
            $ma->save($a);
                    }



		$this->_redirect('/administration/listfacture');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editfactureAction()
    {
        /* page administration/editfacture - Modification de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['facture_numero']) && $_POST['facture_numero']!="" && isset($_POST['facture_code_membre']) && $_POST['facture_code_membre']!="" && isset($_POST['facture_montant']) && $_POST['facture_montant']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFactures();
        $ma = new Application_Model_EuFacturesMapper();
		$ma->find($_POST['facture_id'], $a);
			
            $a->setFacture_numero($_POST['facture_numero']);
            $a->setFacture_montant($_POST['facture_montant']);
            $a->setFacture_code_membre($_POST['facture_code_membre']);
            $a->setFacture_date($date_id->toString('yyyy-MM-dd'));
            $a->setFacture_utilisateur($_POST['facture_utilisateur']);
            //$a->setPublier($_POST['publier']);
            $ma->update($a);
			
		$this->_redirect('/administration/listfacture');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFactures();
        $ma = new Application_Model_EuFacturesMapper();
		$ma->find($id, $a);
		$this->view->facture = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFactures();
        $ma = new Application_Model_EuFacturesMapper();
		$ma->find($id, $a);
		$this->view->facture = $a;
            }
	}
	}




    public function listfactureAction()
    {
        /* page administration/listfacture - Liste des factures */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $facture = new Application_Model_EuFacturesMapper();
if($sessionutilisateur->code_groupe != "admin_site"){
        $this->view->entries = $facture->fetchAllByUtilisateur($sessionutilisateur->id_utilisateur);
} else {
        $this->view->entries = $facture->fetchAll();
}

        $this->view->tabletri = 1;

    }


    public function suppfactureAction()
    {
        /* page administration/suppfacture - Suppression de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $facture = new Application_Model_EuFactures();
        $factureM = new Application_Model_EuFacturesMapper();
        $factureM->find($id, $facture);
		
        $factureM->delete($facture->facture_id);

        }

		$this->_redirect('/administration/listfacture');
    }




    public function publierfactureAction()
    {
        /* page administration/publierfacture - Publier de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $facture = new Application_Model_EuFactures();
        $factureM = new Application_Model_EuFacturesMapper();
        $factureM->find($id, $facture);
		
        $facture->setPublier($this->_request->getParam('publier'));
		$factureM->update($facture);
        }

		$this->_redirect('/administration/listfacture');
    }



    public function pdffactureAction()
    {
        /* page administration/pdffacture - Génération de facture en PDF */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		include("Transfert.php");
		



	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        $facture = new Application_Model_EuFactures();
        $factureM = new Application_Model_EuFacturesMapper();
        $factureM->find($id, $facture);

        $utilisateur = new Application_Model_EuUtilisateur();
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateurM->find($facture->facture_utilisateur, $utilisateur);




$html = "";

$html .= '
<page format="150x130" orientation="P" style="font: arial;">
<table  border="0" cellpadding="0" cellspacing="0">
  <tr>
    <td style="border:1px solid #00F;">
<table width="100%" border="0">
  <tr>
    <td style="width: 50%;" valign="bottom"><table width="100%" border="0" cellpadding="0" cellspacing="0">
      <tr>
        <td style="border:1px solid #00F; color:#00F;">ESMC<br />
Entreprise Sociale de Marché Commun<br>
          <strong>NIF</strong> : <br>
          <br>
          <br>
          <br>
          <br>
          <br>
          <br>
          <br></td>
      </tr>
      <tr>
        <td style="border:1px solid #00F; color:#00F;"><strong>Numéro Fiscal</strong> : </td>
      </tr>
      <tr>
        <td style="border:1px solid #00F; color:#00F;"><strong>N&deg;</strong> : '.$facture->facture_numero.'</td>
      </tr>
    </table></td>
    <td style="width: 50%;" valign="top"><table width="100%" border="0" cellpadding="0" cellspacing="0">
      <tr>
        <td align="right"><table border="0" cellpadding="0" cellspacing="0">
          <tr>
            <td align="right" style="border:1px solid #00F; color:#00F;"><strong>Date</strong> : '.$date_id->toString('dd-MM-yyyy').'</td>
          </tr>
        </table></td>
      </tr>
      <tr>
        <td><br>
          <br>
          <br>
		  <br>
          <br>
          <br>
		  </td>
      </tr>
      <tr>
        <td><table width="100%" border="0" cellpadding="0" cellspacing="0">
          <tr>';
if (substr($facture->facture_code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($facture->facture_code_membre, $membre);

$paysM = new Application_Model_EuPaysMapper();
$pays = new Application_Model_EuPays();
$paysM->find($membre->id_pays, $pays);
$html .= '
            <td style="border:1px solid #00F; color:#00F;">
<strong>Client</strong> : '.$membre->code_membre.'<br>
<strong>Nom</strong> : '.$membre->nom_membre.' '.$membre->prenom_membre.'<br>
<strong>Adresse</strong> : '.$membre->bp_membre.' - '.$membre->ville_membre.' - '.$pays->libelle_pays.'<br />
<strong>Téléphone</strong> : '.$membre->tel_membre.' / '.$membre->portable_membre.'
	  </td>
';
} else if (substr($facture->facture_code_membre, -1) == "M") {
$membremorale = new Application_Model_EuMembreMorale();
$mapper_membremorale = new Application_Model_EuMembreMoraleMapper();
$mapper_membremorale->find($facture->facture_code_membre, $membremorale);

$mapper_rep = new Application_Model_EuRepresentationMapper();
$rep = $mapper_rep->findbyrep($membremorale->code_membre_morale);

$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($rep->code_membre, $membre);

$paysM = new Application_Model_EuPaysMapper();
$pays = new Application_Model_EuPays();
$paysM->find($membremorale->id_pays, $pays);
$html .= '
            <td style="border:1px solid #00F; color:#00F;">
<strong>Client</strong> : '.$membremorale->code_membre_morale.'<br>
<strong>NIF</strong> : '.$membremorale->num_registre_membre.'<br>
<strong>Nom</strong> : '.$membre->raison_sociale.'<br>
<strong>Adresse</strong> : '.$membremorale->bp_membre.' - '.$membremorale->ville_membre.' - '.$pays->libelle_pays.'<br />
<strong>Téléphone</strong> : '.$membremorale->tel_membre.' / '.$membremorale->portable_membre.'
		</td>
';
}
	  
$html .= '          </tr>
        </table></td>
      </tr>
    </table></td>
  </tr>';
        $facture_detail = new Application_Model_EuFacturesDetailMapper();
        $entriesfacturedetail = $facture_detail->fetchAll3($id);
if(count($entriesfacturedetail)>0){	  
$html .= '
  <tr>
    <td colspan="2"><table width="100%" border="0" cellpadding="0" cellspacing="0">
      <tr style="background-color:#09F;">
        <th style="border:1px solid #00F; color:#FFF;">Rèf.</th>
        <th style="border:1px solid #00F; color:#FFF;">Désignation</th>
        <th style="border:1px solid #00F; color:#FFF;">Quantité</th>
        <th style="border:1px solid #00F; color:#FFF;">Prix Unitaire</th>
        <th style="border:1px solid #00F; color:#FFF;">Montant Total</th>
      </tr>';
$montanttotal = 0;	  
foreach ($entriesfacturedetail as $entry):
$montant = $entry->facture_detail_quantite * $entry->facture_detail_prix_unitaire;
$montanttotal += $montant;	  
$html .= '
      <tr>
        <td align="left" style="border:1px solid #00F; color:#00F;">'.$entry->facture_detail_reference.'</td>
        <td align="left" style="border:1px solid #00F; color:#00F;">'.$entry->facture_detail_libelle.'</td>
        <td align="center" style="border:1px solid #00F; color:#00F;">'.number_format($entry->facture_detail_quantite, 0, ',', ' ').'</td>
        <td align="right" style="border:1px solid #00F; color:#00F;">'.number_format($entry->facture_detail_prix_unitaire, 0, ',', ' ').'</td>
        <td align="right" style="border:1px solid #00F; color:#00F;">'.number_format($montant, 0, ',', ' ').'</td>
      </tr>';
endforeach;
$html .= '
      <tr>
        <td colspan="4" align="right" style="border:1px solid #00F; color:#00F;"><strong>Montant TTC</strong> </td>
        <td align="right" style="border:1px solid #00F; color:#00F;">'.number_format(($montanttotal), 0, ',', ' ').'</td>
      </tr>
      <tr>
        <td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
      </tr>
    </table></td>
  </tr>';
	}	  
$html .= '
  <tr>
    <td colspan="2"><table style="border:1px solid #00F; color:#00F;" width="100%" border="0">
      <tr>
        <td>Arrêté la présente facture à la somme de (en lettre) : <br>'.lettre($montanttotal, 75).'</td>
      </tr>
    </table></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
    </td>
  </tr>
</table>
</page>

';

		
        $facture->setPublier(1);
		$factureM->update($facture);

////////////////////////////////////////////////////////////////////////////////
$filename = '/var/www/html/mcnp/public/facture.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;

$newfile = "../../webfiles/pdf_facture/FACTURE_".str_replace("/", "_", mettreaccents($facture->facture_numero)."_".mettreaccents($facture->facture_code_membre)."_".str_replace("/", "_", mettreaccents($facture->facture_date))).".html"	;
$newnom = "FACTURE_".str_replace("/", "_", mettreaccents($facture->facture_numero)."_".mettreaccents($facture->facture_code_membre)."_".str_replace("/", "_", mettreaccents($facture->facture_date)));
$newchemin = "../../webfiles/pdf_facture/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

//$this->_redirect('/html2pdf/examples/projet.php?fichierhtml='.$newfile.'&newnom='.$newnom.'');
unlink($newfile);

///////////////////////////////
///////////////////////////////

if (substr($facture->facture_code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($facture->facture_code_membre, $membre);
$nom = $membre->nom_membre.' '.$membre->prenom_membre;
$titre = "enrôlement.";
} else if (substr($facture->facture_code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$mapper_membre = new Application_Model_EuMembreMoraleMapper();
$mapper_membre->find($facture->facture_code_membre, $membre);
$nom = $membre->raison_sociale;
$titre = "mise sur chaine.";
}
		
		
		
		
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $membre->portable_membre, "Un mail vient d'être envoyé à l'adresse ".$membre->email_membre.". Ci-joint la facture de votre ".$titre);        
///////////////////////////////

$esmc_email	 = "esmcsarlu@gmail.com";	
		
$fichier = $file;	
$filena	= $newnom.'.pdf';
	
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('La facture &eacute;mise le '.$facture->facture_date.'.');
$mail->setFrom($esmc_email, 'ESMC');
$mail->addTo($membre->email_membre, $nom);
$mail->setSubject('Une facture emise le '.$facture->facture_date.'');


$monImage = file_get_contents($fichier);

$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype

$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $fichier);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 

$mail->send($tr);
		

				
        }

		$this->_redirect('/administration/listfacture');
    }



    public function telechargerfactureAction()
    {
        /* page administration/telechargerfacture - Télécharger une facture */

		/*$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}*/

		include("Transfert.php");

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        $facture = new Application_Model_EuFactures();
        $factureM = new Application_Model_EuFacturesMapper();
        $factureM->find($id, $facture);

        $utilisateur = new Application_Model_EuUtilisateur();
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateurM->find($facture->facture_utilisateur, $utilisateur);

$newfile = "../../webfiles/pdf_facture/FACTURE_".str_replace("/", "_", mettreaccents($facture->facture_numero)."_".mettreaccents($facture->facture_code_membre)."_".str_replace("/", "_", mettreaccents($facture->facture_date))).".html"	;
$newnom = "FACTURE_".str_replace("/", "_", mettreaccents($facture->facture_numero)."_".mettreaccents($facture->facture_code_membre)."_".str_replace("/", "_", mettreaccents($facture->facture_date)));
$newchemin = "../../webfiles/pdf_facture/"	;

$file = $newchemin.$newnom.'.pdf';

if (file_exists($file)) {
    header('Content-Description: File Transfer');
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename='.basename($file));
    header('Content-Transfer-Encoding: binary');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Content-Length: ' . filesize($file));
    ob_clean();
    flush();
    readfile($file);
    exit;
}
		//$this->_redirect('/administration/listfacture');
		}
	}
	




    public function addfacturedetailAction()
    {
        /* page administration/addfacturedetail - Ajout detail de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
$this->view->id = $id;

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['facture_detail_reference']) && $_POST['facture_detail_reference']!="" && isset($_POST['facture_detail_libelle']) && $_POST['facture_detail_libelle']!="" && isset($_POST['facture_detail_quantite']) && $_POST['facture_detail_quantite']!="" && isset($_POST['facture_detail_prix_unitaire']) && $_POST['facture_detail_prix_unitaire']!="") {
		
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFacturesDetail();
        $ma = new Application_Model_EuFacturesDetailMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setFacture_detail_id($compteur);
            $a->setFacture_id($_POST['facture_id']);
            $a->setFacture_detail_reference($_POST['facture_detail_reference']);
            $a->setFacture_detail_libelle($_POST['facture_detail_libelle']);
            $a->setFacture_detail_prix_unitaire($_POST['facture_detail_prix_unitaire']);
            $a->setFacture_detail_quantite($_POST['facture_detail_quantite']);
            $ma->save($a);

		//$this->_redirect('/administration/listfacturedetail');
		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }


    public function editfacturedetailAction()
    {
        /* page administration/editfacturedetail - Modification detail de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['facture_detail_reference']) && $_POST['facture_detail_reference']!="" && isset($_POST['facture_detail_libelle']) && $_POST['facture_detail_libelle']!="" && isset($_POST['facture_detail_quantite']) && $_POST['facture_detail_quantite']!="" && isset($_POST['facture_detail_prix_unitaire']) && $_POST['facture_detail_prix_unitaire']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFacturesDetail();
        $ma = new Application_Model_EuFacturesDetailMapper();
		$ma->find($_POST['facture_detail_id'], $a);
			
            //$a->setFacture_id($_POST['facture_id']);
            $a->setFacture_detail_reference($_POST['facture_detail_reference']);
            $a->setFacture_detail_libelle($_POST['facture_detail_libelle']);
            $a->setFacture_detail_prix_unitaire($_POST['facture_detail_prix_unitaire']);
            $a->setFacture_detail_quantite($_POST['facture_detail_quantite']);
            $ma->update($a);
			
		$this->_redirect('/administration/listfacturedetail/id/'.$_POST['facture_id']);
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFacturesDetail();
        $ma = new Application_Model_EuFacturesDetailMapper();
		$ma->find($id, $a);
		$this->view->facture_detail = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFacturesDetail();
        $ma = new Application_Model_EuFacturesDetailMapper();
		$ma->find($id, $a);
		$this->view->facture_detail = $a;
            }
	}
	}




    public function listfacturedetailAction()
    {
        /* page administration/listfacturedetail - Liste des details de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $facture_detail = new Application_Model_EuFacturesDetailMapper();
        $this->view->entries = $facture_detail->fetchAll3($id);
		
$this->view->id = $id;

        $this->view->tabletri = 1;
            }else{
		$this->_redirect('/administration/listfacture');
				}

    }


    public function suppfacturedetailAction()
    {
        /* page administration/suppfacturedetail - Suppression detail de facture */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $facture_detail = new Application_Model_EuFacturesDetail();
        $facture_detailM = new Application_Model_EuFacturesDetailMapper();
        $facture_detailM->find($id, $facture_detail);
		
        $facture_detailM->delete($facture_detail->facture_detail_id);

        }

		$this->_redirect('/administration/listfacturedetail/id/'.$facture_detail->facture_id);
    }





    public function listtraiteAction() {
        /* page administration/listtraite - Liste des traites */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
       if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

       $tabela = new Application_Model_DbTable_EuTpagcp();
       $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
       $select->setIntegrityCheck(false);
       $select->joinRight('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
       $select->where('eu_tpagcp.escomptable = 3');
       //$select->where('eu_traite.traiter != 8');
       $select->order('eu_tpagcp.date_deb ASC');
       $traites = $tabela->fetchAll($select);
        
       $this->view->traites = $traites;

       $this->view->tabletri = 1;

    }


    public function listtraite22Action() {
        /* page administration/listtraite2 - Liste des traites traitées */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $tabela = new Application_Model_DbTable_EuTpagcp();
        $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
        $select->join('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
        $select->where('eu_tpagcp.escomptable = 3');
        $select->where('eu_traite.traiter = 12');
        $select->order('eu_tpagcp.date_deb ASC');
        $traites = $tabela->fetchAll($select);
        
        $this->view->traites = $traites;

        $this->view->tabletri = 1;

    }


    public function detailstpagcpAction() {
         /* page administration/detailstpagcp - Liste des traites */
         $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
         //$this->_helper->layout->disableLayout();
         $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
         
         if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
            
         $id = (int) $this->_request->getParam('id');
         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id,$tpagcp);
         
         /*$tabela = new Application_Model_DbTable_EuGcp();
         
         $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
         $select->setIntegrityCheck(false);
         
         $select->from($tabela,array('id_gcp','date_conso','mont_gcp','id_credit'));
         $select->distinct();
         $select->join('eu_gcp_prelever','eu_gcp_prelever.id_gcp = eu_gcp.id_gcp',array('id_prelevement','date_prelevement','id_tpagcp','mont_prelever'));
         $select->join('eu_compte_credit','eu_compte_credit.id_credit = eu_gcp.id_credit',array('id_credit','code_membre','code_produit','compte_source'));
         $select->where('eu_gcp_prelever.id_tpagcp = ?',$tpagcp->id_tpagcp);*/
         
         $tabela = new Application_Model_DbTable_EuGcpPrelever();
         $select = $tabela->select();
         $select->where('eu_gcp_prelever.id_tpagcp = ?',$tpagcp->id_tpagcp);
         
         $resultats = $tabela->fetchAll($select);
          
         $this->view->resultats = $resultats;
         $this->view->tabletri = 1;      

     }


      public function detailstpagcp1Action() {
         /* page administration/detailstpagcp - Liste des traites */
         $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
         //$this->_helper->layout->disableLayout();
         $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
         
         if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
            
         $id = (int) $this->_request->getParam('id');
         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id,$tpagcp);
         
         /*$tabela = new Application_Model_DbTable_EuGcp();
         
         $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
         $select->setIntegrityCheck(false);
         
         $select->from($tabela,array('id_gcp','date_conso','mont_gcp','id_credit'));
         $select->distinct();
         $select->join('eu_gcp_prelever','eu_gcp_prelever.id_gcp = eu_gcp.id_gcp',array('id_prelevement','date_prelevement','id_tpagcp','mont_prelever'));
         $select->join('eu_compte_credit','eu_compte_credit.id_credit = eu_gcp.id_credit',array('id_credit','code_membre','code_produit','compte_source'));
         $select->where('eu_gcp_prelever.id_tpagcp = ?',$tpagcp->id_tpagcp);*/
         
         $tabela = new Application_Model_DbTable_EuGcpPrelever();
         $select = $tabela->select();
         $select->where('eu_gcp_prelever.id_tpagcp = ?',$tpagcp->id_tpagcp);
         
         $resultats = $tabela->fetchAll($select);
          
         $this->view->resultats = $resultats;
         $this->view->tabletri = 1;      

     }



     public function detailstpagcp2Action() {
         /* page administration/detailstpagcp - Liste des traites */
         $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
         //$this->_helper->layout->disableLayout();
         $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
         
         if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
            
         $id = (int) $this->_request->getParam('id');
         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id,$tpagcp);
         
         /*$tabela = new Application_Model_DbTable_EuGcp();
         
         $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
         $select->setIntegrityCheck(false);
         
         $select->from($tabela,array('id_gcp','date_conso','mont_gcp','id_credit'));
         $select->distinct();
         $select->join('eu_gcp_prelever','eu_gcp_prelever.id_gcp = eu_gcp.id_gcp',array('id_prelevement','date_prelevement','id_tpagcp','mont_prelever'));
         $select->join('eu_compte_credit','eu_compte_credit.id_credit = eu_gcp.id_credit',array('id_credit','code_membre','code_produit','compte_source'));
         $select->where('eu_gcp_prelever.id_tpagcp = ?',$tpagcp->id_tpagcp);*/
         
         $tabela = new Application_Model_DbTable_EuGcpPrelever();
         $select = $tabela->select();
         $select->where('eu_gcp_prelever.id_tpagcp = ?',$tpagcp->id_tpagcp);
         
         $resultats = $tabela->fetchAll($select);
          
         $this->view->resultats = $resultats;
         $this->view->tabletri = 1;      

     }   
    
    
    
    

     public function listtraite1Action() {
         /* page administration/listtraite - Liste des traites */
         $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
         //$this->_helper->layout->disableLayout();
         $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
         if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

         $tabela = new Application_Model_DbTable_EuTpagcp();
         $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
         $select->setIntegrityCheck(false);
                //$select->joinRight('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
         $select->where('eu_tpagcp.escomptable = 0');
            //$select->where('eu_traite.traiter != 8');
         $select->order('eu_tpagcp.date_deb ASC');
         $traites = $tabela->fetchAll($select);
        
         $this->view->traites = $traites;

         $this->view->tabletri = 1;

    }

    public function listtraite2Action() {
        /* page administration/listtraite - Liste des traites */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $tabela = new Application_Model_DbTable_EuTpagcp();
        $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
        $select->joinRight('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
        $select->where('eu_tpagcp.escomptable = 3');
        //$select->where('eu_traite.traiter != 8');
        $select->order('eu_tpagcp.date_deb ASC');
        $traites = $tabela->fetchAll($select);
        
        $this->view->traites = $traites;

        $this->view->tabletri = 1;

    }

    public function listtraite3Action() {
        /* page administration/listtraite - Liste des traites */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $tabela = new Application_Model_DbTable_EuTpagcp();
        $select = $tabela->select();
        //$select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        //$select->setIntegrityCheck(false);
        //$select->joinRight('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
        $select->where('eu_tpagcp.escomptable = 2');
        //$select->where('eu_traite.traiter != 8');
        $select->order('eu_tpagcp.date_deb ASC');
        $traites = $tabela->fetchAll($select);
        
        $this->view->traites = $traites;

        $this->view->tabletri = 1;

    }

    public function listtraitevaliderAction() {
        /* page administration/listtraite - Liste des traites */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $escomptable = (int) $this->_request->getParam('escomptable');

        $tabela = new Application_Model_DbTable_EuTpagcp();
        $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
        $select->join('eu_validation_quittance', 'eu_validation_quittance.validation_bc = eu_tpagcp.id_tpagcp');

        $select->where('eu_validation_quittance.validation_quittance_utilisateur = '.$sessionutilisateur->id_utilisateur.'');
            //$select->where('eu_tpagcp.escomptable = '.$escomptable.'');
            //$select->where('eu_traite.traiter != 8');
        $select->order('eu_tpagcp.date_deb ASC');
        $traites = $tabela->fetchAll($select);
        
        $this->view->traites = $traites;

        $this->view->tabletri = 1;

    }


    public function detailstraiteoldAction() {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
                $tpagcp = new Application_Model_EuTpagcp();
                $tpagcpM = new Application_Model_EuTpagcpMapper();
                $tpagcpM->find($id, $tpagcp);
                $this->view->tpagcp = $tpagcp;

                $traiteT = new Application_Model_DbTable_EuTraite();
                $select = $traiteT->select();
                $select->where('traite_tegcp = ?', $id);
                $select->order('traiter ASC');
                $traites = $traiteT->fetchAll($select);
        
                $this->view->traites = $traites;

            }
    }



    public function escomptableAction() {
        /* page administration/traitertraite - Traiter un traite */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id > 0) {
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($id, $tpagcp);
        
        $tpagcp->setEscomptable($this->_request->getParam('escomptable'));
        $tpagcpM->update($tpagcp);

        $validation_quittance = new Application_Model_EuValidationQuittance();
        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
            
        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
        $validation_quittance->setValidation_quittance_utilisateur($sessionutilisateur->id_utilisateur);
        $validation_quittance->setValidation_bc($id);
        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $validation_quittance->setPublier(1);
        $validation_quittance_mapper->save($validation_quittance);

        $this->_redirect('/administration/listtraite'.$this->_request->getParam('escomptable'));

        }
    }












public function banquetraiteAction() {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        $request = $this->getRequest ();
        if ($request->isPost ()) {
        
    if (isset($_POST['ok']) && $_POST['ok']=="ok" && isset($_POST['code_banque']) && $_POST['code_banque']!="") {
        
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                        
        $traite_mapper = new Application_Model_EuTraiteMapper();
        $traite = $traite_mapper->findTraiteTegcp($_POST['id']);
        

        foreach ($traite as $entry):
        if(isset($_POST['traiter'.$entry->traite_id.'']) && $_POST['traiter'.$entry->traite_id.''] == 1 && ($entry->bon_id == "" || $entry->bon_id == NULL)){

        $traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($entry->traite_id, $traite);
        
        $traite->setTraite_code_banque($_POST['code_banque']);
        $traiteM->update($traite);


            }
        endforeach;
$db->commit();
                            $this->_redirect('/administration/detailstraite/id/'.$_POST['id']);
    
                    }  catch (Exception $exc) {
                        //$this->view->param = $param;
                        $sessionutilisateur->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();  
                        $this->_redirect('/administration/detailstraite/id/'.$_POST['id']);
                        return;
                    }
        
        
        
        
        
            }else{
                $this->_redirect('/administration/detailstraite/id/'.$_POST['id']);
                        
            }   
        
        
        }   
        
    }






    public function traitertraiteAction()
    {
        /* page administration/traitertraite - Traiter un traite */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $mapper_traite = new Application_Model_EuTraiteMapper();
        $traite2 = $mapper_traite->findTraiteTegcp($id);
        
        $traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($traite2->traite_id, $traite);
        
        $traite->setTraiter(0);
        $traiteM->update($traite);
        }

        $this->_redirect('/administration/listtraite2');
    }







    










    public function addsmsnbreAction()
    {
        /* page administration/addsmsnbre - Ajout nombre de SMS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['sms_nbre_nbre']) && $_POST['sms_nbre_nbre']!="") {
		
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
			
        $smsnbre = new Application_Model_EuSmsNbre();
        $smsnbreM = new Application_Model_EuSmsNbreMapper();
        $smsnbreM->find(1, $smsnbre);

        $smsnbre->setSms_nbre_nbre($smsnbre->getSms_nbre_nbre() + $_POST['sms_nbre_nbre']);
        $smsnbre->setSms_nbre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smsnbre->setSms_nbre_alerte(0);
		$smsnbreM->update($smsnbre);

		} else {  $this->view->error = "Champs * obligatoire ...";  } 
		}
		
    }















    public function addassociationAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['association_mobile']) && $_POST['association_mobile']!="" && isset($_POST['association_nom']) && $_POST['association_nom']!="" && isset($_POST['association_numero']) && $_POST['association_numero']!="" && isset($_POST['association_date_agrement']) && $_POST['association_date_agrement']!="" && isset($_POST['association_email']) && $_POST['association_email']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
		
			
        $date_id = Zend_Date::now();

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();
			
            $compteur_association = $association_mapper->findConuter() + 1;
            $association->setAssociation_id($compteur_association);
            $association->setAssociation_mobile($_POST['association_mobile']);
            $association->setAssociation_nom($_POST['association_nom']);
            $association->setAssociation_numero($_POST['association_numero']);
            $association->setAssociation_date_agrement($_POST['association_date_agrement']);
            $association->setAssociation_email($_POST['association_email']);
            $association->setAssociation_recepisse($_POST['association_recepisse']);
            $association->setAssociation_adresse($_POST['association_adresse']);
            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $association->setId_filiere($_POST["id_filiere"]);
            $association->setCode_type_acteur($_POST["type_acteur"]);
            $association->setCode_statut($_POST["statut_juridique"]);
            $association->setCode_agence($_POST["code_agence"]);
            $association->setPublier(1);
            $association->setCode_membre($_POST["association_code_membre"]);
            $association_mapper->save($association);
			



			
        $date_id = Zend_Date::now();

        $membreasso = new Application_Model_EuMembreasso();
        $membreasso_mapper = new Application_Model_EuMembreassoMapper();
			
            $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
            $membreasso->setMembreasso_id($compteur_membreasso);
            $membreasso->setMembreasso_mobile($_POST['association_mobile']);
            $membreasso->setMembreasso_nom($_POST['membreasso_nom']);
            $membreasso->setMembreasso_prenom($_POST['membreasso_prenom']);
            $membreasso->setMembreasso_association($compteur_association);
            $membreasso->setMembreasso_email($_POST['membreasso_email']);
            $membreasso->setMembreasso_login($_POST['membreasso_login']);
            $membreasso->setMembreasso_passe($_POST['membreasso_passe']);
            $membreasso->setMembreasso_type(1);
            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $membreasso->setPublier(1);
            $membreasso->setCode_membre($_POST['membreasso_code_membre']);
            $membreasso_mapper->save($membreasso);
			




		$this->_redirect('/administration/listassociation');
		} else {  $this->view->error = "Champs * obligatoire ..."; }
	}
	 
	}



    public function editassociationAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['association_mobile']) && $_POST['association_mobile']!="" && isset($_POST['association_nom']) && $_POST['association_nom']!="" && isset($_POST['association_numero']) && $_POST['association_numero']!="" && isset($_POST['association_date_agrement']) && $_POST['association_date_agrement']!="" && isset($_POST['association_email']) && $_POST['association_email']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
		
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($_POST['association_id'], $association);
			
            $association->setAssociation_mobile($_POST['association_mobile']);
            $association->setAssociation_nom($_POST['association_nom']);
            $association->setAssociation_numero($_POST['association_numero']);
            $association->setAssociation_date_agrement($_POST['association_date_agrement']);
            $association->setAssociation_email($_POST['association_email']);
            $association->setAssociation_recepisse($_POST['association_recepisse']);
            $association->setAssociation_adresse($_POST['association_adresse']);
            $association->setId_filiere($_POST["id_filiere"]);
            $association->setCode_type_acteur($_POST["type_acteur"]);
            $association->setCode_statut($_POST["statut_juridique"]);
            $association->setCode_agence($_POST["code_agence"]);
            $association->setCode_membre($_POST["code_membre"]);
            $m_association->update($association);
			
		$this->_redirect('/administration/listassociation');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAssociation();
        $ma = new Application_Model_EuAssociationMapper();
		$ma->find($id, $a);
		$this->view->association = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAssociation();
        $ma = new Application_Model_EuAssociationMapper();
		$ma->find($id, $a);
		$this->view->association = $a;
            }
	}
	}



    public function listassociationAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $association = new Application_Model_EuAssociationMapper();
        $this->view->entries = $association->fetchAll3();

        $this->view->tabletri = 1;

    }



    public function listassociation2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $association = new Application_Model_EuAssociationMapper();
        $this->view->entries = $association->fetchAll4();

        $this->view->tabletri = 1;

    }


    public function listassociationguichetAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $association = new Application_Model_EuAssociationMapper();
        $this->view->entries = $association->fetchAllByGuichet();

        $this->view->tabletri = 1;

    }

    public function publierassociationAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($id, $association);
		
        $association->setPublier($this->_request->getParam('publier'));
		$associationM->update($association);
        }

		$this->_redirect('/administration/listassociation');
    }



    public function guichetassociationAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($id, $association);
        
        $association->setGuichet($this->_request->getParam('guichet'));
        $associationM->update($association);
        }

        $this->_redirect('/administration/listassociation');
    }




    public function editguichetassociationAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['guichet']) && $_POST['guichet']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="" && isset($_POST['code_membre']) && $_POST['code_membre']!="") {
        
    if (isset($_POST['guichet']) && $_POST['guichet'] == 1) {

        $table = new Application_Model_DbTable_EuDepotVente();
        $select = $table->select();
        $select->from($table, array('SUM(mont_depot) as montant_depot'));
        $select->where("code_membre LIKE '".$_POST['code_membre']."'");
        $select->where("mont_depot >= 7000000");
        $resultSet = $table->fetchAll($select);
        if(count($resultSet) > 0){

        if (substr($_POST['code_membre'], -1) == "M") {

        $table = new Application_Model_DbTable_EuDepotVente();
        $select = $table->select();
        $select->from($table, array('SUM(mont_depot) as montant_depot'));
        $select->where("code_membre LIKE '".$_POST['code_membre']."'");
        $select->where("mont_depot >= 7000000");
        $resultSet = $table->fetchAll($select);
        if(count($resultSet) > 0){


        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($_POST['association_id'], $association);
            
            $association->setCode_membre($_POST["code_membre"]);
            $association->setGuichet($_POST["guichet"]);
            $association->setCode_agence($_POST["code_agence"]);
            $m_association->update($association);
            
        $this->_redirect('/administration/listassociationguichet');

        }else{
              $this->view->error = "Ce membre n'a pas fait de 100 comptes. ";      
        }

        }else{
              $this->view->error = "Ce membre n'est pas une personne morale.";      
        }

        }else{
              $this->view->error = "Ce membre n'a pas fait de 100 comptes. ";  
        }



    }else{

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($_POST['association_id'], $association);
            
            $association->setGuichet($_POST["guichet"]);
            $association->setCode_agence($_POST["code_agence"]);
            $m_association->update($association);
            
        $this->_redirect('/administration/listassociation2');
    }
            

        } else {  $this->view->error = "Champs * obligatoire ..."; 
         
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAssociation();
        $ma = new Application_Model_EuAssociationMapper();
        $ma->find($id, $a);
        $this->view->association = $a;

        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $this->view->membreasso = $m_membreasso->fetchAllByAssociation($id);
            }
    }
           
    } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAssociation();
        $ma = new Application_Model_EuAssociationMapper();
        $ma->find($id, $a);
        $this->view->association = $a;

        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $this->view->membreasso = $m_membreasso->fetchAllByAssociation($id);
            }
    }
    }





    public function suppassociationAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($id, $association);
		
        $associationM->delete($association->association_id);

        }

		$this->_redirect('/administration/listassociation');
    }



    public function detailsassociationAction() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($id, $association);
		$this->view->association = $association;

            }

	}



    public function listmembreassoAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $membreasso = new Application_Model_EuMembreassoMapper();
        $this->view->entries = $membreasso->fetchAllByMembreasso($id);

            }

        $this->view->tabletri = 1;

    }



    public function localmembreassoAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $membreasso = new Application_Model_EuMembreasso();
        $membreassoM = new Application_Model_EuMembreassoMapper();
        $membreassoM->find($id, $membreasso);
		
        $membreasso->setLocal($this->_request->getParam('local'));
		$membreassoM->update($membreasso);
        }

		$this->_redirect('/administration/listmembreasso/id/'.$membreasso->membreasso_association);
    }





    public function listsouscription1Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $souscription->fetchAllByPublier(0, $sessionutilisateur->code_agence);
		
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAgence($sessionutilisateur->code_agence);
				
			}else{
        //$this->view->entries = $souscription->fetchAllByPublier(0, "");
		
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
		
				}

        $this->view->tabletri = 1;

    }


    public function listsouscription2Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $souscription->fetchAllByPublier(1, $sessionutilisateur->code_agence);
			}else{
        //$this->view->entries = $souscription->fetchAllByPublier(1, "");
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
				}

        $this->view->tabletri = 1;

    }


    public function listsouscription3Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $souscription->fetchAllByPublier(2, $sessionutilisateur->code_agence);
			}else{
        //$this->view->entries = $souscription->fetchAllByPublier(2, "");
		        $agence = new Application_Model_EuAgenceMapper();
                $this->view->entries = $agence->fetchAllByAssociation();
        		}

        $this->view->tabletri = 1;

    }


    public function listsouscription4Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $souscription->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $souscription->fetchAllByPublier(3, "");
				}

        $this->view->tabletri = 1;

    }

    public function listsouscription41Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $souscription->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $souscription->fetchAllByPublier(3, "");
				}

        $this->view->tabletri = 1;

    }

    public function listsouscription5Action()
    {
ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $souscription->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $souscription->fetchAllByPublier(3, "");
				}

        $this->view->tabletri = 1;

    }

    public function listsouscription6Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
		if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $souscription->fetchAllByPublierAuto(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $souscription->fetchAllByPublierAuto(3, "");
				}

        $this->view->tabletri = 1;

    }



    public function listsouscriptionvalidationAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $publier = (int)$this->_request->getParam('publier');
			$this->view->publier = $publier;

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $souscription->fetchAllByPublier(0, $sessionutilisateur->code_agence);
		
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAgence($sessionutilisateur->code_agence);
				
			}else{
        //$this->view->entries = $souscription->fetchAllByPublier(0, "");
		
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
		
				}

        $this->view->tabletri = 1;

    }




    public function listsouscriptionerreurAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $publier = (int)$this->_request->getParam('publier');
			$this->view->publier = $publier;

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $souscription->fetchAllByPublier(0, $sessionutilisateur->code_agence);
		
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAgence($sessionutilisateur->code_agence);
				
			}else{
        //$this->view->entries = $souscription->fetchAllByPublier(0, "");
		
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
		
				}

        $this->view->tabletri = 1;

    }




    public function erreursouscriptionAction()
    {
        /* souscription administration/erreursouscription - Erreur la souscription libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['erreurdescription']) && $_POST['erreurdescription']!="") {
		
			
        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($_POST['souscription_id'], $souscription);
		
        $souscription->setErreurdescription($_POST['erreurdescription']);
        $souscription->setErreur(1);
		$souscriptionM->update($souscription);
			
if($this->_request->getParam('erreur') == 1){
		$this->_redirect('administration/listsouscription'.($souscription->publier + 1));
	}else{
		$this->_redirect('administration/listsouscription'.($souscription->publier + 1));
		//$this->_redirect('administration/listsouscriptionerreur');
	}

	}  else {	$this->view->error = "Les champs * sont obligatoires ...";	

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id, $souscription);
		$this->view->souscription = $souscription;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id, $souscription);
		$this->view->souscription = $souscription;
            }
	}
	}




    public function erreursouscription1Action()
    {
        /* souscription administration/erreursouscription - Erreur la souscription libre d'information */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id, $souscription);
		
        $souscription->setErreur($this->_request->getParam('erreur'));
		$souscriptionM->update($souscription);
        }

if($this->_request->getParam('erreur') == 1){
		$this->_redirect('administration/listsouscription'.($souscription->publier + 1));
	}else{
		$this->_redirect('administration/listsouscriptionerreur');
	}
	
    }



    public function listsouscriptionetatAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->findMoisAnnee();

        $this->view->tabletri = 1;

    }


    public function listsouscriptionetat2Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
		
	}
	} /*else {

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription(0, "", "");

	}*/
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat22Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
		
	}
	} /*else {

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription(0, "", "");

	}*/
        $this->view->tabletri = 1;


    }



    public function listsouscriptionetat23Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme3(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
        
    }
    } /*else {

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription(0, "", "");

    }*/
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat223Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme3(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
        
    }
    } /*else {

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription(0, "", "");

    }*/
        $this->view->tabletri = 1;


    }




    public function listsouscriptionetat24Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

$periode = (string) $this->_request->getParam('periode');

    //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');
        
        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
        
    }
    /*} else {

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription(0, "", "");

    }*/
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat224Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

$periode = (string) $this->_request->getParam('periode');

    //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
        
    }
    /*} else {

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription(0, "", "");

    }*/
        $this->view->tabletri = 1;


    }




    public function listsouscriptionetat231Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme22(0);

        
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat2231Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    
        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme22(0);

        
        $this->view->tabletri = 1;


    }




    public function listsouscriptionetat241Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

$id = (int) $this->_request->getParam('id');
        
        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionAutre($id);

        
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat2241Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

$id = (int) $this->_request->getParam('id');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionAutre($id);

        
        $this->view->tabletri = 1;


    }



    public function listintegrateuretatAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $integrateur = new Application_Model_EuIntegrateurMapper();
        $this->view->entries = $integrateur->findMoisAnnee();

        $this->view->tabletri = 1;

    }


    public function listoffreurprojetetatAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $offreurprojet = new Application_Model_EuOffreurProjetMapper();
        $this->view->entries = $offreurprojet->findMoisAnnee();

        $this->view->tabletri = 1;

    }
	
	
    public function listsouscriptionreactivationgieAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $souscription->fetchAllByPublierReactivation(3, $sessionutilisateur->code_agence, 13);
			}else{
        //$this->view->entries = $souscription->fetchAllByPublierReactivation(3, "", 13);
		        $agence = new Application_Model_EuAgenceMapper();
                $this->view->entries = $agence->fetchAllByAssociation();
        		}

        $this->view->tabletri = 1;

    }


    public function listsouscriptionreactivationmcnpAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $souscription->fetchAllByPublierReactivation(3, $sessionutilisateur->code_agence, 20);
			}else{
        //$this->view->entries = $souscription->fetchAllByPublierReactivation(3, "", 20);
		        $agence = new Application_Model_EuAgenceMapper();
                $this->view->entries = $agence->fetchAllByAssociation();
        		}

        $this->view->tabletri = 1;

    }

    public function etatsouscriptionAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $debut = (string)$this->_request->getParam('debut');
            $fin = (string)$this->_request->getParam('fin');
			
			if($debut != "" && $fin != ""){

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
		
        $this->view->tabletri = 1;
		}else{
		$this->_redirect('/administration/listsouscriptionetat');
			}

    }


    public function etatintegrateurAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $debut = (string)$this->_request->getParam('debut');
            $fin = (string)$this->_request->getParam('fin');
			
			if($debut != "" && $fin != ""){

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSommeIntegrateur(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
		
        $this->view->tabletri = 1;
		}else{
		$this->_redirect('/administration/listintegrateuretat');
			}

    }


    public function etatoffreurprojetAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $debut = (string)$this->_request->getParam('debut');
            $fin = (string)$this->_request->getParam('fin');
			
			if($debut != "" && $fin != ""){

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSommeOffreurProjet(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
		
        $this->view->tabletri = 1;
		}else{
		$this->_redirect('/administration/listoffreurprojetetat');
			}

    }
	
    public function listmembretierscodeAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $membretierscode = new Application_Model_EuMembretierscodeMapper();
        $this->view->entries = $membretierscode->fetchAllBySouscription($id);
        $this->view->tabletri = 1;
			}

    }
	

    public function detailssouscriptionAction() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id, $souscription);
		$this->view->souscription = $souscription;

            }

	}





public function publiersouscriptionAction() {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		
		//$param = (int)$this->_request->getParam('param');
	    //$this->view->param = $param;
		
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		$request = $this->getRequest ();
		if ($request->isPost ()) {
		
	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		
		            $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
						
        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
		
		if($sessionutilisateur->code_agence != "001001001001"){
        $souscription = $souscription_mapper->fetchAllByPublier($_POST['id'] - 1, $sessionutilisateur->code_agence);
			}else{
        $souscription = $souscription_mapper->fetchAllByPublier($_POST['id'] - 1, "");
				}


		foreach ($souscription as $entry):
		if(isset($_POST['publier'.$entry->souscription_id.'']) && $_POST['publier'.$entry->souscription_id.''] == $_POST['id']){

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($entry->souscription_id, $souscription);
		
        $souscription->setPublier($_POST['publier'.$entry->souscription_id.'']);
		$souscriptionM->update($souscription);


        $date_id = new Zend_Date(Zend_Date::ISO_8601);


        $validation_quittance = new Application_Model_EuValidationQuittance();
        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
			
            $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
            $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
            $validation_quittance->setValidation_quittance_utilisateur($sessionutilisateur->id_utilisateur);
            $validation_quittance->setValidation_quittance_souscription($entry->souscription_id);
            $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $validation_quittance->setPublier(1);
            $validation_quittance_mapper->save($validation_quittance);

		include("Transfert.php");





if($_POST['id'] == 3){


						
								
								$relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($request->getParam("souscription_banque"),$request->getParam("souscription_numero"),$request->getParam("souscription_date_numero"));
                                if(count($relevebancairedetail) > 0) {
								    if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']) {
										
										
//////////////////////////////////////////////////////////////////////////////////////


								        include("automatisation.php");
								        //validation_automatique($compteur_souscription);
								        
$id_souscription = $entry->souscription_id;
//////////////////////////////////////////
if($souscription->souscription_membreasso != 1){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($souscription->souscription_membreasso, $membreasso);
			
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;
		
        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($souscription->souscription_id);
		
		
		
		/*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
			
			if($souscription->souscription_programme == "KACM"){
			$partagea_montant = floor(($cumul_recubancaire / 100 * 10) / 2);
				}else{
			$partagea_montant = floor(($cumul_recubancaire / 100 * 5) / 2);
					}
			
		}else{*/
			
			if($souscription->souscription_programme == "KACM"){
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
				}else{
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
					}
			
		//}
			
//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($id_souscription);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);
			
//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($id_souscription);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);
			
//////////////////////////////////////////

}


$htmlpdf = "";

$htmlpdf .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
  </tr>';
if($souscription->souscription_personne == "PP"){
		
        $souscrip = new Application_Model_EuSouscription();
        $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
        $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");
		
	if($souscription->souscription_programme == "KACM"){
		if($compteur_souscrip == 0){$compteur_souscrip = 1029;}	
		$unite = 5000;	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° Reçu Personne Physique : PP'.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
  </tr>';
	}else if($souscription->souscription_programme == "CMFH"){
		if($compteur_souscrip == 0){$compteur_souscrip = 118;}		
		$unite = 2187.5;	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
  </tr>';
	}
	
}else if($souscription->souscription_personne == "PM"){
	if($souscription->souscription_programme == "KACM"){
		
        $souscrip = new Application_Model_EuSouscription();
        $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
        $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, $souscription->code_type_acteur);
		
		if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OSE"){$compteur_souscrip = 4;}		
		if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OE"){$compteur_souscrip = 5;}		
		$unite = 70000;	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° Reçu '.$souscription->code_type_acteur.' : '.$souscription->code_type_acteur.''.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
  </tr>';
	}else if($souscription->souscription_programme == "CMFH"){
		
        $souscrip = new Application_Model_EuSouscription();
        $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
        $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");
		if($compteur_souscrip == 0){$compteur_souscrip = 118;}		
		$unite = 2187.5;	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
  </tr>';
	}
	
	
}
  
/*$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>QUITTANCE CMFH/CAPS/GAC TOGO N° '.$souscription->souscription_id.'</u></em></strong></td>
  </tr>';*/
  
        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($entry->souscription_id, $souscription);
		
        $souscription->setSouscription_ordre($compteur_souscrip + 1);
		$souscriptionM->update($souscription);

  if($souscription->souscription_autonome == 1){
	  $souscription_nombre = $souscription->souscription_nombre - 1;
			if($souscription->souscription_personne == "PP"){
				$autonome = 5000;
			}else if($souscription->souscription_personne == "PM"){
				$autonome = 70000;
				}
	  }else{
	  $souscription_nombre = $souscription->souscription_nombre;
	$autonome = 0;
		  }
		  
if($souscription->souscription_personne == "PP"){
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_nom.' '.$souscription->souscription_prenom.'</em></strong></p></td>
  </tr>';
}else if($souscription->souscription_personne == "PM"){
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_raison.'</em></strong></p></td>
  </tr>';
}
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><em><u>N°  code(s) SMS CMFH/CAPS/Togo acheté(s): '.$souscription->souscription_nombre.'</u></em></td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
    <td colspan="2" align="center"><strong><em>Montant total : '.number_format(($souscription_nombre * $unite + $autonome), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
  <tr>
    <td align="left"><em><strong>Libellé</strong></em></td>
    <td align="center"><em><strong>Nombre de codes achetés</strong></em></td>
    <td align="center"><strong><em>Prix Unitaire d&rsquo;un code</em></strong></td>
    <td align="center"><em><strong>Montant total</strong></em></td>
  </tr>';
  
  if($souscription->souscription_autonome == 1){
$htmlpdf .= '
  <tr style="background-color:#999;">
    <td align="left"><em><strong>Achat de code SMS KACM</strong></em></td>
    <td align="center"><em>1</em></td>
    <td align="center"><em>'.$autonome.' FCFA</em></td>
    <td align="center"><em>'.number_format(($autonome), 0, ',', ' ').' FCFA</em></td>
  </tr>';
  }
				if($souscription->souscription_programme == "CMFH"){
$htmlpdf .= '
  <tr style="background-color:#999;">
    <td align="left"><em><strong>Achat de code SMS  CMFH/CAPS/GAC Togo</strong></em></td>
    <td align="center"><em>'.$souscription_nombre.'</em></td>
    <td align="center"><em>'.$unite.' FCFA</em></td>
    <td align="center"><em>'.number_format(($souscription_nombre * $unite), 0, ',', ' ').' FCFA</em></td>
  </tr>';
  }

$htmlpdf .= '
  <tr>
    <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($souscription_nombre * $unite + $autonome), 50).' CFA</em></td>
    <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
  </tr>';	
  
	if($souscription->souscription_programme == "CMFH"){

$htmlpdf .= '
  <tr>
    <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  Chiffres :</u> '.number_format(($souscription_nombre * 70000 ), 0, ',', ' ').' BA.</em></td>
  </tr>
  <tr>
    <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  lettres :</u> '.lettre2(($souscription_nombre * 70000 ), 50).' </em></td>
  </tr>';
	}else if($souscription->souscription_programme == "KACM"){
$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>';
		}
  
  
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="center">';
	if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")){
list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$souscription->souscription_vignette);
	$pourcent = 700 * 100 / $width;
	$width2 = 700;
	$height2 = $pourcent * $height / 100;
$htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />

';
}
$htmlpdf .= '  </td>
	</tr>
  
  
  
  </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$htmlpdf .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_souscription/")) {
mkdir("../../webfiles/pdf_souscription/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
$newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
$newchemin = "../../webfiles/pdf_souscription/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena	= $newnom.'.pdf';

unlink($newfile);

        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
        if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($souscription->souscription_banque, $souscription->souscription_numero, $souscription->souscription_date_numero)){
  
        $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
        $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail2M->find($relevebancairedetail->relevebancairedetail_id, $relevebancairedetail2);
		
        $relevebancairedetail2->setPublier(1);
		$relevebancairedetail2M->update($relevebancairedetail2);
		}
	
		//$this->_redirect(str_replace("../../webfiles/", "http://webfiles.gacsource.net/", $file));
        $membreasso = new Application_Model_EuMembreasso();
        $membreassoM = new Application_Model_EuMembreassoMapper();
        $membreassoM->find($souscription->souscription_membreasso, $membreasso);
		
        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($membreasso->membreasso_association, $association);



if($association->association_email != ""){
$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($association->association_email, $association->association_nom);
$mail->setSubject('Recu Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 
$mail->send($tr);
}






if($membreasso->membreasso_email != ""){
$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($membreasso->membreasso_email, $membreasso->membreasso_nom." ".$membreasso->membreasso_prenom);
$mail->setSubject('Recu Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 
$mail->send($tr);
}








			if($souscription->souscription_programme == "CMFH"){
				
$html .= "<br />";
$html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter et compléter les informations vous concernant pour être bien classifié dans votre domaine et ainsi être en bonne position pour l’ouverture prochaine du marché MCNP.";
$html .= "<br />";
$html .= "Connectez vous ici : <a href='http://prod.esmcgacsource.com/souscription/login'>Connexion Souscription</a>";
$html .= "<br />";
$html .= "Login : ".$souscription->souscription_login."<br />";
$html .= "<br />";
$html .= "Mot de passe : ".$souscription->souscription_passe."<br />";
$html .= "<br />";

if(isset($souscription->souscription_mobilisateur) && $souscription->souscription_mobilisateur == 1){
$html .= "Vous avez sélectionner l'option Mobilisateur donc utilisez les mêmes Login et Mot de passe pour vous connecter à votre espace Agrément OSE/OE pour pouvoir souscrire d'autres personnes.";
$html .= "<br />";
$html .= "Connectez vous aussi : <a href='http://prod.esmcgacsource.com/association/login'>Connexion Agrément OSE/OE</a>";
$html .= "<br />";
}


if($souscription->souscription_email != ""){
$config = array('auth' => 'login',
																'username' => Util_Utils::getParamEsmc(3),
																'password' => Util_Utils::getParamEsmc(4));
	
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);        
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->setSubject('Recu Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
	
$mail->send($tr);
}
			}




}



if($_POST['id'] == 1 || $_POST['id'] == 2 || $_POST['id'] == 3){
	
if($_POST['id'] == 1){
	$agrement = "agrement_filiere";
}else if($_POST['id'] == 2){
	$agrement = "agrement_technopole";
}else if($_POST['id'] == 3){
	$agrement = "agrement_acnev";
}
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateur = $utilisateurM->fetchAllByAgenceCodeGroupe($sessionutilisateur->code_agence, $agrement);
		
foreach ($utilisateur as $entryagrement):
if (substr($entryagrement->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($entryagrement->code_membre, $membre);
$membre_email = $membre->email_membre;
$membre_nom = $membre->nom_membre." ".$membre->prenom_membre;
} else if (substr($entryagrement->code_membre, -1) == "M") {
$membremorale = new Application_Model_EuMembreMorale();
$mapper_membremorale = new Application_Model_EuMembreMoraleMapper();
$mapper_membremorale->find($entryagrement->code_membre, $membremorale);
$membre_email = $membre->email_membre;
$membre_nom = $membre->raison_sociale;
}


if($membre_email != ""){
$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Alerte sur la validation du recu numero : '.$entry->souscription_numero.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($membre_email, $membre_nom);
$mail->setSubject('Alerte sur la validation : '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);
}
endforeach;
}

/////////////////////////////////////////////////////////////////////////////
										$compteur_souscription = $entry->souscription_id;
										
										// operation de transfert
										$souscription = new Application_Model_EuSouscription();
		                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
										$date = new Zend_Date();
		                                $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
			                            $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                            $det_sms   = new Application_Model_EuDetailSmsmoney();
			                            $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                            $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                            $det_vtesms  = new Application_Model_EuDetailVentesms();
			
			                            $mobile = $souscription->souscription_mobile;
			                            //$nbre_compte = $souscription->souscription_nombre;
			                            $fcaps = Util_Utils::getParametre('CAPS','valeur');
										
										$mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');
			
		                                //$montant = $nbre_compte * $fcaps;
		                                $membre_pbf = '0000000000000000001M';
	                                    $code_compte_pbf = "NN-TR-".$membre_pbf;
			                            $ret = $compte_map->find($code_compte_pbf,$compte);
										
										
										
										if(($souscription->souscription_programme == 'KACM') 
			                                || ($souscription->souscription_programme == 'CMFH') 
				                            && $souscription->souscription_autonome == 1) {
											        
													if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			                                            // Mise à jour du compte de transfert
				                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);    
	                                                } else {
			                                            $db->rollback();				
			                                            $sessionutilisateur->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
														//$this->view->param = $param;
														$this->_redirect('/administration/listsouscription'.$_POST['id'].'');
                                                        return;			   
			                                        }
													
													$codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';
													
													// Traitement des produits FS
				                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
												    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
												    // Traitement des produits FCPS
				                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
													
													if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
													
											            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					                                    $nengfs = $money_map->findConuter() + 1;
														$sms_money->setNEng($nengfs)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);
														
														$i = 0;
					                                    $reste = $mont_fs;
					                                    $nbre_lignesdetfs = count($lignesdetfs);
														while ($reste > 0 && $i < $nbre_lignesdetfs) {
					                                        $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
						                                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                    if ($reste >= $lignedetfs->getSolde_sms()) {
						                                        //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
							                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                                                   ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                                                   ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);			 							   
						                                    } else  {
							                                    //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                                        $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
						                                        $reste = 0;
						                                    }
						                                    $i++;
					                                    }
														
														$codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);
					                                    
													$j = 0;
					                                $reste = $mont_fl;
					                                $nbre_lignesdetfl = count($lignesdetfl);
					                                while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                                    $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfl->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
							                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                                $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
						                                    $reste = 0;
						                                }
						                                $j++;
					                                }
													
													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
													
													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }
													
													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;
				
				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                                    $codeactivation->setCode_membre(null);   
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setSouscription_id($compteur_souscription);
													$codeactivation->setOrigine_code('ESMC');
				                                    $m_codeactivation->save($codeactivation);
				
				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand ESMC : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
												
										            }  else {
												        $db->rollback();
	                                                    //$this->view->param = $param;
			                                            $sessionutilisateur->error = 'Erreur de traitement : le solde du compte est null';
														$this->_redirect('/administration/listsouscription'.$_POST['id'].'');
                                                        return;	
												    }
										
										}
										
										/*
										if($souscription->souscription_programme == 'CMFH')   {
			                                $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                if($souscription->souscription_autonome == 1) {   
			                                    $nbre_compte = $souscription->souscription_nombre - 1; 
			                                } else {
				                                $nbre_compte = $souscription->souscription_nombre;
				                            }
				                            $montant = $nbre_compte * $fcaps;
				
				                            // Traitement des produits CAPS
				                            $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
				                            if ($lignesdetfcaps != null) {
				                                $nengfcaps = $money_map->findConuter() + 1;
                                                $sms_money->setNEng($nengfcaps)
                	                                      ->setCode_Agence(null)
                                                          ->setCreditAmount($montant)
                                                          ->setSentTo($mobile)
                                                          ->setMotif('CAPS')
                                                          ->setId_Utilisateur(null)
                                                          ->setCurrencyCode('XOF')
                                                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setFromAccount($code_compte_pbf)
                                                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                          ->setCreditCode($codefcaps)
                                                          ->setDestAccount(null)
                                                          ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                          ->setDestAccount_Consumed('CAPS-'.$compteur_souscription)
                                                          ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                          ->setNum_recu(null);
                                                $money_map->save($sms_money);
					
					                            // Mise à jour du compte de transfert
				                                if($ret) {
			                                        // Mise à jour du compte de transfert
				                                    $compte->setSolde($compte->getSolde() - $montant);
                                                    $compte_map->update($compte);    
	                                            } else {
			                                        $db->rollback();
	                                                //$this->view->param = $param;
			                                        $sessionutilisateur->error = 'Erreur de traitement : le compte est introuvable';
													$this->_redirect('/administration/listsouscription'.$_POST['id'].'');
                                                    return;			   
			                                    }
					
				                                $l = 0;
					                            $reste = $montant;
					                            $nbre_lignesdetfcaps = count($lignesdetfcaps);
					                            while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
					                                $lignedetfcaps = $lignesdetfcaps[$l];
                                                    $id = $lignedetfcaps->getId_detail_smsmoney();
						                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                            if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                //Mise à jour  des lignes d'enrégistrement
                                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
													    //insertion dans la table eu_detailventesms
						                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('CAPS')
                                                                       ->setCreditcode($codefcaps)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('CAPS');
                                                        $det_vte_sms->insert($det_vtesms->toArray());
															
							                            $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                              ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                              ->setSolde_sms(0);
                                                        $det_sms_m->update($lignedetfcaps);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                         ->setId_detail_smsmoney($id)
                                                                 ->setCode_membre_dist($membre_pbf)
                                                                 ->setCode_membre(null)
                                                                 ->setType_tansfert('CAPS')
                                                                 ->setCreditcode($codefcaps)
                                                                 ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                 ->setMont_vente($reste)
                                                                 ->setId_utilisateur(null)
                                                                 ->setCode_produit('CAPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                    $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                                $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfcaps);
						                                    $reste = 0;
						                                }
						                        $l++;
					                        }
					
				                } else  {
				                    $db->rollback();
	                                //$this->view->param = $param;
			                        $sessionutilisateur->error = 'Erreur de traitement : le solde du compte CAPS est null';
									$this->_redirect('/administration/listsouscription'.$_POST['id'].'');
                                    return;
				                }
				
				                // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();
			                    $countdvente = $m_dvente->findConuter() + 1;
				                $dvente->setId_depot($countdvente)
					                   ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                $dvente->setCode_membre(null);   
			                    $dvente->setCode_produit('CAPS');
				                $dvente->setMont_depot($montant);
				                $dvente->setMont_vendu(0);
				                $dvente->setSolde_depot($montant);
				                $dvente->setId_utilisateur(null);
				                $dvente->setType_depot('AvecListe');
				                $dvente->setSouscription_id($compteur_souscription);
				                $m_dvente->save($dvente);
				
				                $compteur = Util_Utils::findConuter() + 1;
				                Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
								
								codegenerer($compteur_souscription);
			                }*/
								$db->commit();
                                $sessionutilisateur->error = "Opération bien effectuée. ";//Votre souscription a été vérifiée.
		                        $this->_redirect('/administration/listsouscription'.$_POST['id'].'');
								
		                    } else {
							    $db->commit();
                                $sessionutilisateur->error = "Opération bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre dépôt à la banque.";
		                        $this->_redirect('/administration/listsouscription'.$_POST['id'].'');
					                }
		                    }  else {
								$db->commit();
                                $sessionutilisateur->error = "Opération bien effectuée. ";//Votre souscription n’est pas encore vérifiée, revenez plus tard.
		                        $this->_redirect('/administration/listsouscription'.$_POST['id'].'');
			                }
							
							
////////////////////////////////////////////////////////////////////////////


		
			}
		endforeach;

		
if($_POST['id'] == 3){
		$this->_redirect('/administration/listsouscription'.$_POST['id'].'');
}else{
		$this->_redirect('/administration/listsouscription'.$_POST['id'].'');
	}
		
		            }  catch (Exception $exc) {
	                    //$this->view->param = $param;
                        $sessionutilisateur->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();  
		                $this->_redirect('/administration/listsouscription'.$_POST['id'].'');
                        return;
                    }
		
		
		
		
		
		    }   
		
		
		}	
		
	}








    public function listcaracteristiqueAction()
    {
        /* page souscription/listcaracteristique - Liste des caracteristiques */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $caracteristique = new Application_Model_EuCaracteristiqueMapper();
        $this->view->entries = $caracteristique->fetchAll();

        $this->view->tabletri = 1;

    }






    public function addrelevebancaireAction() {
        /* page administration/addrelevebancaire - Ajout d'une relevebancaire */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
            if(isset($_POST['relevebancaire_utilisateur']) && $_POST['relevebancaire_utilisateur']!="" && isset($_POST['relevebancaire_date']) && $_POST['relevebancaire_date']!="") {
        
            include("Transfert.php");
            if(isset($_FILES['relevebancaire_fichier']['name']) && $_FILES['relevebancaire_fichier']['name']!="") {
                $chemin = "relevebancaires";
                $file = $_FILES['relevebancaire_fichier']['name'];
                $file1='relevebancaire_fichier';
                $relevebancaire = $chemin."/".transfert($chemin,$file1);
            } else {$relevebancaire = "";}
            
            $fichier = $relevebancaire;
            
            $_fichier = strtolower(substr($relevebancaire, -4));
            if($_fichier == ".csv" || $_fichier == ".CSV") { // || $_fichier == ".xls" || $_fichier == "xlsx"
        
                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $a = new Application_Model_EuRelevebancaire();
                $ma = new Application_Model_EuRelevebancaireMapper();
            
                $compteur = $ma->findConuter() + 1;
                $a->setRelevebancaire_id($compteur);
                $a->setRelevebancaire_banque($_POST['relevebancaire_banque']);
                $a->setRelevebancaire_utilisateur($_POST['relevebancaire_utilisateur']);
                $a->setRelevebancaire_fichier($relevebancaire);
                $a->setRelevebancaire_date($_POST['relevebancaire_date']);
                $a->setPublier($_POST['publier']);
                $ma->save($a);


                if($_POST['relevebancaire_banque'] == "BAT") {   

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
    
                    foreach ($lines as $line_num => $line) {
                        list($date, $numero, $libelle, $datevaleur, $montant) = explode(";", $line);
                        $montant = trim($montant);
                        $montant = strtr($montant, " ", "");
                        $montant = str_replace(" ", "", $montant);
                        $montant = strtr($montant, "ÿ", "");
                        $montant = str_replace("ÿ", "", $montant);
                        $montant = strtr($montant, "&yuml;", "");
                        $montant = str_replace("&yuml;", "", $montant);
                        //$montant = str_replace("Ê", "", $montant);
                        list($mont, $apresvirgule) = explode(",", $montant);

                        //if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){//

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("BAT", trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                            $rb->setRelevebancairedetail_numero(trim($numero));
                            $rb->setRelevebancairedetail_date(date_fr_en3($date));
                            $rb->setRelevebancairedetail_montant($mont);
                            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
                            $rb->setPublier(0);
                            $mrb->save($rb);            
            
           
                            $detail_numero = trim($numero);
                            $detail_date = date_fr_en3($date);
                            //$detail_montant = $mont;
                            $detail_montant = str_replace(" ", "", $mont);
                            //$detail_montant = str_replace(".", "", $mont);
                            //$detail_montant = str_replace(",", "", $mont);

                            $detail_libelle = trim(str_replace("'", " ", $libelle));

                            $message_sms_bancaire2 = Util_Utils::verifSmsBancaire2("BAT", $detail_numero, $detail_date, $detail_montant, $detail_libelle, $compteur_rbd);
          
                            if($message_sms_bancaire2 > 0) {
                                $rb = new Application_Model_EuRelevebancairedetail();
                                $mrb = new Application_Model_EuRelevebancairedetailMapper();
                                $mrb->find($compteur_rbd, $rb);   
        
                                $rb->setRelevebancairedetail_numero($detail_numero);
                                $rb->setPublier(2);
                                $mrb->update($rb);
                            }

                        }
    //}
                    }   
                } else if($_POST['relevebancaire_banque'] == "UTB") {

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    foreach ($lines as $line_num => $line) {
                        list($date, $libelle, $datevaleur, $debit, $credit, $numero, $solde) = explode(";", $line);
                        $montant = trim($credit);
                        //$montant = str_replace("ÿ", "", $montant);
                        //$montant = str_replace("Ê", "", $montant);
                        list($mont, $apresvirgule) = explode(",", $montant);

                        //if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("UTB", trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                            $rb->setRelevebancairedetail_numero(trim($numero));
                            $rb->setRelevebancairedetail_date(date_fr_en3($date));
                            $rb->setRelevebancairedetail_montant($mont);
                            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
                            $rb->setPublier(0);
                            $mrb->save($rb);            
                        }
    //}
                    }   
/*}else if($_POST['relevebancaire_banque'] == "ORABANK"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($date, $datevaleur, $libelle, $debit, $credit, $solde) = explode(";", $line);//$numero, 
$montant = trim($credit);
//$montant = str_replace("ÿ", "", $montant);
//$montant = str_replace("Ê", "", $montant);
list($mont, $apresvirgule) = explode(",", $montant);

list($date2, $datevaleur2, $libelle2, $debit2, $credit2, $solde2) = explode(";", $lines[$line_num + 1]);//$numero, 

//if($date != "" && $datevaleur != "" && $libelle != "" && $mont > 0){// && $numero != ""
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim($libelle." ".$libelle2));
            $rb->setRelevebancairedetail_numero(NULL);//trim($numero)
            $rb->setRelevebancairedetail_date(date_fr_en3($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
            
    //}
}*/  
                } else if($_POST['relevebancaire_banque'] == "ORABANK") {

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    $i = 0;
                    foreach ($lines as $line_num => $line) {
                        list($date, $datevaleur, $libelle, $debit, $credit, $solde) = explode(";", $lines[$line_num]);
                        $pos = stripos($date, "/");
                        if($pos !== false) {
                            list($date2, $datevaleur2, $libelle2, $debit2, $credit2, $solde2) = explode(";", $lines[$line_num + 1]);
                            $pos2 = stripos($date2, "/");
                            if($pos2 === false) {
                                $libelle = $libelle." ".$libelle2;
                            }
                            list($date3, $datevaleur3, $libelle3, $debit3, $credit3, $solde3) = explode(";", $lines[$line_num + 2]);
                            $pos3 = stripos($date3, "/");
                            if($pos3 === false) {
                                $libelle = $libelle." ".$libelle3;
                            }
                            $montant = trim($credit);
                            list($mont, $apresvirgule) = explode(",", $montant);
                            //if($date != "" && $datevaleur != "" && $libelle != "" && $mont > 0){// && $numero != ""
                            $eurelevebancaire_detail = new Application_Model_DbTable_EuRelevebancairedetail();
                            $select = $eurelevebancaire_detail->select()
                                                              ->where("LOWER(REPLACE(relevebancairedetail_libelle, ' ', '')) LIKE '".strtolower(str_replace(" ", "",$libelle))."'")
                                                ;
                            if(!($rowseurelevebancaire_detail = $eurelevebancaire_detail->fetchRow($select))) {
                                $rb = new Application_Model_EuRelevebancairedetail();
                                $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                                $compteur_rbd = $mrb->findConuter() + 1;
                                $rb->setRelevebancairedetail_id($compteur_rbd);
                                $rb->setRelevebancairedetail_relevebancaire($compteur);
                                $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                                $rb->setRelevebancairedetail_numero(NULL);//trim($numero)
                                $rb->setRelevebancairedetail_date(date_fr_en3($date));
                                $rb->setRelevebancairedetail_montant($mont);
                                $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
                                $rb->setPublier(0);
                                $mrb->save($rb);            
                            }
                        }
    //}
                    }  
/*}else if($_POST['relevebancaire_banque'] == "BOA"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($un, $deux, $trois, $montant, $quatre, $date, $datevaleur, $cinq, $numero, $libelle) = explode(";", $line);
$montant = trim($montant);
//$montant = str_replace("ÿ", "", $montant);
//$montant = str_replace("Ê", "", $montant);
list($mont, $apresvirgule) = explode(",", $montant);

if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){

        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("BOA", trim($numero));
        if(count($relevebancairedetail) == 0){


        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
            $rb->setRelevebancairedetail_numero(trim($numero));
            $rb->setRelevebancairedetail_date(date_fr_en3($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
        }
    }
}*/
                } else if($_POST['relevebancaire_banque'] == "BOA") {
                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    foreach ($lines as $line_num => $line) {
                        $pos1 = stripos($line, "EndOfDay;");
                        $pos2 = stripos($line, "FinDeJourn‚e;");
                        if($pos1 !== false) {
                            list($un, $deux, $trois, $montant, $cinq, $date, $datevaleur, $huit, $numero, $libelle) = explode(";", $line, 10);
                            $date = substr($date, 6, 4)."-".substr($date, 3, 2)."-".substr($date, 0, 2);
                            $datevaleur = substr($datevaleur, 6, 4)."-".substr($datevaleur, 3, 2)."-".substr($datevaleur, 0, 2);

                            /*$date = substr($date, 0, 10);
                            $pos5 = stripos($date, "-");
                            if($pos5 === false) {  
                                $tab = explode("-", $date);
                            } else {
                                $pos5 = stripos($date, "/");
                            if($pos5 === false) {  
                                $tab = explode("/", $date);
                            }
                            }
                            if(strlen($tab[0]) == 4) {
                                $date = $date;
                            } else {
                                $date = substr($date, 6, 4)."-".substr($date, 3, 2)."-".substr($date, 0, 2);
                            }

                            $pos5 = stripos($datevaleur, "-");
                            if($pos5 === false) {  
                                $tab = explode("-", $datevaleur);
                            } else {
                                $pos5 = stripos($datevaleur, "/");
                            if($pos5 === false) {  
                                $tab = explode("/", $datevaleur);
                            }
                            }
                            if(strlen($tab[0]) == 4) {
                                $datevaleur = $datevaleur;
                            } else {
                                $datevaleur = substr($datevaleur, 6, 4)."-".substr($datevaleur, 3, 2)."-".substr($datevaleur, 0, 2);
                            }*/
                                $libelle = substr($libelle, 0, -1);

                        } else if($pos2 !== false) {
                            //"FinDeJourn‚e 01007 01608630006 48    00057   -94473  XOF     2018-03-21  2018-03-20  Divers  B575748 AFB: 21VIREMENT FAVEUR  CCP PC ZOGBEDJI MAWULIKLIM S";

                            //$line2 = preg_replace('/\s\s+/', ' ', $line);
                            //$line2 = str_ireplace(' ', '+', $line2);
                            $line2 = preg_split("/[\s,]+/", $line);
                            $line3 = implode(" ", $line2);
                            //print_r($line2);
                            //echo $line3."<br>";
                            list($un, $deux, $trois, $quatre, $cinq, $montant, $sept, $date, $datevaleur, $dix, $numero, $douze, $libelle) = explode(" ", $line3, 13);

                            $date = substr($date, 6, 4)."-".substr($date, 3, 2)."-".substr($date, 0, 2);
                            $datevaleur = substr($datevaleur, 6, 4)."-".substr($datevaleur, 3, 2)."-".substr($datevaleur, 0, 2);

                            /*if(strlen($date) == 10) {
                                $pos5 = stripos($date, "-");
                                if($pos5 === false) {  
                                    $tab = explode("-", $date);
                                } else {
                                    $pos5 = stripos($date, "/");
                                if($pos5 === false) {  
                                    $tab = explode("/", $date);
                                }
                                }
                            if (strlen($tab[0]) == 4) {
                                $date = $date;
                            } else {
                                $date = substr($date, 6, 4)."-".substr($date, 3, 2)."-".substr($date, 0, 2);
                            }

                            } elseif(strlen($date) == 20) {
                                list($un, $deux, $trois, $quatre, $cinq, $montant, $sept, $date, $neuf, $numero, $onse, $libelle) = explode(" ", $line3, 12);

                                $date = substr($date, 0, 10);
                            }*/
                            $libelle = substr($libelle, 0, -1);


                            } else {
                            //EndOfDay;01007 01608630006 48;117;26900;XOF ;2016-09-072016-09-08;Miscellaneous;A652500;AFB: 04VERSEMENT ESPECES SOHOIN AKOUVI;
                            //EndOfDay;01007 01608630006 48;4;2000;XOF ;13/01/2017;16/01/2017;Miscellaneous;A811348;AFB: 04VERSEMENT ESPECES GLOBAL INNOV;

                            //$line2 = preg_replace('/\s\s+/', ' ', $line);
                            //$line2 = str_ireplace(' ', '+', $line2);
                            $line2 = preg_split("/[\s,]+/", $line);
                            $line3 = implode(" ", $line2);
                            //print_r($line2);
                            //echo $line3."<br>";
                            list($un, $deux, $trois, $quatre, $cinq, $montant, $sept, $date, $datevaleur, $dix, $numero, $douze, $libelle) = explode(" ", $line3, 13);

                            $date = substr($date, 6, 4)."-".substr($date, 3, 2)."-".substr($date, 0, 2);
                            $datevaleur = substr($datevaleur, 6, 4)."-".substr($datevaleur, 3, 2)."-".substr($datevaleur, 0, 2);

                            /*if(strlen($date) == 10) {
                                $pos5 = stripos($date, "-");
                                if($pos5 === false) {  
                                    $tab = explode("-", $date);
                                } else {
                                    $pos5 = stripos($date, "/");
                                if($pos5 === false) {  
                                    $tab = explode("/", $date);
                                }
                                }
                            if (strlen($tab[0]) == 4) {
                                $date = $date;
                            } else {
                                $date = substr($date, 6, 4)."-".substr($date, 3, 2)."-".substr($date, 0, 2);
                            }

                            } elseif(strlen($date) == 20) {
                                list($un, $deux, $trois, $quatre, $cinq, $montant, $sept, $date, $neuf, $numero, $onse, $libelle) = explode(" ", $line3, 12);

                                $date = substr($date, 0, 10);
                            }*/
                            $libelle = substr($libelle, 0, -1);

                        }
                    
                        //if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $montant > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        if(!$relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("BOA", trim($numero))){


                        $rb = new Application_Model_EuRelevebancairedetail();
                        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                        $compteur_rbd = $mrb->findConuter() + 1;
                        $rb->setRelevebancairedetail_id($compteur_rbd);
                        $rb->setRelevebancairedetail_relevebancaire($compteur);
                        $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                        $rb->setRelevebancairedetail_numero(trim($numero));
                        $rb->setRelevebancairedetail_date(($date));
                        $rb->setRelevebancairedetail_montant(trim($montant));
                        $rb->setRelevebancairedetail_date_valeur(($datevaleur));
                        $rb->setPublier(0);
                        $mrb->save($rb);            
            
           
                        $detail_numero = trim($numero);
                        $detail_date = ($date);
                        $detail_montant = str_replace(" ", "", $montant);
                        //$detail_montant = str_replace(".", "", $montant);
                        //$detail_montant = str_replace(",", "", $montant);
                        $detail_libelle = trim(str_replace("'", " ", $libelle));

                        $message_sms_bancaire2 = Util_Utils::verifSmsBancaire2("BOA", $detail_numero, $detail_date, $detail_montant, $detail_libelle, $compteur_rbd);
          
                        if($message_sms_bancaire2 > 0) {

                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
                            $mrb->find($compteur_rbd, $rb);   
        
                            $rb->setRelevebancairedetail_numero($detail_numero);
                            $rb->setPublier(2);
                            $mrb->update($rb);
                        }

                    }
    //}
                    }   
                } else if($_POST['relevebancaire_banque'] == "ECOBANK") {

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
    
                    foreach ($lines as $line_num => $line) {
                        list($un, $deux, $date, $datevaleur, $numero, $libelle, $autres) = explode(",", $line);
                        list($un1, $montant, $autres1) = explode('"",""', $line);
                        list($mont, $virgule) = explode(".", $montant);
                        $mont = str_replace(",", "", $mont);

                        //if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("ECOBANK", trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(str_replace("'", " ", $libelle));
                            $rb->setRelevebancairedetail_numero($numero);
                            $rb->setRelevebancairedetail_date(date_fr_en2($date));
                            $rb->setRelevebancairedetail_montant($mont);
                            $rb->setRelevebancairedetail_date_valeur(date_fr_en2($datevaleur));
                            $rb->setPublier(0);
                            $mrb->save($rb);            
                        }
    //}
                    }   
            } else if($_POST['relevebancaire_banque'] == "FLOOZ") {

                $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                $lines = file($fichier);
    
                foreach ($lines as $line_num => $line) {
                    list($numero, $mrch, $libelle, $moovesmc, $montant, $date) = explode(";", $line);
                    $montant = trim($montant);
                    $montant = str_replace(" ", "", $montant);

                    //if($numero != "" && $mrch != "" && $libelle != "" && $moovesmc != "" && $date != "" && $montant > 0){

                    $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                    $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("FLOOZ", trim($numero));
                    if(count($relevebancairedetail) == 0) {
                        $rb = new Application_Model_EuRelevebancairedetail();
                        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                        $compteur_rbd = $mrb->findConuter() + 1;
                        $rb->setRelevebancairedetail_id($compteur_rbd);
                        $rb->setRelevebancairedetail_relevebancaire($compteur);
                        $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                        $rb->setRelevebancairedetail_numero(trim($numero));
                        $rb->setRelevebancairedetail_date(date_fr_en4($date));
                        $rb->setRelevebancairedetail_montant($montant);
                        $rb->setRelevebancairedetail_date_valeur(date_fr_en4($date));
                        $rb->setPublier(0);
                        $mrb->save($rb);            
                    }
    //}
                }   


            } else if($_POST['relevebancaire_banque'] == "WARI")  {

                $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                $lines = file($fichier);
    
                foreach($lines as $line_num => $line) {

                    //Date paiement;Numero transaction;Numéro Facture;Nom;Prénom;Cellulaire;Etablissement;Montant
                    //02/11/2016 09:49;292468392;98952;BODE;Issa;22890331725;ECOBANK TG;100

                    /*list($date, $numero, $facture, $nom, $prenom, $cellulaire, $etablissement, $montant) = explode(";", $line);

                    $libelle = $nom." ".$prenom." - ".$facture." - ".$etablissement." - ".$cellulaire;
                    $montant = trim($montant);
                    $montant = str_replace(" ", "", $montant);
                    $date = substr($date, 6, 4)."-".substr($date, 3, 2)."-".substr($date, 0, 2);

                    $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                    $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("WARI", trim($numero));
                    if(count($relevebancairedetail) == 0) {
                        $rb = new Application_Model_EuRelevebancairedetail();
                        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                        $compteur_rbd = $mrb->findConuter() + 1;
                        $rb->setRelevebancairedetail_id($compteur_rbd);
                        $rb->setRelevebancairedetail_relevebancaire($compteur);
                        $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                        $rb->setRelevebancairedetail_numero(trim($numero));
                        $rb->setRelevebancairedetail_date($date);
                        $rb->setRelevebancairedetail_montant(trim($montant));
                        $rb->setRelevebancairedetail_date_valeur($date);
                        $rb->setPublier(0);
                        $mrb->save($rb);            
                    }*/
					
					list($date, $numero, $facture, $nom, $prenom, $cellulaire, $etablissement, $montant) = explode(";", $line);

                    $date = str_replace(" ", "", $date);
                    $date = str_replace('"', "", $date);
                    $date = trim($date); 
         
         
                    $numero = str_replace(" ", "", $numero);
                    $numero = str_replace('"', "", $numero);
                    $numero = trim($numero);

                    $facture = str_replace(" ", "", $facture);
                    $facture = str_replace('"', "", $facture);
                    $facture = trim($facture);

                    $nom = str_replace(" ", " ", $nom);
                    $nom = str_replace('"', "", $nom);
                    $nom = trim($nom);
    
                    $prenom = str_replace(" ", " ", $prenom);
                    $prenom = str_replace('"', "", $prenom);
                    $prenom = trim($prenom);

                    $cellulaire = str_replace(" ", "", $cellulaire);
                    $cellulaire = str_replace('"', "", $cellulaire);
                    $cellulaire = trim($cellulaire);

                    $etablissement = str_replace(" ", " ", $etablissement);
                    $etablissement = str_replace('"', "", $etablissement);
                    $etablissement = trim($etablissement);
         
                    //$montant = str_replace(" ", "", $montant);
                    //$montant = str_replace('"', "", $montant);
                    //$montant = trim($montant);        

                    $libelle = $nom." ".$prenom." - ".$facture." - ".$etablissement." - ".$cellulaire;
                    //$montant = trim(substr($montant, 0, -2));
                    $montant = str_replace('"', "", $montant);
                    $date = substr($date,6,4)."-".substr($date,3,2)."-".substr($date,0,2);

                    $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                    $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("WARI", trim($numero));
                    if(count($relevebancairedetail) == 0)  {
                        $rb = new Application_Model_EuRelevebancairedetail();
                        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                        $compteur_rbd = $mrb->findConuter() + 1;
                        $rb->setRelevebancairedetail_id($compteur_rbd);
                        $rb->setRelevebancairedetail_relevebancaire($compteur);
                        $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                        $rb->setRelevebancairedetail_numero(trim($numero));
                        $rb->setRelevebancairedetail_date($date);
                        $rb->setRelevebancairedetail_montant($montant);
                        $rb->setRelevebancairedetail_date_valeur($date);
                        $rb->setPublier(0);
                        $mrb->save($rb);            
                    }	

                }   

                } else if($_POST['relevebancaire_banque'] == "FAIP") {

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    foreach ($lines as $line_num => $line) {
                        list($un, $date, $numero, $quatre, $libelle, $six, $montant, $huit) = explode(";", $line);
                        $montant = trim($montant);
                        //$montant = str_replace("ÿ", "", $montant);
                        //$montant = str_replace("Ê", "", $montant);
                        //list($mont, $apresvirgule) = explode(",", $montant);
                        $date = substr($date,6,4)."-".substr($date,3,2)."-".substr($date,0,2);
                        list($autre1, $autre2) = explode("#", $libelle);
                        $code_membre = substr($autre2,0,20);


                        if($date != "" && $numero != "" && $libelle != "" && $montant > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("FAIP", trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                            $rb->setRelevebancairedetail_numero(trim($numero));
                            $rb->setRelevebancairedetail_date(($date));
                            $rb->setRelevebancairedetail_montant($montant);
                            $rb->setRelevebancairedetail_date_valeur(($date));
                            $rb->setPublier(0);
                            $mrb->save($rb);            

Util_Utils::addBAn($code_membre, $numero, $date, $montant, $libelle, "FAIP");

    
                        }
    }
                    }   
                } else if($_POST['relevebancaire_banque'] == "CECL") {

//Code;Date;Pieces;Libelle;Montant;CodeMembre

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $date, $numero, $libelle, $montant, $code_membre) = explode(";", $line);
                        $montant = trim($montant);
                        //$montant = str_replace("ÿ", "", $montant);
                        //$montant = str_replace("Ê", "", $montant);
                        //list($mont, $apresvirgule) = explode(",", $montant);
                        $date = substr($date,6,4)."-".substr($date,3,2)."-".substr($date,0,2);
                        //$libelle = trim($libelle1)." ".trim($libelle2)." #".trim($code_membre);
                        $libelle = trim($libelle)." #".trim($code_membre);


                        if($date != "" && $numero != "" && $libelle != "" && $montant > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                            $rb->setRelevebancairedetail_numero(trim($numero));
                            $rb->setRelevebancairedetail_date(($date));
                            $rb->setRelevebancairedetail_montant($montant);
                            $rb->setRelevebancairedetail_date_valeur(($date));
                            $rb->setPublier(0);
                            $mrb->save($rb);            

Util_Utils::addBAn($code_membre, $numero, $date, $montant, $libelle, $code_banque);

    
                        }
    }
                    }   
                } else if($_POST['relevebancaire_banque'] == "MECIT") {

//Code;Date;Pieces;Libelle;Montant;CodeMembre

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $date, $numero, $libelle, $montant, $code_membre) = explode(";", $line);
                        $montant = trim($montant);
                        //$montant = str_replace("ÿ", "", $montant);
                        //$montant = str_replace("Ê", "", $montant);
                        //list($mont, $apresvirgule) = explode(",", $montant);
                        $date = substr($date,6,4)."-".substr($date,3,2)."-".substr($date,0,2);
                        //$libelle = trim($libelle1)." ".trim($libelle2)." #".trim($code_membre);
                        $libelle = trim($libelle)." #".trim($code_membre);


                        if($date != "" && $numero != "" && $libelle != "" && $montant > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                            $rb->setRelevebancairedetail_numero(trim($numero));
                            $rb->setRelevebancairedetail_date(($date));
                            $rb->setRelevebancairedetail_montant($montant);
                            $rb->setRelevebancairedetail_date_valeur(($date));
                            $rb->setPublier(0);
                            $mrb->save($rb);            

Util_Utils::addBAn($code_membre, $numero, $date, $montant, $libelle, $code_banque);

    
                        }
    }
                    }   
                } else if($_POST['relevebancaire_banque'] == "MECI") {

//Code;Date;Pieces;Libelle;Montant;CodeMembre

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $date, $numero, $libelle, $montant, $code_membre) = explode(";", $line);
                        $montant = trim($montant);
                        //$montant = str_replace("ÿ", "", $montant);
                        //$montant = str_replace("Ê", "", $montant);
                        //list($mont, $apresvirgule) = explode(",", $montant);
                        $date = substr($date,6,4)."-".substr($date,3,2)."-".substr($date,0,2);
                        //$libelle = trim($libelle1)." ".trim($libelle2)." #".trim($code_membre);
                        $libelle = trim($libelle)." #".trim($code_membre);


                        if($date != "" && $numero != "" && $libelle != "" && $montant > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                            $rb->setRelevebancairedetail_numero(trim($numero));
                            $rb->setRelevebancairedetail_date(($date));
                            $rb->setRelevebancairedetail_montant($montant);
                            $rb->setRelevebancairedetail_date_valeur(($date));
                            $rb->setPublier(0);
                            $mrb->save($rb);            

Util_Utils::addBAn($code_membre, $numero, $date, $montant, $libelle, $code_banque);

    
                        }
    }
                    }   
                } else if($_POST['relevebancaire_banque'] == "MUTUAL") {

//Code;Date;Pieces;Libelle;Montant;CodeMembre

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $date, $numero, $libelle, $montant, $code_membre) = explode(";", $line);
                        $montant = trim($montant);
                        //$montant = str_replace("ÿ", "", $montant);
                        //$montant = str_replace("Ê", "", $montant);
                        //list($mont, $apresvirgule) = explode(",", $montant);
                        $date = substr($date,6,4)."-".substr($date,3,2)."-".substr($date,0,2);
                        //$libelle = trim($libelle1)." ".trim($libelle2)." #".trim($code_membre);
                        $libelle = trim($libelle)." #".trim($code_membre);


                        if($date != "" && $numero != "" && $libelle != "" && $montant > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
                            $rb->setRelevebancairedetail_numero(trim($numero));
                            $rb->setRelevebancairedetail_date(($date));
                            $rb->setRelevebancairedetail_montant($montant);
                            $rb->setRelevebancairedetail_date_valeur(($date));
                            $rb->setPublier(0);
                            $mrb->save($rb);            

Util_Utils::addBAn($code_membre, $numero, $date, $montant, $libelle, $code_banque);

    
                        }
    }
                    }  


            }   

            
            
/**/        
            


        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByNew($compteur);
        if(count($relevebancairedetail) == 0){
        $relevebancaire_m = new Application_Model_EuRelevebancaireMapper();
        //$relevebancaire = $relevebancaire_m->delete($compteur);
$sessionutilisateur->error = "Ce relevé à déjà été chargé.";
        }else{
$sessionutilisateur->error = "Opération bien effectuée";
            }


/*////////////////////////////////////////////////////////////////////////////////////


        $table = new Application_Model_DbTable_EuRelevebancairedetail();
        $select = $table->select();
        $select->where("relevebancairedetail_relevebancaire IN (SELECT relevebancaire_id FROM eu_relevebancaire WHERE relevebancaire_banque LIKE 'BAT')");
        $select->where("relevebancairedetail_numero LIKE ''");
        $select->where("publier = 0");
        $resultSet = $table->fetchAll($select);
        foreach ($resultSet as $row) {
            
            if(is_numeric($row->relevebancairedetail_montant)){

            $table2 = new Application_Model_DbTable_EuRelevebancairedetail();
            $select2 = $table2->select();
            $select2->where("relevebancairedetail_relevebancaire IN (SELECT relevebancaire_id FROM eu_relevebancaire WHERE relevebancaire_banque LIKE 'BAT')");
            $select2->where("relevebancairedetail_numero != ''");
            $select2->where("relevebancairedetail_libelle LIKE '%".$row->relevebancairedetail_libelle."%'");
            //$select2->where("REPLACE(relevebancairedetail_libelle, ' ', '') LIKE '%".str_replace(" ", "", $row->relevebancairedetail_libelle)."%'");
            //$select2->where("REPLACE(relevebancairedetail_libelle, '\'', '') LIKE '%".str_replace("'", "", $row->relevebancairedetail_libelle)."%'");
            //$select2->where("REPLACE(relevebancairedetail_libelle, '\\', '') LIKE '%".str_replace("\\", "", $row->relevebancairedetail_libelle)."%'");
            $select2->where("relevebancairedetail_date LIKE '".$row->relevebancairedetail_date."'");
            $select2->where("relevebancairedetail_montant LIKE ".$row->relevebancairedetail_montant."");
            $select2->where("publier = 0");
            $resultSet2 = $table2->fetchAll($select2);
            foreach ($resultSet2 as $row2) {

            if ($row->publier == 1) {
                    $rb = new Application_Model_EuRelevebancairedetail();
                    $mrb = new Application_Model_EuRelevebancairedetailMapper();
                    $mrb->find($row2->relevebancairedetail_id, $rb);

                    $rb->setPublier(2);
                    $mrb->update($rb);

            }else if ($row->publier == 0){
                    $rb = new Application_Model_EuRelevebancairedetail();
                    $mrb = new Application_Model_EuRelevebancairedetailMapper();
                    $mrb->find($row->relevebancairedetail_id, $rb);

                    $rb->setPublier(2);
                    $mrb->update($rb);
            }

            }
            
            }

        }

////////////////////////////////////////////////////////////////////////////////////*/


} else {  $sessionutilisateur->error = "Le fichier doit etre en format CSV";  }     
            
            

        $this->_redirect('/administration/listrelevebancaire');
        } else {  $sessionutilisateur->error = "Champs * obligatoire ...";  } 
        }
    }




    public function addrelevebancaire2Action() {
        /* page administration/addrelevebancaire - Ajout d'une relevebancaire */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
            if(isset($_POST['relevebancaire_utilisateur']) && $_POST['relevebancaire_utilisateur']!="" && isset($_POST['relevebancaire_date']) && $_POST['relevebancaire_date']!="") {
        
            include("Transfert.php");
            if(isset($_FILES['relevebancaire_fichier']['name']) && $_FILES['relevebancaire_fichier']['name']!="") {
                $chemin = "relevebancaires";
                $file = $_FILES['relevebancaire_fichier']['name'];
                $file1='relevebancaire_fichier';
                $relevebancaire = $chemin."/".transfert($chemin,$file1);
            } else {$relevebancaire = "";}
            
            $fichier = $relevebancaire;
            
            $_fichier = strtolower(substr($relevebancaire, -4));
            if($_fichier == ".csv" || $_fichier == ".CSV") { // || $_fichier == ".xls" || $_fichier == "xlsx"
        
                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $a = new Application_Model_EuRelevebancaire();
                $ma = new Application_Model_EuRelevebancaireMapper();
            
                $compteur = $ma->findConuter() + 1;
                $a->setRelevebancaire_id($compteur);
                $a->setRelevebancaire_banque($_POST['relevebancaire_banque']);
                $a->setRelevebancaire_utilisateur($_POST['relevebancaire_utilisateur']);
                $a->setRelevebancaire_fichier($relevebancaire);
                $a->setRelevebancaire_date($_POST['relevebancaire_date']);
                $a->setPublier($_POST['publier']);
                $ma->save($a);


                if($_POST['relevebancaire_banque'] == "ECOBANK") {   

                    $fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
                    $lines = file($fichier);
    
                    foreach ($lines as $line_num => $line) {
//Date Transaction;;Description;Inst Code;Date Valuer;Debit;Credit;Solde
//03-janv-2018;250497769;REF : 708CHDP180030043 // VERSEMENT ESPECES // VERSEMENT ESPECES PAR KORODOWOU TOURE AMDI BN 4115333;;03-janv-2018;;27 000;13 038 659

                        list($date, $deux, $libelle, $quatre, $datevaleur, $debit, $credit, $solde) = explode(";", $line);
                        $montant = str_replace(" ", "", $credit);
                        $date = date_fr_en4($date);
                        $datevaleur = date_fr_en4($datevaleur);
                        list($ref, $autres) = explode(" // ", $libelle);
                        $numero = str_replace("REF : ", "", $ref);


                        //if($date != "" && $datevaleur != "" && $libelle != "" && $numero != "" && $montant > 0){

                        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("ECOBANK", trim($numero));
                        if(count($relevebancairedetail) == 0) {
                            $rb = new Application_Model_EuRelevebancairedetail();
                            $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
                            $compteur_rbd = $mrb->findConuter() + 1;
                            $rb->setRelevebancairedetail_id($compteur_rbd);
                            $rb->setRelevebancairedetail_relevebancaire($compteur);
                            $rb->setRelevebancairedetail_libelle(str_replace("'", " ", $libelle));
                            $rb->setRelevebancairedetail_numero($numero);
                            $rb->setRelevebancairedetail_date($date);
                            $rb->setRelevebancairedetail_montant($montant);
                            $rb->setRelevebancairedetail_date_valeur($datevaleur);
                            $rb->setPublier(0);
                            $mrb->save($rb);            
                        }
    //}
                    }   
                }    

            
            
/**/        
            


        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByNew($compteur);
        if(count($relevebancairedetail) == 0){
        $relevebancaire_m = new Application_Model_EuRelevebancaireMapper();
        //$relevebancaire = $relevebancaire_m->delete($compteur);
$sessionutilisateur->error = "Ce relevé à déjà été chargé.";
        }else{
$sessionutilisateur->error = "Opération bien effectuée";
            }


/*////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////*/


} else {  $sessionutilisateur->error = "Le fichier doit etre en format CSV";  }     
            
            

        $this->_redirect('/administration/listrelevebancaire');
        } else {  $sessionutilisateur->error = "Champs * obligatoire ...";  } 
        }
    }




public function addrelevebancaireoldAction()
    {
        /* page administration/addrelevebancaire - Ajout d'une relevebancaire */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['relevebancaire_utilisateur']) && $_POST['relevebancaire_utilisateur']!="" && isset($_POST['relevebancaire_date']) && $_POST['relevebancaire_date']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['relevebancaire_fichier']['name']) && $_FILES['relevebancaire_fichier']['name']!=""){
        $chemin = "relevebancaires";
        $file = $_FILES['relevebancaire_fichier']['name'];
        $file1='relevebancaire_fichier';
        $relevebancaire = $chemin."/".transfert($chemin,$file1);
        } else {$relevebancaire = "";}
            
            $fichier = $relevebancaire;
            
            $_fichier = strtolower(substr($relevebancaire, -4));
        if($_fichier == ".csv" || $_fichier == ".CSV"){// || $_fichier == ".xls" || $_fichier == "xlsx"
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setRelevebancaire_id($compteur);
            $a->setRelevebancaire_banque($_POST['relevebancaire_banque']);
            $a->setRelevebancaire_utilisateur($_POST['relevebancaire_utilisateur']);
            $a->setRelevebancaire_fichier($relevebancaire);
            $a->setRelevebancaire_date($_POST['relevebancaire_date']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);
            
            



if($_POST['relevebancaire_banque'] == "BAT"){   

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($date, $numero, $libelle, $datevaleur, $montant) = explode(";", $line);
$montant = trim($montant);
$montant = strtr($montant, " ", "");
$montant = str_replace(" ", "", $montant);
$montant = strtr($montant, "ÿ", "");
$montant = str_replace("ÿ", "", $montant);
$montant = strtr($montant, "&yuml;", "");
$montant = str_replace("&yuml;", "", $montant);
//$montant = str_replace("Ê", "", $montant);
list($mont, $apresvirgule) = explode(",", $montant);

//if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){//

        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("BAT", trim($numero));
        if(count($relevebancairedetail) == 0){


        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
            $rb->setRelevebancairedetail_numero(trim($numero));
            $rb->setRelevebancairedetail_date(date_fr_en3($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
            
           
            $detail_numero = trim($numero);
            $detail_date = date_fr_en3($date);
            $detail_montant = str_replace(" ", "", $mont);
            //$detail_montant = str_replace(".", "", $mont);
            //$detail_montant = str_replace(",", "", $mont);
            $detail_libelle = trim(str_replace("'", " ", $libelle));

  $message_sms_bancaire2 = Util_Utils::verifSmsBancaire2("BAT", $detail_numero, $detail_date, $detail_montant, $detail_libelle, $compteur_rbd);
          
//if(is_int($message_sms_bancaire2) || $message_sms_bancaire2 > 0){

        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
        $mrb->find($message_sms_bancaire2, $rb);   
        
        $rb->setRelevebancairedetail_numero($detail_numero);
        $rb->setPublier(2);
        $mrb->update($rb);
//}

            }
    //}
}   
}else if($_POST['relevebancaire_banque'] == "UTB"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($date, $libelle, $datevaleur, $debit, $credit, $numero, $solde) = explode(";", $line);
$montant = trim($credit);
//$montant = str_replace("ÿ", "", $montant);
//$montant = str_replace("Ê", "", $montant);
list($mont, $apresvirgule) = explode(",", $montant);

//if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){

        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("UTB", trim($numero));
        if(count($relevebancairedetail) == 0){


        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
            $rb->setRelevebancairedetail_numero(trim($numero));
            $rb->setRelevebancairedetail_date(date_fr_en3($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
        }
    //}
}   
/*}else if($_POST['relevebancaire_banque'] == "ORABANK"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($date, $datevaleur, $libelle, $debit, $credit, $solde) = explode(";", $line);//$numero, 
$montant = trim($credit);
//$montant = str_replace("ÿ", "", $montant);
//$montant = str_replace("Ê", "", $montant);
list($mont, $apresvirgule) = explode(",", $montant);

list($date2, $datevaleur2, $libelle2, $debit2, $credit2, $solde2) = explode(";", $lines[$line_num + 1]);//$numero, 

//if($date != "" && $datevaleur != "" && $libelle != "" && $mont > 0){// && $numero != ""
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim($libelle." ".$libelle2));
            $rb->setRelevebancairedetail_numero(NULL);//trim($numero)
            $rb->setRelevebancairedetail_date(date_fr_en3($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
            
    //}
}*/  
}else if($_POST['relevebancaire_banque'] == "ORABANK"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    $i = 0;
foreach ($lines as $line_num => $line) {

list($date, $datevaleur, $libelle, $debit, $credit, $solde) = explode(";", $lines[$line_num]);

$pos = stripos($date, "/");

if($pos !== false){

list($date2, $datevaleur2, $libelle2, $debit2, $credit2, $solde2) = explode(";", $lines[$line_num + 1]);

$pos2 = stripos($date2, "/");

if($pos2 === false){

$libelle = $libelle." ".$libelle2;

}

list($date3, $datevaleur3, $libelle3, $debit3, $credit3, $solde3) = explode(";", $lines[$line_num + 2]);

$pos3 = stripos($date3, "/");

if($pos3 === false){

$libelle = $libelle." ".$libelle3;

}

$montant = trim($credit);


list($mont, $apresvirgule) = explode(",", $montant);

//if($date != "" && $datevaleur != "" && $libelle != "" && $mont > 0){// && $numero != ""
                        $eurelevebancaire_detail = new Application_Model_DbTable_EuRelevebancairedetail();
                        $select = $eurelevebancaire_detail->select()
                                                ->where("LOWER(REPLACE(relevebancairedetail_libelle, ' ', '')) LIKE '".strtolower(str_replace(" ", "",$libelle))."'")
                                                ;
                        if (!($rowseurelevebancaire_detail = $eurelevebancaire_detail->fetchRow($select))) {
                        

        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
            $rb->setRelevebancairedetail_numero(NULL);//trim($numero)
            $rb->setRelevebancairedetail_date(date_fr_en3($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
}
            }
    //}
}  
/*}else if($_POST['relevebancaire_banque'] == "BOA"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($un, $deux, $trois, $montant, $quatre, $date, $datevaleur, $cinq, $numero, $libelle) = explode(";", $line);
$montant = trim($montant);
//$montant = str_replace("ÿ", "", $montant);
//$montant = str_replace("Ê", "", $montant);
list($mont, $apresvirgule) = explode(",", $montant);

if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){

        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("BOA", trim($numero));
        if(count($relevebancairedetail) == 0){


        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
            $rb->setRelevebancairedetail_numero(trim($numero));
            $rb->setRelevebancairedetail_date(date_fr_en3($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en3($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
        }
    }
}*/
}else if($_POST['relevebancaire_banque'] == "BOA"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

$pos1 = stripos($line, "EndOfDay;");
if ($pos1 === false) {

//$line2 = preg_replace('/\s\s+/', ' ', $line);
//$line2 = str_ireplace(' ', '+', $line2);
$line2 = preg_split("/[\s,]+/", $line);
$line3 = implode(" ", $line2);
//print_r($line2);
//echo $line3."<br>";
list($un, $deux, $trois, $quatre, $cinq, $montant, $sept, $date, $datevaleur, $dix, $numero, $douze, $libelle) = explode(" ", $line3, 13);

if(strlen($date) == 10){
//
}else if(strlen($date) == 20){
list($un, $deux, $trois, $quatre, $cinq, $montant, $sept, $date, $neuf, $numero, $onse, $libelle) = explode(" ", $line3, 12);

$date = substr($date, 0, 10);
}
$libelle = substr($libelle, 0, -1);

}else{
list($un, $deux, $trois, $montant, $cinq, $date, $sept, $numero, $libelle) = explode(";", $line, 9);
$date = substr($date, 0, 10);
$libelle = substr($libelle, 0, -1);
}
//if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $montant > 0){

        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("BOA", trim($numero));
        if(count($relevebancairedetail) == 0){


        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
            $rb->setRelevebancairedetail_numero(trim($numero));
            $rb->setRelevebancairedetail_date(($date));
            $rb->setRelevebancairedetail_montant(trim($montant));
            $rb->setRelevebancairedetail_date_valeur(($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
        }
    //}
}   
}else if($_POST['relevebancaire_banque'] == "ECOBANK"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($un, $deux, $date, $datevaleur, $numero, $libelle, $autres) = explode(",", $line);
list($un1, $montant, $autres1) = explode('"",""', $line);
list($mont, $virgule) = explode(".", $montant);
$mont = str_replace(",", "", $mont);

//if($date != "" && $datevaleur != "" && $numero != "" && $libelle != "" && $mont > 0){

        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("ECOBANK", trim($numero));
        if(count($relevebancairedetail) == 0){


        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(str_replace("'", " ", $libelle));
            $rb->setRelevebancairedetail_numero($numero);
            $rb->setRelevebancairedetail_date(date_fr_en2($date));
            $rb->setRelevebancairedetail_montant($mont);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en2($datevaleur));
            $rb->setPublier(0);
            $mrb->save($rb);            
        }
    //}
}   
}else if($_POST['relevebancaire_banque'] == "FLOOZ"){

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
    
foreach ($lines as $line_num => $line) {

list($numero, $mrch, $libelle, $moovesmc, $montant, $date) = explode(";", $line);
$montant = trim($montant);

$montant = str_replace(" ", "", $montant);

//if($numero != "" && $mrch != "" && $libelle != "" && $moovesmc != "" && $date != "" && $montant > 0){

        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero("FLOOZ", trim($numero));
        if(count($relevebancairedetail) == 0){


        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($compteur);
            $rb->setRelevebancairedetail_libelle(trim(str_replace("'", " ", $libelle)));
            $rb->setRelevebancairedetail_numero(trim($numero));
            $rb->setRelevebancairedetail_date(date_fr_en4($date));
            $rb->setRelevebancairedetail_montant($montant);
            $rb->setRelevebancairedetail_date_valeur(date_fr_en4($date));
            $rb->setPublier(0);
            $mrb->save($rb);            
        }
    //}

}   

}   

            
            
/**/        
            


        $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail = $relevebancairedetail_m->fetchAllByNew($compteur);
        if(count($relevebancairedetail) == 0){
        $relevebancaire_m = new Application_Model_EuRelevebancaireMapper();
        //$relevebancaire = $relevebancaire_m->delete($compteur);
$sessionutilisateur->error = "Ce relevé à déjà été chargé.";
        }else{
$sessionutilisateur->error = "Opération bien effectuée";
            }


} else {  $sessionutilisateur->error = "Le fichier doit etre en format CSV";  }     
            
            

        $this->_redirect('/administration/listrelevebancaire');
        } else {  $sessionutilisateur->error = "Champs * obligatoire ...";  } 
        }
    }









    public function editrelevebancaireAction()
    {
        /* page administration/editrelevebancaire - Modification d'une relevebancaire */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['relevebancaire_utilisateur']) && $_POST['relevebancaire_utilisateur']!="" && isset($_POST['relevebancaire_date']) && $_POST['relevebancaire_date']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['relevebancaire_fichier']['name']) && $_FILES['relevebancaire_fichier']['name']!=""){
		$chemin	= "relevebancaires";
		$file = $_FILES['relevebancaire_fichier']['name'];
		$file1='relevebancaire_fichier';
		$relevebancaire = $chemin."/".transfert($chemin,$file1);
		} else {$relevebancaire = $_POST['relevebancaire_fichier_old'];}
			
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
		$ma->find($_POST['relevebancaire_id'], $a);
			
            $a->setRelevebancaire_banque($_POST['relevebancaire_banque']);
            $a->setRelevebancaire_utilisateur($_POST['relevebancaire_utilisateur']);
            $a->setRelevebancaire_fichier($relevebancaire);
            $a->setRelevebancaire_date($_POST['relevebancaire_date']);
            $ma->update($a);
			
		$this->_redirect('/administration/listrelevebancaire');
		} else {  $this->view->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
		$ma->find($id, $a);
		$this->view->relevebancaire = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
		$ma->find($id, $a);
		$this->view->relevebancaire = $a;
            }
	}
	}




    public function listrelevebancaireAction()
    {
        /* page administration/listrelevebancaire - Liste des relevebancaires */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}




/*////////////////////////////////////////////////////////////////////////////////////


        $table = new Application_Model_DbTable_EuRelevebancairedetail();
        $select = $table->select();
        $select->where("relevebancairedetail_relevebancaire IN (SELECT relevebancaire_id FROM eu_relevebancaire WHERE relevebancaire_banque LIKE 'BAT')");
        $select->where("relevebancairedetail_numero LIKE ''");
        $select->where("publier <= 2");
        $resultSet = $table->fetchAll($select);
        foreach ($resultSet as $row) {
            
            if($row->relevebancairedetail_montant > 0){

            $table2 = new Application_Model_DbTable_EuRelevebancairedetail();
            $select2 = $table2->select();
            $select2->where("relevebancairedetail_relevebancaire IN (SELECT relevebancaire_id FROM eu_relevebancaire WHERE relevebancaire_banque LIKE 'BAT')");
            $select2->where("relevebancairedetail_numero != ''");
            $select2->where("relevebancairedetail_libelle LIKE '%".addslashes($row->relevebancairedetail_libelle)."%'");
            $select2->where("relevebancairedetail_date LIKE '%".$row->relevebancairedetail_date."%'");
            $select2->where("relevebancairedetail_montant = ".$row->relevebancairedetail_montant."");
            $select2->where("publier <= 2");
            $resultSet2 = $table2->fetchAll($select2);
            foreach ($resultSet2 as $row2) {

            if ($row->publier == 1) {
                    $rb = new Application_Model_EuRelevebancairedetail();
                    $mrb = new Application_Model_EuRelevebancairedetailMapper();
                    $mrb->find($row2->relevebancairedetail_id, $rb);

                    $rb->setPublier(2);
                    $mrb->update($rb);

            }else if ($row->publier == 0){
                    $rb = new Application_Model_EuRelevebancairedetail();
                    $mrb = new Application_Model_EuRelevebancairedetailMapper();
                    $mrb->find($row->relevebancairedetail_id, $rb);

                    $rb->setPublier(2);
                    $mrb->update($rb);
            }

            }
            
            }

        }

////////////////////////////////////////////////////////////////////////////////////*/





        $relevebancaire = new Application_Model_EuRelevebancaireMapper();
        $this->view->entries = $relevebancaire->fetchAll();

        $this->view->tabletri = 1;



/*
        $relevebancairedetail = new Application_Model_EuRelevebancairedetailMapper();
        $entriesdetail = $relevebancairedetail->fetchAll10();
		
		$banque = "";
		$numero = "";
		
		foreach ($entriesdetail as $entry){
		
		if($entry->relevebancairedetail_relevebancaire == $banque && $entry->relevebancairedetail_numero == $numero){
			
        $relevebancairedetail2_m = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail2 = $relevebancairedetail2_m->delete($entry->relevebancairedetail_id);

		}else{
		$banque = $entry->relevebancairedetail_relevebancaire;	
		$numero = $entry->relevebancairedetail_numero;
		}

		}*/


    }


    public function supprelevebancaireAction()
    {
        /* page administration/supprelevebancaire - Suppression d'une relevebancaire */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $relevebancaire = new Application_Model_EuRelevebancaire();
        $relevebancaireM = new Application_Model_EuRelevebancaireMapper();
        $relevebancaireM->find($id, $relevebancaire);
		
        $relevebancaireM->delete($relevebancaire->relevebancaire_id);
		//unlink($relevebancaire->relevebancaire_fichier);	

        }

		$this->_redirect('/administration/listrelevebancaire');
    }




    public function publierrelevebancaireAction()
    {
        /* page administration/publierrelevebancaire - Publier une relevebancaire */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $relevebancaire = new Application_Model_EuRelevebancaire();
        $relevebancaireM = new Application_Model_EuRelevebancaireMapper();
        $relevebancaireM->find($id, $relevebancaire);
		
        $relevebancaire->setPublier($this->_request->getParam('publier'));
		$relevebancaireM->update($relevebancaire);
        }

		$this->_redirect('/administration/listrelevebancaire');
    }




    public function detailsrelevebancaireAction() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $relevebancaire = new Application_Model_EuRelevebancaire();
        $relevebancaireM = new Application_Model_EuRelevebancaireMapper();
        $relevebancaireM->find($id, $relevebancaire);
		$this->view->relevebancaire = $relevebancaire;

            }

	}



    public function listrelevebancairedetailAction()
    {
        /* page administration/listrelevebancairedetail - Liste des detail relevebancaires */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if ($id != 0) {

        $relevebancairedetail = new Application_Model_EuRelevebancairedetailMapper();
        $this->view->entries = $relevebancairedetail->fetchAllByNew($id);
		
        $relevebancaire = new Application_Model_EuRelevebancaire();
        $relevebancaireM = new Application_Model_EuRelevebancaireMapper();
        $relevebancaireM->find($id, $relevebancaire);
		$this->view->relevebancaire = $relevebancaire;
		
        }else{
		$this->_redirect('/administration/listrelevebancaire');
			}

        $this->view->tabletri = 1;

    }





    public function listrelevebancairedetail2Action()
    {
        /* page administration/listrelevebancairedetail2 - Liste des detail relevebancaires */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        ini_set('memory_limit','1024M');

        $code = (string) $this->_request->getParam('code');
        if ($code != "") {

        $relevebancairedetail = new Application_Model_EuRelevebancairedetailMapper();
        $this->view->entries = $relevebancairedetail->fetchAllByCode($code);
		
        $banque = new Application_Model_EuBanque();
        $banqueM = new Application_Model_EuBanqueMapper();
        $banqueM->find($code, $banque);
		$this->view->banque = $banque;
		
        }else{
		$this->_redirect('/administration/listrelevebancaire');
			}

        $this->view->tabletri = 1;

    }

     
	public function addacteurinterimpbfAction() {
	       /* page administration/addacteurinterim - Ajout d'un acteur intérimaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
		$t_typeacteur = new  Application_Model_DbTable_EuTypeActeur();
		$t_banque = new  Application_Model_DbTable_EuBanque();
		$t_typecreneau = new  Application_Model_DbTable_EuTypeCreneau();
		$m_filiere = new Application_Model_EuFiliereMapper();
		   
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_zone = new Application_Model_DbTable_EuZone();
		

        $banques = $t_banque->fetchAll();		
		$filieres = $m_filiere->fetchAll();
        $typeacteurs = $t_typeacteur->fetchAll();
		$typecreneaus = $t_typecreneau->fetchAll();
        $this->view->typeacteurs = $typeacteurs;	
        $this->view->typecreneaus = $typecreneaus;
        $this->view->filieres = $filieres;
		$this->view->banques = $banques;
            
        $cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
		   
		$this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
		$this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
		   
		$request = $this->getRequest(); 		
		if ($request->isPost ())   {
	       $membremorale = new Application_Model_EuMembreMorale();
	       $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
			   
		   $banque = new Application_Model_EuBanque();
	       $m_banque  = new Application_Model_EuBanqueMapper();

           $compte = new Application_Model_EuCompte();
           $map_compte = new Application_Model_EuCompteMapper();
			
		   $contrat = new Application_Model_EuContrat();
           $map_contrat = new Application_Model_EuContratMapper();
				
		   $table = new Application_Model_DbTable_EuActeur();
		   $model_acteur = new Application_Model_EuActeur();
		   $mapper_acteur = new Application_Model_EuActeurMapper();
				
		   $cm  = new Application_Model_EuActeurCreneauMapper();
           $acren = new Application_Model_EuActeurCreneau();
											  
		   $rep_mapper = new Application_Model_EuRepresentationMapper();
				
		   $user_mapper = new Application_Model_EuUtilisateurMapper();
           $userin = new Application_Model_EuUtilisateur();
				
		   $te_mapper = new Application_Model_EuTegcMapper();
           $te = new Application_Model_EuTegc();
				
		   $date_id = new Zend_Date(Zend_Date::ISO_8601);
           $date_idd = clone $date_id;
				
		   $id_type_acteur = "";
		   $id_type_creneau = "";

           $findmembre = $m_mapmorale->find($request->getParam("code_membre"),$membremorale);
		   if($findmembre == false) {
			  $db->rollback();
			  $this->view->error = "Le code membre de l'acteur est introuvable ...";
			  return;
		   }
				
		   //--- Début de l'opération de mise sur chaine ---
		   $code = $request->getParam("code_membre");
		   $code_zone = $request->getParam("code_zone");
		   $id_pays = $request->getParam("id_pays");
		   $id_region = $request->getParam("id_region");
		   $id_prefecture = $request->getParam("id_prefecture");
		   $id_canton = $request->getParam("id_canton");
		   $id_filiere = $request->getParam("id_filiere");
		   $id_type_acteur = $request->getParam("id_type_acteur");
		   $code_banque = $request->getParam("code_banque");
		   $type_fournisseur = "";
		   $code_agence = substr($code,0,12);
				
		   $selection = $table->select();
           $selection->where('code_membre like ?',$code_agence.'%');
           $selection->where('type_acteur like ?','gac_surveillance');
           $resultat = $table->fetchAll($selection);
           $trouvacteursur = $resultat->current();
           $code_acteur = $trouvacteursur->code_acteur;
           $acteur  =  $code_acteur;
		   
           $rep = $rep_mapper->findbyrep($code);
           $findacteurcreneau = $cm->getActeurCreneau($id_filiere,$rep->getCode_membre());

           if($findacteurcreneau != NULL) {
             $db->rollback();
			 $this->view->error = "Impossible d'exécuter cette opération car un acteur ne peut pas appartenir à plusieurs créneaux d'activité ...";
			 return;
           }		   

		   $findacteur = $mapper_acteur->findByActeur($code);
		   if($findacteur == false) {
             $acren->setNom_acteur($membremorale->getRaison_sociale());
             $acren->setCode_membre($code);
             $acren->setId_type_acteur($id_type_acteur);
              
             $acren->setCode_membre_gestionnaire($rep->getCode_membre());
             $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
             $acren->setId_utilisateur(null);
             $acren->setGroupe(null);
             $acren->setCode_creneau(NULL);
             $acren->setCode_gac_filiere(NULL);
             $acren->setCode_gac(NULL);
											  
			 $code_acteur = $cm->getLastActeurByCrenau($code_zone);
             if ($code_acteur == NULL) {
                $code_acteur = 'A' . $code_zone . '0001';
             } else {
                $num_ordre = substr($code_acteur, -4);
                $num_ordre++;
                $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
             }
						
             $acren->setCode_acteur($code_acteur);
             $acren->setId_filiere($id_filiere);
             $cm->save($acren);

             // Insertion dans la table eu_acteur
			 $t_acteur = new Application_Model_DbTable_EuActeur();
		     $c_acteur = new Application_Model_EuActeur();
	         $count = $c_acteur->findConuter() + 1;
											  
			 // Mise à jour des tables
			 $filiere =  new Application_Model_EuFiliere();
             $map_filiere = new Application_Model_EuFiliereMapper();
             $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
			 $c_acteur->setId_acteur($count)
                      ->setCode_acteur(NULL)
                      ->setCode_division($filiere->getCode_division())
                      ->setCode_membre($code)
                      ->setId_utilisateur($sessionutilisateur->id_utilisateur)
                      ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
			  if($id_type_acteur == 3) {
			    $c_acteur->setCode_activite('detaillant');
			  } else if($id_type_acteur == 2) {
			    $c_acteur->setCode_activite('semi-grossiste');
			  } else if($id_type_acteur == 1) {
				$c_acteur->setCode_activite('grossiste');
			  }
					
			  $c_acteur->setCode_source_create('SOURCE');
              $c_acteur->setCode_monde_create('MONDE');
              $c_acteur->setCode_zone_create($code_zone);
              $c_acteur->setId_pays($id_pays);
              $c_acteur->setId_region($id_region);
              $c_acteur->setCode_secteur_create($id_prefecture);
              $c_acteur->setCode_agence_create($id_canton);
				  
              $c_acteur->setType_acteur('PBF'); 				  
                  
              $c_acteur->setCode_gac_chaine($acteur);
              $t_acteur->insert($c_acteur->toArray());

              // Mise à jour de la table eu_utilisateur
              $trouveuser = false;
		      $code_type_acteur = $membremorale->getCode_type_acteur();

              $finduser = $user_mapper->findByMembre($code,"personne_morale");
			  if($finduser != false) {
				$trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
		      }
            
			  if($trouveuser) {
				if($id_type_acteur == 3) {
                  $userin->setCode_groupe('pbf_detaillant');
                  $userin->setCode_gac_filiere('pbf_detaillant');
                  $userin->setCode_groupe_create('pbf_detaillant');
                } elseif($id_type_acteur == 2) {
                  $userin->setCode_groupe('pbf_semi_grossiste');
                  $userin->setCode_gac_filiere(NULL);
                  $userin->setCode_groupe_create('pbf_semi_grossiste');
                } elseif($id_type_acteur == 1) {
                  $userin->setCode_groupe('pbf_grossiste');
                  $userin->setCode_gac_filiere(NULL);
                  $userin->setCode_groupe_create('pbf_grossiste');
                }
				$userin->setId_filiere($id_filiere);
                $user_mapper->update($userin);  
		     }
			
			
             // Mise à jour de la table eu_membre_morale
		     $membremorale->setId_filiere($id_filiere);
		     $membremorale->setType_fournisseur($type_fournisseur);
		     $m_mapmorale->update($membremorale);
			 
			 
			 //Mise à jour de la table eu_banque
			 $find_banque = $m_banque->find($code_banque,$banque);
			 $banque->setCode_membre_morale($code);
		     $m_banque->update($banque);
			 
			 
             // Recuperation de la PRK nr
             $params = new Application_Model_EuParametresMapper();
             $par = new Application_Model_EuParametres();
             $prc = 0;
             $par_prc = $params->find('prc','nr',$par);
             if ($par_prc == true) {
                $prc = $par->getMontant();
             }

			 
             $code_te = 'TEGCP' .$id_filiere. $code;
             $find_te = $te_mapper->find($code_te,$te);
             if ($find_te == false) {
                $te->setCode_tegc($code_te)
                   ->setId_filiere($id_filiere)
                   ->setMdv($prc)
                   ->setCode_membre($code)
                   ->setMontant(0)
                   ->setMontant_utilise(0)
                   ->setSolde_tegc(0);
                $te_mapper->save($te);
              } else {
                $te->setId_filiere($id_filiere);
                $te->setMdv($prc);
                $te_mapper->update($te);
              }

			  
              $code_compte = 'NB-TPAGCP-'.$code;
		      $res = $map_compte->find($code_compte,$compte);

              $code_comptets = 'NB-TSGCP-'.$code;
		      $rests = $map_compte->find($code_comptets,$compte);
				
			  if(!$rests) {
                 $compte->setCode_cat('TSGCP')
                        ->setCode_compte($code_comptets)
                        ->setCode_membre(NULL)
                        ->setCode_membre_morale($code)
                        ->setCode_type_compte('NB')
                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                        ->setDesactiver(0)
                        ->setLib_compte('TSGCP')
                        ->setSolde(0);
                  $map_compte->save($compte); 
               }

               // Mise à jour de la table eu_contrat
			   $findcontrat = $map_contrat->findByMembre($code);
			   $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
			   $contrat->setId_type_creneau($id_type_creneau);
			   $contrat->setId_type_acteur($id_type_acteur);
			   $map_contrat->update($contrat);	

               //---Fin de l'opération de mise sur chaine---				   
               $db->commit();
			   $sessionutilisateur->error = "Opération bien effectuée ...";
			   $this->_redirect('/administration/listacteurinterim');
				   
			} else {
				$db->rollback();
                $this->view->error = "Cet acteur pbf est déjà intégré ...";
                //$this->_redirect('/administration/addacteurinterim');					
                return;
		    }
		}
	
	}
	
	
	public function listdemandeconfigteAction() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $valider = (int)$this->_request->getParam('valider');

        $demandeconfigte = new Application_Model_EuDemandeConfigteMapper();
        $this->view->entries = $demandeconfigte->fetchAllByValider($valider - 1);
        $this->view->valider = $valider;

        $this->view->tabletri = 1;

    }
	
	public function listdemandeconfigtevaliderAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

//$valider = (int)$this->_request->getParam('valider');

        $demandeconfigte = new Application_Model_EuDemandeConfigteMapper();
        $this->view->entries = $demandeconfigte->fetchAllByValider(3);
//$this->view->valider = $valider;
        $this->view->tabletri = 1;

    }




public function validerdemandeconfigteAction()
    {
        /* page administration/validerdemandeconfigte - Publier l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $demandeconfigte = new Application_Model_EuDemandeConfigte();
        $demandeconfigteM = new Application_Model_EuDemandeConfigteMapper();
        $demandeconfigteM->find($id, $demandeconfigte);
		
        $demandeconfigte->setValider($this->_request->getParam('valider'));
		$demandeconfigteM->update($demandeconfigte);
        }

		$this->_redirect('/administration/listdemandeconfigte/valider/'.$this->_request->getParam('valider'));
    }


    public function detaildemandeconfigteAction() {
        /* page administration/detaildemandeconfigte - Détail demande BPS */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int)$this->_request->getParam('id');
        if ($id > 0) {
            $demandeconfigte = new Application_Model_EuDemandeConfigte();
            $demandeconfigteM = new Application_Model_EuDemandeConfigteMapper();
            $demandeconfigteM->find($id, $demandeconfigte);
		    $this->view->demandeconfigte = $demandeconfigte;
        }

	}
	
	
	
	
	public function addtepAction()  {
	    /* page administration/addtep - Ajout d'un acteur prestataire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))      { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
		
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_zone = new Application_Model_DbTable_EuZone();
            
        $cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
		   
		$this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
		$this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
		
		$tegc   = new Application_Model_EuTegc();
		$m_tegc = new Application_Model_EuTegcMapper();
		
		$request = $this->getRequest();
		
		if ($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
                $membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
				
				$date = new Zend_Date();
			
                $membremorale = new Application_Model_EuMembreMorale();
	            $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
				
				$integrateur = new Application_Model_EuIntegrateur();
	            $m_integrateur  = new Application_Model_EuIntegrateurMapper();
				
				$eucompte = new Application_Model_EuCompte();
				$m_compte = new Application_Model_EuCompteMapper();
									
				$prk = new Application_Model_EuPrk();
                $m_prk = new Application_Model_EuPrkMapper();
									
                $te   = new Application_Model_EuTegc();
				$m_te = new Application_Model_EuTegcMapper();

                $code_membre = $request->getParam("code_membre");
                $code_zone = $request->getParam("code_zone");
                $id_pays = $request->getParam("id_pays");
                $id_region = $request->getParam("id_region");
                $id_prefecture = $request->getParam("id_prefecture");
                $id_canton = $request->getParam("id_canton");
				
				$rowsintegrateur = $m_integrateur->fetchAllByCodeMembre($code_membre);
				$findtegcp = $m_te->findByMembre($code_membre,$te);
				
                if(substr($code_membre,19,1) == 'P')  {
				    $findmembre = $m_map->find($code_membre,$membre);
				    if($findmembre == false) {
						      $db->rollback();
		                      $sessionutilisateur->error = "Le numéro membre  saisi  ".$code_membre."  est introuvable ...";
					          return;
					}
				} else {
					$findmembre = $m_mapmorale->find($code_membre,$membremorale);
				    if($findmembre == false) {
						$db->rollback();
		                $sessionutilisateur->error = "Le numéro membre saisi  ".$code_membre."  est introuvable ...";
					    return;
					}
				}
				
				
				if(count($rowsintegrateur) <= 0) {
				  $db->rollback();
		          $sessionutilisateur->error = "Le membre doit souscrire à 10 comptes au moins ...";
				  return;
				}
				
				
				if($findtegcp == true)  {
				   $db->rollback();
		           $sessionutilisateur->error = "Ce membre dispose déjà d'un Terminal de vente ...";
				   return;   
				}
				
                // script de creation de TE de prestation
				$code_te = "";
				$nom_tegc = "";

                if(substr($code_membre,19,1)=='P') {
					$nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
				} else {
					$nom_tegc = $membremorale->raison_sociale;
				}
														
				$num_compte = 'NB-TPAGCP-'.$code_membre;
				$res = $m_compte->find($num_compte,$eucompte);
									
				if(!$res)   {
					$eucompte->setCode_cat('TPAGCP')
                             ->setCode_compte($num_compte)
			                 ->setCode_type_compte('NB')
                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                             ->setDesactiver(0)
                             ->setLib_compte('TPAGCP')
                             ->setSolde(0);
												 
					if(substr($code_membre,19,1)=='P') {		 
                        $eucompte->setCode_membre($code_membre)
                                 ->setCode_membre_morale(NULL);
					} else  {
                        $eucompte->setCode_membre(NULL)
                                 ->setCode_membre_morale($code_membre);
                    }										         
                    $m_compte->save($eucompte);
										
					$code_te = $m_te->getLastTegcByMembre($code_membre);
					if ($code_te == NULL) {
			            $code_te = 'TEGCP'.$code_membre. '00001';         
			        } else {
			            $num_ordre = substr($code_te, -5);
                        $num_ordre++;
                        $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			        }
										
					$te->setCode_tegc($code_te);
			        $te->setId_filiere(NULL);
			        $te->setMdv(12);
			        $te->setTranche_payement(1);
					if(substr($code_membre,19,1)=='M') {
			            $te->setCode_membre($code_membre);
					} else {
                        $te->setCode_membre_physique($code_membre);
                    }										
			        $te->setMontant(0);
			        $te->setMontant_utilise(0);
			        $te->setSolde_tegc(0);
			        $te->setId_utilisateur(NULL);
			        $te->setNom_tegc($nom_tegc);
			        $te->setNom_produit("Prestation");
			        $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					$te->setType_tegc("PRESTATAIRE");
		            $te->setRecurrent_illimite(0);
				    $te->setRecurrent_limite(0);
					$te->setNonrecurrent(1);
					$te->setPeriode1(0);
					$te->setPeriode2(0);
					$te->setPeriode3(0);
					$te->setFormel(0);
					$te->setRegime_tva(0);
					$te->setSpecial(0);
					$te->setOrdinaire(1);
					$te->setSubvention(0);
										
					$te->setCode_zone($code_zone);
				    $te->setId_pays($id_pays);
				    $te->setId_region($id_region);
				    $te->setId_prefecture($id_prefecture);
				    $te->setId_canton($id_canton);

                    $m_te->save($te);

                    $id_prk = $m_prk->findConuter() + 1;
				    $prk->setId_prk($id_prk);
					$prk->setCode_tegc($code_te);
					$prk->setValeur(7);
					$prk->setType_produit(NULL);
					$prk->setCode_type_credit(NULL);
					$m_prk->save($prk);
                                        										
				}
									
				$num_comptets = 'NB-TSGCP-'.$code_membre;
				$rests = $m_compte->find($num_comptets,$eucompte);
									
				if(!$rests) {
					$eucompte->setCode_cat('TSGCP')
                             ->setCode_compte($num_comptets)
							 ->setCode_type_compte('NB')
                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                             ->setDesactiver(0)
                             ->setLib_compte('TSGCP')
                             ->setSolde(0);
												 
					if(substr($code_membre,19,1)=='P') {		 
                        $eucompte->setCode_membre($code_membre)
                                 ->setCode_membre_morale(NULL);
				    } else  {
                        $eucompte->setCode_membre(NULL)
                                 ->setCode_membre_morale($code_membre);
                    }										         
                    $m_compte->save($eucompte);
									
                }
				// fin script de creation TE
				$db->commit();
                $sessionutilisateur->error = "Operation bien effectuee ...";
			    $this->_redirect('/administration/listacteurinterim');				
                          
		    } catch (Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
		
	    }
	
	}
	
	
	
	public function adddemandeconfigAction()    {
		/* page administration/addacteurinterim - Ajout d'un acteur intérimaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
		$cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        
        $this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
        $this->view->regions = $regions;
		$this->view->pays = $pays;
        $this->view->zones = $zones;
		
		$request = $this->getRequest();
		if($request->isPost())  {
		     $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction(); 
             try {
				 $offreur = new Application_Model_EuOffreurProjet();
                 $m_offreur = new Application_Model_EuOffreurProjetMapper();
			   
			     $demande   = new Application_Model_EuDemandeConfigte();
                 $m_demande = new Application_Model_EuDemandeConfigteMapper();
			   
			     $code_membre = $request->getParam("code_membre");
			     $nom_produit = $request->getParam("nom_produit");
			     $id_canton = $request->getParam("id_canton");
			   
			     $date_id = Zend_Date::now();
			   
			     $findoffreur = $m_offreur->fetchAllByMembre($code_membre);
			     if($findoffreur == false) {
			         $sessionutilisateur->error = "Le membre moral saisi n'est pas un offreur de projet ou de Biens,Produits et Service ...";
				     return;
			     }
	
			     $finddemande = $m_demande->findbymembre($code_membre);
			     if($finddemande != false) {
			        $sessionutilisateur->error = "Ce membre moral a déjà fait la demande de configuration de son TE ...";
				    return;
			     }
			   
			     $compteur_demande = $m_demande->findConuter() + 1;
						
			     $demande->setId_demande($compteur_demande);
                 $demande->setNom_produit($nom_produit);
                 $demande->setCode_membre_morale($code_membre);
			     $demande->setValider(3);
			     $demande->setId_canton($id_canton);
			     $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			   
			     if(isset($_POST['categorie1'])  && ($_POST['categorie1'] == 1)) {
				    $demande->setProduit_special(1);
			     } else {
                    $demande->setProduit_special(0);
                 }					  
					  
			     if(isset($_POST['categorie2']) && ($_POST['categorie2'] == 1)) {
				    $demande->setProduit_ordinaire(1);
			     } else {
                    $demande->setProduit_ordinaire(0);
                 }
			   
			     $m_demande->save($demande);
			     $db->commit();
			     $sessionutilisateur->errorlogin = "Opération bien effectuée ...";
                             $this->_redirect('/administration/listdemandeconfigtevalider');
		
		     } catch (Exception $exc) {				   
			      $db->rollback();
                  $sessionutilisateur->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
		     }
		}
		
	}
	
	

	
	public function addacteurinterimAction() {
	    /* page administration/addacteurinterim - Ajout d'un acteur intérimaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
        $t_filiere = new Application_Model_DbTable_EuFiliere();		
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_zone = new Application_Model_DbTable_EuZone();
		
        $filieres = $t_filiere->fetchAll();		
        $this->view->divisions = $filieres;
            
        $cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
		   
		$this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
		$this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
		
		$t_prk = new Application_Model_DbTable_EuTypePrk();
        $typeprks = $t_prk->fetchAll();
        $this->view->typeprks = $typeprks;
		
		$tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
	    $select->order('lib_type_credit desc');
		$select->where('code_type_credit IN  (?)',array("IMM","PFS","AP","AG"));
	    $select->from($tabela);
	    $produits = $tabela->fetchAll($select);
	    $this->view->produits = $produits;
		   
		$request = $this->getRequest();  
		if ($request->isPost ())   {
		   $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
		       $membremorale = new Application_Model_EuMembreMorale();
	           $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
			   
			   $acteur = new Application_Model_EuActeur();
	           $m_acteur  = new Application_Model_EuActeurMapper();

			   $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $date_idd = clone $date_id;

               $findmembre = $m_mapmorale->find($request->getParam("code_membre"),$membremorale);
			   if($findmembre == false) {
				 $db->rollback();
				 $this->view->error = "Le code membre de l'acteur est introuvable ...";
				 return;
			   }

               $code_membre = $request->getParam("code_membre");
			   $findacnev = $m_acteur->findByAdministrateur($code_membre,"ACNEV");
			   $findfiliere = $m_acteur->findByAdministrateur($code_membre,"FILIERE");
			   $findtechno = $m_acteur->findByAdministrateur($code_membre,"TECHNOPOLE");
			   
			   if(($findacnev == false) && ($findfiliere == false) && ($findtechno == false) && ($code_membre != '0010010010010000212M')) {
			     $db->rollback();
				 $this->view->error = "Le code membre de l'acteur doit etre un compte d'administration ...";
				 return;
			   }

			   $te = new Application_Model_EuTegc();
		       $te_mapper = new Application_Model_EuTegcMapper();
                               
			   $prk = new Application_Model_EuPrk();
               $m_prk = new Application_Model_EuPrkMapper();
				
			   $typecredit = new Application_Model_EuTypeCredit();
               $m_typecredit = new Application_Model_EuTypeCreditMapper();
				
			   $id_filiere = $request->getParam("id_filiere");
			   $raison_sociale = $request->getParam("nom");
			   $nom_produit = $request->getParam("nom_produit");
			   $code_membre = $request->getParam("code_membre");
			   $type_tegcp = $request->getParam("type_fournisseur");
				
			   $code_zone = $request->getParam("code_zone");
			   $id_pays = $request->getParam("id_pays");
			   $id_region = $request->getParam("id_region");
			   $id_prefecture = $request->getParam("id_prefecture");
			   $id_canton = $request->getParam("id_canton");
			   $id_prks = $request->getParam("id_prk");
			   $maxtab = sizeof($id_prks);
			   $tranche = 1;
			   $mdv = 12;
			   
			   $date_id = Zend_Date::now();
			   
			   // Recuperation de la PRK nr
               $params = new Application_Model_EuParametresMapper();
               $par = new Application_Model_EuParametres();
               $prc = 0;
               $par_prc = $params->find('prc','nr',$par);
               if ($par_prc == true) {
                  $prc = $par->getMontant();
               }
			   
			   $code_te = $te_mapper->getLastTegcByMembre($code_membre);
			   
			   if ($code_te == NULL) {
			      $code_te = 'TEGCP'.$id_filiere.$code_membre. '00001';         
			   } else {
			      $num_ordre = substr($code_te, -5);
                  $num_ordre++;
                  $code_te = 'TEGCP'.$id_filiere.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			   }
			   
			    $te->setCode_tegc($code_te);
			    $te->setId_filiere($id_filiere);
			    $te->setMdv($mdv);
			    $te->setTranche_payement($tranche);
			    $te->setCode_membre($code_membre);
			    $te->setMontant(0);
			    $te->setMontant_utilise(0);
			    $te->setSolde_tegc(0);
			    $te->setId_utilisateur($sessionutilisateur->id_utilisateur);
			    $te->setNom_tegc($raison_sociale);
			    $te->setNom_produit($nom_produit);
			    $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				$te->setType_tegc($type_tegcp);
			   
			    if(isset($_POST['produit1']) && $_POST['produit1'] == 'ri') {
			     $te->setRecurrent_illimite(1);
			    } else {
				 $te->setRecurrent_illimite(0);
			    }
			   
			    if(isset($_POST['produit2']) && $_POST['produit2'] == 'rl') {
				  $te->setRecurrent_limite(1);
			    } else {
				  $te->setRecurrent_limite(0);
			    }
					  
			    if(isset($_POST['produit3']) && $_POST['produit3'] == 'nr') {
				  $te->setNonrecurrent(1);
			    } else {
                  $te->setNonrecurrent(0);
                }					  
						
                if(isset($_POST['periode1']) && $_POST['periode1'] == '11.2') {						
				  $te->setPeriode1(1);
			    } else { 
				  $te->setPeriode1(0);
			    }
				
			    if(isset($_POST['periode2']) && $_POST['periode2'] == '22.4') {						
				  $te->setPeriode2(1);
			    } else { 
				  $te->setPeriode2(0);
			    }
			   
			    if(isset($_POST['periode3']) && $_POST['periode3'] == '1') {						
				  $te->setPeriode3(1);
			    } else { 
				  $te->setPeriode3(0);
			    }
			   
			    if(isset($_POST['situation']) && $_POST['situation'] == '1') {						
				  $te->setFormel(1);
			    } else { 
				  $te->setFormel(0);
			    }
			   
			    if(isset($_POST['tva']) && $_POST['tva'] == '1') {						
				  $te->setRegime_tva(1);
			    } else { 
				  $te->setRegime_tva(0);
			    }
                $te->setSpecial(0);					  
                $te->setOrdinaire(0);
                
			    $te->setSubvention(0);
			    $te->setCode_zone($code_zone);
			    $te->setId_pays($id_pays);
			    $te->setId_region($id_region);
			    $te->setId_prefecture($id_prefecture);
			    $te->setId_canton($id_canton);
			    $te_mapper->save($te);
				
				for($x=0;$x<$maxtab;$x++) {
				   $codetypecredit = $id_prks[$x];
				   $findproduit = $m_typecredit->find($codetypecredit,$typecredit);
				   $findte = $te_mapper->find($code_te,$te);
				   
				   if($typecredit->type_produit == "PO") {					  
                     $te->setOrdinaire(1);
                     $te_mapper->update($te);					  
				   }
				   
				   if($typecredit->type_produit == "PS") {
				     $te->setSpecial(1);					  
                     $te_mapper->update($te);					  
				   }
				   
				   $findprk = $m_prk->findByCreditTegc($code_te,$codetypecredit,$prk);
				   if($findprk == false) {
					  $id_prk = $m_prk->findConuter() + 1;
                      $prk->setId_prk($id_prk);					   
					  $prk->setCode_tegc($code_te);
					  $prk->setValeur($typecredit->prk);
					  $prk->setCode_type_credit($codetypecredit);
					  $prk->setType_produit($typecredit->type_produit);
					  $m_prk->save($prk);
				   }
				
				}
				
			   $db->commit();
			   $sessionutilisateur->error = "Operation bien effectuee ...";
			   $this->_redirect('/administration/listacteurinterim');
				
		    } catch (Exception $exc) {
		        $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
                return;
		    }
		
        }	
	}
	
	
	public function listuserAction()  {
	   /* page administration/listuser - liste des utilisateurs */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	   if(!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
		   $tabela = new Application_Model_DbTable_EuUtilisateur();
		   $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
		   $select->join('eu_user_group', 'eu_user_group.code_groupe = eu_utilisateur.code_groupe');
           $select->where('eu_utilisateur.id_utilisateur_parent = ?',$sessionutilisateur->id_utilisateur);
		   $select->where('eu_user_group.code_groupe = ?','cnp_tegcp');
		   $select->order('id_utilisateur desc');
		   $users = $tabela->fetchAll($select);
		   $this->view->entries = $users;
	  }
	
	
	
	  
	  public function addachatinterimoldAction()  {
		  /* page administration/addachatinterim - */
		  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		  //$this->_helper->layout->disableLayout();
 		  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		  if(!isset($sessionutilisateur->login))         { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
		  
		  $achat = new Application_Model_EuAchatInterim();
          $m_achat = new Application_Model_EuAchatInterimMapper();
		
		  $membre = new Application_Model_EuMembre();
	      $m_membre = new Application_Model_EuMembreMapper();
		  
		  $request = $this->getRequest();
		  if($request->isPost())  {
			 if(isset($_POST['type_acheteur']) && $_POST['type_acheteur']!="" 
               && isset($_POST['montant_achat']) && $_POST['montant_achat']!="" && $_POST['montant_achat'] > 0)  {
			  
               $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction();
               try  {
                    $code_achat = NULL;
					$nom_acheteur = NULL;
					$prenom_acheteur = NULL;
					$raison_acheteur = NULL;
                    $type_acheteur = $request->getParam("type_acheteur");
					$montant_achat = $request->getParam("montant_achat");
					$date_id = Zend_Date::now();

                    if($type_acheteur == "PP") {
                        $nom_acheteur = $request->getParam("nom_acheteur");
						$prenom_acheteur = $request->getParam("prenom_acheteur");
                    } else if($type_acheteur == "PM") {
                        $raison_acheteur = $request->getParam("raison_acheteur");
                    }
					
					do {
                       $code_achat = strtoupper(Util_Utils::genererCodeSMS(6));
                       $achatinterim_mapper = new Application_Model_EuAchatInterimMapper();
                       $achatinterim = $achatinterim_mapper->fetchAllByCode($code_achat);
                    } while(count($achatinterim) > 0);
					
					$achat->setCode_achat($code_achat);
					$achat->setNom_acheteur($nom_acheteur);
					$achat->setPrenom_acheteur($prenom_acheteur);
					$achat->setRaison_acheteur($raison_acheteur);
					$achat->setDate_achat($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					$achat->setMontant_achat($montant_achat);
					$achat->setCode_membre("0000000000000000001P");
					$achat->setId_utilisateur($sessionutilisateur->id_utilisateur);
					$achat->setBon_id(NULL);
					$achat->setStatus(0);
					$m_achat->save($achat);
					$db->commit();
					
					$sessionutilisateur->error = "Operation bien effectuee ...";
			        $this->_redirect('/administration/listachatinterim');
		  
		       } catch (Exception $exc) {				   
			      $db->rollback();
                  $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
		       }
			   
			 } else {
				 $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			 }
			 
		  }
	  }



          
	  public function addachatinterimAction()  {
		  /* page administration/addachatinterim - */
		  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		  //$this->_helper->layout->disableLayout();
 		  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		  if(!isset($sessionutilisateur->login))         { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
		  
		  $achat = new Application_Model_EuAchatInterim();
          $m_achat = new Application_Model_EuAchatInterimMapper();
		
		  $membre = new Application_Model_EuMembre();
	      $m_membre = new Application_Model_EuMembreMapper();
		  
		  $request = $this->getRequest();
		  if($request->isPost())  {
			 if(isset($_POST['code_ban']) && $_POST['code_ban']!="" 
               && isset($_POST['montant_achat']) && $_POST['montant_achat']!="" && $_POST['montant_achat'] > 0)  {
			  
               $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction();
               try  {
				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
				   
                    $code_achat = NULL;
					$nom_acheteur = NULL;
					$prenom_acheteur = NULL;
					$raison_acheteur = NULL;
					$code_membre_interim = "0000000000000000003M";
                    //$type_acheteur = $request->getParam("type_acheteur");
					
					$montant_achat = $request->getParam("montant_achat");
					$code_bon_neutre = $request->getParam("code_ban");
					$date_id = Zend_Date::now();
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($code_bon_neutre);
					
					if($montant_achat <= 0) {
					   $db->rollback();
                       $this->view->error = "Le montant achat ne doit pas etre inférieur ou égale à 0 ...";
                       return;
					}
					
					if(count($bon_neutre) == 0) {
					   $db->rollback();
                       $this->view->error = "Votre Code BAn est incorrect ..."; 
                       return;	
					}
					
					if(($bon_neutre->bon_neutre_code_membre ==  ""  ||  $bon_neutre->bon_neutre_code_membre == NULL)) {
					   $db->rollback();
                       $this->view->error = "Ce Bon d'Achat neutre est lié à un code membre ...";
                       return; 
					}
					
					if(($bon_neutre->bon_neutre_montant_solde <  $montant_achat)) {
					   $db->rollback();
                       $this->view->error = "Montant restant du BAn est insuffisant ...";
                       return; 
					}
					
					$bon_neutre2 = new Application_Model_EuBonNeutre();
				    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
				    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
					
					$bon_neutre_id = $bon_neutre->bon_neutre_id;
					$nom_acheteur  = $bon_neutre2->bon_neutre_nom;
					$prenom_acheteur = $bon_neutre2->bon_neutre_prenom;
					$raison_acheteur = $bon_neutre2->bon_neutre_raison;
					
					$bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
				    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
					
					$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					
					if(($lignesdetbon == NULL) || ($cumulbon < $montant_achat)) {
						$db->rollback();
                        $this->view->error = "Montant restant du BAn est insuffisant pour effectuer cette operation ...";
                        return; 
				    }
					
						 
				  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
							
				  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_achat);
				  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_achat);
				  $bon_neutre2M->update($bon_neutre2);
				  
				  
				  do {
                     $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                     $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                     $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                  } while(count($bon_neutre_detail2) > 0);
				  
				  
				  $bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
                  $bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

                  $compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
                  $bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                  $bon_neutre_appro->setBon_neutre_appro_beneficiaire($code_membre_interim);
                  $bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $bon_neutre_appro->setBon_neutre_appro_montant($montant_achat);
                  $bon_neutre_appro->setBon_neutre_appro_apporteur(NULL);
                  $bon_neutre_appro_mapper->save($bon_neutre_appro);
				  
				  $i = 0;
				  $reste = $montant_achat;
				  $nbre_lignesdetbon = count($lignesdetbon);
                  while($reste > 0 && $i < $nbre_lignesdetbon) {
                     $lignedetbon = $lignesdetbon[$i];
                     $id = $lignedetbon->getBon_neutre_detail_id();
					 $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
					   
                     if($bon_neutre_detail->getBon_neutre_detail_banque() == "" || $bon_neutre_detail->getBon_neutre_detail_banque() == NULL){
                           $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                           $appro_detail = $appro_detail_mapper->fetchAllByBanque($lignedetbon->bon_neutre_appro_id);
                           $code_banque = $appro_detail->bon_neutre_appro_detail_banque;
                     } else {
                           $code_banque = $bon_neutre_detail->getBon_neutre_detail_banque();
                     }					 
					 
					 if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						  $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							
						  $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                          $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                          $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                          $bon_neutre_appro_detail->setBon_neutre_detail_id($bon_neutre_detail->bon_neutre_detail_id);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($lignedetbon->getBon_neutre_detail_montant_solde());
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($lignedetbon->getBon_neutre_detail_montant_solde());
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque);
                          $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);
							
						  if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								  $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                  $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
								  foreach($appro_detail as $appro) {
									 $bnad = new Application_Model_EuBonNeutreApproDetail();
                                     $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                     $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                     if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                        $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                        $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                        $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                        $bnad_M->update($bnad);
                                      } else {
                                        $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                        $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                        $bnad_M->update($bnad);
                                        break;
                                      } 
                                   }
								  
						    }
							 
						     //Mise à jour  des lignes d'enrégistrement
							 $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                 ->setBon_neutre_detail_montant_solde(0);
                             $bon_neutre_detailM->update($lignedetbon);
								 
                       }  else  {
						   $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                           $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                           $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                           $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($reste);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($reste);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque);
                           $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);
						   
						   if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                $appro_montant_solde = $reste;
                                foreach($appro_detail as $appro) {
                                   $bnad = new Application_Model_EuBonNeutreApproDetail();
                                   $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                   if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                     $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                     $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                     $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                     $bnad_M->update($bnad);
                                   } else {
                                     $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                     $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                     $bnad_M->update($bnad);
                                     break;
                                   }
                                }								   
                           }
							   
                           //Mise à jour  des lignes d'enrégistrement
						   $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						   $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                           $bon_neutre_detailM->update($lignedetbon);
						   $reste = 0;
                        }							   
                        $i++;
                  }
				  
				  
				  
				  
				  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                  $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                  $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                  $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                  $bon_neutre_utilise2->setBon_neutre_id($bon_neutre_id);
                  $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($code_membre_interim, -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($code_membre_interim, -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $bon_neutre_utilise2->setBon_neutre_utilise_montant($montant_achat);
                  $bon_neutre_utilise2M->save($bon_neutre_utilise2);
				  
				  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				  
				  $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                  $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre($code_membre_interim);
                  if(count($bon_neutre3) > 0) {
                      $bon_neutre31 = new Application_Model_EuBonNeutre();
                      $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                      $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                      $bon_neutre31->setBon_neutre_code($code_BAn);
                      $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $montant_achat);
                      $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $montant_achat);
                      $bon_neutre31M->update($bon_neutre31);

                      $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                      $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                      $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                      $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                      $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                      $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                      $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre_detail->setBon_neutre_detail_montant($montant_achat);
                      $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                      $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_achat);
                      $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                      $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                      $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                      $bon_neutre_detail->setId_canton($canton);
                      $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                      $bon_neutre_detail_mapper->save($bon_neutre_detail);

                  } else {

                      $bon_neutre = new Application_Model_EuBonNeutre();
                      $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                      $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                      $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                      $bon_neutre->setBon_neutre_type("BAn");
                      $bon_neutre->setBon_neutre_code($code_BAn);
                      $bon_neutre->setBon_neutre_code_membre($code_membre_interim);
                      $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre->setBon_neutre_montant($montant_achat);
                      $bon_neutre->setBon_neutre_montant_utilise(0);
                      $bon_neutre->setBon_neutre_montant_solde($montant_achat);
                      $bon_neutre->setBon_neutre_nom("INTERIM");
                      $bon_neutre->setBon_neutre_prenom("ACHAT");
                      $bon_neutre->setBon_neutre_raison("INTERIM ACHAT");
                      $bon_neutre->setBon_neutre_email($email);
                      $bon_neutre->setBon_neutre_mobile($mobile);
                      $bon_neutre_mapper->save($bon_neutre);

                      $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                      $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                      $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                      $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                      $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                      $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                      $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre_detail->setBon_neutre_detail_montant($montant_achat);
                      $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                      $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_achat);
                      $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                      $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                      $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                      $bon_neutre_detail->setId_canton($canton);
                      $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                      $bon_neutre_detail_mapper->save($bon_neutre_detail);


                   }
				   
				  
					
				  do {
                     $code_achat = strtoupper(Util_Utils::genererCodeSMS(6));
                     $achatinterim_mapper = new Application_Model_EuAchatInterimMapper();
                     $achatinterim = $achatinterim_mapper->fetchAllByCode($code_achat);
                  } while(count($achatinterim) > 0);
					
				  $achat->setCode_achat($code_achat);
				  $achat->setNom_acheteur($nom_acheteur);
				  $achat->setPrenom_acheteur($prenom_acheteur);
				  $achat->setRaison_acheteur($raison_acheteur);
				  $achat->setDate_achat($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $achat->setMontant_achat($montant_achat);
				  $achat->setCode_membre($code_membre_interim);
				  $achat->setId_utilisateur($sessionutilisateur->id_utilisateur);
				  $achat->setBon_id(NULL);
				  $achat->setStatus(0);
				  $achat->setCode_ban($code_bon_neutre);
				  $m_achat->save($achat);
				  $db->commit();
					
					$sessionutilisateur->error = "Operation bien effectuee ...";
			        $this->_redirect('/administration/listachatinterim');
		  
		       } catch (Exception $exc) {				   
			      $db->rollback();
                  $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
		       }
			   
			 } else {
				 $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			 }
			 
		  }
	  }
	  
	  
	  
	  public  function  listachatinterimAction()  {
		  /* page administration/listachatinterim - Liste des achats intérimaires */
		  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		  //$this->_helper->layout->disableLayout();
 		  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		  
		  
		  if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
			
			$tabela = new Application_Model_DbTable_EuAchatInterim();
			$select = $tabela->select();
			$select->order('date_achat desc');
			
			$achats = $tabela->fetchAll($select);
		    $this->view->entries = $achats;		   
            $this->view->tabletri = 1;
	   }
	  
	  
	
	
	  public function adduserteAction() {
	    /* page administration/adduserte - Ajout d'un utilisateur */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
        if ($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
	
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
		
		$userin = new Application_Model_EuUtilisateur();
        $mapper = new Application_Model_EuUtilisateurMapper();
		
		$membre = new Application_Model_EuMembre();
	    $m_membre = new Application_Model_EuMembreMapper();
		
		$t_tegc = new Application_Model_DbTable_EuTegc();
		$select = $t_tegc->select();
		$select->where('code_membre like ?',"0010010010010000003M");
		$select->where('(type_tegc like ?',"INTERIM");
		$select->orwhere('type_tegc like ?',"SPECIFIQUE");
		$select->orwhere('type_tegc like ?)',"EXTERNE");
		$select->order('nom_tegc asc');   
		$tegc = $t_tegc->fetchAll($select); 
        $this->view->tegc = $tegc;
		
		$request = $this->getRequest();
		if($request->isPost())  {
		  $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
          try {
		      $find_user = $mapper->findLogin($request->getParam("login"));
			  $utilisateur = new Application_Model_EuUtilisateur();
			  $trouve_user = $mapper->find($sessionutilisateur->id_utilisateur,$utilisateur);
			  $nom = $request->getParam("nom");
			  $prenom = $request->getParam("prenom");
			  $login = $request->getParam("login");
			  $pwd = $request->getParam("pwd");
			  $pwd1 = $request->getParam("pwd1");
			  $id_pays = $request->getParam("id_pays");
			  $id_canton = $request->getParam("id_canton");
			  $code_tegc = $request->getParam("code_tegc");
			  $code_membre = $request->getParam("code_membre");
		      $findmembre = $m_membre->find($code_membre,$membre);
			  
			  if($find_user != false) {
				 $db->rollback();
                 $error = 'Ce login existe déjà.';
                 $this->view->error = $error;
                 $this->view->nom = $request->getParam("nom");
                 $this->view->prenom = $request->getParam("prenom");
                 $this->view->login = $request->getParam("login");
                 return;
              } elseif ($pwd != $pwd1) {
				 $db->rollback();
                 $error = 'Erreur de confirmation du mot de passe.';
                 $this->view->error = $error;
                 $this->view->nom = $request->getParam("nom");
                 $this->view->prenom = $request->getParam("prenom");
                 $this->view->login = $request->getParam("login");
                 return;
              } elseif(stripos($login, " ") !== false) {
				 $db->rollback();
                 $error = "Le Login ne doit pas contenir d'espace";
                 $this->view->error = $error;
                 $this->view->nom = $request->getParam("nom");
                 $this->view->prenom = $request->getParam("prenom");
                 $this->view->login = $request->getParam("login");
                 return;
              } elseif($findmembre == false) {
				 $db->rollback();
				 $error = "Le code membre de l'utilisateur  ".$code_membre."  est introuvable ...";
                 $this->view->error = $error;
                 $this->view->nom = $request->getParam("nom");
                 $this->view->prenom = $request->getParam("prenom");
                 $this->view->login = $request->getParam("login");
			     return;
			  }
			   
			   //insertion dans la table eu_utilisateur
			   $id_user = $mapper->findConuter() + 1;
               $userin->setId_utilisateur($id_user);
               $userin->setId_utilisateur_parent($sessionutilisateur->id_utilisateur); 
               $userin->setPrenom_utilisateur($prenom);
               $userin->setNom_utilisateur($nom);
               $userin->setLogin(trim($login));
               $userin->setPwd(md5($pwd));
               $userin->setDescription(null);
               $userin->setUlock(0);
               $userin->setCh_pwd_flog(0);
               $userin->setCode_groupe('cnp_tegcp');
               $userin->setConnecte(0);
               $userin->setCode_agence($sessionutilisateur->code_agence);
				    		 
               $userin->setCode_secteur($utilisateur->code_secteur);
               $userin->setCode_zone($utilisateur->code_zone);
						
               $userin->setId_filiere($utilisateur->id_filiere);
			   
			   $userin->setCode_acteur($utilisateur->code_acteur);	   
			   $userin->setCode_gac_filiere(null);
			   $userin->setCode_groupe_create($sessionutilisateur->code_groupe);
			   $userin->setCode_membre($code_membre);
			   
			   $userin->setId_pays($id_pays);
               $userin->setId_canton($id_canton);
               $userin->setCode_tegc($code_tegc);			   
               $mapper->save($userin);					
               $db->commit();
			   
			   $sessionutilisateur->error = "Operation bien effectuee ...";
			   $this->_redirect('/administration/listuser');
		
		  } catch (Exception $exc) {				   
			  $db->rollback();
              $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
              return;
		  }
		}
		
	}
	
	
	
	
	public function edituserteAction() {
	   /* page administration/adduserte - Ajout d'un utilisateur */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	   if(!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
	   
	   $t_zone = new Application_Model_DbTable_EuZone();
       $zones = $t_zone->fetchAll();
       $this->view->zones = $zones;
       $t_pays = new Application_Model_DbTable_EuPays();
       $pays = $t_pays->fetchAll();
       $this->view->pays = $pays;
       $t_region = new Application_Model_DbTable_EuRegion();
       $regions = $t_region->fetchAll();
       $this->view->regions = $regions;
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $prefectures = $t_prefecture->fetchAll();
       $this->view->prefectures = $prefectures;
       $t_canton = new Application_Model_DbTable_EuCanton();
       $cantons = $t_canton->fetchAll();
       $this->view->cantons = $cantons;
	   
	   $t_tegc = new Application_Model_DbTable_EuTegc();
	   $select = $t_tegc->select();
	   $select->where('code_membre like ?',"0010010010010000003M");
	   $select->where('(type_tegc like ?',"INTERIM");
	   $select->orwhere('type_tegc like ?',"SPECIFIQUE");
	   $select->orwhere('type_tegc like ?)',"EXTERNE");
	   $select->order('nom_tegc asc');
		   
       $tegc = $t_tegc->fetchAll($select);
		 
       $this->view->tegc = $tegc;
	   
	   $userin = new Application_Model_EuUtilisateur();
       $mapper = new Application_Model_EuUtilisateurMapper();
	   
	   $membre = new Application_Model_EuMembre();
	   $m_membre = new Application_Model_EuMembreMapper();
	   
	   $request = $this->getRequest();
	   if ($request->isPost())  {
		  $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try {
		      $find_user = $mapper->findNoLogin($request->getParam("login"),$request->getParam("id_utilisateur"));
			  $utilisateur = new Application_Model_EuUtilisateur();
			  //$trouve_user = $mapper->find($sessionmembre->id_utilisateur,$utilisateur);
			  $nom = $request->getParam("nom");
			  $prenom = $request->getParam("prenom");
			  $login = $request->getParam("login");
			  $pwdold = $request->getParam("pwdold");
			  $pwd = $request->getParam("pwd");
			  $pwd1 = $request->getParam("pwd1");
			  $id_pays = $request->getParam("id_pays");
			  $id_canton = $request->getParam("id_canton");
			  $id_user = $request->getParam("id_utilisateur");
			  $code_tegc = $request->getParam("code_tegc");
			  $code_membre = $request->getParam("code_membre");
		      $findmembre = $m_membre->find($code_membre,$membre);
			  
			  $mapper->find($id_user,$utilisateur);
			  
			  if($find_user != false) {
				 $db->rollback();
                 $error = 'Ce login existe déjà.';
                 $this->view->error = $error;
	             $this->view->user = $utilisateur;
                 return;
              } elseif($utilisateur->pwd != md5($pwdold)) {
				 $db->rollback();
        	     $error = 'Ancien mot de passe non conforme.';
				 $this->view->error = $error;
                 $this->view->user = $utilisateur;
                 return;		  
		      }	  
			  elseif($pwd != $pwd1) {
				 $db->rollback();
                 $error = 'Erreur de confirmation du mot de passe.';
				 $this->view->error = $error;
                 $this->view->user = $utilisateur;
                 return;
              } 
			  elseif (stripos($login, " ") !== false) {
				 $db->rollback();
                 $error = "Le Login ne doit pas contenir d'espace";
				 $this->view->error = $error;
                 $this->view->user = $utilisateur;
                 return;
              } elseif($findmembre == false) {
				 $db->rollback();
				 $error = "Le code membre de l'utilisateur  ".$code_membre."  est introuvable ...";
                 $this->view->error = $error;
                 $this->view->user = $utilisateur;
			     return;
			  }

              //insertion dans la table eu_utilisateur
			  //$id_user = $mapper->findConuter() + 1;
			  $mapper->find($id_user,$userin);
              $userin->setId_utilisateur_parent($sessionutilisateur->id_utilisateur); 
              $userin->setPrenom_utilisateur($prenom);
              $userin->setNom_utilisateur($nom);
              $userin->setLogin(trim($login));
              $userin->setPwd(md5($pwd));
              $userin->setDescription(null);
              $userin->setUlock(0);
              $userin->setCh_pwd_flog(1);
              $userin->setCode_groupe('cnp_tegcp');
              $userin->setConnecte(0);
              $userin->setCode_agence($sessionutilisateur->code_agence);    		 
              $userin->setCode_secteur($utilisateur->code_secteur);
              $userin->setCode_zone($utilisateur->code_zone);		
              $userin->setId_filiere($utilisateur->id_filiere);
			  $userin->setCode_acteur($utilisateur->code_acteur);	   
			  $userin->setCode_gac_filiere(null);
			  $userin->setCode_groupe_create($sessionutilisateur->code_groupe);
			  $userin->setCode_membre($code_membre);
			  $userin->setId_pays($id_pays);
              $userin->setId_canton($id_canton);
              $userin->setCode_tegc($code_tegc);			   
              $mapper->update($userin);					
              $db->commit();
			   
			  $sessionmembre->errorlogin = "Modification bien effectuee ...";
			  $this->_redirect('/administration/listuser');
			      
		  } catch (Exception $exc) {				   
			   $db->rollback();
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
               return;
		  }
	   
	   } else {
	       $id = $this->_request->getParam('id');
	       $user   = new Application_Model_EuUtilisateur();
	       $m_user = new Application_Model_EuUtilisateurMapper();
	   
	       $m_user->find($id,$user);
	       $this->view->user = $user;
	   }
	
	
	}
	
	
	
	public function addprkAction()  {
	    /* page administration/addprk - Ajout de produit */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "")  {$this->_redirect('/administration/confirmation');}
		   
		    /*$t_prk = new Application_Model_DbTable_EuTypePrk();
            $typeprks = $t_prk->fetchAll();
            $this->view->typeprks = $typeprks;*/
			
			$tabela = new Application_Model_DbTable_EuTypeCredit();
	        $select = $tabela->select();
			$select->where('activer = ?',1);
	        $select->order('lib_type_credit desc');
			
			//$select->where('code_type_credit IN  (?)',array("IMM","PFS","AP","AG"));
			
	        $select->from($tabela);
	        $typeprks = $tabela->fetchAll($select);
	        $this->view->typeprks = $typeprks;
			
		    $request = $this->getRequest();
		
		    $tegc   = new Application_Model_EuTegc();
		    $m_tegc = new Application_Model_EuTegcMapper();
		 
		    $prk   = new Application_Model_EuPrk();
		    $m_prk = new Application_Model_EuPrkMapper();
			
			$typecredit = new Application_Model_EuTypeCredit();
            $m_typecredit = new Application_Model_EuTypeCreditMapper();
			
		    if($request->isPost ())  {
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
                    $code_te = $request->getParam("code_tegc");
                    $id_prks = $request->getParam("id_prk");
				    $maxtab  = sizeof($id_prks);
					
					for($x=0;$x<$maxtab;$x++) {
					   $codetypecredit = $id_prks[$x];
					   $findprod = $m_typecredit->find($codetypecredit,$typecredit);
				       $findproduit = $m_prk->findByCreditTegc($code_te,$codetypecredit,$prk);
					   if($findproduit == false) {
					      $id_prk = $m_prk->findConuter() + 1;
                          $prk->setId_prk($id_prk);					   
					      $prk->setCode_tegc($code_te);
					      $prk->setValeur($typecredit->prk);
					      $prk->setCode_type_credit($codetypecredit);
					      $prk->setType_produit($typecredit->type_produit);
					      $m_prk->save($prk);  
					   }
					}
										
		            //$compteur = $_POST['compteur'];
					/*$x = 1;
			        while ($x <= $compteur) {
				        if(isset($_POST["prk$x"])) {
				            $valeur_prk = $_POST["prk$x"];
                            $findprk = $m_prk->findByTegc($code_te,$valeur_prk,$prk);
					        if($findprk == false) {
					            $id_prk = $m_prk->findConuter() + 1;
					            $prk->setId_prk($id_prk);
					            $prk->setCode_tegc($code_te);
					            $prk->setValeur($valeur_prk);
					            $m_prk->save($prk);
                            }					
				        }
				        $x++;
			        }*/ 
					
				    $db->commit();
	                $sessionutilisateur->error = "Operation bien effectuee ...";
	                $this->_redirect('/administration/listacteurinterim');
				
				} catch (Exception $exc) {				   
	                $db->rollback();
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
                }
	        } else {
		        $id = $this->_request->getParam('id');
	            $tegc   = new Application_Model_EuTegc();
	            $m_tegc = new Application_Model_EuTegcMapper();
	            $prk   = new Application_Model_EuPrk();
	            $m_prk = new Application_Model_EuPrkMapper();
	            $findprks = $m_prk->fetchByTegc($id);
	            $m_tegc->find($id,$tegc);
	            $this->view->tegc = $tegc;
	            $this->view->prks = $findprks;
	        }
	}
	
	
	
	
	public function addprkoldAction()  {
	    /* page administration/addacteurinterim - Ajout d'un acteur intérimaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "")  {$this->_redirect('/administration/confirmation');}
		   
		    $t_prk = new Application_Model_DbTable_EuTypePrk();
            $typeprks = $t_prk->fetchAll();
            $this->view->typeprks = $typeprks;
		    $request = $this->getRequest();
		
		    $tegc   = new Application_Model_EuTegc();
		    $m_tegc = new Application_Model_EuTegcMapper();
		 
		    $prk   = new Application_Model_EuPrk();
		    $m_prk = new Application_Model_EuPrkMapper();
			
		    if($request->isPost ())  {
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
                    $code_te = $request->getParam("code_tegc");				
		            $compteur = $_POST['compteur'];
			        $x = 1;
			        while ($x <= $compteur) {
				        if(isset($_POST["prk$x"])) {
				            $valeur_prk = $_POST["prk$x"];
                            $findprk = $m_prk->findByTegc($code_te,$valeur_prk,$prk);
					        if($findprk == false) {
					            $id_prk = $m_prk->findConuter() + 1;
					            $prk->setId_prk($id_prk);
					            $prk->setCode_tegc($code_te);
					            $prk->setValeur($valeur_prk);
					            $m_prk->save($prk);
                            }					
				        }
				        $x++;
			        }        
				    $db->commit();
	                $sessionutilisateur->error = "Operation bien effectuee ...";
	                $this->_redirect('/administration/listacteurinterim');
				
				} catch (Exception $exc) {				   
	                $db->rollback();
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
                }
	        } else {
		        $id = $this->_request->getParam('id');
	            $tegc   = new Application_Model_EuTegc();
	            $m_tegc = new Application_Model_EuTegcMapper();
	            $prk   = new Application_Model_EuPrk();
	            $m_prk = new Application_Model_EuPrkMapper();
	            $findprks = $m_prk->fetchByTegc($id);
	            $m_tegc->find($id,$tegc);
	            $this->view->tegc = $tegc;
	            $this->view->prks = $findprks;
	        }
	}
	
	
	
	
	
	
	public function editteAction() {
	    /* page administration/addacteurinterim - Ajout d'un acteur intérimaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login))         { $this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
        $t_filiere = new Application_Model_DbTable_EuFiliere();		
		
        $filieres = $t_filiere->fetchAll();		
        $this->view->divisions = $filieres;
		
		$t_prk = new Application_Model_DbTable_EuTypePrk();
        $typeprks = $t_prk->fetchAll();
        $this->view->typeprks = $typeprks;
		
		$tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
		$select->where('activer = ?',1);
	    $select->order('lib_type_credit desc');
		//$select->where('code_type_credit IN  (?)',array("IMM","PFS","AP","AG"));
	    $select->from($tabela);
	    $produits = $tabela->fetchAll($select);
	    $this->view->produits = $produits;
		
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_zone = new Application_Model_DbTable_EuZone();
            
        $cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
		   
		$this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
		$this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
		
		$tegc   = new Application_Model_EuTegc();
		$m_tegc = new Application_Model_EuTegcMapper();
		
		$typecredit   = new Application_Model_EuTypeCredit();
		$m_typecredit = new Application_Model_EuTypeCreditMapper();
		 
		$prk   = new Application_Model_EuPrk();
		$m_prk = new Application_Model_EuPrkMapper();
		$request = $this->getRequest();
		
		if ($request->isPost ())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
		        $code_tegc = $request->getParam("code_tegc");
				$nom_tegc = $request->getParam("nom");
				$nom_produit = $request->getParam("nom_produit");
				$mdv = 12;
				$tranche = 1;

                $code_zone = $request->getParam("code_zone");
				$type_tegcp = $request->getParam("type_tegcp");
				$id_pays = $request->getParam("id_pays");
				$id_region = $request->getParam("id_region");
				$id_prefecture = $request->getParam("id_prefecture");
				$id_canton = $request->getParam("id_canton");
				$id_prks = $request->getParam("id_prk");
				$maxtab = sizeof($id_prks);

                $m_tegc->find($code_tegc,$tegc);
                
                $tegc->setNom_tegc($nom_tegc);
                $tegc->setNom_produit($nom_produit);
				$tegc->setMdv($mdv);
				$tegc->setTranche_payement($tranche);
				
				$tegc->setCode_zone($code_zone);
                $tegc->setId_pays($id_pays);
				$tegc->setId_region($id_region);
				$tegc->setId_prefecture($id_prefecture);
				$tegc->setId_canton($id_canton);
				$tegc->setType_tegc($type_tegcp);
				
				$m_tegc->update($tegc);

                if(isset($_POST['produit1']) && $_POST['produit1'] == 'ri') {
			      $tegc->setRecurrent_illimite(1);
			      $m_tegc->update($tegc);
			    } else {
                  $tegc->setRecurrent_illimite(0);
			      $m_tegc->update($tegc);
                }			
					  
			    if(isset($_POST['produit2']) && $_POST['produit2'] == 'rl') {
			       $tegc->setRecurrent_limite(1);
			       $m_tegc->update($tegc);
			    } else {
                   $tegc->setRecurrent_limite(0);
			       $m_tegc->update($tegc);
                }			
					  
			    if(isset($_POST['produit3']) && $_POST['produit3'] == 'nr') {
			       $tegc->setNonrecurrent(1);
			       $m_tegc->update($tegc);
			    } else {
                   $tegc->setNonrecurrent(0);
			       $m_tegc->update($tegc);
                }			
						
                if(isset($_POST['periode1'])  && ($_POST['periode1'] == '11.2')) {						
			       $tegc->setPeriode1(1);
			       $m_tegc->update($tegc);
		        } else {
                   $tegc->setPeriode1(0);
			       $m_tegc->update($tegc);
                }			
					  
			    if(isset($_POST['periode2']) && ($_POST['periode2'] == '22.4')) {						
			       $tegc->setPeriode2(1);
			       $m_tegc->update($tegc);
			    } else {
                   $tegc->setPeriode2(0);
			       $m_tegc->update($tegc);
                }
				
				if(isset($_POST['periode3']) && ($_POST['periode3'] == '1')) {						
			       $tegc->setPeriode3(1);
			       $m_tegc->update($tegc);
			    } else {
                   $tegc->setPeriode3(0);
			       $m_tegc->update($tegc);
                }
				
				
				if(isset($_POST['situation']) && ($_POST['situation'] == '1')) {						
			       $tegc->setFormel(1);
			       $m_tegc->update($tegc);
			    } else {
                   $tegc->setFormel(0);
			       $m_tegc->update($tegc);
                }
				
				if(isset($_POST['tva']) && ($_POST['tva'] == '1')) {						
			      $tegc->setRegime_tva(1);
			      $m_tegc->update($tegc);
			    } else {
                  $tegc->setRegime_tva(0);
			      $m_tegc->update($tegc);
                }

                $tab_prk = $m_prk->fetchByTegc($code_tegc);
                for($x=0;$x<$maxtab;$x++) {
                    $codetypecredit = $id_prks[$x];
					$findproduit = $m_typecredit->find($codetypecredit,$typecredit);
					$findprk = $m_prk->findByCreditTegc($code_tegc,$codetypecredit,$prk);
					if($typecredit->type_produit == "PO") {					  
                       $tegc->setOrdinaire(1);
                       $m_tegc->update($tegc);					  
				    } else {
					   $tegc->setOrdinaire(0);
                       $m_tegc->update($tegc);
					}
					
					if($typecredit->type_produit == "PS") {					  
                       $tegc->setSpecial(1);
                       $m_tegc->update($tegc);					  
				    } else {
					   $tegc->setSpecial(0);
                       $m_tegc->update($tegc);
					}
					
					if($tab_prk != false) {
					  foreach ($tab_prk as $row) {
					    //if($findprk == false) {
					       $m_prk->find($row->id_prk,$prk);
						   $prk->setValeur($typecredit->prk);
                           $prk->setCode_type_credit($codetypecredit);
                           $prk->setType_produit($typecredit->type_produit);
                           $m_prk->update($prk);
                        //}							 
					  }  
					} else {
						$findprk = $m_prk->findByCreditTegc($code_tegc,$codetypecredit,$prk);
				        if($findprk == false) {
					       $id_prk = $m_prk->findConuter() + 1;
                           $prk->setId_prk($id_prk);					   
					       $prk->setCode_tegc($code_tegc);
					       $prk->setValeur($typecredit->prk);
					       $prk->setCode_type_credit($codetypecredit);
					       $prk->setType_produit($typecredit->type_produit);
					       $m_prk->save($prk);
				        }
					}
                }				

                $db->commit();
	            $sessionutilisateur->error = "Modification bien effectuee ...";
	            $this->_redirect('/administration/listacteurinterim');
			  
	     } catch (Exception $exc) {				   
	         $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
             return;
         }
	
	} else {
		/*$id = $this->_request->getParam('id');
	    $tegc   = new Application_Model_EuTegc();
	    $m_tegc = new Application_Model_EuTegcMapper();
	    $prk   = new Application_Model_EuPrk();
	    $m_prk = new Application_Model_EuPrkMapper();
	    $findprks = $m_prk->fetchByTegc($id);
	    $m_tegc->find($id,$tegc);
	    $this->view->tegc = $tegc;
	    $this->view->prks = $findprks;*/
		
		$id = $this->_request->getParam('id');
	    $tegc   = new Application_Model_EuTegc();
	    $m_tegc = new Application_Model_EuTegcMapper();
	    $prk   = new Application_Model_EuPrk();
	    $m_prk = new Application_Model_EuPrkMapper();
	    $findprks = $m_prk->fetchByTegc($id);
	    $m_tegc->find($id,$tegc);
	    $this->view->tegc = $tegc;
	    $this->view->prks = $findprks;
	}
		
	
	}
	
	
	public  function etatopsousexcelAction()  {
	    /* page administration/etatopsousexcel - etatopsousexcel */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$date_debut = (string) $this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string) $this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
		
		//Util_Utils::genererExcelBAnBC($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelBAnSous($date_debut, $date_fin));
		
	}
	
	
	public  function   listopsousexcelAction()  {
	   /* page administration/listopsousexcel - listopsousexcel */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
		
	   $date_debut = (string) $this->_request->getParam('date_debut');
       $this->view->date_fin = $date_debut;
       $date_fin = (string) $this->_request->getParam('date_fin');
       $this->view->date_fin = $date_fin;
		
	   //Util_Utils::genererExcelBAnBC($date_debut, $date_fin);
       $this->_redirect(Util_Utils::genererExcelDetailBAnSous($date_debut, $date_fin));
		
    }
	
	
	public  function  etatopiarAction()   {
	   /* page administration/etatopiar - etatopiar */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
	   
	   $request = $this->getRequest();
	   if($request->isPost())  {
		   $code_membre = $request->getParam("code_membre");
		   $date_debut = $request->getParam("date_debut");
           $date_fin = $request->getParam("date_fin");
		   
	       $t_traite = new Application_Model_DbTable_EuTraite();
	       $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	       $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	       $select->where('eu_traite.traite_disponible = ?',1);
		   $select->where('eu_tpagcp.type_bl like ?',"PP Acheteur-Revendeur");
		   $select->where('eu_tpagcp.ntf = ?',12);
	       $select->order('eu_traite.traite_date_fin desc');
	       
		   if(!empty($code_membre)) {
			 $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
		   }
		   
		   if(!empty($date_debut) && !empty($date_fin)) {
		      $date_fin = new Zend_Date($date_fin);
		      $date_fin->addDay(1);
		      $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
			         ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		   }
		   $entries = $t_traite->fetchAll($select);
           $this->view->entries = $entries;
	       $this->view->tabletri = 1;
	   }
	   
	}
	
	public  function etatopiarexcelAction()  {
		/* page administration/etatopiarexcel - etatopiarexcel */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$code_membre = $this->_request->getParam('code_membre');
		$date_debut = $this->_request->getParam('date_debut');
		$date_fin = $this->_request->getParam('date_fin');
        $this->view->code_membre = $code_membre;
		
		//Util_Utils::genererExcelOpiFrs($date_debut,$date_fin);
        $this->_redirect(Util_Utils::genererExcelOpiAr($code_membre,$date_debut,$date_fin));
	}
	
	
	public  function  etatopicomppAction()   {
	   /* page administration/etatopicompp - etatopicompp */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
	   
	   $request = $this->getRequest();
	   if($request->isPost())  {
		   $code_membre = $request->getParam("code_membre");
		   $date_debut = $request->getParam("date_debut");
           $date_fin = $request->getParam("date_fin");
	       $t_traite = new Application_Model_DbTable_EuTraite();
	       $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	       $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	       //$select->where('eu_traite.traite_disponible = ?',1);
		   $select->where('eu_tpagcp.type_bl like ?',"PP Prestataire");
	       $select->order('eu_traite.traite_date_fin desc');
	       
		   if(!empty($code_membre)) {
			  $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
		   }
		   
		   if(!empty($date_debut) && !empty($date_fin)) {
		      $date_fin = new Zend_Date($date_fin);
		      $date_fin->addDay(1);
		      $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
			         ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		   }
		   
		   $entries = $t_traite->fetchAll($select);
           $this->view->entries = $entries;
	       $this->view->tabletri = 1;
	   }
	   
	}
	
	
	
	public  function etatopicomppexcelAction()  {
		/* page administration/etatopicomppexcel - etatopicomppexcel */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$code_membre = $this->_request->getParam('code_membre');
		$date_debut = $this->_request->getParam('date_debut');
		$date_fin = $this->_request->getParam('date_fin');
        $this->view->code_membre = $code_membre;
		$this->view->date_debut = $date_debut;
		$this->view->date_fin = $date_fin;
		
		//Util_Utils::genererExcelOpiFrs($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelOpiComPp($code_membre,$date_debut,$date_fin));
		
	} 
	
	
	
	
	
	public  function  etatopicompmAction()   {
	   /* page administration/etatopicompm - etatopicompm */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
	   
	   $request = $this->getRequest();
	   if($request->isPost())  {
		   $code_membre = $request->getParam("code_membre");
		   $date_debut = $request->getParam("date_debut");
           $date_fin = $request->getParam("date_fin");
		   
	       $t_traite = new Application_Model_DbTable_EuTraite();
	       $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	       $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	       //$select->where('eu_traite.traite_disponible = ?',1);
		   $select->where('eu_tpagcp.type_bl like ?',"PM");
	       $select->order('eu_traite.traite_date_fin desc');
	       
		   if(!empty($code_membre)) {
			  $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
		   }
		   
		   if(!empty($date_debut) && !empty($date_fin)) {
		      $date_fin = new Zend_Date($date_fin);
		      $date_fin->addDay(1);
		      $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
			         ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		   }
		   
		   $entries = $t_traite->fetchAll($select);
           $this->view->entries = $entries;
	       $this->view->tabletri = 1;
	   }
	   
	}
	
	
	public  function etatopicompmexcelAction()  {
		/* page administration/etatopicompmexcel - etatopicompmexcel */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$code_membre = $this->_request->getParam('code_membre');
		$date_debut = $this->_request->getParam('date_debut');
		$date_fin = $this->_request->getParam('date_fin');
        $this->view->code_membre = $code_membre;
		$this->view->date_debut = $date_debut;
		$this->view->date_fin = $date_fin;
		
		//Util_Utils::genererExcelOpiFrs($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelOpiComPm($code_membre,$date_debut,$date_fin));
	}
	
	
	
	
	
	public  function  etatopifrsAction()   {
	   /* page administration/etatopifrs - etatopifrs */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
	   
	   $request = $this->getRequest();
	   if($request->isPost())  {
		   $code_membre = $request->getParam("code_membre");
		   $date_debut = $request->getParam("date_debut");
		   $date_fin = $request->getParam("date_fin");
			
	       $t_traite = new Application_Model_DbTable_EuTraite();
	       $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	       $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	       $select->where('eu_traite.traite_disponible = ?',1);
		   $select->where('eu_tpagcp.type_bl like ?',"PM");
	       $select->order('eu_traite.traite_date_fin desc');
	       
		   if(!empty($code_membre)) {
			  $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
		   }
		   
		   if(!empty($date_debut) && !empty($date_fin)) {
		      $date_fin = new Zend_Date($date_fin);
		      $date_fin->addDay(1);
		      $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
			         ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		   }
		   
		   $entries = $t_traite->fetchAll($select);
           $this->view->entries = $entries;
	       $this->view->tabletri = 1;
	   }
	}
	
	
	public  function etatopifrsexcelAction()  {
		/* page administration/etatopifrsexcel - etatopifrsexcel */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$code_membre = $this->_request->getParam('code_membre');
		$date_debut = $this->_request->getParam('date_debut');
		$date_fin = $this->_request->getParam('date_fin');
		
        $this->view->code_membre = $code_membre;
		$this->view->date_debut = $date_debut;
		$this->view->date_fin = $date_fin;
		
		//Util_Utils::genererExcelOpiFrs($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelOpiFrs($code_membre,$date_debut,$date_fin));
		
	}
	
	
	
	

    public  function etatopsousAction()  {
	   /* page administration/etatopsous - etatopsous */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
	   $request = $this->getRequest();
	   if($request->isPost())  {
            $date_debut = $request->getParam("date_debut");
		    $date_fin = $request->getParam("date_fin");
	   
	        $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	        $select = $db_bondetail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('b' => 'eu_bon_neutre'), 'eu_bon_neutre_detail.bon_neutre_id = b.bon_neutre_id');
			
			if(!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(eu_bon_neutre_detail.bon_neutre_detail_date >= ?',$date_debut)
			          ->where('eu_bon_neutre_detail.bon_neutre_detail_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('eu_bon_neutre_detail.bon_neutre_detail_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('eu_bon_neutre_detail.bon_neutre_detail_date <= ?',$date_fin->toString('yyyy-MM-dd'));
		    }
			
            $select->order('eu_bon_neutre_detail.bon_neutre_detail_date desc');
            $entries = $db_bondetail->fetchAll($select);
            $this->view->entries = $entries;
       }
	   
	}
	
	
	public function etatopsousmtAction()  {
	   /* page administration/etatopsousmt - etatopsousmt */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
	
	   $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	   $select = $db_bondetail->select();
       $select->from($db_bondetail,array('SUM(bon_neutre_detail_montant) as somme_ban'));
       $result = $db_bondetail->fetchAll($select);
	   $row = $result->current();
	   $ban_montant = $row['somme_ban'];
	   
	   $this->view->ban_montant = $ban_montant;
	   
	   $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	   $select = $db_bondetail->select();
       $select->from($db_bondetail,array('SUM(bon_neutre_detail_montant) as somme_ban_a'));
	   $select->where('bon_neutre_detail_type like ?', "ELI");
       $result = $db_bondetail->fetchAll($select);
	   $row = $result->current();
	   $ban_montant_a = $row['somme_ban_a'];
		
	   $this->view->ban_montant_a = $ban_montant_a;
	   
	   
	   $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	   $select = $db_bondetail->select();
       $select->from($db_bondetail,array('SUM(bon_neutre_detail_montant) as somme_ban_na'));
	   $select->where('(bon_neutre_detail_type is null')
	          ->orwhere('bon_neutre_detail_type like ?)', "COM");
       $result = $db_bondetail->fetchAll($select);
	   $row    = $result->current();
	   $ban_montant_na = $row['somme_ban_na'];
		
	   $this->view->ban_montant_na = $ban_montant_na;
	}
	
	
	public  function etatopsousbaiAction()   {
	    /* page administration/etatopsousbai - etatopsousbai */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
	   
	    ini_set('memory_limit', '9999999999999999991024M');
	   
	    $db_capa = new Application_Model_DbTable_EuCapa();
	    $select = $db_capa->select();
		$select->where('origine_capa like ?', "BAi");
	    $entries = $db_capa->fetchAll($select);
        $this->view->entries = $entries;
	}
	
	
	public function etatopsousbaimtAction()  {
	   /* page administration/etatopsousbaimt - etatopsousbaimt */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
		
	   $db_capa = new Application_Model_DbTable_EuCapa();
	   $select = $db_capa->select();
       $select->from($db_capa,array('SUM(montant_capa) as somme_bai'));
	   $select->where('origine_capa like ?', "BAi");
       $result = $db_capa->fetchAll($select);
	   $row = $result->current();
	   $bai_montant = $row['somme_bai'];
		
	   $this->view->bai_montant = $bai_montant;
	}
	
	
	
	public  function etatoprapproespeceAction()     {
	    /* page administration/etatoprapproespece - etatoprapproespece */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		     $db_ban = new Application_Model_DbTable_EuBonNeutre();
		     $select_ban = $db_ban->select();
             $select_ban->from($db_ban,array('SUM(bon_neutre_montant) as somme_ban_montant','SUM(bon_neutre_montant_utilise) as somme_ban_utilise'));
             $result_ban = $db_ban->fetchAll($select_ban);
		     $row_ban = $result_ban->current();
		     $ban_montant = $row_ban['somme_ban_montant'];
		     $ban_utilise = $row_ban['somme_ban_utilise'];
		
		     $this->view->ban_montant = $ban_montant;
		     $this->view->ban_montant_utilise = $ban_utilise;
		
	}
	
	
	public  function etatoprapprosupportAction()     {
	    /* page administration/etatoprapprosupport - etatoprapprosupport */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		     $db_ban = new Application_Model_DbTable_EuBonNeutre();
		     $select_ban = $db_ban->select();
             $select_ban->from($db_ban,array('SUM(bon_neutre_montant) as somme_ban_montant','SUM(bon_neutre_montant_utilise) as somme_ban_utilise'));
             $result_ban = $db_ban->fetchAll($select_ban);
		     $row_ban = $result_ban->current();
		     $ban_montant = $row_ban['somme_ban_montant'];
		     $ban_utilise = $row_ban['somme_ban_utilise'];
		
		     $this->view->ban_montant = $ban_montant;
		     $this->view->ban_montant_utilise = $ban_utilise;
			 
			 
			 //--------------------------------------------------------------------------------------------------------------------------------------
			 
			 $db_bai = new Application_Model_DbTable_EuCapa();
		     $select_bai = $db_bai->select();
             $select_bai->from($db_bai,array('SUM(montant_capa) as somme_bai_montant','SUM(montant_utiliser) as somme_bai_utilise'));
			 $select_bai->where('origine_capa like ?', "BAi");
             $result_bai = $db_bai->fetchAll($select_bai);
		     $row_bai = $result_bai->current();
		     $bai_montant = $row_bai['somme_bai_montant'];
		     $bai_utilise = $row_bai['somme_bai_utilise'];
		
		     $this->view->bai_montant = $bai_montant;
		     $this->view->bai_montant_utilise = $bai_utilise;
			 
			 // ---------------------------------------------------------------------------------------------------------------------------------------
			 
			 $db_bon = new Application_Model_DbTable_EuBon();
			 $select_bon = $db_bon->select();
			 $select_bon->from($db_bon,array('SUM(bon_montant) as somme_bon_montant'));
			 $select_bon->where('bon_type like ?', "BCr");
			 $result_bon = $db_bon->fetchAll($select_bon);
			 $row_bon = $result_bon->current();
			 $bcr_montant = $row_bon['somme_bon_montant'];
			 
			 $db_cc = new Application_Model_DbTable_EuCreditConsommer();
			 $select_cc = $db_cc->select();
			 $select_cc->from($db_cc,array('SUM(mont_consommation) as somme_bon_utilise'));
			 $select_cc->where('code_produit IN  (?)', array("RPGr","Ir"));
			 $result_cc = $db_cc->fetchAll($select_cc);
			 $row_cc = $result_cc->current();
			 $bcr_utilise = $row_cc['somme_bon_utilise'];
			 
			 $this->view->bcr_montant = $bcr_montant;
			 $this->view->bcr_utilise = $bcr_utilise;
			 
			 
			 //-----------------------------------------------------------------------------------------------------------------------------------------
			 
		     $db_bon = new Application_Model_DbTable_EuBon();
			 $select_bon = $db_bon->select();
			 $select_bon->from($db_bon,array('SUM(bon_montant) as somme_bon_montant'));
			 $select_bon->where('bon_type like ?', "BCnr");
			 $result_bon = $db_bon->fetchAll($select_bon);
			 $row_bon = $result_bon->current();
			 $bcnr_montant = $row_bon['somme_bon_montant'];
			 
			 $db_cc = new Application_Model_DbTable_EuCreditConsommer();
			 $select_cc = $db_cc->select();
			 $select_cc->from($db_cc,array('SUM(mont_consommation) as somme_bon_utilise'));
			 $select_cc->where('code_produit IN  (?)', array("RPGnr","Inr"));
			 $result_cc = $db_cc->fetchAll($select_cc);
			 $row_cc = $result_cc->current();
			 $bcnr_utilise = $row_cc['somme_bon_utilise'];
			 
			 $this->view->bcnr_montant = $bcnr_montant;
			 $this->view->bcnr_utilise = $bcnr_utilise;
			 
			 //-------------------------------------------------------------------------------------------------------------------------------------------
			 
			 $db_gcp = new Application_Model_DbTable_EuGcp();
			 $select_gcp = $db_gcp->select();
			 $select_gcp->from($db_gcp,array('SUM(mont_gcp) as somme_gcp_montant','SUM(mont_preleve) as somme_gcp_utilise'));
			 $result_gcp = $db_gcp->fetchAll($select_gcp);
			 $row_gcp = $result_gcp->current();
			 $gcp_montant = $row_gcp['somme_gcp_montant'];
			 $gcp_utilise = $row_gcp['somme_gcp_utilise'];
			 
			 
			 $this->view->bl_montant = $gcp_montant;
			 $this->view->bl_utilise = $gcp_utilise;
			 
			 
			 //------------------------------------------------------------------------------------------------------------------------------------------
			 
             $date_id = new Zend_Date(Zend_Date::ISO_8601);
             $date_debut = $date_id->toString('yyyy-MM-dd');
			 
			 $db_traite = new Application_Model_DbTable_EuTraite();
			 $select_traite = $db_traite->select();
			 $select_traite->from($db_traite,array('SUM(traite_montant) as somme_traite_montant'));
			 $result_traite = $db_traite->fetchAll($select_traite);
			 $row_traite = $result_traite->current();
			 $traite_montant = $row_traite['somme_traite_montant'];
			 
			 $db_traiteechue = new Application_Model_DbTable_EuTraite();
			 $select_traiteechue = $db_traiteechue->select();
			 $select_traiteechue->from($db_traiteechue,array('SUM(traite_montant) as somme_traite_utilise'));
			 $select_traiteechue->where('traite_date_fin <= ?',$date_debut);
			 $result_traiteechue = $db_traiteechue->fetchAll($select_traiteechue);
			 $row_traiteechue = $result_traiteechue->current();
			 $traite_utilise = $row_traiteechue['somme_traite_utilise'];
			 
			 $this->view->traite_montant = $traite_montant;
			 $this->view->traite_utilise = $traite_utilise;
			 
	}
	
	
	
	public  function etatoprapprobpsAction()  {
		/* page administration/etatoprapprobps - etatoprapprobps */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		$db_articlestocke = new Application_Model_DbTable_EuArticleStockes();
		$select_articlestocke = $db_articlestocke->select();
		$select_articlestocke->from($db_articlestocke,array('SUM(prix * qte_stock) as somme_article_stocke'));
		$select_articlestocke->where('id_eli is not null');
		
		$result_articlestocke = $db_articlestocke->fetchAll($select_articlestocke);
	    $row_articlestocke = $result_articlestocke->current();
	    $somme_article_stocke = $row_articlestocke['somme_article_stocke'];
		
		//------------------------------------------------------------------------------------------------------------------------------------------------
		
		$db_articlestocke = new Application_Model_DbTable_EuArticleStockes();
		$select_articlestocke = $db_articlestocke->select();
		$select_articlestocke->from($db_articlestocke,array('SUM(prix * qte_vendu) as somme_article_vendu'));
		$select_articlestocke->where('id_eli is not null');
		
		$result_articlestocke = $db_articlestocke->fetchAll($select_articlestocke);
	    $row_articlestocke = $result_articlestocke->current();
	    $somme_article_vendu = $row_articlestocke['somme_article_vendu'];
		
		//--------------------------------------------------------------------------------------------------------------------------------------------------
		
		$db_articlestocke = new Application_Model_DbTable_EuArticleStockes();
		$select_articlestocke = $db_articlestocke->select();
		$select_articlestocke->from($db_articlestocke,array('SUM(prix * qte_solde) as somme_article_restant'));
		$select_articlestocke->where('id_eli is not null');
		
		$result_articlestocke = $db_articlestocke->fetchAll($select_articlestocke);
	    $row_articlestocke = $result_articlestocke->current();
	    $somme_article_restant = $row_articlestocke['somme_article_restant'];
		
		$this->view->somme_article_stocke = $somme_article_stocke;
	    $this->view->somme_article_vendu = $somme_article_vendu;
		$this->view->somme_article_restant = $somme_article_restant;
		
	}
	
	
	
	public  function etatoprapproheteroAction()  {
		/* page administration/etatoprapprobps - etatoprapprobps */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		$db_gcsc = new Application_Model_DbTable_EuGcsc();
		$select_gcsc = $db_gcsc->select();
		$select_gcsc->from($db_gcsc,array('SUM(credit) as somme_smcipn'));
		
		$result_gcsc = $db_gcsc->fetchAll($select_gcsc);
	    $row_gcsc = $result_gcsc->current();
	    $somme_smcipn = $row_gcsc['somme_smcipn'];
		
		//------------------------------------------------------------------------------------------------------------------------------------------------
		
		$db_gcsc = new Application_Model_DbTable_EuGcsc();
		$select_gcsc = $db_gcsc->select();
		$select_gcsc->from($db_gcsc,array('SUM(debit) as somme_support'));
		
		$result_gcsc = $db_gcsc->fetchAll($select_gcsc);
	    $row_gcsc = $result_gcsc->current();
	    $somme_support = $row_gcsc['somme_support'];
		
		//--------------------------------------------------------------------------------------------------------------------------------------------------
		
		$db_gcsc = new Application_Model_DbTable_EuGcsc();
		$select_gcsc = $db_gcsc->select();
		$select_gcsc->from($db_gcsc,array('SUM(solde) as somme_solde'));
		
		$result_gcsc = $db_gcsc->fetchAll($select_gcsc);
	    $row_gcsc = $result_gcsc->current();
	    $somme_solde = $row_gcsc['somme_solde'];
		
		$this->view->somme_smcipn = $somme_smcipn;
	    $this->view->somme_support = $somme_support;
		$this->view->somme_solde = $somme_smcipn - $somme_support;
		
	}
	
	
	
	
	
        
	public  function listopsousAction()  {
	    /* page administration/listopsous - listopsous */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
	    $id = (int) $this->_request->getParam('id');
		
	    $ban = new Application_Model_EuBonNeutre();
	    $m_ban  = new Application_Model_EuBonNeutreMapper();
	    $findban = $m_ban->find($id,$ban);
		
	    $t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
	    $select = $t_bon_neutre_detail->select();    
        $select->where('bon_neutre_id = ?',$id);
	    $select->where('bon_neutre_appro_id is null');
	    $select->order('bon_neutre_detail_date desc');
	    $entries = $t_bon_neutre_detail->fetchAll($select);
		
	    $t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
        $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
	    $selection->setIntegrityCheck(false);
        $selection->join(array('d' => 'eu_bon_neutre_detail'),'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
	    $selection->where('d.bon_neutre_id = ?',$id);
	    $approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
	    $this->view->ban = $ban;
	    $this->view->entries = $entries;
	    $this->view->approlignes = $approlignes;
        $this->view->tabletri = 1;
		
	}


    public function  etatopexpAction()   {
	    /* page administration/etatopexp - etatopexp */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
	    $db_bon = new Application_Model_DbTable_EuBonNeutre();
	    $select = $db_bon->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
        //$select->join(array('bd' => 'eu_bon_neutre_detail'), 'eu_bon_neutre.bon_neutre_id = bd.bon_neutre_id');
	    $select->join(array('bu' => 'eu_bon_neutre_utilise'), 'eu_bon_neutre.bon_neutre_id = bu.bon_neutre_id');
	    $select->where("bu.bon_neutre_utilise_libelle IN (?) ", array("Souscription au Bon d'Achat","BC","Activation PP","Activation PM","Re-activation PM","CMFH"));
        $select->order('bu.bon_neutre_utilise_date desc');
        $entries = $db_bon->fetchAll($select);
        $this->view->entries = $entries;
        $this->view->tabletri = 1;
		
	}
	
	
	public  function etatopexpmtAction()   {
	   /* page administration/etatopexpmt - etatopexpmt */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   if(!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
	       
	   ini_set('memory_limit', '9999999999999999991024M');
		
	   $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	   $select = $db_bondetail->select();
       $select->from($db_bondetail,array('SUM(bon_neutre_detail_montant_utilise) as somme_ban_utilise'));
       $result = $db_bondetail->fetchAll($select);
	   $row = $result->current();
	   $ban_montant_utilise = $row['somme_ban_utilise'];
		
	   $this->view->ban_montant_utilise = $ban_montant_utilise;
	   
	   $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	   $select = $db_bondetail->select();
       $select->from($db_bondetail,array('SUM(bon_neutre_detail_montant_utilise) as somme_ban_utilise_a'));
	   $select->where('bon_neutre_detail_type like ?', "ELI");
       $result = $db_bondetail->fetchAll($select);
	   $row = $result->current();
	   $ban_montant_utilise_a = $row['somme_ban_utilise_a'];
		
	   $this->view->ban_montant_utilise_a = $ban_montant_utilise_a;
	   
	   $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	   $select = $db_bondetail->select();
       $select->from($db_bondetail,array('SUM(bon_neutre_detail_montant_utilise) as somme_ban_utilise_na'));
	   $select->where('bon_neutre_detail_type is null');
       $result = $db_bondetail->fetchAll($select);
	   $row = $result->current();
	   $ban_montant_utilise_na = $row['somme_ban_utilise_na'];
		
	   $this->view->ban_montant_utilise_na = $ban_montant_utilise_na;
	   
	}
	
	
	public  function etatopexpbaiAction()  {
	    /* page administration/etatopexpbai - etatopexpbai */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$db_capa = new Application_Model_DbTable_EuCapa();
	    $select = $db_capa->select();
		$select->where('origine_capa like ?', "BAi");
		$entries = $db_capa->fetchAll($select);
        $this->view->entries = $entries;
	    $this->view->tabletri = 1;
	}
	
	
	public  function etatopexpbaimtAction()  {
	   /* page administration/etatopexpbaimt - etatopexpbaimt */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	   ini_set('memory_limit', '9999999999999999991024M');
	
	   $db_capa = new Application_Model_DbTable_EuCapa();
	   $select = $db_capa->select();
       $select->from($db_capa,array('SUM(montant_utiliser) as somme_bai_utilise'));
	   $select->where('origine_capa like ?', "BAi");
       $result = $db_capa->fetchAll($select);
	   $row = $result->current();
	   $bai_montant_utilise = $row['somme_bai_utilise'];
		
	   $this->view->bai_montant_utilise = $bai_montant_utilise;
	}
	

    public  function listopexpAction()  {
	    /* page administration/listopexp - listopexp */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
	    $id = (int) $this->_request->getParam('id');
		
	    $ban = new Application_Model_EuBonNeutre();
	    $m_ban  = new Application_Model_EuBonNeutreMapper();
	    $findban = $m_ban->find($id,$ban);
		
	    $t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
	    $select = $t_bon_neutre_detail->select();    
            $select->where('bon_neutre_id = ?',$id);
	    $select->where('bon_neutre_appro_id is null');
	    $select->order('bon_neutre_detail_date desc');
	    $entries = $t_bon_neutre_detail->fetchAll($select);
		
	    $t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
            $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
	    $selection->setIntegrityCheck(false);
            $selection->join(array('d' => 'eu_bon_neutre_detail'),'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
	    $selection->where('d.bon_neutre_id = ?',$id);
	    $approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
	    $this->view->ban = $ban;
	    $this->view->entries = $entries;
	    $this->view->approlignes = $approlignes;
            $this->view->tabletri = 1;
		
	}


        
	public  function etatopopi12Action()  {
		/* page administration/etatopopi12 - etatopopi12 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$t_traite = new Application_Model_DbTable_EuTraite();
				
	    $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
		$select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	    $select->where('eu_tpagcp.ntf = ?',12);
		$select->where('eu_tpagcp.mode_reglement like ?',"OPI");
		$select->order('eu_traite.traite_date_fin desc');
		$entries = $t_traite->fetchAll($select);
        $this->view->entries = $entries;
		$this->view->tabletri = 1;
		
	}
	
	
	
	public  function etatopopimt12Action()  {
		/* page administration/etatopopimt12 - etatopopimt12 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$db_tpagcp = new Application_Model_DbTable_EuTpagcp();
	    $select = $db_tpagcp->select();
        $select->from($db_tpagcp,array('SUM(mont_gcp_maj) as opi_montant'));
	    $select->where('ntf = ?',12);
		$select->where('mode_reglement like ?',"OPI");
        $result = $db_tpagcp->fetchAll($select);
	    $row = $result->current();
	    $opi_montant = $row['opi_montant'];
		
	   $this->view->opi_montant = $opi_montant;
		
	}
	
	
	public function etatopopi23Action()  {
		
	    /* page administration/etatopopi23 - etatopopi23 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
	    /* page administration/listopexp - listopexp */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
	    $t_traite = new Application_Model_DbTable_EuTraite();
				
	    $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
	    $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	    $select->where('eu_tpagcp.ntf = ?',23);
	    $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	    $select->order('eu_traite.traite_date_fin desc');
	    $entries = $t_traite->fetchAll($select);
            $this->view->entries = $entries;
	    $this->view->tabletri = 1;
			
	}
	
	
	public  function etatopopimt23Action()  {
		/* page administration/etatopopimt12 - etatopopimt12 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit', '9999999999999999991024M');
		
		$db_tpagcp = new Application_Model_DbTable_EuTpagcp();
	    $select = $db_tpagcp->select();
        $select->from($db_tpagcp,array('SUM(mont_gcp_maj) as opi_montant'));
	    $select->where('ntf = ?',23);
		$select->where('mode_reglement like ?',"OPI");
        $result = $db_tpagcp->fetchAll($select);
	    $row = $result->current();
	    $opi_montant = $row['opi_montant'];
		
	    $this->view->opi_montant = $opi_montant;
		
	}
	
	


    public  function etatopopiechu12Action()  {
		/* page administration/etatopopiechu12 - etatopopiechu12 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit','9999999999999999991024M');
		
		/*
		$t_traite = new Application_Model_DbTable_EuTraite();
		$date_fin = new Zend_Date(Zend_Date::ISO_8601);
		$select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
		$select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	    $select->where('eu_tpagcp.ntf = ?',12);
		$select->where('eu_traite.traite_disponible = ?',1);
		$select->where('eu_tpagcp.mode_reglement like ?',"OPI");
		$select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		$select->order('eu_traite.traite_date_fin desc');
		$entries = $t_traite->fetchAll($select);
        $this->view->entries = $entries;
		$this->view->tabletri = 1;
		*/
		
		$date_fin = new Zend_Date(Zend_Date::ISO_8601);
		$date_fin = $date_fin->toString('yyyy-MM-dd');
		
		$db = Zend_Db_Table::getDefaultAdapter();
		
		$requete = "select *  from eu_traite,eu_tpagcp 
		            where eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp 
					and eu_tpagcp.ntf = 12
		            and eu_traite.traite_disponible = 1
		            and eu_tpagcp.mode_reglement like 'OPI'
					and eu_traite.traite_date_fin <= '$date_fin'
					";			
		$db->setFetchMode(Zend_Db::FETCH_OBJ);
        $cr = $db->query($requete);
		$entries = $cr->fetchAll();
		$this->view->entries = $entries;
	    $this->view->tabletri = 1;
		
	}
	
	
	public  function etatopopiechumt12Action()  {
		/* page administration/etatopopiechumt12 - etatopopiechumt12 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit','9999999999999999991024M');
		
		$date_fin = new Zend_Date(Zend_Date::ISO_8601);
		$date_fin = $date_fin->toString('yyyy-MM-dd');
		
		$db = Zend_Db_Table::getDefaultAdapter();
		
		$requete = "select sum(eu_traite.traite_montant) as opi_montant  from eu_traite,eu_tpagcp 
		            where eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp 
					and eu_tpagcp.ntf = 12
		            and eu_traite.traite_disponible = 1
		            and eu_tpagcp.mode_reglement like 'OPI'
					and eu_traite.traite_date_fin <= '$date_fin'
					";
					
		$db->setFetchMode(Zend_Db::FETCH_OBJ);
        $cr = $db->query($requete);
        $result = $cr->fetchAll();
        foreach($result as $row) {
          $opi_montant = $row->opi_montant;
        }
	    $this->view->opi_montant = $opi_montant;
	
	}
	
	
	
	public function etatopopiechu23Action()  {
	    /* page administration/listopexp - listopexp */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit','9999999999999999991024M');
		
		/*
	    $t_traite = new Application_Model_DbTable_EuTraite();
		
	    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	    $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
	    $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	    $select->where('eu_tpagcp.ntf = ?',23);
	    $select->where('eu_traite.traite_disponible = ?',1);
	    $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	    $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
	    $select->order('eu_traite.traite_date_fin desc');
	    $entries = $t_traite->fetchAll($select);
        $this->view->entries = $entries;
	    $this->view->tabletri = 1;
		*/
		
		$date_fin = new Zend_Date(Zend_Date::ISO_8601);
		$date_fin = $date_fin->toString('yyyy-MM-dd');
		
		$db = Zend_Db_Table::getDefaultAdapter();
		
		$requete = "select *  from eu_traite,eu_tpagcp 
		            where eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp 
					and eu_tpagcp.ntf = 23
		            and eu_traite.traite_disponible = 1
		            and eu_tpagcp.mode_reglement like 'OPI'
					and eu_traite.traite_date_fin <= '$date_fin'
					";
					
		$db->setFetchMode(Zend_Db::FETCH_OBJ);
        $cr = $db->query($requete);
		$entries = $cr->fetchAll();
		$this->view->entries = $entries;
	    $this->view->tabletri = 1;
		
	}
	
	
	public function etatopopiechumt23Action()  {
		/* page administration/etatopopiechumt23 - etatopopiechumt23 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit','9999999999999999991024M');
		
	    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
		$date_fin = $date_fin->toString('yyyy-MM-dd');
		
		$db = Zend_Db_Table::getDefaultAdapter();
		
		$requete = "select sum(eu_traite.traite_montant) as opi_montant  from eu_traite,eu_tpagcp 
		            where eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp 
					and eu_tpagcp.ntf = 23
		            and eu_traite.traite_disponible = 1
		            and eu_tpagcp.mode_reglement like 'OPI'
					and eu_traite.traite_date_fin <= '$date_fin'
					";
					
		$db->setFetchMode(Zend_Db::FETCH_OBJ);
        $cr = $db->query($requete);
        $result = $cr->fetchAll();
        foreach($result as $row) {
          $opi_montant = $row->opi_montant;
        }
	    $this->view->opi_montant = $opi_montant;
	}
	
	
	
	public  function etatopopidomibai12Action()  {
		
		/* page administration/etatopopidomibai12 - etatopopidomibai12 */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit','9999999999999999991024M');
		
		$t_traite = new Application_Model_DbTable_EuTraite();
		
		$date_fin = new Zend_Date(Zend_Date::ISO_8601);
		$select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
		$select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	    $select->where('eu_tpagcp.ntf = ?',12);
		$select->where('eu_traite.bon_type like ?',"BAi");
		$select->order('eu_traite.traite_date_fin desc');
		$entries = $t_traite->fetchAll($select);
        $this->view->entries = $entries;
		$this->view->tabletri = 1;
		
	}
	
	
	public function etatopopidomibaimt12Action()  {
	   /* page administration/etatopopidomibaimt12 - etatopopidomibaimt12 */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	   ini_set('memory_limit','9999999999999999991024M');
	   
	   $db = Zend_Db_Table::getDefaultAdapter();
		
	   $requete = " select sum(eu_traite.traite_montant) as opi_montant  from eu_traite,eu_tpagcp 
		            where eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp 
					and eu_tpagcp.ntf = 12
		            and eu_tpagcp.mode_reglement like 'OPI'
					and eu_traite.bon_type like 'BAi'
				  ";
					
		$db->setFetchMode(Zend_Db::FETCH_OBJ);
        $cr = $db->query($requete);
        $result = $cr->fetchAll();
        foreach($result as $row) {
          $opi_montant = $row->opi_montant;
        }
	    $this->view->opi_montant = $opi_montant;
		
		
	}
	
	
	
	public function etatopopidomibai23Action()  {
	    /* page administration/listopexp - listopexp */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	    ini_set('memory_limit','9999999999999999991024M');
		
	    $t_traite = new Application_Model_DbTable_EuTraite();
		
	    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
		$select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
		$select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	    $select->where('eu_tpagcp.ntf = ?',23);
		$select->where('eu_traite.bon_type like ?',"BAi");
		$select->order('eu_traite.traite_date_fin desc');
		$entries = $t_traite->fetchAll($select);
        $this->view->entries = $entries;
		$this->view->tabletri = 1;
		
	}
	
	
	public function etatopopidomibaimt23Action()  {
	   /* page administration/etatopopidomibaimt23 - etatopopidomibaimt23 */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
	   ini_set('memory_limit','9999999999999999991024M');
	   
	   $db = Zend_Db_Table::getDefaultAdapter();
		
	   $requete = " select sum(eu_traite.traite_montant) as opi_montant  from eu_traite,eu_tpagcp 
		            where eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp 
					and eu_tpagcp.ntf = 23
		            and eu_tpagcp.mode_reglement like 'OPI'
					and eu_traite.bon_type like 'BAi'
				  ";
					
		$db->setFetchMode(Zend_Db::FETCH_OBJ);
        $cr = $db->query($requete);
        $result = $cr->fetchAll();
        foreach($result as $row) {
          $opi_montant = $row->opi_montant;
        }
	    $this->view->opi_montant = $opi_montant;
		
	}
	
	



       public function etatopreglAction()  {  




       }
	
	
	
	public  function etatqbanAction() {
	    /* page administration/etatqbanbc -  etatqbanbc */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
           if ($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
		   ini_set('memory_limit', '1024M');
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    $date_debut = $request->getParam("date_debut");
		    $date_fin   = $request->getParam("date_fin");

            $t_bon_neutre = new Application_Model_DbTable_EuBonNeutre();
		    $select = $t_bon_neutre->select();

            if(!empty($date_debut) && !empty($date_fin)) {
		        $date_fin = new Zend_Date($date_fin);
		        $date_fin->addDay(1);
		        $select->where('(bon_neutre_date >= ?',$date_debut)->where('bon_neutre_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			    $select->where('bon_neutre_date >= ?',$date_debut);
		    } elseif(!empty($date_fin)) {
		        $date_fin = new Zend_Date($date_fin);
		        $date_fin->addDay(1);
			    $select->where('bon_neutre_date <= ?',$date_fin->toString('yyyy-MM-dd'));
		    }
				
		    $select->order('bon_neutre_date desc');
            $entries = $t_bon_neutre->fetchAll($select);
            $this->view->entries = $entries;
            $this->view->tabletri = 1;
	
	    }
	}
	
	
	
	
	
	public  function etatqbanrAction() {
	    /* page administration/etatqbanbc -  etatqbanbc */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
           if ($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		   
		ini_set('memory_limit', '1024M');
		$request = $this->getRequest();
		if($request->isPost())  {
	      $date_debut = $request->getParam("date_debut");
		  $date_fin   = $request->getParam("date_fin");

          $t_bon_neutre = new Application_Model_DbTable_EuBonNeutre();
		  $select = $t_bon_neutre->select();

          if (!empty($date_debut) && !empty($date_fin)) {
		    $date_fin = new Zend_Date($date_fin);
		    $date_fin->addDay(1);
		    $select->where('(bon_neutre_date >= ?',$date_debut)->where('bon_neutre_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		  } elseif(!empty($date_debut)) {
			$select->where('bon_neutre_date >= ?',$date_debut);
		  } elseif(!empty($date_fin)) {
		    $date_fin = new Zend_Date($date_fin);
		    $date_fin->addDay(1);
			$select->where('bon_neutre_date <= ?',$date_fin->toString('yyyy-MM-dd'));
		  }
			
		  $select->where('bon_neutre_montant_solde > ?',0);	
		  $select->order('bon_neutre_date desc');
          $entries = $t_bon_neutre->fetchAll($select);
          $this->view->entries = $entries;
          $this->view->tabletri = 1;			
	    }
	
	}
	
	
	public function etatqvgcpAction()  {
	    /* page administration/etatqvgcp -  etatqvgcp */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login))         {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "")  {$this->_redirect('/administration/confirmation');}
		   
			$t_tegc = new Application_Model_DbTable_EuTegc();
			$selection = $t_tegc->select();
			$selection->where('nom_tegc is not null');
            $tes = $t_tegc->fetchAll($selection);
		    $this->view->tes = $tes;
		   
		    $request = $this->getRequest();
		    if($request->isPost())  {
			    //$date_debut = $request->getParam("date_debut");
		        //$date_fin = $request->getParam("date_fin");
				
				$date_op = $request->getParam("date_op");
				
				$db_gcp = new Application_Model_DbTable_EuGcp();
		        $select_gcp = $db_gcp->select();
                $select_gcp->from($db_gcp,array('SUM(mont_gcp) as somme_gcp'));
				if(!empty($date_op)) {
		          $date_v = new Zend_Date($date_op);
		          $date_v->addDay(1);
			      $select_gcp->where('eu_gcp.date_conso <= ?',$date_v->toString('yyyy-MM-dd'));
		        }
				
                $result_gcp = $db_gcp->fetchAll($select_gcp);
		        $row_gcp = $result_gcp->current();
		        $gcp = $row_gcp['somme_gcp'];
				
				$db_tpagcp = new Application_Model_DbTable_EuTpagcp();
				$select_tpagcp = $db_tpagcp->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
				$select_tpagcp->setIntegrityCheck(false);
                $select_tpagcp->join('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
		        $select_tpagcp->where('eu_traite.traite_escompte_nature = ?',0);
                $select_tpagcp->where('eu_tpagcp.mode_reglement like ?',"OPI");
                $select_tpagcp->where('eu_traite.traite_statut is null');
                $select_tpagcp->order('eu_traite.traite_date_fin desc');
				
                if(!empty($date_op)) {
                  $date_traite = new Zend_Date($date_op);
                  //$date_op->addDay(1);
                  $select_tpagcp->where('eu_traite.traite_date_fin <= ?',$date_traite->toString('yyyy-MM-dd'));
                }
				
				$reglement = 0;
				$result_tpagcp = $db_tpagcp->fetchAll($select_tpagcp);
				if(count($result_tpagcp) >= 1)  {
		             for($i = 0; $i < count($result_tpagcp); $i++) {
                        $value = $result_tpagcp[$i];
			            $reglement = $value->mont_tranche + $reglement; 
		             }
		        }
				
				$solde = $gcp - $reglement;
				
				$this->view->gcp = $gcp;
				$this->view->reglement = $reglement;
				$this->view->solde = $solde;
				
				
				//$code_tegc = $request->getParam("code_tegc");
                $t_gcp = new Application_Model_DbTable_EuGcp();
				$t_traite = new Application_Model_DbTable_EuTraite();
				
		        //$select = $t_gcp->select();
				$select = $t_gcp->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
				$select->join('eu_tegc', 'eu_tegc.code_tegc = eu_gcp.code_tegc', array('nom_tegc'));
				
				/*
				if(!empty($date_op) && !empty($code_tegc)) {
				  $date_gcp = new Zend_Date($date_op);
		          $date_gcp->addDay(1);
			      $select->where('eu_gcp.date_conso <= ?',$date_gcp->toString('yyyy-MM-dd'));
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
				}*/
				
				if(!empty($date_op)) {
		          $date_gcp = new Zend_Date($date_op);
		          $date_gcp->addDay(1);
			      $select->where('eu_gcp.date_conso <= ?',$date_gcp->toString('yyyy-MM-dd'));
		        } 
				
				/*elseif(!empty($code_tegc)) {
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);  
				}*/
			  
			    $select->order('eu_gcp.date_conso desc');
                $entries = $t_gcp->fetchAll($select);
                $this->view->entries = $entries;
				
				$select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
		        
                if(!empty($date_op)) {
                   $date_traite = new Zend_Date($date_op);
                   //$date_op->addDay(1);
                   $select->where('eu_traite.traite_date_fin <= ?',$date_traite->toString('yyyy-MM-dd'));
                }
				
                $select->where('eu_traite.traite_escompte_nature = ?',0);
                $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
                $select->where('eu_traite.traite_statut is null');
                $select->order('eu_traite.traite_date_fin desc');
                $reglements = $t_traite->fetchAll($select);
				$this->view->reglements = $reglements;
				
                $this->view->tabletri = 1;
			}
	
	}
	
	
	
	public function etatqvgcpoldAction()  {
	    /* page administration/etatqvgcp -  etatqvgcp */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		    
			ini_set('memory_limit','1024M');
			
			$t_tegc = new Application_Model_DbTable_EuTegc();
			$selection = $t_tegc->select();
			$selection->where('nom_tegc is not null');
            $tes = $t_tegc->fetchAll($selection);
		    $this->view->tes = $tes;
		   
		    $request = $this->getRequest();
		    if($request->isPost())  {
			    $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
				$code_tegc = $request->getParam("code_tegc");
                $t_gcp = new Application_Model_DbTable_EuGcp();
		        //$select = $t_gcp->select();
				$select = $t_gcp->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
				$select->join('eu_tegc', 'eu_tegc.code_tegc = eu_gcp.code_tegc', array('nom_tegc'));
              
			    if(!empty($date_debut) && !empty($date_fin) && !empty($code_tegc)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_gcp.date_conso >= ?',$date_debut)
				         ->where('eu_gcp.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));
                  $select->where('eu_gcp.code_tegc like ?',$code_tegc);				  
		        } else if(!empty($date_debut) && !empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_gcp.date_conso >= ?',$date_debut)
				         ->where('eu_gcp.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));			  
		        } 
				
				elseif(!empty($date_debut)  && !empty($code_tegc)) {
                  $select->where('eu_gcp.date_conso >= ?',$date_debut);
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
                } elseif(!empty($date_fin)  && !empty($code_tegc)) {
                  $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_gcp.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
                }				
				elseif(!empty($date_debut)) {
			      $select->where('eu_gcp.date_conso >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_gcp.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } elseif(!empty($code_tegc)) {
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
				}
			  
			    $select->order('eu_gcp.date_conso desc');
                $entries = $t_gcp->fetchAll($select);
                $this->view->entries = $entries;
                $this->view->tabletri = 1;
			}
	
	}
	
	
	public function etatqvgcscAction() {
	    /* page administration/etatqbanbc -  etatqbanbc */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		   
		    ini_set('memory_limit', '1024M');
		    $t_tegc = new Application_Model_DbTable_EuTegc();
			$selection = $t_tegc->select();
			$selection->where('nom_tegc is not null');
            $tes = $t_tegc->fetchAll($selection);
		    $this->view->tes = $tes;
		   
		   $request = $this->getRequest();
		    if($request->isPost())  {
			    $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
                $t_gcsc = new Application_Model_DbTable_EuGcsc();
				$code_tegc = $request->getParam("code_tegc");
		        //$select = $t_gcp->select();
				$select = $t_gcsc->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
				$select->join('eu_tegc', 'eu_tegc.code_tegc = eu_gcsc.code_tegc', array('nom_tegc'));
				$select->join('eu_detail_gcsc', 'eu_detail_gcsc.id_gcsc = eu_gcsc.id_gcsc', array('*'));
              
			    if(!empty($date_debut) && !empty($date_fin) && !empty($code_tegc)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_detail_gcsc.date_conso >= ?',$date_debut)->where('eu_detail_gcsc.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));
                  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
				  
		        } if(!empty($date_debut) && !empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_detail_gcsc.date_conso >= ?',$date_debut)
				         ->where('eu_detail_gcsc.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));
		        } 
				elseif(!empty($date_debut) && !empty($code_tegc)) {
                  $select->where('eu_detail_gcsc.date_conso >= ?',$date_debut);
				  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
				  
                } elseif(!empty($date_fin) && !empty($code_tegc)) {
                  $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_detail_gcsc.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
				  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
                }				
				elseif(!empty($date_debut)) {
			      $select->where('eu_detail_gcsc.date_conso >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_detail_gcsc.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } elseif(!empty($code_tegc)) {
				  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
				}
			    $select->order('eu_detail_gcsc.date_conso desc');
                $entries = $t_gcsc->fetchAll($select);
                $this->view->entries = $entries;
                $this->view->tabletri = 1;
			}
	    
	      
	}
	
	
	public function etatqopibanAction() {
	    /* page administration/etatqopiban -  etatqopiban */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		    ini_set('memory_limit', '1024M');
		    $t_tegc = new Application_Model_DbTable_EuTegc();
			$selection = $t_tegc->select();
			$selection->where('nom_tegc is not null');
			$selection->order('nom_tegc asc');
            $tes = $t_tegc->fetchAll($selection);
		    $this->view->tes = $tes;
			
			$request = $this->getRequest();
		    if($request->isPost())  {
	            $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
				$code_tegc = $request->getParam("code_tegc");
                $t_traite = new Application_Model_DbTable_EuTraite();
				
				$date_id = new Zend_Date(Zend_Date::ISO_8601);

                $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
		        $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
		        
			    if(!empty($date_debut) && !empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		        } elseif(!empty($date_debut)) {
			      $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } 
			  
			    $select->where('eu_traite.traite_escompte_nature = ?',0);
				$select->where('eu_traite.traite_disponible = ?',1);
				$select->where('eu_traite.traite_date_fin <= ?',$date_id->toString('yyyy-MM-dd'));
				$select->where('eu_traite.traite_statut like ?',"BAn");
				$select->where('eu_tpagcp.mode_reglement like ?',"OPI");
			    $select->order('eu_traite.traite_date_fin asc');
                $entries = $t_traite->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->code_tegc = $code_tegc;
                $this->view->tabletri = 1;				
	        }
	}
	
	
	
	
	
	
	
	public  function etatqopibcAction() {
	
	    /* page administration/etatqopibc -  etatqopibc */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		   ini_set('memory_limit', '1024M');
		    $t_tegc = new Application_Model_DbTable_EuTegc();
			$selection = $t_tegc->select();
			$selection->where('nom_tegc is not null');
			$selection->order('nom_tegc asc');
            $tes = $t_tegc->fetchAll($selection);
		    $this->view->tes = $tes;
			
			$request = $this->getRequest();
		    if($request->isPost())  {
			    $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
				$code_tegc = $request->getParam("code_tegc");
                $t_traite = new Application_Model_DbTable_EuTraite();

                $date_id = new Zend_Date(Zend_Date::ISO_8601);				

                $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
		        $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
		        
			    if(!empty($date_debut) && !empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
				         ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		        } elseif(!empty($date_debut)) {
			      $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } 
			  
			    $select->where('eu_traite.traite_escompte_nature = ?',1);
				$select->where('eu_traite.traite_disponible = ?',0);
				$select->where('eu_traite.traite_date_fin > ?',$date_id->toString('yyyy-MM-dd'));
				$select->where('eu_traite.traite_statut like ?',"BC");
				$select->where('eu_tpagcp.mode_reglement like ?',"OPI");
			    $select->order('eu_traite.traite_date_fin asc');
                $entries = $t_traite->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->code_tegc = $code_tegc;
                $this->view->tabletri = 1; 			   
			}
			
	}
	
	
	public function addmouvementAction() {
	    /* page administration/addmouvement -  addmouvement */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
		   
		    $t_banque = new Application_Model_DbTable_EuBanque();
		    $selection = $t_banque->select();
            $banques = $t_banque->fetchAll($selection);
		    $this->view->banques = $banques;
		   
		    $request = $this->getRequest();
		    if($request->isPost())  {
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {
				    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
					
		            $code_banque = $request->getParam("code_banque");
			        $date_emission = $request->getParam("date_emission");
			        $type_mouvement = $request->getParam("type_mouvement");
			        $montant_mouvement = $request->getParam("montant_mouvement");
					$type_compte = $request->getParam("type_compte");
					
					$mb   = new Application_Model_EuMouvementBancaire();
		            $m_mb = new Application_Model_EuMouvementBancaireMapper();
					
					$id_mouvement_bancaire = $m_mb->findConuter() + 1;
					$mb->setId_mouvement_bancaire($id_mouvement_bancaire);
					$mb->setType_mouvement($type_mouvement);
					$mb->setMontant_mouvement($montant_mouvement);
					$mb->setDate_emission($date_emission);
					$mb->setCode_banque($code_banque);
					$mb->setType_compte($type_compte);
					$mb->setDate_mouvement($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
					$m_mb->save($mb);
					
					$db->commit();
	                $sessionutilisateur->error = "Operation  bien effectuee ...";
	                $this->_redirect('/administration/listmb');
					
				} catch (Exception $exc) {				   
	               $db->rollback();
                   $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                   return;
                }	
		   
		    }
	}
	
	public  function listmbAction()   {
	    /* page administration/listmb -  listmb */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
        if ($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
		
		$t_mb = new Application_Model_DbTable_EuMouvementBancaire();   
		$select = $t_mb->select();    
		$select->order('id_mouvement_bancaire desc');
		$entries = $t_mb->fetchAll($select);
		$this->view->entries = $entries;
		$this->view->tabletri = 1;
	}
	
	
	public  function addbalanceAction() {
	    /* page administration/addbalance - addbalance */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))       { $this->_redirect('/administration/login');}
        if ($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
		
		$t_banque = new Application_Model_DbTable_EuBanque();
	    $select = $t_banque->select();	
		$select->order('libelle_banque asc');
        $banques = $t_banque->fetchAll($select);
		$this->view->banques = $banques;
		
		$request = $this->getRequest();
		if($request->isPost()) {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
                $balance = new Application_Model_EuBalance();
	            $m_balance  = new Application_Model_EuBalanceMapper();
				
				$debitveille  = 0;
				$creditveille = 0;
				$entrees1     = 0;
				$entrees2     = 0;
				$sorties1     = 0;
				$sorties2     = 0;
				$sorties3     = 0;
				$debitlivre   = 0;
				$creditlivre  = 0;
				$dat          = 0;
				$decouvert    = 0;
				$disposd      = 0;
				$dispoad      = 0;
				
	            $date_id = new Zend_Date(Zend_Date::ISO_8601);
			    $date_balance = $request->getParam("date_balance");
				$code_banque = $request->getParam("code_banque");
				$type_compte = $request->getParam("type_compte");
			    $date_balance = new Zend_Date($date_balance);
				$date_balance_effective = $request->getParam("date_balance");
				$date_balance_old = $request->getParam("date_balance");
				$date_balance_effective = new Zend_Date($date_balance_effective);
				$date_balance_old = new Zend_Date($date_balance_old);
		        $date_balance->addDay(-1);
				$date_balance_old->addDay(-2);
				
				$findrowsbanque = $m_balance->findByBanque($code_banque,$type_compte);
				
				if($findrowsbanque == NULL) {
				    $eubaldv = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubaldv->select();
				    $select->from($eubaldv,array('SUM(montant_mouvement) as somme_debit'));
				    $select->where("code_banque like ? ",$code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'DV');
					$rowseubaldv = $eubaldv->fetchRow($select);
					
					if($rowseubaldv->somme_debit != NULL) {
				       $debitveille = $rowseubaldv->somme_debit;
				    }
				
				    $eubalcv = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubalcv->select();
				    $select->from($eubalcv,array('SUM(montant_mouvement) as somme_credit'));
				    $select->where("code_banque like ? ",$code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'CV');
					$rowseubalcv = $eubalcv->fetchRow($select);
				
				    if($rowseubalcv->somme_credit != NULL) {
				      $creditveille = $rowseubalcv->somme_credit;
				    }
					
					$euband = new Application_Model_DbTable_EuBonNeutreDetail();
				    $select = $euband->select();
				    $select->from($euband,array('SUM(bon_neutre_detail_montant) as somme_entrees'));
				    $select->where("bon_neutre_detail_banque like ? ", $code_banque);
					$select->where('(bon_neutre_detail_date >= ?',$date_balance->toString('yyyy-MM-dd'))->where('bon_neutre_detail_date <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseuband = $euband->fetchRow($select);
				
				    if($rowseuband->somme_entrees != NULL) {
				      $entrees1 = $rowseuband->somme_entrees;
				    }
					
					$eubaltr = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubaltr->select();
				    $select->from($eubaltr,array('SUM(montant_mouvement) as somme_tr'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'TR');
					$select->where('(date_emission >= ?',$date_balance->toString('yyyy-MM-dd'))->where('date_emission <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseubaltr = $eubaltr->fetchRow($select);
					
					if($rowseubaltr->somme_tr != NULL) {
				       $entrees2 = $rowseubaltr->somme_tr;
				    }
					
					$eubalch = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubalch->select();
				    $select->from($eubalch,array('SUM(montant_mouvement) as somme_cheque'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'CHEQUE');
					$select->where('(date_emission >= ?',$date_balance->toString('yyyy-MM-dd'))->where('date_emission <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseubalch = $eubalch->fetchRow($select);
					
					if($rowseubalch->somme_cheque != NULL) {
				      $sorties1 = $rowseubalch->somme_cheque;
				    }
					
					$t_traite = new Application_Model_DbTable_EuTraite();
				    $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
				    $select->setIntegrityCheck(false);
				    $select->join('eu_tpagcp','eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp',array('SUM(eu_tpagcp.mont_tranche) as somme_sorties'));
				    $select->where("eu_traite.traite_code_banque like ? ",$code_banque);
					$select->where('(eu_traite.traite_date_fin >= ?',$date_balance->toString('yyyy-MM-dd'))->where('eu_traite.traite_date_fin <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
					$rowseutraite = $t_traite->fetchRow($select);
					
					if($rowseutraite->somme_sorties != NULL) {
				       $sorties2 = $rowseutraite->somme_sorties;
				    }
					
					$eubalte = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubalte->select();
				    $select->from($eubalte,array('SUM(montant_mouvement) as somme_te'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'TE');
				    $select->where('(date_emission >= ?',$date_balance->toString('yyyy-MM-dd'))->where('date_emission <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseubalte = $eubalte->fetchRow($select);
					
					if($rowseubalte->somme_te != NULL) {
				       $sorties3 = $rowseubalte->somme_te;
				    }
					
					if($type_compte == "DAT") {
					$eubaldat = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubaldat->select();
				    $select->from($eubaldat,array('SUM(montant_mouvement) as somme_dat'));
				    $select->where("code_banque like ? ", $code_banque);
				    $select->where("type_mouvement like ? ",'DAT');
					$select->where("type_compte like ? ", "DAT");
				    $rowseubaldat = $eubaldat->fetchRow($select);
					
					if($rowseubaldat->somme_dat != NULL) {
				       $dat = $rowseubaldat->somme_dat;
				    }
					
					
					$eubald = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubald->select();
				    $select->from($eubald,array('SUM(montant_mouvement) as somme_decouvert'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ", "DAT");
				    $select->where("type_mouvement like ? ",'DECOUVERT');
				    $rowseubald = $eubald->fetchRow($select);
					
					if($rowseubald->somme_decouvert != NULL) {
				      $decouvert = $rowseubald->somme_decouvert;
				    }
					
					}
					
					if($type_compte == "COURANT") {
					   
					    $disposd = $entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille;
					    if($disposd > 0) {
				            $debitlivre  = $disposd;
				        } else {
				            $creditlivre = abs($disposd);
				        }
					} elseif($type_compte == "DAT") {
                        if(($entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille) > 0) {
						    $debitlivre = $entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille;
							$dispoad = $decouvert + $debitlivre;
						} else {
						    $creditlivre = abs($entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille);
							$dispoad = $decouvert - $creditlivre;
						}
                    }
					
					$id_balance = $m_balance->findConuter() + 1;
					
					$balance->setId_balance($id_balance);
					$balance->setSolde_debiteur1($debitveille);
					$balance->setSolde_crediteur1($creditveille);
					$balance->setMontant_versement($entrees1);
					$balance->setMontant_transfertrecu($entrees2);
					$balance->setMontant_cheque($sorties1);
					$balance->setMontant_opi($sorties2);
					$balance->setMontant_transfertemis($sorties3);
					$balance->setSolde_debiteur2($debitlivre);
					$balance->setSolde_crediteur2($creditlivre);
					$balance->setMontant_dat($dat);
					$balance->setMontant_decouvert($decouvert);
					$balance->setSolde_disponible1($dispoad);
					$balance->setSolde_disponible2($disposd);
					$balance->setCode_banque($code_banque);
					$balance->setType_compte($type_compte);
					$balance->setDate_balance($date_balance->toString('yyyy-MM-dd'));
					$balance->setDate_balance_effective($date_balance_effective->toString('yyyy-MM-dd'));
					$balance->setDate_creation($date_id->toString('yyyy-MM-dd'));
					$m_balance->save($balance);
					
					$db->commit();
			        $sessionutilisateur->error = "Operation bien effectuee ...";
				    $this->_redirect('/administration/addbalance');	
					
				} else {
				
				    $findrowbalanceold =  $m_balance->findBalanceByDate($date_balance_old,$code_banque,$type_compte);
					if($findrowbalanceold == NULL) {
					   $db->rollback();
					   $this->view->error = "Vous devez établir la balance de la periode du  ".$date_balance_old->toString('dd-MM-yyyy'); 
                       return;
					}
					
					$findrowbalance =  $m_balance->findBalanceByDate($date_balance,$code_banque,$type_compte);
					if($findrowbalance != NULL) {
					   $db->rollback();
					   $this->view->error = "La balance de la periode du ".$date_balance->toString('dd-MM-yyyy')." est déjà établie ..."; 
                       return;
					}
					
					
					$debitveille  = $findrowbalanceold->solde_debiteur2;
					$creditveille = $findrowbalanceold->solde_crediteur2;
					
					$euband = new Application_Model_DbTable_EuBonNeutreDetail();
				    $select = $euband->select();
				    $select->from($euband,array('SUM(bon_neutre_detail_montant) as somme_entrees'));
				    $select->where("bon_neutre_detail_banque like ? ", $code_banque);
					$select->where('(bon_neutre_detail_date >= ?',$date_balance->toString('yyyy-MM-dd'))->where('bon_neutre_detail_date <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseuband = $euband->fetchRow($select);
				
				    if($rowseuband->somme_entrees != NULL) {
				      $entrees1 = $rowseuband->somme_entrees;
				    }
					
					$eubaltr = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubaltr->select();
				    $select->from($eubaltr,array('SUM(montant_mouvement) as somme_tr'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'TR');
					$select->where('(date_emission >= ?',$date_balance->toString('yyyy-MM-dd'))->where('date_emission <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseubaltr = $eubaltr->fetchRow($select);
					
					if($rowseubaltr->somme_tr != NULL) {
				       $entrees2 = $rowseubaltr->somme_tr;
				    }
					
					$eubalch = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubalch->select();
				    $select->from($eubalch,array('SUM(montant_mouvement) as somme_cheque'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'CHEQUE');
					$select->where('(date_emission >= ?',$date_balance->toString('yyyy-MM-dd'))->where('date_emission <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseubalch = $eubalch->fetchRow($select);
					
					if($rowseubalch->somme_cheque != NULL) {
				      $sorties1 = $rowseubalch->somme_cheque;
				    }
					
					$t_traite = new Application_Model_DbTable_EuTraite();
				    $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
				    $select->setIntegrityCheck(false);
				    $select->join('eu_tpagcp','eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp',array('SUM(eu_tpagcp.mont_tranche) as somme_sorties'));
				    $select->where("eu_traite.traite_code_banque like ? ",$code_banque);
					$select->where('(eu_traite.traite_date_fin >= ?',$date_balance->toString('yyyy-MM-dd'))->where('eu_traite.traite_date_fin <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
					$rowseutraite = $t_traite->fetchRow($select);
					
					if($rowseutraite->somme_sorties != NULL) {
				       $sorties2 = $rowseutraite->somme_sorties;
				    }
					
					$eubalte = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubalte->select();
				    $select->from($eubalte,array('SUM(montant_mouvement) as somme_te'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ",$type_compte);
				    $select->where("type_mouvement like ? ",'TE');
				    $select->where('(date_emission >= ?',$date_balance->toString('yyyy-MM-dd'))->where('date_emission <= ?)',$date_balance->toString('yyyy-MM-dd'));
				    $rowseubalte = $eubalte->fetchRow($select);
					
					if($rowseubalte->somme_te != NULL) {
				        $sorties3 = $rowseubalte->somme_te;
				    }
					
					if($type_compte == "DAT") {
					$eubaldat = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubaldat->select();
				    $select->from($eubaldat,array('SUM(montant_mouvement) as somme_dat'));
				    $select->where("code_banque like ? ", $code_banque);
				    $select->where("type_mouvement like ? ",'DAT');
					$select->where("type_compte like ? ", "DAT");
				    $rowseubaldat = $eubaldat->fetchRow($select);
					
					if($rowseubaldat->somme_dat != NULL) {
				      $dat = $rowseubaldat->somme_dat;
				    }
					
					$eubald = new Application_Model_DbTable_EuMouvementBancaire();
				    $select = $eubald->select();
				    $select->from($eubald,array('SUM(montant_mouvement) as somme_decouvert'));
				    $select->where("code_banque like ? ", $code_banque);
					$select->where("type_compte like ? ", "DAT");
				    $select->where("type_mouvement like ? ",'DECOUVERT');
				    $rowseubald = $eubald->fetchRow($select);
					
					if($rowseubald->somme_decouvert != NULL) {
				      $decouvert = $rowseubald->somme_decouvert;
				    }
					
					}
					
					if($type_compte == "COURANT") {
					    $disposd = $entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille;
					    if($disposd > 0) {
				            $debitlivre  = $disposd;
				        } else {
				            $creditlivre = abs($disposd);
				        }
					} elseif($type_compte == "DAT") {
                        if(($entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille) > 0) {
						    $debitlivre = $entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille;
							$dispoad = $decouvert + $debitlivre;
						} else {
						    $creditlivre = abs($entrees1 + $entrees2 + $debitveille  - $sorties1 - $sorties2 - $sorties3 - $creditveille);
							$dispoad = $decouvert - $creditlivre;
						}
                    }
					
					$id_balance = $m_balance->findConuter() + 1;
					
					$balance->setId_balance($id_balance);
					$balance->setSolde_debiteur1($debitveille);
					$balance->setSolde_crediteur1($creditveille);
					$balance->setMontant_versement($entrees1);
					$balance->setMontant_transfertrecu($entrees2);
					$balance->setMontant_cheque($sorties1);
					$balance->setMontant_opi($sorties2);
					$balance->setMontant_transfertemis($sorties3);
					$balance->setSolde_debiteur2($debitlivre);
					$balance->setSolde_crediteur2($creditlivre);
					$balance->setMontant_dat($dat);
					$balance->setMontant_decouvert($decouvert);
					$balance->setSolde_disponible1($dispoad);
					$balance->setSolde_disponible2($disposd);
					$balance->setCode_banque($code_banque);
					$balance->setType_compte($type_compte);
					$balance->setDate_balance($date_balance->toString('yyyy-MM-dd'));
					$balance->setDate_balance_effective($date_balance_effective->toString('yyyy-MM-dd'));
					$balance->setDate_creation($date_id->toString('yyyy-MM-dd'));
					$m_balance->save($balance);
					
					$db->commit();
					$sessionutilisateur->error = "Operation bien effectuee ...";
				    $this->_redirect('/administration/addbalance');	
				
				}
				
			} catch (Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
	
	    }
	}
	
	
	
	public function etatsolvableAction()   {
	    /* page administration/etatsolvable -  etatsolvable */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))         {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "")  {$this->_redirect('/administration/confirmation');}
		    ini_set('memory_limit', '1024M');
			
		    $date_id = new Zend_Date(Zend_Date::ISO_8601);
		    $solde_gcnrb = 0;
		    $solde_gcnrr = 0;
			$entrees1    = 0;
			$entrees2    = 0;
			$entrees3    = 0;
		    $solde_fgfn  = 0;
			
			$sorties1    = 0;
			$sorties2    = 0;
			$sorties3    = 0;
			$sorties4    = 0;
		    $sorties     = 0;
			
		    $deficit     = 0;
		    $excedent    = 0;
		   
		    $t_gcp = new Application_Model_DbTable_EuGcp();
			$select = $t_gcp->select();
			$select->from($t_gcp,array('SUM(mont_gcp) as somme_gcp'));
			$select->where("type_gcp is null");
			$rowsgcp = $t_gcp->fetchRow($select);
				
			if($rowsgcp->somme_gcp != NULL) {
			  $solde_gcnrb = $rowsgcp->somme_gcp;
			}
			
			$this->view->solde_gcnrb = $solde_gcnrb;
			
			$t_gcsc = new Application_Model_DbTable_EuGcsc();
			$selection = $t_gcsc->select();
			$selection->from($t_gcsc,array('SUM(credit) as somme_credit'));
			$rowssommecredit = $t_gcsc->fetchRow($selection);
			
			if($rowssommecredit->somme_credit != NULL) {
			  $credit = $rowssommecredit->somme_credit;
			}
			$this->view->subvention = $credit;
			
			
			$t_gcsc = new Application_Model_DbTable_EuGcsc();
			$select1 = $t_gcsc->select();
			$select1->from($t_gcsc,array('SUM(debit) as somme_debit'));
			$rowssubvention = $t_gcsc->fetchRow($select1);
			
			if($rowssubvention->somme_debit != NULL) {
			  $debit = $rowssubvention->somme_debit;
			}
			$this->view->solde_gcnrr = $debit;
			
			
			
			$t_band = new Application_Model_DbTable_EuBonNeutreDetail();
			$select2 = $t_band->select();
			$select2->from($t_band,array('SUM(bon_neutre_detail_montant) as somme_entrees'));
			$select2->where("bon_neutre_detail_banque is not null");
			$rowsband = $t_band->fetchRow($select2);
			
			if($rowsband->somme_entrees != NULL) {
			  $entrees1 = $rowsband->somme_entrees;
			}
			
			$eubaltr = new Application_Model_DbTable_EuMouvementBancaire();
			$select3 = $eubaltr->select();
			$select3->from($eubaltr,array('SUM(montant_mouvement) as somme_tr'));
		    $select3->where("type_mouvement like ? ",'TR');
			$rowseubaltr = $eubaltr->fetchRow($select3);
			
			if($rowseubaltr->somme_tr != NULL) {
			   $entrees2 = $rowseubaltr->somme_tr;
			}
			
			$eubalcv = new Application_Model_DbTable_EuMouvementBancaire();
			$select4 = $eubalcv->select();
			$select4->from($eubalcv,array('SUM(montant_mouvement) as somme_credit'));
			$select4->where("type_mouvement like ? ",'CV');
			$rowseubalcv = $eubalcv->fetchRow($select4);
			
			if($rowseubalcv->somme_credit != NULL) {
			   $sorties2 = $rowseubalcv->somme_credit;
			}
			
			$solde_fgfn = $entrees1 + $entrees2 + $entrees3;
			
			$this->view->solde_fgfn = $solde_fgfn;
			
			$t_traite = new Application_Model_DbTable_EuTraite();
			$select5 = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
			$select5->setIntegrityCheck(false);
			$select5->join('eu_tpagcp','eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp',array('SUM(eu_tpagcp.mont_tranche) as somme_sorties'));
			$select5->where('eu_traite.traite_date_fin <= ?',$date_id->toString('yyyy-MM-dd'));
			$select5->where('eu_tpagcp.mode_reglement like ?',"OPI");
			//$select5->where('eu_traite.traite_statut is null');
			//$select5->where('eu_traite.traite_escompte_nature = ?',0);
			//$select5->where('eu_traite.traite_disponible = ?',1);
			$rowseutraite = $t_traite->fetchRow($select5);
			
			if($rowseutraite->somme_sorties != NULL) {
			   $sorties1 = $rowseutraite->somme_sorties;
			}
			
			$eubaldv = new Application_Model_DbTable_EuMouvementBancaire();
			$select = $eubaldv->select();
			$select->from($eubaldv,array('SUM(montant_mouvement) as somme_debit'));
			$select->where("type_mouvement like ? ",'DV');
			$rowseubaldv = $eubaldv->fetchRow($select);
			
			if($rowseubaldv->somme_debit != NULL) {
			   $entrees3 = $rowseubaldv->somme_debit;
			}
			
			$eubalch = new Application_Model_DbTable_EuMouvementBancaire();
			$select = $eubalch->select();
			$select->from($eubalch,array('SUM(montant_mouvement) as somme_cheque'));
			$select->where("type_mouvement like ? ",'CHEQUE');
			$rowseubalch = $eubalch->fetchRow($select);
			
			if($rowseubalch->somme_cheque != NULL) {
			  $sorties3 = $rowseubalch->somme_cheque;
			}
			
			$eubalte = new Application_Model_DbTable_EuMouvementBancaire();
			$select = $eubalte->select();
			$select->from($eubalte,array('SUM(montant_mouvement) as somme_te'));
			$select->where("type_mouvement like ? ",'TE');
			$rowseubalte = $eubalte->fetchRow($select);
			
			if($rowseubalte->somme_te != NULL) {
			  $sorties4 = $rowseubalte->somme_te;
			}
			
			$sorties = $sorties1 + $sorties2 + $sorties3 + $sorties4;
			
			$this->view->sorties = $sorties;
			
			if((($solde_fgfn + ($credit - $debit)) - ($solde_gcnrb + $sorties)) > 0 ) {
			  $excedent = ($solde_fgfn + ($credit - $debit)) - ($solde_gcnrb + $sorties); 
			} else {
			  $deficit  =  abs(($solde_fgfn + ($credit - $debit)) - ($solde_gcnrb + $sorties));
			}
			
	        $this->view->deficit = $deficit;
			$this->view->excedent = $excedent;
	
	}
	
	
	
	
	
	public function etatbalanceAction() {
	    /* page administration/etatbalance -  etatbalance */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
			ini_set('memory_limit', '1024M');
			$t_banque = new Application_Model_DbTable_EuBanque();
			$selection = $t_banque->select();
            $banques = $t_banque->fetchAll($selection);
		    $this->view->banques = $banques;
			
			$request = $this->getRequest();
		    if($request->isPost())  {
			    $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
			    $code_banque = $request->getParam("code_banque");
			   
			    $t_balance = new Application_Model_DbTable_EuBalance();
			    $select = $t_balance->select();
				if(!empty($date_debut) && !empty($date_fin)) {
				  $date_debut = new Zend_Date($date_debut);
				  $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(date_balance >= ?',$date_debut->toString('yyyy-MM-dd'))->where('date_balance <= ?)',$date_fin->toString('yyyy-MM-dd'));  
				}
				
			    if(!empty($code_banque)) {
			      $select->where('code_banque like ?',$code_banque);    
			    }
				
			    $select->order('id_balance desc');
                $entries = $t_banque->fetchAll($select);
                $this->view->entries = $entries;
                $this->view->tabletri = 1;
	        }	
	}
	
	
	
	
	
	public function etatqopiAction()  {
	    /* page administration/etatqopi -  etatqopi */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		    ini_set('memory_limit', '1024999999999M');
		    $t_tegc = new Application_Model_DbTable_EuTegc();
			$selection = $t_tegc->select();
			$selection->where('nom_tegc is not null');
			$selection->order('nom_tegc asc');
            $tes = $t_tegc->fetchAll($selection);
		    $this->view->tes = $tes;
			
			$t_banque = new Application_Model_DbTable_EuBanque();
			$select = $t_banque->select();
			$select->order('libelle_banque asc');
			$banques = $t_banque->fetchAll($select);
		    $this->view->banques = $banques;
			
		    $request = $this->getRequest();
		    if($request->isPost())  {
		        $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
				$code_banque = $request->getParam("code_banque");
				
                $t_traite = new Application_Model_DbTable_EuTraite();
				
			    $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
		        $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
				$select->where('eu_tpagcp.ntf = ?',12);
		        
			    if(!empty($date_debut) && !empty($date_fin) && !empty($code_banque)) {
				  //$date_debut = new Zend_Date($date_debut);
				  //$date_fin->addDay(1);
				  $date_fin = new Zend_Date($date_fin);
		          $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		          $select->where('eu_traite.mode_paiement like ?',$code_banque);
				
				} elseif(!empty($date_debut) && !empty($date_fin)) {
				  $date_fin = new Zend_Date($date_fin);
                  $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                
				} elseif(!empty($date_debut) && !empty($code_banque)) {
                  $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
				  $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
				} elseif(!empty($date_fin) && !empty($code_banque)) {
				  $date_fin = new Zend_Date($date_fin);
                  $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
				  $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
				} elseif(!empty($code_banque)) {
                  $select->where('eu_traite.mode_paiement like ?',$code_banque);
				}
				elseif(!empty($date_debut)) {
			      $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          //$date_fin->addDay(1);
				  $date_fin = new Zend_Date($date_fin);
			      $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } 
			 
                $select->where('eu_traite.traite_disponible = ?',1); 
			    $select->where('eu_traite.traite_escompte_nature = ?',0);
                $select->where('eu_traite.traite_imprimer <> ?',2);
			    $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
			    $select->where('eu_traite.traite_statut is null');
			    $select->order('eu_traite.traite_id asc');
                $entries = $t_traite->fetchAll($select);
                $this->view->entries = $entries;
			    $this->view->code_tegc = $code_tegc;
                $this->view->tabletri = 1;
		    }
	}
	
	
	public function etatqopitiersAction()  {
	    /* page administration/etatqopi -  etatqopi */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		    ini_set('memory_limit', '1024999999999999M');
		    $t_tegc = new Application_Model_DbTable_EuTegc();
			$selection = $t_tegc->select();
			$selection->where('nom_tegc is not null');
			$selection->order('nom_tegc asc');
            $tes = $t_tegc->fetchAll($selection);
		    $this->view->tes = $tes;
			
			$t_banque = new Application_Model_DbTable_EuBanque();
			$select = $t_banque->select();
			$select->order('libelle_banque asc');
			$banques = $t_banque->fetchAll($select);
		    $this->view->banques = $banques;
			
		    $request = $this->getRequest();
		    if($request->isPost())  {
		        $date_debut = $request->getParam("date_debut");
		        $date_fin   = $request->getParam("date_fin");
				$code_banque = $request->getParam("code_banque");
				
                $t_traite = new Application_Model_DbTable_EuTraite();
				
			    $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
		        $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
				$select->where('eu_tpagcp.ntf = ?',23);
		        
			    /*
				if(!empty($date_debut) && !empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          //$date_fin->addDay(1);
		          $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		        } elseif(!empty($date_debut)) {
			      $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          //$date_fin->addDay(1);
			      $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } 
				*/
				
				if(!empty($date_debut) && !empty($date_fin) && !empty($code_banque)) {
				  //$date_debut = new Zend_Date($date_debut);
				  //$date_fin->addDay(1);
				  $date_fin = new Zend_Date($date_fin);
		          $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		          $select->where('eu_traite.mode_paiement like ?',$code_banque);
				
				} elseif(!empty($date_debut) && !empty($date_fin)) {
				  $date_fin = new Zend_Date($date_fin);
                  $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                
				} elseif(!empty($date_debut) && !empty($code_banque)) {
                  $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
				  $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
				} elseif(!empty($date_fin) && !empty($code_banque)) {
				  $date_fin = new Zend_Date($date_fin);
                  $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
				  $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
				} elseif(!empty($code_banque)) {
                  $select->where('eu_traite.mode_paiement like ?',$code_banque);
				}
				elseif(!empty($date_debut)) {
			      $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          //$date_fin->addDay(1);
				  $date_fin = new Zend_Date($date_fin);
			      $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		        }
			  
                $select->where('eu_traite.traite_disponible = ?',1);
			    $select->where('eu_traite.traite_escompte_nature = ?',0);
                $select->where('eu_traite.traite_imprimer <> ?',2);
				$select->where('eu_tpagcp.mode_reglement like ?',"OPI");
				$select->where('eu_traite.traite_statut is null');
			    $select->order('eu_traite.traite_id asc');
                $entries = $t_traite->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->code_banque = $code_banque;
                $this->view->tabletri = 1;
		    }
	   }
	
	
	   public function etatqbanbcAction()    {
	    /* page administration/etatqbanbc -  etatqbanbc */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		    ini_set('memory_limit', '1024M');
		    $request = $this->getRequest();
		    if($request->isPost())  {
		        $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
                $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
		        $select = $t_bon_neutre_utilise->select();
		   
		        $select->where("bon_neutre_utilise_libelle like ? ", "Souscription au Bon d'Achat");
			
		        if(!empty($date_debut) && !empty($date_fin)) {
			        $date_fin = new Zend_Date($date_fin);
		            $date_fin->addDay(1);
		            $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		        } elseif(!empty($date_debut)) {
			        $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			    } elseif(!empty($date_fin)) {
			        $date_fin = new Zend_Date($date_fin);
		            $date_fin->addDay(1);
			        $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			    }
			    $select->order('bon_neutre_utilise_date desc');
                $entries = $t_bon_neutre_utilise->fetchAll($select);
                $this->view->entries = $entries;
                $this->view->tabletri = 1;
		    }
	
	}
	
	
	
	
	
	public function etatqbanbctiersAction()    {
	    /* page administration/etatqbanbc -  etatqbanbc */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		    ini_set('memory_limit', '1024M');
		    $request = $this->getRequest();
		    if($request->isPost())  {
		        $date_debut = $request->getParam("date_debut");
		        $date_fin = $request->getParam("date_fin");
                $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
		        $select = $t_bon_neutre_utilise->select();
		   
			    $select->where("bon_neutre_utilise_libelle like ? ", "BC");
			
		        if(!empty($date_debut) && !empty($date_fin)) {
			        $date_fin = new Zend_Date($date_fin);
		            $date_fin->addDay(1);
		            $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		        } elseif(!empty($date_debut)) {
			        $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			    } elseif(!empty($date_fin)) {
			        $date_fin = new Zend_Date($date_fin);
		            $date_fin->addDay(1);
			        $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			    }
			    $select->order('bon_neutre_utilise_date desc');
                $entries = $t_bon_neutre_utilise->fetchAll($select);
                $this->view->entries = $entries;
                $this->view->tabletri = 1;
		    }
	
	}
	
	
	
	
	
	
	
	
	public function etatqbankacmAction() {
	    /* page administration/etatqbankacm -  etatqbankacm */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if ($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		ini_set('memory_limit', '1024M');
		
		$request = $this->getRequest();
		
		if ($request->isPost ())  {
		   $date_debut = $request->getParam("date_debut");
		   $date_fin = $request->getParam("date_fin");

            $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
            //$select = $t_bon_neutre->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		   
		    $select = $t_bon_neutre_utilise->select();
		   
            //$select->setIntegrityCheck(false);
            //$select->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre.bon_neutre_id = d.bon_neutre_id');
            //$select->join(array('u' => 'eu_bon_neutre_utilise'),'eu_bon_neutre.bon_neutre_id = u.bon_neutre_id');
            
            $select->where('(bon_neutre_utilise_libelle like ?',"Activation PP");
            $select->orwhere('bon_neutre_utilise_libelle like ?',"Activation PM");
			$select->orwhere('bon_neutre_utilise_libelle like ?',"Re-activation PM");
            $select->orwhere('bon_neutre_utilise_libelle like ?)',"CMFH");
		   
		    if (!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			}
			$select->order('bon_neutre_utilise_date desc');
            $entries = $t_bon_neutre_utilise->fetchAll($select);
            $this->view->entries = $entries;
            $this->view->tabletri = 1;		   
		}
	
	}
	
	public function listdetailbcAction() {
	    /* page administration/etatqbankacm -  etatqbankacm */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if ($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		
		$id = (int) $this->_request->getParam('id');
		
		$ban = new Application_Model_EuBonNeutre();
	    $m_ban  = new Application_Model_EuBonNeutreMapper();
		$findban = $m_ban->find($id,$ban);
		
		$t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
		$select = $t_bon_neutre_detail->select();    
        $select->where('bon_neutre_id = ?',$id);
		$select->where('bon_neutre_appro_id is null');
		$select->order('bon_neutre_detail_date desc');
		$entries = $t_bon_neutre_detail->fetchAll($select);
		
		$t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
        $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		$selection->setIntegrityCheck(false);
		//$selection->from('eu_bon_neutre_appro_detail',array('*'));
        $selection->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
		$selection->where('d.bon_neutre_id = ?',$id);
		$approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
		$this->view->ban = $ban;
		$this->view->entries = $entries;
		$this->view->approlignes = $approlignes;
        $this->view->tabletri = 1;
	
	
	}
	
	
	
	
	public function listdetailbanAction() {
	    /* page administration/etatqbankacm -  etatqbankacm */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if ($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		$id = (int) $this->_request->getParam('id');
		
		$ban = new Application_Model_EuBonNeutre();
	    $m_ban  = new Application_Model_EuBonNeutreMapper();
		$findban = $m_ban->find($id,$ban);
		
		$t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
		$select = $t_bon_neutre_detail->select();    
        $select->where('bon_neutre_id = ?',$id);
		$select->where('bon_neutre_appro_id is null');
		$select->order('bon_neutre_detail_date desc');
		$entries = $t_bon_neutre_detail->fetchAll($select);
		
		$t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
        $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		$selection->setIntegrityCheck(false);
		//$selection->from('eu_bon_neutre_appro_detail',array('*'));
        $selection->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
		$selection->where('d.bon_neutre_id = ?',$id);
		$approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
		$this->view->ban = $ban;
		$this->view->entries = $entries;
		$this->view->approlignes = $approlignes;
	    $this->view->tabletri = 1;
	}
	
	
	
	
	
	public function listdetailkacmAction()  {
	    /* page administration/etatqbankacm -  etatqbankacm */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if ($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		$id = (int) $this->_request->getParam('id');
		
		$ban = new Application_Model_EuBonNeutre();
	    $m_ban  = new Application_Model_EuBonNeutreMapper();
		$findban = $m_ban->find($id,$ban);
		
		$t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
		$select = $t_bon_neutre_detail->select();    
        $select->where('bon_neutre_id = ?',$id);
		$select->where('bon_neutre_appro_id is null');
		$select->order('bon_neutre_detail_date desc');
		$entries = $t_bon_neutre_detail->fetchAll($select);
		
		$t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
        $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		$selection->setIntegrityCheck(false);
		//$selection->from('eu_bon_neutre_appro_detail',array('*'));
        $selection->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
		$selection->where('d.bon_neutre_id = ?',$id);
		$approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
		$this->view->ban = $ban;
		$this->view->entries = $entries;
		$this->view->approlignes = $approlignes;
        $this->view->tabletri = 1;
	
	}
	
	
	public function configteAction()    {
	    /* page administration/addconfigte - Ajout d'un te */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		$t_produit = new Application_Model_DbTable_EuTypeCredit();
	    $select = $t_produit->select();
		$select->where('activer = ?',1);
	    $select->order('lib_type_credit desc');
		//$select->where('code_type_credit IN  (?)',array("IMM","PFS","AP","AG"));
	    $select->from($t_produit);
	    $produits = $t_produit->fetchAll($select);
	    $this->view->produits = $produits;
		
		$t_filiere = new Application_Model_DbTable_EuFiliere();		
        $filieres = $t_filiere->fetchAll();		
        $this->view->divisions = $filieres;
				
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_zone = new Application_Model_DbTable_EuZone();
            
        $cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
		   
		$this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
		$this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
		
		$tegc   = new Application_Model_EuTegc();
		$m_tegc = new Application_Model_EuTegcMapper();
		 
		$prk   = new Application_Model_EuPrk();
		$m_prk = new Application_Model_EuPrkMapper();
		
		$typecredit = new Application_Model_EuTypeCredit();
        $m_typecredit = new Application_Model_EuTypeCreditMapper();
		
		$request = $this->getRequest();
		if ($request->isPost ())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
                $membremorale = new Application_Model_EuMembreMorale();
	            $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

			    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id; 

                $findmembre = $m_mapmorale->find($request->getParam("code_membre"),$membremorale);
			    if($findmembre == false) {
				   $db->rollback();
				   $this->view->error = "Le code membre de l'acteur est introuvable ...";
				   return;
			    }

                $te = new Application_Model_EuTegc();
		        $te_mapper = new Application_Model_EuTegcMapper();
                               
			    $prk = new Application_Model_EuPrk();
                $m_prk = new Application_Model_EuPrkMapper();

                $nom_tegc = $request->getParam("nom");
			    $id_filiere = $request->getParam("id_filiere");
			    $nom_produit = $request->getParam("nom_produit");
			    $mdv = 12;
			    $tranche = 1;
                $code_membre = $request->getParam("code_membre");
			    $code_zone = $request->getParam("code_zone");
			    $id_pays = $request->getParam("id_pays");
			    $id_region = $request->getParam("id_region");
			    $id_prefecture = $request->getParam("id_prefecture");
			    $id_canton = $request->getParam("id_canton");
				$type_tegcp = $request->getParam("type_fournisseur");
				$id_prks = $request->getParam("id_prk");
				$maxtab = sizeof($id_prks);
			   
			    $date_id = Zend_Date::now();
				
				$tegcp = new Application_Model_EuTegc();
		        $m_tegcp = new Application_Model_EuTegcMapper();
				
			    $code_te = $m_tegcp->getLastTegcByMembre($code_membre);
				   
			    if ($code_te == NULL) {
			       $code_te = 'TEGCP'.$id_filiere.$code_membre. '00001';         
			    } else {
			       $num_ordre = substr($code_te, -5);
                   $num_ordre++;
                   $code_te = 'TEGCP'.$id_filiere.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			    }
				   
			    $te->setCode_tegc($code_te);
			    $te->setId_filiere($id_filiere);
			    $te->setMdv($mdv);
			    $te->setTranche_payement($tranche);
			    $te->setCode_membre($code_membre);
			    $te->setMontant(0);
			    $te->setMontant_utilise(0);
			    $te->setSolde_tegc(0);
			    $te->setId_utilisateur($sessionutilisateur->id_utilisateur);
			    $te->setNom_tegc($nom_tegc);
			    $te->setNom_produit($nom_produit);
			    $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			    $te->setType_tegc($type_tegcp);
			   
			    if(isset($_POST['produit1']) && $_POST['produit1'] == 'ri') {
			      $te->setRecurrent_illimite(1);
			    } else {
				  $te->setRecurrent_illimite(0);
			    }
			   
			    if(isset($_POST['produit2']) && $_POST['produit2'] == 'rl') {
				  $te->setRecurrent_limite(1);
			    } else {
				  $te->setRecurrent_limite(0);
			    }
					  
			    if(isset($_POST['produit3']) && $_POST['produit3'] == 'nr') {
				  $te->setNonrecurrent(1);
			    } else {
                  $te->setNonrecurrent(0);
                }					  
						
                if(isset($_POST['periode1']) && ($_POST['periode1'] == '11.2')) {						
				  $te->setPeriode1(1);
			    } else { 
				  $te->setPeriode1(0);
			    }
					  
			    if(isset($_POST['periode2']) && ($_POST['periode2'] == '22.4')) {						
				  $te->setPeriode2(1);
			    } else { 
				  $te->setPeriode2(0);
			    }
				   
				if(isset($_POST['periode3']) && $_POST['periode3'] == '1') {						
				  $te->setPeriode3(1);
			    } else { 
				  $te->setPeriode3(0);
			    }
			   
			    if(isset($_POST['situation']) && $_POST['situation'] == '1') {						
				  $te->setFormel(1);
			    } else { 
				  $te->setFormel(0);
			    }
			   
			    if(isset($_POST['tva']) && $_POST['tva'] == '1') {						
				  $te->setRegime_tva(1);
			    } else { 
				  $te->setRegime_tva(0);
			    } 
					
			    $te->setSubvention(0);
				$te->setCode_zone($code_zone);
				$te->setId_pays($id_pays);
				$te->setId_region($id_region);
				$te->setId_prefecture($id_prefecture);
				$te->setId_canton($id_canton);
				$te->setSpecial(0);					  
                $te->setOrdinaire(0);
			   
			    $m_tegcp->save($te);
				
				for($x=0;$x<$maxtab;$x++) {
				   $codetypecredit = $id_prks[$x];
				   $findproduit = $m_typecredit->find($codetypecredit,$typecredit);
				   $findte = $m_tegcp->find($code_te,$te);
				   if($typecredit->type_produit == "PO") {					  
                      $te->setOrdinaire(1);
                      $m_tegcp->update($te);					  
				   }
				   if($typecredit->type_produit == "PS") {
				     $te->setSpecial(1);					  
                     $m_tegcp->update($te);					  
				   }
				   $findprk = $m_prk->findByCreditTegc($code_te,$codetypecredit,$prk);
				   if($findprk == false) {
				     $id_prk = $m_prk->findConuter() + 1;
                     $prk->setId_prk($id_prk);					   
					 $prk->setCode_tegc($code_te);
					 $prk->setValeur($typecredit->prk);
					 $prk->setCode_type_credit($codetypecredit);
					 $prk->setType_produit($typecredit->type_produit);
					 $m_prk->save($prk);
				   }
				}
                $db->commit();
	            $sessionutilisateur->errorlogin = "Operation de configuration bien effectuee ...";
	            $this->_redirect('/administration/listacteurinterim');
			} catch (Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
		
		} else  {
		
		    $id = $this->_request->getParam('id');
		    $demande   = new Application_Model_EuDemandeConfigte();
	        $m_demande = new Application_Model_EuDemandeConfigteMapper();
		    $membre   = new Application_Model_EuMembreMorale();
	        $m_membre = new Application_Model_EuMembreMoraleMapper();
		   
		    $m_demande->find($id,$demande);
		    $code_membre = $demande->code_membre_morale;
		    $m_membre->find($code_membre,$membre);
		   
		    $this->view->membre = $membre;
			
		    /*
			$tranche="";
		    $mdv="";
		    $config = $m_tegc->fetchByMembreConfig($code_membre);
			
		    if($config != NULL) {
		        foreach ($config as $value) {
			        $tranche = $value->tranche_payement;
			        $mdv = $value->mdv;
			    }
		    }
			
	        $this->view->config = $config;
		    $this->view->tranche = $tranche; 
		    $this->view->mdv = $mdv;
			*/
			
	    }
	
	}
	
	
	
	
	public function configteoldAction()    {
	    /* page administration/addacteurinterim - Ajout d'un acteur intérimaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}
		
		$t_prk = new Application_Model_DbTable_EuTypePrk();
        $typeprks = $t_prk->fetchAll();
        $this->view->typeprks = $typeprks;
		
		$t_filiere = new Application_Model_DbTable_EuFiliere();		
        $filieres = $t_filiere->fetchAll();		
        $this->view->divisions = $filieres;
		
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_zone = new Application_Model_DbTable_EuZone();
            
        $cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
		   
		$this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
		$this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
		
		$tegc   = new Application_Model_EuTegc();
		$m_tegc = new Application_Model_EuTegcMapper();
		 
		$prk   = new Application_Model_EuPrk();
		$m_prk = new Application_Model_EuPrkMapper();
		$request = $this->getRequest();
		
		if ($request->isPost ())  {
		   $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
               $membremorale = new Application_Model_EuMembreMorale();
	           $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

			   $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $date_idd = clone $date_id; 

               $findmembre = $m_mapmorale->find($request->getParam("code_membre"),$membremorale);
			   if($findmembre == false) {
				  $db->rollback();
				  $this->view->error = "Le code membre de l'acteur est introuvable ...";
				  return;
			   }

               $te = new Application_Model_EuTegc();
		       $te_mapper = new Application_Model_EuTegcMapper();
                               
			   $prk = new Application_Model_EuPrk();
               $m_prk = new Application_Model_EuPrkMapper();

			   
               $nom_tegc = $request->getParam("nom");
			   $id_filiere = $request->getParam("id_filiere");
			   $nom_produit = $request->getParam("nom_produit");
			   $mdv = $request->getParam("mdv");
			   $tranche = $request->getParam("tranche");
               $code_membre = $request->getParam("code_membre");
			   
			   
			   $code_zone = $request->getParam("code_zone");
			   $id_pays = $request->getParam("id_pays");
			   $id_region = $request->getParam("id_region");
			   $id_prefecture = $request->getParam("id_prefecture");
			   $id_canton = $request->getParam("id_canton");
			   
			   
			   //Contrôle sur le nombre de tranches
				$multiple = $mdv/$tranche;
				
				if(is_int($multiple) == false) {
				   $db->rollback();
				   $this->view->error = "Le nombre total des tranches  ".$mdv."  n'est pas un multiple du nombre de fois de payement des tranches ".$tranche;
				   return;
				}
			   
			    $date_id = Zend_Date::now();
				
				$tegcp = new Application_Model_EuTegc();
		        $m_tegcp = new Application_Model_EuTegcMapper();
				
				$config = $m_tegcp->fetchByMembreConfig($code_membre);
				
				//if($config == false)   {
			    //$code_te = $te_mapper->getLastTegc();
				
				$code_te = $te_mapper->getLastTegcByMembre($code_membre);
				
			    if ($code_te == NULL) {
			       $code_te = 'TEGCP'.$id_filiere.$code_membre. '00001';         
			    } else {
			       $num_ordre = substr($code_te, -5);
                   $num_ordre++;
                   $code_te = 'TEGCP'.$id_filiere.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			    }
				   
			    $te->setCode_tegc($code_te);
			    $te->setId_filiere($id_filiere);
			    $te->setMdv($mdv);
			    $te->setTranche_payement($tranche);
			    $te->setCode_membre($code_membre);
			    $te->setMontant(0);
			    $te->setMontant_utilise(0);
			    $te->setSolde_tegc(0);
			    $te->setId_utilisateur($sessionutilisateur->id_utilisateur);
			    $te->setNom_tegc($nom_tegc);
			    $te->setNom_produit($nom_produit);
			    $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				$te->setType_tegc("DISTRIBUTEUR");
			   
			    if(isset($_POST['produit1']) && $_POST['produit1'] == 'ri') {
			       $te->setRecurrent_illimite(1);
			    } else {
				   $te->setRecurrent_illimite(0);
			    }
			   
			    if(isset($_POST['produit2']) && $_POST['produit2'] == 'rl') {
				      $te->setRecurrent_limite(1);
			    } else {
				      $te->setRecurrent_limite(0);
			    }
					  
			    if(isset($_POST['produit3']) && $_POST['produit3'] == 'nr') {
				  $te->setNonrecurrent(1);
			    } else {
                  $te->setNonrecurrent(0);
                }					  
						
                if(isset($_POST['periode1']) && ($_POST['periode1'] == '11.2')) {						
				  $te->setPeriode1(1);
			    } else { 
				  $te->setPeriode1(0);
			    }
					  
			    if(isset($_POST['periode2']) && ($_POST['periode2'] == '22.4')) {						
				      $te->setPeriode2(1);
			    } else { 
				      $te->setPeriode2(0);
			    }
				
				if(isset($_POST['periode3']) && $_POST['periode3'] == '1') {						
				  $te->setPeriode3(1);
			    } else { 
				  $te->setPeriode3(0);
			    }
			   
			    if(isset($_POST['situation']) && $_POST['situation'] == '1') {						
				  $te->setFormel(1);
			    } else { 
				  $te->setFormel(0);
			    }
			   
			    if(isset($_POST['tva']) && $_POST['tva'] == '1') {						
				  $te->setRegime_tva(1);
			    } else { 
				  $te->setRegime_tva(0);
			    }
					  
			    if(isset($_POST['categorie1']) && ($_POST['categorie1'] == 'special')) {
				  $te->setSpecial(1);
			    } else {
                  $te->setSpecial(0);
                }					  
					  
			    if(isset($_POST['categorie2']) && $_POST['categorie2'] == 'ordinaire') {
				  $te->setOrdinaire(1);
			    } else {
                  $te->setOrdinaire(0);
                }

				$te->setSubvention(0);   
                $te->setCode_zone($code_zone);
				$te->setId_pays($id_pays);
				$te->setId_region($id_region);
				$te->setId_prefecture($id_prefecture);
				$te->setId_canton($id_canton);
				   
			    $te_mapper->save($te);

                $compteur = $_POST['compteur'];
			    $x = 1;
			    while ($x <= $compteur) {
				      if(isset($_POST["prk$x"])) {
				         $valeur_prk = $_POST["prk$x"];
                         $findprk = $m_prk->findByTegc($code_te,$valeur_prk,$prk);
					     if($findprk == false) {
					        $id_prk = $m_prk->findConuter() + 1;
					        $prk->setId_prk($id_prk);
					        $prk->setCode_tegc($code_te);
					        $prk->setValeur($valeur_prk);
					        $m_prk->save($prk);
                          }					
				       }
				       $x++;
			        }
					
               //} 
			   
			   /*else {
                    $te_mapper->findByMembre($code_membre,$te); 
                    $code_tegc = $te->code_tegc;
					
					$membremorale->setId_filiere($id_filiere);
	                $m_mapmorale->update($membremorale);
					
					$te_mapper->find($code_tegc,$te);
					
                    $te->setNom_tegc($nom_tegc);
                    $te->setNom_produit($nom_produit);
				    $te->setMdv($mdv);
					$te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					$te->setId_utilisateur($sessionutilisateur->id_utilisateur);
				    $te->setTranche_payement($tranche);
					
					$te->setCode_zone($code_zone);
					
				    $te->setId_pays($id_pays);
				    $te->setId_region($id_region);
				    $te->setId_prefecture($id_prefecture);
				    $te->setId_canton($id_canton);
                
				    $te_mapper->update($te);

                    if(isset($_POST['produit1']) && $_POST['produit1'] == 'ri') {
			           $te->setRecurrent_illimite(1);
			           $te_mapper->update($te);
			        } else {
                       $te->setRecurrent_illimite(0);
			           $te_mapper->update($te);
                    }			
					  
			        if(isset($_POST['produit2']) && $_POST['produit2'] == 'rl') {
			          $te->setRecurrent_limite(1);
			          $te_mapper->update($te);
			        } else {
                      $te->setRecurrent_limite(0);
			          $te_mapper->update($te);
                    }			
					  
			        if(isset($_POST['produit3']) && $_POST['produit3'] == 'nr') {
			          $te->setNonrecurrent(1);
			          $te_mapper->update($te);
			        } else {
                      $te->setNonrecurrent(0);
			          $te_mapper->update($te);
                    }			
						
                    if(isset($_POST['periode1'])  && ($_POST['periode1'] == '11.2')) {						
			           $te->setPeriode1(1);
			           $te_mapper->update($te);
		            } else {
                       $te->setPeriode1(0);
			           $te_mapper->update($te);
                    }			
					  
			        if(isset($_POST['periode2']) && ($_POST['periode2'] == '22.4')) {						
			           $te->setPeriode2(1);
			           $te_mapper->update($te);
			        } else {
                       $te->setPeriode2(0);
			           $te_mapper->update($te);
                    }			
					  
			        if(isset($_POST['categorie1']) && ($_POST['categorie1'] == 'special')) {
			           $te->setSpecial(1);
			           $te_mapper->update($te);
			        } else {
                       $te->setSpecial(0);
			           $te_mapper->update($te);
                    }			
					  
			        if(isset($_POST['categorie2']) && ($_POST['categorie2'] == 'ordinaire')) {
			           $te->setOrdinaire(1);
			           $te_mapper->update($te);
			        } else {
			           $te->setOrdinaire(0);
			           $te_mapper->update($te);
			        }   
			   
			        $compteur = $_POST['compteur'];
			        $x = 1;
			        $tab_prk = $m_prk->fetchByTegc($code_tegc);
			   
			        while ($x <= $compteur) {
				      if(isset($_POST["prk$x"])) {
				        $valeur_prk = $_POST["prk$x"];
                        $findprk = $m_prk->findByTegc($code_tegc,$valeur_prk,$prk);
					    if($findprk == false) {
					       $id_prk = $m_prk->findConuter() + 1;
					       $prk->setId_prk($id_prk);
					       $prk->setCode_tegc($code_tegc);
					       $prk->setValeur($valeur_prk);
					       $m_prk->save($prk);
                        }   					 
				      } 
				      $x++;
			         }					
               }*/			   
               $db->commit();
	           $sessionutilisateur->errorlogin = "Operation de configuration bien effectuee ...";
	           $this->_redirect('/administration/listdemandeconfigtevalider');
			} catch (Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
		
		} else  {
		   $id = $this->_request->getParam('id');
		   $demande   = new Application_Model_EuDemandeConfigte();
	       $m_demande = new Application_Model_EuDemandeConfigteMapper();
		   $membre   = new Application_Model_EuMembreMorale();
	       $m_membre = new Application_Model_EuMembreMoraleMapper();
		   
		   $m_demande->find($id,$demande);
		   $code_membre = $demande->code_membre_morale;
		   $m_membre->find($code_membre,$membre);
		   
		   $this->view->membre = $membre;
		   $tranche="";
		   $mdv="";
		   $config = $m_tegc->fetchByMembreConfig($code_membre);
		   if($config != false) {
		     foreach ($config as $value) {
			   $tranche = $value->tranche_payement;
			   $mdv = $value->mdv;
			 }
		   }
	       $this->view->config = $config;
		   $this->view->tranche = $tranche; 
		   $this->view->mdv = $mdv; 
	    }
	
	}
	
	
	
	public function detailteAction() {
	    $id = $this->_request->getParam('id');
	    $tegc   = new Application_Model_EuTegc();
		$m_tegc = new Application_Model_EuTegcMapper();
		$prk   = new Application_Model_EuPrk();
		$m_prk = new Application_Model_EuPrkMapper();
		$findprks = $m_prk->fetchByTegc($id);
		$m_tegc->find($id,$tegc);
		
		$filiere   = new Application_Model_EuFiliere();
		$m_filiere = new Application_Model_EuFiliereMapper();
		$m_filiere->find($tegc->id_filiere,$filiere);
		
		$t_prk = new Application_Model_DbTable_EuTypePrk();
        $typeprks = $t_prk->fetchAll();
        $this->view->typeprks = $typeprks;
        
        $this->view->division = $filiere->nom_filiere;
		
		$this->view->tegc = $tegc;
		$this->view->prks = $findprks;
	}
	
	
	public function listacteurinterimAction()   {
        /* page administration/listacteurinterim - Liste des acteurs intérimaires */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
           
		$tabela = new Application_Model_DbTable_EuTegc();
		$select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		//$select = $tabela->select();
		$select->setIntegrityCheck(false);
		$select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_tegc.code_membre');
		$select->where('eu_tegc.nom_tegc is not null');
        $select->where('eu_tegc.type_tegc <> ?',"PRESTATAIRE");
		
		//$select->where('id_utilisateur = ?',$sessionutilisateur->id_utilisateur);
		//$select->order('id_utilisateur desc');
		   
		$tegc = $tabela->fetchAll($select);
		   
		$this->view->entries = $tegc;		   

        $this->view->tabletri = 1;
    }
	
	
	public  function listachrevAction()  {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	
	   if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
	      
		  $t_revendeur = new Application_Model_DbTable_EuRevendeur();
		  $select = $t_revendeur->select();
		  $select->distinct();
		  $select->from(array('eu_revendeur'),array('code_membre'));
		  $this->view->entries = $t_revendeur->fetchAll($select);
		  $this->view->tabletri = 1; 
	}
	
	
	public  function listoseAction()  {
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	
	  if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
      if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		
	  $t_membre_morale = new Application_Model_DbTable_EuMembreMorale();
	  $select = $t_membre_morale->select();
	  $select->where('code_type_acteur IN (?)',array("OSE","POSE"));
	  $select->where('code_statut IN (?)',array("association","ONG","Eglise","Mosquee"));
	  $select->order('raison_sociale asc');
	  $this->view->entries = $t_membre_morale->fetchAll($select);
	  $this->view->tabletri = 1;
	}
	
	public  function listacteursAction()  {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	
	    if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		   
		   $type = $this->_request->getParam('type');
           if($type != "") {
		      $t_membre_morale = new Application_Model_DbTable_EuMembreMorale();
			  $select = $t_membre_morale->select();
			  $select->where('quartier_membre  <> ?', "NUKAFU");
			 
			  if($type == "OE") {
			    $select->where('(code_type_acteur like ?',"EI");
                $select->orwhere('code_type_acteur like ?)',"OE");      
			  } else {
			    $select->where('code_type_acteur like ?',$type); 
			  }
			 
			  $this->view->entries = $t_membre_morale->fetchAll($select);
		      $this->view->type = $type;
		      $this->view->tabletri = 1;
		   } else {
		      $this->_redirect('/administration');
		   }
	
	}



	
    public function listsouscriptioncmfhAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $type = (int) $this->_request->getParam('type');
        if ($type != 0) {
				
        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllBySouscriptionTypeCandidat($type);
		$this->view->type = $type;
        $this->view->tabletri = 1;
        }else{
		$this->_redirect('/administration');
			}

    }



	
    public function listsouscriptioncmfhrechercheAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $type = (int) $this->_request->getParam('type');
        if ($type != 0) {
		$this->view->type = $type;

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['debut']) && $_POST['debut']!="" && isset($_POST['fin']) && $_POST['fin']!="") {
				
        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllBySouscriptionTypeCandidatRecherche($_POST['type'], $_POST['debut'], $_POST['fin']);

        $this->view->tabletri = 1;
	}
	}
        }/*else{
		$this->_redirect('/administration');
			}*/

    }



	
    public  function verifiergcpAction()   {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
			
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
			   
			if (isset($_POST['ok']) && $_POST['ok']=="ok") {
				if  (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
				    $code_membre = $_POST['code_membre'];
					$releve_mapper = new Application_Model_EuReleveMapper();
				    $releve = $releve_mapper->fetchAllByType('GCP',$code_membre);
				    $releve = $releve[0];
				    if  (($releve != NULL) || ($releve->publier != NULL)) {
						if($releve->publier == 0) {
				            $tabela = new Application_Model_DbTable_EuAncienGcp();
                            $select = $tabela->select()->setIntegrityCheck(false);
                            $select->from($tabela,array('id_gcp','date_conso', 'mont_gcp', 'mont_preleve', 'reste', 'code_cat', 'id_credit'))
		                           ->join('eu_ancien_compte_credit','eu_ancien_compte_credit.id_credit = eu_ancien_gcp.id_credit', array('code_membre','code_produit'));
                            $select->order('eu_ancien_gcp.date_conso asc');
			                if ($code_membre != '' || $code_membre != null) {
			                    $select->where('eu_ancien_gcp.code_membre like ?',$code_membre);
			                }
							$this->view->code_membre = $code_membre;
                            $this->view->consult = $tabela->fetchAll($select);
						} else {
					        $sessionutilisateur->errorlogin = "Vous ne pouvez pas aller à la réclamation car vous avez un relevé correct !!! ...";
					    }	
	                } else {
					    $sessionutilisateur->errorlogin = "Vous devez d'abord valider votre relevé !!! ...";
			        }
	            }
				$this->view->tabletri = 1;	
	        }
	}
	
	
	


    public function verifierrpgiAction() {
	    /* page index/relevesalaire - Retrouve salaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
			    $code_membre = $_POST['code_membre'];
				
				$releve_mapper = new Application_Model_EuReleveMapper();
				$releve = $releve_mapper->fetchAllByType('RPG_I',$code_membre);
				$releve = $releve[0];
				if($releve != NULL ) {
				    if(trim($releve->publier) == 0) {
				        $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
				        $select = $tabela->select() ;
                        $select->from($tabela)
		                       ->order('id_credit asc');
			            if ($code_membre != '' || $code_membre != null) {
			              $select->where('code_membre like ?',$code_membre);
				          $select->where('code_produit IN (?)',array('RPGr','RPGnr','Ir','Inr'));
			            }
                        $this->view->credits = $tabela->fetchAll($select);
						$this->view->publier = $releve->publier;
				
			
				        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				        $db_gcp = new Application_Model_DbTable_EuAncienGcp();
                        $select = $tabela->select()->setIntegrityCheck(false);
                        $select->from($db_gcp, array('id_gcp','date_conso', 'mont_gcp', 'mont_preleve','id_credit'))
		                       ->join('eu_ancien_compte_credit', 'eu_ancien_compte_credit.id_credit = eu_ancien_gcp.id_credit', array('code_produit'))
					           ->join('eu_ancien_membre', 'eu_ancien_membre.ancien_code_membre = eu_ancien_gcp.code_membre', array('ancien_code_membre','raison_sociale'));
			            if ($code_membre != '' || $code_membre != null) {
			                $select->where('eu_ancien_compte_credit.code_membre like ?',$code_membre);
			            }
				        $select->order('eu_ancien_gcp.id_credit asc');
                        $this->view->consult = $db_gcp->fetchAll($select);
				
				
				        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				        $db_cnnc = new Application_Model_DbTable_EuAncienCnnc();
				        $select = $db_cnnc->select()->setIntegrityCheck(false);
				        $select->from($db_cnnc)
				               ->join('eu_ancien_compte_credit', 'eu_ancien_compte_credit.id_credit = eu_ancien_cnnc.id_credit', array('code_produit'))
				               ->order('eu_ancien_cnnc.id_credit asc');
			            if ($code_membre != '' || $code_membre != null) {
			                $select->where('eu_ancien_cnnc.code_membre like ?',$code_membre);
				        }
				        $this->view->creditsnc = $db_cnnc->fetchAll($select);
				        $this->view->code_membre = $code_membre;
                     
					    } else {
					      $sessionutilisateur->errorlogin = "Vous ne pouvez pas aller à la réclamation car vous avez un relevé correct !!! ...";
					    } 
					 
                } else {
					   $sessionutilisateur->errorlogin = "Vous devez d'abord valider votre relevé !!! ...";
			    }
					
                }
				$this->view->tabletri = 1;
        }		
	    
	
	}


	public function verifiermf107Action() {
	    /* page index/relevesalaire - Retrouve salaire */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		
		
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
			    $code_membre = $_POST['code_membre'];
			    $releve_mapper = new Application_Model_EuReleveMapper();
			    $releve = $releve_mapper->fetchAllByType('MF107',$code_membre);
			    $releve = $releve[0];
			    if(($releve != NULL) && ($releve->publier != NULL)) {
		            if(trim($releve->publier) == 0) {
					    $mf107  = new Application_Model_EuMembreFondateur107();
			            $mmf107 = new Application_Model_EuMembreFondateur107Mapper();
		                $tabela = new Application_Model_DbTable_EuRepartitionMf107();
		                $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                        $select->setIntegrityCheck(false)
                               ->join('eu_detail_mf107', 'eu_detail_mf107.id_mf107 = eu_repartition_mf107.id_mf107',array('code_membre','id_mf107','mont_apport','pourcentage','numident'));
		                $select->where('eu_repartition_mf107.code_membre like ?',$code_membre);
			            $select->order('eu_detail_mf107.id_mf107 asc');
		                $result = $tabela->fetchAll($select);
	                    if(count($result) == 0) {
						   $sessionutilisateur->errorlogin = "Aucun résultat !!! ...";
						} else {
                            $this->view->code_membre = $code_membre;						
						    $this->view->unitemf107 = $result;
						}  
		
		            } else {
					    $sessionutilisateur->errorlogin = "Vous ne pouvez pas aller à la réclamation car vous avez un relevé correct !!! ...";
					}
		
		        } else {
				  $sessionutilisateur->errorlogin = "Vous devez d'abord valider votre relevé !!! ...";
				}
	        }
	    }
	    $this->view->tabletri = 1;
	}
	
	
    public function verifiermf11000Action() {
	    /* page index/relevesalaire - Retrouve salaire */
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

		
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['numero_bon']) && $_POST['numero_bon']!="") {
			    $numero_bon = $_POST['numero_bon'];
			    $releve_mapper = new Application_Model_EuReleveMapper();
			    $releve = $releve_mapper->fetchAllByType('MF11000_PP',$numero_bon);
				$releve = $releve[0];
			    if($releve != NULL) {
			        if($releve->publier == 0) {
		                $tabela = new Application_Model_DbTable_EuRepartitionMf11000();
		                $num_bon = $this->_request->getParam("num_bon");
		                $select = $tabela->select();
	                    $select->where('code_mf11000 like ?',$numero_bon);
			            $select->order('id_rep asc');
			
			            $this->view->unitemf11000 = $tabela->fetchAll($select);
			   
			            ///////////////////////////////////////////////////////////////////////////////////
			   
			            $tab_smsmoney = new Application_Model_DbTable_EuAncienDetailSmsmoney();
		                $select = $tab_smsmoney->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		                $select->setIntegrityCheck(false)
                               ->join('eu_ancien_membre', 'eu_ancien_membre.ancien_code_membre = eu_ancien_detail_smsmoney.code_membre_dist');
		    
	                    $select->where('eu_ancien_detail_smsmoney.num_bon like ?',$numero_bon);
	          
			            $select->where('eu_ancien_detail_smsmoney.origine_sms like ?','MF');
			            $select->order('eu_ancien_detail_smsmoney.id_detail_smsmoney asc');
			
			            $this->view->detailmf11000 = $tabela->fetchAll($select);
						$this->view->numero_bon = $numero_bon;
		
		            } else {
					   $sessionutilisateur->errorlogin = "Vous ne pouvez pas aller à la réclamation car vous avez un relevé correct !!! ...";
			        } 
					 
                } else {
					$sessionutilisateur->errorlogin = "Vous devez d'abord valider votre relevé !!! ...";
				}
		
		    } else {  
	           $this->view->message = "Champs * obligatoire ...";
	        }
		}	
	    $this->view->tabletri = 1;	
	}

    
	
	
	
	public function reglermf107sAction() {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		if (!isset($sessionutilisateur->login))     {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
			    
			    if  (isset($_POST['ok']) && $_POST['ok']=="ok") {
                    if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	                    $code_membre = $_POST['code_membre'];
			            $tabela = new Application_Model_DbTable_EuDetailMf107();
			            $select = $tabela->select();
                        $select->where('code_membre  = ?', $code_membre);
				        $select->where('nature = ?',1);
						$select->where('creditcode like ?',"contentieux");
			            $select->order('date_mf107 asc');
				        $result = $tabela->fetchAll($select);
				        if(count($result) == 0) {
				          $sessionutilisateur->errorlogin = "Aucun résultat !!! ...";
			            } else {
				          $this->view->mf107 = $result;
			              $this->view->code_membre = $code_membre;
			            }
	                }	
		        }
				
				if (isset($_POST['ok1']) && $_POST['ok1']=="ok1")  {
				    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;
			        $response = false;
		            $rep     = new Application_Model_EuRepartitionMf107();
			        $m_rep   = new Application_Model_EuRepartitionMf107Mapper();
			        $dmf107  = new Application_Model_EuDetailMf107();
			        $m_dmf107= new Application_Model_EuDetailMf107Mapper();
			        $mf107   = new Application_Model_EuMembreFondateur107();
			        $mmf107  = new Application_Model_EuMembreFondateur107Mapper();
					$operation   = new Application_Model_EuAncienneOperation();
		            $m_operation = new Application_Model_EuAncienneOperationMapper();
					$releve_mapper = new Application_Model_EuReleveMapper();
			        $releve_model = new Application_Model_EuReleve();
					$compteur = $_POST['compteur'];
					$x = 1;
					$mont_apport = 0;
					$date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;
			        $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
					    while ($x <= $compteur) {
						    if(isset($_POST["num$x"])) {
							    $mont = 0;
                                $montant_recu = 0;
							    $id = $_POST["num$x"];
                                $findmf = $m_dmf107->find($id,$dmf107);								
							    $code_proprio = $_POST["code_proprio$x"];
							    $apporteur = $_POST["apporteur$x"];
								$pp = $dmf107->getPourcentage();
                                $mont_apport = $dmf107->getMont_apport();
                                $mont = ($mont_apport * $pp) / 100;
                                $montant_recu = $mont_apport - $mont;
								$dmf107->setNature(0);
                                $m_dmf107->update($dmf107);
								$releve     = $releve_mapper->fetchAllByType('MF107',$apporteur);
			                    $releve     = $releve[0];
			                    $findreleve = $releve_mapper->find($releve->releve_id,$releve_model);
								
                                for ($i=1;$i<=32;$i++)  {
                                    if ($montant_recu > 0) {	
                                       //insertion dans la table eu_repartition_mf107
									   $id_rep = $m_rep->findConuter() + 1;
								       $rep->setId_rep($id_rep);
                                       $rep->setId_mf107($id);
                                       $rep->setCode_membre($apporteur);
                                       $rep->setDate_rep($date_deb->toString('yyyy-MM-dd'));
                                       $rep->setMont_rep($montant_recu);
                                       $rep->setId_utilisateur(NULL);
                                       $rep->setMont_reglt(0);
					                   $rep->setSolde_rep($montant_recu);
                                       $rep->setPayer(0);
                                       $m_rep->save($rep);
							        }
									
									if ($mont > 0) {
									   //insertion dans la table eu_repartition_mf107
									   $id_rep = $m_rep->findConuter() + 1;
								       $rep->setId_rep($id_rep);
                                       $rep->setId_mf107($id);
                                       $rep->setCode_membre($code_proprio);
                                       $rep->setDate_rep($date_deb->toString('yyyy-MM-dd'));
                                       $rep->setMont_rep($mont);
                                       $rep->setId_utilisateur(NULL);
                                       $rep->setMont_reglt(0);
					                   $rep->setSolde_rep($mont);
                                       $rep->setPayer(0);
                                       $m_rep->save($rep);
									}
							
							    }
							    $releve_model->setPublier(null);
                                $releve_mapper->update($releve_model);
								$countid = $m_operation->findConuter() + 1;
                                $operation->setId_operation($countid)
                                          ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                                          ->setHeure_op($date_deb->toString('HH:mm:ss'))
                                          ->setId_utilisateur(null)
                                          ->setCode_membre($apporteur)
                                          ->setMontant_op($mont_apport)
                                          ->setCode_produit('MF107')
                                          ->setLib_op("Reglement")
                                          ->setType_op("Reglement")
                                          ->setCode_cat("TMF107")
							              ->setId_credit($id);
					            $m_operation->save($operation);
                                $response = true;								
					        }
							$x++;	
					    }
						
						if($response) {
				           $db->commit();
				           $sessionutilisateur->errorlogin = "Règlement effectué avec succès ...";
				           $this->_redirect('/administration/reglermf107s');  
				        } else {
                           $sessionutilisateur->errorlogin = "Règlement non effectué ...";
				           $this->_redirect('/administration/reglermf107s');
                        }
						
		            } catch (Exception $exc) {
                        $db->rollback();
                        $message = ' Erreur d\'éxécution : ' . $exc->getMessage() . ' ' . $exc->getTraceAsString();
			            $sessionutilisateur->errorlogin = $message;
                        return;
                    }   
	            }
	}
	
	

    public function reglermf107Action() {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
            $date_deb = clone $date_fin;
		   
		    $response = false;
		    if  (isset($_POST['ok']) && $_POST['ok']=="ok") {
                if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	                $code_membre = $_POST['code_membre'];
			        $tabela = new Application_Model_DbTable_EuDetailMf107();
			        $select = $tabela->select();
                    $select->where('code_membre  = ?', $code_membre);
				    $select->where('nature = ?',1);
			        $select->order('date_mf107 asc');
				    $result = $tabela->fetchAll($select);
				    if(count($result) == 0) {
				      $sessionutilisateur->errorlogin = "Aucun résultat !!! ...";
			        } else {
				      $this->view->mf107 = $result;
			          $this->view->code_membre = $code_membre;
			        }
	            }	
		    }
			
			if (isset($_POST['ok1']) && $_POST['ok1']=="ok1")  {
                $rep      = new Application_Model_EuRepartitionMf107();
			    $m_rep    = new Application_Model_EuRepartitionMf107Mapper();
			    $dmf107   = new Application_Model_EuDetailMf107();
			    $m_dmf107 = new Application_Model_EuDetailMf107Mapper();
			    $mf107    = new Application_Model_EuMembreFondateur107();
			    $mmf107   = new Application_Model_EuMembreFondateur107Mapper();
			    $releve_mapper = new Application_Model_EuReleveMapper();
			    $releve_model = new Application_Model_EuReleve();
			    $operation   = new Application_Model_EuAncienneOperation();
		        $m_operation = new Application_Model_EuAncienneOperationMapper();
			
			    $compteur = $_POST['compteur'];
			    $code_membre = $_POST['code_membre'];
			    $releve     = $releve_mapper->fetchAllByType('MF107',$code_membre);
			    $releve     = $releve[0];
			    $findreleve = $releve_mapper->find($releve->releve_id,$releve_model);
		        $x = 1;
			    $j = 0;
			    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                $date_deb = clone $date_fin;
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
			    try {
				    while ($x <= $compteur)   {
				        if(isset($_POST["num$x"])) { 
                            $mont = 0;
                            $montant_recu = 0;					
				            $id = $_POST["num$x"];
						    $pourcentage = (100 - $_POST["pourcentage$x"]);
					        $findmf = $m_dmf107->find($id,$dmf107);
						    $ancienpourcentage = $m_dmf107->pourcentage;
						    $mont = ($dmf107->getMont_apport() * $pourcentage) / 100;
                            $montant_recu = $dmf107->getMont_apport() - $mont;
						    $findmf107 = $mmf107->find($dmf107->getNumident(),$mf107);
						    $code_proprio = $mf107->getCode_membre();
						
						    $dmf107->setPourcentage($pourcentage);
						    $dmf107->setNature(0);
                            $m_dmf107->update($dmf107);
						
						    $mfcredits = $m_rep->fetchRepByMf($id);
				            $nbre_credit = count($mfcredits);
						
						    while($j < $nbre_credit) {
				                $mfcredit = $mfcredits[$j];
                                $id_rep   = $mfcredit->getId_rep();
					            $findrep  = $m_rep->find($id_rep,$rep);
							    if(($code_membre == $mfcredit->getCode_membre())) {
							        $rep->setMont_rep($montant_recu);
                                    $rep->setMont_reglt(0);
					                $rep->setSolde_rep($montant_recu);
							        $m_rep->update($rep);
									
								if($ancienpourcentage == 0) {
                                    if($mont > 0) {
								       $id_rep = $m_rep->findConuter() + 1;
								       $rep->setId_rep($id_rep);
                                       $rep->setId_mf107($id);
                                       $rep->setCode_membre($code_proprio);
                                       $rep->setDate_rep($date_deb->toString('yyyy-MM-dd'));
                                       $rep->setMont_rep($mont);
                                       $rep->setId_utilisateur(NULL);
                                       $rep->setMont_reglt(0);
					                   $rep->setSolde_rep($mont);
                                       $rep->setPayer(0);
                                       $m_rep->save($rep);
									}
                                }								
							}
							if(($code_proprio == $mfcredit->getCode_membre())) {
							    $rep->setMont_rep($mont);
                                $rep->setMont_reglt(0);
					            $rep->setSolde_rep($mont);
                                $m_rep->update($rep);							   
							}
                            $j++;							
						}
						$response = true;
			        }
					$x++;
					$countid = $m_operation->findConuter() + 1;
                    $operation->setId_operation($countid)
                              ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                              ->setHeure_op($date_deb->toString('HH:mm:ss'))
                              ->setId_utilisateur(null)
                              ->setCode_membre($code_membre)
                              ->setMontant_op($dmf107->getMont_apport())
                              ->setCode_produit('MF107')
                              ->setLib_op("Reglement")
                              ->setType_op("Reglement")
                              ->setCode_cat("TMF107")
							  ->setId_credit($id);
					$m_operation->save($operation);
			    }
				$releve_model->setPublier(null);
                $releve_mapper->update($releve_model);
				if($response) {
				   $db->commit();
				   $sessionutilisateur->errorlogin = "Règlement effectué avec succès ...";
				   $this->_redirect('/administration/reglermf107');  
				} else {
                   $sessionutilisateur->errorlogin = "Règlement non effectué ...";
				   $this->_redirect('/administration/reglermf107');
                } 				
			} catch (Exception $exc) {
               $db->rollback();
               $message = ' Erreur d\'éxécution : ' . $exc->getMessage() . ' ' . $exc->getTraceAsString();
			   $sessionutilisateur->errorlogin = $message;
               return;
            }
		}		
	}
	
	
	public function recouvrermf107sAction() {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))         {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
			    $response = false;
			if  (isset($_POST['ok']) && $_POST['ok']=="ok") {
			    $mf107  = new Application_Model_EuMembreFondateur107;
				$mf107_mapper = new Application_Model_EuMembreFondateur107Mapper();
			    $detailmf = new Application_Model_EuDetailMf107();
                $detailmf_mapper = new Application_Model_EuDetailMf107Mapper();
				$date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
				$proprio       = $_POST['membre'];
				$pourcentage   = $_POST['pourcen'];
				$apporteur     = $_POST['apporteur'];
				$montant       = $_POST['montant'];
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
				try {
				    $findproprio = $mf107_mapper->fetchMfByMembre($proprio);
					if($findproprio == NULL) {
					    $sessionutilisateur->errorlogin = "Ce membre $proprio  n' est pas un membre fondateur 107 !!! ...";
					} else {
					    $findproprio = $findproprio[0];
					    $numident = $findproprio->numident;
					    $id_mf107 = $detailmf_mapper->findConuter() + 1;
						$detailmf->setId_mf107($id_mf107);
					    $detailmf->setNumident($numident);
                        $detailmf->setCode_membre($apporteur);
                        $detailmf->setDate_mf107($date_idd->toString('yyyy-MM-dd'));
                        $detailmf->setMont_apport($montant);
                        $detailmf->setId_utilisateur(null);
                        $detailmf->setPourcentage($pourcentage);
                        $detailmf->setProprietaire(null);
		                $detailmf->setCreditcode("contentieux");
						$detailmf->setNature(1);
                        $detailmf_mapper->save($detailmf);
						
						$db->commit();
						$sessionutilisateur->errorlogin = "Recouvrement effectué avec succès ...";
					    $this->_redirect('/administration/recouvrermf107s');
					}
			    } catch (Exception $exc) {
                    $db->rollback();
                    $message = ' Erreur d\'éxécution : ' . $exc->getMessage() . ' ' . $exc->getTraceAsString();
					$sessionutilisateur->errorlogin = $message;
                    return;
                }
	        }
	}
	
	
	
	public function recouvrermf107Action() {
	
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		    $response = false;
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
                if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
				    $code_membre = $_POST['code_membre'];
                    $tabela = new Application_Model_DbTable_EuDetailMf107();
					$releve_mapper = new Application_Model_EuReleveMapper();
			        $releve = $releve_mapper->fetchAllByType('MF107',$code_membre);
			        $releve = $releve[0];
					if(($releve != NULL) && ($releve->publier != NULL)) {
					    if($releve->publier == 0 ) {
				            $select = $tabela->select();
                            $select->where('code_membre  = ?', $code_membre);
				            $select->where('nature = ?',0);
			                $select->order('date_mf107 asc');
				            $result = $tabela->fetchAll($select);
				            if(count($result) == 0) {
					           $sessionutilisateur->errorlogin = "Aucun résultat !!! ...";
					        } else {
				               $this->view->mf107 = $result;
			                   $this->view->code_membre    = $code_membre;
					        }
						} else {
					        $sessionutilisateur->errorlogin = "Vous ne pouvez pas aller à la réclamation car vous avez un relevé correct !!! ...";
					    }
						
                    } else {
				        $sessionutilisateur->errorlogin = "Vous devez d'abord valider votre relevé !!! ...";
				    }	
	            }
				
			}
			
			if  (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
			        $dmf107   = new Application_Model_EuDetailMf107();
			        $m_dmf107 = new Application_Model_EuDetailMf107Mapper();
				    $compteur = $_POST['compteur'];
				    $code_membre = $_POST['code_membre'];
				    $x = 1;
					$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
					    while ($x <= $compteur) {
				            if(isset($_POST["num$x"])) {  
				                $id = $_POST["num$x"];
					            $findmf107 = $m_dmf107->find($id,$dmf107);
					            $dmf107->setNature(1);
                                $m_dmf107->update($dmf107);
					            $response = true;
				            }
			                $x++;
			            }
	                    if($response) {
						   $db->commit();
				           $sessionutilisateur->errorlogin = "Recouvrement effectué avec succès ...";
					       $this->_redirect('/administration/recouvrermf107');
				        } else {
                           $sessionutilisateur->errorlogin = "Recouvrement non effectué ...";
					       $this->_redirect('/administration/recouvrermf107');
                        }					
			        } catch (Exception $exc) {
                        $db->rollback();
                        $message = ' Erreur d\'éxécution : ' . $exc->getMessage() . ' ' . $exc->getTraceAsString();
					    $sessionutilisateur->errorlogin = $message;
                        return;
                    }					
			}        	
	}
	
	
	
	
	
	
	public function recouvrermf11000Action() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		    $response = false;
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
                if (isset($_POST['num_bon']) && $_POST['num_bon']!="") {
				    $num_bon = $_POST['num_bon'];
				    $releve_mapper = new Application_Model_EuReleveMapper();
				    $releve = $releve_mapper->fetchAllByType('MF11000_PP',$num_bon);
					$releve = $releve[0];
				    if(($releve != NULL) && ($releve->publier != NULL)) {
				        if($releve->publier == 0) {
                            $tabela = new Application_Model_DbTable_EuAncienDetailSmsmoney();
				            $select = $tabela->select();
                            $select->where('num_bon  = ?', $num_bon);
				            $select->where('type_sms <> ?','saisi');
			                $select->order('date_allocation asc');
						    $result = $tabela->fetchAll($select);
						    if(count($result) == 0) {
						       $sessionutilisateur->errorlogin = "Aucun résultat"; 
							} else { 
				               $this->view->mf11000    = $result;
			                   $this->view->num_bon    = $num_bon;
							}
				        } else {
					        $sessionutilisateur->errorlogin = "Vous ne pouvez pas aller au recouvrement car vous avez un relevé correct !!! ...";
			            } 
					 
                    } else {
					    $sessionutilisateur->errorlogin = "Vous devez d'abord valider votre relevé !!! ...";
				    }
	            }
				
			}
			
			if  (isset($_POST['ok1']) && $_POST['ok1']=="ok1") { 
				$dsms   = new Application_Model_EuAncienDetailSmsmoney();
			    $m_dsms = new Application_Model_EuAncienDetailSmsmoneyMapper();
				$rep   = new Application_Model_EuRepartitionMf11000();
			    $m_rep = new Application_Model_EuRepartitionMf11000Mapper();
				$db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
				    $compteur = $_POST['compteur'];
				    $num_bon = $_POST['num_bon'];
				    $x=1;
				    $j=0;
				    $mfcredits = $m_rep->fetchRepByNumBon($num_bon);
				    $nbre_credit = count($mfcredits);
				    while ($j < $nbre_credit) {
				       $mfcredit = $mfcredits[$j];
                       $id_rep = $mfcredit->getId_rep();
					   $findrep = $m_rep->find($id_rep,$rep);
					   $rep->setEtat(1);
                       $m_rep->update($rep);
				       $j++;
				    }
				    while ($x <= $compteur)   {
				        if(isset($_POST["num$x"])) {  
				           $id = $_POST["num$x"];
					       $findsms = $m_dsms->find($id,$dsms);
					       $dsms->setType_sms("saisi");
                           $m_dsms->update($dsms);
					       $response = true;
				        }
			            $x++;
			        }
	
	                if($response) {
					  $db->commit();
				      $sessionutilisateur->errorlogin = "Recouvrement effectué avec succès ...";
					  $this->_redirect('/administration/recouvrermf11000');
				    } else {
					  $sessionutilisateur->errorlogin = "Enrégistrement non effectué ...";
					  $this->_redirect('/administration/recouvrermf11000');
					}
                } catch (Exception $exc) {
				   $db->rollback();
				   $sessionutilisateur->errorlogin = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				   return;
			    }					
                    
	        }		
	
	}
	
	
	
	public function recouvrergcpAction() {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login))        {  $this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != "") {  $this->_redirect('/administration/confirmation');}
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
                if  (isset($_POST['code_membre']) && $_POST['code_membre'] !="")  {    
					$code_membre = $_POST['code_membre'];
				    $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
				    $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
					$select->setIntegrityCheck(false);
                    $select->where('code_membre = ?', $code_membre);
				    $select->where('montant_credit > ?',0);
			        $select->where('code_produit in (?)', array('RPGnr','Inr'));
				    $select->where('nature = ?',0);
			        $select->order('date_octroi asc');
					$result = $tabela->fetchAll($select);
						
					$tabeld = new Application_Model_DbTable_EuAncienCnnc();
                    $seld = $tabeld->select();
					$seld->where('code_membre = ?',$code_membre);
				    $seld->where('nature = ?',0);
			        $seld->where('libelle in (?)', array('RPGnr','Inr'));
				    $resultnc = $tabeld->fetchAll($seld);
						   
					if(count($result) == 0 && count($resultnc) == 0) {
						$sessionutilisateur->errorlogin = "Aucun résultat !!! ...";
				    } else {
						$this->view->credits      =   $result;
						$this->view->creditncs    =   $resultnc;
			            $this->view->code_membre  =   $code_membre;
				    }
	            }
				
			}

            if  (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
			    $credit = new Application_Model_EuAncienCompteCredit();
			    $m_credit = new Application_Model_EuAncienCompteCreditMapper();
				$cnnc = new Application_Model_EuAncienCnnc();
			    $m_cnnc = new Application_Model_EuAncienCnncMapper();
				$response = false;
				$db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
                    $compteur = $_POST['compteur'];
				    $x = 1;
				    while ($x <= $compteur) {
					    if(isset($_POST["credit$x"])) {
                           $id = $_POST["credit$x"];
					       $findcredit = $m_credit->find($id,$credit);
					       $credit->setNature(1);
                           $m_credit->update($credit);
						}
						
						if(isset($_POST["creditnc$x"])) {
						   $idnc = $_POST["creditnc$x"];
						   $findcreditnc = $m_cnnc->find($idnc,$cnnc);
					       $cnnc->setNature(1);
                           $m_cnnc->update($cnnc);
						}						
					    $response = true;
						$x++;
				    }
					if($response) {
					   $db->commit();
				       $sessionutilisateur->errorlogin = "Recouvrement effectué avec succès ...";
					   $this->_redirect('/administration/recouvrerrpgi');
				    } else {
                       $sessionutilisateur->errorlogin = "Enrégistrement non effectué ...";
					   $this->_redirect('/administration/recouvrerrpgi');
                    }
				} catch (Exception $exc) {
				    $db->rollback();
				    $sessionutilisateur->errorlogin = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				    return;
			    }

			}		
	}
	
	
	

    public function recouvrerrpgiAction() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		    $response = false;
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
                if (isset($_POST['code_membre']) && $_POST['code_membre'] !="") {
				    $code_membre = $_POST['code_membre'];
				    $releve_mapper = new Application_Model_EuReleveMapper();
				    $releve = $releve_mapper->fetchAllByType('RPG_I',$code_membre);
					$releve = $releve[0];
				    if(($releve != NULL) && ($releve->publier != NULL)) {
				        if($releve->publier == 0) {
                            $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
				            $select = $tabela->select();
                            $select->where('code_membre = ?', $code_membre);
			                $select->where('code_produit in (?)', array('RPGnr','Inr'));
				            $select->where('nature = ?',0);
			                $select->order('date_octroi asc');
						    $result = $tabela->fetchAll($select);
				           
						    if(count($result) == 0) {
						      $sessionutilisateur->errorlogin = "Aucun résultat !!! ...";
						    } else {
						      $this->view->credits = $result;
			                  $this->view->code_membre    = $code_membre;
				            }
				        } else {
					        $sessionutilisateur->errorlogin = "Vous ne pouvez pas aller au recouvrement car vous avez un relevé correct !!! ...";
			            }  
                    } else {
					    $sessionutilisateur->errorlogin = "Vous devez d'abord valider votre relevé !!! ...";
				    }
	            }
			}
			
			if  (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
			    $credit = new Application_Model_EuAncienCompteCredit();
			    $m_credit = new Application_Model_EuAncienCompteCreditMapper();
				$db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
				    $compteur = $_POST['compteur'];
				    $x = 1;
				    while ($x <= $compteur) {
				        if(isset($_POST["credit$x"])) {  
				          $id = $_POST["credit$x"];
					      $findcredit = $m_credit->find($id,$credit);
					      $credit->setNature(1);
                          $m_credit->update($credit);
					      $response = true;
				        }
			            $x++;
			        }
				    if($response) {
					   $db->commit();
				       $sessionutilisateur->errorlogin = "Recouvrement effectué avec succès ...";
					   $this->_redirect('/administration/recouvrerrpgi');
				    } else {
                       $sessionutilisateur->errorlogin = "Enrégistrement non effectué ...";
					   $this->_redirect('/administration/recouvrerrpgi');
                    }					
                } catch (Exception $exc) {
				    $db->rollback();
				    $sessionutilisateur->errorlogin = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				    return;
			    }	
            }			
	}


	
    
	
	public function reglergcpAction() {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		    $response = false;
			
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
			    $code_membre = $_POST['code_membre'];
				$tabela = new Application_Model_DbTable_EuAncienCompteCredit();
				$select = $tabela->select();
                $select->where('code_membre = ?',$code_membre);
				$select->where('montant_credit > ?',0);
			    $select->where('code_produit in (?)', array('RPGnr','Inr'));
				$select->where('nature <> ?',0);
			    $select->order('date_octroi asc');
				$result = $tabela->fetchAll($select);
						
				$tabeld = new Application_Model_DbTable_EuAncienCnnc();
                $seld = $tabeld->select();
			    $seld->where('code_membre = ?',$code_membre);
				$seld->where('nature <> ?',0);
			    $seld->where('libelle in (?)', array('RPGnr','Inr'));
				$resultnc = $tabeld->fetchAll($seld);
						   
				if(count($result) == 0 && count($resultnc) == 0) {
				  $sessionutilisateur->errorlogin = "Aucun résultat !!! ...";
				} else {
				  $this->view->credits     =   $result;
				  $this->view->creditncs   =   $resultnc;
			      $this->view->code_membre =   $code_membre;
				}
	        }
			
			
			if(isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
			
			    $agcp    = new Application_Model_EuAncienGcp();
				$m_agcp  = new Application_Model_EuAncienGcpMapper();
				
				$acredit   = new Application_Model_EuAncienCompteCredit();
				$m_acredit = new Application_Model_EuAncienCompteCreditMapper();
				
				$acnnc   = new Application_Model_EuAncienCnnc();
				$m_acnnc = new Application_Model_EuAncienCnncMapper();
				
				$operation   = new Application_Model_EuAncienneOperation();
				$m_operation = new Application_Model_EuAncienneOperationMapper();
				
				$releve_mapper = new Application_Model_EuReleveMapper();
			    $releve_model  = new Application_Model_EuReleve();
				
				$asmc   = new Application_Model_EuAncienSmc();
				$m_asmc = new Application_Model_EuAncienSmcMapper();
				
				$ategc   = new Application_Model_EuAncienTegc();
				$m_ategc = new Application_Model_EuAncienTegcMapper();
				
				$acc   = new Application_Model_EuAncienCreditConsommer();
				$m_acc = new Application_Model_EuAncienCreditConsommerMapper();
				
				$acapa   =  new Application_Model_EuAncienCapa();
				$m_acapa =  new Application_Model_EuAncienCapaMapper();
				$t_acapa =  new Application_Model_DbTable_EuAncienCapa();
				
				$db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
                    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;
			        $code_membre = $_POST['code_membre'];
					if (substr($code_membre, -1) == 'P') {
                        $produit = 'RPGnr';
                        $code_cat = "TPAGCRPG";
						$code_compte = "NB-TPAGCRPG-".$code_membre;
                    } else {
                        $produit = 'Inr';
                        $code_cat = "TPAGCI";
						$code_compte = "NB-TPAGCI-".$code_membre;
                    }
					$distr = $_POST['distributeur'];
					$releve     = $releve_mapper->fetchAllByType('GCP',$distr);
			        $releve     = $releve[0];
			        $findreleve = $releve_mapper->find($releve->releve_id,$releve_model);
				    $compteur   = $_POST['compteur'];
				    $x = 1;
					$findtegc = $m_ategc->findByMembre($distr,$ategc);

                    if($findtegc == false) {
					   $db->rollback();
					   $sessionutilisateur->errorlogin = "Le membre distributeur n'est pas un acteur dans une filiere ...";
					   return;
					} else {
					   $code_tegc = $ategc->getCode_tegc();
					}
					
					while ($x <= $compteur)   {
					    $montant_credit = 0;
						$mont_credit    = 0;
						if(isset($_POST["credit$x"]) && $_POST["credit$x"] !="")  {
						    $montant_credit = $_POST["montant_credit$x"];
                            $id = $_POST["credit$x"];
							$selection = $t_acapa->select();
			                $selection->where('id_credit = ?',$id);
				            $result = $t_acapa->fetchAll($selection);
							$row = $result->current();
							$code_capa = $row->code_capa;
					        $findcredit = $m_acredit->find($id,$acredit);
							$countid = $m_operation->findConuter() + 1;
                            $operation->setId_operation($countid)
                                      ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                                      ->setHeure_op($date_deb->toString('HH:mm:ss'))
                                      ->setId_utilisateur(null)
                                      ->setCode_membre($code_membre)
                                      ->setMontant_op($montant_credit)
                                      ->setCode_produit($produit)
                                      ->setLib_op("Consommation")
                                      ->setType_op("Conso")
                                      ->setCode_cat($code_cat)
									  ->setId_credit($id);						
                            $m_operation->save($operation);
							
							$id_gcp = $m_agcp->findConuter() + 1;
							$agcp->setId_gcp($id_gcp)
							     ->setCode_tegc($code_tegc)
                                 ->setId_credit($id)
                                 ->setSource($acredit->getSource())
                                 ->setDate_conso($date_deb->toString('yyyy-MM-dd hh:mm:ss'))
                                 ->setCode_membre($distr)
                                 ->setCode_cat($code_cat)
                                 ->setMont_gcp($montant_credit)
                                 ->setMont_preleve(0)
                                 ->setReste($montant_credit);
                            $m_agcp->save($agcp);
							
							$id_conso = $m_acc->findConuter() + 1;
							$acc->setId_consommation($id_conso)
							    ->setId_credit($id)
                                ->setId_operation($countid)
                                ->setCode_produit($produit)
                                ->setCode_compte($code_compte)
                                ->setCode_membre($code_membre)
                                ->setCode_membre_dist($distr)
                                ->setMont_consommation($montant_credit)
                                ->setDate_consommation($date_deb->toString('yyyy-mm-dd'))
                                ->setHeure_consommation($date_deb->toString('hh:mm:ss'));
                            $m_acc->save($acc);
							
							$id_smc = $m_asmc->findConuter() + 1;
							
							$asmc->setId_smc($id_smc)
							     ->setId_credit($id)
                                 ->setDate_smc($date_deb->toString('yyyy-MM-dd'))
                                 ->setMontant($montant_credit)
                                 ->setEntree(0)
                                 ->setSortie(0)
                                 ->setSolde(0)
                                 ->setSource_credit($acredit->getSource())
                                 ->setMontant_solde($montant_credit)
                                 ->setOrigine_smc(0)
                                 ->setType_smc('CNCSnr')
                                 ->setCode_smcipn($countid)
                                 ->setCode_capa($code_capa);
                            $m_asmc->save($asmc);
					        
					
					        $acredit->setMontant_credit($acredit->getMontant_credit() - $montant_credit);
					        $acredit->setNature(0);
                            $m_acredit->update($acredit);
							$response = true;
                        }
						
						if(isset($_POST["creditnc$x"])) {
						    $mont_credit = $_POST["mont_credit$x"];
						    $idnc = $_POST["creditnc$x"];
						    $findcreditnc = $m_acnnc->find($idnc,$acnnc);
						    $id = $acnnc->getId_credit();
							$findcredit = $m_acredit->find($id,$acredit);
						   
						    $selection = $t_acapa->select();
			                $selection->where('id_credit = ?',$id);
				            $result = $t_acapa->fetchAll($selection);
							$row = $result->current();
							$code_capa = $row->code_capa;
							
							$countid = $m_operation->findConuter() + 1;
                            $operation->setId_operation($countid)
                                      ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                                      ->setHeure_op($date_deb->toString('HH:mm:ss'))
                                      ->setId_utilisateur(null)
                                      ->setCode_membre($code_membre)
                                      ->setMontant_op($mont_credit)
                                      ->setCode_produit($produit)
                                      ->setLib_op("Consommation")
                                      ->setType_op("Conso")
                                      ->setCode_cat($code_cat)
									  ->setId_credit($id);						
                            $m_operation->save($operation);
							
							$id_gcp = $m_agcp->findConuter() + 1;
							$agcp->setId_gcp($id_gcp)
							     ->setCode_tegc($code_tegc)
                                 ->setId_credit($id)
                                 ->setSource($acredit->getSource())
                                 ->setDate_conso($date_deb->toString('yyyy-MM-dd hh:mm:ss'))
                                 ->setCode_membre($distr)
                                 ->setCode_cat($code_cat)
                                 ->setMont_gcp($mont_credit)
                                 ->setMont_preleve(0)
                                 ->setReste($mont_credit);
                            $m_agcp->save($agcp);
							
							$id_conso = $m_acc->findConuter() + 1;
							$acc->setId_consommation($id_conso)
							    ->setId_credit($id)
                                ->setId_operation($countid)
                                ->setCode_produit($produit)
                                ->setCode_compte($code_compte)
                                ->setCode_membre($code_membre)
                                ->setCode_membre_dist($distr)
                                ->setMont_consommation($mont_credit)
                                ->setDate_consommation($date_deb->toString('yyyy-mm-dd'))
                                ->setHeure_consommation($date_deb->toString('hh:mm:ss'));
                            $m_acc->save($acc);
							
							
						    $id_smc = $m_asmc->findConuter() + 1;
							
							$asmc->setId_smc($id_smc)
							     ->setId_credit($id)
                                 ->setDate_smc($date_deb->toString('yyyy-MM-dd'))
                                 ->setMontant($mont_credit)
                                 ->setEntree(0)
                                 ->setSortie(0)
                                 ->setSolde(0)
                                 ->setSource_credit($acredit->getSource())
                                 ->setMontant_solde($mont_credit)
                                 ->setOrigine_smc(0)
                                 ->setType_smc('CNCSnr')
                                 ->setCode_smcipn($countid)
                                 ->setCode_capa($code_capa);
                            $m_asmc->save($asmc);
						   
						    $acnnc->setMont_credit($acnnc->getMont_credit() - $mont_credit);
					        $acnnc->setNature(0);
                            $m_acnnc->update($acnnc);
							$response = true;
						
						
						}
                        $x++; 					
					} 
			        
					if($response) {
					    $db->commit();
				        $sessionutilisateur->errorlogin = "Reglement effectué avec succès ...";
					    $this->_redirect('/administration/reglergcp');
				    } else {
                        $sessionutilisateur->errorlogin = "Reglement non effectué ...";
					    $this->_redirect('/administration/reglergcp');
                    }
			
			    } catch (Exception $exc) {
				    $db->rollback();
				    $sessionutilisateur->errorlogin = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				    return;
			    }
			
			}
					
			
	}
	
	
    
	
	
	public function reglerrpgiAction() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
		    $response = false;
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
			    $code_membre = $_POST['code_membre'];
		        $tab_gcp = new Application_Model_DbTable_EuAncienGcp();
		        $select  = $tab_gcp->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		        $select->setIntegrityCheck(false)
			           //->from('eu_ancien_gcp',array('id_gcp','code_membre','mont_gcp','id_credit'))
                       ->join('eu_ancien_compte_credit','eu_ancien_compte_credit.id_credit = eu_ancien_gcp.id_credit',array('id_credit','code_produit','nature'));
		        $select->where('eu_ancien_compte_credit.code_membre = ?', $code_membre);
				$select->where('eu_ancien_gcp.mont_gcp > ?',0);
			    $select->where('eu_ancien_compte_credit.nature = ?',1);
				$result = $tab_gcp->fetchAll($select);
				
				if(count($result) == 0) {
				   $sessionutilisateur->errorlogin = "Aucun resultat ...";
				} else {
				   $this->view->gcps = $result;
			       $this->view->code_membre    = $code_membre;
				}   
		    }
			
			if  (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
				$date_fin = new Zend_Date(Zend_Date::ISO_8601);
                $date_deb = clone $date_fin; 
				 
				$agcp    = new Application_Model_EuAncienGcp();
				$m_agcp  = new Application_Model_EuAncienGcpMapper();
				
				$acredit = new Application_Model_EuAncienCompteCredit();
				$m_acredit = new Application_Model_EuAncienCompteCreditMapper();
				
				$operation   = new Application_Model_EuAncienneOperation();
				$m_operation = new Application_Model_EuAncienneOperationMapper();
				
				$releve_mapper = new Application_Model_EuReleveMapper();
			    $releve_model = new Application_Model_EuReleve();
				
				$db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
				    $code_membre = $_POST['membre'];
					$releve     = $releve_mapper->fetchAllByType('RPG_I',$code_membre);
			        $releve     = $releve[0];
			        $findreleve = $releve_mapper->find($releve->releve_id,$releve_model);
				    $compteur    = $_POST['compteur'];
				    $x = 1;
				    while ($x <= $compteur)   {
				        if(isset($_POST["gcp$x"])) {
				           $id_gcp  = $_POST["gcp$x"];
					       $findgcp = $m_agcp->find($id_gcp,$agcp);
                           $mont_gcp = $agcp->getMont_gcp();
                           $id_credit = $agcp->getId_credit();
					   
					       $agcp->setMont_gcp(0);
					       $agcp->setMont_preleve(0);
					       $agcp->setReste(0);
                           $m_agcp->update($agcp);
					   
					       $findcredit = $m_acredit->find($id_credit,$acredit);
					       $acredit->setMontant_credit($acredit->getMontant_credit() + $mont_gcp);
					       $m_acredit->update($acredit);
					   
					        // insertion dans la table eu_operation
                            $countid = $m_operation->findConuter() + 1;
						    if(substr($code_membre,19,1) == "P") {
                                $operation->setId_operation($countid)
                                          ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                                          ->setHeure_op($date_deb->toString('HH:mm:ss'))
                                          ->setId_utilisateur(null)
                                          ->setCode_membre($code_membre)
                                          ->setMontant_op($mont_gcp)
                                          ->setCode_produit('RPGnr')
                                          ->setLib_op("Reglement")
                                          ->setType_op("Reglement")
                                          ->setCode_cat("TPAGCRPG")
									      ->setId_credit($id_credit);
						    } else  {
							    $operation->setId_operation($countid)
                                          ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                                          ->setHeure_op($date_deb->toString('HH:mm:ss'))
                                          ->setId_utilisateur(null)
                                          ->setCode_membre($code_membre)
                                          ->setMontant_op($mont_gcp)
                                          ->setCode_produit('Inr')
                                          ->setLib_op("Reglement")
                                          ->setType_op("Reglement")
                                          ->setCode_cat("TPAGCI")
									     ->setId_credit($id_credit);
                            }						
                            $m_operation->save($operation);
							$response = true;
				        }
					    $x++;    
				    }
					$releve_model->setPublier(null);
                    $releve_mapper->update($releve_model);
		            if($response) {
					    $db->commit();
				        $sessionutilisateur->errorlogin = "Reglement effectué avec succès ...";
					    $this->_redirect('/administration/reglerrpgi');
				    } else {
                        $sessionutilisateur->errorlogin = "Reglement non effectué ...";
					    $this->_redirect('/administration/reglerrpgi');
                    }
                } catch (Exception $exc) {
				    $db->rollback();
				    $sessionutilisateur->errorlogin = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				    return;
			    }					
                    
	        }
	}
	
	
	
	
	public function reglermf11000Action() {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

		    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
            $date_deb = clone $date_fin;
		   
		    $response = false;
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
                if (isset($_POST['num_bon']) && $_POST['num_bon']!="") {
				    $num_bon = $_POST['num_bon'];
                    $tabela = new Application_Model_DbTable_EuAncienDetailSmsmoney();
				    $select = $tabela->select();
                    $select->where('num_bon  = ?', $num_bon);
				    $select->where('type_sms like ?','saisi');
				    $select->where('mont_sms > ?',0);
			        $select->order('date_allocation asc');
				    $resultat = $tabela->fetchAll($select);
				    if(count($resultat) == 0) {
				      $sessionutilisateur->errorlogin = "Aucun résultat ...";
				    } else {
				      $this->view->mf11000 = $resultat;
			          $this->view->num_bon    = $num_bon;
				    }		
	            }	
			}
			
			if  (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
			    $dsms   = new Application_Model_EuAncienDetailSmsmoney();
			    $m_dsms = new Application_Model_EuAncienDetailSmsmoneyMapper();
				
				$rep   = new Application_Model_EuRepartitionMf11000();
			    $m_rep = new Application_Model_EuRepartitionMf11000Mapper();
				
				$operation   = new Application_Model_EuAncienneOperation();
				$m_operation = new Application_Model_EuAncienneOperationMapper();
				$releve_mapper = new Application_Model_EuReleveMapper();
			    $releve_model = new Application_Model_EuReleve();
				
				
				$db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
				    $compteur   = $_POST['compteur'];
					$num_bon = $_POST['num_bon'];
					$releve     = $releve_mapper->fetchAllByType('MF11000',$num_bon);
			        $releve     = $releve[0];
			        $findreleve = $releve_mapper->find($releve->releve_id,$releve_model);
				    $x = 1;
				    $j = 0;
				
				    $mfcredits = $m_rep->fetchRepByNumBon($num_bon);
				    $nbre_credit = count($mfcredits);
				
				    while ($x <= $compteur)   {
				        if(isset($_POST["num$x"])) {
				            $id = $_POST["num$x"];
					        $findsms = $m_dsms->find($id,$dsms);
					        $mont_sms = $dsms->getMont_sms();
					    
						    $dsms->setMont_sms(0);
					        $dsms->setMont_vendu(0);
					        $dsms->setSolde_sms(0);
                            $m_dsms->update($dsms);
						
						    while (($j < $nbre_credit) && ($mont_sms > 0)) {
				                $mfcredit = $mfcredits[$j];
                                $id_rep   = $mfcredit->getId_rep();
					            $findrep  = $m_rep->find($id_rep,$rep);
							    $entree   = $rep->getMont_rep();
							    $sortie   = $rep->getMont_reglt();
							    $solde    = $rep->getSolde_rep();
						        if(($solde + $mont_sms) <= ($entree)) {
                                   $rep->setSolde_rep($rep->getSolde_rep() + $mont_sms);
								   $rep->setMont_reglt($rep->getMont_reglt() - $mont_sms);
                                   $m_rep->update($rep);
                                   $mont_sms = 0;    								
							    } else {
                                   $rep->setSolde_rep($rep->getMont_rep());
								   $rep->setMont_reglt(0);
								   $m_rep->update($rep);
								   $mont_sms = $rep->getMont_rep() - $mont_sms;   
                                }
                                $j++;							
					        }
						    $response = true;
							$countid = $m_operation->findConuter() + 1;
                            $operation->setId_operation($countid)
                                      ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                                      ->setHeure_op($date_deb->toString('HH:mm:ss'))
                                      ->setId_utilisateur(null)
                                      ->setCode_membre(null)
                                      ->setMontant_op($mont_sms)
                                      ->setCode_produit('MF11000')
                                      ->setLib_op("Reglement")
                                      ->setType_op("Reglement")
                                      ->setCode_cat("TMF11000")
							          ->setId_credit($num_bon);
					        $m_operation->save($operation);
				        }
					    $x++;   		  
				    }
				        $releve_model->setPublier(null);
                        $releve_mapper->update($releve_model);
				        if($response) {
						   $db->commit();
				           $sessionutilisateur->errorlogin = "Règlement effectué avec succès ...";
				           $this->_redirect('/administration/reglermf11000');
				        } else {
                           $sessionutilisateur->errorlogin = "Règlement non effectué ...";
				           $this->_redirect('/administration/reglermf11000');
                        } 				
				    } catch (Exception $exc) {
				        $db->rollback();
				        $sessionutilisateur->errorlogin = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				        return;
			        }
	        }
	}
	
	
	





    public function listlivraison1Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $livraison = new Application_Model_EuLivraisonMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $livraison->fetchAllByPublier(0, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $livraison->fetchAllByPublier(0, "");
				}

    }




    public function listlivraison2Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $livraison = new Application_Model_EuLivraisonMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $livraison->fetchAllByPublier(1, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $livraison->fetchAllByPublier(1, "");
				}

    }




    public function listlivraison3Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $livraison = new Application_Model_EuLivraisonMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $livraison->fetchAllByPublier(2, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $livraison->fetchAllByPublier(2, "");
				}

    }




    public function listlivraison4Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $livraison = new Application_Model_EuLivraisonMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $livraison->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $livraison->fetchAllByPublier(3, "");
				}

    }




    public function listlivraison41Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $livraison = new Application_Model_EuLivraisonMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $livraison->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $livraison->fetchAllByPublier(3, "");
				}

    }




    public function listlivraison5Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $livraison = new Application_Model_EuLivraisonMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $livraison->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $livraison->fetchAllByPublier(3, "");
				}

    }



    public function listlivraison6Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $livraison = new Application_Model_EuLivraisonMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        $this->view->entries = $livraison->fetchAllByPublier(3, $sessionutilisateur->code_agence);
			}else{
        $this->view->entries = $livraison->fetchAllByPublier(3, "");
				}

    }







    public function publierlivraisonAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		
        $livraison_mapper = new Application_Model_EuLivraisonMapper();
		
		if($sessionutilisateur->code_agence != "001001001001"){
        $livraison = $livraison_mapper->fetchAllByPublier($_POST['id'] - 1, $sessionutilisateur->code_agence);
			}else{
        $livraison = $livraison_mapper->fetchAllByPublier($_POST['id'] - 1, "");
				}

		foreach ($livraison as $entry):
		if(isset($_POST['publier'.$entry->livraison_id.'']) && $_POST['publier'.$entry->livraison_id.''] == $_POST['id']){

        $livraison = new Application_Model_EuLivraison();
        $livraisonM = new Application_Model_EuLivraisonMapper();
        $livraisonM->find($entry->livraison_id, $livraison);
		
        $livraison->setPublier($_POST['publier'.$entry->livraison_id.'']);
		$livraisonM->update($livraison);


$date_id = new Zend_Date(Zend_Date::ISO_8601);


        $validation_quittance = new Application_Model_EuValidationQuittance();
        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
			
            $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
            $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
            $validation_quittance->setValidation_quittance_utilisateur($sessionutilisateur->id_utilisateur);
            $validation_quittance->setValidation_quittance_livraison($entry->livraison_id);
            $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $validation_quittance->setPublier(1);
            $validation_quittance_mapper->save($validation_quittance);

		include("Transfert.php");





if($_POST['id'] == 3){


$htmlpdf = "";

$htmlpdf .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
  </tr>';
	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° Bon de Livraison : BL'.ajoutezero($entry->livraison_id).'</u></em></strong></td>
  </tr>';
		
  
/*$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>QUITTANCE CMFH/CAPS/GAC TOGO N° '.$livraison->livraison_id.'</u></em></strong></td>
  </tr>';*/
  
        $membre_morale = new Application_Model_EuMembreMorale();
        $membre_moraleM = new Application_Model_EuMembreMoraleMapper();
        $membre_moraleM->find($entry->livraison_code_membre, $membre_morale);
		
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Raison sociale de la demande du bon de livraison </u>: </em><strong><em>'.$membre_morale->raison_sociale.'</em></strong></p></td>
  </tr>';

$htmlpdf .= '
  <tr>
    <td colspan="4" align="right"><strong><em>Montant Bon de Livraison : '.number_format(($livraison->livraison_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
  <tr>
    <td align="left"><em><strong>Libellé</strong></em></td>
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
    <td align="center"><em><strong>Montant Bon de Livraison</strong></em></td>
  </tr>';
  
$htmlpdf .= '
  <tr style="background-color:#999;">
    <td align="left"><em>'.$livraison->livraison_libelle.'</em></td>
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
    <td align="center"><em>'.number_format(($livraison->livraison_montant), 0, ',', ' ').' FCFA</em></td>
  </tr>';

$htmlpdf .= '
  <tr>
    <td colspan="2" align="left"><em><u>Montant en  lettres </u>: '.lettre(($livraison->livraison_montant), 50).' CFA</em></td>
    <td colspan="2" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
  </tr>';	
      
  
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  
  </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$htmlpdf .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/livraisons.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_livraison/")) {
mkdir("../../webfiles/pdf_livraison/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_livraison/LIVRAISON_".str_replace("/", "_", mettreaccents($livraison->livraison_id))."_.html";
$newnom = "LIVRAISON_".str_replace("/", "_", mettreaccents($livraison->livraison_id)."_");
$newchemin = "../../webfiles/pdf_livraison/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena	= $newnom.'.pdf';

unlink($newfile);

	
		//$this->_redirect(str_replace("../../webfiles/", "http://webfiles.gacsource.net/", $file));




if($membre_morale->email_membre != ""){

$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Bon de Livraison : BL'.ajoutezero($entry->livraison_id).' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($membre_morale->email_membre, $membre_morale->raison_sociale);
$mail->setSubject('Bon de Livraison : BL'.ajoutezero($entry->livraison_id).' le '.$date_id->toString('dd-MM-yyyy HH:mm')); 

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 
$mail->send($tr);

}




}



if($_POST['id'] == 1 || $_POST['id'] == 2 || $_POST['id'] == 3){
	
if($_POST['id'] == 1){
	$agrement = "agrement_filiere";
}else if($_POST['id'] == 2){
	$agrement = "agrement_technopole";
}else if($_POST['id'] == 3){
	$agrement = "agrement_acnev";
}
        $utilisateurM = new Application_Model_EuUtilisateurMapper();
        $utilisateur = $utilisateurM->fetchAllByAgenceCodeGroupe($sessionutilisateur->code_agence, $agrement);
		
foreach ($utilisateur as $entryagrement):
if (substr($entryagrement->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$mapper_membre = new Application_Model_EuMembreMapper();
$mapper_membre->find($entryagrement->code_membre, $membre);
$membre_email = $membre->email_membre;
$membre_nom = $membre->nom_membre." ".$membre->prenom_membre;
} else if (substr($entryagrement->code_membre, -1) == "M") {
$membremorale = new Application_Model_EuMembreMorale();
$mapper_membremorale = new Application_Model_EuMembreMoraleMapper();
$mapper_membremorale->find($entryagrement->code_membre, $membremorale);
$membre_email = $membre->email_membre;
$membre_nom = $membre->raison_sociale;
}


if($membre_email != ""){
$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Alerte Bon de Livraison : BL'.ajoutezero($entry->livraison_id).' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($membre_email, $membre_nom);
$mail->setSubject('Alerte Bon de Livraison : BL'.ajoutezero($entry->livraison_id).' le '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);
}
endforeach;
}


			}
		endforeach;

if($_POST['id'] == 3){
		$this->_redirect('/administration/listlivraison41');
}else{
		$this->_redirect('/administration/listlivraison'.$_POST['id'].'');
	}
        }
    }









    public function bonsalaireAction() 
    {
        /* page espacepersonnel/pdfdemandefrais - Livrer demande */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

		include("Transfert.php");


	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['montant']) && $_POST['montant']!="" && isset($_POST['id_utilisateur']) && $_POST['id_utilisateur']!="" && isset($_POST['code_membre']) && $_POST['code_membre']!="") {
			
            $utilisateur = new Application_Model_EuUtilisateur();
            $m_utilisateur = new Application_Model_EuUtilisateurMapper();
            $m_utilisateur->find($_POST['id_utilisateur'], $utilisateur);
			
			$date = new Zend_Date(Zend_Date::ISO_8601);

            $membre = new Application_Model_EuMembre();
            $m_membre = new Application_Model_EuMembreMapper();
            $m_membre->find($_POST['code_membre'], $membre);





        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuLivraison();
        $ma = new Application_Model_EuLivraisonMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setLivraison_id($compteur);
            $a->setLivraison_code_produit("CNCS");
            $a->setLivraison_libelle("Bon de Salaire de ".$membre->nom_membre." ".$membre->prenom_membre);
            $a->setLivraison_montant($_POST['montant']);
            $a->setLivraison_description(NULL);
            $a->setLivraison_code_membre($_POST['code_membre']);
            $a->setLivraison_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setLivraison_utilisateur($_POST['id_utilisateur']);
            $a->setPublier(1);
            $ma->save($a);


$date_id = new Zend_Date(Zend_Date::ISO_8601);


        $validation_quittance = new Application_Model_EuValidationQuittance();
        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
			
            $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
            $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
            $validation_quittance->setValidation_quittance_utilisateur($_POST['id_utilisateur']);
            $validation_quittance->setValidation_quittance_livraison($compteur);
            $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $validation_quittance->setPublier(1);
            $validation_quittance_mapper->save($validation_quittance);

		include("Transfert.php");







$htmlpdf = "";

$htmlpdf .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
  </tr>';
	
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>N° Bon de Salaire : BS'.ajoutezero($compteur).'</u></em></strong></td>
  </tr>';
		
  		/*if($utilisateur->code_membre != ""){

        $membre_morale = new Application_Model_EuMembreMorale();
        $membre_moraleM = new Application_Model_EuMembreMoraleMapper();
        $membre_moraleM->find($utilisateur->code_membre, $membre_morale);
  
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Raison sociale </u>: </em><strong><em>'.$membre_morale->raison_sociale.'</em></strong></p></td>
  </tr>';
}*/
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left"><p><em><u>Nom et Prénom(s) </u>: </em><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></p></td>
  </tr>';

$htmlpdf .= '
  <tr>
    <td colspan="4" align="right"><strong><em>Montant Bon de Salaire : '.number_format(($_POST['montant']), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
  <tr>
    <td align="left"><em><strong>Libellé</strong></em></td>
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
    <td align="center"><em><strong>Montant</strong></em></td>
  </tr>';
  
$htmlpdf .= '
  <tr style="background-color:#999;">
    <td align="left"><em><strong>Bon de Salaire de '.$membre->nom_membre.' '.$membre->prenom_membre.'</strong></em></td>
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
    <td align="center"><em>'.number_format(($_POST['montant']), 0, ',', ' ').'</em></td>
  </tr>';

$htmlpdf .= '
  <tr>
    <td colspan="2" align="left"><em><u>Montant en  lettres </u>: '.lettre(($_POST['montant']), 50).' CFA</em></td>
    <td colspan="2" align="left">Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
  </tr>';	  
  
$htmlpdf .= '
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="left">&nbsp;</td>
  </tr>
  </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$htmlpdf .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/salaires.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_salaire/")) {
mkdir("../../webfiles/pdf_salaire/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_salaire/BONSALAIRE_".str_replace("/", "_", mettreaccents($compteur."_".$_POST['code_membre']))."_.html";
$newnom = "BONSALAIRE_".str_replace("/", "_", mettreaccents($compteur."_".$_POST['code_membre'])."_");
$newchemin = "../../webfiles/pdf_salaire/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena	= $newnom.'.pdf';

unlink($newfile);

	
		//$this->_redirect(str_replace("../../webfiles/", "http://webfiles.gacsource.net/", $file));




if($membre->email_membre != ""){

$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml("Bon de Salaire : BS".ajoutezero($compteur)." le ".$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($membre->email_membre, $membre->raison_sociale);
$mail->setSubject("Bon de Salaire : BS".ajoutezero($compteur)." le ".$date_id->toString('dd-MM-yyyy HH:mm')); 

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);
 
$mail->send($tr);

}







                $this->_redirect('/administration/detailproposition/id/'.$_POST['appel']);



			
//$sessionmembre->errorlogin = "Validation de la livraison réussie ...";			
			
			/*}else {
$sessionmembre->errorlogin = "Validation de la livraison échouée ...";			
				}*/
			
	}  else {	$this->view->error = "Les champs * sont obligatoires ...";	

            $appel = (int)$this->_request->getParam('appel');
			
            $idm = (string)$this->_request->getParam('idm');
            $idu = (int)$this->_request->getParam('idu');
            if ($idm != 0 && $idu != 0) {
			
            $utilisateur = new Application_Model_EuUtilisateur();
            $m_utilisateur = new Application_Model_EuUtilisateurMapper();
            $m_utilisateur->find($idu, $utilisateur);
			
			$date = new Zend_Date(Zend_Date::ISO_8601);

            $membre = new Application_Model_EuMembre();
            $m_membre = new Application_Model_EuMembreMapper();
            $m_membre->find($idm, $membre);

		$this->view->utilisateur = $utilisateur;
		$this->view->membre = $membre;
		
		$this->view->appel = $appel;
            }
	}
		   
	} else {

            $appel = (int)$this->_request->getParam('appel');
			
            $idm = (string)$this->_request->getParam('idm');
            $idu = (int)$this->_request->getParam('idu');
            if ($idm != 0 && $idu != 0) {
			
            $utilisateur = new Application_Model_EuUtilisateur();
            $m_utilisateur = new Application_Model_EuUtilisateurMapper();
            $m_utilisateur->find($idu, $utilisateur);
			
			$date = new Zend_Date(Zend_Date::ISO_8601);

            $membre = new Application_Model_EuMembre();
            $m_membre = new Application_Model_EuMembreMapper();
            $m_membre->find($idm, $membre);

		$this->view->utilisateur = $utilisateur;
		$this->view->membre = $membre;
		
		$this->view->appel = $appel;
            }
	}
	}





    
    public function addbanqueAction() {
		$sessionutilisateur = new Zend_Session_Namespace ( "utilisateur" );
		if (! isset ( $sessionutilisateur->login )) {
			$this->_redirect ( '/administration/login' );
		}
		$this->_helper->layout ()->setLayout ( 'layoutpublicesmcadmin' );
		$request = $this->getRequest ();
		$db = Zend_Db_Table::getDefaultAdapter ();
		$m_banque = new Application_Model_EuBanqueMapper ();
		$rows = $m_banque->fetchAll ();
		$date = new Zend_Date ( Zend_Date::ISO_8601 );
		if ($request->isPost ()) {
			$nom = $request->getParam ( "nom_banque_user" );
			$prenom = $request->getParam ( "prenom_banque_user" );
			$login = $request->getParam ( "login_banque_user" );
			$pwd = $request->getParam ( "pwd_banque_user" );
			$pwd_confirm = $request->getParam ( "c_pwd_banque_user" );
			$banque = $request->getParam ( "code_banque" );
			$role = $request->getParam ( "role" );
			if (strcmp ( $pwd, $pwd_confirm ) == 0) {
				$db->beginTransaction ();
				try {
					$user_banque = new Application_Model_EuBanqueUser ();
					$m_user_banque = new Application_Model_EuBanqueUserMapper ();
					$user_banque->setActiver ( 1 );
					$user_banque->setCodeBanque ( $banque );
					$user_banque->setLoginBanqueUser ( $login );
					$user_banque->setNomBanqueUser ( $nom );
					$user_banque->setPrenomBanqueUser ( $prenom );
					$user_banque->setPwdBanqueUser ( $pwd );
					$user_banque->setPwdChanged ( 0 );
					$user_banque->setRole ( $role );
					$user_banque->setDateCreated ( $date->toString ( "yyyy-MM-dd" ) );
					$user_banque->setIdUtilisateur ( $sessionutilisateur->id_utilisateur );
					$m_user_banque->save ( $user_banque );
					$db->commit ();
					$this->view->rows = $rows;
					$this->_redirect ( "/administration/addbanque" );
				} catch ( Exception $e ) {
					$db->rollBack ();
					$this->view->nom = $nom;
					$this->view->prenom = $prenom;
					$this->view->code_banque = $banque;
					$this->view->login = $login;
					$this->view->pwd = $pwd;
					$this->view->pwd_confirm = $pwd_confirm;
					$this->view->role = $role;
					$this->view->rows = $rows;
					$this->view->message = "Echec d'ajout d'utilisateur; Erreur :" . $e->getMessage () . "->" . $e->getTraceAsString ();
					return;
				}
			} else {
				$this->view->message = "Les mot de passe ne corresondent pas!";
				$this->view->nom = $nom;
				$this->view->prenom = $prenom;
				$this->view->code_banque = $banque;
				$this->view->login = $login;
				$this->view->pwd = $pwd;
				$this->view->pwd_confirm = $pwd_confirm;
				$this->view->role = $role;
				$this->view->rows = $rows;
				return;
			}
		} else {
			$this->view->rows = $rows;
			return;
		}
	}
	
	
	
	public function listintegrateurAction()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $integrateur = new Application_Model_EuIntegrateurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $integrateur->fetchAllByPublier(0, $sessionutilisateur->code_agence);
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAgence($sessionutilisateur->code_agence);
			}else{
        //$this->view->entries = $integrateur->fetchAllByPublier(0, "");
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
				}

        $this->view->tabletri = 1;

    }




    public function listintegrateur1Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $integrateur = new Application_Model_EuIntegrateurMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $integrateur->fetchAllByPublier(1, $sessionutilisateur->code_agence);
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAgence($sessionutilisateur->code_agence);
			}else{
        //$this->view->entries = $integrateur->fetchAllByPublier(1, "");
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
				}

        $this->view->tabletri = 1;

    }



    public function publierintegrateurAction()
    {
        /* page administration/publierintegrateur - Publier l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $integrateur = new Application_Model_EuIntegrateur();
        $integrateurM = new Application_Model_EuIntegrateurMapper();
        $integrateurM->find($id, $integrateur);
		
        $integrateur->setPublier($this->_request->getParam('publier'));
		$integrateurM->update($integrateur);
		
		
		
		
$id_integrateur = $integrateur->integrateur_id;
/*//////////////////////////////////////////
if($integrateur->integrateur_membreasso != 1){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($integrateur->integrateur_membreasso, $membreasso);
			
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;
		
        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($integrateur->integrateur_souscription);
        //$cumul_recubancaire = 0;
		
		if($cumul_recubancaire > 0){
		
		if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
			
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}else{
			
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}
			
//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_integrateur($integrateur->integrateur_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);
			
//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_integrateur($integrateur->integrateur_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);
			
//////////////////////////////////////////

}
		
			}*/
				
			
        $membreasso_sous_m = new Application_Model_EuMembreassoMapper();
        $membreasso_sous = $membreasso_sous_m->fetchAllBySouscription($integrateur->integrateur_souscription);
			
			
			
///////////////////////////////////////////////////////////////			
//if($integrateur->integrateur_type <= 8 && count($membreasso_sous) > 0){
	
        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
		$m_souscription->find($integrateur->integrateur_souscription, $souscription);

        $date_id = Zend_Date::now();

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();
			
            $compteur_association = $association_mapper->findConuter() + 1;
            $association->setAssociation_id($compteur_association);
            $association->setAssociation_mobile($souscription->souscription_mobile);
            $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
            $association->setAssociation_numero($compteur_association."INT");
            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
            $association->setAssociation_email($souscription->souscription_email);
            $association->setAssociation_recepisse(NULL);
            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $association->setId_filiere(NULL);
            $association->setCode_type_acteur(NULL);
            $association->setCode_statut(NULL);
            $association->setCode_agence($code_agence);
            $association->setPublier(1);
            $association_mapper->save($association);
			



			
        $date_id = Zend_Date::now();

        $membreasso = new Application_Model_EuMembreasso();
        $membreasso_mapper = new Application_Model_EuMembreassoMapper();
			
            $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
            $membreasso->setMembreasso_id($compteur_membreasso);
            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
            $membreasso->setMembreasso_nom($souscription->souscription_nom);
            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
            $membreasso->setMembreasso_association($compteur_association);
            $membreasso->setMembreasso_email($souscription->souscription_email);
            $membreasso->setMembreasso_login($souscription->souscription_login);
            $membreasso->setMembreasso_passe($souscription->souscription_passe);
            $membreasso->setMembreasso_type(1);
            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $membreasso->setPublier(1);
            $membreasso_mapper->save($membreasso);
			

$html = "Vous avez remplit le formulaire d'intégrateur, donc utilisez les mêmes Login et Mot de passe pour vous connecter à votre espace Intégrateur .";
$html .= "<br />";
$html .= "Login : ".$souscription->souscription_login."<br />";
$html .= "<br />";
$html .= "Mot de passe : ".$souscription->souscription_passe."<br />";
$html .= "<br />";
$html .= "Connectez vous aussi : <a href='http://prod.esmcgacsource.com/integrateur/login'>Connexion Intégrateur</a>";
$html .= "<br />";


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->setSubject('Formulaire Intégrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->send($tr);

	}


			
		
        //}

		$this->_redirect('/administration/listintegrateur');
    }
	
	
	


	
	public function listoffreurprojetAction()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $offreur_projet = new Application_Model_EuOffreurProjetMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $offreur_projet->fetchAllByPublier(0, $sessionutilisateur->code_agence);
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAgence($sessionutilisateur->code_agence);
			}else{
        //$this->view->entries = $offreur_projet->fetchAllByPublier(0, "");
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
				}

        $this->view->tabletri = 1;

    }
	
	public  function addcomptetiersAction()  {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	    if (!isset($sessionutilisateur->login))     {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		
		$request = $this->getRequest();
	    if($request->isPost())  {
	        $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
	            $souscription = new Application_Model_EuSouscription();
                $m_souscription = new Application_Model_EuSouscriptionMapper();
				$date = new Zend_Date();
		        $compte_map = new Application_Model_EuCompteMapper();
                $compte     = new Application_Model_EuCompte();
			    $sms_money  = new Application_Model_EuSmsmoney();
                $money_map  = new Application_Model_EuSmsmoneyMapper();

			    $det_sms   = new Application_Model_EuDetailSmsmoney();
			    $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			    $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			    $det_vtesms  = new Application_Model_EuDetailVentesms();

				$m_dvente = new Application_Model_EuDepotVenteMapper();
				$dvente = new Application_Model_EuDepotVente();

                $membretierscode = new Application_Model_EuMembretierscode();
                $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();
				
				$ecart = 0;
                $numero_quittance = $request->getParam("numero_quittance");
				$souscription_id = $m_souscription->findIdSouscription($numero_quittance);
				
				$fcaps = Util_Utils::getParametre('CAPS','valeur');
				
				$membre_pbf = '0000000000000000001M';
	            $code_compte_pbf = "NN-TR-".$membre_pbf;
			    $ret = $compte_map->find($code_compte_pbf,$compte);
				
				$finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
                				
	            if($finddepot == NULL) {
				  $db->rollback();
				  $sessionutilisateur->error = "Quittance non exprimée !!!";
                  return;
				}
				
				$nbre_compte = 0;
				$nbre_utilise = 0;
				$montant = 0;
				
				$m_souscription->find($souscription_id,$souscription);
				if($souscription->souscription_autonome == 1) {
			      $nbre_compte = $souscription->souscription_nombre - 1;
			    } else {
				  $nbre_compte = $souscription->souscription_nombre;
				}
				
				$m_dvente->find($finddepot->id_depot,$dvente);
				$mont_depot = $dvente->mont_depot;
				$nbre_utilise = $mont_depot / $fcaps;
				
				if(($nbre_compte - $nbre_utilise) > 0) {
				    $ecart = $nbre_compte - $nbre_utilise;
					$montant = $ecart * $fcaps;
					$codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
					
					// Traitement des produits CAPS
				    $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
				    $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
					
				    if (($lignesdetfcaps == null) || ($cumulfcaps < $montant)) {
					   $db->rollback();
				       $sessionutilisateur->error = "Solde insuffisant !!!";
                       return;
				    }
					
					$nengfcaps = $money_map->findConuter() + 1;
                    $sms_money->setNEng($nengfcaps)
                	          ->setCode_Agence(null)
                              ->setCreditAmount($montant)
                              ->setSentTo($mobile)
                              ->setMotif('CAPS')
                              ->setId_Utilisateur(null)
                              ->setCurrencyCode('XOF')
                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                              ->setFromAccount($code_compte_pbf)
                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                              ->setCreditCode($codefcaps)
                              ->setDestAccount(null)
                              ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                              ->setDestAccount_Consumed($souscription_id)
                              ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                              ->setNum_recu(null);
                    $money_map->save($sms_money);
					
					// Mise à jour du compte de transfert
				    $compte->setSolde($compte->getSolde() - $montant);
                    $compte_map->update($compte);
					
					$l = 0;
					$reste = $montant;
					$nbre_lignesdetfcaps = count($lignesdetfcaps);
	                while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
		                $lignedetfcaps = $lignesdetfcaps[$l];
                        $id = $lignedetfcaps->getId_detail_smsmoney();
						$finddetsmsmoney = $det_sms_m->find($id,$det_sms);
			            if ($reste >= $lignedetfcaps->getSolde_sms()) {
						    //Mise à jour  des lignes d'enrégistrement
                            $reste = $reste - $lignedetfcaps->getSolde_sms();
				            //insertion dans la table eu_detailventesms
						    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						               ->setId_detail_smsmoney($id)
                                       ->setCode_membre_dist($membre_pbf)
                                       ->setCode_membre(null)
                                       ->setType_tansfert('CAPS')
                                       ->setCreditcode($codefcaps)
                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                       ->setMont_vente($lignedetfcaps->getSolde_sms())
                                       ->setId_utilisateur(null)
                                       ->setCode_produit('CAPS');
                            $det_vte_sms->insert($det_vtesms->toArray());

							$lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                  ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                  ->setSolde_sms(0);
                            $det_sms_m->update($lignedetfcaps);

						} else {
	                        //Mise à jour  des lignes d'enrégistrement
							//insertion dans la table eu_detailventesms
						    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						               ->setId_detail_smsmoney($id)
                                       ->setCode_membre_dist($membre_pbf)
                                       ->setCode_membre(null)
                                       ->setType_tansfert('CAPS')
                                       ->setCreditcode($codefcaps)
                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                       ->setMont_vente($reste)
                                       ->setId_utilisateur(null)
                                       ->setCode_produit('CAPS');
                            $det_vte_sms->insert($det_vtesms->toArray());

                            $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						    $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							$lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                            $det_sms_m->update($lignedetfcaps);
						    $reste = 0;
		                }
                        $l++;
					}
					
					$m_dvente->find($finddepot->id_depot,$dvente);
	                $dvente->setMont_depot($finddepot->mont_depot + $montant);
					$dvente->setSolde_depot($finddepot->solde_depot + $montant);
                    $m_dvente->update($dvente);
					
					for($i = 0; $i < $ecart; $i++) {
						$membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
						$compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
						$membretierscode->setMembretierscode_id($compteur_membretierscode);
                        $membretierscode->setMembretierscode_membretiers(0);
                        $membretierscode->setMembretierscode_code($membretierscode_code);
                        $membretierscode->setMembretierscode_souscription($souscription_id);
                        $membretierscode->setPublier(0);
                        $membretierscode->setCode_membre(NULL);
                        $membretierscode_mapper->save($membretierscode);
	                }
					
					$db->commit();
					$sessionutilisateur->error = "Opération bien effectuée ...";
		            $this->_redirect('/administration/addcomptetiers');
					
                } else {
                    $db->rollback();
				    $sessionutilisateur->error = "Impossible d'effectuer cette opération !!!";
                    return;
                }
				
	
	        } catch (Exception $exc) {
	            $db->rollback();
				$this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                return;
	        }
	    }
	
	}
	
	
	
	
	
	public function recherchercodeactivationAction() {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	   if (!isset($sessionutilisateur->login))     {$this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation');}

          ini_set('memory_limit','1024M');
	
	   if(isset($_POST['ok']) && $_POST['ok']=="ok")   {
	      $d_souscription = new Application_Model_DbTable_EuSouscription();
		  
		  if (isset($_POST['nom_membre']) && ($_POST['nom_membre']!="") && isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!="")) {
             $nom_membre = $_POST['nom_membre'];
			 $prenom_membre = $_POST['prenom_membre'];
			 $select = $d_souscription->select();
			 $select->where('souscription_nom like ?', '%'.$nom_membre.'%');
			 $select->where('souscription_prenom like ?', '%'.$prenom_membre.'%');
			 $entries = $d_souscription->fetchAll($select);
			 $this->view->nom_membre = $nom_membre;
			 $this->view->prenom_membre = $prenom_membre;
			 $this->view->entries = $entries;  
	       } elseif(isset($_POST['nom_membre']) && ($_POST['nom_membre']!="")) {
             $nom_membre = $_POST['nom_membre'];
			 $select = $d_souscription->select();
			 $select->where('souscription_nom like ?', '%'.$nom_membre.'%');
			 $entries = $d_souscription->fetchAll($select);
			 $this->view->nom_membre = $nom_membre;
			 $this->view->entries = $entries;   
		   } elseif(isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!="")) {
             $prenom_membre = $_POST['prenom_membre'];
			 $select = $d_souscription->select();
			 $select->where('souscription_prenom like ?', '%'.$prenom_membre.'%');
			 $entries = $d_souscription->fetchAll($select);
			 $this->view->prenom_membre = $prenom_membre;
			 $this->view->entries = $entries;   
		   } 
		   elseif(isset($_POST['raison_sociale']) && ($_POST['raison_sociale']!="")) {
			   $raison_sociale = $_POST['raison_sociale'];
               $select = $d_souscription->select();
			   $select->where('souscription_raison like ?', '%'.$raison_sociale.'%');
               $results = $d_souscription->fetchAll($select);
               $this->view->raison_sociale = $raison_sociale;
               $this->view->results = $results;	   
	       } 
		   elseif(isset($_POST['code_membre']) && ($_POST['code_membre']!="")) {
			   $code_membre = $_POST['code_membre'];
               if(substr($code_membre,-1) == 'P') {
			     $select = $d_souscription->select();
			     $select->where('souscription_ancien_membre like ?','%'.$code_membre.'%');
			     $entries = $d_souscription->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->entries = $entries;
               } else {
                 $select = $d_souscription->select();
			     $select->where('souscription_ancien_membre like ?', '%'.$code_membre.'%');
			     $results = $d_souscription->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->results = $results;
               }				
			}
	   
	   }
	   $this->view->tabletri = 1;
	}
	
    public function editcmAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       if (!isset($sessionutilisateur->login))     {$this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
       
       $request = $this->getRequest ();
       if($request->isPost())  {
         $db = Zend_Db_Table::getDefaultAdapter();
         $db->beginTransaction();
         try {
              $mapper = new Application_Model_EuMembreMapper();
              $membre = new Application_Model_EuMembre();
              
              $mappermorale = new Application_Model_EuMembreMoraleMapper();
              $membremorale = new Application_Model_EuMembreMorale();
              
              $mapper_op = new Application_Model_EuOperationMapper();
              
              $code_membre = $request->getParam("code_membre");
              
              if (substr($code_membre,-1) == "P") {
                  $mapper->find($code_membre,$membre);
                  $date_nais = new Zend_Date($_POST["date_nais_membre"]);

                  $membre->setNom_membre($_POST['nom_membre']);
                  $membre->setPrenom_membre($_POST['prenom_membre']);
                  $membre->setSexe_membre($_POST['sexe_membre']);
                  $membre->setId_pays($_POST['nationalite_membre']);
                  $membre->setPere_membre($_POST['pere_membre']);
                  $membre->setMere_membre($_POST['mere_membre']);
                  $membre->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'));
                  $membre->setLieu_nais_membre($_POST['lieu_nais_membre']);
                  $membre->setPortable_membre($_POST['portable_membre']);
                  $membre->setBp_membre($_POST['bp_membre']);
                  $membre->setEmail_membre($_POST['email_membre']);
                  $membre->setFormation($_POST['formation']);
                  $membre->setNbr_enf_membre($_POST['nbr_enf_membre']);
                  $membre->setProfession_membre($_POST['profession_membre']);
                  $membre->setQuartier_membre($_POST['quartier_membre']);
                  $membre->setSitfam_membre($_POST['sitfam_membre']);
                  //$membre->setTel_membre($_POST['tel_membre']);
                  $membre->setVille_membre($_POST['ville_membre']);
                  $mapper->update($membre);
                  
                  $date_id = new Zend_Date(Zend_Date::ISO_8601);
                  $date_idd = clone $date_id;
                  
                  //$compteur = $mapper_op->findConuter() + 1;
                  //Util_Utils::addOperation($compteur,$code_membre,null,null,null, 'Modification de Compte marchand', 'MCM', 'MCM', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), $sessionutilisateur->id_utilisateur);
                  
                  $place = new Application_Model_EuOperation();
		  $mapper_op = new Application_Model_EuOperationMapper();

                  $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                  $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                  $place->setId_utilisateur($sessionutilisateur->id_utilisateur);
                  $place->setCode_membre($code_membre);
                  $place->setCode_membre_morale(null);
                  $place->setMontant_op(null);
                  $place->setCode_produit('MCM');
                  $place->setLib_op('Modification de Compte marchand');
                  $place->setType_op('MCM');
                  $place->setCode_cat(null);
                  $mapper_op->save($place);                   

         
                  $db->commit();
                  $sessionutilisateur->error = "Modification effectuée avec succès ...";
                  $this->_redirect('/administration/modifiercm');
                 
              } else {
                  $mappermorale->find($code_membre,$membremorale);
                  $membremorale->setCode_type_acteur($_POST['code_type_acteur']);
                  $membremorale->setNum_registre_membre($_POST['num_registre_membre']);
                  $membremorale->setRaison_sociale($_POST['raison_sociale']);
                  $membremorale->setCode_statut($_POST['code_statut']);
                  $membremorale->setPortable_membre($_POST['portable_membre']);
                  $membremorale->setBp_membre($_POST['bp_membre']);
                  $membremorale->setEmail_membre($_POST['email_membre']);
                  $membremorale->setDomaine_activite($_POST['domaine_activite']);
                  $membremorale->setQuartier_membre($_POST['quartier_membre']);
                  //$membremorale->setTel_membre($_POST['tel_membre']);
                  $membremorale->setVille_membre($_POST['ville_membre']);
                  $membremorale->setSite_web($_POST['site_web']);
                  $mappermorale->update($membremorale);
                  
                  $date_id = new Zend_Date(Zend_Date::ISO_8601);
                  $date_idd = clone $date_id;
                  
                  //$compteur = $mapper_op->findConuter() + 1;
                  //Util_Utils::addOperation($compteur,null,$code_membre,null,null, 'Modification de Compte marchand', 'MCM', 'MCM', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), $sessionutilisateur->id_utilisateur);
                  
                  $place = new Application_Model_EuOperation();
		  $mapper_op = new Application_Model_EuOperationMapper();

                  $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                  $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                  $place->setId_utilisateur($sessionutilisateur->id_utilisateur);
                  $place->setCode_membre(null);
                  $place->setCode_membre_morale($code_membre);
                  $place->setMontant_op(null);
                  $place->setCode_produit('MCM');
                  $place->setLib_op('Modification de Compte marchand');
                  $place->setType_op('MCM');
                  $place->setCode_cat(null);
                  $mapper_op->save($place);
 
                  $db->commit();
                  $sessionutilisateur->error = "Modification effectuée avec succès ...";
                  $this->_redirect('/administration/modifiercm');
              }

         } catch(Exception $exc) {
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             $db->rollback();
             $this->view->code_membre = $code_membre; 
             if (substr($code_membre,-1) == "P") {           
                $this->view->membre = $membre;
             } else {
                $this->view->membre = $membremorale;
             }           
             return;
         }       
       
       } else {
          $id = $this->_request->getParam('id');
          $code_membre = $id;
          if (substr($code_membre, -1) == "P") {
             $mapper = new Application_Model_EuMembreMapper();
             $membre = new Application_Model_EuMembre();
             $mapper->find($code_membre,$membre);
          } else {
             $mapper = new Application_Model_EuMembreMoraleMapper();
             $membre = new Application_Model_EuMembreMorale();
             $mapper->find($code_membre, $membre);
          }
          $this->view->code_membre = $code_membre; 
          $this->view->membre = $membre;
       }
    }
    
    
	
	public function modifiercmAction() {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

          ini_set('memory_limit','1024M');
	   
	   if(isset($_POST['ok']) && $_POST['ok']=="ok")   {
	        $d_membre = new Application_Model_DbTable_EuMembre();
		    $d_membremorale = new Application_Model_DbTable_EuMembreMorale();
		  
		    if (isset($_POST['nom_membre']) && ($_POST['nom_membre']!="") && isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!=""))  {
               $nom_membre = $_POST['nom_membre'];
			   $prenom_membre = $_POST['prenom_membre'];
			   $select = $d_membre->select();
			   $select->where('nom_membre like ?', '%'.$nom_membre.'%');
			   $select->where('prenom_membre like ?', '%'.$prenom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->nom_membre = $nom_membre;
			   $this->view->prenom_membre = $prenom_membre;
			   $this->view->entries = $entries; 
			   
	        } elseif(isset($_POST['nom_membre']) && ($_POST['nom_membre']!="")) {
               $nom_membre = $_POST['nom_membre'];
			   $select = $d_membre->select();
			   $select->where('nom_membre like ?', '%'.$nom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->nom_membre = $nom_membre;
			   $this->view->entries = $entries;
          			
			} elseif(isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!="")) {
               $prenom_membre = $_POST['prenom_membre'];
			   $select = $d_membre->select();
			   $select->where('prenom_membre like ?', '%'.$prenom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->prenom_membre = $prenom_membre;
			   $this->view->entries = $entries;		
			}
			elseif(isset($_POST['raison_sociale']) && ($_POST['raison_sociale']!="")) {
			   $raison_sociale = $_POST['raison_sociale'];
               $select = $d_membremorale->select();
			   $select->where('raison_sociale like ?', '%'.$raison_sociale.'%');
               $results = $d_membremorale->fetchAll($select);
               $this->view->raison_sociale = $raison_sociale;
               $this->view->results = $results;	
			   
			} elseif(isset($_POST['code_membre']) && ($_POST['code_membre']!="")) {
			   $code_membre = $_POST['code_membre'];
               if(substr($code_membre,19,1) == 'P') {
			     $select = $d_membre->select();
			     $select->where('code_membre like ?', '%'.$code_membre.'%');
			     $entries = $d_membre->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->entries = $entries;
               } else {
                 $select = $d_membremorale->select();
			     $select->where('code_membre_morale like ?', '%'.$code_membre.'%');
			     $results = $d_membremorale->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->results = $results;
               }				
			}
       }
	   
	   $this->view->tabletri = 1;
	}
	
	
	
	
	public function rechercheractivationAction()   {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	   if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
          ini_set('memory_limit','1024M');
		
       if(isset($_POST['ok']) && $_POST['ok']=="ok")   {
	        $d_membre = new Application_Model_DbTable_EuMembre();
		    $d_membremorale = new Application_Model_DbTable_EuMembreMorale();
		  
		    if (isset($_POST['nom_membre']) && ($_POST['nom_membre']!="") && isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!=""))  {
               $nom_membre = $_POST['nom_membre'];
			   $prenom_membre = $_POST['prenom_membre'];
			   $select = $d_membre->select();
			   $select->where('nom_membre like ?', '%'.$nom_membre.'%');
			   $select->where('prenom_membre like ?', '%'.$prenom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->nom_membre = $nom_membre;
			   $this->view->prenom_membre = $prenom_membre;
			   $this->view->entries = $entries; 
			   
	        } elseif(isset($_POST['nom_membre']) && ($_POST['nom_membre']!="")) {
               $nom_membre = $_POST['nom_membre'];
			   $select = $d_membre->select();
			   $select->where('nom_membre like ?', '%'.$nom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->nom_membre = $nom_membre;
			   $this->view->entries = $entries;
          			
			} elseif(isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!="")) {
               $prenom_membre = $_POST['prenom_membre'];
			   $select = $d_membre->select();
			   $select->where('prenom_membre like ?', '%'.$prenom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->prenom_membre = $prenom_membre;
			   $this->view->entries = $entries;		
			}
			elseif(isset($_POST['raison_sociale']) && ($_POST['raison_sociale']!="")) {
			   $raison_sociale = $_POST['raison_sociale'];
               $select = $d_membremorale->select();
			   $select->where('raison_sociale like ?', '%'.$raison_sociale.'%');
               $results = $d_membremorale->fetchAll($select);
               $this->view->raison_sociale = $raison_sociale;
               $this->view->results = $results;	
			   
			} elseif(isset($_POST['code_membre']) && ($_POST['code_membre']!="")) {
			   $code_membre = $_POST['code_membre'];
               if(substr($code_membre,19,1) == 'P') {
			     $select = $d_membre->select();
			     $select->where('code_membre like ?', '%'.$code_membre.'%');
			     $entries = $d_membre->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->entries = $entries;
               } else {
                 $select = $d_membremorale->select();
			     $select->where('code_membre_morale like ?', '%'.$code_membre.'%');
			     $results = $d_membremorale->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->results = $results;
               }				
			}
       }	   
       $this->view->tabletri = 1;		      
	}
	
	
	




    public function listoffreurprojet1Action()
    {
        /* page administration/listlivraison - Liste des livraisons */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $offreur_projet = new Application_Model_EuOffreurProjetMapper();
        if($sessionutilisateur->code_agence != "001001001001"){
        //$this->view->entries = $offreur_projet->fetchAllByPublier(1, $sessionutilisateur->code_agence);
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAgence($sessionutilisateur->code_agence);
			}else{
        //$this->view->entries = $offreur_projet->fetchAllByPublier(1, "");
        $agence = new Application_Model_EuAgenceMapper();
        $this->view->entries = $agence->fetchAllByAssociation();
				}

        $this->view->tabletri = 1;

    }

    public function publieroffreurprojetAction()
    {
        /* page administration/publieroffreur_projet - Publier l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $offreur_projet = new Application_Model_EuOffreurProjet();
        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
        $offreur_projetM->find($id, $offreur_projet);
		
        $offreur_projet->setPublier($this->_request->getParam('publier'));
		$offreur_projetM->update($offreur_projet);
		
		
		
		
$id_offreur_projet = $offreur_projet->offreur_projet_id;
/*//////////////////////////////////////////
if($offreur_projet->offreur_projet_membreasso != 1){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);
			
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;
		
        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($offreur_projet->offreur_projet_souscription);
        //$cumul_recubancaire = 0;
		
		if($cumul_recubancaire > 0){

		
		if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
			
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}else{
			
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}
			
//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_offreur_projet($id_offreur_projet);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);
			
//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_offreur_projet($id_offreur_projet);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);
			
//////////////////////////////////////////

}
}*/
			
			
        $membreasso_sous_m = new Application_Model_EuMembreassoMapper();
        $membreasso_sous = $membreasso_sous_m->fetchAllBySouscription($offreur_projet->offreur_projet_souscription);
			
			
			
///////////////////////////////////////////////////////////////			
//if($offreur_projet->offreur_projet_type <= 8 && count($membreasso_sous) > 0){
	
        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
		$m_souscription->find($offreur_projet->offreur_projet_souscription, $souscription);

        $date_id = Zend_Date::now();

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();
			
            $compteur_association = $association_mapper->findConuter() + 1;
            $association->setAssociation_id($compteur_association);
            $association->setAssociation_mobile($souscription->souscription_mobile);
            $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
            $association->setAssociation_numero($compteur_association."OFFR");
            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
            $association->setAssociation_email($souscription->souscription_email);
            $association->setAssociation_recepisse(NULL);
            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $association->setId_filiere(NULL);
            $association->setCode_type_acteur(NULL);
            $association->setCode_statut(NULL);
            $association->setCode_agence($code_agence);
            $association->setPublier(1);
            $association_mapper->save($association);
			



			
        $date_id = Zend_Date::now();

        $membreasso = new Application_Model_EuMembreasso();
        $membreasso_mapper = new Application_Model_EuMembreassoMapper();
			
            $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
            $membreasso->setMembreasso_id($compteur_membreasso);
            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
            $membreasso->setMembreasso_nom($souscription->souscription_nom);
            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
            $membreasso->setMembreasso_association($compteur_association);
            $membreasso->setMembreasso_email($souscription->souscription_email);
            $membreasso->setMembreasso_login($souscription->souscription_login);
            $membreasso->setMembreasso_passe($souscription->souscription_passe);
            $membreasso->setMembreasso_type(1);
            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $membreasso->setPublier(1);
            $membreasso_mapper->save($membreasso);
			

$html = "Vous avez remplit le formulaire d'offreur de projet, donc utilisez les mêmes Login et Mot de passe pour vous connecter à votre espace Intégrateur .";
$html .= "<br />";
$html .= "Login : ".$souscription->souscription_login."<br />";
$html .= "<br />";
$html .= "Mot de passe : ".$souscription->souscription_passe."<br />";
$html .= "<br />";
$html .= "Connectez vous aussi : <a href='http://prod.esmcgacsource.com/integrateur/login'>Connexion Intégrateur</a>";
$html .= "<br />";


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->setSubject('Formulaire offreur de projet : '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->send($tr);

	//}


			
		
		
        }

		$this->_redirect('/administration/listoffreurprojet');
    }
	
	
	









    public function listsouscriptiontableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['souscription_type']) && $_POST['souscription_type']!="")
     || (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!="")
      || (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="")
       || (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0)
        || (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="")
         || (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0)
         || (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=NULL)
          || (isset($_POST['type_acteur']) && $_POST['type_acteur']!="")
           || (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!="")
            || (isset($_POST['code_activite']) && $_POST['code_activite']>0)
             || (isset($_POST['id_metier']) && $_POST['id_metier']>0)
              || (isset($_POST['id_competence']) && $_POST['id_competence']>0)
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['souscription_type']) && $_POST['souscription_type']!=""){$souscription_type = $_POST['souscription_type'];}else{$souscription_type = "";}
if (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!=""){$souscription_banque = $_POST['souscription_banque'];}else{$souscription_banque = "";}
if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""){$souscription_personne = $_POST['souscription_personne'];}else{$souscription_personne = "";}
if (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0){$souscription_nombre = $_POST['souscription_nombre'];}else{$souscription_nombre = 0;}
if (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""){$souscription_programme = $_POST['souscription_programme'];}else{$souscription_programme = "";}
if (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0){$souscription_type_candidat = $_POST['souscription_type_candidat'];}else{$souscription_type_candidat = 0;}
if (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=""){$souscription_ancien_membre = $_POST['souscription_ancien_membre'];}else{$souscription_ancien_membre = NULL;}
if (isset($_POST['type_acteur']) && $_POST['type_acteur']!=""){$code_type_acteur = $_POST['type_acteur'];}else{$code_type_acteur = "";}
if (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!=""){$code_statut = $_POST['statut_juridique'];}else{$code_statut = "";}
if (isset($_POST['code_activite']) && $_POST['code_activite']>0){$code_activite = $_POST['code_activite'];}else{$code_activite = 0;}
if (isset($_POST['id_metier']) && $_POST['id_metier']>0){$id_metier = $_POST['id_metier'];}else{$id_metier = 0;}
if (isset($_POST['id_competence']) && $_POST['id_competence']>0){$id_competence = $_POST['id_competence'];}else{$id_competence = 0;}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}





        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllByTableauBord(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);

        $this->view->entriesnombre = $souscription->fetchAllByTableauBordNombre(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);

        $this->view->entriestotal = $souscription->fetchAllByTableauBordTotal(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);
    }
    }
        $this->view->tabletri = 1;

    }











    public function listsouscriptiontableaudebordreactivationAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['souscription_type']) && $_POST['souscription_type']!="")
     || (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!="")
      || (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="")
       || (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0)
        || (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="")
         || (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0)
         || (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=NULL)
          || (isset($_POST['type_acteur']) && $_POST['type_acteur']!="")
           || (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!="")
            || (isset($_POST['code_activite']) && $_POST['code_activite']>0)
             || (isset($_POST['id_metier']) && $_POST['id_metier']>0)
              || (isset($_POST['id_competence']) && $_POST['id_competence']>0)
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['souscription_type']) && $_POST['souscription_type']!=""){$souscription_type = $_POST['souscription_type'];}else{$souscription_type = "";}
if (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!=""){$souscription_banque = $_POST['souscription_banque'];}else{$souscription_banque = "";}
if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""){$souscription_personne = $_POST['souscription_personne'];}else{$souscription_personne = "";}
if (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0){$souscription_nombre = $_POST['souscription_nombre'];}else{$souscription_nombre = 0;}
if (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""){$souscription_programme = $_POST['souscription_programme'];}else{$souscription_programme = "";}
if (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0){$souscription_type_candidat = $_POST['souscription_type_candidat'];}else{$souscription_type_candidat = 0;}
if (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=""){$souscription_ancien_membre = $_POST['souscription_ancien_membre'];}else{$souscription_ancien_membre = NULL;}
if (isset($_POST['type_acteur']) && $_POST['type_acteur']!=""){$code_type_acteur = $_POST['type_acteur'];}else{$code_type_acteur = "";}
if (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!=""){$code_statut = $_POST['statut_juridique'];}else{$code_statut = "";}
if (isset($_POST['code_activite']) && $_POST['code_activite']>0){$code_activite = $_POST['code_activite'];}else{$code_activite = 0;}
if (isset($_POST['id_metier']) && $_POST['id_metier']>0){$id_metier = $_POST['id_metier'];}else{$id_metier = 0;}
if (isset($_POST['id_competence']) && $_POST['id_competence']>0){$id_competence = $_POST['id_competence'];}else{$id_competence = 0;}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}





        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllByTableauBordReactivation(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);

        $this->view->entriestotal = $souscription->fetchAllByTableauBordReactivationTotal(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);
    }
    }
        $this->view->tabletri = 1;

    }






    public function listbandetailtableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['bon_neutre_detail_montant1']) && $_POST['bon_neutre_detail_montant1']>0)
     || (isset($_POST['bon_neutre_detail_montant2']) && $_POST['bon_neutre_detail_montant2']>0)
      || (isset($_POST['bon_neutre_code_membre']) && $_POST['bon_neutre_code_membre']!="")
       || (isset($_POST['bon_neutre_detail_banque']) && $_POST['bon_neutre_detail_banque']!="")
        || (isset($_POST['bon_neutre_detail_date1']) && $_POST['bon_neutre_detail_date1']!="")
         || (isset($_POST['bon_neutre_detail_date2']) && $_POST['bon_neutre_detail_date2']!="")
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['bon_neutre_detail_montant1']) && $_POST['bon_neutre_detail_montant1']>0){$bon_neutre_detail_montant1 = $_POST['bon_neutre_detail_montant1'];}else{$bon_neutre_detail_montant1 = 0;}
if (isset($_POST['bon_neutre_detail_montant2']) && $_POST['bon_neutre_detail_montant2']>0){$bon_neutre_detail_montant2 = $_POST['bon_neutre_detail_montant2'];}else{$bon_neutre_detail_montant2 = 0;}
if (isset($_POST['bon_neutre_code_membre']) && $_POST['bon_neutre_code_membre']!=""){$bon_neutre_code_membre = $_POST['bon_neutre_code_membre'];}else{$bon_neutre_code_membre = "";}
if (isset($_POST['bon_neutre_detail_banque']) && $_POST['bon_neutre_detail_banque']!=""){$bon_neutre_detail_banque = $_POST['bon_neutre_detail_banque'];}else{$bon_neutre_detail_banque = "";}
if (isset($_POST['bon_neutre_detail_date1']) && $_POST['bon_neutre_detail_date1']!=""){$bon_neutre_detail_date1 = $_POST['bon_neutre_detail_date1'];}else{$bon_neutre_detail_date1 = "";}
if (isset($_POST['bon_neutre_detail_date2']) && $_POST['bon_neutre_detail_date2']!=""){$bon_neutre_detail_date2 = $_POST['bon_neutre_detail_date2'];}else{$bon_neutre_detail_date2 = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}
if (isset($_POST['bon_neutre_tiers_id']) && $_POST['bon_neutre_tiers_id']!=""){$bon_neutre_tiers_id = $_POST['bon_neutre_tiers_id'];}else{$bon_neutre_tiers_id = 0;}





        $bon_neutre_detail = new Application_Model_EuBonNeutreDetailMapper();
        $this->view->entries = $bon_neutre_detail->fetchAllByTableauBord($bon_neutre_detail_montant1, $bon_neutre_detail_montant2, $bon_neutre_code_membre, $bon_neutre_detail_banque, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $bon_neutre_tiers_id, $bon_neutre_detail_date1, $bon_neutre_detail_date2);

        $this->view->entriestotal = $bon_neutre_detail->fetchAllByTableauBordTotal($bon_neutre_detail_montant1, $bon_neutre_detail_montant2, $bon_neutre_code_membre, $bon_neutre_detail_banque, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $bon_neutre_tiers_id, $bon_neutre_detail_date1, $bon_neutre_detail_date2);
    }
    }
        $this->view->tabletri = 1;

    }






    public function listmembretableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['code_membre']) && $_POST['code_membre']!="")
     || (isset($_POST['nom_membre']) && $_POST['nom_membre']!="")
      || (isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="")
       || (isset($_POST['profession_membre']) && $_POST['profession_membre']!="")
        || (isset($_POST['formation']) && $_POST['formation']!="")
         || (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="")
         || (isset($_POST['ville_membre']) && $_POST['ville_membre']!="")
          || (isset($_POST['date_identification1']) && $_POST['date_identification1']!="")
           || (isset($_POST['date_identification2']) && $_POST['date_identification2']!="")
            || (isset($_POST['code_agence']) && $_POST['code_agence']!="")
             || (isset($_POST['id_religion_membre']) && $_POST['id_religion_membre']>0)
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['code_membre']) && $_POST['code_membre']!=""){$code_membre = $_POST['code_membre'];}else{$code_membre = "";}
if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""){$nom_membre = $_POST['nom_membre'];}else{$nom_membre = "";}
if (isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""){$sexe_membre = $_POST['sexe_membre'];}else{$sexe_membre = "";}
if (isset($_POST['profession_membre']) && $_POST['profession_membre']!=""){$profession_membre = $_POST['profession_membre'];}else{$profession_membre = "";}
if (isset($_POST['formation']) && $_POST['formation']!=""){$formation = $_POST['formation'];}else{$formation = "";}
if (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""){$quartier_membre = $_POST['quartier_membre'];}else{$quartier_membre = "";}
if (isset($_POST['ville_membre']) && $_POST['ville_membre']!=""){$ville_membre = $_POST['ville_membre'];}else{$ville_membre = "";}
if (isset($_POST['date_identification1']) && $_POST['date_identification1']!=""){$date_identification1 = $_POST['date_identification1'];}else{$date_identification1 = "";}
if (isset($_POST['date_identification2']) && $_POST['date_identification2']!=""){$date_identification2 = $_POST['date_identification2'];}else{$date_identification2 = "";}
if (isset($_POST['code_agence']) && $_POST['code_agence']!=""){$code_agence = $_POST['code_agence'];}else{$code_agence = "";}
if (isset($_POST['id_religion_membre']) && $_POST['id_religion_membre']>0){$id_religion_membre = $_POST['id_religion_membre'];}else{$id_religion_membre = 0;}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}
if (isset($_POST['auto_enroler']) && $_POST['auto_enroler']!=""){$auto_enroler = $_POST['auto_enroler'];}else{$auto_enroler = "";}
if (isset($_POST['etat_membre']) && $_POST['etat_membre']!=""){$etat_membre = $_POST['etat_membre'];}else{$etat_membre = "";}


        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries = $membre->fetchAllByTableauBord($code_membre, $nom_membre, $sexe_membre, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $profession_membre, $formation, $quartier_membre, $ville_membre, $date_identification1, $date_identification2, $code_agence, $id_religion_membre, $auto_enroler, $etat_membre);

    }
    }
        $this->view->tabletri = 1;

    }









    public function listmembremoraletableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['code_membre_morale']) && $_POST['code_membre_morale']!="")
     || (isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="")
      || (isset($_POST['id_filiere']) && $_POST['id_filiere']>0)
       || (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="")
        || (isset($_POST['code_statut']) && $_POST['code_statut']!="")
         || (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="")
         || (isset($_POST['ville_membre']) && $_POST['ville_membre']!="")
          || (isset($_POST['date_identification1']) && $_POST['date_identification1']!="")
           || (isset($_POST['date_identification2']) && $_POST['date_identification2']!="")
            || (isset($_POST['code_agence']) && $_POST['code_agence']!="")
             || (isset($_POST['domaine_activite']) && $_POST['domaine_activite']!="")
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['code_membre_morale']) && $_POST['code_membre_morale']!=""){$code_membre_morale = $_POST['code_membre_morale'];}else{$code_membre_morale = "";}
if (isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""){$raison_sociale = $_POST['raison_sociale'];}else{$raison_sociale = "";}
if (isset($_POST['id_filiere']) && $_POST['id_filiere']>0){$id_filiere = $_POST['id_filiere'];}else{$id_filiere = 0;}
if (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""){$code_type_acteur = $_POST['code_type_acteur'];}else{$code_type_acteur = "";}
if (isset($_POST['code_statut']) && $_POST['code_statut']!=""){$code_statut = $_POST['code_statut'];}else{$code_statut = "";}
if (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""){$quartier_membre = $_POST['quartier_membre'];}else{$quartier_membre = "";}
if (isset($_POST['ville_membre']) && $_POST['ville_membre']!=""){$ville_membre = $_POST['ville_membre'];}else{$ville_membre = "";}
if (isset($_POST['date_identification1']) && $_POST['date_identification1']!=""){$date_identification1 = $_POST['date_identification1'];}else{$date_identification1 = "";}
if (isset($_POST['date_identification2']) && $_POST['date_identification2']!=""){$date_identification2 = $_POST['date_identification2'];}else{$date_identification2 = "";}
if (isset($_POST['code_agence']) && $_POST['code_agence']!=""){$code_agence = $_POST['code_agence'];}else{$code_agence = "";}
if (isset($_POST['domaine_activite']) && $_POST['domaine_activite']!=""){$domaine_activite = $_POST['domaine_activite'];}else{$domaine_activite = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}
if (isset($_POST['auto_enroler']) && $_POST['auto_enroler']!=""){$auto_enroler = $_POST['auto_enroler'];}else{$auto_enroler = "";}
if (isset($_POST['etat_membre']) && $_POST['etat_membre']!=""){$etat_membre = $_POST['etat_membre'];}else{$etat_membre = "";}


        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $membremorale->fetchAllByTableauBord($code_membre_morale, $raison_sociale, $id_filiere, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $code_type_acteur, $code_statut, $quartier_membre, $ville_membre, $date_identification1, $date_identification2, $code_agence, $domaine_activite, $auto_enroler, $etat_membre);

    }
    }
        $this->view->tabletri = 1;

    }







    public function listintegrateurtableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['integrateur_type']) && $_POST['integrateur_type']>0)
     || (isset($_POST['integrateur_membreasso']) && $_POST['integrateur_membreasso']>0)
      || (isset($_POST['integrateur_association']) && $_POST['integrateur_association']>0)
       || (isset($_POST['code_membre']) && $_POST['code_membre']!="")
        || (isset($_POST['integrateur_ville']) && $_POST['integrateur_ville']>0)
         || (isset($_POST['integrateur_date1']) && $_POST['integrateur_date1']!="")
         || (isset($_POST['integrateur_date2']) && $_POST['integrateur_date2']!="")
             || (isset($_POST['integrateur_canton']) && $_POST['integrateur_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){

if (isset($_POST['integrateur_type']) && $_POST['integrateur_type']>0){$integrateur_type = $_POST['integrateur_type'];}else{$integrateur_type = 0;}
if (isset($_POST['integrateur_membreasso']) && $_POST['integrateur_membreasso']>0){$integrateur_membreasso = $_POST['integrateur_membreasso'];}else{$integrateur_membreasso = 0;}
if (isset($_POST['integrateur_association']) && $_POST['integrateur_association']>0){$integrateur_association = $_POST['integrateur_association'];}else{$integrateur_association = 0;}
if (isset($_POST['code_membre']) && $_POST['code_membre']!=""){$code_membre = $_POST['code_membre'];}else{$code_membre = "";}
if (isset($_POST['integrateur_ville']) && $_POST['integrateur_ville']>0){$integrateur_ville = $_POST['integrateur_ville'];}else{$integrateur_ville = 0;}
if (isset($_POST['integrateur_date1']) && $_POST['integrateur_date1']!=""){$integrateur_date1 = $_POST['integrateur_date1'];}else{$integrateur_date1 = "";}
if (isset($_POST['integrateur_date2']) && $_POST['integrateur_date2']!=""){$integrateur_date2 = $_POST['integrateur_date2'];}else{$integrateur_date2 = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$integrateur_canton = $_POST['id_canton'];}else{$integrateur_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}

$publier = 1;

        $integrateur = new Application_Model_EuIntegrateurMapper();
        $this->view->entries = $integrateur->fetchAllByTableauBord($publier, $integrateur_type, $integrateur_membreasso, $integrateur_association, $code_membre, $integrateur_ville, $integrateur_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $integrateur_date1, $integrateur_date2);
       
    }
    }
        $this->view->tabletri = 1;

    }









    public function listoffreurprojettableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']>0)
     || (isset($_POST['offreur_projet_membreasso']) && $_POST['offreur_projet_membreasso']>0)
      || (isset($_POST['offreur_projet_association']) && $_POST['offreur_projet_association']>0)
       || (isset($_POST['offreur_projet_code_membre']) && $_POST['offreur_projet_code_membre']!="")
       || (isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!="")
        || (isset($_POST['offreur_projet_ville']) && $_POST['offreur_projet_ville']>0)
         || (isset($_POST['offreur_projet_date1']) && $_POST['offreur_projet_date1']!="")
         || (isset($_POST['offreur_projet_date2']) && $_POST['offreur_projet_date2']!="")
             || (isset($_POST['offreur_projet_canton']) && $_POST['offreur_projet_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){

if (isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']>0){$offreur_projet_type = $_POST['offreur_projet_type'];}else{$offreur_projet_type = 0;}
if (isset($_POST['offreur_projet_membreasso']) && $_POST['offreur_projet_membreasso']>0){$offreur_projet_membreasso = $_POST['offreur_projet_membreasso'];}else{$offreur_projet_membreasso = 0;}
if (isset($_POST['offreur_projet_association']) && $_POST['offreur_projet_association']>0){$offreur_projet_association = $_POST['offreur_projet_association'];}else{$offreur_projet_association = 0;}
if (isset($_POST['offreur_projet_code_membre']) && $_POST['offreur_projet_code_membre']!=""){$offreur_projet_code_membre = $_POST['offreur_projet_code_membre'];}else{$offreur_projet_code_membre = "";}
if (isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""){$offreur_projet_produit = $_POST['offreur_projet_produit'];}else{$offreur_projet_produit = "";}
if (isset($_POST['offreur_projet_ville']) && $_POST['offreur_projet_ville']>0){$offreur_projet_ville = $_POST['offreur_projet_ville'];}else{$offreur_projet_ville = 0;}
if (isset($_POST['offreur_projet_date1']) && $_POST['offreur_projet_date1']!=""){$offreur_projet_date1 = $_POST['offreur_projet_date1'];}else{$offreur_projet_date1 = "";}
if (isset($_POST['offreur_projet_date2']) && $_POST['offreur_projet_date2']!=""){$offreur_projet_date2 = $_POST['offreur_projet_date2'];}else{$offreur_projet_date2 = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$offreur_projet_canton = $_POST['id_canton'];}else{$offreur_projet_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}

$publier = 1;

        $offreur_projet = new Application_Model_EuOffreurProjetMapper();
        $this->view->entries = $offreur_projet->fetchAllByTableauBord($publier, $offreur_projet_type, $offreur_projet_membreasso, $offreur_projet_association, $offreur_projet_code_membre, $offreur_projet_produit, $offreur_projet_ville, $offreur_projet_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $offreur_projet_date1, $offreur_projet_date2);
       
    }
    }
        $this->view->tabletri = 1;

    }
















    public function listcountfstableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['origine_fs']) && $_POST['origine_fs']!="")
     || (isset($_POST['date_fs1']) && $_POST['date_fs1']!="")
         || (isset($_POST['date_fs2']) && $_POST['date_fs2']!="")
             ){

if (isset($_POST['origine_fs']) && $_POST['origine_fs']!=""){$origine_fs = $_POST['origine_fs'];}else{$origine_fs = "";}
if (isset($_POST['date_fs1']) && $_POST['date_fs1']!=""){$date_fs1 = $_POST['date_fs1'];}else{$date_fs1 = "";}
if (isset($_POST['date_fs2']) && $_POST['date_fs2']!=""){$date_fs2 = $_POST['date_fs2'];}else{$date_fs2 = "";}

                $tablefs = new Application_Model_DbTable_EuFs();
                $select1 = $tablefs->select();
                $select1->from($tablefs, array('COUNT(code_fs) as NOMBRE', 'SUM(mont_fs) as SOMME', "date_fs"));
                if($origine_fs != "") {
                $select1->where("origine_fs LIKE ? ", $origine_fs);
                }
                $select1->where("date_fs BETWEEN '".$date_fs1."' AND '".$date_fs2."'  ");
                $select1->group("date_fs");
                $this->view->entries = $tablefs->fetchAll($select1);
       


                $tablefs2 = new Application_Model_DbTable_EuFs();
                $select2 = $tablefs2->select();
                $select2->from($tablefs2, array('COUNT(code_fs) as NOMBRE', 'SUM(mont_fs) as SOMME'));
                if($origine_fs != "") {
                $select2->where("origine_fs LIKE ? ", $origine_fs);
                }
                $select2->where("date_fs BETWEEN '".$date_fs1."' AND '".$date_fs2."'  ");
                $this->view->entriestotal = $tablefs2->fetchRow($select2);

    }
    }
        $this->view->tabletri = 1;

    }



public function listcountfltableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['origine_fl']) && $_POST['origine_fl']!="")
     || (isset($_POST['date_fl1']) && $_POST['date_fl1']!="")
         || (isset($_POST['date_fl2']) && $_POST['date_fl2']!="")
             ){

if (isset($_POST['origine_fl']) && $_POST['origine_fl']!=""){$origine_fl = $_POST['origine_fl'];}else{$origine_fl = "";}
if (isset($_POST['date_fl1']) && $_POST['date_fl1']!=""){$date_fl1 = $_POST['date_fl1'];}else{$date_fl1 = "";}
if (isset($_POST['date_fl2']) && $_POST['date_fl2']!=""){$date_fl2 = $_POST['date_fl2'];}else{$date_fl2 = "";}

                $tablefl = new Application_Model_DbTable_EuFl();
                $select1 = $tablefl->select();
                $select1->from($tablefl, array('COUNT(code_fl) as NOMBRE', 'SUM(mont_fl) as SOMME', "date_fl"));
                if($origine_fl != "") {
                $select1->where("origine_fl LIKE ? ", $origine_fl);
                }
                $select1->where("date_fl BETWEEN '".$date_fl1."' AND '".$date_fl2."'  ");
                $select1->group("date_fl");
                
                $this->view->entries = $tablefl->fetchAll($select1);
       


                $tablefl2 = new Application_Model_DbTable_EuFl();
                $select2 = $tablefl2->select();
                $select2->from($tablefl2, array('COUNT(code_fl) as NOMBRE', 'SUM(mont_fl) as SOMME'));
                if($origine_fl != "") {
                $select2->where("origine_fl LIKE ? ", $origine_fl);
                }
                $select2->where("date_fl BETWEEN '".$date_fl1."' AND '".$date_fl2."'  ");
                $this->view->entriestotal = $tablefl2->fetchRow($select2);

    }
    }
        $this->view->tabletri = 1;

    }




public function listcountfcpstableaudebordAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['origine_fkps']) && $_POST['origine_fkps']!="")
     || (isset($_POST['date_demande1']) && $_POST['date_demande1']!="")
         || (isset($_POST['date_demande2']) && $_POST['date_demande2']!="")
             ){

if (isset($_POST['origine_fkps']) && $_POST['origine_fkps']!=""){$origine_fkps = $_POST['origine_fkps'];}else{$origine_fkps = "";}
if (isset($_POST['date_demande1']) && $_POST['date_demande1']!=""){$date_demande1 = $_POST['date_demande1'];}else{$date_demande1 = "";}
if (isset($_POST['date_demande2']) && $_POST['date_demande2']!=""){$date_demande2 = $_POST['date_demande2'];}else{$date_demande2 = "";}

                $tablefcps = new Application_Model_DbTable_EuCartes();
                $select1 = $tablefcps->select();
                $select1->from($tablefcps, array('COUNT(id_demande) as NOMBRE', 'SUM(mont_carte) as SOMME', "date_demande"));
                if($origine_fkps != "") {
                $select1->where("origine_fkps LIKE ? ", $origine_fkps);
                }
                $select1->where("date_demande BETWEEN '".$date_demande1."' AND '".$date_demande2."'  ");
                $select1->group("date_demande");
                
                $this->view->entries = $tablefcps->fetchAll($select1);


                $tablefcps2 = new Application_Model_DbTable_EuCartes();
                $select2 = $tablefcps2->select();
                $select2->from($tablefcps2, array('COUNT(id_demande) as NOMBRE', 'SUM(mont_carte) as SOMME'));
                if($origine_fkps != "") {
                $select2->where("origine_fkps LIKE ? ", $origine_fkps);
                }
                $select2->where("date_demande BETWEEN '".$date_demande1."' AND '".$date_demande2."'  ");
                $this->view->entriestotal = $tablefcps2->fetchRow($select2);

       
    }
    }
        $this->view->tabletri = 1;

    }







/////////////////////////////////////////////////////////////////




    public function listsouscriptiontableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['souscription_type']) && $_POST['souscription_type']!="")
     || (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!="")
      || (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="")
       || (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0)
        || (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="")
         || (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0)
         || (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=NULL)
          || (isset($_POST['type_acteur']) && $_POST['type_acteur']!="")
           || (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!="")
            || (isset($_POST['code_activite']) && $_POST['code_activite']>0)
             || (isset($_POST['id_metier']) && $_POST['id_metier']>0)
              || (isset($_POST['id_competence']) && $_POST['id_competence']>0)
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['souscription_type']) && $_POST['souscription_type']!=""){$souscription_type = $_POST['souscription_type'];}else{$souscription_type = "";}
if (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!=""){$souscription_banque = $_POST['souscription_banque'];}else{$souscription_banque = "";}
if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""){$souscription_personne = $_POST['souscription_personne'];}else{$souscription_personne = "";}
if (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0){$souscription_nombre = $_POST['souscription_nombre'];}else{$souscription_nombre = 0;}
if (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""){$souscription_programme = $_POST['souscription_programme'];}else{$souscription_programme = "";}
if (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0){$souscription_type_candidat = $_POST['souscription_type_candidat'];}else{$souscription_type_candidat = 0;}
if (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=""){$souscription_ancien_membre = $_POST['souscription_ancien_membre'];}else{$souscription_ancien_membre = NULL;}
if (isset($_POST['type_acteur']) && $_POST['type_acteur']!=""){$code_type_acteur = $_POST['type_acteur'];}else{$code_type_acteur = "";}
if (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!=""){$code_statut = $_POST['statut_juridique'];}else{$code_statut = "";}
if (isset($_POST['code_activite']) && $_POST['code_activite']>0){$code_activite = $_POST['code_activite'];}else{$code_activite = 0;}
if (isset($_POST['id_metier']) && $_POST['id_metier']>0){$id_metier = $_POST['id_metier'];}else{$id_metier = 0;}
if (isset($_POST['id_competence']) && $_POST['id_competence']>0){$id_competence = $_POST['id_competence'];}else{$id_competence = 0;}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}





        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllByTableauBord(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);

        $this->view->entriesnombre = $souscription->fetchAllByTableauBordNombre(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);

        $this->view->entriestotal = $souscription->fetchAllByTableauBordTotal(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);
    }
    }
        $this->view->tabletri = 1;

    }











    public function listsouscriptiontableaudebordreactivation2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['souscription_type']) && $_POST['souscription_type']!="")
     || (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!="")
      || (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="")
       || (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0)
        || (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="")
         || (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0)
         || (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=NULL)
          || (isset($_POST['type_acteur']) && $_POST['type_acteur']!="")
           || (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!="")
            || (isset($_POST['code_activite']) && $_POST['code_activite']>0)
             || (isset($_POST['id_metier']) && $_POST['id_metier']>0)
              || (isset($_POST['id_competence']) && $_POST['id_competence']>0)
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['souscription_type']) && $_POST['souscription_type']!=""){$souscription_type = $_POST['souscription_type'];}else{$souscription_type = "";}
if (isset($_POST['souscription_banque']) && $_POST['souscription_banque']!=""){$souscription_banque = $_POST['souscription_banque'];}else{$souscription_banque = "";}
if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""){$souscription_personne = $_POST['souscription_personne'];}else{$souscription_personne = "";}
if (isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']>0){$souscription_nombre = $_POST['souscription_nombre'];}else{$souscription_nombre = 0;}
if (isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""){$souscription_programme = $_POST['souscription_programme'];}else{$souscription_programme = "";}
if (isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']>0){$souscription_type_candidat = $_POST['souscription_type_candidat'];}else{$souscription_type_candidat = 0;}
if (isset($_POST['souscription_ancien_membre']) && $_POST['souscription_ancien_membre']!=""){$souscription_ancien_membre = $_POST['souscription_ancien_membre'];}else{$souscription_ancien_membre = NULL;}
if (isset($_POST['type_acteur']) && $_POST['type_acteur']!=""){$code_type_acteur = $_POST['type_acteur'];}else{$code_type_acteur = "";}
if (isset($_POST['statut_juridique']) && $_POST['statut_juridique']!=""){$code_statut = $_POST['statut_juridique'];}else{$code_statut = "";}
if (isset($_POST['code_activite']) && $_POST['code_activite']>0){$code_activite = $_POST['code_activite'];}else{$code_activite = 0;}
if (isset($_POST['id_metier']) && $_POST['id_metier']>0){$id_metier = $_POST['id_metier'];}else{$id_metier = 0;}
if (isset($_POST['id_competence']) && $_POST['id_competence']>0){$id_competence = $_POST['id_competence'];}else{$id_competence = 0;}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}





        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllByTableauBordReactivation(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);

        $this->view->entriestotal = $souscription->fetchAllByTableauBordReactivationTotal(3, $souscription_type, $souscription_banque, $souscription_personne, $souscription_nombre, $souscription_programme, $souscription_type_candidat, $souscription_ancien_membre, $code_type_acteur, $code_statut, $code_activite, $id_metier, $id_competence, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone);
    }
    }
        $this->view->tabletri = 1;

    }






    public function listbandetailtableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['bon_neutre_detail_montant1']) && $_POST['bon_neutre_detail_montant1']>0)
     || (isset($_POST['bon_neutre_detail_montant2']) && $_POST['bon_neutre_detail_montant2']>0)
      || (isset($_POST['bon_neutre_code_membre']) && $_POST['bon_neutre_code_membre']!="")
       || (isset($_POST['bon_neutre_detail_banque']) && $_POST['bon_neutre_detail_banque']!="")
        || (isset($_POST['bon_neutre_detail_date1']) && $_POST['bon_neutre_detail_date1']!="")
         || (isset($_POST['bon_neutre_detail_date2']) && $_POST['bon_neutre_detail_date2']!="")
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['bon_neutre_detail_montant1']) && $_POST['bon_neutre_detail_montant1']>0){$bon_neutre_detail_montant1 = $_POST['bon_neutre_detail_montant1'];}else{$bon_neutre_detail_montant1 = 0;}
if (isset($_POST['bon_neutre_detail_montant2']) && $_POST['bon_neutre_detail_montant2']>0){$bon_neutre_detail_montant2 = $_POST['bon_neutre_detail_montant2'];}else{$bon_neutre_detail_montant2 = 0;}
if (isset($_POST['bon_neutre_code_membre']) && $_POST['bon_neutre_code_membre']!=""){$bon_neutre_code_membre = $_POST['bon_neutre_code_membre'];}else{$bon_neutre_code_membre = "";}
if (isset($_POST['bon_neutre_detail_banque']) && $_POST['bon_neutre_detail_banque']!=""){$bon_neutre_detail_banque = $_POST['bon_neutre_detail_banque'];}else{$bon_neutre_detail_banque = "";}
if (isset($_POST['bon_neutre_detail_date1']) && $_POST['bon_neutre_detail_date1']!=""){$bon_neutre_detail_date1 = $_POST['bon_neutre_detail_date1'];}else{$bon_neutre_detail_date1 = "";}
if (isset($_POST['bon_neutre_detail_date2']) && $_POST['bon_neutre_detail_date2']!=""){$bon_neutre_detail_date2 = $_POST['bon_neutre_detail_date2'];}else{$bon_neutre_detail_date2 = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}
if (isset($_POST['bon_neutre_tiers_id']) && $_POST['bon_neutre_tiers_id']!=""){$bon_neutre_tiers_id = $_POST['bon_neutre_tiers_id'];}else{$bon_neutre_tiers_id = 0;}





        $bon_neutre_detail = new Application_Model_EuBonNeutreDetailMapper();
        $this->view->entries = $bon_neutre_detail->fetchAllByTableauBord($bon_neutre_detail_montant1, $bon_neutre_detail_montant2, $bon_neutre_code_membre, $bon_neutre_detail_banque, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $bon_neutre_tiers_id, $bon_neutre_detail_date1, $bon_neutre_detail_date2);

        $this->view->entriestotal = $bon_neutre_detail->fetchAllByTableauBordTotal($bon_neutre_detail_montant1, $bon_neutre_detail_montant2, $bon_neutre_code_membre, $bon_neutre_detail_banque, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $bon_neutre_tiers_id, $bon_neutre_detail_date1, $bon_neutre_detail_date2);
    }
    }
        $this->view->tabletri = 1;

    }






    public function listmembretableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['code_membre']) && $_POST['code_membre']!="")
     || (isset($_POST['nom_membre']) && $_POST['nom_membre']!="")
      || (isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="")
       || (isset($_POST['profession_membre']) && $_POST['profession_membre']!="")
        || (isset($_POST['formation']) && $_POST['formation']!="")
         || (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="")
         || (isset($_POST['ville_membre']) && $_POST['ville_membre']!="")
          || (isset($_POST['date_identification1']) && $_POST['date_identification1']!="")
           || (isset($_POST['date_identification2']) && $_POST['date_identification2']!="")
            || (isset($_POST['code_agence']) && $_POST['code_agence']!="")
             || (isset($_POST['id_religion_membre']) && $_POST['id_religion_membre']>0)
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['code_membre']) && $_POST['code_membre']!=""){$code_membre = $_POST['code_membre'];}else{$code_membre = "";}
if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""){$nom_membre = $_POST['nom_membre'];}else{$nom_membre = "";}
if (isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""){$sexe_membre = $_POST['sexe_membre'];}else{$sexe_membre = "";}
if (isset($_POST['profession_membre']) && $_POST['profession_membre']!=""){$profession_membre = $_POST['profession_membre'];}else{$profession_membre = "";}
if (isset($_POST['formation']) && $_POST['formation']!=""){$formation = $_POST['formation'];}else{$formation = "";}
if (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""){$quartier_membre = $_POST['quartier_membre'];}else{$quartier_membre = "";}
if (isset($_POST['ville_membre']) && $_POST['ville_membre']!=""){$ville_membre = $_POST['ville_membre'];}else{$ville_membre = "";}
if (isset($_POST['date_identification1']) && $_POST['date_identification1']!=""){$date_identification1 = $_POST['date_identification1'];}else{$date_identification1 = "";}
if (isset($_POST['date_identification2']) && $_POST['date_identification2']!=""){$date_identification2 = $_POST['date_identification2'];}else{$date_identification2 = "";}
if (isset($_POST['code_agence']) && $_POST['code_agence']!=""){$code_agence = $_POST['code_agence'];}else{$code_agence = "";}
if (isset($_POST['id_religion_membre']) && $_POST['id_religion_membre']>0){$id_religion_membre = $_POST['id_religion_membre'];}else{$id_religion_membre = 0;}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}
if (isset($_POST['auto_enroler']) && $_POST['auto_enroler']!=""){$auto_enroler = $_POST['auto_enroler'];}else{$auto_enroler = "";}
if (isset($_POST['etat_membre']) && $_POST['etat_membre']!=""){$etat_membre = $_POST['etat_membre'];}else{$etat_membre = "";}


        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries = $membre->fetchAllByTableauBord($code_membre, $nom_membre, $sexe_membre, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $profession_membre, $formation, $quartier_membre, $ville_membre, $date_identification1, $date_identification2, $code_agence, $id_religion_membre, $auto_enroler, $etat_membre);

    }
    }
        $this->view->tabletri = 1;

    }









    public function listmembremoraletableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['code_membre_morale']) && $_POST['code_membre_morale']!="")
     || (isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="")
      || (isset($_POST['id_filiere']) && $_POST['id_filiere']>0)
       || (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="")
        || (isset($_POST['code_statut']) && $_POST['code_statut']!="")
         || (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="")
         || (isset($_POST['ville_membre']) && $_POST['ville_membre']!="")
          || (isset($_POST['date_identification1']) && $_POST['date_identification1']!="")
           || (isset($_POST['date_identification2']) && $_POST['date_identification2']!="")
            || (isset($_POST['code_agence']) && $_POST['code_agence']!="")
             || (isset($_POST['domaine_activite']) && $_POST['domaine_activite']!="")
               || (isset($_POST['id_canton']) && $_POST['id_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){


if (isset($_POST['code_membre_morale']) && $_POST['code_membre_morale']!=""){$code_membre_morale = $_POST['code_membre_morale'];}else{$code_membre_morale = "";}
if (isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""){$raison_sociale = $_POST['raison_sociale'];}else{$raison_sociale = "";}
if (isset($_POST['id_filiere']) && $_POST['id_filiere']>0){$id_filiere = $_POST['id_filiere'];}else{$id_filiere = 0;}
if (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""){$code_type_acteur = $_POST['code_type_acteur'];}else{$code_type_acteur = "";}
if (isset($_POST['code_statut']) && $_POST['code_statut']!=""){$code_statut = $_POST['code_statut'];}else{$code_statut = "";}
if (isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""){$quartier_membre = $_POST['quartier_membre'];}else{$quartier_membre = "";}
if (isset($_POST['ville_membre']) && $_POST['ville_membre']!=""){$ville_membre = $_POST['ville_membre'];}else{$ville_membre = "";}
if (isset($_POST['date_identification1']) && $_POST['date_identification1']!=""){$date_identification1 = $_POST['date_identification1'];}else{$date_identification1 = "";}
if (isset($_POST['date_identification2']) && $_POST['date_identification2']!=""){$date_identification2 = $_POST['date_identification2'];}else{$date_identification2 = "";}
if (isset($_POST['code_agence']) && $_POST['code_agence']!=""){$code_agence = $_POST['code_agence'];}else{$code_agence = "";}
if (isset($_POST['domaine_activite']) && $_POST['domaine_activite']!=""){$domaine_activite = $_POST['domaine_activite'];}else{$domaine_activite = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$id_canton = $_POST['id_canton'];}else{$id_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}
if (isset($_POST['auto_enroler']) && $_POST['auto_enroler']!=""){$auto_enroler = $_POST['auto_enroler'];}else{$auto_enroler = "";}
if (isset($_POST['etat_membre']) && $_POST['etat_membre']!=""){$etat_membre = $_POST['etat_membre'];}else{$etat_membre = "";}


        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $membremorale->fetchAllByTableauBord($code_membre_morale, $raison_sociale, $id_filiere, $id_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $code_type_acteur, $code_statut, $quartier_membre, $ville_membre, $date_identification1, $date_identification2, $code_agence, $domaine_activite, $auto_enroler, $etat_membre);

    }
    }
        $this->view->tabletri = 1;

    }





    public function listintegrateurtableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['integrateur_type']) && $_POST['integrateur_type']>0)
     || (isset($_POST['integrateur_membreasso']) && $_POST['integrateur_membreasso']>0)
      || (isset($_POST['integrateur_association']) && $_POST['integrateur_association']>0)
       || (isset($_POST['code_membre']) && $_POST['code_membre']!="")
        || (isset($_POST['integrateur_ville']) && $_POST['integrateur_ville']>0)
         || (isset($_POST['integrateur_date1']) && $_POST['integrateur_date1']!="")
         || (isset($_POST['integrateur_date2']) && $_POST['integrateur_date2']!="")
             || (isset($_POST['integrateur_canton']) && $_POST['integrateur_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){

if (isset($_POST['integrateur_type']) && $_POST['integrateur_type']>0){$integrateur_type = $_POST['integrateur_type'];}else{$integrateur_type = 0;}
if (isset($_POST['integrateur_membreasso']) && $_POST['integrateur_membreasso']>0){$integrateur_membreasso = $_POST['integrateur_membreasso'];}else{$integrateur_membreasso = 0;}
if (isset($_POST['integrateur_association']) && $_POST['integrateur_association']>0){$integrateur_association = $_POST['integrateur_association'];}else{$integrateur_association = 0;}
if (isset($_POST['code_membre']) && $_POST['code_membre']!=""){$code_membre = $_POST['code_membre'];}else{$code_membre = "";}
if (isset($_POST['integrateur_ville']) && $_POST['integrateur_ville']>0){$integrateur_ville = $_POST['integrateur_ville'];}else{$integrateur_ville = 0;}
if (isset($_POST['integrateur_date1']) && $_POST['integrateur_date1']!=""){$integrateur_date1 = $_POST['integrateur_date1'];}else{$integrateur_date1 = "";}
if (isset($_POST['integrateur_date2']) && $_POST['integrateur_date2']!=""){$integrateur_date2 = $_POST['integrateur_date2'];}else{$integrateur_date2 = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$integrateur_canton = $_POST['id_canton'];}else{$integrateur_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}

$publier = 1;

        $integrateur = new Application_Model_EuIntegrateurMapper();
        $this->view->entries = $integrateur->fetchAllByTableauBord($publier, $integrateur_type, $integrateur_membreasso, $integrateur_association, $code_membre, $integrateur_ville, $integrateur_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $integrateur_date1, $integrateur_date2);
       
    }
    }
        $this->view->tabletri = 1;

    }









    public function listoffreurprojettableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']>0)
     || (isset($_POST['offreur_projet_membreasso']) && $_POST['offreur_projet_membreasso']>0)
      || (isset($_POST['offreur_projet_association']) && $_POST['offreur_projet_association']>0)
       || (isset($_POST['offreur_projet_code_membre']) && $_POST['offreur_projet_code_membre']!="")
       || (isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!="")
        || (isset($_POST['offreur_projet_ville']) && $_POST['offreur_projet_ville']>0)
         || (isset($_POST['offreur_projet_date1']) && $_POST['offreur_projet_date1']!="")
         || (isset($_POST['offreur_projet_date2']) && $_POST['offreur_projet_date2']!="")
             || (isset($_POST['offreur_projet_canton']) && $_POST['offreur_projet_canton']>0)
                || (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0)
                 || (isset($_POST['id_region']) && $_POST['id_region']>0)
                  || (isset($_POST['id_pays']) && $_POST['id_pays']>0)
                   || (isset($_POST['code_zone']) && $_POST['code_zone']!="")){

if (isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']>0){$offreur_projet_type = $_POST['offreur_projet_type'];}else{$offreur_projet_type = 0;}
if (isset($_POST['offreur_projet_membreasso']) && $_POST['offreur_projet_membreasso']>0){$offreur_projet_membreasso = $_POST['offreur_projet_membreasso'];}else{$offreur_projet_membreasso = 0;}
if (isset($_POST['offreur_projet_association']) && $_POST['offreur_projet_association']>0){$offreur_projet_association = $_POST['offreur_projet_association'];}else{$offreur_projet_association = 0;}
if (isset($_POST['offreur_projet_code_membre']) && $_POST['offreur_projet_code_membre']!=""){$offreur_projet_code_membre = $_POST['offreur_projet_code_membre'];}else{$offreur_projet_code_membre = "";}
if (isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""){$offreur_projet_produit = $_POST['offreur_projet_produit'];}else{$offreur_projet_produit = "";}
if (isset($_POST['offreur_projet_ville']) && $_POST['offreur_projet_ville']>0){$offreur_projet_ville = $_POST['offreur_projet_ville'];}else{$offreur_projet_ville = 0;}
if (isset($_POST['offreur_projet_date1']) && $_POST['offreur_projet_date1']!=""){$offreur_projet_date1 = $_POST['offreur_projet_date1'];}else{$offreur_projet_date1 = "";}
if (isset($_POST['offreur_projet_date2']) && $_POST['offreur_projet_date2']!=""){$offreur_projet_date2 = $_POST['offreur_projet_date2'];}else{$offreur_projet_date2 = "";}
if (isset($_POST['id_canton']) && $_POST['id_canton']>0){$offreur_projet_canton = $_POST['id_canton'];}else{$offreur_projet_canton = 0;}
if (isset($_POST['id_prefecture']) && $_POST['id_prefecture']>0){$id_prefecture = $_POST['id_prefecture'];}else{$id_prefecture = 0;}
if (isset($_POST['id_region']) && $_POST['id_region']>0){$id_region = $_POST['id_region'];}else{$id_region = 0;}
if (isset($_POST['id_pays']) && $_POST['id_pays']>0){$id_pays = $_POST['id_pays'];}else{$id_pays = 0;}
if (isset($_POST['code_zone']) && $_POST['code_zone']!=""){$code_zone = $_POST['code_zone'];}else{$code_zone = "";}

$publier = 1;

        $offreur_projet = new Application_Model_EuOffreurProjetMapper();
        $this->view->entries = $offreur_projet->fetchAllByTableauBord($publier, $offreur_projet_type, $offreur_projet_membreasso, $offreur_projet_association, $offreur_projet_code_membre, $offreur_projet_produit, $offreur_projet_ville, $offreur_projet_canton, $id_prefecture, $id_region, $id_pays, $code_zone, $offreur_projet_date1, $offreur_projet_date2);
       
    }
    }
        $this->view->tabletri = 1;

    }












    public function listcountfstableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['origine_fs']) && $_POST['origine_fs']!="")
     || (isset($_POST['date_fs1']) && $_POST['date_fs1']!="")
         || (isset($_POST['date_fs2']) && $_POST['date_fs2']!="")
             ){

if (isset($_POST['origine_fs']) && $_POST['origine_fs']!=""){$origine_fs = $_POST['origine_fs'];}else{$origine_fs = "";}
if (isset($_POST['date_fs1']) && $_POST['date_fs1']!=""){$date_fs1 = $_POST['date_fs1'];}else{$date_fs1 = "";}
if (isset($_POST['date_fs2']) && $_POST['date_fs2']!=""){$date_fs2 = $_POST['date_fs2'];}else{$date_fs2 = "";}

                $tablefs = new Application_Model_DbTable_EuFs();
                $select1 = $tablefs->select();
                $select1->from($tablefs, array('COUNT(code_fs) as NOMBRE', 'SUM(mont_fs) as SOMME', "date_fs"));
                if($origine_fs != "") {
                $select1->where("origine_fs LIKE ? ", $origine_fs);
                }
                $select1->where("date_fs BETWEEN '".$date_fs1."' AND '".$date_fs2."'  ");
                $select1->group("date_fs");
                $this->view->entries = $tablefs->fetchAll($select1);
       


                $tablefs2 = new Application_Model_DbTable_EuFs();
                $select2 = $tablefs2->select();
                $select2->from($tablefs2, array('COUNT(code_fs) as NOMBRE', 'SUM(mont_fs) as SOMME'));
                if($origine_fs != "") {
                $select2->where("origine_fs LIKE ? ", $origine_fs);
                }
                $select2->where("date_fs BETWEEN '".$date_fs1."' AND '".$date_fs2."'  ");
                $this->view->entriestotal = $tablefs2->fetchRow($select2);

    }
    }
        $this->view->tabletri = 1;

    }



public function listcountfltableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['origine_fl']) && $_POST['origine_fl']!="")
     || (isset($_POST['date_fl1']) && $_POST['date_fl1']!="")
         || (isset($_POST['date_fl2']) && $_POST['date_fl2']!="")
             ){

if (isset($_POST['origine_fl']) && $_POST['origine_fl']!=""){$origine_fl = $_POST['origine_fl'];}else{$origine_fl = "";}
if (isset($_POST['date_fl1']) && $_POST['date_fl1']!=""){$date_fl1 = $_POST['date_fl1'];}else{$date_fl1 = "";}
if (isset($_POST['date_fl2']) && $_POST['date_fl2']!=""){$date_fl2 = $_POST['date_fl2'];}else{$date_fl2 = "";}

                $tablefl = new Application_Model_DbTable_EuFl();
                $select1 = $tablefl->select();
                $select1->from($tablefl, array('COUNT(code_fl) as NOMBRE', 'SUM(mont_fl) as SOMME', "date_fl"));
                if($origine_fl != "") {
                $select1->where("origine_fl LIKE ? ", $origine_fl);
                }
                $select1->where("date_fl BETWEEN '".$date_fl1."' AND '".$date_fl2."'  ");
                $select1->group("date_fl");
                
                $this->view->entries = $tablefl->fetchAll($select1);
       


                $tablefl2 = new Application_Model_DbTable_EuFl();
                $select2 = $tablefl2->select();
                $select2->from($tablefl2, array('COUNT(code_fl) as NOMBRE', 'SUM(mont_fl) as SOMME'));
                if($origine_fl != "") {
                $select2->where("origine_fl LIKE ? ", $origine_fl);
                }
                $select2->where("date_fl BETWEEN '".$date_fl1."' AND '".$date_fl2."'  ");
                $this->view->entriestotal = $tablefl2->fetchRow($select2);

    }
    }
        $this->view->tabletri = 1;

    }




public function listcountfcpstableaudebord2Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['origine_fkps']) && $_POST['origine_fkps']!="")
     || (isset($_POST['date_demande1']) && $_POST['date_demande1']!="")
         || (isset($_POST['date_demande2']) && $_POST['date_demande2']!="")
             ){

if (isset($_POST['origine_fkps']) && $_POST['origine_fkps']!=""){$origine_fkps = $_POST['origine_fkps'];}else{$origine_fkps = "";}
if (isset($_POST['date_demande1']) && $_POST['date_demande1']!=""){$date_demande1 = $_POST['date_demande1'];}else{$date_demande1 = "";}
if (isset($_POST['date_demande2']) && $_POST['date_demande2']!=""){$date_demande2 = $_POST['date_demande2'];}else{$date_demande2 = "";}

                $tablefcps = new Application_Model_DbTable_EuCartes();
                $select1 = $tablefcps->select();
                $select1->from($tablefcps, array('COUNT(id_demande) as NOMBRE', 'SUM(mont_carte) as SOMME', "date_demande"));
                if($origine_fkps != "") {
                $select1->where("origine_fkps LIKE ? ", $origine_fkps);
                }
                $select1->where("date_demande BETWEEN '".$date_demande1."' AND '".$date_demande2."'  ");
                $select1->group("date_demande");
                
                $this->view->entries = $tablefcps->fetchAll($select1);


                $tablefcps2 = new Application_Model_DbTable_EuCartes();
                $select2 = $tablefcps2->select();
                $select2->from($tablefcps2, array('COUNT(id_demande) as NOMBRE', 'SUM(mont_carte) as SOMME'));
                if($origine_fkps != "") {
                $select2->where("origine_fkps LIKE ? ", $origine_fkps);
                }
                $select2->where("date_demande BETWEEN '".$date_demande1."' AND '".$date_demande2."'  ");
                $this->view->entriestotal = $tablefcps2->fetchRow($select2);

       
    }
    }
        $this->view->tabletri = 1;

    }










    public function listmembretableaudebord3Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if ((isset($_POST['periode']) && $_POST['periode']!="") || ((isset($_POST['date_identification1']) && $_POST['date_identification1']!="")
           && (isset($_POST['date_identification2']) && $_POST['date_identification2']!=""))){



if (isset($_POST['periode']) && $_POST['periode']!=""){
list($debut, $fin) = explode("/", $_POST['periode']);

    $date_identification1 = $debut;
    $date_identification2 = $fin;
}else{
    
if (isset($_POST['date_identification1']) && $_POST['date_identification1']!=""){$date_identification1 = $_POST['date_identification1'];}else{$date_identification1 = "";}
if (isset($_POST['date_identification2']) && $_POST['date_identification2']!=""){$date_identification2 = $_POST['date_identification2'];}else{$date_identification2 = "";}
}


        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries_membre2 = $membre->fetchAllByTableauBord("", "", "", 0, 0, 0, 0, "", "", "", "", "", $date_identification1, $date_identification2, "", 0, "O", "N");

        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries_membre3 = $membre->fetchAllByTableauBord("", "", "", 0, 0, 0, 0, "", "", "", "", "", $date_identification1, $date_identification2, "", 0, "N", "N");

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries_membremorale2 = $membremorale->fetchAllByTableauBord("", "", 0, 0, 0, 0, 0, "", "", "", "", "", $date_identification1, $date_identification2, "", "", "O", "N");

    }
    }
        $this->view->tabletri = 1;

    }













    public function editsouscriptionAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            			$id = (int)$this->_request->getParam('id');
	
	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="" 
			    && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!="" 
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!="" 
				&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="" 
				//&& isset($_POST['code_activite']) && $_POST['code_activite']!="" 
				&& isset($_POST['souscription_type']) && $_POST['souscription_type']!="" 
				&& isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="" 
				&& isset($_POST['souscription_date_numero']) && $_POST['souscription_date_numero']!="" 
				&& isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!="" 
				&& isset($_POST['souscription_montant']) && $_POST['souscription_montant']!="") {
		
		            /*$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {*/
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()
													->where('souscription_id != ?',$_POST['souscription_id'])
													->where('souscription_login = ?',$_POST['souscription_login'])
													->where('souscription_passe = ?',$_POST['souscription_passe']);
	                    if ($rowseusouscription = $eusouscription->fetchRow($select) && ($_POST['souscription_login'] != "" && $_POST['souscription_login'] != NULL)) {
                            $sessionutilisateur->error = "Login déjà existant ...";
		 
            $id = $_POST['souscription_id'];
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	                    }  else if($_POST['souscription_passe'] != $_POST['confirme']) {
                            $sessionutilisateur->error = "Mot de passe incorret ...";
		 
            $id = $_POST['souscription_id'];
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	                    } else {
						    $date_id = Zend_Date::now();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();
							$souscription_mapper->find($_POST['souscription_id'], $souscription);
		
		                    include("Transfert.php");
		                    if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
		                        $chemin	= "souscriptions";
		                        $file = $_FILES['souscription_vignette']['name'];
		                        $file1='souscription_vignette';
		                        $souscription_vignette = $chemin."/".transfert($chemin,$file1);
							} else {$souscription_vignette = $_POST['souscription_vignetteold'];}
							
							
							

							//$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne($_POST['souscription_personne']);
			                if($_POST['souscription_personne'] == "PP") {
                                $souscription->setSouscription_nom($_POST['souscription_nom']);
                                $souscription->setSouscription_prenom($_POST['souscription_prenom']);
			                } else {
                                $souscription->setSouscription_raison($_POST['souscription_raison']);
                                $souscription->setCode_type_acteur($_POST['type_acteur']);
                                $souscription->setCode_statut($_POST['statut_juridique']);
			                }
                            $souscription->setSouscription_email($_POST['souscription_email']);
                            $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                            //$souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type($_POST['souscription_type']);
                            $souscription->setSouscription_numero($_POST['souscription_numero']);
                            $souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
			                if($_POST['souscription_type'] == "Banque") {
                                $souscription->setSouscription_banque($_POST['souscription_banque']);
			                }
                            $souscription->setSouscription_montant($_POST['souscription_montant']);
                            $souscription->setSouscription_nombre($_POST['souscription_nombre']);
                            $souscription->setSouscription_programme($_POST['souscription_programme']);
                            $souscription->setSouscription_type_candidat($_POST['souscription_type_candidat']);
                            
                            //$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $souscription->setSouscription_vignette($souscription_vignette);
                            //$souscription->setCode_activite($_POST['code_activite']);
                            //$souscription->setId_metier($_POST['id_metier']);
                            //$souscription->setId_competence($_POST['id_competence']);
                            $souscription->setSouscription_ville($_POST['souscription_ville']);
                            $souscription->setSouscription_quartier($_POST['souscription_quartier']);
			                if($_POST['souscription_programme'] == "CMFH") {
                                $souscription->setSouscription_login($_POST['souscription_login']);
                                $souscription->setSouscription_passe($_POST['souscription_passe']);
			                }
			                /*if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
				            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
					        }*/
            
                            $souscription->setSouscription_autonome($_POST['souscription_autonome']);
			                //$souscription->setPublier(0);
							$souscription->setId_canton($_POST['id_canton']);
                            $souscription_mapper->update($souscription);
							
							
							///////////////////////////////////////////////////////////////////////////////////////
							
                            $recubancaire1_mapper = new Application_Model_EuRecubancaireMapper();
							$recubancaire1 = $recubancaire1_mapper->fetchAllBySouscriptionOne($_POST['souscription_id']);
							$recubancaire = new Application_Model_EuRecubancaire();
                            $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
							$recubancaire_mapper->find($recubancaire1->recubancaire_id, $recubancaire);

                            //$compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
                            //$recubancaire->setRecubancaire_id($compteur_recubancaire);
                            $recubancaire->setRecubancaire_type($_POST['souscription_type']);
                            $recubancaire->setRecubancaire_numero($_POST['souscription_numero']);
                            $recubancaire->setRecubancaire_date_numero($_POST['souscription_date_numero']);
			                if($_POST['souscription_type'] == "Banque") {
                                $recubancaire->setRecubancaire_banque($_POST['souscription_banque']);
			                }
                            $recubancaire->setRecubancaire_montant($_POST['souscription_montant']);
                            $recubancaire->setRecubancaire_vignette($souscription_vignette);
                            //$recubancaire->setRecubancaire_souscription($compteur_souscription);
			                $recubancaire->setPublier(1);
                            $recubancaire_mapper->update($recubancaire);
							
$sessionutilisateur->error = "Opération bien effectuée ...";

if($sessionutilisateur->code_groupe == "agrement_acnev"){
		$this->_redirect('/administration/listsouscriptionerreur/publier/0');
}else if($sessionutilisateur->code_groupe == "agrement_filiere"){
		$this->_redirect('/administration/listsouscriptionerreur/publier/1');
}else if($sessionutilisateur->code_groupe == "agrement_technopole"){
		$this->_redirect('/administration/listsouscriptionerreur/publier/2');
}else{
		$this->_redirect('/administration/listsouscriptionerreur');
	}

								
								
		
						}
		
		            /*}  catch (Exception $exc) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($_POST['souscription_id'], $a);
		$this->view->souscription = $a;
                        $sessionutilisateur->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();  
		                $this->_redirect('/administration/editsouscription/id/'.$id);
                        return;
                    }*/
			
		} else {  $sessionutilisateur->error = "Champs * obligatoire ..."; 
		 
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	}
		   
	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	}
	}













    public function listpayementcommissionAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByPeriode($debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
	} else {
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByPeriode("", "");
	}
	}

        $this->view->tabletri = 1;


    }




    public function listpayementcommission2Action()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByPeriode2($debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
	} else {
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByPeriode2("", "");
	}
	}

        $this->view->tabletri = 1;


    }


    public function payerpayementcommissionAction()
    {
        /* page administration/payerpayementcommission - Publier l'appel d'offre suite à la demande de BPS */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_id = Zend_Date::now();

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $payementcommission = new Application_Model_EuPayementCommission();
        $payementcommissionM = new Application_Model_EuPayementCommissionMapper();
        $payementcommissionM->find($id, $payementcommission);
		
        $payementcommission->setPayement_commission_date_payer($date_id->toString('yyyy-MM-dd'));
        $payementcommission->setPayement_commission_payer($this->_request->getParam('payer'));
		$payementcommissionM->update($payementcommission);
		
		
if($payementcommission->payement_commission_type == 1){
	
        $membreasso = new Application_Model_EuMembreasso();
        $membreassoM = new Application_Model_EuMembreassoMapper();
        $membreassoM->find($payementcommission->membreasso_id, $membreasso);
	  
        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($membreasso->membreasso_association, $association);

        $partagea = new Application_Model_EuPartageaMapper();
        $partage = $partagea->fetchAllByCommissionSouscription($association->association_id, $payementcommission->payement_commission_date_debut, $payementcommission->payement_commission_date_fin);
		
		$montant = $payementcommission->payement_commission_montant;
		foreach ($partage as $entry){
			if($montant >= $entry->partagea_montant){
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
		
        $partageaa->setPartagea_montant_utilise($partageaa->partagea_montant_utilise + ($entry->partagea_montant - $entry->partagea_montant * 0.05));
        $partageaa->setPartagea_montant_solde($partageaa->partagea_montant_solde - ($entry->partagea_montant - $entry->partagea_montant * 0.05));
        $partageaa->setPartagea_montant_impot($entry->partagea_montant * 0.05);
		$partageaaM->update($partageaa);
		
				$montant -= $entry->partagea_montant;
				
				}else if($montant == 0){
					break;
				
				}else if($montant < $entry->partagea_montant){
					
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
		
        $partageaa->setPartagea_montant_utilise($partageaa->partagea_montant_utilise + ($montant - $montant * 0.05));
        $partageaa->setPartagea_montant_solde($partageaa->partagea_montant_solde - ($montant - $montant * 0.05));
        $partageaa->setPartagea_montant_impot($montant * 0.05);
		$partageaaM->update($partageaa);
		break;
					}
			
			}
		
		
		
		
	}else if($payementcommission->payement_commission_type == 2){
        $partagem = new Application_Model_EuPartagemMapper();
        $partage = $partagem->fetchAllByCommissionSouscription($payementcommission->membreasso_id, $payementcommission->payement_commission_date_debut, $payementcommission->payement_commission_date_fin);
		
		$montant = $payementcommission->payement_commission_montant;
		foreach ($partage as $entry){
			if($montant >= $entry->partagem_montant){
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
		
        $partagemm->setPartagem_montant_utilise($partagemm->partagem_montant_utilise + ($entry->partagem_montant - $entry->partagem_montant * 0.05));
        $partagemm->setPartagem_montant_solde($partagemm->partagem_montant_solde - ($entry->partagem_montant - $entry->partagem_montant * 0.05));
        $partagemm->setPartagem_montant_impot($entry->partagem_montant * 0.05);
		$partagemmM->update($partagemm);
		
				$montant -= $entry->partagem_montant;
				
				}else if($montant == 0){
					break;
				
				}else if($montant < $entry->partagem_montant){
					
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
		
        $partagemm->setPartagem_montant_utilise($partagemm->partagem_montant_utilise + ($montant - $montant * 0.05));
        $partagemm->setPartagem_montant_solde($partagemm->partagem_montant_solde - ($montant - $montant * 0.05));
        $partagemm->setPartagem_montant_impot($montant * 0.05);
		$partagemmM->update($partagemm);
		break;
					}
			
			}
		

		}
		
		
		
        }

		$this->_redirect('/administration/listpayementcommission');
    }







    public function transfertpartagemontantAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


        $partagea = new Application_Model_EuPartageaMapper();
        $partage = $partagea->fetchAll();
		foreach ($partage as $entry){
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
		
        $partageaa->setPartagea_montant_utilise(0);
        $partageaa->setPartagea_montant_solde($partageaa->partagea_montant);
        $partageaa->setPartagea_montant_impot(0);
		$partageaaM->update($partageaa);
		}



        $partagem = new Application_Model_EuPartagemMapper();
        $partage = $partagem->fetchAll();
		foreach ($partage as $entry){
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
		
        $partagemm->setPartagem_montant_utilise(0);
        $partagemm->setPartagem_montant_solde($partagemm->partagem_montant);
        $partageaa->setPartagem_montant_impot(0);
		$partagemmM->update($partagemm);
		}



    }






    public function transfertpayementcommissionAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


$tableau1 = array("&Agrave;", "&Aacute;", "&Acirc;", "&Atilde;", "&Auml;", "&Aring;", "&Ccedil;", "&Egrave;", "&Eacute;", "&Ecirc;", "&Euml;", "&Igrave;", "&Iacute;", "&Icirc;", "&Iuml;", "&Ograve;", "&Oacute;", "&Ocirc;", "&Otilde;", "&Ouml;", "&Ugrave;", "&Uacute;", "&Ucirc;", "&Uuml;", "&agrave;", "&aacute;", "&acirc;", "&atilde;", "&auml;", "&aring;", "&ccedil;", "&egrave;", "&eacute;", "&ecirc;", "&euml;", "&igrave;", "&iacute;", "&icirc;", "&iuml;", "&ograve;", "&oacute;", "&ocirc;", "&otilde;", "&ouml;", "&ugrave;", "&uacute;", "&ucirc;", "&uuml;");

$tableau2 = array("À", "Á", "Â", "Ã", "Ä", "Å", "Ç", "È", "É", "Ê", "Ë", "Ì", "Í", "Î", "Ï", "Ò", "Ó", "Ô", "Õ", "Ö", "Ù", "Ú", "Û", "Ü", "à", "á", "â", "ã", "ä", "å", "ç", "è", "é", "ê", "ë", "ì", "í", "î", "ï", "ð", "ò", "ó", "ô", "õ", "ö", "ù", "ú", "û", "ü");

//$newphrase = str_replace($tableau1, $tableau2, $phrase);

        $date_id = Zend_Date::now();

$fichier = Util_Utils::getParamEsmc(1)."/".$fichier;
$lines = file($fichier);
	
foreach ($lines as $line_num => $line) {

list($nom, $mont) = explode(";", $line);

$nom = trim(str_replace($tableau2, $tableau1, $nom));

        $membreasso_m = new Application_Model_EuMembreassoMapper();
        $membreasso = $membreasso_m->fetchAllByRechercheMembre($nom);
		if($membreasso->membreasso_id > 0){
					

        $payement_commission = new Application_Model_EuPayementCommission();
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
			
            $compteur_payement_commission = $payement_commission_mapper->findConuter() + 1;
            $payement_commission->setPayement_commission_id($compteur_payement_commission);
	        $payement_commission->setPayement_commission_montant($mont);
            $payement_commission->setPayement_commission_date_demande($date_id->toString('yyyy-MM-dd'));
            $payement_commission->setPayement_commission_demande(1);
	        $payement_commission->setPayement_commission_payer(1);
			$payement_commission->setPayement_commission_date_payer($date_id->toString('yyyy-MM-dd'));
			$payement_commission->setPayement_commission_date_debut($date_debut);
			$payement_commission->setPayement_commission_date_fin($date_fin);
			$payement_commission->setMembreasso_id($membreasso->membreasso_id);
			$payement_commission->setId_type_commission(1);
			$payement_commission->setId_mode_payement(1);
			$payement_commission->setPayement_commission_type(2);
            $payement_commission_mapper->save($payement_commission);
			
			
        $payementcommission = new Application_Model_EuPayementCommission();
        $payementcommissionM = new Application_Model_EuPayementCommissionMapper();
        $payementcommissionM->find($compteur_payement_commission, $payementcommission);
		
			
			
        $partagem = new Application_Model_EuPartagemMapper();
        $partage = $partagem->fetchAllByCommissionSouscription($payementcommission->membreasso_id, $payementcommission->payement_commission_date_debut, $payementcommission->payement_commission_date_fin);
		
		$montant = $payementcommission->payement_commission_montant;
		foreach ($partage as $entry){
			if($montant >= $entry->partagem_montant){
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
		
        $partagemm->setPartagem_montant_utilise($partagemm->partagem_montant_utilise + $entry->partagem_montant);
        $partagemm->setPartagem_montant_solde($partagemm->partagem_montant_solde - $entry->partagem_montant);
		$partagemmM->update($partagemm);
		
				$montant -= $entry->partagem_montant;
				
				}else if($montant == 0){
					break;
				
				}else if($montant < $entry->partagem_montant){
					
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
		
        $partagemm->setPartagem_montant_utilise($partagemm->partagem_montant_utilise + $montant);
        $partagemm->setPartagem_montant_solde($partagemm->partagem_montant_solde - $montant);
		$partagemmM->update($partagemm);
		break;
					}
			
			}
			
			}
		







        $association_m = new Application_Model_EuAssociationMapper();
        $association = $association_m->fetchAllByRechercheAssociation($nom);
		if($association->association_id > 0){
			
        $membreasso_m = new Application_Model_EuMembreassoMapper();
        $membreasso = $membreasso_m->fetchAllByAssociation($association->association_id);
					

        $payement_commission = new Application_Model_EuPayementCommission();
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
			
            $compteur_payement_commission = $payement_commission_mapper->findConuter() + 1;
            $payement_commission->setPayement_commission_id($compteur_payement_commission);
	        $payement_commission->setPayement_commission_montant($mont);
            $payement_commission->setPayement_commission_date_demande($date_id->toString('yyyy-MM-dd'));
            $payement_commission->setPayement_commission_demande(1);
	        $payement_commission->setPayement_commission_payer(1);
			$payement_commission->setPayement_commission_date_payer($date_id->toString('yyyy-MM-dd'));
			$payement_commission->setPayement_commission_date_debut($date_debut);
			$payement_commission->setPayement_commission_date_fin($date_fin);
			$payement_commission->setMembreasso_id($membreasso->membreasso_id);
			$payement_commission->setId_type_commission(1);
			$payement_commission->setId_mode_payement(1);
			$payement_commission->setPayement_commission_type(1);
            $payement_commission_mapper->save($payement_commission);
			
			
        $payementcommission = new Application_Model_EuPayementCommission();
        $payementcommissionM = new Application_Model_EuPayementCommissionMapper();
        $payementcommissionM->find($compteur_payement_commission, $payementcommission);
		
			
        $membreasso = new Application_Model_EuMembreasso();
        $membreassoM = new Application_Model_EuMembreassoMapper();
        $membreassoM->find($payementcommission->membreasso_id, $membreasso);
	  
        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($membreasso->membreasso_association, $association);

			
        $partagea = new Application_Model_EuPartageaMapper();
        $partage = $partagea->fetchAllByCommissionSouscription($association->association_id, $payementcommission->payement_commission_date_debut, $payementcommission->payement_commission_date_fin);
		
		$montant = $payementcommission->payement_commission_montant;
		foreach ($partage as $entry){
			if($montant >= $entry->partagea_montant){
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
		
        $partageaa->setPartagea_montant_utilise($partageaa->partagea_montant_utilise + $entry->partagea_montant);
        $partageaa->setPartagea_montant_solde($partageaa->partagea_montant_solde - $entry->partagea_montant);
		$partageaaM->update($partageaa);
		
				$montant -= $entry->partagea_montant;
				
				}else if($montant == 0){
					break;
				
				}else if($montant < $entry->partagea_montant){
					
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
		
        $partageaa->setPartagea_montant_utilise($partageaa->partagea_montant_utilise + $montant);
        $partageaa->setPartagea_montant_solde($partageaa->partagea_montant_solde - $montant);
		$partageaaM->update($partageaa);
		break;
					}
			
			}
			
			}
		






}









    }













    public function commissiondejapayerAction()
    {
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


        /*$partagea = new Application_Model_EuPartageaMapper();
        $partage = $partagea->fetchAllByPayer();
		
		foreach ($partage as $entry){
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
		
        $partageaa->setPartagea_montant_utilise($entry->partagea_montant);
        $partageaa->setPartagea_montant_solde(0);
        $partageaa->setPartagea_montant_impot(0);
		$partageaaM->update($partageaa);
		}*/



        $partagem = new Application_Model_EuPartagemMapper();
        $partage = $partagem->fetchAllByPayer();
		
		foreach ($partage as $entry){
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
		
        $partagemm->setPartagem_montant_utilise($entry->partagem_montant);
        $partagemm->setPartagem_montant_solde(0);
        $partagemm->setPartagem_montant_impot(0);
		$partagemmM->update($partagemm);
		}



    }
	
	public function souscriptiontableaudebordoldAction()   {
	     
		/* administration/souscriptiontableaudebord*/
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}

            ini_set('memory_limit','1024M');
		    $t_souscription = new Application_Model_DbTable_EuSouscription();
		    $t_membre = new Application_Model_DbTable_EuMembre();
		    $t_membremorale = new Application_Model_DbTable_EuMembreMorale();
		    $t_activation = new Application_Model_DbTable_EuActivation();
		    $t_dvente = new Application_Model_DbTable_EuDepotVente();
		    $t_integrateur = new Application_Model_DbTable_EuIntegrateur();
		    $t_offreur_projet = new Application_Model_DbTable_EuOffreurProjet();
		  
		  
		    $selection = $t_souscription->select();
		    $selection->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
		    $selection->where('souscription_programme like ?','CMFH');
		    $selection->where('publier = ?',3);
		    $rowssouscription = $t_souscription->fetchRow($selection);
			
		    $selection1 = $t_souscription->select();
		    $selection1->where('souscription_programme like ?','CMFH');
		    $selection1->where('publier = ?',3);
		    $selection1->where('souscription_autonome = ?',1);
		    $resultatauto = $t_souscription->fetchAll($selection1);
		  
		    //------------------------- CM Pour Tiers ---------------------------------
		    $rowssouscriptiontiers = $rowssouscription->somme_cm - count($resultatauto);
		  
		    
			$selection2 = $t_souscription->select();
		    $selection2->where('souscription_programme like ?','KACM');
		    $selection2->where('publier = ?',3);
		    $selection2->where('(souscription_montant > ?',0);
		    $selection2->orwhere('souscription_montant is not null)');
		    $selection2->where('(souscription_ancien_membre = ?',"");
		    $selection2->orwhere('souscription_ancien_membre is null)');
		    $resultatauto2 = $t_souscription->fetchAll($selection2);
			
		    $selection3 = $t_membre->select();
		    $selection3->where('etat_membre like ?','N');
		    $selection3->where('auto_enroler like ?','O');
		    $selection3->where("code_membre NOT IN (SELECT code_membre FROM eu_code_activation where code_membre is not null)");
		    $resultatauto3 = $t_membre->fetchAll($selection3);
			
		    $selection4 = $t_membremorale->select();
		    $selection4->where('etat_membre like ?','N');
		    $selection4->where("code_membre_morale NOT IN (SELECT code_membre FROM eu_code_activation where code_membre is not null)");
		    $resultatauto4 = $t_membremorale->fetchAll($selection4);
			
			$selection5 = $t_membre->select();
            $selection5->where('etat_membre like  ?','A');
            $resultatauto5 = $t_membre->fetchAll($selection5);
			
			$selection6 = $t_membremorale->select();
            $selection6->where('etat_membre like  ?','A');
            $resultatauto6 = $t_membremorale->fetchAll($selection6);
			
			// ------------------------- CM Pour Soi --------------------------------------------------------------------------
			$rowssouscriptionsoi = count($resultatauto) + count($resultatauto2) + count($resultatauto3) + count($resultatauto4);
			
			// ------------------------- CM Reactivé --------------------------------------------------------------------------
			$rowssouscriptionreactive = count($resultatauto5) + count($resultatauto6);
			
			
			/*
			// Nombre Total de Comptes Marchands PP souscris pour soi
			$selection7 = $t_souscription->select();
			$selection7->where('souscription_programme like ?','CMFH');
			$selection7->where('souscription_personne like ?','PP');
			$selection7->where('publier = ?',3);
			$selection7->where('souscription_autonome = ?',1);
			$resultatauto7 = $t_souscription->fetchAll($selection7);
			
			$selection8 = $t_souscription->select();
			$selection8->where('souscription_programme like ?','KACM');
			$selection8->where('souscription_personne like ?','PP');
			$selection8->where('publier = ?',3);
			$selection8->where('(souscription_montant > ?',0);
			$selection8->orwhere('souscription_montant is not null)');
			$selection8->where('(souscription_ancien_membre = ?',"");
			$selection8->orwhere('souscription_ancien_membre is null)');
			$resultatauto8 = $t_souscription->fetchAll($selection8);
			
			$selection9 = $t_membre->select();
			$selection9->where('etat_membre like ?','N');
			$selection9->where('auto_enroler like ?','O');
			$selection9->where("code_membre NOT IN (SELECT code_membre FROM eu_code_activation where code_membre is not null)");
			$resultatauto9 = $t_membre->fetchAll($selection9);
			
			$rowssouscriptionppsoi = count($resultatauto7) + count($resultatauto8) + count($resultatauto9);
			
			
			// Nombre Total de Comptes Marchands PM souscris pour soi
			$selection10 = $t_souscription->select();
			$selection10->where('souscription_programme like ?','CMFH');
			$selection10->where('(souscription_personne like ?','PM');
			$selection10->orwhere('souscription_personne is null)');
			$selection10->where('publier = ?',3);
			$selection10->where('souscription_autonome = ?',1);
			$resultatauto10 = $t_souscription->fetchAll($selection10);
			
			$selection11 = $t_souscription->select();
			$selection11->where('souscription_programme like ?','KACM');
			$selection11->where('(souscription_personne like ?','PM');
			$selection11->orwhere('souscription_personne is null)');
			$selection11->where('publier = ?',3);
			$selection11->where('(souscription_montant > ?',0);
			$selection11->orwhere('souscription_montant is not null)');
			$selection11->where('(souscription_ancien_membre = ?',"");
			$selection11->orwhere('souscription_ancien_membre is null)');
			$resultatauto11 = $t_souscription->fetchAll($selection11);
			
			$selection12 = $t_membremorale->select();
			$selection12->where('etat_membre like ?','N');
			$selection12->where("code_membre_morale NOT IN (SELECT code_membre FROM eu_code_activation where code_membre is not null)");
			$resultatauto12 = $t_membremorale->fetchAll($selection12);
			
			$rowssouscriptionpmsoi = count($resultatauto10) + count($resultatauto11) + count($resultatauto12);
	        
	        // Nombre Total de Comptes Marchands souscris pour soi activés
			$selection13 = $t_membre->select();
            $selection13->where('etat_membre like  ?','N');
			$selection13->where('auto_enroler like ?','O');
            $resultatauto13 = $t_membre->fetchAll($selection13);
			
			$selection14 = $t_membremorale->select();
            $selection14->where('etat_membre like  ?','N');
            $resultatauto14 = $t_membremorale->fetchAll($selection14);
			 
			// Nombre Total de Comptes Marchands PP souscris pour soi activés
			$rowssouscriptionppsoiactive = count($resultatauto13);
			
			// Nombre Total de Comptes Marchands PM souscris pour soi activés
			$rowssouscriptionpmsoiactive = count($resultatauto14);
			
			// Nombre Total de Comptes Marchands souscris pour soi activés
			$rowssouscriptionsoiactive = $rowssouscriptionppsoiactive + $rowssouscriptionpmsoiactive;
	
	        // Nombre Total de Comptes Marchands souscris pour tiers activés
			$selection15 = $t_activation->select();
			$resultat15 = $t_activation->fetchAll($selection15);
			$rowssouscriptiontiersactive = count($resultat15);
			
			// Nombre Total de Comptes Marchands PP réactivés
			$selection16 = $t_membre->select();
            $selection16->where('etat_membre like ?','A');
            $resultat16 = $t_membre->fetchAll($selection16);
			$rowssouscriptionppreactive = count($resultat16);
			
			// Nombre Total de Comptes Marchands PP MCNP réactivés
			$t_ancien_membre = new Application_Model_DbTable_EuAncienMembre();
			$selection17 = $t_ancien_membre->select();
			$selection17->where('type_membre like  ?','P');
			$selection17->where('(code_membre is not null');
			$selection17->orwhere('code_membre <> ?)','');
            $resultat17 = $t_ancien_membre->fetchAll($selection17);
			$rowssouscriptionmcnpppreactive = count($resultat17);
			
			// Nombre Total de Comptes Marchands PP ReDeMaRe réactivés
			$rowssouscriptiongieppreactive = $rowssouscriptionppreactive - $rowssouscriptionmcnpppreactive;
			
			// Nombre Total de Compte Marchand PM reactivés
			$selection18 = $t_membremorale->select();
            $selection18->where('etat_membre like  ?','A');
            $resultat18 = $t_membremorale->fetchAll($selection18);
			$rowssouscriptionpmreactive = count($resultat18);
			
			// Nombre Total de Comptes Marchands PM MCNP réactivés
			$t_ancien_membre = new Application_Model_DbTable_EuAncienMembre();
			$selection19 = $t_ancien_membre->select();
			$selection19->where('type_membre like  ?','M');
			$selection19->where('(code_membre is not null');
			$selection19->orwhere('code_membre <> ?)','');
            $resultat19 = $t_ancien_membre->fetchAll($selection19);
			$rowssouscriptionmcnppmreactive = count($resultat19);
			
			// Nombre Total de Comptes Marchands PP ReDeMaRe réactivés
			$rowssouscriptiongiepmreactive = $rowssouscriptionpmreactive - $rowssouscriptionmcnppmreactive;
			
			// Nombre Total des Membres Utilisateurs
			$selection20  = $t_membre->select();
            $resultat20   = $t_membre->fetchAll($selection20);
			$rowsmembrepp = count($resultat20);
			
		    $selection21  = $t_membremorale->select();
            $resultat21   = $t_membre->fetchAll($selection21);
			$rowsmembrepm = count($resultat21);
			
			$rowsmembre = $rowsmembrepp + $rowsmembrepm;
			
			// Nombre Total des souscriptions
			$selection22 = $t_souscription->select();
			$selection22->where('souscription_programme like ?','CMFH');
			$selection22->where('publier = ?',3);
			$selection22->where('souscription_autonome = ?',1);
			$resultat22 = $t_souscription->fetchAll($selection22);
			
			$selection23 = $t_souscription->select();
			$selection23->where('(souscription_programme like ?','CMFH');
			$selection23->orwhere('souscription_programme like ?)','KACM');
			$selection23->where('(souscription_montant > ?',0);
			$selection23->orwhere('souscription_montant is not null)');
			$selection23->where('(souscription_ancien_membre = ?',"");
			$selection23->orwhere('souscription_ancien_membre is null)');
			$selection23->where('publier = ?',3);
			$resultat23 = $t_souscription->fetchAll($selection23);
			$rowssouscription = count($resultat22) + count($resultat23);
			
			// Nombre Total des souscriptions pour Soi
			$selection24 = $t_souscription->select();
			$selection24->where('souscription_programme like ?','CMFH');
			$selection24->where('publier = ?',3);
			$selection24->where('souscription_autonome = ?',1);
			$resultat24 = $t_souscription->fetchAll($selection24);
			
			$selection25 = $t_souscription->select();
			$selection25->where('souscription_programme like ?','KACM');
			$selection25->where('(souscription_montant > ?',0);
			$selection25->orwhere('souscription_montant is not null)');
			$selection25->where('(souscription_ancien_membre = ?',"");
			$selection25->orwhere('souscription_ancien_membre is null)');
			$selection25->where('publier = ?',3);
			$resultat25 = $t_souscription->fetchAll($selection25);
			$rowssouscriptionsoi = count($resultat24) + count($resultat25);
			
			// Nombre Total des souscriptions pour Tiers
			$selection26 = $t_souscription->select();
			$selection26->where('souscription_programme like ?','CMFH');
			$selection26->where('publier = ?',3);
			$resultat26 = $t_souscription->fetchAll($selection26);
			$rowssouscriptiontiers1 = count($resultat26);
			
			// Nombre Total des souscriptions exprimées
			$selection27  = $t_dvente->select();
			$resultat27 = $t_dvente->fetchAll($selection27);
			$rowssouscriptiontiersexp = count($resultat27);
			
			// Nombre Total des souscriptions non exprimées
			$selection28 = $t_souscription->select();
			$selection28->where('souscription_programme like ?','CMFH');
			$selection28->where('publier = ?',3);
			$selection28->where("souscription_id NOT IN (SELECT souscription_id FROM eu_depot_vente)");
			$resultat28 = $t_souscription->fetchAll($selection28);
			$rowssouscriptiontiersnexp = count($resultat28);
			
			// Nombre Total des membres integrateurs
			$selection29 = $t_integrateur->select();
			$selection29->distinct();
		    $selection29->from(array('eu_integrateur'),array('code_membre'));
			$resultat29 = $t_integrateur->fetchAll($selection29);
			$rowsintegrateur = count($resultat29);
			
			$selection30 = $t_offreur_projet->select();
			$selection30->distinct();
		    $selection30->from(array('eu_offreur_projet'),array('offreur_projet_code_membre'));
			$resultat30 = $t_offreur_projet->fetchAll($selection30);
			$rowsoffreur = count($resultat30);
			
			// Nombre Total des Comptes Marchands MCNP Réactivés
			$t_ancien_membre = new Application_Model_DbTable_EuAncienMembre();
			$selection31 = $t_ancien_membre->select();
			$selection31->where('(code_membre is not null');
			$selection31->orwhere('code_membre <> ?)','');
            $resultat31 = $t_ancien_membre->fetchAll($selection31);
			$rowssouscriptionmcnpreactive = count($resultat31);
			
			// Nombre Total des Comptes Marchands ReDeMaRe Réactivés
			$rowssouscriptiongiereactive = $rowssouscriptionreactive - $rowssouscriptionmcnpreactive;
			
			
			
			// Nombre Total des Membres CMFH ayant souscris à 500 comptes et plus
			$requete1 = $t_souscription->select();
			$requete1->distinct();
		    $requete1->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$requete1->where('souscription_programme like ?','CMFH');
			$requete1->where('publier = ?',3);
			$requete1->where('souscription_nombre >= ?',500);
			$cmfh500 = $t_souscription->fetchAll($requete1);
			
			// Nombre Total des Membres CMFH ayant souscris à 100 comptes et plus
			$requete2 = $t_souscription->select();
			$requete2->distinct();
		    $requete2->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison'));
			$requete2->where('souscription_programme like ?','CMFH');
			$requete2->where('publier = ?',3);
			$requete2->where('(souscription_nombre < ?',500);
			$requete2->where('souscription_nombre >= ?)',100);
			$cmfh100 = $t_souscription->fetchAll($requete2);
			
			
			// Nombre Total des Membres CMFH ayant souscris à 10 comptes et plus
			$requete3 = $t_souscription->select();
			$requete3->distinct();
		    $requete3->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$requete3->where('souscription_programme like ?','CMFH');
			$requete3->where('publier = ?',3);
			$requete3->where('(souscription_nombre < ?',100);
			$requete3->where('souscription_nombre >= ?)',10);
			$cmfh10 = $t_souscription->fetchAll($requete3);
			
			
			// Nombre Total des Membres CMFH Honorifique
			$selection32 = $t_souscription->select();
			$selection32->distinct();
		    $selection32->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection32->where('souscription_programme like ?','CMFH');
			$selection32->where('publier = ?',3);
			$selection32->where('souscription_type_candidat = ?',1);
			$cmfhhonorique = $t_souscription->fetchAll($selection32);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Honorifique
			$selection33 = $t_souscription->select();
			$selection33->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection33->where('souscription_programme like ?','CMFH');
			$selection33->where('publier = ?',3);
			$selection33->where('souscription_type_candidat = ?',1);
			$rowscmhonorifique = $t_souscription->fetchRow($selection33);
			
			$selectioner1 = $t_souscription->select();
			$selectioner1->where('souscription_programme like ?','CMFH');
			$selectioner1->where('publier = ?',3);
			$selectioner1->where('souscription_autonome = ?',1);
			$selectioner1->where('souscription_type_candidat = ?',1);
			$resultatautoh = $t_souscription->fetchAll($selectioner1);
			
			// Nombre Total des souscriptions de CMFH Conseillers Consultatifs
			$selection34 = $t_souscription->select();
			$selection34->distinct();
		    $selection34->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection34->where('souscription_programme like ?','CMFH');
			$selection34->where('publier = ?',3);
			$selection34->where('souscription_type_candidat = ?',2);
			$cmfhcc = $t_souscription->fetchAll($selection34);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Conseillers Consultatifs
			$selection35 = $t_souscription->select();
			$selection35->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection35->where('souscription_programme like ?','CMFH');
			$selection35->where('souscription_type_candidat = ?',2);
			$selection35->where('publier = ?',3);
			$rowscmcc = $t_souscription->fetchRow($selection35);
			
			$selectioner2 = $t_souscription->select();
			$selectioner2->where('souscription_programme like ?','CMFH');
			$selectioner2->where('publier = ?',3);
			$selectioner2->where('souscription_autonome = ?',1);
			$selectioner2->where('souscription_type_candidat = ?',2);
			$resultatautocc = $t_souscription->fetchAll($selectioner2);
			
			
			// Nombre Total des souscriptions de CMFH Conseillers Administration
			$selection36 = $t_souscription->select();
			$selection36->distinct();
		    $selection36->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection36->where('souscription_programme like ?','CMFH');
			$selection36->where('publier = ?',3);
			$selection36->where('souscription_type_candidat = ?',3);
			$cmfhca = $t_souscription->fetchAll($selection36);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Conseillers Administration
			$selection37 = $t_souscription->select();
			$selection37->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection37->where('souscription_programme like ?','CMFH');
			$selection37->where('souscription_type_candidat = ?',3);
			$selection37->where('publier = ?',3);
			$rowscmca = $t_souscription->fetchRow($selection37);
			
			$selectioner3 = $t_souscription->select();
			$selectioner3->where('souscription_programme like ?','CMFH');
			$selectioner3->where('publier = ?',3);
			$selectioner3->where('souscription_autonome = ?',1);
			$selectioner3->where('souscription_type_candidat = ?',3);
			$resultatautoca = $t_souscription->fetchAll($selectioner3);
			
			// Nombre Total des souscriptions de CMFH Managers
			$selection38 = $t_souscription->select();
			$selection38->distinct();
		    $selection38->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection38->where('souscription_programme like ?','CMFH');
			$selection38->where('publier = ?',3);
			$selection38->where('souscription_type_candidat = ?',4);
			$cmfhmanager = $t_souscription->fetchAll($selection38);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Managers
			$selection39 = $t_souscription->select();
			$selection39->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection39->where('souscription_programme like ?','CMFH');
			$selection39->where('souscription_type_candidat = ?',4);
			$selection39->where('publier = ?',3);
			$rowscmmanager = $t_souscription->fetchRow($selection39);
			
			$selectioner4 = $t_souscription->select();
			$selectioner4->where('souscription_programme like ?','CMFH');
			$selectioner4->where('publier = ?',3);
			$selectioner4->where('souscription_autonome = ?',1);
			$selectioner4->where('souscription_type_candidat = ?',4);
			$resultatautom = $t_souscription->fetchAll($selectioner4);
			
			// Nombre Total des souscriptions de CMFH Ingénieurs
			$selection40 = $t_souscription->select();
			$selection40->distinct();
		    $selection40->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection40->where('souscription_programme like ?','CMFH');
			$selection40->where('publier = ?',3);
			$selection40->where('souscription_type_candidat = ?',5);
			$cmfhingenieur = $t_souscription->fetchAll($selection40);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Ingénieurs
			$selection41 = $t_souscription->select();
			$selection41->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection41->where('souscription_programme like ?','CMFH');
			$selection41->where('souscription_type_candidat = ?',5);
			$selection41->where('publier = ?',3);
			$rowscmingenieur = $t_souscription->fetchRow($selection41);
			
			$selectioner5 = $t_souscription->select();
			$selectioner5->where('souscription_programme like ?','CMFH');
			$selectioner5->where('publier = ?',3);
			$selectioner5->where('souscription_autonome = ?',1);
			$selectioner5->where('souscription_type_candidat = ?',5);
			$resultatautoi = $t_souscription->fetchAll($selectioner5);
			
			
			// Nombre Total des souscriptions de CMFH Offreurs de Projet
			$selection42 = $t_souscription->select();
			$selection42->distinct();
		    $selection42->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison'));
			$selection42->where('souscription_programme like ?','CMFH');
			$selection42->where('publier = ?',3);
			$selection42->where('souscription_type_candidat = ?',6);
			$cmfhoffreur = $t_souscription->fetchAll($selection42);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Offreurs de Projet
			$selection43 = $t_souscription->select();
			$selection43->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection43->where('souscription_programme like ?','CMFH');
			$selection43->where('souscription_type_candidat = ?',6);
			$selection43->where('publier = ?',3);
			$rowscmoffreur = $t_souscription->fetchRow($selection43);
			
			$selectioner6 = $t_souscription->select();
			$selectioner6->where('souscription_programme like ?','CMFH');
			$selectioner6->where('publier = ?',3);
			$selectioner6->where('souscription_autonome = ?',1);
			$selectioner6->where('souscription_type_candidat = ?',6);
			$resultatautoop = $t_souscription->fetchAll($selectioner6);
			
			
			// Nombre Total des souscriptions de CMFH Offreurs de BPS
			$selection44 = $t_souscription->select();
			$selection44->distinct();
		    $selection44->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison'));
			$selection44->where('souscription_programme like ?','CMFH');
			$selection44->where('publier = ?',3);
			$selection44->where('souscription_type_candidat = ?',7);
			$cmfhbps = $t_souscription->fetchAll($selection44);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Offreurs de BPS
			$selection45 = $t_souscription->select();
			$selection45->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection45->where('souscription_programme like ?','CMFH');
			$selection45->where('souscription_type_candidat = ?',7);
			$selection45->where('publier = ?',3);
			$rowscmbps = $t_souscription->fetchRow($selection45);
			
			$selectioner7 = $t_souscription->select();
			$selectioner7->where('souscription_programme like ?','CMFH');
			$selectioner7->where('publier = ?',3);
			$selectioner7->where('souscription_autonome = ?',1);
			$selectioner7->where('souscription_type_candidat = ?',7);
			$resultatautobps = $t_souscription->fetchAll($selectioner7);
			
			// Nombre Total des souscriptions de CMFH Offreurs de Comptes Marchands
			$selection46 = $t_souscription->select();
			$selection46->distinct();
		    $selection46->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection46->where('souscription_programme like ?','CMFH');
			$selection46->where('publier = ?',3);
			$selection46->where('souscription_type_candidat = ?',8);
			$cmfhocm = $t_souscription->fetchAll($selection46);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Offreurs de Comptes Marchands
			$selection47 = $t_souscription->select();
			$selection47->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection47->where('souscription_programme like ?','CMFH');
			$selection47->where('souscription_type_candidat = ?',8);
			$selection47->where('publier = ?',3);
			$rowscmocm = $t_souscription->fetchRow($selection47);
			
			$selectioner8 = $t_souscription->select();
			$selectioner8->where('souscription_programme like ?','CMFH');
			$selectioner8->where('publier = ?',3);
			$selectioner8->where('souscription_autonome = ?',1);
			$selectioner8->where('souscription_type_candidat = ?',8);
			$resultatautoocm = $t_souscription->fetchAll($selectioner8);
			
			
			// Nombre Total des souscriptions de CMFH Offreurs de Travail pour la Production Commune
			$selection48 = $t_souscription->select();
			$selection48->distinct();
		    $selection48->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection48->where('souscription_programme like ?','CMFH');
			$selection48->where('publier = ?',3);
			$selection48->where('souscription_type_candidat = ?',9);
			$cmfhotpc = $t_souscription->fetchAll($selection48);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Offreurs de Travail pour la Production Commune
			$selection49 = $t_souscription->select();
			$selection49->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection49->where('souscription_programme like ?','CMFH');
			$selection49->where('souscription_type_candidat = ?',9);
			$selection49->where('publier = ?',3);
			$rowscmotpc = $t_souscription->fetchRow($selection49);
			
			$selectioner9 = $t_souscription->select();
			$selectioner9->where('souscription_programme like ?','CMFH');
			$selectioner9->where('publier = ?',3);
			$selectioner9->where('souscription_autonome = ?',1);
			$selectioner9->where('souscription_type_candidat = ?',9);
			$resultatautootpc = $t_souscription->fetchAll($selectioner9);
			
			
			// Nombre Total des souscriptions de CMFH Entrepreneurs
			$selection50 = $t_souscription->select();
			$selection50->distinct();
		    $selection50->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection50->where('souscription_programme like ?','CMFH');
			$selection50->where('publier = ?',3);
			$selection50->where('souscription_type_candidat = ?',10);
			$cmfhentrepreneur = $t_souscription->fetchAll($selection50);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Entrepreneurs
			$selection51 = $t_souscription->select();
			$selection51->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection51->where('souscription_programme like ?','CMFH');
			$selection51->where('souscription_type_candidat = ?',10);
			$selection51->where('publier = ?',3);
			$rowscmentrepreneur = $t_souscription->fetchRow($selection51);
			
			$selectioner10 = $t_souscription->select();
			$selectioner10->where('souscription_programme like ?','CMFH');
			$selectioner10->where('publier = ?',3);
			$selectioner10->where('souscription_autonome = ?',1);
			$selectioner10->where('souscription_type_candidat = ?',10);
			$resultatautoe = $t_souscription->fetchAll($selectioner10);
			
			
			
			// Nombre Total des souscriptions de CMFH Experts
			$selection52 = $t_souscription->select();
			$selection52->distinct();
		    $selection52->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$selection52->where('souscription_programme like ?','CMFH');
			$selection52->where('publier = ?',3);
			$selection52->where('souscription_type_candidat = ?',11);
			$cmfhexpert = $t_souscription->fetchAll($selection52);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Experts
			$selection53 = $t_souscription->select();
			$selection53->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection53->where('souscription_programme like ?','CMFH');
			$selection53->where('souscription_type_candidat = ?',11);
			$selection53->where('publier = ?',3);
			$rowscmexpert = $t_souscription->fetchRow($selection53);
			
			$selectioner11 = $t_souscription->select();
			$selectioner11->where('souscription_programme like ?','CMFH');
			$selectioner11->where('publier = ?',3);
			$selectioner11->where('souscription_autonome = ?',1);
			$selectioner11->where('souscription_type_candidat = ?',11);
			$resultatautoex = $t_souscription->fetchAll($selectioner11);
			
			
			// Nombre Total des souscriptions de CMFH OSE
			$selection54 = $t_souscription->select();
			$selection54->distinct();
		    $selection54->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison'));
			$selection54->where('souscription_programme like ?','CMFH');
			$selection54->where('publier = ?',3);
			$selection54->where('souscription_type_candidat = ?',12);
			$cmfhose = $t_souscription->fetchAll($selection54);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH OSE
			$selection55 = $t_souscription->select();
			$selection55->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection55->where('souscription_programme like ?','CMFH');
			$selection55->where('souscription_type_candidat = ?',12);
			$selection55->where('publier = ?',3);
			$rowscmose = $t_souscription->fetchRow($selection55);
			
			$selectioner12 = $t_souscription->select();
			$selectioner12->where('souscription_programme like ?','CMFH');
			$selectioner12->where('publier = ?',3);
			$selectioner12->where('souscription_autonome = ?',1);
			$selectioner12->where('souscription_type_candidat = ?',12);
			$resultatautoose = $t_souscription->fetchAll($selectioner12);
			
			
			// Nombre Total des souscriptions de CMFH Maison
			$selection56 = $t_souscription->select();
			$selection32->distinct();
		    $selection32->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison'));
			$selection56->where('souscription_programme like ?','CMFH');
			$selection56->where('publier = ?',3);
			$selection56->where('souscription_type_candidat = ?',13);
			$cmfhmaison = $t_souscription->fetchAll($selection56);
			
			// Nombre Total de Comptes Marchands souscris de Type CMFH Maison
			$selection57 = $t_souscription->select();
			$selection57->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection57->where('souscription_programme like ?','CMFH');
			$selection57->where('souscription_type_candidat = ?',13);
			$selection57->where('publier = ?',3);
			$rowscmmaison = $t_souscription->fetchRow($selection57);
			
			$selectioner13 = $t_souscription->select();
			$selectioner13->where('souscription_programme like ?','CMFH');
			$selectioner13->where('publier = ?',3);
			$selectioner13->where('souscription_autonome = ?',1);
			$selectioner13->where('souscription_type_candidat = ?',13);
			$resultatautomaison = $t_souscription->fetchAll($selectioner13);
			
			
			
			$this->view->entries_cmfh_500 = count($cmfh500);
			$this->view->entries_cmfh_100 = count($cmfh100);
			$this->view->entries_cmfh_10 = count($cmfh10);
			
			
			$this->view->entries_cmfh_honorifique = count($cmfhhonorique);
			$this->view->entries_cm_cmfh_honorifique = $rowscmhonorifique->somme_cm - count($resultatautoh);
			
			$this->view->entries_cmfh_cc = count($cmfhcc);
			$this->view->entries_cm_cmfh_cc = $rowscmcc->somme_cm - count($resultatautocc);
			
			$this->view->entries_cmfh_ca = count($cmfhca);
			$this->view->entries_cm_cmfh_ca = $rowscmca->somme_cm - count($resultatautoca);
			
			$this->view->entries_cmfh_manager = count($cmfhmanager);
			$this->view->entries_cm_cmfh_manager = $rowscmmanager->somme_cm - count($resultatautom);
			
			$this->view->entries_cmfh_ingenieur = count($cmfhingenieur);
			$this->view->entries_cm_cmfh_ingenieur = $rowscmingenieur->somme_cm - count($resultatautoi);
			
			$this->view->entries_cmfh_offreur = count($cmfhoffreur);
			$this->view->entries_cm_cmfh_offreur = $rowscmoffreur->somme_cm - count($resultatautoop);
			
			$this->view->entries_cmfh_bps = count($cmfhbps);
			$this->view->entries_cm_cmfh_bps = $rowscmbps->somme_cm - count($resultatautobps);
			
			$this->view->entries_cmfh_ocm = count($cmfhocm);
			$this->view->entries_cm_cmfh_ocm = $rowscmocm->somme_cm - count($resultatautoocm);
			
			$this->view->entries_cmfh_otpc = count($cmfhotpc);
			$this->view->entries_cm_cmfh_otpc = $rowscmotpc->somme_cm - count($resultatautootpc);
			
			$this->view->entries_cmfh_entrepreneur = count($cmfhentrepreneur);
			$this->view->entries_cm_cmfh_entrepreneur = $rowscmentrepreneur->somme_cm - count($resultatautoe);
			
			$this->view->entries_cmfh_expert = count($cmfhexpert);
			$this->view->entries_cm_cmfh_expert = $rowscmexpert->somme_cm - count($resultatautoex);
			
			$this->view->entries_cmfh_ose = count($cmfhose);
			$this->view->entries_cm_cmfh_ose = $rowscmose->somme_cm - count($resultatautoose);
			
			$this->view->entries_cmfh_maison = count($cmfhmaison);
			$this->view->entries_cm_cmfh_maison = $rowscmmaison->somme_cm - count($resultatautomaison);
			*/
			
			
	        $this->view->entries_cm = $rowssouscriptiontiers + $rowssouscriptionsoi + $rowssouscriptionreactive;
			
			
			/*
			$this->view->entries_cm_soi = $rowssouscriptionsoi;
			$this->view->entries_cm_tiers = $rowssouscriptiontiers;
			$this->view->entries_cm_reactive = $rowssouscriptionreactive;
			
			
			
			$this->view->entries_cm_pp_soi = $rowssouscriptionppsoi;
			$this->view->entries_cm_pm_soi = $rowssouscriptionpmsoi;
			$this->view->entries_cm_soi_active = $rowssouscriptionsoiactive;
			$this->view->entries_cm_pp_soi_active = $rowssouscriptionppsoiactive;
			$this->view->entries_cm_pm_soi_active = $rowssouscriptionpmsoiactive;
			$this->view->entries_cm_tiers_active = $rowssouscriptiontiersactive;
			
			$this->view->entries_cm_pp_reactive = $rowssouscriptionppreactive;
			$this->view->entries_cm_mcnppp_reactive = $rowssouscriptionmcnpppreactive;
			$this->view->entries_cm_giepp_reactive = $rowssouscriptiongieppreactive;
			$this->view->entries_cm_pm_reactive = $rowssouscriptionpmreactive;
			$this->view->entries_cm_mcnppm_reactive = $rowssouscriptionmcnppmreactive;
			$this->view->entries_cm_giepm_reactive = $rowssouscriptiongiepmreactive;
			
			$this->view->entries_membre = $rowsmembre;
			$this->view->entries_membre_pp = $rowsmembrepp;
			$this->view->entries_membre_pm = $rowsmembrepm;
			$this->view->entries_souscriptions = $rowssouscription;
			$this->view->entries_souscriptions_kacm = $rowssouscriptionsoi;
			$this->view->entries_souscriptions_cmfh = $rowssouscriptiontiers1;
			$this->view->entries_cm_mcnp_reactive = $rowssouscriptionmcnpreactive;
			$this->view->entries_cm_gie_reactive = $rowssouscriptiongiereactive;
			$this->view->entries_souscriptions_cmfhexp = $rowssouscriptiontiersexp;
			$this->view->entries_souscriptions_cmfhnexp = $rowssouscriptiontiersnexp;
			$this->view->entries_integrateurs = $rowsintegrateur;
			$this->view->entries_offreurs = $rowsoffreur;
			*/
			
	}
	
	
	
	
	
	
	
	

	
	public function souscriptiontableaudebordAction()   {
	     
		/* administration/souscriptiontableaudebord*/
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
            ini_set('memory_limit','10249999999999M');
		    $t_souscription = new Application_Model_DbTable_EuSouscription();
		    $t_membre = new Application_Model_DbTable_EuMembre();
		    $t_membremorale = new Application_Model_DbTable_EuMembreMorale();
		    $t_activation = new Application_Model_DbTable_EuActivation();
		    $t_dvente = new Application_Model_DbTable_EuDepotVente();
		    $t_integrateur = new Application_Model_DbTable_EuIntegrateur();
		    $t_offreur_projet = new Application_Model_DbTable_EuOffreurProjet();
			$t_cmfh = new Application_Model_DbTable_EuCmfh();
			$t_mslistecm = new Application_Model_DbTable_EuMstiersListecm();
			$t_membretierscode = new Application_Model_DbTable_EuMembretierscode();
			
			
		    $selection = $t_souscription->select();
		    $selection->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
		    $selection->where('souscription_programme like ?','CMFH');
		    $selection->where('publier = ?',3);
		    $rowssouscription = $t_souscription->fetchRow($selection);
			
			$selection1 = $t_souscription->select();
		    $selection1->where('souscription_programme like ?','CMFH');
		    $selection1->where('publier = ?',3);
		    $selection1->where('souscription_autonome = ?',1);
		    $resultatauto = $t_souscription->fetchAll($selection1);
			
			//------------------------- CM Pour Tiers ---------------------------------
			$rowssouscriptiontiers = $rowssouscription->somme_cm - count($resultatauto);
			$this->view->entries_cm_tiers = $rowssouscriptiontiers;
			
			
			$selection2 = $t_souscription->select();
		    $selection2->where('souscription_programme like ?','KACM');
		    $selection2->where('publier = ?',3);
		    $selection2->where('(souscription_montant > ?',0);
		    $selection2->orwhere('souscription_montant is not null)');
		    $selection2->where('(souscription_ancien_membre = ?',"");
		    $selection2->orwhere('souscription_ancien_membre is null)');
		    $resultatauto2 = $t_souscription->fetchAll($selection2);
			
		    $selection3 = $t_membre->select();
		    $selection3->where('etat_membre like ?','N');
		    $selection3->where('auto_enroler like ?','O');
		    $selection3->where("code_membre NOT IN (SELECT code_membre FROM eu_code_activation where code_membre is not null)");
		    $resultatauto3 = $t_membre->fetchAll($selection3);
			
			
		    $selection4 = $t_membremorale->select();
		    $selection4->where('etat_membre like ?','N');
		    $selection4->where("code_membre_morale NOT IN (SELECT code_membre FROM eu_code_activation where code_membre is not null)");
		    $resultatauto4 = $t_membremorale->fetchAll($selection4);
			
			// ------------------------- CM Pour Soi --------------------------------------------------------------------------
			$rowssouscriptionsoi = count($resultatauto) + count($resultatauto2) + count($resultatauto3) + count($resultatauto4);
			$this->view->entries_cm_soi = $rowssouscriptionsoi;
			
			$selection5 = $t_membre->select();
            $selection5->where('etat_membre like  ?','A');
            $resultatauto5 = $t_membre->fetchAll($selection5);
			
			$selection6 = $t_membremorale->select();
            $selection6->where('etat_membre like  ?','A');
            $resultatauto6 = $t_membremorale->fetchAll($selection6);
			
			// ------------------------- CM Reactivé --------------------------------------------------------------------------
			$rowssouscriptionreactive = count($resultatauto5) + count($resultatauto6);
			$this->view->entries_cm_reactive = $rowssouscriptionreactive;
			
			//-----------------------------------------------------------------------------------------------------------------
			$this->view->entries_cm = $rowssouscriptiontiers + $rowssouscriptionsoi + $rowssouscriptionreactive;
			//---------------------------------------------------------------------------------------------------------------------
			
			
			//-------------- Nombre Total de Comptes Marchands souscris pour soi activés --------------------------------------------
			$selection13 = $t_membre->select();
            $selection13->where('etat_membre like  ?','N');
			$selection13->where('auto_enroler like ?','O');
            $resultatauto13 = $t_membre->fetchAll($selection13);
			
			$selection14 = $t_membremorale->select();
            $selection14->where('etat_membre like  ?','N');
            $resultatauto14 = $t_membremorale->fetchAll($selection14);
			 
			// Nombre Total de Comptes Marchands PP souscris pour soi activés
			$rowssouscriptionppsoiactive = count($resultatauto13);
			
			// Nombre Total de Comptes Marchands PM souscris pour soi activés
			$rowssouscriptionpmsoiactive = count($resultatauto14);
			
			// Nombre Total de Comptes Marchands souscris pour soi activés
			$rowssouscriptionsoiactive = $rowssouscriptionppsoiactive + $rowssouscriptionpmsoiactive;
			$this->view->entries_cm_soi_active = $rowssouscriptionsoiactive;
			
			//----------------------------------------------------------------------------------------------------------------------
			
			//--------Nombre Total de Comptes Marchands souscris pour tiers activés -----------------------------------------------
			$selection15 = $t_activation->select();
			$resultat15 = $t_activation->fetchAll($selection15);
			$rowssouscriptiontiersactive = count($resultat15);
			$this->view->entries_cm_tiers_active = $rowssouscriptiontiersactive;
			
			
			//--------------- Nombre Total des Comptes Marchands MCNP Réactivés ---------------------------------------------------
			$t_ancien_membre = new Application_Model_DbTable_EuAncienMembre();
			$selection31 = $t_ancien_membre->select();
			$selection31->where('(code_membre is not null');
			$selection31->orwhere('code_membre <> ?)','');
            $resultat31 = $t_ancien_membre->fetchAll($selection31);
			$rowssouscriptionmcnpreactive = count($resultat31);
			$this->view->entries_cm_mcnp_reactive = $rowssouscriptionmcnpreactive;
			
			//------------------- Nombre Total des Comptes Marchands ReDeMaRe Réactivés-------------------------------------------
			$rowssouscriptiongiereactive = $rowssouscriptionreactive - $rowssouscriptionmcnpreactive;
			
			$this->view->entries_cm_gie_reactive = $rowssouscriptiongiereactive;
			
			//---------------------------------------------------------------------------------------------------------------------
			// Nombre Total des Membres Utilisateurs
			//$selection20  = $t_membre->select();
            //$resultat20   = $t_membre->fetchAll($selection20);
			//$rowsmembrepp = count($resultat20);
			//$this->view->entries_membre_pp = $rowsmembrepp;
			
			//$selection21  = $t_membremorale->select();
            //$resultat21   = $t_membre->fetchAll($selection21);
			//$rowsmembrepm = count($resultat21);
			//$this->view->entries_membre_pm = $rowsmembrepm;
			
			
			// Nombre Total des Membres CMFH ayant souscris à 500 comptes et plus
			$requete1 = $t_souscription->select();
			$requete1->distinct();
		    $requete1->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$requete1->where('souscription_programme like ?','CMFH');
			$requete1->where('publier = ?',3);
			$requete1->where('souscription_nombre >= ?',500);
			$cmfh500 = $t_souscription->fetchAll($requete1);
			
			$requetecmfh = $t_cmfh->select();
			$cmfhs500 = $t_souscription->fetchAll($requete1);
			
			//$this->view->entries_cmfh_500 = count($cmfh500) + count($cmfhs500);
			
			$this->view->entries_cmfh_500 = count($cmfh500);
			
			// Nombre Total des Membres CMFH ayant souscris à 100 comptes et plus
			$requete2 = $t_souscription->select();
			$requete2->distinct();
		    $requete2->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison'));
			$requete2->where('souscription_programme like ?','CMFH');
			$requete2->where('publier = ?',3);
			$requete2->where('(souscription_nombre < ?',500);
			$requete2->where('souscription_nombre >= ?)',100);
			$cmfh100 = $t_souscription->fetchAll($requete2);
			$this->view->entries_cmfh_100 = count($cmfh100);
			
			
			//Nombre Total des Membres CMFH ayant souscris à 10 comptes et plus
			$requete3 = $t_souscription->select();
			$requete3->distinct();
		    $requete3->from(array('eu_souscription'),array('souscription_nom','souscription_prenom'));
			$requete3->where('souscription_programme like ?','CMFH');
			$requete3->where('publier = ?',3);
			$requete3->where('(souscription_nombre < ?',100);
			$requete3->where('souscription_nombre >= ?)',10);
			$cmfh10 = $t_souscription->fetchAll($requete3);
			$this->view->entries_cmfh_10 = count($cmfh10);
			
			
			
			//------------------------- CM OPERATIONNEL ---------------------------------
			
		    $selectioncmppop = $t_membre->select();
		    $selectioncmppop->where('desactiver = ?',0);
		    $resultatcmppop = $t_membre->fetchAll($selectioncmppop);
			
			
		    $selectioncmpmop = $t_membremorale->select();
		    $selectioncmpmop->where('desactiver = ?',0);
		    $resultatcmpmop = $t_membremorale->fetchAll($selectioncmpmop);
			
			
			$this->view->entries_cm_op = count($resultatcmppop) + count($resultatcmpmop);
			
			
			
			
			
			/*
			$selectd = $t_dvente->select();
		    $selectd->from($t_dvente,array('SUM(solde_depot) as somme_depot'));
			$selectd->where('(code_membre is not null');
			$selectd->where('code_membre <> ?)',"");
		    $rowsdepotvente = $t_dvente->fetchRow($selectd);
			*/
			
			/*
			$selectmembre = $t_membretierscode->select();
			$selectmembre->from(array('eu_membretierscode'));
			$selectmembre->where('publier = ?',0);
			$entriesmembretiers = $t_membretierscode->fetchAll($selectmembre);
			*/
			
			/*
			$selection9 = $t_mslistecm->select();
		    $selection9->from(array('eu_mstiers_listecm'));
			$resultat9 = $t_mslistecm->fetchAll($selection9);
			
			$selection10 = $t_mslistecm->select();
		    $selection10->from(array('eu_mstiers_listecm'));
			$selection10->where('(code_membre_beneficiaire is not null');
			$selection10->where('code_membre_beneficiaire <> ?)','');
			$resultat10 = $t_mslistecm->fetchAll($selection10);
			
			$this->view->entries_depotvente = ($rowsdepotvente->somme_depot)/70000;
			
			//$this->view->entries_depotvente = count($entriesmembretiers);
			$this->view->entries_mstiers = count($resultat9);
			$this->view->entries_mstiers_enroles = count($resultat10);
			*/
			
	}
	
	
	public  function  listoffreurAction()  {
	   /* page public/listoffreur   */
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
	   
	   $t_zone = new Application_Model_DbTable_EuZone();
	   $t_pays = new Application_Model_DbTable_EuPays();
	   $t_region = new Application_Model_DbTable_EuRegion();
	   $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	   $t_canton = new Application_Model_DbTable_EuCanton();
	   
	   
	   $zones = $t_zone->fetchAll();
       $pays = $t_pays->fetchAll();
	   $regions = $t_region->fetchAll();
	   $prefectures = $t_prefecture->fetchAll();
	   $cantons  = $t_canton->fetchAll();

       $this->view->zones = $zones;
       $this->view->pays = $pays;
	   $this->view->regions = $regions;
	   $this->view->prefectures = $prefectures;
	   $this->view->cantons = $cantons;
	   
	   $t_offreur_projet = new Application_Model_DbTable_EuOffreurProjet();
	   $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
       $select->setIntegrityCheck(false);
	   $select->join(array('m' => 'eu_membre_morale'), 'eu_offreur_projet.offreur_projet_code_membre = m.code_membre_morale');
       //$select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.id_canton = c.id_canton');
	   $select->order(array('m.raison_sociale asc'));
       $entries = $t_offreur_projet->fetchAll($select);
       $this->view->entries = $entries;
		
	}
	
	
	
	public  function listcmfhAction()  {
	    /* page public/listcmfh -  */
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');

        $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
        $m_type_candidat = new Application_Model_EuTypeCandidatMapper();
        $candidats = $m_type_candidat->fetchAll();
		 
	    $zones = $t_zone->fetchAll();
        $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();

        $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
	    $this->view->candidats = $candidats;
		$nbre_cm = "";
		
		$request = $this->getRequest();
	    if($request->isPost()) {
            $zone = $request->getParam("code_zone");
            $pays = $request->getParam("id_pays");
            $region = $request->getParam("id_region");
            $prefecture = $request->getParam("id_prefecture");
            $canton = $request->getParam("id_canton");
            $type = $request->getParam("id_type_candidat");
			$nbre_cm = $request->getParam("nbre_cm");
			$this->view->nbre_cm = $nbre_cm;
			$t_cmfh = new Application_Model_DbTable_EuCmfh();
			
	    if(!empty($type) && empty($zone) && empty($pays) && empty($region) && empty($prefecture) && empty($canton)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($canton)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->where('c.id_canton = ?', $canton);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($prefecture)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($region)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($pays)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_type_candidat.id_type_candidat = t.id_type_candidat');$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($zone)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($canton)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->where('c.id_canton = ?', $canton);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($prefecture)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($region)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($pays)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($zone)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre');
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone);
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
			$select->join(array('m' => 'eu_membre'), 'eu_cmfh.code_membre = m.code_membre',array('nom_membre','prenom_membre','portable_membre'));
            //$select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->order(array('m.nom_membre','m.prenom_membre'));
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        }
		
		}
        $this->view->tabletri = 1;
    }
	
	
	
	
	
	
	
	
	
	
	


    public function souscriptiontableaudebord1Action()   {
	
	    /* administration/souscriptiontableaudebord*/
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}

            ini_set('memory_limit', '1024M');
			
			$t_membre = new Application_Model_DbTable_EuMembre();
		    $t_membremorale = new Application_Model_DbTable_EuMembreMorale();
			$t_activation = new Application_Model_DbTable_EuActivation();
			$t_souscription = new Application_Model_DbTable_EuSouscription();
			$t_dvente = new Application_Model_DbTable_EuDepotVente();
			$t_integrateur = new Application_Model_DbTable_EuIntegrateur();
			$t_offreur_projet = new Application_Model_DbTable_EuOffreurProjet();
			
			$t_ancien_membre = new Application_Model_DbTable_EuAncienMembre();
			$selmcnpp = $t_ancien_membre->select();
			$selmcnpp->where('type_membre like  ?','P');
			$selmcnpp->where('(code_membre is not null');
			$selmcnpp->orwhere('code_membre <> ?)','');
            $re_mcnpp = $t_ancien_membre->fetchAll($selmcnpp);
			
			$t_ancien_membre = new Application_Model_DbTable_EuAncienMembre();
			$selmcnpm = $t_ancien_membre->select();
			$selmcnpm->where('type_membre like  ?','M');
			$selmcnpm->where('(code_membre is not null');
			$selmcnpm->orwhere('code_membre <> ?)','');
            $re_mcnpm = $t_ancien_membre->fetchAll($selmcnpm);
			
			$se = $t_membre->select();
            $re = $t_membre->fetchAll($se);
		    $se_m = $t_membremorale->select();
            $re_m = $t_membre->fetchAll($se_m);
			
			$select = $t_membre->select();
            $select->where('etat_membre like  ?','N');
			$select->where('auto_enroler like ?','O');
            $result = $t_membre->fetchAll($select);
			
			$sel = $t_membremorale->select();
            $sel->where('etat_membre like  ?','N');
            $reponse = $t_membremorale->fetchAll($sel);
			
			$sel1 = $t_membremorale->select();
            $sel1->where('etat_membre like  ?','A');
            $reponse1 = $t_membremorale->fetchAll($sel1);
			
			$sel2 = $t_membre->select();
            $sel2->where('etat_membre like  ?','A');
            $reponse2 = $t_membre->fetchAll($sel2);
			
			$sa = $t_activation->select();
			$ra = $t_activation->fetchAll($sa);
			
			$selection = $t_souscription->select();
			$selection->from($t_souscription,array('SUM(souscription_nombre) as somme_cm'));
			$selection->where('souscription_programme like ?','CMFH');
			//$selection->where('souscription_autonome <> ?',1);
			$selection->where('publier = ?',3);
			$rowssouscription = $t_souscription->fetchRow($selection);
			
			$selection1 = $t_souscription->select();
			$selection1->where('souscription_programme like ?','CMFH');
			$selection1->where('publier = ?',3);
			$selection1->where('souscription_autonome = ?',1);
			$resultat = $t_souscription->fetchAll($selection1);
			
			$selection2 = $t_souscription->select();
			$selection2->where('(souscription_programme like ?','CMFH');
			$selection2->orwhere('souscription_programme like ?)','KACM');
			$selection2->where('publier = ?',3);
			$resultat2 = $t_souscription->fetchAll($selection2);
			
			$selection3 = $t_souscription->select();
			$selection3->where('souscription_programme like ?','KACM');
			$selection3->where('publier = ?',3);
			$resultat3 = $t_souscription->fetchAll($selection3);
			
			$selection4 = $t_souscription->select();
			$selection4->where('souscription_programme like ?','CMFH');
			$selection4->where('publier = ?',3);
			$resultat4 = $t_souscription->fetchAll($selection4);
			
			$selection5  = $t_dvente->select();
			$resultat5 = $t_dvente->fetchAll($selection5);
			
			$selection6 = $t_souscription->select();
			$selection6->where('souscription_programme like ?','CMFH');
			$selection6->where('publier = ?',3);
			$selection6->where("souscription_id NOT IN (SELECT souscription_id FROM eu_depot_vente)");
			$resultat6 = $t_souscription->fetchAll($selection6);
			
			$selection7 = $t_integrateur->select();
			$selection7->distinct();
		    $selection7->from(array('eu_integrateur'),array('code_membre'));
			$resultat7 = $t_integrateur->fetchAll($selection7);
			
			$selection8 = $t_offreur_projet->select();
			$selection8->distinct();
		    $selection8->from(array('eu_offreur_projet'),array('offreur_projet_code_membre'));
			$resultat8 = $t_offreur_projet->fetchAll($selection8);
			
			$entries_cmpppt = $rowssouscription->somme_cm - count($resultat);
			
			
			$this->view->entries_membres = count($re) + count($re_m);
			
			$this->view->entries_membres_pp = count($re);
			
			$this->view->entries_membres_pm = count($re_m);
			
			$this->view->entries_membres_pmn = count($reponse);
			
			$this->view->entries_membres_ppn = count($result);
			
			$this->view->entries_membres_pppt = count($ra);
			
			$this->view->entries_cmpppt  =  $entries_cmpppt;
			
			$this->view->entries_membres_a = count($reponse1) + count($reponse2);
			
			$this->view->entries_membres_pma = count($reponse1);
			
			$this->view->entries_membres_ppa = count($reponse2);
			
			$this->view->entries_membres_ppmcnp  = count($re_mcnpp);
			
			$this->view->entries_membres_ppgie =  count($reponse2) - count($re_mcnpp);
			
			$this->view->entries_membres_pmmcnp  = count($re_mcnpm);
			
			$this->view->entries_membres_pmgie  =  count($reponse1) - count($re_mcnpm);
			
			$this->view->entries_souscriptions = count($resultat) + count($resultat2);
			
			$this->view->entries_souscriptions_kacm = count($resultat) + count($resultat3);
			
			$this->view->entries_souscriptions_cmfh = count($resultat4);
			
			$this->view->entries_souscriptions_cmfhexp = count($resultat5);
			
			$this->view->entries_souscriptions_cmfhnexp = count($resultat6);
			
			$this->view->entries_integrateurs = count($resultat7);
			
			$this->view->entries_offreurs = count($resultat8);
			
	}




    public function souscriptiontableaudebordolderAction() {
        /* acheteur administration/erreuracheteur - Erreur la acheteur libre d'information */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

           ini_set('memory_limit', '1024M');    


        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
        
        $this->view->souscription_total = $souscription_mapper->fetchAllByTableauBordNombreTotal("", "", "", "", 0, "", 0, "", 0, 0, 0, 0, "");
        $this->view->souscription_total_payant = $souscription_mapper->fetchAllByTableauBordNombreTotal("", "", "", "", 0, "", 0, "NULL", 0, 0, 0, 0, "");

        $this->view->souscription_total_activer0 = $souscription_mapper->fetchAllByTableauBordNombreTotal(0, "", "", "", 0, "", 0, "", 0, 0, 0, 0, "");
        $this->view->souscription_total_activer1 = $souscription_mapper->fetchAllByTableauBordNombreTotal(1, "", "", "", 0, "", 0, "", 0, 0, 0, 0, "");
        $this->view->souscription_total_activer2 = $souscription_mapper->fetchAllByTableauBordNombreTotal(2, "", "", "", 0, "", 0, "", 0, 0, 0, 0, "");
        $this->view->souscription_total_activer3 = $souscription_mapper->fetchAllByTableauBordNombreTotal(3, "", "", "", 0, "", 0, "", 0, 0, 0, 0, "");

        $this->view->souscription_total_reactivation_mcnp = $souscription_mapper->fetchAllByTableauBordNombreTotal("3", "", "", "", 0, "", 0, "MCNP", 0, 0, 0, 0, "");
        $this->view->souscription_total_reactivation_mcnp_pp = $souscription_mapper->fetchAllByTableauBordNombreTotal("3", "", "", "", 0, "", 0, "MCNP_PP", 0, 0, 0, 0, "");
        $this->view->souscription_total_reactivation_mcnp_pm = $souscription_mapper->fetchAllByTableauBordNombreTotal("3", "", "", "", 0, "", 0, "MCNP_PM", 0, 0, 0, 0, "");
        $this->view->souscription_total_reactivation_redemare = $souscription_mapper->fetchAllByTableauBordNombreTotal("3", "", "", "", 0, "", 0, "RED", 0, 0, 0, 0, "");
        $this->view->souscription_total_reactivation_redemare_pp = $souscription_mapper->fetchAllByTableauBordNombreTotal("3", "", "", "", 0, "", 0, "RED_PP", 0, 0, 0, 0, "");
        $this->view->souscription_total_reactivation_redemare_pm = $souscription_mapper->fetchAllByTableauBordNombreTotal("3", "", "", "", 0, "", 0, "RED_PM", 0, 0, 0, 0, "");


        $this->view->souscription_total_pp = $souscription_mapper->fetchAllByTableauBordNombreTotal(3, "", "", "PP", 0, "", 0, "", 0, 0, 0, 0, "");
        $this->view->souscription_total_pm = $souscription_mapper->fetchAllByTableauBordNombreTotal(3, "", "", "PM", 0, "", 0, "", 0, 0, 0, 0, "");

        $this->view->souscription_total_kacm = $souscription_mapper->fetchAllByTableauBordNombreTotal(3, "", "", "", 0, "KACM", 0, "", 0, 0, 0, 0, "");
        $this->view->souscription_total_cmfh = $souscription_mapper->fetchAllByTableauBordNombreTotal(3, "", "", "", 0, "CMFH", 0, "", 0, 0, 0, 0, "");





$eumemb = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eumemb->select();
                        $select->order(array('date_identification ASC'));
                        $select->limit(1);
                        $rowseumemb = $eumemb->fetchRow($select);
                        $datedebut = substr($rowseumemb->date_identification, 0, 10);


$eumemb = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eumemb->select();
                        $select->order(array('date_identification DESC'));
                        $select->limit(1);
                        $rowseumemb = $eumemb->fetchRow($select);
                        $datefin = substr($rowseumemb->date_identification, 0, 10);                        


        $bon_neutre_detail = new Application_Model_EuBonNeutreDetailMapper();
        $this->view->entries_bon_neutre_detail = $bon_neutre_detail->fetchAllByTableauBordNombre(0, 0, "", "", 0, 0, 0, 0, "", 0, $datedebut, $datefin);


        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries_membre = $membre->fetchAllByTableauBordNombre("", "", "", 0, 0, 0, 0, "", "", "", "", "", $datedebut, $datefin, "", 0, "", "");

        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries_membre2 = $membre->fetchAllByTableauBordNombre("", "", "", 0, 0, 0, 0, "", "", "", "", "", $datedebut, $datefin, "", 0, "O", "N");

        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries_membre4 = $membre->fetchAllByTableauBordNombre("", "", "", 0, 0, 0, 0, "", "", "", "", "", $datedebut, $datefin, "", 0, "O", "A");

        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries_membre3 = $membre->fetchAllByTableauBordNombre("", "", "", 0, 0, 0, 0, "", "", "", "", "", $datedebut, $datefin, "", 0, "N", "N");

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries_membremorale = $membremorale->fetchAllByTableauBordNombre("", "", 0, 0, 0, 0, 0, "", "", "", "", "", $datedebut, $datefin, "", "", "", "");

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries_membremorale2 = $membremorale->fetchAllByTableauBordNombre("", "", 0, 0, 0, 0, 0, "", "", "", "", "", $datedebut, $datefin, "", "", "O", "N");

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries_membremorale4 = $membremorale->fetchAllByTableauBordNombre("", "", 0, 0, 0, 0, 0, "", "", "", "", "", $datedebut, $datefin, "", "", "O", "A");


        $integrateur = new Application_Model_EuIntegrateurMapper();
        $this->view->entries_integrateur = $integrateur->fetchAllByTableauBordNombre(1, 0, 0, 0, "", "", 0, 0, 0, 0, "", $datedebut, $datefin);
       

        $offreur_projet = new Application_Model_EuOffreurProjetMapper();
        $this->view->entries_offreur_projet = $offreur_projet->fetchAllByTableauBordNombre(1, 0, 0, 0, "", "", "", 0, 0, 0, 0, "", $datedebut, $datefin);
       


    
    }






    public function listactivationmppAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries = $membre->fetchAllByActivationMembreasso();

        $this->view->tabletri = 1;

    }





    public function listactivationmpmAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $membremorale->fetchAllByActivationMembreasso();

        $this->view->tabletri = 1;

    }



    public function pdfsouscriptionAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int)$this->_request->getParam('id');
            if ($id != 0) {

$dir = "../../webfiles/pdf_souscription/";
    $findme = "SOUSCRIPTION_".$id."_.pdf";
if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
        while (($file = readdir($dh)) !== false) {
            $nomfile = basename($file).PHP_EOL;
            if(stripos($nomfile, $findme) !== false && stripos($nomfile, ".pdf") !== false){
            $releve = $dir.$file;
            break;
            }else{
            $releve = "";
                }
        }
        closedir($dh);
    }
    }

            }


if($releve != ""){
$this->_redirect(str_replace('../../webfiles/', 'http://webfiles.gacsource.net/', $releve));
}


    }














    public function listsouscriptionetat233Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme3(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
    }
    } 
            $this->view->tabletri = 1;
    }


    public function listsouscriptionetat2233Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme3(0, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;    
    }
    }
            $this->view->tabletri = 1;
    }




    public function listsouscriptionetat243Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

$periode = (string) $this->_request->getParam('periode');

    //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');
        
        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription3($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;        
    }
        $this->view->tabletri = 1;
    }


    public function listsouscriptionetat2243Action()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

$periode = (string) $this->_request->getParam('periode');

    //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription3($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;    
    }
        $this->view->tabletri = 1;
    }







    public function edittelephoneAction()
    {
        /* page administration/edittelephone - Edit telephone */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
            if (isset($_POST['numero_telephone']) && $_POST['numero_telephone'] != "" && isset($_POST['id_pays']) && $_POST['id_pays'] != "" && isset($_POST['code_telephonique']) && $_POST['code_telephonique'] != "") {

$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];

if($compagnie == 1){
$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{

                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                   $m_telephone->find($_POST['id_telephone'], $telephone);

                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    //$telephone->setCode_membre($sessionmembre->code_membre);
                    $m_telephone->update($telephone);

                    $this->_redirect('/administration/listtelephone');
                    $this->view->error = "Numéro telephone enregistré";
                
}
            } else {
                $this->view->error = "Champs * obligatoire";
                $id = (int)$this->_request->getParam('id');
                if ($id > 0) {
                  $a = new Application_Model_EuTelephone();
                  $ma = new Application_Model_EuTelephoneMapper();
                  $ma->find($id, $a);
                  $this->view->telephone = $a;
                }
            }
        } else {

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $a = new Application_Model_EuTelephone();
        $ma = new Application_Model_EuTelephoneMapper();
        $ma->find($id, $a);
        $this->view->telephone = $a;
            }
    }
    }

    
    




    public function listtelephoneAction()
    {
        /* page administration/listtelephone - Liste des telephones */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    ini_set('memory_limit','1024M');

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {

        $telephone = new Application_Model_EuTelephoneMapper();
        $this->view->entries = $telephone->fetchAllByCodeMembre($_POST['code_membre']);

    }
}

        $this->view->tabletri = 1;
    }






    public function supptelephoneAction()
    {
        /* page administration/supptelephone - Suppression de telephone */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $telephone = new Application_Model_EuTelephone();
        $telephoneM = new Application_Model_EuTelephoneMapper();
        $telephoneM->find($id, $telephone);
        
        $telephoneM->delete($telephone->id_telephone);
        
        }

        $this->_redirect('/administration/listtelephone');
    }















    public function listsouscriptionetat233alloldAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}


        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme4(0);

        $this->view->tabletri = 1;
    }


    public function listsouscriptionetat2233alloldAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme4(0);

        $this->view->tabletri = 1;
    }




    public function listsouscriptionetat243alloldAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        
        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription4($id);

        $this->view->tabletri = 1;
    }


    public function listsouscriptionetat2243alloldAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription4($id);

        $this->view->tabletri = 1;
    }








    public function listsouscriptionetat233allAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme5(0, $_POST['date_debut'], $_POST['date_fin']);

    }else{
        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme5(0, "", "");

    }
        $this->view->tabletri = 1;
}

    public function listsouscriptionetat2233allAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme5(0, $_POST['date_debut'], $_POST['date_fin']);

    }else{
        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme5(0, "", "");
    }
        $this->view->tabletri = 1;
    }




    public function listsouscriptionetat243allAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        $date_debut = (string) $this->_request->getParam('date_debut');
        $date_fin = (string) $this->_request->getParam('date_fin');
        
        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription5($id, $date_debut, $date_fin);

        $this->view->tabletri = 1;
    }


    public function listsouscriptionetat2243allAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        $date_debut = (string) $this->_request->getParam('date_debut');
        $date_fin = (string) $this->_request->getParam('date_fin');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription5($id, $date_debut, $date_fin);

        $this->view->tabletri = 1;
    }







    

public function etatqbanexcelAction()
    {
        /* page administration/etatqbanexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAn($date_debut, $date_fin);
$this->_redirect(Util_Utils::genererExcelBAn($date_debut, $date_fin));

    }


public function etatqbanapproexcelAction()
    {
        /* page administration/etatqbanapproexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
	
	    ini_set('memory_limit', '1024M');

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnAppro($date_debut, $date_fin);
$this->_redirect(Util_Utils::genererExcelBAnAppro($date_debut, $date_fin));

    }

public function etatqbankacmexcelAction()
    {
        /* page administration/etatqbankacmexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnKACM($date_debut, $date_fin);
$this->_redirect(Util_Utils::genererExcelBAnKACM($date_debut, $date_fin));

    }

    public function etatqbanbcexcelAction() {
        /* page administration/etatqbanbcexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnBC($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelBAnBC($date_debut, $date_fin));

    }
	
	
	public function etatqbanbcexceltiersAction() {
        /* page administration/etatqbanbcexcel - exportation en excel */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnBC($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelBAnBCTiers($date_debut, $date_fin));

    }
	
	

    public function etatqbanrexcelAction() {
        /* page administration/etatqbanrexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnR($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelBAnR($date_debut, $date_fin));

    }
	
	
	public function etatqvgcpexcelAction() {
        /* page administration/etatqvgcpexcel - exportation en excel */

		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	    if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
           if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}

        /*
		$date_debut = (string)$this->_request->getParam('date_debut');
	    $this->view->date_fin = $date_debut;
		$date_fin = (string)$this->_request->getParam('date_fin');
	    $this->view->date_fin = $date_fin;
	    $code_tegc = (string)$this->_request->getParam("code_tegc");
	    $this->view->code_tegc = $code_tegc;
		*/
		
		$date_op = (string) $this->_request->getParam('date_op');
		$this->view->date_op = $date_op;

        //Util_Utils::genererExcelVGCp($date_debut, $date_fin, $code_tegc);
		$this->_redirect(Util_Utils::genererExcelVGCp($date_op));
        //$this->_redirect(Util_Utils::genererExcelVGCp($select));

    }
	
	
	
	

public function etatqvgcpexceloldAction()
    {
        /* page administration/etatqvgcpexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $code_tegc = (string)$this->_request->getParam("code_tegc");
        $this->view->code_tegc = $code_tegc;

        //Util_Utils::genererExcelVGCp($date_debut, $date_fin, $code_tegc);
$this->_redirect(Util_Utils::genererExcelVGCp($date_debut, $date_fin, $code_tegc));

    }

public function etatqvgcscexcelAction()
    {
        /* page administration/etatqvgcscexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $code_tegc = (string)$this->_request->getParam("code_tegc");
        $this->view->code_tegc = $code_tegc;

        //Util_Utils::genererExcelVGCsc($date_debut, $date_fin, $code_tegc);
$this->_redirect(Util_Utils::genererExcelVGCsc($date_debut, $date_fin, $code_tegc));

    }

public function etatqfgfnexcelAction()
    {
        /* page administration/etatqfgfnexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $code_banque = (string)$this->_request->getParam("code_banque");
        $this->view->code_banque = $code_banque;

        //Util_Utils::genererExcelFGFN($date_debut, $date_fin, $code_banque);
        $this->_redirect(Util_Utils::genererExcelFGFN($date_debut, $date_fin, $code_banque));

    }
	
	

    public function etatqopiexcelAction() {
        /* page administration/etatqopiexcel - exportation en excel */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string) $this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string) $this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $code_banque = (string) $this->_request->getParam("code_banque");
        $this->view->code_banque = $code_banque;

        //Util_Utils::genererExcelOPI($date_debut, $date_fin, $code_tegc);
        $this->_redirect(Util_Utils::genererExcelOPI($date_debut, $date_fin, $code_banque));

    }
	
	
	
	
    public function etatqopiexceltiersAction()   {
        /* page administration/etatqopiexcel - exportation en excel */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string) $this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string) $this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $code_banque = (string) $this->_request->getParam("code_banque");
        $this->view->code_banque = $code_banque;

        //Util_Utils::genererExcelOPI($date_debut, $date_fin, $code_tegc);
        $this->_redirect(Util_Utils::genererExcelOPITiers($date_debut, $date_fin, $code_banque));

    }
	
	
	
	

    public function etatqopibanexcelAction() {
        /* page administration/etatqopibanexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $code_tegc = (string)$this->_request->getParam("code_tegc");
        $this->view->code_tegc = $code_tegc;

        //Util_Utils::genererExcelOPIBAn($date_debut, $date_fin, $code_tegc);
$this->_redirect(Util_Utils::genererExcelOPIBAn($date_debut, $date_fin, $code_tegc));

    }

public function etatqopibcexcelAction()
    {
        /* page administration/etatqopibcexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $code_tegc = (string)$this->_request->getParam("code_tegc");
        $this->view->code_tegc = $code_tegc;

        //Util_Utils::genererExcelOPIBC($date_debut, $date_fin, $code_tegc);
$this->_redirect(Util_Utils::genererExcelOPIBC($date_debut, $date_fin, $code_tegc));

    }

    
    
public function listdetailkacmexcelAction()
    {
        /* page administration/etatqbankacmexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnKACMDetails($date_debut, $date_fin);
$this->_redirect(Util_Utils::genererExcelBAnKACMDetails($date_debut, $date_fin));

    }   
    
   
public function listdetailbcexcelAction()
    {
        /* page administration/etatqbanbcexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
    if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnBCDetails($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelBAnBCDetails($date_debut, $date_fin));

    }


    public function listdetailbcexceltiersAction() {
        /* page administration/etatqbanbcexcel - exportation en excel */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
            if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_fin = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;

        //Util_Utils::genererExcelBAnBCDetails($date_debut, $date_fin);
        $this->_redirect(Util_Utils::genererExcelBAnBCTiersDetails($date_debut, $date_fin));

    }
	
        

    public function addtepallAction()  {
        /* page administration/addtep - Ajout d'un acteur prestataire */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
        if (!isset($sessionutilisateur->login))      { $this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")  { $this->_redirect('/administration/confirmation');}
        






        $t_canton = new Application_Model_DbTable_EuCanton();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
            
        $cantons = $t_canton->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
           
        $this->view->cantons = $cantons;
        $this->view->prefectures = $prefectures;
        $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        
        $tegc   = new Application_Model_EuTegc();
        $m_tegc = new Application_Model_EuTegcMapper();
        

        //$request = $this->getRequest();
        
        //if ($request->isPost())  {
            //$db = Zend_Db_Table::getDefaultAdapter();
            //$db->beginTransaction();
            //try {



$integrateur = new Application_Model_DbTable_EuIntegrateur();
$select = $integrateur->select();
//$select->where('integrateur_id = ?', 1);
//$select->order('integrateur_id asc');
$entries = $integrateur->fetchAll($select);

foreach ($entries as $value) {



                $membre = new Application_Model_EuMembre();
                $m_map  = new Application_Model_EuMembreMapper();
                
                $date = new Zend_Date();
            
                $membremorale = new Application_Model_EuMembreMorale();
                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
                
                $integrateur = new Application_Model_EuIntegrateur();
                $m_integrateur  = new Application_Model_EuIntegrateurMapper();
                
                $eucompte = new Application_Model_EuCompte();
                $m_compte = new Application_Model_EuCompteMapper();
                                    
                $prk = new Application_Model_EuPrk();
                $m_prk = new Application_Model_EuPrkMapper();
                                    
                $te   = new Application_Model_EuTegc();
                $m_te = new Application_Model_EuTegcMapper();

                $code_membre = $value->code_membre;

                if($value->integrateur_canton > 0){
                $id_canton = $value->integrateur_canton;
        $canton = new Application_Model_EuCanton();
        $cantonM = new Application_Model_EuCantonMapper();
        $cantonM->find($id_canton, $canton);
                $id_prefecture = $canton->id_prefecture;
        $prefecture = new Application_Model_EuPrefecture();
        $prefectureM = new Application_Model_EuPrefectureMapper();
        $prefectureM->find($id_prefecture, $prefecture);
                $id_region = $prefecture->id_region;
        $region = new Application_Model_EuRegion();
        $regionM = new Application_Model_EuRegionMapper();
        $regionM->find($id_region, $region);
                $id_pays = $region->id_pays;
        $pays = new Application_Model_EuPays();
        $paysM = new Application_Model_EuPaysMapper();
        $paysM->find($id_pays, $pays);
                $code_zone = $pays->code_zone;
                }else{
                $id_canton = NULL;
                $id_prefecture = NULL;
                $id_region = NULL;
                $id_pays = NULL;
                $code_zone = NULL;
            }
                if ($code_membre == "" || $code_membre == NULL) {
                    # code...
                }else{

                $rowsintegrateur = $m_integrateur->fetchAllByCodeMembre($code_membre);


                if(substr($code_membre,19,1) == 'P')  {
                    $findmembre = $m_map->find($code_membre, $membre);
                    if($findmembre == false) {
                              //$db->rollback();
                              $sessionutilisateur->error = "Le numéro membre  saisi  ".$code_membre."  est introuvable ...";
                              //return;
                    }
                } else {
                    $findmembre = $m_mapmorale->find($code_membre, $membremorale);
                    if($findmembre == false) {
                        //$db->rollback();
                        $sessionutilisateur->error = "Le numéro membre saisi  ".$code_membre."  est introuvable ...";
                        //return;
                    }
                }
                
                if(count($rowsintegrateur) <= 0) {
                  //$db->rollback();
                  $sessionutilisateur->error = "Le membre doit souscrire à 10 comptes au moins ...";
                  //return;
                }

                // script de creation de TE de prestation
                
                $code_te = "";
                $nom_tegc = "";

                if(substr($code_membre,19,1)=='P') {
                    $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
                } else {
                    $nom_tegc = $membremorale->raison_sociale;
                }
                                    
                                    
                $num_compte = 'NB-TPAGCP-'.$code_membre;
                $res = $m_compte->find($num_compte,$eucompte);
                                    
                if(!$res)   {
                    $eucompte->setCode_cat('TPAGCP')
                             ->setCode_compte($num_compte)
                             ->setCode_type_compte('NB')
                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                             ->setDesactiver(0)
                             ->setLib_compte('TPAGCP')
                             ->setSolde(0);
                                                 
                    if(substr($code_membre,19,1)=='P') {         
                        $eucompte->setCode_membre($code_membre)
                                 ->setCode_membre_morale(NULL);
                    } else  {
                        $eucompte->setCode_membre(NULL)
                                 ->setCode_membre_morale($code_membre);
                    }                                                
                    $m_compte->save($eucompte);
                                        
                    $code_te = $m_te->getLastTegcByMembre($code_membre);
                    if ($code_te == NULL) {
                        $code_te = 'TEGCP'.$code_membre. '00001';         
                    } else {
                        $num_ordre = substr($code_te, -5);
                        $num_ordre++;
                        $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
                    }
                                        
                    $te->setCode_tegc($code_te);
                    $te->setId_filiere(NULL);
                    $te->setMdv(12);
                    $te->setTranche_payement(1);
                    if(substr($code_membre,19,1)=='M') {
                        $te->setCode_membre($code_membre);
                    } else {
                        $te->setCode_membre_physique($code_membre);
                    }                                       
                    $te->setMontant(0);
                    $te->setMontant_utilise(0);
                    $te->setSolde_tegc(0);
                    $te->setId_utilisateur(NULL);
                    $te->setNom_tegc($nom_tegc);
                    $te->setNom_produit("Prestation");
                    $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
                    $te->setType_tegc("PRESTATAIRE");
                    $te->setRecurrent_illimite(0);
                    $te->setRecurrent_limite(0);
                    $te->setNonrecurrent(1);
                    $te->setPeriode1(0);
                    $te->setPeriode2(0);
                    $te->setPeriode3(0);
                    $te->setFormel(0);
                    $te->setRegime_tva(0);
                    $te->setSpecial(0);
                    $te->setOrdinaire(1);
                    $te->setSubvention(0);
                                        
                    $te->setCode_zone($code_zone);
                    $te->setId_pays($id_pays);
                    $te->setId_region($id_region);
                    $te->setId_prefecture($id_prefecture);
                    $te->setId_canton($id_canton);

                    $m_te->save($te);

                    $id_prk = $m_prk->findConuter() + 1;
                    $prk->setId_prk($id_prk);
                    $prk->setCode_tegc($code_te);
                    $prk->setValeur(7);
                    $m_prk->save($prk);
                                                                                
                }
                                    
                $num_comptets = 'NB-TSGCP-'.$code_membre;
                $rests = $m_compte->find($num_comptets,$eucompte);
                                    
                if(!$rests) {
                    $eucompte->setCode_cat('TSGCP')
                             ->setCode_compte($num_comptets)
                             ->setCode_type_compte('NB')
                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                             ->setDesactiver(0)
                             ->setLib_compte('TSGCP')
                             ->setSolde(0);
                                                 
                    if(substr($code_membre,19,1)=='P') {         
                        $eucompte->setCode_membre($code_membre)
                                 ->setCode_membre_morale(NULL);
                    } else  {
                        $eucompte->setCode_membre(NULL)
                                 ->setCode_membre_morale($code_membre);
                    }                                                
                    $m_compte->save($eucompte);
                                    
                }
                // fin script de creation TE
                //$db->commit();

                }

            }
            $sessionutilisateur->error = "Operation bien effectuee ...";
                        
                //$this->_redirect('/administration/addtepall');                
            /*} catch (Exception $exc) {                   
                $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }*/
        
        //}
    
    }
    












    public function addpayementcommissionassociationAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

    if (!isset($sessionutilisateur->login)) {$this->_redirect('/integrateur/login');}


            $type = (int)$this->_request->getParam('type');

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['payement_commission_montant']) && $_POST['payement_commission_montant']!="" && isset($_POST['id_type_commission']) && $_POST['id_type_commission']!="" && isset($_POST['id_mode_payement']) && $_POST['id_mode_payement']!="") {


        $date_id = Zend_Date::now();

        $partagea_m = new Application_Model_EuPartageaMapper();
        $partage = $partagea_m->findSomme3($_POST['association_id'], $_POST['date_debut'], $_POST['date_fin']);
        $row = $partage[0];

        $partagea2 = new Application_Model_EuPartageaMapper();
        $partage2 = $partagea2->fetchAllByCommissionSouscription3($_POST['association_id'], $_POST['date_debut'], $_POST['date_fin']);

        if($_POST['payement_commission_montant'] <= $row[2]){

            if (count($partage) > 0 && count($partage2) > 0) {

        $membreasso_m = new Application_Model_EuMembreassoMapper();
        $membreasso = $membreasso_m->fetchAllByAssociation($_POST['association_id']);

        $payement_commission = new Application_Model_EuPayementCommission();
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();

            $compteur_payement_commission = $payement_commission_mapper->findConuter() + 1;
            $payement_commission->setPayement_commission_id($compteur_payement_commission);
            $payement_commission->setPayement_commission_montant($_POST['payement_commission_montant']);
            $payement_commission->setPayement_commission_date_demande($date_id->toString('yyyy-MM-dd'));
            $payement_commission->setPayement_commission_demande(1);
            $payement_commission->setPayement_commission_payer(0);
            $payement_commission->setPayement_commission_date_payer(NULL);
            $payement_commission->setPayement_commission_date_debut($_POST['date_debut']);
            $payement_commission->setPayement_commission_date_fin($_POST['date_fin']);
            $payement_commission->setMembreasso_id($membreasso->membreasso_id);
            $payement_commission->setId_type_commission($_POST['id_type_commission']);
            $payement_commission->setId_mode_payement($_POST['id_mode_payement']);
            $payement_commission->setPayement_commission_type(1);
            $payement_commission_mapper->save($payement_commission);

/////////////////////////////////////


        $payementcommission = new Application_Model_EuPayementCommission();
        $payementcommissionM = new Application_Model_EuPayementCommissionMapper();
        $payementcommissionM->find($compteur_payement_commission, $payementcommission);
        
        $payementcommission->setPayement_commission_date_payer($date_id->toString('yyyy-MM-dd'));
        $payementcommission->setPayement_commission_payer(1);
        $payementcommissionM->update($payementcommission);
        
        
if($payementcommission->payement_commission_type == 1){
    
        $membreasso = new Application_Model_EuMembreasso();
        $membreassoM = new Application_Model_EuMembreassoMapper();
        $membreassoM->find($payementcommission->membreasso_id, $membreasso);
      
        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($membreasso->membreasso_association, $association);

        $partagea = new Application_Model_EuPartageaMapper();
        $partage = $partagea->fetchAllByCommissionSouscription3($association->association_id, $payementcommission->payement_commission_date_debut, $payementcommission->payement_commission_date_fin);
        
        $montant = $payementcommission->payement_commission_montant;
        foreach ($partage as $entry){
            if($montant >= $entry->partagea_montant){
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
        
        $partageaa->setPartagea_montant_utilise($partageaa->partagea_montant_utilise + $entry->partagea_montant);
        $partageaa->setPartagea_montant_solde($partageaa->partagea_montant_solde - $entry->partagea_montant);
        $partageaa->setPartagea_montant_impot(0);
        $partageaaM->update($partageaa);
        
                $montant -= $entry->partagea_montant;
                
                }else if($montant == 0){
                    break;
                
                }else if($montant < $entry->partagea_montant){
                    
        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($entry->partagea_id, $partageaa);
        
        $partageaa->setPartagea_montant_utilise($partageaa->partagea_montant_utilise + $montant);
        $partageaa->setPartagea_montant_solde($partageaa->partagea_montant_solde - $montant);
        $partageaa->setPartagea_montant_impot(0);
        $partageaaM->update($partageaa);
        break;
                    }
            
            }
        
        
        
        
    }



        $this->_redirect('/administration/listpayementcommissionassociation');

}else {  $sessionutilisateur->error = "Cet intégrateur ne dispose pas de commission"; }

}else {  $sessionutilisateur->error = "Vous ne pouvez pas payer plus que la commission. "; }


        } else {  $sessionutilisateur->error = "Champs * obligatoire ..."; }
    }

    }






    public function addpayementcommissionmembreassoAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

    if (!isset($sessionutilisateur->login)) {$this->_redirect('/integrateur/login');}


            $type = (int)$this->_request->getParam('type');

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['payement_commission_montant']) && $_POST['payement_commission_montant']!="" && isset($_POST['id_type_commission']) && $_POST['id_type_commission']!="" && isset($_POST['id_mode_payement']) && $_POST['id_mode_payement']!="") {


        $date_id = Zend_Date::now();

        $partagem_m = new Application_Model_EuPartagemMapper();
        $partage = $partagem_m->findSomme3($_POST['membreasso_id'], $_POST['date_debut'], $_POST['date_fin']);
        $row = $partage[0];

        $partagem2 = new Application_Model_EuPartagemMapper();
        $partage2 = $partagem2->fetchAllByCommissionSouscription3($_POST['membreasso_id'], $_POST['date_debut'], $_POST['date_fin']);

        if($_POST['payement_commission_montant'] <= $row[2]){

            if (count($partage) > 0 && count($partage2) > 0) {

        $payement_commission = new Application_Model_EuPayementCommission();
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();

            $compteur_payement_commission = $payement_commission_mapper->findConuter() + 1;
            $payement_commission->setPayement_commission_id($compteur_payement_commission);
            $payement_commission->setPayement_commission_montant($_POST['payement_commission_montant']);
            $payement_commission->setPayement_commission_date_demande($date_id->toString('yyyy-MM-dd'));
            $payement_commission->setPayement_commission_demande(1);
            $payement_commission->setPayement_commission_payer(0);
            $payement_commission->setPayement_commission_date_payer(NULL);
            $payement_commission->setPayement_commission_date_debut($_POST['date_debut']);
            $payement_commission->setPayement_commission_date_fin($_POST['date_fin']);
            $payement_commission->setMembreasso_id($_POST['membreasso_id']);
            $payement_commission->setId_type_commission($_POST['id_type_commission']);
            $payement_commission->setId_mode_payement($_POST['id_mode_payement']);
            $payement_commission->setPayement_commission_type(2);
            $payement_commission_mapper->save($payement_commission);

/////////////////////////////////////


        $payementcommission = new Application_Model_EuPayementCommission();
        $payementcommissionM = new Application_Model_EuPayementCommissionMapper();
        $payementcommissionM->find($compteur_payement_commission, $payementcommission);
        
        $payementcommission->setPayement_commission_date_payer($date_id->toString('yyyy-MM-dd'));
        $payementcommission->setPayement_commission_payer(1);
        $payementcommissionM->update($payementcommission);
        
        
if($payementcommission->payement_commission_type == 2){
        $partagem = new Application_Model_EuPartagemMapper();
        $partage = $partagem->fetchAllByCommissionSouscription3($payementcommission->membreasso_id, $payementcommission->payement_commission_date_debut, $payementcommission->payement_commission_date_fin);
        
        $montant = $payementcommission->payement_commission_montant;
        foreach ($partage as $entry){
            if($montant >= $entry->partagem_montant){
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
        
        $partagemm->setPartagem_montant_utilise($partagemm->partagem_montant_utilise + $entry->partagem_montant);
        $partagemm->setPartagem_montant_solde($partagemm->partagem_montant_solde - $entry->partagem_montant);
        $partagemm->setPartagem_montant_impot(0);
        $partagemmM->update($partagemm);
        
                $montant -= $entry->partagem_montant;
                
                }else if($montant == 0){
                    break;
                
                }else if($montant < $entry->partagem_montant){
                    
        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($entry->partagem_id, $partagemm);
        
        $partagemm->setPartagem_montant_utilise($partagemm->partagem_montant_utilise + $montant);
        $partagemm->setPartagem_montant_solde($partagemm->partagem_montant_solde - $montant);
        $partagemm->setPartagem_montant_impot(0);
        $partagemmM->update($partagemm);
        break;
                    }
            
            }
        

        }



        $this->_redirect('/administration/listpayementcommissionmembreasso');

}else {  $sessionutilisateur->error = "Cet utilisateur ne dispose pas de commission"; }

}else {  $sessionutilisateur->error = "Vous ne pouvez pas payer plus que la commission."; }


        } else {  $sessionutilisateur->error = "Champs * obligatoire ..."; }
    }

    }




    public function listpayementcommissionassociationAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

    if (!isset($sessionutilisateur->login)) {$this->_redirect('/integrateur/login');}


        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByAssociation(1);


        $this->view->tabletri = 1;


    }




    public function listpayementcommissionmembreassoAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

    if (!isset($sessionutilisateur->login)) {$this->_redirect('/integrateur/login');}


        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByAssociation(2);


        $this->view->tabletri = 1;


    }









    public function datecommissionAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

    if (!isset($sessionutilisateur->login)) {$this->_redirect('/integrateur/login');}

ini_set('memory_limit', '1024M');

        $tablem = new Application_Model_DbTable_EuPartagem();
        $select = $tablem->select();
        $select->where("partagem_date IS NULL");
        $partagem = $tablem->fetchAll($select);
        foreach ($partagem as $value) {

        $validation_quittance = new Application_Model_DbTable_EuValidationQuittance();
        $select2 = $validation_quittance->select();
        $select2->where("validation_quittance_souscription = ?", $value->partagem_souscription);
        $select2->order(array("validation_quittance_date DESC"));
        $select2->limit(1);

        if($validation_quittance_m = $validation_quittance->fetchRow($select2)){

        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($value->partagem_id, $partagemm);
        
        $partagemm->setPartagem_date($validation_quittance_m->validation_quittance_date);
        $partagemmM->update($partagemm);

        }else{

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        if($souscriptionM->find($value->partagem_souscription, $souscription)){

        $partagemm = new Application_Model_EuPartagem();
        $partagemmM = new Application_Model_EuPartagemMapper();
        $partagemmM->find($value->partagem_id, $partagemm);
        
        $partagemm->setPartagem_date($souscription->souscription_date);
        $partagemmM->update($partagemm);

        }


        }
        }



        $tablea = new Application_Model_DbTable_EuPartagea();
        $select = $tablea->select();
        $select->where("partagea_date IS NULL");
        $partagea = $tablea->fetchAll($select);
        foreach ($partagea as $value) {

        $validation_quittance = new Application_Model_DbTable_EuValidationQuittance();
        $select2 = $validation_quittance->select();
        $select2->where("validation_quittance_souscription = ?", $value->partagea_souscription);
        $select2->order(array("validation_quittance_date DESC"));
        $select2->limit(1);
        
        if($validation_quittance_a = $validation_quittance->fetchRow($select2)){

        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($value->partagea_id, $partageaa);
        
        $partageaa->setPartagea_date($validation_quittance_a->validation_quittance_date);
        $partageaaM->update($partageaa);

        }else{

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        if($souscriptionM->find($value->partagea_souscription, $souscription)){

        $partageaa = new Application_Model_EuPartagea();
        $partageaaM = new Application_Model_EuPartageaMapper();
        $partageaaM->find($value->partagea_id, $partageaa);
        
        $partageaa->setPartagea_date($souscription->souscription_date);
        $partageaaM->update($partageaa);
        
        }


        }
        }


    }

















  
  public function listdemandeprestataireAction() {
     /* page pointage/listdemande - liste des demandes de paiement */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        
     $demande = new Application_Model_EuDemandePaiementMapper();
     $this->view->entries = $demande->fetchAllPayer(0);

     $this->view->tabletri = 1;
  }
  
  
  public function detaildemandeAction() {
     /* page pointage/listdemande - liste des demandes de paiement */
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

   $id = $this->_request->getParam('id');
     $m_paiement = new Application_Model_EuPaiementMapper();
     $this->view->entries = $m_paiement->fetchAllByDemande($id);
     $this->view->tabletri = 1;
  }






    public function payerdemandeAction()
    {
        /* page administration/payerdemande - Publier l'appel d'offre suite à la demande de BPS */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $demande_paiement = new Application_Model_EuDemandePaiement();
        $demande_paiementM = new Application_Model_EuDemandePaiementMapper();
        $demande_paiementM->find($id, $demande_paiement);
        
        $demande_paiement->setPayer($this->_request->getParam('payer'));
        $demande_paiementM->update($demande_paiement);
        }

        $this->_redirect('/administration/listdemandeprestataire');
    }






    
    
    public function listmembredoublonAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

ini_set('memory_limit', '1024M');

/*        $membre = new Application_Model_EuMembreMapper();
        $entries = $membre->fetchAllByMembreBoublon();

if(count($entries)>0){
    $nom = "";
    $prenom = "";
foreach ($entries as $entry):

        $membre_doublon1 = new Application_Model_EuMembreDoublonMapper();
        $entries1 = $membre_doublon1->fetchAllByMembre1($entry->code_membre);

        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($entry->code_membre);

        if(count($entries1) > 0 || count($entries2) > 0){
            ///
        }else{

if($entry->nom_membre != $nom && $entry->prenom_membre != $prenom){
    $nom = $entry->nom_membre;
    $prenom = $entry->prenom_membre;
    $code_membre = $entry->code_membre;
}else{

        $activation_m = new Application_Model_EuActivationMapper();
        $activation = $activation_m->fetchAllByMembre($entry->code_membre);
        if($activation->membreasso_id > 0){
            $membreasso_id = $activation->membreasso_id;
        }else{
        $code_activation_m = new Application_Model_EuCodeActivationMapper();
        $code_activation = $code_activation_m->fetchAllByCodeMembre($entry->code_membre);
        if($code_activation->membreasso_id > 0){
            $membreasso_id = $code_activation->membreasso_id;
        }else{
            $membreasso_id = "";    
        }
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membre_doublon = new Application_Model_EuMembreDoublon();
        $membre_doublon_ma = new Application_Model_EuMembreDoublonMapper();
            
            $compteur = $membre_doublon_ma->findConuter() + 1;
            $membre_doublon->setMembre_doublon_id($compteur);
            $membre_doublon->setMembre_doublon_code_membre1($code_membre);
            $membre_doublon->setMembre_doublon_code_membre2($entry->code_membre);
            $membre_doublon->setMembre_doublon_etat(1);
            if($membreasso_id > 0){
            $membre_doublon->setMembreasso_id($membreasso_id);
            }
            $membre_doublon->setMembre_doublon_date($entry->date_identification." ".$entry->heure_identification);
            $membre_doublon_ma->save($membre_doublon);
}

}

endforeach;
}
*/

        $membre = new Application_Model_EuMembreMapper();
        $entries = $membre->fetchAllAll();

if(count($entries)>0){
    $nom = "";
    $prenom = "";
    $code_membre = "";
foreach ($entries as $entry):

        $membre_doublon1 = new Application_Model_EuMembreDoublonMapper();
        $entries1 = $membre_doublon1->fetchAllByMembre1($entry->code_membre);

        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($entry->code_membre);

        if(count($entries1) > 0 || count($entries2) > 0){
            ///
        }else{

if($entry->nom_membre != $nom || $entry->prenom_membre != $prenom){
    $nom = $entry->nom_membre;
    $prenom = $entry->prenom_membre;
    $code_membre = $entry->code_membre;
}else{

        $table = new Application_Model_DbTable_EuActivation();
        $select = $table->select();
        $select->where("code_membre LIKE '".$entry->code_membre."' ");
        $select->limit(1);
        $activation = $table->fetchRow($select);
        //$activation_m = new Application_Model_EuActivationMapper();
        //$membreasso_id = $activation_m->fetchAllByMembre($entry->code_membre);
        if($activation->membreasso_id > 0){
            $membreasso_id = $activation->membreasso_id;
        }else{
        $table = new Application_Model_DbTable_EuCodeActivation();
        $select = $table->select();
        $select->where("code_membre LIKE '".$entry->code_membre."' ");
        $select->limit(1);
        $code_activation = $table->fetchRow($select);
        //$code_activation_m = new Application_Model_EuCodeActivationMapper();
        //$membreasso_id = $code_activation_m->fetchAllByCodeMembre($entry->code_membre);
        if($code_activation->membreasso_id > 0){
            $membreasso_id = $code_activation->membreasso_id;
        }else{
            $membreasso_id = 0; 
        }
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membre_doublon = new Application_Model_EuMembreDoublon();
        $membre_doublon_ma = new Application_Model_EuMembreDoublonMapper();
            
            $compteur = $membre_doublon_ma->findConuter() + 1;
            $membre_doublon->setMembre_doublon_id($compteur);
            $membre_doublon->setMembre_doublon_code_membre1($code_membre);
            $membre_doublon->setMembre_doublon_code_membre2($entry->code_membre);
            $membre_doublon->setMembre_doublon_etat(1);
            if($membreasso_id > 0){
            $membre_doublon->setMembreasso_id($membreasso_id);
            }
            $membre_doublon->setMembre_doublon_date($entry->date_identification." ".$entry->heure_identification);
            $membre_doublon_ma->save($membre_doublon);
}

}

//echo $entry->code_membre." ".$entry->nom_membre." ".$entry->prenom_membre." ".$membreasso_id."<br>";
//echo $entry->nom_membre;
//echo $entry->prenom_membre;

endforeach;
}



/*
        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $entries = $membremorale->fetchAllByMembreMoraleBoublon();

if(count($entries)>0){
    $raison_sociale = "";
foreach ($entries as $entry):

        $membre_doublon1 = new Application_Model_EuMembreDoublonMapper();
        $entries1 = $membre_doublon1->fetchAllByMembre1($entry->code_membre_morale);

        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($entry->code_membre_morale);

        if(count($entries1) > 0 || count($entries2) > 0){
            ///
        }else{

if($entry->raison_sociale != $raison_sociale){
    $raison_sociale = $entry->raison_sociale;
    $code_membre_morale = $entry->code_membre_morale;
}else{

        $activation_m = new Application_Model_EuActivationMapper();
        if($activation = $activation_m->fetchAllByMembre($entry->code_membre_morale)){
            $membreasso_id = $activation->membreasso_id;
        }else{
        $code_activation_m = new Application_Model_EuCodeActivationMapper();
        if($code_activation = $code_activation_m->fetchAllByCodeMembre($entry->code_membre_morale)){
            $membreasso_id = $code_activation->membreasso_id;
        }else{
            $membreasso_id = "";    
        }
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membre_doublon = new Application_Model_EuMembreDoublon();
        $membre_doublon_ma = new Application_Model_EuMembreDoublonMapper();
            
            $compteur = $membre_doublon_ma->findConuter() + 1;
            $membre_doublon->setMembre_doublon_id($compteur);
            $membre_doublon->setMembre_doublon_code_membre1($code_membre_morale);
            $membre_doublon->setMembre_doublon_code_membre2($entry->code_membre_morale);
            $membre_doublon->setMembre_doublon_etat(1);
            if($membreasso_id > 0){
            $membre_doublon->setMembreasso_id($membreasso_id);
            }
            $membre_doublon->setMembre_doublon_date($entry->date_identification." ".$entry->heure_identification);
            $membre_doublon_ma->save($membre_doublon);
}

}

endforeach;
}
*/


        $membre_morale = new Application_Model_EuMembreMoraleMapper();
        $entries = $membre_morale->fetchAllAll();

if(count($entries)>0){
    $raison_sociale = "";
    $code_membre_morale = "";
foreach ($entries as $entry):

        $membre_doublon1 = new Application_Model_EuMembreDoublonMapper();
        $entries1 = $membre_doublon1->fetchAllByMembre1($entry->code_membre_morale);

        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($entry->code_membre_morale);

        if(count($entries1) > 0 || count($entries2) > 0){
            ///
        }else{

if($entry->raison_sociale != $raison_sociale){
    $raison_sociale = $entry->raison_sociale;
    $code_membre_morale = $entry->code_membre_morale;
}else{

        $table = new Application_Model_DbTable_EuActivation();
        $select = $table->select();
        $select->where("code_membre LIKE '".$entry->code_membre_morale."' ");
        $select->limit(1);
        $activation = $table->fetchRow($select);
        //$activation_m = new Application_Model_EuActivationMapper();
        //$membreasso_id = $activation_m->fetchAllByMembre($entry->code_membre_morale);
        if($activation->membreasso_id > 0){
            $membreasso_id = $activation->membreasso_id;
        }else{
        $table = new Application_Model_DbTable_EuCodeActivation();
        $select = $table->select();
        $select->where("code_membre LIKE '".$entry->code_membre_morale."' ");
        $select->limit(1);
        $code_activation = $table->fetchRow($select);
        //$code_activation_m = new Application_Model_EuCodeActivationMapper();
        //$membreasso_id = $code_activation_m->fetchAllByCodeMembre($entry->code_membre_morale);
        if($code_activation->membreasso_id > 0){
            $membreasso_id = $code_activation->membreasso_id;
        }else{
            $membreasso_id = 0; 
        }
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membre_doublon = new Application_Model_EuMembreDoublon();
        $membre_doublon_ma = new Application_Model_EuMembreDoublonMapper();
            
            $compteur = $membre_doublon_ma->findConuter() + 1;
            $membre_doublon->setMembre_doublon_id($compteur);
            $membre_doublon->setMembre_doublon_code_membre1($code_membre_morale);
            $membre_doublon->setMembre_doublon_code_membre2($entry->code_membre_morale);
            $membre_doublon->setMembre_doublon_etat(1);
            if($membreasso_id > 0){
            $membre_doublon->setMembreasso_id($membreasso_id);
            }
            $membre_doublon->setMembre_doublon_date($entry->date_identification." ".$entry->heure_identification);
            $membre_doublon_ma->save($membre_doublon);
}

}

//echo $entry->code_membre." ".$entry->nom_membre." ".$entry->prenom_membre." ".$membreasso_id."<br>";
//echo $entry->nom_membre;
//echo $entry->prenom_membre;

endforeach;
}






        $membre_doublon = new Application_Model_EuMembreDoublonMapper();
        $this->view->entries = $membre_doublon->fetchAllByAll();
//echo "ok";
        $this->view->tabletri = 1;

    }



    
    


    public function listmembredoublonoldAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $membre = new Application_Model_EuMembreMapper();
        $entries = $membre->fetchAllByMembreBoublon();

if(count($entries)>0){
    $nom = "";
    $prenom = "";
foreach ($entries as $entry):

        $membre_doublon1 = new Application_Model_EuMembreDoublonMapper();
        $entries1 = $membre_doublon1->fetchAllByMembre1($entry->code_membre);

        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($entry->code_membre);

        if(count($entries1) > 0 || count($entries2) > 0){
            ///
        }else{

if($entry->nom_membre != $nom && $entry->prenom_membre != $prenom){
    $nom = $entry->nom_membre;
    $prenom = $entry->prenom_membre;
    $code_membre = $entry->code_membre;
}else{

        $activation_m = new Application_Model_EuActivationMapper();
        $activation = $activation_m->fetchAllByMembre($entry->code_membre);
        if(count($activation) > 0){
            $membreasso_id = $activation->membreasso_id;
        }else{
        $code_activation_m = new Application_Model_EuCodeActivationMapper();
        $code_activation = $code_activation_m->fetchAllByCodeMembre($entry->code_membre);
        if(count($code_activation) > 0){
            $membreasso_id = $code_activation->membreasso_id;
        }else{
            $membreasso_id = "";    
        }
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membre_doublon = new Application_Model_EuMembreDoublon();
        $membre_doublon_ma = new Application_Model_EuMembreDoublonMapper();
            
            $compteur = $membre_doublon_ma->findConuter() + 1;
            $membre_doublon->setMembre_doublon_id($compteur);
            $membre_doublon->setMembre_doublon_code_membre1($code_membre);
            $membre_doublon->setMembre_doublon_code_membre2($entry->code_membre);
            $membre_doublon->setMembre_doublon_etat(1);
            if($membreasso_id > 0){
            $membre_doublon->setMembreasso_id($membreasso_id);
            }
            $membre_doublon->setMembre_doublon_date($entry->date_identification." ".$entry->heure_identification);
            $membre_doublon_ma->save($membre_doublon);
}

}

endforeach;
}




        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $entries = $membremorale->fetchAllByMembreMoraleBoublon();

if(count($entries)>0){
    $raison_sociale = "";
foreach ($entries as $entry):

        $membre_doublon1 = new Application_Model_EuMembreDoublonMapper();
        $entries1 = $membre_doublon1->fetchAllByMembre1($entry->code_membre_morale);

        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($entry->code_membre_morale);

        if(count($entries1) > 0 || count($entries2) > 0){
            ///
        }else{

if($entry->raison_sociale != $raison_sociale){
    $raison_sociale = $entry->raison_sociale;
    $code_membre_morale = $entry->code_membre_morale;
}else{

        $activation_m = new Application_Model_EuActivationMapper();
        $activation = $activation_m->fetchAllByMembre($entry->code_membre_morale);
        if(count($activation) > 0){
            $membreasso_id = $activation->membreasso_id;
        }else{
        $code_activation_m = new Application_Model_EuCodeActivationMapper();
        $code_activation = $code_activation_m->fetchAllByCodeMembre($entry->code_membre_morale);
        if(count($code_activation) > 0){
            $membreasso_id = $code_activation->membreasso_id;
        }else{
            $membreasso_id = "";    
        }
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membre_doublon = new Application_Model_EuMembreDoublon();
        $membre_doublon_ma = new Application_Model_EuMembreDoublonMapper();
            
            $compteur = $membre_doublon_ma->findConuter() + 1;
            $membre_doublon->setMembre_doublon_id($compteur);
            $membre_doublon->setMembre_doublon_code_membre1($code_membre_morale);
            $membre_doublon->setMembre_doublon_code_membre2($entry->code_membre_morale);
            $membre_doublon->setMembre_doublon_etat(1);
            if($membreasso_id > 0){
            $membre_doublon->setMembreasso_id($membreasso_id);
            }
            $membre_doublon->setMembre_doublon_date($entry->date_identification." ".$entry->heure_identification);
            $membre_doublon_ma->save($membre_doublon);
}

}

endforeach;
}



        $membre_doublon = new Application_Model_EuMembreDoublonMapper();
        $this->view->entries = $membre_doublon->fetchAllByAll();

        $this->view->tabletri = 1;

    }



    
    public function etatmembredoublonAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))           {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")    {$this->_redirect('/administration/confirmation');}
    
         $id = (int) $this->_request->getParam('id');
         if(isset($id)) {
           $membre_doublon = new Application_Model_EuMembreDoublon();
           $membre_doublonM = new Application_Model_EuMembreDoublonMapper();
           $membre_doublonM->find($id, $membre_doublon);
           $membre_doublon->setMembre_doublon_etat($this->_request->getParam('etat'));
           $membre_doublonM->update($membre_doublon);
         }
         $this->_redirect('/administration/listmembredoublon');
    }
    


    public function detailsmembredoublonAction() 
    {
        /* page administration/detailsmembredoublon - Détail membre doublon */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $membre_doublon = new Application_Model_EuMembreDoublon();
        $membre_doublonM = new Application_Model_EuMembreDoublonMapper();
        $membre_doublonM->find($id, $membre_doublon);
        $this->view->membre_doublon = $membre_doublon;

            }

    }





    public function listmembremoraledoublonAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $membremorale->fetchAllByMembreMoraleBoublon();


        $this->view->tabletri = 1;

    }








    public function addbanqueuserAction()
    {
        /* banqueuser administration/addbanqueuser - Création de banqueuser libre d'information */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['role']) && $_POST['role']!="" && isset($_POST['nom_banque_user']) && $_POST['nom_banque_user']!="" && isset($_POST['prenom_banque_user']) && $_POST['prenom_banque_user']!="" && isset($_POST['login_banque_user']) && $_POST['login_banque_user']!="" && isset($_POST['pwd_banque_user']) && $_POST['pwd_banque_user']!="" && isset($_POST['c_pwd_banque_user']) && $_POST['pwd_banque_user']==$_POST['c_pwd_banque_user']) {
                    
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $user_banque = new Application_Model_EuBanqueUser();
        $m_user_banque = new Application_Model_EuBanqueUserMapper();
                    
            $compteur = $m_user_banque->findConuter() + 1;
                    $user_banque->setIdBanqueUser ( $compteur );
                    $user_banque->setActiver ( 0 );
                    $user_banque->setCodeBanque ( $_POST['code_banque'] );
                    $user_banque->setLoginBanqueUser ( $_POST['login_banque_user'] );
                    $user_banque->setNomBanqueUser ( $_POST['nom_banque_user'] );
                    $user_banque->setPrenomBanqueUser ( $_POST['prenom_banque_user'] );
                    $user_banque->setPwdBanqueUser ( $_POST['pwd_banque_user'] );
                    $user_banque->setPwdChanged ( 0 );
                    $user_banque->setRole ( $_POST['role'] );
                    $user_banque->setDateCreated ( $date_id->toString ( "yyyy-MM-dd" ) );
                    $user_banque->setIdUtilisateur ( 1 );
                    $m_user_banque->save($user_banque);
            
        $this->_redirect('/administration/listbanqueuser');
        } else {  $this->view->error = "Champs * obligatoire ...";  } 
        }
        
    }


    public function editbanqueuserAction()
    {
        /* banqueuser administration/editbanqueuser - Modification de banqueuser libre d'information */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['role']) && $_POST['role']!="" && isset($_POST['nom_banque_user']) && $_POST['nom_banque_user']!="" && isset($_POST['prenom_banque_user']) && $_POST['prenom_banque_user']!="") {
        

            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $user_banque = new Application_Model_EuBanqueUser();
        $m_user_banque = new Application_Model_EuBanqueUserMapper();
        $m_user_banque->find($_POST['id_banque_user'], $user_banque);
            
                    $user_banque->setCodeBanque ( $_POST['code_banque'] );
                    $user_banque->setNomBanqueUser ( $_POST['nom_banque_user'] );
                    $user_banque->setPrenomBanqueUser ( $_POST['prenom_banque_user'] );
                    $user_banque->setRole ( $_POST['role'] );
            $m_user_banque->update($user_banque);
            
        $this->_redirect('/administration/listbanqueuser');
    }  else {   $this->view->error = "Les champs * sont obligatoires ...";  

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $user_banque = new Application_Model_EuBanqueUser();
        $ma = new Application_Model_EuBanqueUserMapper();
        $ma->find($id, $user_banque);
        $this->view->banque_user = $user_banque;
            }
    }
           
    } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $user_banque = new Application_Model_EuBanqueUser();
        $ma = new Application_Model_EuBanqueUserMapper();
        $ma->find($id, $user_banque);
        $this->view->banque_user = $user_banque;
            }
    }
    }






    public function listbanqueuserAction()
    {
        /* banqueuser administration/listbanqueuser - Liste des banqueuser libre d'information */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $banqueuser = new Application_Model_EuBanqueUserMapper();
        $this->view->entries = $banqueuser->fetchAll();

        $this->view->tabletri = 1;

    }




    public function activerbanqueuserAction()
    {
        /* banqueuser administration/activerbanqueuser - Activer la banqueuser libre d'information */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $banqueuser = new Application_Model_EuBanqueUser();
        $banqueuserM = new Application_Model_EuBanqueUserMapper();
        $banqueuserM->find($id, $banqueuser);
        
        $banqueuser->setActiver($this->_request->getParam('activer'));
        $banqueuserM->update($banqueuser);
        }

        $this->_redirect('/administration/listbanqueuser');
    }








    
    
    public  function addcommuniqueAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $request = $this->getRequest();
         if($request->isPost()) {
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
           try {
               $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $communique = new Application_Model_EuCommunique();
               $m_communique = new Application_Model_EuCommuniqueMapper(); 

               include("Transfert.php");
               if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="") {
                  $chemin   = "communique";
                  $file = $_FILES['vignette']['name'];
                  $file1='vignette';
                  $fichier = $chemin."/".transfert($chemin,$file1);
               } else { $fichier = ""; }
                              
               $compteur = $m_communique->findConuter() + 1;
               $titre = $request->getParam("titre");
               $resume = $request->getParam("resume");
               $lien_communique = $request->getParam("lien_communique");
               $description = $request->getParam("description");

               $communique->setId_communique($compteur);
               $communique->setTitre($titre);
               $communique->setResume($resume);
               $communique->setDescription($description);
               $communique->setVignette($fichier);
               $communique->setStatut(0);
               $communique->setLiendirect($lien_communique);
               $communique->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
               $m_communique->save($communique);    
                
               $db->commit();
               $this->_redirect('/administration/listcommunique');
         
           } catch (Exception $exc) {
               $db->rollback();
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();               
               return;
           }
         }
         
    }
    
    
    
    
    public function publiercommuniqueAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))           {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")    {$this->_redirect('/administration/confirmation');}
    
         $id = (int) $this->_request->getParam('id');
         if(isset($id)) {
           $communique = new Application_Model_EuCommunique();
           $communiqueM = new Application_Model_EuCommuniqueMapper();
           $communiqueM->find($id,$communique);
           $communique->setStatut($this->_request->getParam('statut'));
           $communiqueM->update($communique);
         }
         $this->_redirect('/administration/listcommunique');
    }
    
    
    
    
    
    public function editcommuniqueAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $request = $this->getRequest();
         if($request->isPost()) {
             $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {
                 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                 $communique = new Application_Model_EuCommunique();
                 $communique_mapper = new Application_Model_EuCommuniqueMapper();                  

                 $id_communique = $request->getParam("id_communique");
                 $titre = $request->getParam("titre");
                 $resume = $request->getParam("resume");
                 $lien_communique = $request->getParam("lien_communique");
                 $description = $request->getParam("description");
 
                 include("Transfert.php");
                 if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="")  {
                   $chemin  = "communique";
                   $file  = $_FILES['vignette']['name'];
                   $file1 = 'vignette';
                   $fichier = $chemin."/".transfert($chemin,$file1);
                 } else { $fichier = $_POST['vignette_old']; }
                 
                 $communique_mapper->find($id_communique,$communique);
                 $communique->setTitre($titre);
                 $communique->setResume($resume);
                 $communique->setDescription($description);
                 $communique->setVignette($fichier);
                 $communique->setLiendirect($lien_communique);
                 $communique->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                 $communique_mapper->update($communique);
                 
                 $db->commit();
                 $this->_redirect('/administration/listcommunique');     
             
             } catch (Exception $exc) {
                $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();              
                return;
             }
             
          }  else {
             $id = (int)$this->_request->getParam('id');
             if($id != 0) {
               $p = new Application_Model_EuCommunique();
               $mp = new Application_Model_EuCommuniqueMapper();
               $mp->find($id,$p);
               $this->view->communique = $p;
             }   
         }
    
    }
    
    
    
    
    public function suppcommuniqueAction()  {
      $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
      if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
    
        $id = (int) $this->_request->getParam('id');
        if(isset($id) && $id != 0)  {
          $communique = new Application_Model_EuCommunique();
          $communiqueM = new Application_Model_EuCommuniqueMapper();
          $communiqueM->find($id,$communique);
          $communiqueM->delete($communique->id_communique);
        }
        $this->_redirect('/administration/listcommunique');
    
    }
    
    
    
    public  function  listcommuniqueAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $tab_communique = new Application_Model_DbTable_EuCommunique();
         $select = $tab_communique->select();
         $select->order('id_communique desc');
         $entries = $tab_communique->fetchAll($select);
         $this->view->entries = $entries;
    
    
    }
    
    





    public function addblogAction()
    {
        /* page administration/addblog - Ajout d'une blog */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['blog_titre']) && $_POST['blog_titre']!="" && isset($_POST['blog_resume']) && $_POST['blog_resume']!="" && isset($_POST['blog_date']) && $_POST['blog_date']!="" && isset($_POST['id_type_blog']) && $_POST['id_type_blog']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['blog_vignette']['name']) && $_FILES['blog_vignette']['name']!=""){
        $chemin = "blogs";
        $file = $_FILES['blog_vignette']['name'];
        $file1='blog_vignette';
        $blog = $chemin."/".transfert($chemin,$file1);
        } else {$blog = "";}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuBlog();
        $ma = new Application_Model_EuBlogMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setBlog_id($compteur);
            $a->setId_type_blog($_POST['id_type_blog']);
            $a->setBlog_titre($_POST['blog_titre']);
            $a->setBlog_resume($_POST['blog_resume']);
            $a->setBlog_description($_POST['blog_description']);
            $a->setBlog_vignette($blog);
            $a->setBlog_date($_POST['blog_date']);
            $a->setPublier(0);
            $a->setSpotlight(0);
            $a->setId_utilisateur($sessionutilisateur->id_utilisateur);
            $ma->save($a);

        $this->_redirect('/administration/listblog');
        } else {  $this->view->error = "Champs * obligatoire ...";  } 
        }
        
    }


    public function editblogAction()
    {
        /* page administration/editblog - Modification d'une blog */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['blog_titre']) && $_POST['blog_titre']!="" && isset($_POST['blog_resume']) && $_POST['blog_resume']!="" && isset($_POST['blog_date']) && $_POST['blog_date']!="" && isset($_POST['id_type_blog']) && $_POST['id_type_blog']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['blog_vignette']['name']) && $_FILES['blog_vignette']['name']!=""){
        $chemin = "blogs";
        $file = $_FILES['blog_vignette']['name'];
        $file1='blog_vignette';
        $blog = $chemin."/".transfert($chemin,$file1);
        } else {$blog = $_POST['blog_vignette_old'];}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuBlog();
        $ma = new Application_Model_EuBlogMapper();
        $ma->find($_POST['blog_id'], $a);
            
            $a->setBlog_titre($_POST['blog_titre']);
            $a->setBlog_resume($_POST['blog_resume']);
            $a->setBlog_description($_POST['blog_description']);
            $a->setBlog_vignette($blog);
            $a->setBlog_date($_POST['blog_date']);
            //$a->setPublier(0);
            //$a->setSpotlight(0);
            //$a->setId_utilisateur($sessionutilisateur->id_utilisateur);
            $ma->update($a);
            
        $this->_redirect('/administration/listblog');
        } else {  $this->view->error = "Champs * obligatoire ..."; 
         
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuBlog();
        $ma = new Application_Model_EuBlogMapper();
        $ma->find($id, $a);
        $this->view->blog = $a;
            }
    }
           
    } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuBlog();
        $ma = new Application_Model_EuBlogMapper();
        $ma->find($id, $a);
        $this->view->blog = $a;
            }
    }
    }




    public function listblogAction()
    {
        /* page administration/listblog - Liste des blogs */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $blog = new Application_Model_EuBlogMapper();
        $this->view->entries = $blog->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppblogAction()
    {
        /* page administration/suppblog - Suppression d'une blog */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $blog = new Application_Model_EuBlog();
        $blogM = new Application_Model_EuBlogMapper();
        $blogM->find($id, $blog);
        
        $blogM->delete($blog->blog_id);
        //unlink($blog->blog_vignette); 

        }

        $this->_redirect('/administration/listblog');
    }




    public function publierblogAction()
    {
        /* page administration/publierblog - Publier une blog */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $blog = new Application_Model_EuBlog();
        $blogM = new Application_Model_EuBlogMapper();
        $blogM->find($id, $blog);
        
        $blog->setPublier($this->_request->getParam('publier'));
        $blogM->update($blog);
        }

        $this->_redirect('/administration/listblog');
    }





    public function spotlightblogAction()
    {
        /* page administration/spotlightblog - Publier une blog */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $blog = new Application_Model_EuBlog();
        $blogM = new Application_Model_EuBlogMapper();
        $blogM->find($id, $blog);
        
        $blog->setSpotlight($this->_request->getParam('spotlight'));
        $blogM->update($blog);
        }

        $this->_redirect('/administration/listblog');
    }





    public function listrelevebancairedetaildoublonAction()
    {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
ini_set('memory_limit', '1024M');




            $couleur = array('success', 'error', 'info', 'warning');

        $table = new Application_Model_DbTable_EuRelevebancairedetail();
        $select = $table->select();
        $select->where("relevebancairedetail_relevebancaire IN (SELECT relevebancaire_id FROM eu_relevebancaire WHERE relevebancaire_banque = 'BAT')");
        $select->where("relevebancairedetail_numero = ''");
        $select->where("publier != 2");
        $select->order(array("relevebancairedetail_date ASC"));
        $resultSet = $table->fetchAll($select);
            $i = 0;$j = 0;
        foreach ($resultSet as $row) {
            
            if($row->relevebancairedetail_montant > 0){

            $table2 = new Application_Model_DbTable_EuRelevebancairedetail();
            $select2 = $table2->select();
            $select2->where("relevebancairedetail_relevebancaire IN (SELECT relevebancaire_id FROM eu_relevebancaire WHERE relevebancaire_banque = 'BAT')");
            $select2->where("relevebancairedetail_numero != ''");
            $select2->where("relevebancairedetail_libelle LIKE '%".$row->relevebancairedetail_libelle."%'");
            //$select2->where("relevebancairedetail_date LIKE '%".$row->relevebancairedetail_date."%'");
            $select2->where("relevebancairedetail_montant = ".$row->relevebancairedetail_montant."");
            $select2->where("publier != 2");
            $resultSet2 = $table2->fetchAll($select2);
            if(count($resultSet2) > 0){
                $relevebancairedetail_id = 0;
            foreach ($resultSet2 as $row2) {
                if (($row->relevebancairedetail_date != $row2->relevebancairedetail_date)) {
// || $row->relevebancairedetail_montant != $row2->relevebancairedetail_montant
// && $row2->relevebancairedetail_date != $row2->relevebancairedetail_date_valeur

if($relevebancairedetail_id != $row->relevebancairedetail_id){
                    $resultat[$i] = array(
                       'relevebancairedetail_id' => $row->relevebancairedetail_id, 
                       'relevebancairedetail_relevebancaire' => $row->relevebancairedetail_relevebancaire, 
                       'relevebancairedetail_libelle' => $row->relevebancairedetail_libelle, 
                       'relevebancairedetail_numero' => $row->relevebancairedetail_numero, 
                       'relevebancairedetail_date' => $row->relevebancairedetail_date, 
                       'publier' => $row->publier, 
                       'relevebancairedetail_date_valeur' => $row->relevebancairedetail_date_valeur, 
                       'relevebancairedetail_montant' => $row->relevebancairedetail_montant, 
                       'couleur' => $couleur[$j], 
                     );

            $i++;
$relevebancairedetail_id = $row->relevebancairedetail_id;
}

                    $resultat[$i] = array(
                       'relevebancairedetail_id' => $row2->relevebancairedetail_id, 
                       'relevebancairedetail_relevebancaire' => $row2->relevebancairedetail_relevebancaire, 
                       'relevebancairedetail_libelle' => $row2->relevebancairedetail_libelle, 
                       'relevebancairedetail_numero' => $row2->relevebancairedetail_numero, 
                       'relevebancairedetail_date' => $row2->relevebancairedetail_date, 
                       'publier' => $row2->publier, 
                       'relevebancairedetail_date_valeur' => $row2->relevebancairedetail_date_valeur, 
                       'relevebancairedetail_montant' => $row2->relevebancairedetail_montant, 
                       'couleur' => $couleur[$j], 
                     );

            $i++;
                }
            }
            
            $j++;
            if($j == 4){$j = 0;}
        }
            }

        }

        $this->view->entries = $resultat;


        $this->view->tabletri = 1;

    }





    public function publierrelevebancairedetaildoublonAction()
    {
        /* page administration/publierrelevebancairedetaildoublon - Publier publierrelevebancairedetaildoublon */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $relevebancairedetail = new Application_Model_EuRelevebancairedetail();
        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetailM->find($id, $relevebancairedetail);
        
        $relevebancairedetail->setPublier($this->_request->getParam('publier'));
        $relevebancairedetailM->update($relevebancairedetail);
        }

        $this->_redirect('/administration/listrelevebancairedetaildoublon');
    }








    public function listcaracteristique2Action()
    {
        /* page integrateur/listcaracteristique - Liste des caracteristiques */

    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

            $table = (string)$this->_request->getParam('table');
            $id = (int)$this->_request->getParam('id');

        $caracteristique = new Application_Model_EuCaracteristiqueMapper();
        $this->view->entries = $caracteristique->fetchAllByTable2($table, $id);

        $this->view->tabletri = 1;

    }






    
    
    public  function addoddAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $request = $this->getRequest();
         if($request->isPost()) {
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
           try {
               $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $odd = new Application_Model_EuOdd();
               $m_odd = new Application_Model_EuOddMapper(); 

               include("Transfert.php");
               if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="") {
                  $chemin   = "odd";
                  $file = $_FILES['vignette']['name'];
                  $file1='vignette';
                  $fichier = $chemin."/".transfert($chemin,$file1);
               } else { $fichier = ""; }
                              
               $compteur = $m_odd->findConuter() + 1;
               $titre = $request->getParam("titre");
               $resume = $request->getParam("resume");
               $lien_odd = $request->getParam("lien_odd");
               $description = $request->getParam("description");

               $odd->setId_odd($compteur);
               $odd->setTitre($titre);
               $odd->setResume($resume);
               $odd->setDescription($description);
               $odd->setVignette($fichier);
               $odd->setStatut(0);
               $odd->setLiendirect($lien_odd);
               $odd->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
               $m_odd->save($odd);  
                
               $db->commit();
               $this->_redirect('/administration/listodd');
         
           } catch (Exception $exc) {
               $db->rollback();
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();               
               return;
           }
         }
         
    }
    
    
    
    
    public function publieroddAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))           {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")    {$this->_redirect('/administration/confirmation');}
    
         $id = (int) $this->_request->getParam('id');
         if(isset($id)) {
           $odd = new Application_Model_EuOdd();
           $oddM = new Application_Model_EuOddMapper();
           $oddM->find($id,$odd);
           $odd->setStatut($this->_request->getParam('statut'));
           $oddM->update($odd);
         }
         $this->_redirect('/administration/listodd');
    }
    
    
    
    
    
    public function editoddAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $request = $this->getRequest();
         if($request->isPost()) {
             $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {
                 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                 $odd = new Application_Model_EuOdd();
                 $odd_mapper = new Application_Model_EuOddMapper();                    

                 $id_odd = $request->getParam("id_odd");
                 $titre = $request->getParam("titre");
                 $resume = $request->getParam("resume");
                 $lien_odd = $request->getParam("lien_odd");
                 $description = $request->getParam("description");
 
                 include("Transfert.php");
                 if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="")  {
                   $chemin  = "odd";
                   $file  = $_FILES['vignette']['name'];
                   $file1 = 'vignette';
                   $fichier = $chemin."/".transfert($chemin,$file1);
                 } else { $fichier = $_POST['vignette_old']; }
                 
                 $odd_mapper->find($id_odd,$odd);
                 $odd->setTitre($titre);
                 $odd->setResume($resume);
                 $odd->setDescription($description);
                 $odd->setVignette($fichier);
                 $odd->setLiendirect($lien_odd);
                 $odd->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                 $odd_mapper->update($odd);
                 
                 $db->commit();
                 $this->_redirect('/administration/listodd');     
             
             } catch (Exception $exc) {
                $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();              
                return;
             }
             
          }  else {
             $id = (int)$this->_request->getParam('id');
             if($id != 0) {
               $p = new Application_Model_EuOdd();
               $mp = new Application_Model_EuOddMapper();
               $mp->find($id,$p);
               $this->view->odd = $p;
             }   
         }
    
    }
    
    
    
    
    public function suppoddAction()  {
      $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
      if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
    
        $id = (int) $this->_request->getParam('id');
        if(isset($id) && $id != 0)  {
          $odd = new Application_Model_EuOdd();
          $oddM = new Application_Model_EuOddMapper();
          $oddM->find($id,$odd);
          $oddM->delete($odd->id_odd);
        }
        $this->_redirect('/administration/listodd');
    
    }
    
    
    
    public  function  listoddAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $tab_odd = new Application_Model_DbTable_EuOdd();
         $select = $tab_odd->select();
         $select->order('id_odd desc');
         $entries = $tab_odd->fetchAll($select);
         $this->view->entries = $entries;
    
    
    }
    
    
    
    
    

    
    
    public  function addoddpaysAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $request = $this->getRequest();
         if($request->isPost()) {
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
           try {
               $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $oddpays = new Application_Model_EuOddpays();
               $m_oddpays = new Application_Model_EuOddpaysMapper(); 

               include("Transfert.php");
               if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="") {
                  $chemin   = "oddpays";
                  $file = $_FILES['vignette']['name'];
                  $file1='vignette';
                  $fichier = $chemin."/".transfert($chemin,$file1);
               } else { $fichier = ""; }
                              
               $compteur = $m_oddpays->findConuter() + 1;
               $titre = $request->getParam("titre");
               $resume = $request->getParam("resume");
               $lien_oddpays = $request->getParam("lien_oddpays");
               $description = $request->getParam("description");
               $id_pays = $request->getParam("id_pays");

               $oddpays->setId_odd_pays($compteur);
               $oddpays->setTitre($titre);
               $oddpays->setResume($resume);
               $oddpays->setDescription($description);
               $oddpays->setVignette($fichier);
               $oddpays->setStatut(0);
               $oddpays->setLiendirect($lien_oddpays);
               $oddpays->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
               $oddpays->setId_pays($id_pays);
               $m_oddpays->save($oddpays);  
                
               $db->commit();
               $this->_redirect('/administration/listoddpays');
         
           } catch (Exception $exc) {
               $db->rollback();
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();               
               return;
           }
         }
         
    }
    
    
    
    
    public function publieroddpaysAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))           {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")    {$this->_redirect('/administration/confirmation');}
    
         $id = (int) $this->_request->getParam('id');
         if(isset($id)) {
           $oddpays = new Application_Model_EuOddpays();
           $oddpaysM = new Application_Model_EuOddpaysMapper();
           $oddpaysM->find($id,$oddpays);
           $oddpays->setStatut($this->_request->getParam('statut'));
           $oddpaysM->update($oddpays);
         }
         $this->_redirect('/administration/listoddpays');
    }
    
    
    
    
    
    public function editoddpaysAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $request = $this->getRequest();
         if($request->isPost()) {
             $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {
                 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                 $oddpays = new Application_Model_EuOddpays();
                 $oddpays_mapper = new Application_Model_EuOddpaysMapper();                    

                 $id_odd_pays = $request->getParam("id_odd_pays");
                 $titre = $request->getParam("titre");
                 $resume = $request->getParam("resume");
                 $lien_oddpays = $request->getParam("lien_oddpays");
                 $description = $request->getParam("description");
                 $id_pays = $request->getParam("id_pays");
 
                 include("Transfert.php");
                 if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="")  {
                   $chemin  = "oddpays";
                   $file  = $_FILES['vignette']['name'];
                   $file1 = 'vignette';
                   $fichier = $chemin."/".transfert($chemin,$file1);
                 } else { $fichier = $_POST['vignette_old']; }
                 
                 $oddpays_mapper->find($id_odd_pays,$oddpays);
                 $oddpays->setTitre($titre);
                 $oddpays->setResume($resume);
                 $oddpays->setDescription($description);
                 $oddpays->setVignette($fichier);
                 $oddpays->setLiendirect($lien_oddpays);
                 $oddpays->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                 $oddpays->setId_pays($id_pays);
                 $oddpays_mapper->update($oddpays);
                 
                 $db->commit();
                 $this->_redirect('/administration/listoddpays');     
             
             } catch (Exception $exc) {
                $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();              
                return;
             }
             
          }  else {
             $id = (int)$this->_request->getParam('id');
             if($id != 0) {
               $p = new Application_Model_EuOddpays();
               $mp = new Application_Model_EuOddpaysMapper();
               $mp->find($id,$p);
               $this->view->oddpays = $p;
             }   
         }
    
    }
    
    
    
    
    public function suppoddpaysAction()  {
      $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
      if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
    
        $id = (int) $this->_request->getParam('id');
        if(isset($id) && $id != 0)  {
          $oddpays = new Application_Model_EuOddpays();
          $oddpaysM = new Application_Model_EuOddpaysMapper();
          $oddpaysM->find($id,$oddpays);
          $oddpaysM->delete($oddpays->id_odd_pays);
        }
        $this->_redirect('/administration/listoddpays');
    
    }
    
    
    
    public  function  listoddpaysAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $tab_oddpays = new Application_Model_DbTable_EuOddpays();
         $select = $tab_oddpays->select();
         $select->order('id_odd_pays desc');
         $entries = $tab_oddpays->fetchAll($select);
         $this->view->entries = $entries;
    
    
    }
    
    
    


    public function addnotificationAction()
    {
        /* page administration/addnotification - Ajout d'une notification */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['to']) && $_POST['to']!="" && isset($_POST['titre']) && $_POST['titre']!="" && isset($_POST['message']) && $_POST['message']!="") {
        
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuNotification();
        $ma = new Application_Model_EuNotificationMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setId_notification($compteur);
            $a->setTo($_POST['to']);
            $a->setTitre($_POST['titre']);
            $a->setMessage($_POST['message']);
            //$a->setMessage_id($_POST['message_id']);
            //$a->setError($_POST['error']);
            $a->setDate_notification($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setStatut(0);
            $ma->save($a);

        $this->_redirect('/administration/listnotification');
        } else {  $this->view->error = "Champs * obligatoire ...";  } 
        }
        
    }


    public function editnotificationAction()
    {
        /* page administration/editnotification - Modification d'une notification */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['to']) && $_POST['to']!="" && isset($_POST['titre']) && $_POST['titre']!="" && isset($_POST['message']) && $_POST['message']!="") {
        
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuNotification();
        $ma = new Application_Model_EuNotificationMapper();
        $ma->find($_POST['id_notification'], $a);
            
            $a->setTo($_POST['to']);
            $a->setTitre($_POST['titre']);
            $a->setMessage($_POST['message']);
            //$a->setMessage_id($_POST['message_id']);
            //$a->setError($_POST['error']);
            //$a->setDate_notification($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            //$a->setStatut($_POST['statut']);
            $ma->update($a);
            
        $this->_redirect('/administration/listnotification');
        } else {  $this->view->error = "Champs * obligatoire ..."; 
         
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuNotification();
        $ma = new Application_Model_EuNotificationMapper();
        $ma->find($id, $a);
        $this->view->notification = $a;
            }
    }
           
    } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuNotification();
        $ma = new Application_Model_EuNotificationMapper();
        $ma->find($id, $a);
        $this->view->notification = $a;
            }
    }
    }




    public function listnotificationAction()
    {
        /* page administration/listnotification - Liste des notifications */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $notification = new Application_Model_EuNotificationMapper();
        $this->view->entries = $notification->fetchAll();

        $this->view->tabletri = 1;

    }


    public function suppnotificationAction()
    {
        /* page administration/suppnotification - Suppression d'une notification */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $notification = new Application_Model_EuNotification();
        $notificationM = new Application_Model_EuNotificationMapper();
        $notificationM->find($id, $notification);
        
        $notificationM->delete($notification->notification_id);

        }

        $this->_redirect('/administration/listnotification');
    }




    public function statutnotificationAction()
    {
        /* page administration/statutnotification - Publier une notification */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $notification = new Application_Model_EuNotification();
        $notificationM = new Application_Model_EuNotificationMapper();
        $notificationM->find($id, $notification);
        
        $notification->setStatut($this->_request->getParam('statut'));
        $notificationM->update($notification);


if($this->_request->getParam('statut') == 1){
Util_Utils::addNotif($notification->getId_notification(), $notification->getTo(), $notification->getTitre(), $notification->getMessage());
}

        }

        $this->_redirect('/administration/listnotification');
    }




    
    
    public function addgalerieAction()  {
       /* page administration/addgalerie - Ajout de galerie */
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
       if(!isset($sessionutilisateur->login))         {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")  {$this->_redirect('/administration/confirmation');}
         
         $request = $this->getRequest();
         if($request->isPost()) {
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
           try {
               $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $galerie = new Application_Model_EuGalerie();
               $galerie_mapper = new Application_Model_EuGalerieMapper();                  

               $compteur = $galerie_mapper->findConuter() + 1;
               $libelle_galerie = $request->getParam("libelle_galerie");
               $resume_galerie = $request->getParam("resume_galerie");
               
               $galerie->setId_galerie($compteur); 
               $galerie->setTitre($libelle_galerie);
               $galerie->setResume($resume_galerie);
               $galerie->setStatut(0);
               $galerie->setDate_galerie($date_id->toString('yyyy-MM-dd HH:mm:ss'));
               $galerie_mapper->save($galerie);
               
               $db->commit();
               $this->_redirect('/administration/listgalerie');
            
           } catch (Exception $exc) {
              $db->rollback();
              $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();                
              return;
           }
    
    
         }
    }
    
    
    public  function editgalerieAction()  {
       /* page administration/editgalerie - Modification d'une galerie */
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         
         $request = $this->getRequest();
         if($request->isPost()) {
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $galerie = new Application_Model_EuGalerie();
                $galerie_mapper = new Application_Model_EuGalerieMapper();
                
                $id_galerie = $request->getParam("id_galerie");
                $libelle_galerie = $request->getParam("libelle_galerie");
                $resume_galerie = $request->getParam("resume_galerie");
                $galerie_mapper->find($id_galerie,$galerie);
               
                $galerie->setTitre($libelle_galerie);
                $galerie->setResume($resume_galerie);
                $galerie->setDate_galerie($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $galerie_mapper->update($galerie);
                $db->commit();
                $this->_redirect('/administration/listgalerie');
            } catch (Exception $exc) {
                $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();              
                return;
            }
    
         } else {
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
               $g = new Application_Model_EuGalerie();
               $mg = new Application_Model_EuGalerieMapper();
               $mg->find($id,$g);
               $this->view->galerie = $g;  
            }
         }  

    }
    
    
    public  function suppgalerieAction()  {
       /* page administration/suppgalerie - Supression d'une galerie */
       
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $id = (int) $this->_request->getParam('id');
         if(isset($id) && $id != 0) {
           $galerie = new Application_Model_EuGalerie();
           $galerieM = new Application_Model_EuGalerieMapper();
           $galerieM->find($id,$galerie);
           $galerieM->delete($galerie->id_galerie);
         }
         $this->_redirect('/administration/listgalerie');
    }
    
    
    
    public function publiergalerieAction()  {
      /* page administration/publiergalerie - Publier une galerie */
      $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
      if(!isset($sessionutilisateur->login))         {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")  {$this->_redirect('/administration/confirmation');}
           $id = (int) $this->_request->getParam('id');
           if(isset($id) && $id != 0) {
              $galerie = new Application_Model_EuGalerie();
              $galerieM = new Application_Model_EuGalerieMapper();
              $galerieM->find($id,$galerie);
              $galerie->setStatut($this->_request->getParam('statut'));
              $galerieM->update($galerie);
           }
           $this->_redirect('/administration/listgalerie'); 
    }
    
    
    
    
    public  function listgalerieAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
    
         $galerie = new Application_Model_EuGalerieMapper();
         $this->view->entries = $galerie->fetchAll();

         $this->view->tabletri = 1;
    }
    
    
    
    public function addphotoAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $tab_galerie = new Application_Model_DbTable_EuGalerie();
         $select = $tab_galerie->select();
         $select->order('titre asc');
         $entries = $tab_galerie->fetchAll($select);
         $this->view->entries = $entries;
         
         $request = $this->getRequest();
         if($request->isPost()) {
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $photo = new Application_Model_EuPhotoGalerie();
                $photo_mapper = new Application_Model_EuPhotoGalerieMapper();                  

                $compteur = $photo_mapper->findConuter() + 1;
                $id_galerie = $request->getParam("id_galerie");                     
                
                include("Transfert.php");
                for($i = 0; $i < $_POST['cpteur']; $i++)   {
                   $titre = $_POST["titre".$i];
                   if(isset($_FILES["photo".$i]["name"]) && $_FILES["photo".$i]["name"] != "") {
                      $chemin  = "galerie";
                      $file    = $_FILES["photo".$i]["name"];
                      $file1   = "photo".$i;
                      $fichier = $chemin."/".transfert($chemin,$file1);
                   } else { $fichier = ""; }
                   
                   $compteur = $photo_mapper->findConuter() + 1;
                   $photo->setId_photo_galerie($compteur);
                   $photo->setId_galerie($id_galerie);
                   $photo->setLibelle($titre);
                   $photo->setPhoto($fichier);
                   $photo->setStatut(1);
                   $photo->setDate_photo($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                   $photo_mapper->save($photo);            
                }

                $db->commit();
                $this->_redirect('/administration/listphoto');              

            } catch (Exception $exc) {
               $db->rollback();
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();               
               return;
            }
           
          } 
    }
    
    
    
    public  function editphotoAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $tab_galerie = new Application_Model_DbTable_EuGalerie();
         $select = $tab_galerie->select();
         $select->order('titre asc');
         $entries = $tab_galerie->fetchAll($select);
         $this->view->entries = $entries;
         
         $request = $this->getRequest();
         if($request->isPost()) {
             $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {
                 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                 $photo = new Application_Model_EuPhotoGalerie();
                 $photo_mapper = new Application_Model_EuPhotoGalerieMapper();                 

                 $id_galerie = $request->getParam("id_galerie");
                 $id_photo_galerie = $request->getParam("id_photo_galerie");
                 $titre = $request->getParam("titre");
                 
                 include("Transfert.php");
                 if(isset($_FILES['photo']['name']) && $_FILES['photo']['name']!="") {
                    $chemin = "fichiers";
                    $file = $_FILES['photo']['name'];
                    $file1='photo';
                    $fichier = $chemin."/".transfert($chemin,$file1);
                 } else { $fichier = $_POST['photo_url_old']; }
                 
                 $photo_mapper->find($id_photo_galerie,$photo);
                 $photo->setId_galerie($id_galerie);
                 $photo->setLibelle($titre);
                 $photo->setPhoto($fichier);
                 $photo->setDate_photo($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                 $photo_mapper->update($photo);
                      
                 $db->commit();
                 $this->_redirect('/administration/listphoto');                   
                 
             } catch (Exception $exc) {
                $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();              
                return;
             }
         
         } else {
            $id = (int)$this->_request->getParam('id');
            if($id != 0) {
               $p = new Application_Model_EuPhotoGalerie();
               $mp = new Application_Model_EuPhotoGalerieMapper();
               $mp->find($id,$p);
               $this->view->photo = $p;
            }    
         } 
    }
    
    
    
    
    public function publierphotoAction()  {
      $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
      if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
    
        $id = (int) $this->_request->getParam('id');
        if(isset($id)) {
           $photo = new Application_Model_EuPhotoGalerie();
           $photoM = new Application_Model_EuPhotoGalerieMapper();
           $photoM->find($id,$photo);
           $photo->setStatut($this->_request->getParam('statut'));
           $photoM->update($photo);
        }
        $this->_redirect('/administration/listphoto');   
    }   
    
    
    
    
    public  function suppphotoAction()  {
      /*page administration/suppphoto - Supression d'une photo */
      $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
      if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
          $id = (int) $this->_request->getParam('id');
          if(isset($id) && $id != 0) {
            $photo = new Application_Model_EuPhotoGalerie();
            $photoM = new Application_Model_EuPhotoGalerieMapper();
            $photoM->find($id,$photo);
            $photoM->delete($photo->id_photo_galerie);
          }
          $this->_redirect('/administration/listphoto');
    }
    
    
    public function listphotoAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $t_photo = new Application_Model_DbTable_EuPhotoGalerie();
         $select = $t_photo->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
         $select->setIntegrityCheck(false);
         $select->join('eu_galerie','eu_galerie.id_galerie = eu_photo_galerie.id_galerie',array('titre'));   
         $entries = $t_photo->fetchAll($select);
         $this->view->entries = $entries;
    }
	
	public  function listdemandeeli1Action()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
        if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		if($sessionutilisateur->code_groupe != "executante_acnev" && $sessionutilisateur->code_groupe != "admin_site") {
	       $this->_redirect('/administration/index');
	    } 
		  
		$eli_mapper = new Application_Model_EuEliMapper();
		$t_eli = new Application_Model_DbTable_EuEli();
		$entries = "";
		
		if($sessionutilisateur->role == "CMFH") {
           $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
           $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
           $select->where("eu_eli.valider = ? ",0);
		   $select->where("eu_eli.rejeter <> ? ",1);
		   $select->where('eu_membre_morale.code_type_acteur IN (?)',array("EI","PEI","OE","POE"));
           $entries = $t_eli->fetchAll($select);
		   
		} else if($sessionutilisateur->role == "FOADDIP") {
		   $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
           $select->setIntegrityCheck(false);
           $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
           $select->where("eu_eli.valider = ? ",0);
		   $select->where("eu_eli.rejeter <> ? ",1);
		   $select->where('eu_membre_morale.code_type_acteur IN (?)',array("OSE","POSE"));
		   $select->where('eu_membre_morale.code_statut IN (?)',array("association","ONG","Eglise","Mosquee"));
           $entries = $t_eli->fetchAll($select);
		   
		} else if($sessionutilisateur->role == "REMEDD") { 
		
		} else  {
		   $entries = $eli_mapper->fetchAllByValidation(0);
		}
		$this->view->entries = $entries;
	}
	
	
	public  function listdemandeeli2Action()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  if($sessionutilisateur->code_groupe != "detentrice_technopole" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  $eli_mapper = new Application_Model_EuEliMapper();
		  $t_eli = new Application_Model_DbTable_EuEli();
		  $entries = "";
		  
		  if($sessionutilisateur->role == "CMFH") {
              $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
              $select->setIntegrityCheck(false);
              $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
              $select->where("eu_eli.valider = ? ",1);
		      $select->where("eu_eli.rejeter <> ? ",1);
		      $select->where('eu_membre_morale.code_type_acteur IN (?)',array("EI","PEI","OE","POE"));
              $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "FOADDIP") {
		      $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
              $select->setIntegrityCheck(false);
              $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
              $select->where("eu_eli.valider = ? ",1);
		      $select->where("eu_eli.rejeter <> ? ",1);
		      $select->where('eu_membre_morale.code_type_acteur IN (?)',array("OSE","POSE"));
		      $select->where('eu_membre_morale.code_statut IN (?)',array("association","ONG","Eglise","Mosquee"));
              $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "REMEDD") { 
		
		  } else {
		      $entries = $eli_mapper->fetchAllByValidation(1);
	      }
		  $this->view->entries = $entries;
	}
	
	
	public  function listdemandeeli3Action()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  
		  if($sessionutilisateur->code_groupe != "surveillance_filiere" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  $eli_mapper = new Application_Model_EuEliMapper();
		  $t_eli = new Application_Model_DbTable_EuEli();
		  $entries = "";
		  
		  if($sessionutilisateur->role == "CMFH") {
             $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
             $select->setIntegrityCheck(false);
             $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
             $select->where("eu_eli.valider = ? ",2);
		     $select->where("eu_eli.rejeter <> ? ",1);
		     $select->where('eu_membre_morale.code_type_acteur IN (?)',array("EI","PEI","OE","POE"));
             $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "FOADDIP") {
		     $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
             $select->setIntegrityCheck(false);
             $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
             $select->where("eu_eli.valider = ? ",2);
		     $select->where("eu_eli.rejeter <> ? ",1);
		     $select->where('eu_membre_morale.code_type_acteur IN (?)',array("OSE","POSE"));
		     $select->where('eu_membre_morale.code_statut IN (?)',array("association","ONG","Eglise","Mosquee"));
             $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "REMEDD") { 
		
		  } else {
		     $entries = $eli_mapper->fetchAllByValidation(2);
	      }
	
		  $this->view->entries = $entries;
	}
	
	
	public  function listdemandeelivaliderAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  $eli_mapper = new Application_Model_EuEliMapper();
		  $t_eli = new Application_Model_DbTable_EuEli();
		  $entries = "";
		
		  if($sessionutilisateur->role == "CMFH") {
             $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
             $select->setIntegrityCheck(false);
             $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
             $select->where("eu_eli.valider = ? ",4);
		     $select->where('eu_membre_morale.code_type_acteur IN (?)',array("EI","PEI","OE","POE"));
             $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "FOADDIP") {
		     $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
             $select->setIntegrityCheck(false);
             $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
             $select->where("eu_eli.valider = ? ",4);
		     $select->where('eu_membre_morale.code_type_acteur IN (?)',array("OSE","POSE"));
		     $select->where('eu_membre_morale.code_statut IN (?)',array("association","ONG","Eglise","Mosquee"));
             $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "REMEDD") { 
		
		  } else {
		     $entries = $eli_mapper->fetchAllByValider();
		  }
		  $this->view->entries = $entries;
	}
	
	
	
	public  function listdemandeelicontracteAction()   {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		
		  $eli_mapper = new Application_Model_EuEliMapper();
		  $entries = $eli_mapper->fetchAllByContracter();
		  $this->view->entries = $entries;
		
	}
	
	
	public  function  reglereliAction()  {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');

        $request = $this->getRequest();
		if($request->isPost()) {		
		     $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction(); 
             try {
				 $eli = new Application_Model_EuEli();
                 $m_eli = new Application_Model_EuEliMapper();
				 $id_eli = $request->getParam("id_eli");
				 $findeli = $m_eli->find($id_eli,$eli);
				 
				 $numero_eli = $eli->numero_eli;
				 $url = curl_init();
				 $resultjson = array();
				 
				 curl_setopt_array(
				   $url,
				   array(
				   CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/eli",
                   CURLOPT_RETURNTRANSFER => true,
                   CURLOPT_ENCODING => "",
                   CURLOPT_MAXREDIRS => 10,
                   CURLOPT_TIMEOUT => 30000000,
                   CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                   CURLOPT_CUSTOMREQUEST => "POST",
				   CURLOPT_POSTFIELDS => "{
				     \n\t\"numeroEli\":\"$numero_eli\"			
				   }",
				   CURLOPT_HTTPHEADER => array(
                    "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                    "content-type: application/json",
                   ),
				  )
				);
				
				$response = json_decode(curl_exec($url));
				$error = curl_error($url);
				
				if(($error === '') && ($response->resultat == 1)) {
					$db->commit();
					$sessionutilisateur->error = $response->message;
					$this->_redirect('/administration/listdemandeelicontracte');
				}  else {
					$db->rollback();
					$this->view->eli = $eli;
					$this->view->error = $response->message;
					return;
				}
				curl_close($url);
				  
			 } catch(Exception $exc) {				   
			   $db->rollback();
			   $this->view->eli = $eli;
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
               return;
			 }
			 
		} else  {
			$id = $this->_request->getParam('id');
		    $eli = new Application_Model_EuEli();
		    $m_eli = new Application_Model_EuEliMapper();
		    $m_eli->find($id,$eli);
		    $this->view->eli = $eli;
		}
		
	}
	
	
	
	public  function listdemandeelirejeterAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  $eli_mapper = new Application_Model_EuEliMapper();
		  $t_eli = new Application_Model_DbTable_EuEli();
		  $entries = "";
		
		  if($sessionutilisateur->role == "CMFH") {
             $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
             $select->setIntegrityCheck(false);
             $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
		     $select->where("eu_eli.rejeter = ? ",1);
		     $select->where('eu_membre_morale.code_type_acteur IN (?)',array("EI","PEI","OE","POE"));
             $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "FOADDIP") {
		     $select = $t_eli->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
             $select->setIntegrityCheck(false);
             $select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_eli.code_membre');
		     $select->where("eu_eli.rejeter = ? ",1);
		     $select->where('eu_membre_morale.code_type_acteur IN (?)',array("OSE","POSE"));
		     $select->where('eu_membre_morale.code_statut IN (?)',array("association","ONG","Eglise","Mosquee"));
             $entries = $t_eli->fetchAll($select);
		   
		  } else if($sessionutilisateur->role == "REMEDD") { 
		
		  } else {
		  
		     $entries = $eli_mapper->fetchAllByRejeter();
		  }
		  $this->view->entries = $entries;
	}
	
	
	public  function validereliAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		
		$request = $this->getRequest();
		if($request->isPost()) { 
			$db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
		        $eli = new Application_Model_EuEli();
			    $m_eli = new Application_Model_EuEliMapper(); 
                $compteur = $request->getParam("compteur");
				$x = 1;
				$rejeter = 0;
				
				while($x <= $compteur) {
				  if(isset($_POST["valider$x"])) {
					 $valider = $_POST["valider$x"];
					 $id_eli = $_POST["demande$x"];
                     $findeli = $m_eli->find($id_eli,$eli);

					 if($eli->montant_vente == NULL ||  $eli->montant_vente == "") {
						$db->rollback();
                        $this->view->error = "Veuillez mettre à jour le prix réel des produits ...";				
                        return; 
					 }
                     					 
					 $eli->setValider($valider);
                     $m_eli->update($eli);
					
					 
					 
					 if($valider == 3)  {
						 $findeli1 = $m_eli->find($id_eli,$eli);
					     $eurepresentation = new Application_Model_DbTable_EuRepresentation();
				         $select = $eurepresentation->select();
					     $select->where('code_membre_morale = ?',$eli->code_membre);
					     $select->where('etat like ?',"inside");
				         $representants = $eurepresentation->fetchAll($select);
					     $row = $representants[0];
					 
					     $membre = new Application_Model_EuMembre();
                         $m_map  = new Application_Model_EuMembreMapper();
                         $findmembre   = $m_map->find($row->code_membre,$membre);
						 
					     $compt1 = Util_Utils::findConuter() + 1;
                         Util_Utils::addSms3Easys($compt1,$membre->portable_membre,"ESMC : ELI N° ".$eli->numero_eli. " a ete valide. Veuillez confirmer votre validation pour le reglement dans votre espace professionnel ...");  
					 } 
				  }
				  
				  if(isset($_POST["rejeter$x"])) {
					 $rejeter = $_POST["rejeter$x"];
					 $id_eli = $_POST["demande$x"];
                     $findeli = $m_eli->find($id_eli,$eli);   
					 $eli->setRejeter(1);
                     $m_eli->update($eli);
                  }
                  $x++;	
				}
				
				$db->commit();
				$sessionutilisateur->error = "Opération effectuée avec succès ...";
				
				if($valider == 1) {
				   $this->_redirect('/administration/listdemandeeli1');
				} else if($valider == 2) {
				   $this->_redirect('/administration/listdemandeeli2');
				} else if($valider == 3) {
					$this->_redirect('/administration/listdemandeeli3');
				} else if($rejeter == 1) {
				   $this->_redirect('/administration/listdemandeelirejeter');
				} 
			
			} catch(Exception $exc) {
		        $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
                return;
		    }
		}
	}
	
	
	public  function detaileliAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		$id = $this->_request->getParam('id');
		$eli = new Application_Model_EuEli();
		$m_eli = new Application_Model_EuEliMapper();
		
		$deli = new Application_Model_EuDetailEli();
		$m_deli = new Application_Model_EuDetailEliMapper();
		
		$m_eli->find($id,$eli);
		$entries = $m_deli->fetchAllByEli($id);
		  
		$this->view->eli = $eli;  
		$this->view->entries = $entries;
	}
	
	public  function editeliAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		    
		$request = $this->getRequest();  
		if($request->isPost())   { 
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try  {
                $eli = new Application_Model_EuEli();
			    $m_eli = new Application_Model_EuEliMapper();
					
                $deli = new Application_Model_EuDetailEli();
			    $m_deli = new Application_Model_EuDetailEliMapper(); 
                $compteur = $request->getParam("compteur");
				$x = 1;
			    $id_eli = $request->getParam("id_eli");
			    $findeli = $m_eli->find($id_eli,$eli);
				$entries = $m_deli->fetchAllByEli($id_eli);
				
				$montant = 0;
				$montant_vente = 0;
				
			    while($x <= $compteur) {
				  if(isset($_POST["confirmer$x"])) {
				    $confirmer = $_POST["confirmer$x"];
					$qte = $_POST["quantite$x"];
					$prix = $_POST["prix$x"];
					
					$qte_vente  = $_POST["qte$x"];
					$prix_vente = $_POST["prix_vente$x"];
					
					$id_detail_eli = $_POST["demande$x"];
                    $finddeli = $m_deli->find($id_detail_eli,$deli);
					
                    $deli->setQuantite($qte);
                    $deli->setPrix_unitaire($prix);
                    $deli->setMontant_produit($prix * $qte);
					
                    $deli->setQte_vente($qte_vente);
                    $deli->setPrix_vente($prix_vente);
					
					$deli->setStatut($confirmer);
                    $m_deli->update($deli);
						  
				    $montant = $montant + ($prix * $qte);
					$montant_vente = $montant_vente + ($prix_vente * $qte_vente);
                  }
				  
				  if(isset($_POST["rejeter$x"])) {
					 $id_detail_eli = $_POST["demande$x"];
                     $finddeli = $m_deli->find($id_detail_eli,$deli); 						  
					 $deli->setStatut(0);
                     $m_deli->update($deli);
                   }    					   
                   $x++;					   
			    }
					
			    $eli->setMontant_eli($montant);
				$eli->setMontant_vente($montant_vente);
                $m_eli->update($eli);
				  
			    $db->commit();
			    $sessionutilisateur->error = "Opération effectuée avec succès ...";
			    $this->_redirect('/administration/listdemandeeli1');

           } catch(Exception $exc) {
		        $db->rollback();
			    $this->view->eli = $eli;  
		        $this->view->entries = $entries;
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
                return;
		   }
		  
		}  else {
			$id = $this->_request->getParam('id');
		    $eli = new Application_Model_EuEli();
		    $m_eli = new Application_Model_EuEliMapper();
		
		    $deli = new Application_Model_EuDetailEli();
		    $m_deli = new Application_Model_EuDetailEliMapper();
		
		    $m_eli->find($id,$eli);
		    $entries = $m_deli->fetchAllByEli($id);
		  
		    $this->view->eli = $eli;  
		    $this->view->entries = $entries;
		}
		
    }
	
	
	
	
	
	
	
	public  function listdemandeachat1Action()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  if($sessionutilisateur->code_groupe != "executante_acnev" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByValiderDown(0);
		  
		  $this->view->entries = $entries;
	}
	
	
	public  function listdemandeachat2Action() {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		  
		  if($sessionutilisateur->code_groupe != "surveillance_filiere" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByValiderDown(1);
		  
		  $this->view->entries = $entries;
		
	}
	
	
	public  function listdemandeachat3Action() {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		  
		  if($sessionutilisateur->code_groupe != "executante_acnev" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByValiderDown(2);
		  
		  $this->view->entries = $entries;
		
	}
	
	public  function listavisachat1Action()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  if($sessionutilisateur->code_groupe != "executante_acnev" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByValiderUp(0);
		  
		  $this->view->entries = $entries;
	}
	
	
	public  function listavisachat2Action()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  if($sessionutilisateur->code_groupe != "surveillance_filiere" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByValiderUp(1);
		  
		  $this->view->entries = $entries;
		  
	}
	
	
	public  function listavisachat3Action()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  if($sessionutilisateur->code_groupe != "detentrice_technopole" && $sessionutilisateur->code_groupe != "admin_site") {
	         $this->_redirect('/administration/index');
	      }
		  
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByValiderUp(2);
		  
		  $this->view->entries = $entries;
		  
	}
	
	public  function listdemandeachatrejeterAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByRejet();
		  
		  $this->view->entries = $entries;
	}
	
	
	
	public  function listdemandeachatAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) { $this->_redirect('/administration/login'); }
          if($sessionutilisateur->confirmation != "") { $this->_redirect('/administration/confirmation'); }
		  
		  $demande_achat = new Application_Model_EuDemandeAchatMapper();
		  $entries = $demande_achat->fetchAllByDemandeValider();
		  
		  $this->view->entries = $entries;
	}
	
	
	
	
	
	public  function detaildemandeachatAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		$id = $this->_request->getParam('id');
		$demande = new Application_Model_EuDemandeAchat();
		$m_demande = new Application_Model_EuDemandeAchatMapper();
		
		$ddemande = new Application_Model_EuDetailDemandeAchat();
		$m_ddemande = new Application_Model_EuDetailDemandeAchatMapper();
		
		$m_demande->find($id,$demande);
		$entries = $m_ddemande->fetchAllByDemande($id);
		  
		$this->view->demande = $demande;  
		$this->view->entries = $entries;
	}
	
	
	
	public  function editdemandeachatAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		
		  $request = $this->getRequest();  
		  if($request->isPost())   {
			$db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
			    $ddemande     = new Application_Model_EuDetailDemandeAchat();
			    $m_ddemande   = new Application_Model_EuDetailDemandeAchatMapper(); 
                $compteur = $request->getParam("compteur");
				$x = 1;
                  
				while($x <= $compteur) {
				  if(isset($_POST["confirmer$x"])) {
				     $confirmer = $_POST["confirmer$x"];
					 $qte = $_POST["quantite$x"];
					 $prix = $_POST["prix$x"];
					 $id_detail_demande_achat = $_POST["demande$x"];
                     $finddemande = $m_ddemande->find($id_detail_demande_achat,$ddemande);
                     $ddemande->setQuantite($qte);
                     $ddemande->setPrix_unitaire($prix);					 
					 $ddemande->setValidation($confirmer);
                     $m_ddemande->update($ddemande);
                  }
				  
				  if(isset($_POST["rejeter$x"])) {
					 $id_detail_demande_achat = $_POST["demande$x"];
                     $finddemande = $m_ddemande->find($id_detail_demande_achat,$ddemande);   
					 $ddemande->setValidation(1);
                     $m_ddemande->update($ddemande);
                  }	
                  $x++;					   
			   }
				  
			   $db->commit();
			   $sessionutilisateur->error = "Opération effectuée avec succès ...";
			   $this->_redirect('/administration/listavisachat1');
			   
			   } catch(Exception $exc) {
		        $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
                return;
		     }
			   
		  } else {
			  
			   $id = $this->_request->getParam('id');
		       $demande = new Application_Model_EuDemandeAchat();
		       $m_demande = new Application_Model_EuDemandeAchatMapper();
		
		       $ddemande = new Application_Model_EuDetailDemandeAchat();
		       $m_ddemande = new Application_Model_EuDetailDemandeAchatMapper();
		
		       $m_demande->find($id,$demande);
		       $entries = $m_ddemande->fetchAllByDemande($id);
		  
		       $this->view->demande = $demande;  
		       $this->view->entries = $entries;  
		  }
		
	}
	
	
	public  function validerdemandeachatAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		
		  $request = $this->getRequest();  
		  if($request->isPost())   { 
			$db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {  
			    $demande     = new Application_Model_EuDemandeAchat();
			    $m_demande   = new Application_Model_EuDemandeAchatMapper(); 
                $compteur = $request->getParam("compteur");
				$x = 1;
                  
				while($x <= $compteur) {
				  if(isset($_POST["valider$x"])) {
				     $valider_down = $_POST["valider$x"];
					 $id_demande_achat = $_POST["demande$x"];
                     $finddemande = $m_demande->find($id_demande_achat,$demande);   
					 $demande->setValider_down($valider_down);
                     $m_demande->update($demande);
                  }
				  
				  if(isset($_POST["rejeter$x"])) {
					 $id_demande_achat = $_POST["demande$x"];
                     $finddemande = $m_demande->find($id_demande_achat,$demande);   
					 $demande->setRejet(1);
                     $m_demande->update($demande);
                  }
					
                    $x++;					   
				  }
				  
				  $db->commit();
				  $sessionutilisateur->error = "Opération effectuée avec succès ...";
				  if($valider_down == 1) {
				    $this->_redirect('/administration/listdemandeachat1');
				  } else if($valider_down == 2) {
				    $this->_redirect('/administration/listdemandeachat2');
				  } else if($valider_down == 3) {
					$this->_redirect('/administration/listdemandeachat3');
				  }
			  
			 } catch(Exception $exc) {
		        $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
                return;
		     }
			  
		  }
		
	}
	
	
	
	public  function valideravisachatAction()  {
		ini_set('memory_limit', '1024M');
		$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
		if(!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
          if($sessionutilisateur->confirmation != "") {$this->_redirect('/administration/confirmation');}
		
		  $request = $this->getRequest();  
		  if($request->isPost())   { 
			$db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {  
			    $demande     = new Application_Model_EuDemandeAchat();
			    $m_demande   = new Application_Model_EuDemandeAchatMapper(); 
                $compteur = $request->getParam("compteur");
				$x = 1;
                  
				while($x <= $compteur) {
				  if(isset($_POST["valider$x"])) {
				     $valider_up = $_POST["valider$x"];
					 $id_demande_achat = $_POST["demande$x"];
                     $finddemande = $m_demande->find($id_demande_achat,$demande);   
					 $demande->setValider_up($valider_up);
                     $m_demande->update($demande);
                  }
				  
				  if(isset($_POST["rejeter$x"])) {
					 $id_demande_achat = $_POST["demande$x"];
                     $finddemande = $m_demande->find($id_demande_achat,$demande);   
					 $demande->setRejet(1);
                     $m_demande->update($demande);
                  }
                  $x++;					   
				}
				
				$db->commit();
				$sessionutilisateur->error = "Opération effectuée avec succès ...";
				
				if($valider_up == 1) {
				   $this->_redirect('/administration/listavisachat1');
				} else if($valider_up == 2) {
				   $this->_redirect('/administration/listavisachat2');
				} else if($valider_up == 3) {
					$this->_redirect('/administration/listavisachat3');
				}
			  
			 } catch(Exception $exc) {
		        $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();				
                return;
		     }
			  
		  }
	}
    
    
    
    public  function addpartenaireAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $request = $this->getRequest();
         if($request->isPost()) {
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
           try {
               $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $partenaire = new Application_Model_EuPartenaire();
               $m_partenaire = new Application_Model_EuPartenaireMapper(); 

               include("Transfert.php");
               if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="") {
                  $chemin   = "partenaire";
                  $file = $_FILES['vignette']['name'];
                  $file1='vignette';
                  $fichier = $chemin."/".transfert($chemin,$file1);
               } else { $fichier = ""; }
                              
               $compteur = $m_partenaire->findConuter() + 1;
               $titre = $request->getParam("titre");
               $resume = $request->getParam("resume");
               $lien_partenaire = $request->getParam("lien_partenaire");
               $description = $request->getParam("description");

               $partenaire->setId_partenaire($compteur);
               $partenaire->setTitre($titre);
               $partenaire->setResume($resume);
               $partenaire->setDescription($description);
               $partenaire->setVignette($fichier);
               $partenaire->setStatut(0);
               $partenaire->setLiendirect($lien_partenaire);
               $partenaire->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
               $m_partenaire->save($partenaire);    
                
               $db->commit();
               $this->_redirect('/administration/listpartenaire');
         
           } catch (Exception $exc) {
               $db->rollback();
               $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();               
               return;
           }
         }
         
    }
    
    
    
    
    public function publierpartenaireAction()    {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))           {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")    {$this->_redirect('/administration/confirmation');}
    
         $id = (int) $this->_request->getParam('id');
         if(isset($id)) {
           $partenaire = new Application_Model_EuPartenaire();
           $partenaireM = new Application_Model_EuPartenaireMapper();
           $partenaireM->find($id,$partenaire);
           $partenaire->setStatut($this->_request->getParam('statut'));
           $partenaireM->update($partenaire);
         }
         $this->_redirect('/administration/listpartenaire');
    }
    
    
    
    
    
    public function editpartenaireAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
         
         $request = $this->getRequest();
         if($request->isPost()) {
             $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {
                 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                 $partenaire = new Application_Model_EuPartenaire();
                 $partenaire_mapper = new Application_Model_EuPartenaireMapper();                  

                 $id_partenaire = $request->getParam("id_partenaire");
                 $titre = $request->getParam("titre");
                 $resume = $request->getParam("resume");
                 $lien_partenaire = $request->getParam("lien_partenaire");
                 $description = $request->getParam("description");
 
                 include("Transfert.php");
                 if(isset($_FILES['vignette']['name']) && $_FILES['vignette']['name']!="")  {
                   $chemin  = "partenaire";
                   $file  = $_FILES['vignette']['name'];
                   $file1 = 'vignette';
                   $fichier = $chemin."/".transfert($chemin,$file1);
                 } else { $fichier = $_POST['vignette_old']; }
                 
                 $partenaire_mapper->find($id_partenaire,$partenaire);
                 $partenaire->setTitre($titre);
                 $partenaire->setResume($resume);
                 $partenaire->setDescription($description);
                 $partenaire->setVignette($fichier);
                 $partenaire->setLiendirect($lien_partenaire);
                 $partenaire->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                 $partenaire_mapper->update($partenaire);
                 
                 $db->commit();
                 $this->_redirect('/administration/listpartenaire');     
             
             } catch (Exception $exc) {
                $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();              
                return;
             }
             
          }  else {
             $id = (int)$this->_request->getParam('id');
             if($id != 0) {
               $p = new Application_Model_EuPartenaire();
               $mp = new Application_Model_EuPartenaireMapper();
               $mp->find($id,$p);
               $this->view->partenaire = $p;
             }   
         }
    
    }
    
    
    
    
    public function supppartenaireAction()  {
      $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
      if(!isset($sessionutilisateur->login))          {$this->_redirect('/administration/login');}
        if($sessionutilisateur->confirmation != "")   {$this->_redirect('/administration/confirmation');}
    
        $id = (int) $this->_request->getParam('id');
        if(isset($id) && $id != 0)  {
          $partenaire = new Application_Model_EuPartenaire();
          $partenaireM = new Application_Model_EuPartenaireMapper();
          $partenaireM->find($id,$partenaire);
          $partenaireM->delete($partenaire->id_partenaire);
        }
        $this->_redirect('/administration/listpartenaire');
    
    }
    
    
    
    public  function  listpartenaireAction()  {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
    
         $tab_partenaire = new Application_Model_DbTable_EuPartenaire();
         $select = $tab_partenaire->select();
         $select->order('id_partenaire desc');
         $entries = $tab_partenaire->fetchAll($select);
         $this->view->entries = $entries;
    
    
    }
    


    

    public function listtraite12Action()
    {
        /* page administration/listtraite2 - Liste des traites trait�es */

       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}


        $tabela = new Application_Model_DbTable_EuTpagcp();
        $select = $tabela->select();//Zend_Db_Table::SELECT_WITH_FROM_PART
        //$select->setIntegrityCheck(false);
        //$select->join('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
        $select->where('escomptable = 3');
        //$select->where('eu_traite.traiter = 8');
        $select->where("mode_reglement LIKE 'OPI'");
        //$select->where('eu_tpagcp.code_membre = ?', $sessionmembre->code_membre);
        //$select->where("eu_traite.traite_code_banque IN (SELECT code_banque FROM eu_banque WHERE code_membre_morale LIKE '".$sessionmembre->code_membre."')");
        $select->order(array('date_deb DESC'));
        $traites = $tabela->fetchAll($select);

    $this->view->traites = $traites;



        $this->view->tabletri = 1;

    }

    

    public function detailstraiteAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($id, $tpagcp);
        $this->view->tpagcp = $tpagcp;



        $traiteT = new Application_Model_DbTable_EuTraite();
        $select = $traiteT->select();
        $select->where('traite_tegcp = ?', $id);
        $select->order('traiter ASC');
        $traites = $traiteT->fetchAll($select);

        $this->view->traites = $traites;
            }

    }
    

    public function pdftraiteAction()
    {
        /* page administration/pdftraite - G�n�ration de traite en PDF */

       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       //if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         //if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}

    //include("Transfert.php");


if(isset($_POST['ok']) && $_POST['ok']=="ok"){

        $id = $_POST['traite_id'];
        $banque = "";
        $code_banque = $_POST['code_banque'];
        $num_compte_bancaire = $_POST['num_compte_bancaire'];

        if ($id > 0 && $code_banque != "WARI" && $num_compte_bancaire != "") {
/**/$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);

        $traite->setMode_paiement($code_banque);
        $traite->setReference_paiement($num_compte_bancaire);
        //$traite->setTraite_numero($numero_opi);
        //$traite->setTraite_imprimer(1);
    $traiteM->update($traite);
        //$pdf = Util_Utils::genererPdfOPI($id, $banque, $code_banque, $num_compte_bancaire);
//$this->_redirect($pdf);

        }else{
/**/$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);

        $traite->setMode_paiement($code_banque);
        $traite->setReference_paiement($num_compte_bancaire);
        //$traite->setTraite_numero($numero_opi);
        //$traite->setTraite_imprimer(1);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);*/
        }

}else{

        $id = (int) $this->_request->getParam('id');
        $banque = (int)$this->_request->getParam('banque');
        $code_banque = "";
        $num_compte_bancaire = "";

        if ($id > 0 && $banque > 0) {
        $comptebancaire = new Application_Model_EuCompteBancaire();
        $comptebancaireM = new Application_Model_EuCompteBancaireMapper();
        $comptebancaireM->find($banque, $comptebancaire);
        if($comptebancaire->code_banque != "WARI"){
/**/$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);

        $traite->setMode_paiement($comptebancaire->code_banque);
        $traite->setReference_paiement($comptebancaire->num_compte_bancaire);
        //$traite->setTraite_numero($numero_opi);
        //$traite->setTraite_imprimer(1);
    $traiteM->update($traite);

        //$pdf = Util_Utils::genererPdfOPI($id, $banque, $code_banque, $num_compte_bancaire);
//$this->_redirect($pdf);

        }else{
/**/$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);

        $traite->setMode_paiement($comptebancaire->code_banque);
        $traite->setReference_paiement($comptebancaire->num_compte_bancaire);
        //$traite->setTraite_numero($numero_opi);
        //$traite->setTraite_imprimer(1);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);*/
        }

        }else if($id > 0){
/**/$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);

        $pdf = Util_Utils::genererPdfOPI($id, $banque, $traite->mode_paiement, $traite->reference_paiement);
$this->_redirect($pdf);

        }else{
/**/$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);

        $traite->setMode_paiement($code_banque);
        $traite->setReference_paiement($num_compte_bancaire);
        //$traite->setTraite_numero($numero_opi);
        //$traite->setTraite_imprimer(1);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);*/
        }

}
/**/$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);

    $this->_redirect('/administration/detailstraite/id/'.$traite->traite_tegcp);

    }



    
    
    

    public function updaterelevebancairedetailAction()
    {

	$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcadmin');


        $relevebancairedetail = new Application_Model_EuRelevebancairedetailMapper();
        $entries = $relevebancairedetail->fetchAllByCode("WARI");
        foreach ($entries as $value) {
        	# code...
                                echo "|".$value->getRelevebancairedetail_montant()."|";

                                $rb = new Application_Model_EuRelevebancairedetail();
                                $mrb = new Application_Model_EuRelevebancairedetailMapper();
                                $mrb->find($value->relevebancairedetail_id, $rb);   
        
                                //$rb->setRelevebancairedetail_montant(str_replace('\n', '', $rb->relevebancairedetail_montant));
                                $pattern = "/\r/";
								$replacement = '';

                                $rb->setRelevebancairedetail_montant(preg_replace($patterns, $replacements, $rb->getRelevebancairedetail_montant()));
                                //$mrb->update($rb);

                                $rb2 = new Application_Model_EuRelevebancairedetail();
                                $mrb2 = new Application_Model_EuRelevebancairedetailMapper();
                                $mrb2->find($rb->relevebancairedetail_id, $rb2);   
                                echo "|".$rb2->getRelevebancairedetail_montant()."|";
        }
    //$this->_redirect('/administration/listrelevebancaire');

    }

//UPDATE `ESMCDBPRO`.`eu_relevebancairedetail` SET `relevebancairedetail_id`='40232', `relevebancairedetail_relevebancaire`='1754', `relevebancairedetail_libelle`='AGBETO KOMLAVI ONLONSOBE - 123456 - ECOBANK TG - 90102363', `relevebancairedetail_numero`='489987237', `relevebancairedetail_date`='2017-12-31', `publier`='0', `relevebancairedetail_date_valeur`='2017-12-31', `relevebancairedetail_montant`='5000\n' WHERE (`relevebancairedetail_id`='40232');









  public function listarticlecommandeAction()
  {
    /* page espacepersonnel/listarticleachat - Liste des articles achats */

       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
      //if (isset($_POST['designation']) && $_POST['designation'] != "") {

                  $date_fin = new Zend_Date($_POST['date_fin']);
                  $date_fin->addDay(1);

    $detailcommande = new Application_Model_EuDetailCommandeMapper();
    $this->view->entries = $detailcommande->fetchAllByCommander($_POST['code_membre'], $_POST['designation'], $_POST['date_debut'], $_POST['date_fin'], $_POST['commander']);

    //$this->view->select = $detailcommande->fetchAllByCommanderSelect($sessionmembre->code_membre, $_POST['designation'], $_POST['date_debut'], $_POST['date_fin'], $_POST['commander']);

          /*} else {
        $this->view->error = "Champs * obligatoire";
      }*/
}

    $this->view->tabletri = 1;
  }



public function listarticlecommandeexcelAction()
    {
        /* page administration/etatqopibanexcel - exportation en excel */

       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}
        

        $date_debut = (string)$this->_request->getParam('date_debut');
        $this->view->date_debut = $date_debut;
        $date_fin = (string)$this->_request->getParam('date_fin');
        $this->view->date_fin = $date_fin;
        $designation = (string)$this->_request->getParam("designation");
        $this->view->designation = $designation;
        $commander = (int)$this->_request->getParam('commander');
        $this->view->commander = $commander;
        $code_membre = (string)$this->_request->getParam('code_membre_vendeur');
        $this->view->code_membre = $code_membre;

        //Util_Utils::genererExcelCommande($sessionmembre->code_membre, $date_debut, $date_fin, $designation, $commander);
$this->_redirect(Util_Utils::genererExcelCommande($code_membre, $date_debut, $date_fin, $designation, $commander));

    }






    public function addreleveAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}

        $request = $this->getRequest ();
        $db = Zend_Db_Table::getDefaultAdapter ();
        $date = new Zend_Date(Zend_Date::ISO_8601);
        if ($request->isPost ()) {
            $date_releve = $request->getParam ( "date_releve" );
            $libelle = $request->getParam ( "libelle" );
            list($autre1, $autre2) = explode("#", $libelle);
            $code_membre = substr($autre2,0,20);
            $numero = $request->getParam ( "numero" );
            $montant = $request->getParam ( "montant" );
            $date_valeur = $request->getParam ( "date_valeur" );
            $code_banque = $request->getParam ( "code_banque" );
            $relbancaire = new Application_Model_EuRelevebancaire ();
            $m_releve = new Application_Model_EuRelevebancaireMapper ();
            $m_detReleve = new Application_Model_EuRelevebancairedetailMapper ();
            $releves = $m_releve->fetchAllByDateWari ($date->toString ( "yyyy-MM-dd" ), $code_banque);
            $db->beginTransaction ();
            try {
                $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {
                        
                //$date_depot = new Zend_Date ( Util_Utils::convertDate ( $date_releve ), Zend_Date::ISO_8601 );
                //$date_v = new Zend_Date ( Util_Utils::convertDate ( $date_valeur ), Zend_Date::ISO_8601 );
                $date_depot = $date_releve ;
                $date_v = $date_valeur ;
                if (count ( $releves ) >= 1) {
                    $releve = $releves;
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $releve->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                } else {
                    $lastId = $m_releve->findConuter ();
                    if (isset ( $lastId )) {
                        $lastId ++;
                    } else {
                        $lastId = 1;
                    }
                    $relbancaire->setRelevebancaire_id ( $lastId );
                    $relbancaire->setPublier ( 1 );
                    $relbancaire->setRelevebancaire_banque ( $code_banque );
                    $relbancaire->setRelevebancaire_date ( $date->toString ( "yyyy-MM-dd" ) );
                    $relbancaire->setRelevebancaire_utilisateur ( $sessionutilisateur->id_utilisateur );
                    $m_releve->save ( $relbancaire );
                    
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $relbancaire->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                }

                $ok = Util_Utils::addBAn($code_membre, $numero, $date_depot, $montant, $libelle, $code_banque);

                $db->commit ();
                if($ok == 0){
                $this->view->message = "Ajout de relevé effectué avec succès!";
                }else if($ok == 1){
                $this->view->message = "Ajout de relevé effectué avec succès! BAn bien effectué";
                }
            }else{
                $this->view->message = "Relevé deja chargé ...";
            }
                //$this->_redirect ( "/administration/addreleve" );
            } catch ( Exception $e ) {
                $db->rollBack ();
                $this->view->message = "Echec d'ajout de relevé bancaire; Erreur de :" . $e->getMessage ();
                $this->view->date_releve = $date_releve;
                $this->view->libelle = $libelle;
                $this->view->numero = $numero;
                $this->view->montant = $montant;
                $this->view->date_valeur = $date_valeur;
                $this->view->code_banque = $code_banque;
                return;
            }
        } else {
            return;
        }
    }








    public function listactivationutilisateurallAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}


        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
          if(isset($_POST['periode']) && $_POST['periode']!="") {

             list($debut, $fin) = explode("/", $_POST['periode']);

      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');


        $partagem_tall = new Application_Model_DbTable_EuPartagem();
        $select = $partagem_tall->select();
        $select->distinct();
        $select->from("eu_partagem", "partagem_membreasso");
        $select->where("partagem_membreasso IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association IN (SELECT association_id FROM eu_association WHERE (guichet IS NULL OR guichet = 0)))");// WHERE guichet != 1
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        $this->view->entries_partagemall = $partagem_tall->fetchAll($select);

        /*$tab_partagem = array();
if(count($entries_partagemall)>0){
$i = 0;

foreach ($entries_partagemall as $entry_partagemall){

        $partagem_t = new Application_Model_DbTable_EuPartagem();
        $select = $partagem_t->select();
        $select->where("partagem_membreasso = ? ", $entry_partagemall->partagem_membreasso);
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        $entries_partagem = $partagem_t->fetchAll($select);

if(count($entries_partagem) > 0){
$partagem_montant_partagem = 0;
$partagem_montant_utilise_partagem = 0;
$partagem_montant_solde_partagem = 0;
foreach ($entries_partagem as $entry){
if($entry->partagem_activation > 0){
        $activation = new Application_Model_EuActivation();
        $activationM = new Application_Model_EuActivationMapper();
        $activationM->find($entry->partagem_activation, $activation);
$code_membre = $activation->code_membre;
}
if($entry->partagem_code_activation > 0){
        $code_activation = new Application_Model_EuCodeActivation();
        $code_activationM = new Application_Model_EuCodeActivationMapper();
        $code_activationM->find($entry->partagem_code_activation, $code_activation);
$code_membre = $code_activation->code_membre;
}
        $membreasso = new Application_Model_EuMembreasso();
        $membreassoM = new Application_Model_EuMembreassoMapper();
        $membreassoM->find($entry->partagem_membreasso, $membreasso);
    
        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($membreasso->membreasso_association, $association);

$tab_partagem[$i][0] = $membreasso->membreasso_association;
$tab_partagem[$i][1] = $entry->partagem_membreasso;

if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }
if(count($entries2) > 0){
$partagem_montant = 0; 
$partagem_montant_utilise = 0; 
$partagem_montant_solde = 0; 
}else{ 
$partagem_montant = $entry->partagem_montant; 
$partagem_montant_utilise = $entry->partagem_montant_utilise; 
$partagem_montant_solde = $entry->partagem_montant_solde; 
}  
$partagem_montant_partagem += $partagem_montant;
$partagem_montant_utilise_partagem += $partagem_montant_utilise;
$partagem_montant_solde_partagem += $partagem_montant_solde;

}
}

$tab_partagem[$i][2] = $partagem_montant_partagem;
$tab_partagem[$i][3] = $partagem_montant_utilise_partagem;
$tab_partagem[$i][4] = $partagem_montant_solde_partagem;

$i++;
}
}*/

//$this->view->tab_partagem = $tab_partagem;

             $this->view->debut = $debut;
             $this->view->fin = $fin;
          }
        } 
        $this->view->tabletri = 1;
    }




    public function listactivationintegrateurallAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}


        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
          if(isset($_POST['periode']) && $_POST['periode']!="") {

             list($debut, $fin) = explode("/", $_POST['periode']);

      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        
        $partagea_tall = new Application_Model_DbTable_EuPartagea();
        $select = $partagea_tall->select();
        $select->distinct();
        $select->from("eu_partagea", "partagea_association");
        $select->where("partagea_association IN (SELECT association_id FROM eu_association WHERE (guichet IS NULL OR guichet = 0))");//
        $select->where("partagea_date >= '".$debut."' AND partagea_date <= '".$fin."'");
        $this->view->entries_partageaall = $partagea_tall->fetchAll($select);





             $this->view->debut = $debut;
             $this->view->fin = $fin;
          }
        } 
        $this->view->tabletri = 1;
    }







    public function listactivationutilisateurAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}


$periode = (string) $this->_request->getParam('periode');
$membreasso_id = (int) $this->_request->getParam('id');

    //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($periode) && $periode!="") {

             list($debut, $fin) = explode("_", $periode);

             /*$partagem = new Application_Model_EuPartagemMapper();
             $this->view->entries = $partagem->findSomme3($membreasso_id, $debut, $fin);*/

      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        

        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->where("membreasso_id = ? ", $membreasso_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $this->view->entries_activation = $activation_t->fetchAll($select);


        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->where("membreasso_id = ? ", $membreasso_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $this->view->entries_code_activation = $code_activation_t->fetchAll($select);/**/

        $partagem_t = new Application_Model_DbTable_EuPartagem();
        $select = $partagem_t->select();
        $select->where("partagem_membreasso = ? ", $membreasso_id);
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        //$this->view->entries_partagem = $partagem_t->fetchAll($select);

        /*$membre_doublon_t = new Application_Model_DbTable_EuMembreDoublon();
        $select = $membre_doublon_t->select();
        $select->where("membreasso_id = ? ", $sessionmembreasso->membreasso_id);
        $select->where("membre_doublon_date >= '".$debut."' AND membre_doublon_date <= '".$fin."'");
        $this->view->entries_membre_doublon = $membre_doublon_t->fetchAll($select);*/


             $this->view->debut = $debut;
             $this->view->fin = $fin;
          }
        //} 
        $this->view->tabletri = 1;
    }




    public function listactivationintegrateurAction() {
       $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
       
       if(!isset($sessionutilisateur->login))            {$this->_redirect('/administration/login');}
         if($sessionutilisateur->confirmation != "")     {$this->_redirect('/administration/confirmation');}


$periode = (string) $this->_request->getParam('periode');
$membreasso_association = (int) $this->_request->getParam('id');

    //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($periode) && $periode!="") {

             list($debut, $fin) = explode("_", $periode);

             /*$partagea = new Application_Model_EuPartageaMapper();
             $this->view->entries = $partagea->findSomme3($membreasso_association, $debut, $fin);*/

      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        

        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ".$membreasso_association.")");
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $this->view->entries_activation = $activation_t->fetchAll($select);


        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ".$membreasso_association.")");
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $this->view->entries_code_activation = $code_activation_t->fetchAll($select);/**/

        $partagea_t = new Application_Model_DbTable_EuPartagea();
        $select = $partagea_t->select();
        $select->where("partagea_association = ? ", $membreasso_association);
        $select->where("partagea_date >= '".$debut."' AND partagea_date <= '".$fin."'");
        //$this->view->entries_partagea = $partagea_t->fetchAll($select);

        /*$membre_doublon_t = new Application_Model_DbTable_EuMembreDoublon();
        $select = $membre_doublon_t->select();
        $select->where("membreasso_id = ? ", $sessionmembreasso->membreasso_id);
        $select->where("membre_doublon_date >= '".$debut."' AND membre_doublon_date <= '".$fin."'");
        $this->view->entries_membre_doublon = $membre_doublon_t->fetchAll($select);*/


             $this->view->debut = $debut;
             $this->view->fin = $fin;
          }
        //} 
        $this->view->tabletri = 1;
    }




    public function demandepaiement1Action() {



     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {





//////////////////////////////////////////////activation commission
   $date_id = new Zend_Date(Zend_Date::ISO_8601);

      $debut = "2017-12-01";
      $fin = "2018-01-31";
        
      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        
        $type_demande = "Activation";
   
        $partagemT = new Application_Model_DbTable_EuPartagem();
        $select = $partagemT->select();
        $select->from($partagemT, array("partagem_membreasso"));
        $select->distinct();
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        //$select->where("partagem_montant_solde > 0");
        $select->where("partagem_membreasso IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association IN (SELECT association_id FROM eu_association WHERE guichet = 1))");
        $partagemmm = $partagemT->fetchAll($select);
        foreach ($partagemmm as $rows) {

$membreasso = new Application_Model_EuMembreasso();
$membreasso_mapper = new Application_Model_EuMembreassoMapper();
$membreasso_mapper->find($rows->partagem_membreasso, $membreasso);


if($membreasso->code_membre == "" || $membreasso->code_membre == NULL) {
echo $message = "ESMC. Veuillez mettre à jour votre Code Membre dans votre espace integrateur. Merci<br>";

$phone = "228".$membreasso->membreasso_mobile;
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
//$this->_redirect('/integrateur/editmembreassomembre');
continue;
}

$code_membre_employe = $membreasso->code_membre;

echo $code_membre_employe." .<br>";

$association2 = new Application_Model_EuAssociation();
$association2_mapper = new Application_Model_EuAssociationMapper();
$association2_mapper->find($membreasso->membreasso_association, $association2);
if($association2->guichet == 1){

$code_membre_employeur = $association2->code_membre;

$phone = "228".$association2->association_mobile;
}else{
$membreasso2 = new Application_Model_EuMembreasso();
$membreasso2_mapper = new Application_Model_EuMembreassoMapper();
$membreasso2 = $membreasso2_mapper->fetchAllByAssociation($membreasso->membreasso_association);

//$code_membre_employeur = $membreasso2->code_membre;
$code_membre_employeur = $association2->code_membre;

//$phone = "228".$membreasso2->membreasso_mobile;
$phone = "228".$association2->association_mobile;
}

echo $code_membre_employeur." .<br>";

if($code_membre_employeur == "" || $code_membre_employeur == NULL) {
echo $message = "ESMC. Demandez à votre responsable de mettre à jour son Code Membre dans son espace integrateur. Merci<br>";

//$phone = "228".$membreasso2->membreasso_mobile;
$phone = "228".$association2->association_mobile;
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
//$this->_redirect('/integrateur/adddemande');
continue;
}


$taux_commission = 480;
$montant_commission = 0;
/////////////////////////////////////////////////////////////////////////////////
        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->from($activation_t, array('COUNT(id_activation) as nombre'));
        $select->where("membreasso_id = ? ", $membreasso->membreasso_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_activation = $activation_t->fetchAll($select);
        //var_dump($entries_activation);
if(count($entries_activation)>0){
    $entry = $entries_activation[0];
if($association2->guichet == 1){
$activation_montant = floor(480 * 25 / 100);
}else{
$activation_montant = floor(109 * 25 / 100); 
}
$activation_montant_activation = $activation_montant * $entry['nombre'];
echo $activation_montant_activation." .1<br>";
}/**/


/*        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->where("membreasso_id = ? ", $membreasso->membreasso_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $entries_activation = $activation_t->fetchAll($select);
if(count($entries_activation)>0){
$activation_montant_activation = 0;
$activation_montant_utilise_activation = 0;
$activation_montant_solde_activation = 0;
foreach ($entries_activation as $entry):
if($entry->id_activation > 0){
        $activation = new Application_Model_EuActivation();
        $activationM = new Application_Model_EuActivationMapper();
        $activationM->find($entry->id_activation, $activation);
$code_membre = $activation->code_membre;
}
if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }
if(count($entries2) > 0){
$activation_montant = 0; 
$activation_montant_utilise = 0; 
$activation_montant_solde = 0; 
}else{ 
if($association->guichet == 1){
$activation_montant = floor(480 * 25 / 100);
}else{
$activation_montant = floor(109 * 25 / 100); 
}
$activation_montant = $activation_montant; 
$activation_montant_utilise = 0; 
$activation_montant_solde = $activation_montant; 
}  
$activation_montant_activation += $activation_montant;
$activation_montant_utilise_activation += 0;
$activation_montant_solde_activation += $activation_montant;
endforeach;
}*/

/////////////////////////////////////////////////////////////////////////////////
        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->from($code_activation_t, array('COUNT(id_code_activation) as nombre'));
        $select->where("membreasso_id = ? ", $membreasso->membreasso_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_code_activation = $code_activation_t->fetchAll($select);
        //var_dump($entries_code_activation);
if(count($entries_code_activation)>0){
    $entry = $entries_code_activation[0];
if($association2->guichet == 1){
$code_activation_montant = floor(480 * 25 / 100);
}else{
$code_activation_montant = floor(109 * 25 / 100); 
}
$code_activation_montant_code_activation = $code_activation_montant * $entry['nombre'];
echo $code_activation_montant_code_activation." .2<br>";
}/**/


/*        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->where("membreasso_id = ? ", $membreasso->membreasso_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $entries_code_activation = $code_activation_t->fetchAll($select);
if(count($entries_code_activation)>0){
$code_activation_montant_code_activation = 0;
$code_activation_montant_utilise_code_activation = 0;
$code_activation_montant_solde_code_activation = 0;
foreach ($entries_code_activation as $entry): 
if($entry->id_code_activation > 0){
        $code_activation = new Application_Model_EuCodeActivation();
        $code_activationM = new Application_Model_EuCodeActivationMapper();
        $code_activationM->find($entry->id_code_activation, $code_activation);
$code_membre = $code_activation->code_membre;
}
if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }
if(count($entries2) > 0){
$code_activation_montant = 0; 
$code_activation_montant_utilise = 0; 
$code_activation_montant_solde = 0; 
}else{ 
if($association->guichet == 1){
$code_activation_montant = floor(480 * 25 / 100);
}else{
$code_activation_montant = floor(109 * 25 / 100); 
}
$code_activation_montant = $code_activation_montant; 
$code_activation_montant_utilise = 0; 
$code_activation_montant_solde = $code_activation_montant; 
} 
$code_activation_montant_code_activation += $code_activation_montant;
$code_activation_montant_utilise_code_activation += 0;
$code_activation_montant_solde_code_activation += $code_activation_montant;
endforeach;
}
echo $code_activation_montant_code_activation." .<br>";
*/

/////////////////////////////////////////////////////////////////////////////////
/*        $partagem_t = new Application_Model_DbTable_EuPartagem();
        $select = $partagem_t->select();
        $select->where("partagem_membreasso = ? ", $membreasso->membreasso_id);
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        $entries_partagem = $partagem_t->fetchAll($select);
if(count($entries_partagem)>0){
$partagem_montant_partagem = 0;
$partagem_montant_utilise_partagem = 0;
$partagem_montant_solde_partagem = 0;
foreach ($entries_partagem as $entry):
if($entry->partagem_activation > 0){
        $activation = new Application_Model_EuActivation();
        $activationM = new Application_Model_EuActivationMapper();
        $activationM->find($entry->partagem_activation, $activation);
$code_membre = $activation->code_membre;
}
if($entry->partagem_code_activation > 0){
        $code_activation = new Application_Model_EuCodeActivation();
        $code_activationM = new Application_Model_EuCodeActivationMapper();
        $code_activationM->find($entry->partagem_code_activation, $code_activation);
$code_membre = $code_activation->code_membre;
}
if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }
if(count($entries2) > 0){
$partagem_montant = 0;
$partagem_montant_utilise = 0; 
$partagem_montant_solde = 0; 
}else{ 
$partagem_montant = $entry->partagem_montant;
$partagem_montant_utilise = $entry->partagem_montant_utilise; 
$partagem_montant_solde = $entry->partagem_montant_solde; 
}
$partagem_montant_partagem += $partagem_montant;
$partagem_montant_utilise_partagem += $partagem_montant_utilise;
$partagem_montant_solde_partagem += $partagem_montant_solde;
endforeach;
}

*/

$montant_commission_employe = $activation_montant_activation + $code_activation_montant_code_activation;
//$montant_commission_employe = $partagem_montant_partagem;
$montant_commission += $montant_commission_employe;
echo $montant_commission." .3<br>";
//$montant_commission += $montant_commission_employe;
/**/
/////////////////////////////////////////////////////////////////////////////////

if($membreasso->membreasso_type == 1){

/////////////////////////////////////////////////////////////////////////////////
        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->from($activation_t, array('COUNT(id_activation) as nombre'));
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ?)", $association2->association_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_activation = $activation_t->fetchAll($select);
        //var_dump($entries_activation);
if(count($entries_activation)>0){
    $entry = $entries_activation[0];
if($association2->guichet == 1){
$activation_montant = floor(480 * 75 / 100);
}else{
$activation_montant = floor(109 * 75 / 100); 
}
$activation_montant_activation = $activation_montant * $entry['nombre'];
echo $activation_montant_activation." .4<br>";
}/**/

/*        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ?)", $association2->association_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $entries_activation = $activation_t->fetchAll($select);
if(count($entries_activation)>0){
$activation_montant_activation = 0;
$activation_montant_utilise_activation = 0;
$activation_montant_solde_activation = 0;
foreach ($entries_activation as $entry): 
if($entry->id_activation > 0){
        $activation = new Application_Model_EuActivation();
        $activationM = new Application_Model_EuActivationMapper();
        $activationM->find($entry->id_activation, $activation);
$code_membre = $activation->code_membre;
}
if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }
if(count($entries2) > 0){
$activation_montant = 0; 
$activation_montant_utilise = 0; 
$activation_montant_solde = 0; 
}else{ 
if($association->guichet == 1){
$activation_montant = floor(480 * 75 / 100);
}else{
$activation_montant = floor(109 * 75 / 100); 
}
$activation_montant = $activation_montant; 
$activation_montant_utilise = 0; 
$activation_montant_solde = $activation_montant; 
}  
$activation_montant_activation += $activation_montant;
$activation_montant_utilise_activation += 0;
$activation_montant_solde_activation += $activation_montant;
endforeach;
}  
*/
/////////////////////////////////////////////////////////////////////////////////
        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->from($code_activation_t, array('COUNT(id_code_activation) as nombre'));
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ?)", $association2->association_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_code_activation = $code_activation_t->fetchAll($select);
        //var_dump($entries_code_activation);
if(count($entries_code_activation)>0){
    $entry = $entries_code_activation[0];
if($association2->guichet == 1){
$code_activation_montant = floor(480 * 75 / 100);
}else{
$code_activation_montant = floor(109 * 75 / 100); 
}
$code_activation_montant_code_activation = $code_activation_montant * $entry['nombre'];
echo $code_activation_montant_code_activation." .5<br>";
}/**/

/*        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ?)", $association2->association_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $entries_code_activation = $code_activation_t->fetchAll($select);
if(count($entries_code_activation)>0){
$code_activation_montant_code_activation = 0;
$code_activation_montant_utilise_code_activation = 0;
$code_activation_montant_solde_code_activation = 0;
foreach ($entries_code_activation as $entry): 
if($entry->id_code_activation > 0){
        $code_activation = new Application_Model_EuCodeActivation();
        $code_activationM = new Application_Model_EuCodeActivationMapper();
        $code_activationM->find($entry->id_code_activation, $code_activation);
$code_membre = $code_activation->code_membre;
}
if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }
if(count($entries2) > 0){
$code_activation_montant = 0; 
$code_activation_montant_utilise = 0; 
$code_activation_montant_solde = 0; 
}else{ 
if($association->guichet == 1){
$code_activation_montant = floor(480 * 75 / 100);
}else{
$code_activation_montant = floor(109 * 75 / 100); 
}
$code_activation_montant = $code_activation_montant; 
$code_activation_montant_utilise = 0; 
$code_activation_montant_solde = $code_activation_montant; 
}  
$code_activation_montant_code_activation += $code_activation_montant;
$code_activation_montant_utilise_code_activation += 0;
$code_activation_montant_solde_code_activation += $code_activation_montant;
endforeach;
}
*/
/////////////////////////////////////////////////////////////////////////////////
/*        $partagea_t = new Application_Model_DbTable_EuPartagea();
        $select = $partagea_t->select();
        $select->where("partagea_association = ? ", $association2->association_id);
        $select->where("partagea_date >= '".$debut."' AND partagea_date <= '".$fin."'");
        $entries_partagea = $partagea_t->fetchAll($select);
if(count($entries_partagea)>0){
$partagea_montant_partagea = 0;
$partagea_montant_utilise_partagea = 0;
$partagea_montant_solde_partagea = 0;
foreach ($entries_partagea as $entry):
if($entry->partagea_activation > 0){
        $activation = new Application_Model_EuActivation();
        $activationM = new Application_Model_EuActivationMapper();
        $activationM->find($entry->partagea_activation, $activation);
$code_membre = $activation->code_membre;
}
if($entry->partagea_code_activation > 0){
        $code_activation = new Application_Model_EuCodeActivation();
        $code_activationM = new Application_Model_EuCodeActivationMapper();
        $code_activationM->find($entry->partagea_code_activation, $code_activation);
$code_membre = $code_activation->code_membre;
}
if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }
if(count($entries2) > 0){
$partagea_montant = 0; 
$partagea_montant_utilise = 0; 
$partagea_montant_solde = 0; 
}else{ 
$partagea_montant = $entry->partagea_montant; 
$partagea_montant_utilise = $entry->partagea_montant_utilise; 
$partagea_montant_solde = $entry->partagea_montant_solde; 
}  
$partagea_montant_partagea += $partagea_montant;
$partagea_montant_utilise_partagea += $partagea_montant_utilise;
$partagea_montant_solde_partagea += $partagea_montant_solde;
endforeach;
}
*/


$montant_commission_employeur = $activation_montant_activation + $code_activation_montant_code_activation;
//$montant_commission_employeur = $partagea_montant_partagea;
$montant_commission += $montant_commission_employeur;
echo $montant_commission." .6<br>";
//$montant_commission += $montant_commission_employeur;
/**/
/////////////////////////////////////////////////////////////////////////////////
}           

if($montant_commission > 0){
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();
$demande_paiement = $demande_paiement_mapper->fetchAllByQuizaine($code_membre_employeur, $debut, $fin_1, $type_demande); 
//if (count($demande_paiement) > 0) {
$message = "Vous avez déjà émit la demande de paiement de cette quinzaine ...";
//$this->_redirect('/integrateur/adddemande');
//continue;
/*}else if ($montant_commission_employe < Util_Utils::getParamEsmc(18)) {
$message = "Montant insuffisant ...";
//$this->_redirect('/integrateur/adddemande');
//continue;*/
//}else{

//$numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
do{
                    $numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
                    $demande_paiement2_mapper = new Application_Model_EuDemandePaiementMapper();
                    $demande_paiement2 = $demande_paiement2_mapper->fetchAllByNumero_demande_paiement($numero_demande_paiement);
}while(count($commande2) > 0);/**/

////////demande_paiement
$demande_paiement = new Application_Model_EuDemandePaiement();
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();

$compteur_demande_paiement = $demande_paiement_mapper->findConuter() + 1;
$demande_paiement->setId_demande_paiement($compteur_demande_paiement);
$demande_paiement->setMontant_demande_paiement($montant_commission);
$demande_paiement->setDate_demande_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$demande_paiement->setCode_membre_employeur($code_membre_employeur);
$demande_paiement->setPayer(2);
$demande_paiement->setDate_debut($debut);
$demande_paiement->setDate_fin($fin_1);
$demande_paiement->setType_demande($type_demande);
$demande_paiement->setNumero_demande_paiement($numero_demande_paiement);
$demande_paiement_mapper->save($demande_paiement);
echo $montant_commission." .7<br>";

/////paiement
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($montant_commission_employe);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employe);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement_mapper->save($paiement);
echo $montant_commission_employe." .8<br>";

if($membreasso->membreasso_type == 1){
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($montant_commission_employeur);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employeur);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement_mapper->save($paiement);
echo $montant_commission_employeur." .9<br>";
}

///////detail_paiement
$partagem_mapper = new Application_Model_EuPartagemMapper();
$partagem = $partagem_mapper->fetchAllByCommissionSouscription10($membreasso->membreasso_id, $debut, $fin);
foreach ($partagem as $row) {
      
$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($row->partagem_montant);
$detail_paiement->setBon_neutre_appro_id(NULL);
$detail_paiement->setSouscription_id($row->partagem_souscription);
$detail_paiement_mapper->save($detail_paiement);


$partagem3 = new Application_Model_EuPartagem();
$partagem3_mapper = new Application_Model_EuPartagemMapper();
$partagem3_mapper->find($row->partagem_id, $partagem3);
      
$partagem3->setPartagem_montant_utilise($partagem3->getPartagem_montant_utilise() + $row->partagem_montant);
$partagem3->setPartagem_montant_solde($partagem3->getPartagem_montant_solde() - $row->partagem_montant);
$partagem3->setPartagem_montant_impot(0);
$partagem3_mapper->update($partagem3);

}
echo count($partagem)." .10<br>";

if($membreasso->membreasso_type == 1){
$partagea_mapper = new Application_Model_EuPartageaMapper();
$partagea = $partagea_mapper->fetchAllByCommissionSouscription10($membreasso->membreasso_association, $debut, $fin);
foreach ($partagea as $row) {
      
$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($row->partagea_montant);
$detail_paiement->setBon_neutre_appro_id(NULL);
$detail_paiement->setSouscription_id($row->partagea_souscription);
$detail_paiement_mapper->save($detail_paiement);


$partagea3 = new Application_Model_EuPartagea();
$partagea3_mapper = new Application_Model_EuPartageaMapper();
$partagea3_mapper->find($row->partagea_id, $partagea3);
      
$partagea3->setPartagea_montant_utilise($partagea3->getPartagea_montant_utilise() + $row->partagea_montant);
$partagea3->setPartagea_montant_solde($partagea3->getPartagea_montant_solde() - $row->partagea_montant);
$partagea3->setPartagea_montant_impot(0);
$partagea3_mapper->update($partagea3);

}
echo count($partagea)." .11<br>";
}

//}
}
echo "<br><br><br>";
/**/

}















                //$db->commit();
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
               }

    }




    public function demandepaiement2Action() {



     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {








//////////////////////////////////////////////ban commission
   $date_id = new Zend_Date(Zend_Date::ISO_8601);

      //$debut = "2017-12-01";
        $fin = "2018-01-31";

      //$debut = new Zend_Date(Zend_Date::ISO_8601);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      //$debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');

            $type_demande = "BAn";
   $ok = 0;
        $bonneutreapproT = new Application_Model_DbTable_EuBonNeutreAppro();
        $select = $bonneutreapproT->select();
        $select->from($bonneutreapproT, array("bon_neutre_appro_apporteur"));
        $select->distinct();
        //$select->where("bon_neutre_appro_apporteur LIKE '0010010010010000010P'");
        $select->where("bon_neutre_appro_date <= '".$fin."'");//bon_neutre_appro_date >= '".$debut."' AND 
        $bonneutreapprooo = $bonneutreapproT->fetchAll($select);
        foreach ($bonneutreapprooo as $rows) {


/*if($rows->bon_neutre_appro_apporteur == '0010010010010007428P'){
    $ok = 1;
}else{
    if($ok == 1){
        $ok = 1;
    }else{
        $ok = 0;
    }       
}

if($ok == 1){*/

$code_membre_employe = $rows->bon_neutre_appro_apporteur;
echo $code_membre_employe." .1<br>";
        
if($rows->bon_neutre_appro_apporteur == "" || $rows->bon_neutre_appro_apporteur == NULL) {
echo $message = "ESMC. Veuillez mettre à jour votre Code Membre dans votre espace integrateur. Merci"." .2<br>";

$telephone2M = new Application_Model_EuTelephoneMapper();
$telephone2 = $telephone2M->findByCodeMembre($code_membre_employe);
if($telephone2 > 0){
$phone = $telephone2->numero_telephone;
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
}
//$this->_redirect('/integrateur/editmembreassomembre');
continue;
}

$code_membre_employeur = $rows->bon_neutre_appro_apporteur;
echo $code_membre_employeur." .3<br>";

if(!isset($code_membre_employeur) || $code_membre_employeur == "" || $code_membre_employeur == NULL) {
echo $message = "ESMC. Demandez à votre responsable de mettre à jour son Code Membre dans son espace integrateur. Merci"." .4<br>";

$telephone2M = new Application_Model_EuTelephoneMapper();
$telephone2 = $telephone2M->findByCodeMembre($code_membre_employeur);
if($telephone2 > 0){
$phone = $telephone2->numero_telephone;
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
}
//$this->_redirect('/integrateur/adddemande');
continue;
}


        $bonneutreapproD = new Application_Model_DbTable_EuBonNeutreAppro();
        $selectD = $bonneutreapproD->select();
        $selectD->from($bonneutreapproD, array("bon_neutre_appro_date"));
        //$selectD->distinct();
        $selectD->where('bon_neutre_appro_apporteur = ?', $rows->bon_neutre_appro_apporteur);
        $selectD->where("bon_neutre_appro_date <= '".$fin."'");//bon_neutre_appro_date >= '".$debut."' AND 
        $selectD->where("bon_neutre_appro_id IN (SELECT bon_neutre_appro_id FROM eu_bon_neutre_appro_detail WHERE bon_neutre_detail_id IN (SELECT bon_neutre_detail_id FROM eu_bon_neutre_detail WHERE bon_neutre_detail_banque IS NOT NULL))");
        //$selectD->where("bon_neutre_appro_commission = 0");
        $selectD->where("bon_neutre_appro_banque_user IS NULL");
        $selectD->order(array('bon_neutre_appro_id ASC'));
        $selectD->limit(1);
        $bonneutreapproooD = $bonneutreapproD->fetchRow($selectD);
        if(count($bonneutreapproooD) > 0){
        //var_dump($bonneutreapproooD);
//$debut = $bonneutreapproooD->bon_neutre_appro_date;
//$debut = "2016-10-11";
echo $debut = substr($bonneutreapproooD->bon_neutre_appro_date, 0, 10)." .5<br>";
//$debut = $debut->toString('yyyy-MM-dd');


$code_membre_surveillance = "0010010010010000002M";
$code_compte_surveillance = "NN-TMARGE-0010010010010000002M";

//var_dump($bon_neutre_appro2);

        $bon_neutre_appro2_t = new Application_Model_DbTable_EuBonNeutreAppro();
        $select = $bon_neutre_appro2_t->select();
        if($debut != ""){
        $select->where("bon_neutre_appro_date >= '".$debut."' AND bon_neutre_appro_date <= '".$fin."'");
        }
        if($rows->bon_neutre_appro_apporteur != ""){
        $select->where("bon_neutre_appro_apporteur = ? ", $rows->bon_neutre_appro_apporteur);
            }
        $select->where("bon_neutre_appro_id IN (SELECT bon_neutre_appro_id FROM eu_bon_neutre_appro_detail WHERE bon_neutre_detail_id IN (SELECT bon_neutre_detail_id FROM eu_bon_neutre_detail WHERE bon_neutre_detail_banque IS NOT NULL))");
        //$select->where("bon_neutre_appro_commission = 0");
        $select->where("bon_neutre_appro_banque_user IS NULL");
        $bon_neutre_appro2 = $bon_neutre_appro2_t->fetchAll($select);

$commissiondetails = array();
$i = 0;
$montant_employe2 = 0;

foreach ($bon_neutre_appro2 as $rows_bon_neutre_appro2) {

$bon_neutre_appro_detail2_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$bon_neutre_appro_detail2 = $bon_neutre_appro_detail2_mapper->fetchAllByAppro($rows_bon_neutre_appro2->bon_neutre_appro_id);
$montant_appro_valide = 0;
foreach ($bon_neutre_appro_detail2 as $rows_bon_neutre_appro_detail2) {

$bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
$bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
$bon_neutre_detail2_mapper->find($rows_bon_neutre_appro_detail2->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->bon_neutre_detail_banque != NULL && $bon_neutre_detail2->bon_neutre_detail_banque != ""){
$bon_neutre2 = new Application_Model_EuBonNeutre();
$bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
$bon_neutre2_mapper->find($bon_neutre_detail2->bon_neutre_id, $bon_neutre2);

        $relevebancairedetail2_t = new Application_Model_DbTable_EuRelevebancairedetail();
        $select = $relevebancairedetail2_t->select();
        $select->where("relevebancairedetail_numero LIKE '%".$bon_neutre_detail2->bon_neutre_detail_numero."%'");
        $select->where("(relevebancairedetail_libelle LIKE '%".addslashes($bon_neutre2->bon_neutre_nom." ".$bon_neutre2->bon_neutre_prenom)."%'");
        $select->orwhere("relevebancairedetail_libelle LIKE '%".addslashes($bon_neutre2->bon_neutre_raison)."%')");
        $relevebancairedetail2 = $relevebancairedetail2_t->fetchAll($select);
if(count($relevebancairedetail2) > 0){
$montant_appro_valide += $rows_bon_neutre_appro_detail2->bon_neutre_appro_detail_montant;
}
}
}
$montant_employe2 += $montant_appro_valide;
$commissiondetails[$i][0] = $rows_bon_neutre_appro2->bon_neutre_appro_id;
$commissiondetails[$i][1] = $montant_appro_valide;
$i++;
}

$tauxcommission = Util_Utils::getParamEsmc(17);

$montant_commission = floor($montant_employe2 * $tauxcommission / 100);
echo $montant_employe2." .61<br>";
echo $montant_commission." .62<br>";

if($montant_commission > 0){  
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();
$demande_paiement = $demande_paiement_mapper->fetchAllByQuizaine($code_membre_employeur, $debut, $fin_1, $type_demande); 

if (count($demande_paiement) > 0) {
$message = "Vous avez déjà émit la demande de paiement de cette quinzaine ...";
//$this->_redirect('/integrateur/adddemandeban');
continue;
/*}else if ($montant_commission < Util_Utils::getParamEsmc(18)) {//100
$message = "Montant insuffisant ...";
//$this->_redirect('/integrateur/adddemandeban');
continue;*/
}else{

////////demande_paiement

//$numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
do{
                    $numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
                    $demande_paiement2_mapper = new Application_Model_EuDemandePaiementMapper();
                    $demande_paiement2 = $demande_paiement2_mapper->fetchAllByNumero_demande_paiement($numero_demande_paiement);
}while(count($commande2) > 0);/**/


$demande_paiement = new Application_Model_EuDemandePaiement();
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();

$compteur_demande_paiement = $demande_paiement_mapper->findConuter() + 1;
$demande_paiement->setId_demande_paiement($compteur_demande_paiement);
$demande_paiement->setMontant_demande_paiement($montant_commission);
$demande_paiement->setDate_demande_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$demande_paiement->setCode_membre_employeur($code_membre_employeur);
$demande_paiement->setPayer(2);
$demande_paiement->setDate_debut($debut);
$demande_paiement->setDate_fin($fin_1);
$demande_paiement->setType_demande($type_demande);
$demande_paiement->setNumero_demande_paiement($numero_demande_paiement);
$demande_paiement_mapper->save($demande_paiement);
echo $montant_commission." .7<br>";


/////paiement
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($montant_commission);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employe);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement_mapper->save($paiement);
echo $montant_commission." .8<br>";


///////detail_paiement
//$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();
//$bon_neutre_appro = $bon_neutre_appro_mapper->fetchAllByCommission10($rows->bon_neutre_appro_apporteur, $debut, $fin);
//foreach ($bon_neutre_appro as $row) {
for ($i=0; $i < count($commissiondetails); $i++) { 



              ////////////////////////////////////////////////////////////////////////////
$tauxcommission = Util_Utils::getParamEsmc(17);

$montantFraisExploitation = floor($commissiondetails[$i][1] * $tauxcommission / 100);

/*        //creation et utilisation de la source NN
                 $nn = new Application_Model_EuNn();
                 $t_nn = new Application_Model_DbTable_EuNn();
                 $count = $nn->findConuter() + 1;
                 $nn->setId_nn($count)
                    ->setDate_emission($date_id->toString('yyyy-MM-dd HH:mm:ss'))
                    ->setType_emission('Auto Int')
                    ->setMontant_emis($montantFraisExploitation)
                    ->setMontant_remb($montantFraisExploitation)
                    ->setSolde_nn(0.0)
                    ->setEmetteur_nn($code_membre_surveillance)
                    ->setCode_type_nn("NNMARGE")
                    ->setId_utilisateur(NULL);
                 $t_nn->insert($nn->toArray());
        
                    $compteNnMargeSurveillance = $code_compte_surveillance;
                  $compte = new Application_Model_EuCompte();
                  $compteM = new Application_Model_EuCompteMapper();
                  $compteM->find($compteNnMargeSurveillance, $compte);

                  $compte->setSolde($compte->getSolde() + $montantFraisExploitation);
                  $compteM->update($compte);



$mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;

        $place_op = new Application_Model_EuOperation();
                $place_op->setId_operation($compteur)
                        ->setDate_op($date_id->toString('yyyy-MM-dd'))
                        ->setMontant_op($montantFraisExploitation)
                        ->setCode_membre(NULL)
                        ->setCode_membre_morale($code_membre_surveillance)
                        ->setHeure_op($date_id->toString('HH:mm:ss'))
                        ->setCode_produit("NN")
                        ->setId_utilisateur(NULL)
                        ->setLib_op("CREATION DE COMMISSION APPROVISIONNEMENT BAn")
                        ->setCode_cat('BAn')
                        ->setType_op('BAn');
                $mapper_op->save($place_op);*/

//Util_Utils::addOperation($compteur,NULL,$code_membre_surveillance,'BAn',$montantFraisExploitation,'NN',"CREATION DE COMMISSION APPROVISIONNEMENT BAn",'BAn',$date_id->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), $sessionmembreasso->membreasso_id);
//echo $commissiondetails[$i][0]." .91<br>";                                
echo $commissiondetails[$i][1]." .92<br>";                                
echo $montantFraisExploitation." .93<br>";
              ///////////////////////////////////////////////////////////////////////////////////////



$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($montantFraisExploitation);
$detail_paiement->setBon_neutre_appro_id($commissiondetails[$i][0]);
$detail_paiement->setSouscription_id(NULL);
$detail_paiement_mapper->save($detail_paiement);


$bon_neutre_appro3 = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro3_mapper = new Application_Model_EuBonNeutreApproMapper();
$bon_neutre_appro3_mapper->find($commissiondetails[$i][0], $bon_neutre_appro3);
      
$bon_neutre_appro3->setBon_neutre_appro_commission(1);
$bon_neutre_appro3_mapper->update($bon_neutre_appro3);

}

}
}     
}
//}
}














                //$db->commit();
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
               }

    }




    public function demandepaiement3Action() {



     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {






//////////////////////////////////////////////activation commission
   $date_id = new Zend_Date(Zend_Date::ISO_8601);

      $debut = "2018-02-01";
      $fin = "2018-02-28";
        
      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        
        $type_demande = "Activation";
   
        $partagemT = new Application_Model_DbTable_EuPartagem();
        $select = $partagemT->select();
        $select->from($partagemT, array("partagem_membreasso"));
        $select->distinct();
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        //$select->where("partagem_montant_solde > 0");
        $select->where("partagem_membreasso IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association IN (SELECT association_id FROM eu_association WHERE guichet = 1))");
        $partagemmm = $partagemT->fetchAll($select);
        foreach ($partagemmm as $rows) {

$membreasso = new Application_Model_EuMembreasso();
$membreasso_mapper = new Application_Model_EuMembreassoMapper();
$membreasso_mapper->find($rows->partagem_membreasso, $membreasso);


if($membreasso->code_membre == "" || $membreasso->code_membre == NULL) {
echo $message = "ESMC. Veuillez mettre à jour votre Code Membre dans votre espace integrateur. Merci<br>";

$phone = "228".$membreasso->membreasso_mobile;
$compteur = Util_Utils::findConuter() + 1;
//Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
//$this->_redirect('/integrateur/editmembreassomembre');
continue;
}

$code_membre_employe = $membreasso->code_membre;

echo $code_membre_employe." .<br>";

$association2 = new Application_Model_EuAssociation();
$association2_mapper = new Application_Model_EuAssociationMapper();
$association2_mapper->find($membreasso->membreasso_association, $association2);
if($association2->guichet == 1){

$code_membre_employeur = $association2->code_membre;

$phone = "228".$association2->association_mobile;
}else{
$membreasso2 = new Application_Model_EuMembreasso();
$membreasso2_mapper = new Application_Model_EuMembreassoMapper();
$membreasso2 = $membreasso2_mapper->fetchAllByAssociation($membreasso->membreasso_association);

//$code_membre_employeur = $membreasso2->code_membre;
$code_membre_employeur = $association2->code_membre;

//$phone = "228".$membreasso2->membreasso_mobile;
$phone = "228".$association2->association_mobile;
}

echo $code_membre_employeur." .<br>";

if($code_membre_employeur == "" || $code_membre_employeur == NULL) {
echo $message = "ESMC. Demandez à votre responsable de mettre à jour son Code Membre dans son espace integrateur. Merci<br>";

//$phone = "228".$membreasso2->membreasso_mobile;
$phone = "228".$association2->association_mobile;
$compteur = Util_Utils::findConuter() + 1;
//Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
//$this->_redirect('/integrateur/adddemande');
continue;
}


$taux_commission = 480;
$montant_commission = 0;
/////////////////////////////////////////////////////////////////////////////////
/*        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->from($activation_t, array('COUNT(id_activation) as nombre'));
        $select->where("membreasso_id = ? ", $membreasso->membreasso_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_activation = $activation_t->fetchAll($select);
        //var_dump($entries_activation);
if(count($entries_activation)>0){
    $entry = $entries_activation[0];
if($association2->guichet == 1){
$activation_montant = floor(480 * 25 / 100);
}else{
$activation_montant = floor(109 * 25 / 100); 
}
$activation_montant_activation = $activation_montant * $entry['nombre'];
echo $activation_montant_activation." .1<br>";
}*/

/////////////////////////////////////////////////////////////////////////////////
/*        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->from($code_activation_t, array('COUNT(id_code_activation) as nombre'));
        $select->where("membreasso_id = ? ", $membreasso->membreasso_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_code_activation = $code_activation_t->fetchAll($select);
        //var_dump($entries_code_activation);
if(count($entries_code_activation)>0){
    $entry = $entries_code_activation[0];
if($association2->guichet == 1){
$code_activation_montant = floor(480 * 25 / 100);
}else{
$code_activation_montant = floor(109 * 25 / 100); 
}
$code_activation_montant_code_activation = $code_activation_montant * $entry['nombre'];
echo $code_activation_montant_code_activation." .2<br>";
}*/

/////////////////////////////////////////////////////////////////////////////////
        $partagem_t = new Application_Model_DbTable_EuPartagem();
        $select = $partagem_t->select();
        $select->where("partagem_membreasso = ? ", $membreasso->membreasso_id);
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        $select->where("(partagem_activation IN (SELECT id_activation FROM eu_activation WHERE code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon))");
        $select->orwhere("partagem_code_activation IN (SELECT id_code_activation FROM eu_code_activation WHERE code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)))");
        $entries_partagem = $partagem_t->fetchAll($select);
if(count($entries_partagem)>0){
$partagem_montant_partagem = 0;
$partagem_montant_utilise_partagem = 0;
$partagem_montant_solde_partagem = 0;
foreach ($entries_partagem as $entry):
/*if($entry->partagem_activation > 0){
        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->where("id_activation = ? ", $entry->partagem_activation);
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_activation = $activation_t->fetchAll($select);
}
if($entry->partagem_code_activation > 0){
        $code_activation_t = new Application_Model_DbTable_EuActivation();
        $select = $code_activation_t->select();
        $select->where("id_code_activation = ? ", $entry->partagem_code_activation);
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_code_activation = $code_activation_t->fetchAll($select);
}*/
//if(count($entries_activation) > 0 || count($entries_code_activation) > 0){
$partagem_montant = $entry->partagem_montant;
$partagem_montant_utilise = $entry->partagem_montant_utilise; 
$partagem_montant_solde = $entry->partagem_montant_solde; 
/*}else{ 
$partagem_montant = 0;
$partagem_montant_utilise = 0; 
$partagem_montant_solde = 0; 
}*/
$partagem_montant_partagem += $partagem_montant;
$partagem_montant_utilise_partagem += $partagem_montant_utilise;
$partagem_montant_solde_partagem += $partagem_montant_solde;
endforeach;
}


//$montant_commission_employe = $activation_montant_activation + $code_activation_montant_code_activation;
$montant_commission_employe = $partagem_montant_partagem;
$montant_commission += $montant_commission_employe;
echo $montant_commission." .3<br>";
//$montant_commission += $montant_commission_employe;
/**/
/////////////////////////////////////////////////////////////////////////////////

if($membreasso->membreasso_type == 1){

/////////////////////////////////////////////////////////////////////////////////
/*        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->from($activation_t, array('COUNT(id_activation) as nombre'));
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ?)", $association2->association_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_activation = $activation_t->fetchAll($select);
        //var_dump($entries_activation);
if(count($entries_activation)>0){
    $entry = $entries_activation[0];
if($association2->guichet == 1){
$activation_montant = floor(480 * 75 / 100);
}else{
$activation_montant = floor(109 * 75 / 100); 
}
$activation_montant_activation = $activation_montant * $entry['nombre'];
echo $activation_montant_activation." .4<br>";
}*/

/////////////////////////////////////////////////////////////////////////////////
/*        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->from($code_activation_t, array('COUNT(id_code_activation) as nombre'));
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ?)", $association2->association_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $select->where("code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)");
        $entries_code_activation = $code_activation_t->fetchAll($select);
        //var_dump($entries_code_activation);
if(count($entries_code_activation)>0){
    $entry = $entries_code_activation[0];
if($association2->guichet == 1){
$code_activation_montant = floor(480 * 75 / 100);
}else{
$code_activation_montant = floor(109 * 75 / 100); 
}
$code_activation_montant_code_activation = $code_activation_montant * $entry['nombre'];
echo $code_activation_montant_code_activation." .5<br>";
}*/

/////////////////////////////////////////////////////////////////////////////////
        $partagea_t = new Application_Model_DbTable_EuPartagea();
        $select = $partagea_t->select();
        $select->where("partagea_association = ? ", $association2->association_id);
        $select->where("partagea_date >= '".$debut."' AND partagea_date <= '".$fin."'");
        $select->where("(partagea_activation IN (SELECT id_activation FROM eu_activation WHERE code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon))");
        $select->orwhere("partagea_code_activation IN (SELECT id_code_activation FROM eu_code_activation WHERE code_membre NOT IN (SELECT membre_doublon_code_membre2 FROM eu_membre_doublon)))");
        $entries_partagea = $partagea_t->fetchAll($select);
if(count($entries_partagea)>0){
$partagea_montant_partagea = 0;
$partagea_montant_utilise_partagea = 0;
$partagea_montant_solde_partagea = 0;
foreach ($entries_partagea as $entry):
/*if($entry->partagea_activation > 0){
        $activation = new Application_Model_EuActivation();
        $activationM = new Application_Model_EuActivationMapper();
        $activationM->find($entry->partagea_activation, $activation);
$code_membre = $activation->code_membre;
}
if($entry->partagea_code_activation > 0){
        $code_activation = new Application_Model_EuCodeActivation();
        $code_activationM = new Application_Model_EuCodeActivationMapper();
        $code_activationM->find($entry->partagea_code_activation, $code_activation);
$code_membre = $code_activation->code_membre;
}
if($code_membre != ""){
        $membre_doublon2 = new Application_Model_EuMembreDoublonMapper();
        $entries2 = $membre_doublon2->fetchAllByMembre2($code_membre);
      }*/
/*if(count($entries2) > 0){
$partagea_montant = 0; 
$partagea_montant_utilise = 0; 
$partagea_montant_solde = 0; 
}else{*/ 
$partagea_montant = $entry->partagea_montant; 
$partagea_montant_utilise = $entry->partagea_montant_utilise; 
$partagea_montant_solde = $entry->partagea_montant_solde; 
//}  
$partagea_montant_partagea += $partagea_montant;
$partagea_montant_utilise_partagea += $partagea_montant_utilise;
$partagea_montant_solde_partagea += $partagea_montant_solde;
endforeach;
}
/**/


//$montant_commission_employeur = $activation_montant_activation + $code_activation_montant_code_activation;
$montant_commission_employeur = $partagea_montant_partagea;
$montant_commission += $montant_commission_employeur;
echo $montant_commission." .6<br>";
//$montant_commission += $montant_commission_employeur;
/**/
/////////////////////////////////////////////////////////////////////////////////
}           

if($montant_commission > 0){
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();
$demande_paiement = $demande_paiement_mapper->fetchAllByQuizaine($code_membre_employeur, $debut, $fin_1, $type_demande); 
//if (count($demande_paiement) > 0) {
$message = "Vous avez déjà émit la demande de paiement de cette quinzaine ...";
//$this->_redirect('/integrateur/adddemande');
//continue;
/*}else if ($montant_commission_employe < Util_Utils::getParamEsmc(18)) {
$message = "Montant insuffisant ...";
//$this->_redirect('/integrateur/adddemande');
//continue;*/
//}else{

//$numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
do{
                    $numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
                    $demande_paiement2_mapper = new Application_Model_EuDemandePaiementMapper();
                    $demande_paiement2 = $demande_paiement2_mapper->fetchAllByNumero_demande_paiement($numero_demande_paiement);
}while(count($commande2) > 0);/**/

////////demande_paiement
$demande_paiement = new Application_Model_EuDemandePaiement();
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();

$compteur_demande_paiement = $demande_paiement_mapper->findConuter() + 1;
$demande_paiement->setId_demande_paiement($compteur_demande_paiement);
$demande_paiement->setMontant_demande_paiement($montant_commission);
$demande_paiement->setDate_demande_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$demande_paiement->setCode_membre_employeur($code_membre_employeur);
$demande_paiement->setPayer(0);
$demande_paiement->setDate_debut($debut);
$demande_paiement->setDate_fin($fin_1);
$demande_paiement->setType_demande($type_demande);
$demande_paiement->setNumero_demande_paiement($numero_demande_paiement);
//$demande_paiement_mapper->save($demande_paiement);
echo $montant_commission." .7<br>";

/////paiement
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($montant_commission_employe);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employe);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement->setPayer(0);
//$paiement_mapper->save($paiement);
echo $montant_commission_employe." .8<br>";

if($membreasso->membreasso_type == 1){
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($montant_commission_employeur);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employeur);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement->setPayer(0);
//$paiement_mapper->save($paiement);
echo $montant_commission_employeur." .9<br>";
}

///////detail_paiement
$partagem_mapper = new Application_Model_EuPartagemMapper();
$partagem = $partagem_mapper->fetchAllByCommissionSouscription10($membreasso->membreasso_id, $debut, $fin);
foreach ($partagem as $row) {
      
$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($row->partagem_montant);
$detail_paiement->setBon_neutre_appro_id(NULL);
$detail_paiement->setSouscription_id($row->partagem_souscription);
//$detail_paiement_mapper->save($detail_paiement);


$partagem3 = new Application_Model_EuPartagem();
$partagem3_mapper = new Application_Model_EuPartagemMapper();
$partagem3_mapper->find($row->partagem_id, $partagem3);
      
$partagem3->setPartagem_montant_utilise($partagem3->getPartagem_montant_utilise() + $row->partagem_montant);
$partagem3->setPartagem_montant_solde($partagem3->getPartagem_montant_solde() - $row->partagem_montant);
$partagem3->setPartagem_montant_impot(0);
//$partagem3_mapper->update($partagem3);

}
echo count($partagem)." .10<br>";

if($membreasso->membreasso_type == 1){
$partagea_mapper = new Application_Model_EuPartageaMapper();
$partagea = $partagea_mapper->fetchAllByCommissionSouscription10($membreasso->membreasso_association, $debut, $fin);
foreach ($partagea as $row) {
      
$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($row->partagea_montant);
$detail_paiement->setBon_neutre_appro_id(NULL);
$detail_paiement->setSouscription_id($row->partagea_souscription);
//$detail_paiement_mapper->save($detail_paiement);


$partagea3 = new Application_Model_EuPartagea();
$partagea3_mapper = new Application_Model_EuPartageaMapper();
$partagea3_mapper->find($row->partagea_id, $partagea3);
      
$partagea3->setPartagea_montant_utilise($partagea3->getPartagea_montant_utilise() + $row->partagea_montant);
$partagea3->setPartagea_montant_solde($partagea3->getPartagea_montant_solde() - $row->partagea_montant);
$partagea3->setPartagea_montant_impot(0);
//$partagea3_mapper->update($partagea3);

}
echo count($partagea)." .11<br>";
}

//}
}
echo "<br><br><br>";
/**/

}







                //$db->commit();
                    
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
               }

    }






    public function demandepaiement4Action() {



     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {








//////////////////////////////////////////////ban commission
   $date_id = new Zend_Date(Zend_Date::ISO_8601);

      //$debut = "2017-12-01";
        $fin = "2018-02-28";

      //$debut = new Zend_Date(Zend_Date::ISO_8601);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      //$debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');

            $type_demande = "BAn";
   $ok = 0;
        $bonneutreapproT = new Application_Model_DbTable_EuBonNeutreAppro();
        $select = $bonneutreapproT->select();
        $select->from($bonneutreapproT, array("bon_neutre_appro_apporteur"));
        $select->distinct();
        //$select->where("bon_neutre_appro_commission = 0");//bon_neutre_appro_date >= '".$debut."' AND 
        //$select->where("bon_neutre_appro_apporteur LIKE '0010010010010000010P'");
        $select->where("bon_neutre_appro_date <= '".$fin."'");//bon_neutre_appro_date >= '".$debut."' AND 
        //$select->where("(bon_neutre_appro_apporteur IN (SELECT code_membre FROM eu_membreasso WHERE membreasso_association IN (SELECT association_id FROM eu_association WHERE guichet = 1))");
        $select->where("bon_neutre_appro_apporteur IN (SELECT code_membre FROM eu_association WHERE guichet = 1)");
        $bonneutreapprooo = $bonneutreapproT->fetchAll($select);
        foreach ($bonneutreapprooo as $rows) {


/*if($rows->bon_neutre_appro_apporteur == '0010010010010007428P'){
    $ok = 1;
}else{
    if($ok == 1){
        $ok = 1;
    }else{
        $ok = 0;
    }       
}

if($ok == 1){*/

$code_membre_employe = $rows->bon_neutre_appro_apporteur;
echo $code_membre_employe." .1<br>";
        
if($rows->bon_neutre_appro_apporteur == "" || $rows->bon_neutre_appro_apporteur == NULL) {
echo $message = "ESMC. Veuillez mettre à jour votre Code Membre dans votre espace integrateur. Merci"." .2<br>";

$telephone2M = new Application_Model_EuTelephoneMapper();
$telephone2 = $telephone2M->findByCodeMembre($code_membre_employe);
if($telephone2 > 0){
$phone = $telephone2->numero_telephone;
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
}
//$this->_redirect('/integrateur/editmembreassomembre');
continue;
}

$code_membre_employeur = $rows->bon_neutre_appro_apporteur;
echo $code_membre_employeur." .3<br>";

if(!isset($code_membre_employeur) || $code_membre_employeur == "" || $code_membre_employeur == NULL) {
echo $message = "ESMC. Demandez à votre responsable de mettre à jour son Code Membre dans son espace integrateur. Merci"." .4<br>";

$telephone2M = new Application_Model_EuTelephoneMapper();
$telephone2 = $telephone2M->findByCodeMembre($code_membre_employeur);
if($telephone2 > 0){
$phone = $telephone2->numero_telephone;
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms2($compteur, $phone, $message);
//Util_Utils::addSms3Easys($compteur, $phone, $message);
}
//$this->_redirect('/integrateur/adddemande');
continue;
}


        $bonneutreapproD = new Application_Model_DbTable_EuBonNeutreAppro();
        $selectD = $bonneutreapproD->select();
        $selectD->from($bonneutreapproD, array("bon_neutre_appro_date"));
        //$selectD->distinct();
        $selectD->where('bon_neutre_appro_apporteur = ?', $rows->bon_neutre_appro_apporteur);
        $selectD->where("bon_neutre_appro_date <= '".$fin."'");//bon_neutre_appro_date >= '".$debut."' AND 
        $selectD->where("bon_neutre_appro_id IN (SELECT bon_neutre_appro_id FROM eu_bon_neutre_appro_detail WHERE bon_neutre_detail_id IN (SELECT bon_neutre_detail_id FROM eu_bon_neutre_detail WHERE bon_neutre_detail_banque IS NOT NULL))");
        //$selectD->where("bon_neutre_appro_commission = 0");
        $selectD->where("bon_neutre_appro_banque_user IS NULL");
        //$selectD->where("(bon_neutre_appro_apporteur IN (SELECT code_membre FROM eu_membreasso WHERE membreasso_association IN (SELECT association_id FROM eu_association WHERE guichet = 1))");
        $selectD->where("bon_neutre_appro_apporteur IN (SELECT code_membre FROM eu_association WHERE guichet = 1)");
        $selectD->order(array('bon_neutre_appro_id ASC'));
        $selectD->limit(1);
        $bonneutreapproooD = $bonneutreapproD->fetchRow($selectD);
        if(count($bonneutreapproooD) > 0){
        //var_dump($bonneutreapproooD);
//$debut = $bonneutreapproooD->bon_neutre_appro_date;
//$debut = "2016-10-11";
//echo $debut = substr($bonneutreapproooD->bon_neutre_appro_date, 0, 10)." .5<br>";
//$debut = $debut->toString('yyyy-MM-dd');
echo $debut = "2018-02-01"." .5<br>";


$code_membre_surveillance = "0010010010010000002M";
$code_compte_surveillance = "NN-TMARGE-0010010010010000002M";

//var_dump($bon_neutre_appro2);

        $bon_neutre_appro2_t = new Application_Model_DbTable_EuBonNeutreAppro();
        $select = $bon_neutre_appro2_t->select();
        if($debut != ""){
        $select->where("bon_neutre_appro_date >= '".$debut."' AND bon_neutre_appro_date <= '".$fin."'");
        }
        if($rows->bon_neutre_appro_apporteur != ""){
        $select->where("bon_neutre_appro_apporteur = ? ", $rows->bon_neutre_appro_apporteur);
            }
        $select->where("bon_neutre_appro_id IN (SELECT bon_neutre_appro_id FROM eu_bon_neutre_appro_detail WHERE bon_neutre_detail_id IN (SELECT bon_neutre_detail_id FROM eu_bon_neutre_detail WHERE bon_neutre_detail_banque IS NOT NULL))");
        //$select->where("bon_neutre_appro_commission = 0");
        $select->where("bon_neutre_appro_banque_user IS NULL");
        //$select->where("(bon_neutre_appro_apporteur IN (SELECT code_membre FROM eu_membreasso WHERE membreasso_association IN (SELECT association_id FROM eu_association WHERE guichet = 1))");
        $select->where("bon_neutre_appro_apporteur IN (SELECT code_membre FROM eu_association WHERE guichet = 1)");
        $bon_neutre_appro2 = $bon_neutre_appro2_t->fetchAll($select);

$commissiondetails = array();
$i = 0;
$montant_employe2 = 0;

foreach ($bon_neutre_appro2 as $rows_bon_neutre_appro2) {

$bon_neutre_appro_detail2_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$bon_neutre_appro_detail2 = $bon_neutre_appro_detail2_mapper->fetchAllByAppro($rows_bon_neutre_appro2->bon_neutre_appro_id);
$montant_appro_valide = 0;
foreach ($bon_neutre_appro_detail2 as $rows_bon_neutre_appro_detail2) {

$bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
$bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
$bon_neutre_detail2_mapper->find($rows_bon_neutre_appro_detail2->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->bon_neutre_detail_banque != NULL && $bon_neutre_detail2->bon_neutre_detail_banque != ""){
$bon_neutre2 = new Application_Model_EuBonNeutre();
$bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
$bon_neutre2_mapper->find($bon_neutre_detail2->bon_neutre_id, $bon_neutre2);

        $relevebancairedetail2_t = new Application_Model_DbTable_EuRelevebancairedetail();
        $select = $relevebancairedetail2_t->select();
        $select->where("relevebancairedetail_numero LIKE '%".$bon_neutre_detail2->bon_neutre_detail_numero."%'");
        $select->where("(relevebancairedetail_libelle LIKE '%".addslashes($bon_neutre2->bon_neutre_nom." ".$bon_neutre2->bon_neutre_prenom)."%'");
        $select->orwhere("relevebancairedetail_libelle LIKE '%".addslashes($bon_neutre2->bon_neutre_raison)."%')");
        $relevebancairedetail2 = $relevebancairedetail2_t->fetchAll($select);
if(count($relevebancairedetail2) > 0){
$montant_appro_valide += $rows_bon_neutre_appro_detail2->bon_neutre_appro_detail_montant;
}
}
}
$montant_employe2 += $montant_appro_valide;
$commissiondetails[$i][0] = $rows_bon_neutre_appro2->bon_neutre_appro_id;
$commissiondetails[$i][1] = $montant_appro_valide;
$i++;
}

$tauxcommission = Util_Utils::getParamEsmc(17);

$montant_commission = floor($montant_employe2 * $tauxcommission / 100);
echo $montant_employe2." .61<br>";
echo $montant_commission." .62<br>";

if($montant_commission > 0){  
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();
$demande_paiement = $demande_paiement_mapper->fetchAllByQuizaine($code_membre_employeur, $debut, $fin_1, $type_demande); 

if (count($demande_paiement) > 0) {
$message = "Vous avez déjà émit la demande de paiement de cette quinzaine ...";
//$this->_redirect('/integrateur/adddemandeban');
continue;
/*}else if ($montant_commission < Util_Utils::getParamEsmc(18)) {//100
$message = "Montant insuffisant ...";
//$this->_redirect('/integrateur/adddemandeban');
continue;*/
}else{

////////demande_paiement

//$numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
do{
                    $numero_demande_paiement = strtoupper(Util_Utils::genererCodeSMS(10));
                    $demande_paiement2_mapper = new Application_Model_EuDemandePaiementMapper();
                    $demande_paiement2 = $demande_paiement2_mapper->fetchAllByNumero_demande_paiement($numero_demande_paiement);
}while(count($commande2) > 0);/**/


$demande_paiement = new Application_Model_EuDemandePaiement();
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();

$compteur_demande_paiement = $demande_paiement_mapper->findConuter() + 1;
$demande_paiement->setId_demande_paiement($compteur_demande_paiement);
$demande_paiement->setMontant_demande_paiement($montant_commission);
$demande_paiement->setDate_demande_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$demande_paiement->setCode_membre_employeur($code_membre_employeur);
$demande_paiement->setPayer(0);
$demande_paiement->setDate_debut($debut);
$demande_paiement->setDate_fin($fin_1);
$demande_paiement->setType_demande($type_demande);
$demande_paiement->setNumero_demande_paiement($numero_demande_paiement);
//$demande_paiement_mapper->save($demande_paiement);
echo $montant_commission." .7<br>";


/////paiement
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($montant_commission);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employe);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement->setPayer(0);
//$paiement_mapper->save($paiement);
echo $montant_commission." .8<br>";


///////detail_paiement
//$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();
//$bon_neutre_appro = $bon_neutre_appro_mapper->fetchAllByCommission10($rows->bon_neutre_appro_apporteur, $debut, $fin);
//foreach ($bon_neutre_appro as $row) {
for ($i=0; $i < count($commissiondetails); $i++) { 



              ////////////////////////////////////////////////////////////////////////////
$tauxcommission = Util_Utils::getParamEsmc(17);

$montantFraisExploitation = floor($commissiondetails[$i][1] * $tauxcommission / 100);

/*        //creation et utilisation de la source NN
                 $nn = new Application_Model_EuNn();
                 $t_nn = new Application_Model_DbTable_EuNn();
                 $count = $nn->findConuter() + 1;
                 $nn->setId_nn($count)
                    ->setDate_emission($date_id->toString('yyyy-MM-dd HH:mm:ss'))
                    ->setType_emission('Auto Int')
                    ->setMontant_emis($montantFraisExploitation)
                    ->setMontant_remb($montantFraisExploitation)
                    ->setSolde_nn(0.0)
                    ->setEmetteur_nn($code_membre_surveillance)
                    ->setCode_type_nn("NNMARGE")
                    ->setId_utilisateur(NULL);
                 $t_nn->insert($nn->toArray());
        
                    $compteNnMargeSurveillance = $code_compte_surveillance;
                  $compte = new Application_Model_EuCompte();
                  $compteM = new Application_Model_EuCompteMapper();
                  $compteM->find($compteNnMargeSurveillance, $compte);

                  $compte->setSolde($compte->getSolde() + $montantFraisExploitation);
                  $compteM->update($compte);



$mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;

        $place_op = new Application_Model_EuOperation();
                $place_op->setId_operation($compteur)
                        ->setDate_op($date_id->toString('yyyy-MM-dd'))
                        ->setMontant_op($montantFraisExploitation)
                        ->setCode_membre(NULL)
                        ->setCode_membre_morale($code_membre_surveillance)
                        ->setHeure_op($date_id->toString('HH:mm:ss'))
                        ->setCode_produit("NN")
                        ->setId_utilisateur(NULL)
                        ->setLib_op("CREATION DE COMMISSION APPROVISIONNEMENT BAn")
                        ->setCode_cat('BAn')
                        ->setType_op('BAn');
                $mapper_op->save($place_op);*/

//Util_Utils::addOperation($compteur,NULL,$code_membre_surveillance,'BAn',$montantFraisExploitation,'NN',"CREATION DE COMMISSION APPROVISIONNEMENT BAn",'BAn',$date_id->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), $sessionmembreasso->membreasso_id);
//echo $commissiondetails[$i][0]." .91<br>";                                
echo $commissiondetails[$i][1]." .92<br>";                                
echo $montantFraisExploitation." .93<br>";
              ///////////////////////////////////////////////////////////////////////////////////////



$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($montantFraisExploitation);
$detail_paiement->setBon_neutre_appro_id($commissiondetails[$i][0]);
$detail_paiement->setSouscription_id(NULL);
//$detail_paiement_mapper->save($detail_paiement);


$bon_neutre_appro3 = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro3_mapper = new Application_Model_EuBonNeutreApproMapper();
$bon_neutre_appro3_mapper->find($commissiondetails[$i][0], $bon_neutre_appro3);
      
$bon_neutre_appro3->setBon_neutre_appro_commission(1);
//$bon_neutre_appro3_mapper->update($bon_neutre_appro3);

}

}
}     
}
//}
}







                //$db->commit();
                    
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
               }

    }








    public function faiptogotaiAction() {

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');


     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);

$dir = "../../webfiles/FAIP-TOGO/TAI/";
$dir2 = "../../webfiles/FAIP-TOGO/TAI_OLD/";
$dir3 = "../../webfiles/FAIP-TOGO/TAI_ERROR/";
    //$findme = "SOUSCRIPTION_".$entry->souscription_id."_.pdf";
if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
        while (($file = readdir($dh)) !== false) {
            $nomfile = basename($file).PHP_EOL;

            $releve = $dir.$file;

                    $fichier = $releve;
/**/
$path_parts = pathinfo($fichier);
//echo $path_parts['dirname'], "\n";
//echo $path_parts['basename'], "\n";
//echo $path_parts['extension'], "\n";
///echo $path_parts['filename'], "\n"; // depuis PHP 5.2.0
list($code_banque1, $autre) = explode("_", $path_parts['filename']);
if($code_banque1 == "FAIP"){




                    $lines = file($fichier);
    
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $un, $numero, $date2, $montant, $libelle) = explode(";", $line);

                        list($jour, $mois, $annee) = explode("/", $date2);
                        $date = $annee."-".$mois."-".$jour;

                        $pos1 = stripos($libelle, "#");
                        if ($pos1 !== false) {
                            $code_membre_ban = substr($libelle, ($pos1 + 1), 20);
                        }else{
                            $code_membre_ban = "";                        
                        }

$detail_numero = $numero;
$detail_date = $date; 
$detail_montant = str_replace(" ", "", $montant);
//$detail_montant = str_replace(".", "", $montant);
//$detail_montant = str_replace(",", "", $montant);
$detail_libelle = $libelle;

$code_banque_faip_togo = "FAIP";

if($detail_numero != '' && $detail_date != '' && $detail_libelle != '' && $detail_montant > 0 && $code_banque == "FAIP"){
//////////////////////////////////////////////////////////////////////////////////////////
                
        $relevebancaire2M = new Application_Model_EuRelevebancaireMapper();
        $relevebancaire2 = $relevebancaire2M->fetchAllByDateFlooz($date_id->toString('yyyy-MM-dd'), $code_banque_faip_togo);
        if(count($relevebancaire2) > 0){
        
        $relevebancaire_id = $relevebancaire2->relevebancaire_id;
        

        $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail2 = $relevebancairedetail2M->fetchAllByBanqueNumeroDate($code_banque_faip_togo, $detail_numero, $date_id->toString('yyyy-MM-dd'));
        if(count($relevebancairedetail2) > 0){
            $relevebancairedetail_id = $relevebancairedetail2->relevebancairedetail_id;

                            echo $this->view->message = "Numéro de banque déjà chargé ...";
                            $ok = 0;

        }else{
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);

            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;

            }

            }else{
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setRelevebancaire_id($compteur);
            $a->setRelevebancaire_banque($code_banque_faip_togo);
            $a->setRelevebancaire_utilisateur(1);
            $a->setRelevebancaire_fichier(NULL);
            $a->setRelevebancaire_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setPublier(1);
            $ma->save($a);
            
        
        $relevebancaire_id = $compteur;
        
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);
            
            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;
                }



$ok = Util_Utils::addBAn($code_membre_ban, $detail_numero, $detail_date, $detail_montant, $detail_libelle, $code_banque_faip_togo);






if($ok == 1){

$oldfile = $dir.$file;
$newfile = $dir2.$file;

copy($oldfile, $newfile);
unlink($oldfile);
}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}


}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}
}  
}          
        }
        closedir($dh);
    }
    }




                //$db->commit();
                    
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   //return;
               }

    }







    public function mecittogotaiAction() {

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');


     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);

$dir = "../../webfiles/FAIP-TOGO/TAI/";
$dir2 = "../../webfiles/FAIP-TOGO/TAI_OLD/";
$dir3 = "../../webfiles/FAIP-TOGO/TAI_ERROR/";
    //$findme = "SOUSCRIPTION_".$entry->souscription_id."_.pdf";
if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
        while (($file = readdir($dh)) !== false) {
            $nomfile = basename($file).PHP_EOL;

            $releve = $dir.$file;

                    $fichier = $releve;
/**/
$path_parts = pathinfo($fichier);
//echo $path_parts['dirname'], "\n";
//echo $path_parts['basename'], "\n";
//echo $path_parts['extension'], "\n";
///echo $path_parts['filename'], "\n"; // depuis PHP 5.2.0
list($code_banque1, $autre) = explode("_", $path_parts['filename']);
if($code_banque1 == "MECIT"){




                    $lines = file($fichier);
    
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $un, $numero, $date2, $montant, $libelle) = explode(";", $line);

                        list($jour, $mois, $annee) = explode("/", $date2);
                        $date = $annee."-".$mois."-".$jour;

                        $pos1 = stripos($libelle, "#");
                        if ($pos1 !== false) {
                            $code_membre_ban = substr($libelle, ($pos1 + 1), 20);
                        }else{
                            $code_membre_ban = "";                        
                        }

$detail_numero = $numero;
$detail_date = $date; 
$detail_montant = str_replace(" ", "", $montant);
//$detail_montant = str_replace(".", "", $montant);
//$detail_montant = str_replace(",", "", $montant);
$detail_libelle = $libelle;

$code_banque_faip_togo = "MECIT";

if($detail_numero != '' && $detail_date != '' && $detail_libelle != '' && $detail_montant > 0 && $code_banque == "MECIT"){
//////////////////////////////////////////////////////////////////////////////////////////
                
        $relevebancaire2M = new Application_Model_EuRelevebancaireMapper();
        $relevebancaire2 = $relevebancaire2M->fetchAllByDateFlooz($date_id->toString('yyyy-MM-dd'), $code_banque_faip_togo);
        if(count($relevebancaire2) > 0){
        
        $relevebancaire_id = $relevebancaire2->relevebancaire_id;
        

        $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail2 = $relevebancairedetail2M->fetchAllByBanqueNumeroDate($code_banque_faip_togo, $detail_numero, $date_id->toString('yyyy-MM-dd'));
        if(count($relevebancairedetail2) > 0){
            $relevebancairedetail_id = $relevebancairedetail2->relevebancairedetail_id;

                            echo $this->view->message = "Numéro de banque déjà chargé ...";
                            $ok = 0;

        }else{
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);

            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;

            }

            }else{
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setRelevebancaire_id($compteur);
            $a->setRelevebancaire_banque($code_banque_faip_togo);
            $a->setRelevebancaire_utilisateur(1);
            $a->setRelevebancaire_fichier(NULL);
            $a->setRelevebancaire_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setPublier(1);
            $ma->save($a);
            
        
        $relevebancaire_id = $compteur;
        
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);
            
            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;
                }


$ok = Util_Utils::addBAn($code_membre_ban, $detail_numero, $detail_date, $detail_montant, $detail_libelle, $code_banque_faip_togo);





if($ok == 1){

$oldfile = $dir.$file;
$newfile = $dir2.$file;

copy($oldfile, $newfile);
unlink($oldfile);
}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);        
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}


}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);        
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}
}  
}          
        }
        closedir($dh);
    }
    }




                //$db->commit();
                    
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   //return;
               }

    }











    public function mutualtogotaiAction() {

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');


     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);

$dir = "../../webfiles/FAIP-TOGO/TAI/";
$dir2 = "../../webfiles/FAIP-TOGO/TAI_OLD/";
$dir3 = "../../webfiles/FAIP-TOGO/TAI_ERROR/";
    //$findme = "SOUSCRIPTION_".$entry->souscription_id."_.pdf";
if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
        while (($file = readdir($dh)) !== false) {
            $nomfile = basename($file).PHP_EOL;

            $releve = $dir.$file;

                    $fichier = $releve;
/**/
$path_parts = pathinfo($fichier);
//echo $path_parts['dirname'], "\n";
//echo $path_parts['basename'], "\n";
//echo $path_parts['extension'], "\n";
///echo $path_parts['filename'], "\n"; // depuis PHP 5.2.0
list($code_banque1, $autre) = explode("_", $path_parts['filename']);
if($code_banque1 == "MUTUAL"){




                    $lines = file($fichier);
    
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $un, $numero, $date2, $montant, $libelle) = explode(";", $line);

                        list($jour, $mois, $annee) = explode("/", $date2);
                        $date = $annee."-".$mois."-".$jour;

                        $pos1 = stripos($libelle, "#");
                        if ($pos1 !== false) {
                            $code_membre_ban = substr($libelle, ($pos1 + 1), 20);
                        }else{
                            $code_membre_ban = "";                        
                        }

$detail_numero = $numero;
$detail_date = $date; 
$detail_montant = str_replace(" ", "", $montant);
//$detail_montant = str_replace(".", "", $montant);
//$detail_montant = str_replace(",", "", $montant);
$detail_libelle = $libelle;

$code_banque_faip_togo = "MUTUAL";

if($detail_numero != '' && $detail_date != '' && $detail_libelle != '' && $detail_montant > 0 && $code_banque == "MUTUAL"){
//////////////////////////////////////////////////////////////////////////////////////////
                
        $relevebancaire2M = new Application_Model_EuRelevebancaireMapper();
        $relevebancaire2 = $relevebancaire2M->fetchAllByDateFlooz($date_id->toString('yyyy-MM-dd'), $code_banque_faip_togo);
        if(count($relevebancaire2) > 0){
        
        $relevebancaire_id = $relevebancaire2->relevebancaire_id;
        

        $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail2 = $relevebancairedetail2M->fetchAllByBanqueNumeroDate($code_banque_faip_togo, $detail_numero, $date_id->toString('yyyy-MM-dd'));
        if(count($relevebancairedetail2) > 0){
            $relevebancairedetail_id = $relevebancairedetail2->relevebancairedetail_id;

                            echo $this->view->message = "Numéro de banque déjà chargé ...";
                            $ok = 0;

        }else{
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);

            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;

            }

            }else{
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setRelevebancaire_id($compteur);
            $a->setRelevebancaire_banque($code_banque_faip_togo);
            $a->setRelevebancaire_utilisateur(1);
            $a->setRelevebancaire_fichier(NULL);
            $a->setRelevebancaire_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setPublier(1);
            $ma->save($a);
            
        
        $relevebancaire_id = $compteur;
        
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);
            
            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;
                }


$ok = Util_Utils::addBAn($code_membre_ban, $detail_numero, $detail_date, $detail_montant, $detail_libelle, $code_banque_faip_togo);





if($ok == 1){

$oldfile = $dir.$file;
$newfile = $dir2.$file;

copy($oldfile, $newfile);
unlink($oldfile);
}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);        
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}


}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);        
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}
}  
}          
        }
        closedir($dh);
    }
    }




                //$db->commit();
                    
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   //return;
               }

    }










    public function mecitogotaiAction() {

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');


     ini_set('memory_limit', '102499999999M');   

             //$db = Zend_Db_Table::getDefaultAdapter();
             //$db->beginTransaction();
        try {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);

$dir = "../../webfiles/FAIP-TOGO/TAI/";
$dir2 = "../../webfiles/FAIP-TOGO/TAI_OLD/";
$dir3 = "../../webfiles/FAIP-TOGO/TAI_ERROR/";
    //$findme = "SOUSCRIPTION_".$entry->souscription_id."_.pdf";
if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
        while (($file = readdir($dh)) !== false) {
            $nomfile = basename($file).PHP_EOL;

            $releve = $dir.$file;

                    $fichier = $releve;
/**/
$path_parts = pathinfo($fichier);
//echo $path_parts['dirname'], "\n";
//echo $path_parts['basename'], "\n";
//echo $path_parts['extension'], "\n";
///echo $path_parts['filename'], "\n"; // depuis PHP 5.2.0
list($code_banque1, $autre) = explode("_", $path_parts['filename']);
if($code_banque1 == "MECI"){




                    $lines = file($fichier);
    
                    foreach ($lines as $line_num => $line) {
                        list($code_banque, $un, $numero, $date2, $montant, $libelle) = explode(";", $line);

                        list($jour, $mois, $annee) = explode("/", $date2);
                        $date = $annee."-".$mois."-".$jour;

                        $pos1 = stripos($libelle, "#");
                        if ($pos1 !== false) {
                            $code_membre_ban = substr($libelle, ($pos1 + 1), 20);
                        }else{
                            $code_membre_ban = "";                        
                        }

$detail_numero = $numero;
$detail_date = $date; 
$detail_montant = str_replace(" ", "", $montant);
//$detail_montant = str_replace(".", "", $montant);
//$detail_montant = str_replace(",", "", $montant);
$detail_libelle = $libelle;

$code_banque_faip_togo = "MECI";

if($detail_numero != '' && $detail_date != '' && $detail_libelle != '' && $detail_montant > 0 && $code_banque == "MECI"){
//////////////////////////////////////////////////////////////////////////////////////////
                
        $relevebancaire2M = new Application_Model_EuRelevebancaireMapper();
        $relevebancaire2 = $relevebancaire2M->fetchAllByDateFlooz($date_id->toString('yyyy-MM-dd'), $code_banque_faip_togo);
        if(count($relevebancaire2) > 0){
        
        $relevebancaire_id = $relevebancaire2->relevebancaire_id;
        

        $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
        $relevebancairedetail2 = $relevebancairedetail2M->fetchAllByBanqueNumeroDate($code_banque_faip_togo, $detail_numero, $date_id->toString('yyyy-MM-dd'));
        if(count($relevebancairedetail2) > 0){
            $relevebancairedetail_id = $relevebancairedetail2->relevebancairedetail_id;

                            echo $this->view->message = "Numéro de banque déjà chargé ...";
                            $ok = 0;

        }else{
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);

            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;

            }

            }else{
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuRelevebancaire();
        $ma = new Application_Model_EuRelevebancaireMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setRelevebancaire_id($compteur);
            $a->setRelevebancaire_banque($code_banque_faip_togo);
            $a->setRelevebancaire_utilisateur(1);
            $a->setRelevebancaire_fichier(NULL);
            $a->setRelevebancaire_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setPublier(1);
            $ma->save($a);
            
        
        $relevebancaire_id = $compteur;
        
        $rb = new Application_Model_EuRelevebancairedetail();
        $mrb = new Application_Model_EuRelevebancairedetailMapper();
            
            $compteur_rbd = $mrb->findConuter() + 1;
            $rb->setRelevebancairedetail_id($compteur_rbd);
            $rb->setRelevebancairedetail_relevebancaire($relevebancaire_id);
            $rb->setRelevebancairedetail_libelle($detail_libelle);
            $rb->setRelevebancairedetail_numero($detail_numero);
            $rb->setRelevebancairedetail_date($detail_date);
            $rb->setRelevebancairedetail_montant($detail_montant);
            $rb->setRelevebancairedetail_date_valeur(NULL);
            $rb->setPublier(0);
            $mrb->save($rb);
            
            $relevebancairedetail_id = $compteur_rbd;
            $ok = 1;
                }


$ok = Util_Utils::addBAn($code_membre_ban, $detail_numero, $detail_date, $detail_montant, $detail_libelle, $code_banque_faip_togo);





if($ok == 1){

$oldfile = $dir.$file;
$newfile = $dir2.$file;

copy($oldfile, $newfile);
unlink($oldfile);
}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);        
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}


}else{


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);        
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml('Error sur relevé : '.$file.' le '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo("looky@gacsource.com");
$mail->setSubject('Error sur relevé : '.$file.' du '.$date_id->toString('dd-MM-yyyy HH:mm')); 
$mail->send($tr);


$oldfile = $dir.$file;
$new3file = $dir3.$file;

copy($oldfile, $new3file);
unlink($oldfile);

}
}  
}          
        }
        closedir($dh);
    }
    }




                //$db->commit();
                    
                    
               } catch(Exception $exc) {
                   //$db->rollback();
                   echo $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   //return;
               }

    }















    public function addpostemembreassoAction()
    {
        /* page administration/addposte - Ajout de poste */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['poste_membreasso']) && $_POST['poste_membreasso']!="" && isset($_POST['poste_tache']) && count($_POST['poste_tache']) > 0) {
        
                    for($i = 0; $i < count($_POST['poste_tache']); $i++){
                    $poste_mapper = new Application_Model_EuPosteMembreassoMapper();
                    $poste = new Application_Model_EuPosteMembreasso();
                    
                            $poste_compteur = $poste_mapper->findConuter() + 1;                 
                    
                            $poste->setPoste_id($poste_compteur)
                               ->setPoste_tache($_POST['poste_tache'][$i])
                               ->setPoste_membreasso($_POST['poste_membreasso'])
                               ;
                            $poste_mapper->save($poste);
                    }
            

        $this->_redirect('/administration/listpostemembreasso');
        } else {  $this->view->error = "Champs * obligatoire ...";  } 
        }
        
    }


    public function listpostemembreassoAction()
    {
        /* page administration/listposte - Liste de poste */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $poste = new Application_Model_EuPosteMembreassoMapper();
        $this->view->entries = $poste->fetchAll();

        $this->view->tabletri = 1;

    }



    public function supppostemembreassoAction()
    {
        /* page administration/suppposte - Suppression de poste */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $poste = new Application_Model_EuPosteMembreasso();
        $posteM = new Application_Model_EuPosteMembreassoMapper();
        $posteM->find($id, $poste);
        
        $posteM->delete($poste->poste_id);

        }

        $this->_redirect('/administration/listposte');
    }







    public function addtachemembreassoAction()
    {
        /* page administration/addtache - Ajout d'une tache */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['tache_description']) && $_POST['tache_description']!="" && isset($_POST['tache_asso']) && $_POST['tache_asso']!="" && isset($_POST['tache_type']) && $_POST['tache_type']!="" && isset($_POST['tache_libelle']) && $_POST['tache_libelle']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['tache_url']['name']) && $_FILES['tache_url']['name']!=""){
        $chemin = "taches";
        $file = $_FILES['tache_url']['name'];
        $file1='tache_url';
        $tache = $chemin."/".transfert($chemin,$file1);
        } else {$tache = "";}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuTacheMembreasso();
        $ma = new Application_Model_EuTacheMembreassoMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setTache_id($compteur);
            $a->setTache_description($_POST['tache_description']);
            $a->setTache_asso($_POST['tache_asso']);
            $a->setTache_libelle($_POST['tache_libelle']);
            $a->setTache_url($tache);
            $a->setTache_type($_POST['tache_type']);
            $a->setPublier($_POST['publier']);
            $ma->save($a);
            
        $this->_redirect('/administration/listtachemembreasso/id/'.$_POST['tache_type']);
        } else {  $this->view->error = "Champs * obligatoire ...";  } 
        }
        
    }


    public function edittachemembreassoAction()
    {
        /* page administration/edittache - Modification d'une tache */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['tache_description']) && $_POST['tache_description']!="" && isset($_POST['tache_asso']) && $_POST['tache_asso']!="" && isset($_POST['tache_type']) && $_POST['tache_type']!="" && isset($_POST['tache_libelle']) && $_POST['tache_libelle']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['tache_url']['name']) && $_FILES['tache_url']['name']!=""){
        $chemin = "taches";
        $file = $_FILES['tache_url']['name'];
        $file1='tache_url';
        $tache = $chemin."/".transfert($chemin,$file1);
        } else {$tache = $_POST['tache_url_old'];}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuTacheMembreasso();
        $ma = new Application_Model_EuTacheMembreassoMapper();
        $ma->find($_POST['tache_id'], $a);
            
            $a->setTache_description($_POST['tache_description']);
            $a->setTache_asso($_POST['tache_asso']);
            $a->setTache_libelle($_POST['tache_libelle']);
            $a->setTache_type($_POST['tache_type']);
            $a->setTache_url($tache);
            $ma->update($a);
            
        $this->_redirect('/administration/listtachemembreasso/id/'.$_POST['tache_type']);
        } else {  $this->view->error = "Champs * obligatoire ..."; 
         
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuTacheMembreasso();
        $ma = new Application_Model_EuTacheMembreassoMapper();
        $ma->find($id, $a);
        $this->view->tache = $a;
            }
    }
           
    } else {


            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuTacheMembreasso();
        $ma = new Application_Model_EuTacheMembreassoMapper();
        $ma->find($id, $a);
        $this->view->tache = $a;
            }
    }
    }




    public function listtachemembreassoAction()
    {
        /* page administration/listtache - Liste des taches */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $tache = new Application_Model_EuTacheMembreassoMapper();
        $this->view->entries = $tache->fetchAllByType($id);

        $a = new Application_Model_EuTacheType();
        $ma = new Application_Model_EuTacheTypeMapper();
        $ma->find($id, $a);
        $this->view->tache_type = $a;

}
        $this->view->tabletri = 1;

    }



    public function supptachemembreassoAction()
    {
        /* page administration/supptache - Suppression d'une tache */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $tache = new Application_Model_EuTacheMembreasso();
        $tacheM = new Application_Model_EuTacheMembreassoMapper();
        $tacheM->find($id, $tache);
        
        $tacheM->delete($tache->tache_id);
        //unlink($tache->tache_url);    

        }

        $this->_redirect('/administration/listtachemembreasso');
    }


    public function detailstachemembreassoAction() 
    {
        /* page administration/detailstache - Detail d'une tache */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $tache = new Application_Model_EuTacheMembreasso();
        $tacheM = new Application_Model_EuTacheMembreassoMapper();
        $tacheM->find($id, $tache);
        $this->view->tache = $tache;


        $a = new Application_Model_EuTacheType();
        $ma = new Application_Model_EuTacheTypeMapper();
        $ma->find($tache->tache_type, $a);
        $this->view->tache_type = $a;

            }

    }


    public function publiertachemembreassoAction()
    {
        /* page administration/publiertache - Publier une tache */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $tache = new Application_Model_EuTacheMembreasso();
        $tacheM = new Application_Model_EuTacheMembreassoMapper();
        $tacheM->find($id, $tache);
        
        $tache->setPublier($this->_request->getParam('publier'));
        $tacheM->update($tache);
        }

        $this->_redirect('/administration/listtachemembreasso/id/'.$tache->tache_type);
    }










    public function addfichiertachemembreassoAction()
    {
        /* page administration/addfichiertachemembreasso - Ajout d'un fichier */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['id_tache_membreasso']) && $_POST['id_tache_membreasso']!="" && isset($_FILES['fichier_tache_membreasso']['name']) && $_FILES['fichier_tache_membreasso']['name']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['fichier_tache_membreasso']['name']) && $_FILES['fichier_tache_membreasso']['name']!=""){
        $chemin = "fichier_taches";
        $file = $_FILES['fichier_tache_membreasso']['name'];
        $file1='fichier_tache_membreasso';
        $fichier = $chemin."/".transfert($chemin,$file1);
        } else {$fichier = "";}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFichierTacheMembreasso();
        $ma = new Application_Model_EuFichierTacheMembreassoMapper();
            
            $compteur = $ma->findConuter() + 1;
            $a->setId_fichier_tache_membreasso($compteur);
            $a->setId_tache_membreasso($_POST['id_tache_membreasso']);
            $a->setFichier_tache_membreasso($fichier);
            $a->setEtat($_POST['etat']);
            $ma->save($a);
            
        $this->_redirect('/administration/addfichiertachemembreasso');
        } else {  $this->view->error = "Champs * obligatoire ...";  } 
        }
        
    }


    public function editfichiertachemembreassoAction()
    {
        /* page administration/editfichiertachemembreasso - Modification d'un fichier */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
    if (isset($_POST['id_tache_membreasso']) && $_POST['id_tache_membreasso']!="" && isset($_FILES['fichier_tache_membreasso']['name']) && $_FILES['fichier_tache_membreasso']['name']!="") {
        
        include("Transfert.php");
        if(isset($_FILES['fichier_tache_membreasso']['name']) && $_FILES['fichier_tache_membreasso']['name']!=""){
        $chemin = "fichier_taches";
        $file = $_FILES['fichier_tache_membreasso']['name'];
        $file1='fichier_tache_membreasso';
        $fichier = $chemin."/".transfert($chemin,$file1);
        } else {$fichier = $_POST['fichier_tache_membreasso_old'];}
            
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuFichierTacheMembreasso();
        $ma = new Application_Model_EuFichierTacheMembreassoMapper();
        $ma->find($_POST['id_fichier_tache_membreasso'], $a);
            
            $a->setId_tache_membreasso($_POST['id_tache_membreasso']);
            $a->setFichier_tache_membreasso($fichier);
            //$a->setEtat($_POST['etat']);
            $ma->update($a);
            
        $this->_redirect('/administration/listfichiertachemembreasso');
        } else {  $this->view->error = "Champs * obligatoire ..."; 
         
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFichierTacheMembreasso();
        $ma = new Application_Model_EuFichierTacheMembreassoMapper();
        $ma->find($id, $a);
        $this->view->fichier_tache_membreasso = $a;
            }
    }
           
    } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuFichierTacheMembreasso();
        $ma = new Application_Model_EuFichierTacheMembreassoMapper();
        $ma->find($id, $a);
        $this->view->fichier_tache_membreasso = $a;
            }
    }
    }




    public function listfichiertachemembreassoAction()
    {
        /* page administration/listfichiertachemembreasso - Liste des fichiers */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $fichier = new Application_Model_EuFichierTacheMembreassoMapper();
        $this->view->entries = $fichier->fetchAll();

        $this->view->tabletri = 1;

    }


    



    public function etatfichiertachemembreassoAction()
    {
        /* page administration/publierfichiertachemembreasso - Publier un fichier */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $fichier = new Application_Model_EuFichierTacheMembreasso();
        $fichierM = new Application_Model_EuFichierTacheMembreassoMapper();
        $fichierM->find($id, $fichier);
        
        $fichier->setEtat($this->_request->getParam('etat'));
        $fichierM->update($fichier);
        }

        $this->_redirect('/administration/listfichiertachemembreasso/id/'.$fichier->id_tache_membreasso);
    }






    public function listbanpbfAction()
    {
        /* page administration/listfichiertachemembreasso - Liste des fichiers */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $ban = new Application_Model_EuBanMapper();
        $this->view->entries = $ban->fetchAll2();

        $this->view->tabletri = 1;

    }


    public function listbanpbfvenduAction()
    {
        /* page administration/listfichiertachemembreasso - Liste des fichiers */

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
        
    if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}

        $banvendu = new Application_Model_EuBanVenduMapper();
        $this->view->entries = $banvendu->fetchAll2();

        $this->view->tabletri = 1;

    }






	
	
	public function recherchermembreAction()   {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
		
	   if (!isset($sessionutilisateur->login)) {$this->_redirect('/administration/login');}
       if($sessionutilisateur->confirmation != ""){$this->_redirect('/administration/confirmation');}
          ini_set('memory_limit','1024M');
		
       if(isset($_POST['ok']) && $_POST['ok']=="ok")   {
	        $d_membre = new Application_Model_DbTable_EuMembre();
		    $d_membremorale = new Application_Model_DbTable_EuMembreMorale();
		  
		    if (isset($_POST['nom_membre']) && ($_POST['nom_membre']!="") && isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!=""))  {
               $nom_membre = $_POST['nom_membre'];
			   $prenom_membre = $_POST['prenom_membre'];
			   $select = $d_membre->select();
			   $select->where('nom_membre like ?', '%'.$nom_membre.'%');
			   $select->where('prenom_membre like ?', '%'.$prenom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->nom_membre = $nom_membre;
			   $this->view->prenom_membre = $prenom_membre;
			   $this->view->entries = $entries; 
			   
	        } elseif(isset($_POST['nom_membre']) && ($_POST['nom_membre']!="")) {
               $nom_membre = $_POST['nom_membre'];
			   $select = $d_membre->select();
			   $select->where('nom_membre like ?', '%'.$nom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->nom_membre = $nom_membre;
			   $this->view->entries = $entries;
          			
			} elseif(isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!="")) {
               $prenom_membre = $_POST['prenom_membre'];
			   $select = $d_membre->select();
			   $select->where('prenom_membre like ?', '%'.$prenom_membre.'%');
			   $entries = $d_membre->fetchAll($select);
			   $this->view->prenom_membre = $prenom_membre;
			   $this->view->entries = $entries;		
			}
			elseif(isset($_POST['raison_sociale']) && ($_POST['raison_sociale']!="")) {
			   $raison_sociale = $_POST['raison_sociale'];
               $select = $d_membremorale->select();
			   $select->where('raison_sociale like ?', '%'.$raison_sociale.'%');
               $results = $d_membremorale->fetchAll($select);
               $this->view->raison_sociale = $raison_sociale;
               $this->view->results = $results;	
			   
			} elseif(isset($_POST['code_membre']) && ($_POST['code_membre']!="")) {
			   $code_membre = $_POST['code_membre'];
               if(substr($code_membre,19,1) == 'P') {
			     $select = $d_membre->select();
			     $select->where('code_membre like ?', '%'.$code_membre.'%');
			     $entries = $d_membre->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->entries = $entries;
               } else {
                 $select = $d_membremorale->select();
			     $select->where('code_membre_morale like ?', '%'.$code_membre.'%');
			     $results = $d_membremorale->fetchAll($select);
			     $this->view->code_membre = $code_membre;
			     $this->view->results = $results;
               }				
			}
       }	   
       $this->view->tabletri = 1;		      
	}
	
	



}


