<?php

class IntegrateurController extends Zend_Controller_Action {

    public function init() {
      /* Initialize action controller here */
      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
      $codesecret = "";
      while(strlen($codesecret) != 8) {
        $codesecret .= $liste[rand(0,strlen($liste)-1)];
      }
      $this->view->codesecret = $codesecret;
    
      /*if (!isset($sessionmembreasso->association_code_membre)) {
        Zend_Session::destroy(true);
        $this->_redirect('/integrateur/login');
      }*/
  
    }
  
  
    public function codetelephoniqueAction() {
        $this->_helper->layout->disableLayout();
        $id_pays = $_GET["id_pays"];
        if ($id_pays != '') {
            $tpays = new Application_Model_DbTable_EuPays();
            $result = $tpays->find($id_pays);
            if (count($result) > 0) {
               $data = $result->current()->code_telephonique;
            }
        }
        $this->view->data = $data;
    }
	
	
	
    public  function montantAction()  {
        $this->_helper->layout->disableLayout();
		$integrateur_type = $_GET["integrateur_type"];
		$typeintegrateur = new Application_Model_EuTypeIntegrateur();
        $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
		$m_typeintegrateur->find($integrateur_type,$typeintegrateur);

		$data = $typeintegrateur->montant_param;
		$this->view->data = $data;
	}
	
	
	public  function  montantbcAction()  {
	   $this->_helper->layout->disableLayout();
	   $integrateur_type = $_GET["integrateur_type"];
	   $msbct = floor(Util_Utils::getParametre('MSBCT','valeur'));
		
	   $this->view->data = $msbct;
	}
	
	
	
	
	
	public  function montant1Action()  {
        $this->_helper->layout->disableLayout();
		$integrateur_type = $_GET["integrateur_type"];
		$typeintegrateur = new Application_Model_EuTypeOffreurProjet();
        $m_typeintegrateur = new Application_Model_EuTypeOffreurProjetMapper();
		$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
		
		$data = $typeintegrateur->montant_param;
		$this->view->data = $data;
		
	}


    public function candidatAction()  {
		$integrateur_type = $_GET["integrateur_type"];
		$results = "";
		$ttype_candidat = new Application_Model_EuTypeCandidatMapper();
		if(($integrateur_type == 21)) {
		    $results = $ttype_candidat->fetchByIntegrateur12();
		} elseif(($integrateur_type == 23)) {
            $results = $ttype_candidat->fetchByIntegrateur8();
        } elseif(($integrateur_type == 24)) {
		    $results = $ttype_candidat->fetchByIntegrateur13();
		} elseif(($integrateur_type == 15)) {
		    $results = $ttype_candidat->fetchByIntegrateur2();
		} elseif(($integrateur_type == 16) ) {
		    $results = $ttype_candidat->fetchByIntegrateur3();
		} elseif(($integrateur_type == 17) ) {
		    $results = $ttype_candidat->fetchByIntegrateur4();
		} elseif(($integrateur_type == 18) ) {
		    $results = $ttype_candidat->fetchByIntegrateur5();
		} elseif(($integrateur_type == 22) ) {
		    $results = $ttype_candidat->fetchByIntegrateur1();
		} elseif(($integrateur_type == 29) ) {
		    $results = $ttype_candidat->fetchByIntegrateur10();
		} elseif(($integrateur_type == 30) ) {
		    $results = $ttype_candidat->fetchByIntegrateur11();
		} else if(($integrateur_type == 1) || ($integrateur_type == 2) || ($integrateur_type == 3) 
		    || ($integrateur_type == 4) || ($integrateur_type == 5) || ($integrateur_type == 6)
	        || ($integrateur_type == 7) || ($integrateur_type == 8) || ($integrateur_type == 25)
		    || ($integrateur_type == 26) || ($integrateur_type == 27) || ($integrateur_type == 28)) {
				 
		    $results = $ttype_candidat->fetchByIntegrateur9();
		}
		elseif(($integrateur_type == 19) || ($integrateur_type == 20)) {	 
		    $results = $ttype_candidat->fetchByIntegrateur9();
		}
        $data = array();
	    if(count($results) > 0) {
            for($i = 0; $i < count($results); $i++) {
                $value = $results[$i];
                $data[$i][0] = $value->id_type_candidat;
                $data[$i][1] = $value->libelle_type_candidat;
            }
	    } else {
            $data = "";
        }	  
        $this->view->data = $data; 		
	}


    public function codetegcAction() {
      $code_membre = $_GET["code_membre"];
      $t_tab = new Application_Model_DbTable_EuTegc();
      $select = $t_tab->select();
	  if(substr($code_membre,19,1) == "M") {
	    $select->where('code_membre like ?', $code_membre);
	  } else {
	    $select->where('code_membre_physique like ?', $code_membre);
	  }
	  $select->where('nom_tegc is not null');
	  $select->order('nom_tegc asc');
	  $rows = $t_tab->fetchAll($select);
	  
	  $data = array();
	  if(count($rows) > 0) {
        for($i = 0; $i < count($rows); $i++) {
           $value = $rows[$i];
           $data[$i][0] = $value->code_tegc;
           $data[$i][1] = $value->nom_tegc;
        }
	  }	else {
         $data = "";
      }	  
      $this->view->data = $data;
   }


   public  function listbanqueAction() {
      $id_pays  = $_GET["id_pays"];
      $t_banque = new Application_Model_DbTable_EuBanque();
	  $select = $t_banque->select();
	  $select->where('id_pays like ?', $id_pays);
	  $select->order('libelle_banque asc');
	  $rows = $t_banque->fetchAll($select);
	  $data = array();
        for($i = 0; $i < count($rows); $i++) {
         $value = $rows[$i];
         $data[$i][0] = $value->code_banque;
         $data[$i][1] = $value->libelle_banque;
      }
      $this->view->data = $data;
    }
	

	
	public function secureloginAction()  {
	   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	   $this->_helper->layout->disableLayout();
	   include("Transfert.php");
       $date_id = new Zend_Date(Zend_Date::ISO_8601);
		
	   if(isset($_POST['ok']) && $_POST['ok']=="ok") {
	      if(isset($_POST['login']) && $_POST['login']!="" && isset($_POST['pwd']) && $_POST['pwd']!="") {
            
	        $eumembreasso = new Application_Model_DbTable_EuMembreasso();
	        $select = $eumembreasso->select()->where('membreasso_login = ?', $_POST['login'])
						  	                 ->where('membreasso_passe = ?', $_POST['pwd'])
							                 ->where('publier = ?', 1)
                                             ->where('membreasso_association IN (SELECT association_id FROM eu_association WHERE publier = 1)');
	        if($rowseumembreasso = $eumembreasso->fetchRow($select)) {
                if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
	               if($rowseumembreasso->membreasso_association == "1" || ($rowseumembreasso->local == 1) || (Util_Utils::getParamEsmc(24) == 1)) {
				      $sessionmembreasso->membreasso_id = $rowseumembreasso->membreasso_id;
				      $sessionmembreasso->membreasso_nom = $rowseumembreasso->membreasso_nom;
				      $sessionmembreasso->membreasso_prenom = $rowseumembreasso->membreasso_prenom;
				      $sessionmembreasso->membreasso_mobile = $rowseumembreasso->membreasso_mobile;
				      $sessionmembreasso->membreasso_association = $rowseumembreasso->membreasso_association;
				      $sessionmembreasso->membreasso_email = $rowseumembreasso->membreasso_email;
					 // $sessionmembreasso->login = $rowseumembreasso->membreasso_login;
					 
				      $sessionmembreasso->membreasso_passe = $rowseumembreasso->membreasso_passe;
				      $sessionmembreasso->membreasso_type = $rowseumembreasso->membreasso_type;
				      $sessionmembreasso->membreasso_date = $rowseumembreasso->membreasso_date;
				      $sessionmembreasso->publier = $rowseumembreasso->publier;
				      $sessionmembreasso->appro = $rowseumembreasso->appro;
				      $sessionmembreasso->souscription_id = $rowseumembreasso->souscription_id;
                      if($rowseumembreasso->code_membre != "" && $rowseumembreasso->code_membre != NULL) {
                         $sessionmembreasso->code_membre = $rowseumembreasso->code_membre;

							$utilisateur_map  = new Application_Model_EuUtilisateurMapper();
					        $utilisateur = $utilisateur_map->findUserLoginCodeGroupe($rowseumembreasso->code_membre, $rowseumembreasso->code_membre, "personne_physique");
				         if($utilisateur->login == $rowseumembreasso->code_membre)  {
				      $sessionmembreasso->id_utilisateur = $utilisateur->id_utilisateur;
				         }
						 
						 if(substr($rowseumembreasso->code_membre,19,1) == 'P')  {
							$membre = new Application_Model_EuMembre();
                            $m_map  = new Application_Model_EuMembreMapper();
					        $findmembre = $m_map->find($rowseumembreasso->code_membre,$membre);
				         } else {
							$membre = new Application_Model_EuMembreMorale();
                            $m_map  = new Application_Model_EuMembreMoraleMapper();
				            $findmembre = $m_map->find($rowseumembreasso->code_membre,$membre);
				         }
						 
						 $sessionmembreasso->desactiver = $membre->desactiver;
						 
						 if($membre->desactiver == 0) {
						      $os = Util_Utils::getOS();
                              $infos =  Util_Utils::detecterSysteme();
                              $texte_confirmation = "Confirmez vous la Tentative de connection à votre compte d'intégration ESMC depuis un navigateur ".$infos['browser']." sous ".$os." ?";

                              $table = new Application_Model_DbTable_EuConfirmation();
                              $entryObject = new Application_Model_EuConfirmation();
                              $mapper = new Application_Model_EuConfirmationMapper();

                              $db = Zend_Db_Table::getDefaultAdapter();
						 
						      $entryObject->setType_confirmation("2")
									 ->setCode_operateur("")
									 ->setCode_operateur($rowseumembreasso->membreasso_login)
                                    // ->setNom_operateur("")
                                     ->setData_text($texte_confirmation)
                                     ->setData_json("")
                                     ->setActivite("https://esmcgie.com/integrateur/securelogin")
                                     ->setStatus("1")
                                     ->setDate_creation(time())
                                     ->setDate_confirmation("")
                                     ->setTexte_confirmation($texte_confirmation)
                                     ->setPage("integrateur/securelogin")
                                     ->setCode_sms("")
                                     ->setNom_appareil("")
                                     ->setImei_appareil("")
                                     ->setNumero_appareil("")
                                     ->setMac_appareil("")
                                     ->setIp_appareil("")
                                     ->setCode_membre($sessionmembreasso->code_membre);
                          $mapper->save($entryObject);
						  
						  // echo "nouvelle insertion".$db->lastInsertId();
                          $numero_insertion = $db->lastInsertId();

                          $sessionmembreasso->numero_confirmation = $numero_insertion;

                          Util_Utils::envoiNotificationAdministrationBiometrique(""+$numero_insertion,$sessionmembreasso->code_membre,"Intégration ESMC",$texte_confirmation ,"");
						  
					  } else {
                            $sessionmembreasso->errorlogin = "Veuillez procéder à la nouvelle activation de votre compte marchand ...";
							$this->_redirect('/integrateur/login');
					  } 
                      } else {
                         $sessionmembreasso->errorlogin = "Veuillez mettre à jour votre Code Membre ...";
                         $this->_redirect('/integrateur/editmembreassomembre');
                      }

                      $association = new Application_Model_EuAssociation();
                      $m_association = new Application_Model_EuAssociationMapper();
                      $m_association->find($rowseumembreasso->membreasso_association, $association);
                      $sessionmembreasso->association_code_membre = $association->code_membre;
                   
                      $sessionmembreasso->guichet = $association->guichet;
				      $sessionmembreasso->errorlogin = "";
					  //$this->_redirect('/integrateur');
                      

		            } else {
			               $sessionmembreasso->errorlogin = "Erreur de connexion N° 147 : Veuillez contacter le Service Technique ...";
                           $this->_redirect('/integrateur/login');
			        }/**/

	           } else  {
				    $sessionmembreasso->membreasso_id = $rowseumembreasso->membreasso_id;
				    $sessionmembreasso->membreasso_nom = $rowseumembreasso->membreasso_nom;
				    $sessionmembreasso->membreasso_prenom = $rowseumembreasso->membreasso_prenom;
				    $sessionmembreasso->membreasso_mobile = $rowseumembreasso->membreasso_mobile;
				    $sessionmembreasso->membreasso_association = $rowseumembreasso->membreasso_association;
				    $sessionmembreasso->membreasso_email = $rowseumembreasso->membreasso_email;
				   // $sessionmembreasso->login = $rowseumembreasso->membreasso_login;
				    $sessionmembreasso->membreasso_passe = $rowseumembreasso->membreasso_passe;
				    $sessionmembreasso->membreasso_type = $rowseumembreasso->membreasso_type;
				    $sessionmembreasso->membreasso_date = $rowseumembreasso->membreasso_date;
				    $sessionmembreasso->publier = $rowseumembreasso->publier;
				    $sessionmembreasso->appro = $rowseumembreasso->appro;

                    if($rowseumembreasso->code_membre != "" && $rowseumembreasso->code_membre != NULL) {
                         $sessionmembreasso->code_membre = $rowseumembreasso->code_membre;

							$utilisateur_map  = new Application_Model_EuUtilisateurMapper();
					        $utilisateur = $utilisateur_map->findUserLoginCodeGroupe($rowseumembreasso->code_membre, $rowseumembreasso->code_membre, "personne_morale");
				         if($utilisateur->login == $rowseumembreasso->code_membre)  {
				      $sessionmembreasso->id_utilisateur = $utilisateur->id_utilisateur;
				         }


						 
						 if(substr($rowseumembreasso->code_membre,19,1) == 'P')  {
							$membre = new Application_Model_EuMembre();
                            $m_map  = new Application_Model_EuMembreMapper();
					        $findmembre = $m_map->find($rowseumembreasso->code_membre,$membre);
				         } else {
							$membre = new Application_Model_EuMembreMorale();
                            $m_map  = new Application_Model_EuMembreMoraleMapper();
				            $findmembre = $m_map->find($rowseumembreasso->code_membre,$membre);
				         }
						 $sessionmembreasso->desactiver = $membre->desactiver;
						 
						 if($membre->desactiver == 0) {
						 
					        $os = Util_Utils::getOS();
                            $infos =  Util_Utils::detecterSysteme();
                            $texte_confirmation = "Confirmez vous la Tentative de connection à votre compte d'intégration ESMC depuis un navigateur ".$infos['browser']." sous ".$os." ?";

                            $table = new Application_Model_DbTable_EuConfirmation();
                            $entryObject = new Application_Model_EuConfirmation();
                            $mapper = new Application_Model_EuConfirmationMapper();

                            $db = Zend_Db_Table::getDefaultAdapter();
						 
						    $entryObject->setType_confirmation("2")
									 ->setCode_operateur($rowseumembreasso->membreasso_login)
									// ->setCode_operateur("")
                                     ->setNom_operateur("")
                                     ->setData_text($texte_confirmation)
                                     ->setData_json("")
                                     ->setActivite("https://esmcgie.com/integrateur/securelogin")
                                     ->setStatus("1")
                                     ->setDate_creation(time())
                                     ->setDate_confirmation("")
                                     ->setTexte_confirmation($texte_confirmation)
                                     ->setPage("integrateur/securelogin")
                                     ->setCode_sms("")
                                     ->setNom_appareil("")
                                     ->setImei_appareil("")
                                     ->setNumero_appareil("")
                                     ->setMac_appareil("")
                                     ->setIp_appareil("")
                                     ->setCode_membre($sessionmembreasso->code_membre);
                            $mapper->save($entryObject);
						  
						    //echo "nouvelle insertion".$db->lastInsertId();
                            $numero_insertion = $db->lastInsertId();

                          $sessionmembreasso->numero_confirmation = $numero_insertion;

                          Util_Utils::envoiNotificationAdministrationBiometrique(""+$numero_insertion,$sessionmembreasso->code_membre,"Intégration ESMC",$texte_confirmation ,"");
					   
					   } else {
                            $sessionmembreasso->errorlogin = "Veuillez procéder à la nouvelle activation de votre compte marchand ...";
							$this->_redirect('/integrateur/login');
					   }   
						  
                    } else {
                       $sessionmembreasso->errorlogin = "Veuillez mettre à jour votre Code Membre ...";
                       $this->_redirect('/integrateur/editmembreassomembre');                    
                    }

                    
                    $association = new Application_Model_EuAssociation();
                    $m_association = new Application_Model_EuAssociationMapper();
                    $m_association->find($rowseumembreasso->membreasso_association, $association);
                    $sessionmembreasso->association_code_membre = $association->code_membre;
                   
                    $sessionmembreasso->guichet = $association->guichet;
				    $sessionmembreasso->errorlogin = "";
					//$this->_redirect('/integrateur');
                    
		       }
			   
	           } else { $sessionmembreasso->errorlogin = "Login ou Mot de Passe Erroné"; }
                      $this->_redirect('/integrateur/login');
	           } else { $sessionmembreasso->errorlogin = "Saisir Login et Mot de Passe"; }
                      $this->_redirect('/integrateur/login');
	           }
		
	}
	


  
    public function loginAction() {
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
		include("Transfert.php");
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
		
		$this->_redirect('/integrateur/securelogin');

        //include("automatisation.php");
        //releve_relevedetail();
        //transfert_code();
         //codegenerer(93);
         //validation_automatique(93);
         //dotransfertAction(100);
         //transfertNumeroSouscription();

         /*
	      if(isset($_POST['ok']) && $_POST['ok']=="ok") {
	      if(isset($_POST['login']) && $_POST['login']!="" && isset($_POST['pwd']) && $_POST['pwd']!="") {

	         $eumembreasso = new Application_Model_DbTable_EuMembreasso();
	         $select = $eumembreasso->select()->where('membreasso_login = ?', $_POST['login'])
						  	                  ->where('membreasso_passe = ?', $_POST['pwd'])
							                  ->where('publier = ?', 1)
                                              ->where('membreasso_association IN (SELECT association_id FROM eu_association WHERE publier = 1)');
	         if($rowseumembreasso = $eumembreasso->fetchRow($select)) {
                if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
	               if($rowseumembreasso->membreasso_association == "1" || $rowseumembreasso->local == 1) {
				      $sessionmembreasso->membreasso_id = $rowseumembreasso->membreasso_id;
				      $sessionmembreasso->membreasso_nom = $rowseumembreasso->membreasso_nom;
				      $sessionmembreasso->membreasso_prenom = $rowseumembreasso->membreasso_prenom;
				      $sessionmembreasso->membreasso_mobile = $rowseumembreasso->membreasso_mobile;
				      $sessionmembreasso->membreasso_association = $rowseumembreasso->membreasso_association;
				      $sessionmembreasso->membreasso_email = $rowseumembreasso->membreasso_email;
				      $sessionmembreasso->login = $rowseumembreasso->membreasso_login;
				      $sessionmembreasso->membreasso_passe = $rowseumembreasso->membreasso_passe;
				      $sessionmembreasso->membreasso_type = $rowseumembreasso->membreasso_type;
				      $sessionmembreasso->membreasso_date = $rowseumembreasso->membreasso_date;
				      $sessionmembreasso->publier = $rowseumembreasso->publier;
				      $sessionmembreasso->appro = $rowseumembreasso->appro;
				      $sessionmembreasso->souscription_id = $rowseumembreasso->souscription_id;
                      if($rowseumembreasso->code_membre != "" && $rowseumembreasso->code_membre != NULL) {
                         $sessionmembreasso->code_membre = $rowseumembreasso->code_membre;
                      } else {
                         $sessionmembreasso->errorlogin = "Veuillez mettre à jour votre Code Membre ...";
                         $this->_redirect('/integrateur/editmembreassomembre');                    
                      }

                      $association = new Application_Model_EuAssociation();
                      $m_association = new Application_Model_EuAssociationMapper();
                      $m_association->find($rowseumembreasso->membreasso_association, $association);
                      $sessionmembreasso->association_code_membre = $association->code_membre;
                   
                      $sessionmembreasso->guichet = $association->guichet;
				      $sessionmembreasso->errorlogin = "";
                      $this->_redirect('/integrateur');

		            } else {
			               $sessionmembreasso->errorlogin = "Erreur de connexion N° 147 : Veuillez contacter le Service Technique ...";
                           $this->_redirect('/integrateur/login');
			        }

	           } else {
				    $sessionmembreasso->membreasso_id = $rowseumembreasso->membreasso_id;
				    $sessionmembreasso->membreasso_nom = $rowseumembreasso->membreasso_nom;
				    $sessionmembreasso->membreasso_prenom = $rowseumembreasso->membreasso_prenom;
				    $sessionmembreasso->membreasso_mobile = $rowseumembreasso->membreasso_mobile;
				    $sessionmembreasso->membreasso_association = $rowseumembreasso->membreasso_association;
				    $sessionmembreasso->membreasso_email = $rowseumembreasso->membreasso_email;
				    $sessionmembreasso->login = $rowseumembreasso->membreasso_login;
				    $sessionmembreasso->membreasso_passe = $rowseumembreasso->membreasso_passe;
				    $sessionmembreasso->membreasso_type = $rowseumembreasso->membreasso_type;
				    $sessionmembreasso->membreasso_date = $rowseumembreasso->membreasso_date;
				    $sessionmembreasso->publier = $rowseumembreasso->publier;
				    $sessionmembreasso->appro = $rowseumembreasso->appro;

                    if($rowseumembreasso->code_membre != "" && $rowseumembreasso->code_membre != NULL){
                       $sessionmembreasso->code_membre = $rowseumembreasso->code_membre;
                    } else {
                       $sessionmembreasso->errorlogin = "Veuillez mettre à jour votre Code Membre ...";
                       $this->_redirect('/integrateur/editmembreassomembre');                    
                    }

                    $association = new Application_Model_EuAssociation();
                    $m_association = new Application_Model_EuAssociationMapper();
                    $m_association->find($rowseumembreasso->membreasso_association, $association);
                    $sessionmembreasso->association_code_membre = $association->code_membre;
                   
                    $sessionmembreasso->guichet = $association->guichet;
				    $sessionmembreasso->errorlogin = "";
                    $this->_redirect('/integrateur');
		       }
	           } else { $sessionmembreasso->errorlogin = "Login ou Mot de Passe Erroné"; }
                      $this->_redirect('/integrateur/login');
	           } else { $sessionmembreasso->errorlogin = "Saisir Login et Mot de Passe"; }
                      $this->_redirect('/integrateur/login');
	           }
			   
			   */

    }




    public function login2Action() {
      $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');
    include("Transfert.php");
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        //include("automatisation.php");
        //releve_relevedetail();
        //transfert_code();
         //codegenerer(93);
         //validation_automatique(93);
         //dotransfertAction(100);
         //transfertNumeroSouscription();


        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['login']) && $_POST['login']!="" && isset($_POST['pwd']) && $_POST['pwd']!="") {

                 $eumembreasso = new Application_Model_DbTable_EuMembreasso();
                 $select = $eumembreasso->select()->where('membreasso_login = ?', $_POST['login'])
                              ->where('membreasso_passe = ?', $_POST['pwd'])
                            ->where('publier = ?', 1)
                            ->where('membreasso_association IN (SELECT association_id FROM eu_association WHERE publier = 1)');
                 if ($rowseumembreasso = $eumembreasso->fetchRow($select)) {

                   if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
                      //if($_SERVER['SERVER_ADDR'] == "172.16.20.6"){
                    //if($rowseumembreasso->membreasso_association == "1" || $rowseumembreasso->local == 1) {
                   $sessionmembreasso->membreasso_id = $rowseumembreasso->membreasso_id;
                   $sessionmembreasso->membreasso_nom = $rowseumembreasso->membreasso_nom;
                   $sessionmembreasso->membreasso_prenom = $rowseumembreasso->membreasso_prenom;
                   $sessionmembreasso->membreasso_mobile = $rowseumembreasso->membreasso_mobile;
                   $sessionmembreasso->membreasso_association = $rowseumembreasso->membreasso_association;
                   $sessionmembreasso->membreasso_email = $rowseumembreasso->membreasso_email;
                   $sessionmembreasso->login = $rowseumembreasso->membreasso_login;
                   $sessionmembreasso->membreasso_passe = $rowseumembreasso->membreasso_passe;
                   $sessionmembreasso->membreasso_type = $rowseumembreasso->membreasso_type;
                   $sessionmembreasso->membreasso_date = $rowseumembreasso->membreasso_date;
                   $sessionmembreasso->publier = $rowseumembreasso->publier;
				   $sessionmembreasso->appro = $rowseumembreasso->appro;
                   $sessionmembreasso->souscription_id = $rowseumembreasso->souscription_id;
if($rowseumembreasso->code_membre != "" && $rowseumembreasso->code_membre != NULL){
$sessionmembreasso->code_membre = $rowseumembreasso->code_membre;

}else{
  $sessionmembreasso->errorlogin = "Veuillez mettre à jour votre Code Membre ...";
                           $this->_redirect('/integrateur/editmembreassomembre');                    
}

$association = new Application_Model_EuAssociation();
$m_association = new Application_Model_EuAssociationMapper();
$m_association->find($rowseumembreasso->membreasso_association, $association);
$sessionmembreasso->association_code_membre = $association->code_membre;
                   
                   $sessionmembreasso->guichet = $association->guichet;
                   $sessionmembreasso->errorlogin = "";
                           $this->_redirect('/integrateur');

                  /*} else {
                     $sessionmembreasso->errorlogin = "Erreur de connexion N° 147 : Veuillez contacter le Service Technique ...";
                           $this->_redirect('/integrateur/login2');
                }*/

             } else {
              $sessionmembreasso->membreasso_id = $rowseumembreasso->membreasso_id;
              $sessionmembreasso->membreasso_nom = $rowseumembreasso->membreasso_nom;
              $sessionmembreasso->membreasso_prenom = $rowseumembreasso->membreasso_prenom;
              $sessionmembreasso->membreasso_mobile = $rowseumembreasso->membreasso_mobile;
              $sessionmembreasso->membreasso_association = $rowseumembreasso->membreasso_association;
              $sessionmembreasso->membreasso_email = $rowseumembreasso->membreasso_email;
              $sessionmembreasso->login = $rowseumembreasso->membreasso_login;
              $sessionmembreasso->membreasso_passe = $rowseumembreasso->membreasso_passe;
              $sessionmembreasso->membreasso_type = $rowseumembreasso->membreasso_type;
              $sessionmembreasso->membreasso_date = $rowseumembreasso->membreasso_date;
              $sessionmembreasso->publier = $rowseumembreasso->publier;
			  $sessionmembreasso->appro = $rowseumembreasso->appro;

if($rowseumembreasso->code_membre != "" && $rowseumembreasso->code_membre != NULL){
$sessionmembreasso->code_membre = $rowseumembreasso->code_membre;

}else{
  $sessionmembreasso->errorlogin = "Veuillez mettre à jour votre Code Membre ...";
                           $this->_redirect('/integrateur/editmembreassomembre');                    
}

$association = new Application_Model_EuAssociation();
$m_association = new Application_Model_EuAssociationMapper();
$m_association->find($rowseumembreasso->membreasso_association, $association);
$sessionmembreasso->association_code_membre = $association->code_membre;
                   
                   $sessionmembreasso->guichet = $association->guichet;
              $sessionmembreasso->errorlogin = "";
                      $this->_redirect('/integrateur');
           }
             } else { $sessionmembreasso->errorlogin = "Login ou Mot de Passe Erroné"; }
                      $this->_redirect('/integrateur/login2');
             } else { $sessionmembreasso->errorlogin = "Saisir Login et Mot de Passe"; }
                      $this->_redirect('/integrateur/login2');
             }

    }



    public function passwordAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
            if (isset($_POST['ancien']) && $_POST['ancien'] != "" && isset($_POST['nouveau']) && $_POST['nouveau'] != "" && isset($_POST['confirmer']) && $_POST['confirmer'] == $_POST['nouveau']) {

                    $eumembreasso = new Application_Model_DbTable_EuMembreasso();
                    $select = $eumembreasso->select()->where('membreasso_login = ?', $sessionmembreasso->login);
                    $select->where('membreasso_passe = ?', $_POST['ancien']);
                    if ($rowseumembreasso = $eumembreasso->fetchRow($select)) {
                        $mapper = new Application_Model_EuMembreassoMapper();
                        $membreasso = new Application_Model_EuMembreasso();
                        $mapper->find($sessionmembreasso->membreasso_id, $membreasso);
                        $membreasso->setMembreasso_passe($_POST['nouveau']);
                        $mapper->update($membreasso);
                        $this->view->error = "Modification effectuée";
                    }
            } else {
                $this->view->error = "Saisir tous les champs";
            }
            //$this->_redirect('/integrateur/membreasso');
        }
    }

    function nocompteAction() {
	    Zend_Session::destroy(true);
        //$this->_redirect('/integrateur/login');
		$this->_redirect('/integrateur/securelogin');
    }
	
	function logoutAction() {
	    Zend_Session::destroy(true);
        $this->_redirect('/integrateur/securelogin');
    }




    public function indexAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
		
		//$this->_redirect('/integrateur/logout');

	    //if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		
		if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/securelogin');}
		
        if($sessionmembreasso->guichet == 1) {   
            if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL || substr($sessionmembreasso->code_membre, -1, 1) != 'P') {
                  $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
        }

        if($sessionmembreasso->membreasso_type == 1) {        
            if(!isset($sessionmembreasso->association_code_membre) || $sessionmembreasso->association_code_membre == "" || $sessionmembreasso->association_code_membre == NULL || substr($sessionmembreasso->association_code_membre, -1, 1) != 'M') {
                  $sessionmembreasso->error = "Veuillez mettre à jour votre <strong>Code Membre Personne Morale</strong> du guichet. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editassociationmembre');
                  return;
            }
        } else {
            if(!isset($sessionmembreasso->association_code_membre) || $sessionmembreasso->association_code_membre == "" || $sessionmembreasso->association_code_membre == NULL || substr($sessionmembreasso->association_code_membre, -1, 1) != 'M') {
                  $sessionmembreasso->error = "Veuillez dire à votre responsable de guichet de mettre à jour le <strong>Code Membre Morale</strong> du guichet. Il n'est pas renseigné ou n'est pas correct.";
                  //$this->_redirect('/integrateur/editassociationmembre');
                  return;
            }

        }
        }
		

    }



    public function addmembreassoAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	       if (isset($_POST['membreasso_mobile']) && $_POST['membreasso_mobile']!="" && isset($_POST['membreasso_nom']) && $_POST['membreasso_nom']!="" && isset($_POST['membreasso_prenom']) && $_POST['membreasso_prenom']!="" && isset($_POST['membreasso_login']) && $_POST['membreasso_login']!="" && isset($_POST['membreasso_passe']) && $_POST['membreasso_passe']==$_POST['membreasso_passe2']) {
	       $eumembreasso = new Application_Model_DbTable_EuMembreasso();
	       $select = $eumembreasso->select()->where('membreasso_login = ?', $_POST['membreasso_login']);
	       if ($rowseumembreasso = $eumembreasso->fetchRow($select)) {
              $this->view->error = "Login déjà existant ...";
	       } else {
              $date_id = Zend_Date::now();

              $membreasso = new Application_Model_EuMembreasso();
              $membreasso_mapper = new Application_Model_EuMembreassoMapper();

              $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
              $membreasso->setMembreasso_id($compteur_membreasso);
              $membreasso->setMembreasso_mobile($_POST['membreasso_mobile']);
              $membreasso->setMembreasso_nom($_POST['membreasso_nom']);
              $membreasso->setMembreasso_prenom($_POST['membreasso_prenom']);
              $membreasso->setMembreasso_association($sessionmembreasso->membreasso_association);
              $membreasso->setMembreasso_email($_POST['membreasso_email']);
              $membreasso->setMembreasso_login($_POST['membreasso_login']);
              $membreasso->setMembreasso_passe($_POST['membreasso_passe']);
              $membreasso->setMembreasso_type($_POST['membreasso_type']);
              $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
              $membreasso->setLocal(0);
              $membreasso->setPublier(0);
              $membreasso->setCode_membre($_POST['code_membre']);
              $membreasso_mapper->save($membreasso);

		      $this->_redirect('/integrateur/listmembreasso');
	      }
		} else {  $this->view->error = "Champs * obligatoire ..."; }
	  }

	}



    public function editmembreassoAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['membreasso_mobile']) && $_POST['membreasso_mobile']!="" && isset($_POST['membreasso_nom']) && $_POST['membreasso_nom']!="" && isset($_POST['membreasso_prenom']) && $_POST['membreasso_prenom']!="") {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($_POST['membreasso_id'], $membreasso);

            $membreasso->setMembreasso_mobile($_POST['membreasso_mobile']);
            $membreasso->setMembreasso_nom($_POST['membreasso_nom']);
            $membreasso->setMembreasso_prenom($_POST['membreasso_prenom']);
            $membreasso->setMembreasso_email($_POST['membreasso_email']);
            //$membreasso->setMembreasso_login($_POST['membreasso_login']);
            $membreasso->setCode_membre($_POST['code_membre']);
            $m_membreasso->update($membreasso);

		    $this->_redirect('/integrateur/listmembreasso');
		} else {
		    $this->view->error = "Champs * obligatoire ...";
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
               $a = new Application_Model_EuMembreasso();
               $ma = new Application_Model_EuMembreassoMapper();
		       $ma->find($id, $a);
		       $this->view->membreasso = $a;
            }
	   }

	} else {
          $id = (int)$this->_request->getParam('id');
          if ($id != 0) {
             $a = new Application_Model_EuMembreasso();
             $ma = new Application_Model_EuMembreassoMapper();
		    $ma->find($id, $a);
		     $this->view->membreasso = $a;
         }
	}
	}


    public function editmembreasso2Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['membreasso_mobile']) && $_POST['membreasso_mobile']!="" && isset($_POST['membreasso_nom']) && $_POST['membreasso_nom']!="" && isset($_POST['membreasso_prenom']) && $_POST['membreasso_prenom']!="") {

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

            $membreasso->setMembreasso_mobile($_POST['membreasso_mobile']);
            $membreasso->setMembreasso_nom($_POST['membreasso_nom']);
            $membreasso->setMembreasso_prenom($_POST['membreasso_prenom']);
            $membreasso->setMembreasso_email($_POST['membreasso_email']);
            //$membreasso->setMembreasso_login($_POST['membreasso_login']);
            $membreasso->setCode_membre($_POST['code_membre']);
            $m_membreasso->update($membreasso);

        $this->_redirect('/integrateur');
    } else {
        $this->view->error = "Champs * obligatoire ...";
            $id = $sessionmembreasso->membreasso_id;
            if ($id != 0) {
               $a = new Application_Model_EuMembreasso();
               $ma = new Application_Model_EuMembreassoMapper();
           $ma->find($id, $a);
           $this->view->membreasso = $a;
            }
     }

  } else {
          $id = $sessionmembreasso->membreasso_id;
          if ($id != 0) {
             $a = new Application_Model_EuMembreasso();
             $ma = new Application_Model_EuMembreassoMapper();
        $ma->find($id, $a);
         $this->view->membreasso = $a;
         }
  }
  }




    public function listmembreassoAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $membreasso = new Application_Model_EuMembreassoMapper();
        $this->view->entries = $membreasso->fetchAllByMembreasso($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;

    }

    public function publiermembreassoAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {
          $membreasso = new Application_Model_EuMembreasso();
          $membreassoM = new Application_Model_EuMembreassoMapper();
          $membreassoM->find($id, $membreasso);

          $membreasso->setPublier($this->_request->getParam('publier'));
		  $membreassoM->update($membreasso);
        }

		$this->_redirect('/integrateur/listmembreasso');
    }


    public function appromembreassoAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {
          $membreasso = new Application_Model_EuMembreasso();
          $membreassoM = new Application_Model_EuMembreassoMapper();
          $membreassoM->find($id, $membreasso);

          $membreasso->setAppro($this->_request->getParam('appro'));
		  $membreassoM->update($membreasso);
        }

		$this->_redirect('/integrateur/listmembreasso');
    }


    public function loadcantonAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $prefecture = $request->getParam("id_prefecture");
        $t_canton = new Application_Model_DbTable_EuCanton();
        if (!empty($prefecture)) {
            $select = $t_canton->select()->where('id_prefecture = ?', $prefecture);
            $this->view->cantons = $t_canton->fetchAll($select);
        } else {
            $this->view->cantons = $t_canton->fetchAll();
        }
    }

    public function prefectureAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $region = $request->getParam("id_region");
        $entries = array();
        $t_prefect = new Application_Model_DbTable_EuPrefecture();
        if (!empty($region)) {
            $select = $t_prefect->select()->where('id_region = ?', $region);
            $entries = $t_prefect->fetchAll($select);
            $this->view->prefectures = $entries;
        } else {
            $this->view->prefectures = $t_prefect->fetchAll();
        }
    }

    public function loadregionAction() {
        $this->_helper->layout()->disableLayout();
        $request = $this->getRequest();
        $pays = $request->getParam("id_pays");
        $t_region = new Application_Model_DbTable_EuRegion();
        if (!empty($pays)) {
            $select = $t_region->select()->where('id_pays = ?', $pays);
            $this->view->regions = $t_region->fetchAll($select);
        } else {
            $this->view->regions = $t_region->fetchAll();
        }
    }

    public function loadpaysAction() {
        $this->_helper->layout()->disableLayout();
        $request = $this->getRequest();
        $zone = $request->getParam("code_zone");
        $t_pays = new Application_Model_DbTable_EuPays();
        if (!empty($zone)) {
            $select = $t_pays->select()->where('code_zone = ?', $zone);
            $this->view->pays = $t_pays->fetchAll($select);
        } else {
            $this->view->pays = $t_pays->fetchAll();
        }
    }


	public function addintegrateurcomplementAction() {
	       /* page integrateur/addintegrateur - Ajout d'une integrateur */
		   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmcint');
		   $request = $this->getRequest ();
		   $m_souscription2 = new Application_Model_EuSouscriptionMapper();
		   if ($request->isPost ()) {

		       $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction();
			   try {
			       $nombre_compte = 0;
				   $cpte = $_POST['cpteur'];

				   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				     $numero_quittance = $_POST['integrateur_souscription_ordre'.$i];
					 $j = $i + 1;
					 if($cpte > 1) {
					      while($j < $cpte) {
						     $num_quittance = $_POST['integrateur_souscription_ordre'.$j];
							 if($numero_quittance == $num_quittance) {
							    $db->rollback();
					            $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		                        $sessionmembreasso->error = "Erreur de traitement : Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					            return;
							 }
							 $j++;
						  }
					 }
				  }

				  $souscription_id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
				  if($souscription_id == NULL) {
					 $db->rollback();
					 $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		             $sessionmembreasso->error = "Erreur de traitement : Ancien Numéro de quittance ".$_POST['ancien_numero_quittance']."  est  invalide ...";
					 return;
		           }

				   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		              $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'. $i]);
					  if($souscription_id == NULL) {
					     $db->rollback();
						 $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                 $sessionmembreasso->error = "Erreur de traitement : Numéro de quittance ".$_POST['integrateur_souscription_ordre'.$i]."  est  invalide ...";
					     return;
		               }
					}

					$souscription3 = new Application_Model_EuSouscription();
                    $m_souscription3 = new Application_Model_EuSouscriptionMapper();
					$id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					$m_souscription3->find($id,$souscription3);
					$souscription_souscription = $souscription3->souscription_souscription;
					for($i = 0; $i < $_POST['cpteur']; $i++)  {
						$id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
						$m_souscription3->find($id,$souscription3);
						if($souscription_souscription != $souscription3->souscription_souscription) {
							$db->rollback();
							$this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                    $sessionmembreasso->error = "Erreur de traitement : les numéros quittances doivent appartenir au même souscripteur !!! ";
                            return;
						}
					}

					$m_integrateur2 = new Application_Model_EuIntegrateurMapper();
					$m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
					for($i = 0; $i < $_POST['cpteur']; $i++) {
					   $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
					   $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription_id);
					   $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription_id);
					   if(count($integrateur2) > 0  || count($complement2) > 0) {
						   $db->rollback();
						   $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                   $sessionmembreasso->error = "Erreur de traitement : Numéro de quittance  ".$_POST['integrateur_souscription_ordre'.$i]."  déjà  utilisé ...";
                           return;
	                   }
				    }

					$id_souscription = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					$integrateur2    = $m_integrateur2->fetchAllBySouscription($id_souscription);
					$complement2    = $m_complement_quittance2->fetchAllBySouscription($id_souscription);
					if((count($integrateur2) == 0)  || (count($complement2) == 0)) {
					  $db->rollback();
					  $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		              $sessionmembreasso->error = "Erreur de traitement : Ancien Numéro de quittance  ".$_POST['ancien_numero_quittance']."  non utilisé ...";
                      return;
	                }

					for($i = 0; $i < $_POST['cpteur']; $i++) {
					   $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
					   $m_souscription3->find($souscription_id,$souscription3);
					   $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
					}

					$complement   = new Application_Model_EuComplementQuittance();
                    $m_complement = new Application_Model_EuComplementQuittanceMapper();
					$integrateur  = new Application_Model_EuIntegrateur();
                    $integrateurM = new Application_Model_EuIntegrateurMapper();
                    $integrateurM->find($complement2->integrateur_id,$integrateur);

					$code_agence = "";
					if($nombre_compte >= 10)   {
					     if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
							$membreasso   = new Application_Model_EuMembreasso();
                            $m_membreasso = new Application_Model_EuMembreassoMapper();
		                    $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

							$association = new Application_Model_EuAssociation();
                            $m_association = new Application_Model_EuAssociationMapper();
		                    $m_association->find($membreasso->membreasso_association,$association);
		                    $code_agence = $association->code_agence;

							$recubancaire = new Application_Model_EuRecubancaire();
                            $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

							$partagea = new Application_Model_EuPartagea();
                            $partagea_mapper = new Application_Model_EuPartageaMapper();

							$partagem = new Application_Model_EuPartagem();
                            $partagem_mapper = new Application_Model_EuPartagemMapper();
					    }



						$date_id = new Zend_Date();
					    for($i = 0; $i < $_POST['cpteur']; $i++) {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
						   $cpte = $m_complement->findConuter() + 1;
						   $complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($complement2->integrateur_id);
						   $complement->setSouscription_id($souscription_id);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						   $m_complement->save($complement);
					    }

						$eusouscription = new Application_Model_EuSouscription();
		                $souscriptionM = new Application_Model_EuSouscriptionMapper();

					    $date = new Zend_Date();
		                $compte_map = new Application_Model_EuCompteMapper();
                        $compte      = new Application_Model_EuCompte();
			            $sms_money   = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();

			            $det_sms   = new Application_Model_EuDetailSmsmoney();
			            $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			            $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			            $det_vtesms  = new Application_Model_EuDetailVentesms();

					    // insertion dans la table eu_depot_vente
				        $m_dvente = new Application_Model_EuDepotVenteMapper();
				        $dvente = new Application_Model_EuDepotVente();

						$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                $membre_pbf = '0000000000000000001M';
	                    $code_compte_pbf = "NN-TR-".$membre_pbf;
			            $ret = $compte_map->find($code_compte_pbf,$compte);

						for($i = 0; $i < $_POST['cpteur']; $i++) {
						   $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
						   $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
						   if($finddepot == NULL) {
						       $souscriptionM->find($souscription_id,$eusouscription);
						       $mobile = $eusouscription->souscription_mobile;
							   if($eusouscription->souscription_programme == 'CMFH')   {
							         $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                         if($eusouscription->souscription_autonome == 1) {
			                            $nbre_compte = $eusouscription->souscription_nombre - 1;
			                         } else {
				                        $nbre_compte = $eusouscription->souscription_nombre;
				                     }

									 $montant = $nbre_compte * $fcaps;
							         // Traitement des produits CAPS
				                     $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									 $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
									 if ($lignesdetfcaps != null) {
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed($souscription_id)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                          $money_map->save($sms_money);

									      // Mise à jour du compte de transfert
				                          if($ret && ($cumulfcaps >= $montant)) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);
	                                      } else {
			                                 $db->rollback();
								             $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
			                                 $sessionmembreasso->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte CAPS est insuffisant';
                                             return;
			                              }

										  $l = 0;
					                      $reste = $montant;
					                      $nbre_lignesdetfcaps = count($lignesdetfcaps);
										  while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										    $lignedetfcaps = $lignesdetfcaps[$l];
                                            $id = $lignedetfcaps->getId_detail_smsmoney();
						                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                       //Mise à jour  des lignes d'enrégistrement
                                               $reste = $reste - $lignedetfcaps->getSolde_sms();
											   //insertion dans la table eu_detailventesms
						                       $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                               $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                  ->setId_detail_smsmoney($id)
                                                          ->setCode_membre_dist($membre_pbf)
                                                          ->setCode_membre(null)
                                                          ->setType_tansfert('CAPS')
                                                          ->setCreditcode($codefcaps)
                                                          ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                          ->setId_utilisateur(null)
                                                          ->setCode_produit('CAPS');
                                               $det_vte_sms->insert($det_vtesms->toArray());

							                   $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                     ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                     ->setSolde_sms(0);
                                               $det_sms_m->update($lignedetfcaps);
						                     } else {
												  //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }

									 } else  {
				                        $db->rollback();
								        $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
			                            $sessionmembreasso->error = 'Erreur de traitement : le solde du compte CAPS est null';
                                        return;
				                     }

									 $countdvente = $m_dvente->findConuter() + 1;
				                     $dvente->setId_depot($countdvente)
					                        ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                     $dvente->setCode_membre($integrateur->code_membre);
			                         $dvente->setCode_produit('CAPS');
				                     $dvente->setMont_depot($montant);
				                     $dvente->setMont_vendu(0);
				                     $dvente->setSolde_depot($montant);
				                     $dvente->setId_utilisateur(null);
				                     $dvente->setType_depot('AvecListe');
				                     $dvente->setSouscription_id($souscription_id);
				                     $m_dvente->save($dvente);

									 $compteur = Util_Utils::findConuter() + 1;
				                     Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								     include("automatisation.php");
								     codegenerer($souscription_id);
							   }
						   } else {
							  $m_dvente->find($finddepot->id_depot,$dvente);
							  $dvente->setCode_membre($integrateur->code_membre);
                              $m_dvente->update($dvente);
						   }
						}

					    $db->commit();
                        $sessionmembreasso->error = "Opération bien effectuée ...";
		                $this->_redirect('/integrateur/addintegrateurcomplement');

					} else {
					    $db->rollback();
						$this->view->param = $param;
					    $this->view->souscription_email  = $_POST['souscription_email'];
					    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
					    $this->view->id_canton  = $_POST['integrateur_canton'];
						$this->view->id_ville   = $_POST['integrateur_ville'];
						$this->view->code_membre = $_POST['integrateur_membre'];
		                $sessionmembreasso->error = "Le nombre de comptes marchands souscrits est insuffisant pour effectuer cette operation ...";
					    return;
				    }






			   } catch (Exception $exc) {
				   $db->rollback();
				   $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
				   $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
                }









		   }










	}


	public function addoffreinvalidAction() {
	       /* page integrateur/addintegrateur - Ajout d'une integrateur */
            $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		    //$this->_helper->layout->disableLayout();
 		    $this->_helper->layout()->setLayout('layoutpublicesmcint');
			$param = (int)$this->_request->getParam('param');
			$this->view->param = $param;
		    $t_canton = new Application_Model_DbTable_EuCanton();
			$m_filiere = new Application_Model_EuFiliereMapper();
            $m_ville  = new Application_Model_EuVilleMapper();
		    $m_souscription2 = new Application_Model_EuSouscriptionMapper();
			$souscription0   = new Application_Model_EuSouscription();
            $m_souscription0 = new Application_Model_EuSouscriptionMapper();
            $cantons  = $t_canton->fetchAll();
			$filieres = $m_filiere->fetchAll();
            $villes   = $m_ville->fetchAll();
            $this->view->cantons = $cantons;
            $this->view->villes  = $villes;
			$this->view->filieres = $filieres;
		    $request = $this->getRequest();
			if ($request->isPost ()) {
			    if (isset($_POST['offreur_projet_souscription_ordre']) && $_POST['offreur_projet_souscription_ordre']!=""
			        && isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
			        && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			        && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			        && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			        && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			        && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!=""
			        && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1) {

					   $db = Zend_Db_Table::getDefaultAdapter();
                       $db->beginTransaction();
				       try {
					       $membremorale = new Application_Model_EuMembreMorale();
	                       $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
						   $m_souscription2 = new Application_Model_EuSouscriptionMapper();
						   $souscription3 = new Application_Model_EuSouscription();
                           $m_souscription3 = new Application_Model_EuSouscriptionMapper();
						   $compte = new Application_Model_EuCompte();
                           $map_compte = new Application_Model_EuCompteMapper();

			               $contrat = new Application_Model_EuContrat();
                           $map_contrat = new Application_Model_EuContratMapper();

						   $id_type_acteur = "";
			               $id_type_creneau = "";

				           $param = (int)$this->_request->getParam('param');
						   $nombre_compte = 0;

						   $raison = "";
						   $code_type_acteur = "";
						   $id_souscription = "";

						   $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					       if($findmembre == false) {
					          $db->rollback();
	                          $this->view->param = $param;
						      $this->view->souscription_email  = $_POST['souscription_email'];
						      $this->view->code_membre = $_POST['offreur_projet_membre'];
					          $sessionmembreasso->error = "Le numero du membre offreur de projet est introuvable ...";
					          return;
					       }

						   $quittance_invalide = $m_souscription0->findquittanceinvalide($_POST['offreur_projet_souscription_ordre']);
						   if($quittance_invalide != NULL) {
						      $db->rollback();
						      $this->view->param = $param;
						      $this->view->souscription_email  = $_POST['souscription_email'];
						      $this->view->code_membre = $_POST['offreur_projet_membre'];
		                      $sessionmembreasso->error = "Numéro de quittance ".$_POST['offreur_projet_souscription_ordre']."  est  dejà utilisé ...";
                              return;
		                   }

						   $programme = $request->getParam("souscription_programme");
						   $nombre    = $request->getParam("souscription_nombre");
						   $montant   = $request->getParam("souscription_montant");

						   $raison = $request->getParam("souscription_raison");
						   $code_type_acteur = $request->getParam("type_acteur");
                           $lignessous = $m_souscription0->findAllSouscriptionPM($raison,$code_type_acteur,$programme,$nombre,$montant);

						   if($lignessous == false) {
                              $db->rollback();
					          $this->view->param = $param;
						      $this->view->souscription_email  = $_POST['souscription_email'];
						      $this->view->code_membre = $_POST['offreur_projet_membre'];
		                      $sessionmembreasso->error = "Veuillez revoir la saisie des informations de votre quittance";
					          return;
                           } else {
						      $lignesous = $lignessous[0];
						      $id_souscription = $lignesous->getSouscription_id();
						      $findsous = $m_souscription0->find($id_souscription,$souscription0);
                              $lignesous->setQuittance_invalide($request->getParam("offreur_projet_souscription_ordre"));
                              $m_souscription0->update($lignesous);
						   }

						   //--- Début de l'opération de mise sur chaine ---
						         $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                 $date_idd = clone $date_id;
						         $code = $_POST['offreur_projet_membre'];
						         $m_acteur = new Application_Model_EuActeurMapper();
						         $findacteur = $m_acteur->findByActeur($code);

								 if($findacteur == false) {
						$id_filiere = $_POST['offreur_projet_filiere'];
						$code_agence = substr($code,0,12);
				        $table = new Application_Model_DbTable_EuActeur();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur  =  $code_acteur;

						if(($param == 1) || ($param == 4) || ($param == 7)) {
						  $id_type_acteur = 1;
						}
						if(($param == 2) || ($param == 5) || ($param == 8)) {
						  $id_type_acteur = 2;
						}
						if(($param == 3) || ($param == 6) || ($param == 9)) {
						  $id_type_acteur = 3;
						}

						if(($param == 1) || ($param == 2) || ($param == 3)) {
						  $id_type_creneau = 3;
						}
						if(($param == 4) || ($param == 5) || ($param == 6)) {
						  $id_type_creneau = 2;
						}
						if(($param == 7) || ($param == 8) || ($param == 9)) {
						  $id_type_creneau = 1;
						}

						// insertion dans la table eu_acteur_creneau
                        $cm    = new Application_Model_EuActeurCreneauMapper();
                        $acren = new Application_Model_EuActeurCreneau();
				        $rep_mapper = new Application_Model_EuRepresentationMapper();
				        $rep = $rep_mapper->findbyrep($code);

						$acren->setNom_acteur($membremorale->getRaison_sociale());
                        $acren->setCode_membre($code);
                        $acren->setId_type_acteur($id_type_acteur);

                        $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                        $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                        $acren->setId_utilisateur(null);
                        $acren->setGroupe(null);
                        $acren->setCode_creneau(NULL);
                        $acren->setCode_gac_filiere(NULL);
                        $acren->setCode_gac(NULL);

				        $code_zone =  substr($membremorale->getCode_agence(),0,3);
                        $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                        if ($code_acteur == NULL) {
                           $code_acteur = 'A' . $code_zone . '0001';
                        } else {
                           $num_ordre = substr($code_acteur, -4);
                           $num_ordre++;
                           $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                        }

                        $acren->setCode_acteur($code_acteur);
                        $acren->setId_filiere($id_filiere);
                        $cm->save($acren);

						// Insertion dans la table eu_acteur
				        $t_acteur = new Application_Model_DbTable_EuActeur();
				        $c_acteur = new Application_Model_EuActeur();
                        $table = new Application_Model_DbTable_EuActeur();
                        $select = $table->select();
                        $select->where('code_acteur like ?',$acteur);
                        $resultSet = $table->fetchAll($select);
                        $ligneacteur = $resultSet->current();
                        $count = $c_acteur->findConuter() + 1;

						// Mise à jour des tables
				        $filiere =  new Application_Model_EuFiliere();
                        $map_filiere = new Application_Model_EuFiliereMapper();
                        $find_filiere = $map_filiere->find($id_filiere,$filiere);

				        $c_acteur->setId_acteur($count)
                                 ->setCode_acteur(NULL)
                                 ->setCode_division($filiere->getCode_division())
                                 ->setCode_membre($code)
                                 ->setId_utilisateur(NULL)
                                 ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				        if($id_type_acteur == 3) {
					        $c_acteur->setCode_activite('detaillant');
			            } else if($id_type_acteur == 2) {
					        $c_acteur->setCode_activite('semi-grossiste');
			            } else if($id_type_acteur == 1) {
					        $c_acteur->setCode_activite('grossiste');
				        }

			            $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                        $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                        $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                        $c_acteur->setId_pays($ligneacteur->id_pays);
                        $c_acteur->setId_region($ligneacteur->id_region);
                        $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                        $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                        $c_acteur->setType_acteur('DSMS');

                        $c_acteur->setCode_gac_chaine($acteur);
                        $t_acteur->insert($c_acteur->toArray());

						// Mise à jour de la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
				        $trouveuser = false;
				        $code_type_acteur = $membremorale->getCode_type_acteur();

				        $finduser = $user_mapper->findByMembre($code,"personne_morale");
				        if($finduser != false) {
				           $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				        }

						if($trouveuser) {
				           if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                              $userin->setCode_groupe('oe_detaillant');
                              $userin->setCode_gac_filiere('oe_detaillant');
                              $userin->setCode_groupe_create('oe_detaillant');
                           }
                           elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_detaillant');
                             $userin->setCode_gac_filiere('ose_detaillant');
                             $userin->setCode_groupe_create('ose_detaillant');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_semi_grossiste');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_semi_grossiste');
                          }
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_grossiste');
                          }
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_grossiste');
                         }
				         $userin->setId_filiere($id_filiere);
                         $user_mapper->update($userin);

				       }

					   // Mise à jour de la table eu_membre_morale
				       $membremorale->setId_filiere($id_filiere);
				       $m_mapmorale->update($membremorale);

					   // Recuperation de la PRK nr
					   /*
                        $params = new Application_Model_EuParametresMapper();
                       $par = new Application_Model_EuParametres();
                       $prc = 0;
                       $par_prc = $params->find('prc','nr',$par);
                       if ($par_prc == true) {
                           $prc = $par->getMontant();
                       }

                       $te_mapper = new Application_Model_EuTegcMapper();
                       $te = new Application_Model_EuTegc();
                       //$code_te = 'TEGCP' .$id_filiere. $code;
					   $code_te = $te_mapper->getLastTegc();
			           if ($code_te == NULL) {
			             $code_te = 'TEGCP'.$id_filiere.$code.'00001';
			           } else {
			             $num_ordre = substr($code_te, -5);
                         $num_ordre++;
                         $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);
			           }
                       $find_te = $te_mapper->find($code_te,$te);
                       if ($find_te == false) {
                           $te->setCode_tegc($code_te)
                              ->setId_filiere($id_filiere)
                              ->setMdv($prc)
							  ->setNom_tegc($membremorale->raison_sociale)
                              ->setCode_membre($code)
                              ->setMontant(0)
                              ->setMontant_utilise(0)
                              ->setSolde_tegc(0);
                           $te_mapper->save($te);
                       } else {
                           $te->setId_filiere($id_filiere);
                           $te->setMdv($prc);
                           $te_mapper->update($te);
                       }
					   */


				       $code_compte = 'NB-TPAGCP-'.$code;
				       $res = $map_compte->find($code_compte,$compte);

				       if(!$res) {
                          $compte->setCode_cat('TPAGCP')
                                 ->setCode_compte($code_compte)
                                 ->setCode_membre(NULL)
                                 ->setCode_membre_morale($code)
                                 ->setCode_type_compte('NB')
                                 ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                 ->setDesactiver(0)
                                 ->setLib_compte('TPAGCP')
                                 ->setSolde(0);
                          $map_compte->save($compte);
                      }

				      $code_comptets = 'NB-TSGCP-'.$code;
				      $rests = $map_compte->find($code_comptets,$compte);

				      if(!$rests) {
                         $compte->setCode_cat('TSGCP')
                                ->setCode_compte($code_comptets)
                                ->setCode_membre(NULL)
                                ->setCode_membre_morale($code)
                                ->setCode_type_compte('NB')
                                ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                ->setDesactiver(0)
                                ->setLib_compte('TSGCP')
                                ->setSolde(0);
                         $map_compte->save($compte);
                     }

                     // Mise à jour de la table eu_contrat
				     $findcontrat = $map_contrat->findByMembre($code);
				     $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				     $contrat->setId_type_creneau($id_type_creneau);
				     $contrat->setId_type_acteur($id_type_acteur);
				     $map_contrat->update($contrat);

					 }
					//--- Fin de l'opération de mise sur chaine ---

                    // Mise à jour du type de fournisseur
				    $membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				    $membremoral->setType_fournisseur($_POST['type_fournisseur']);
				    $m_mapmoral->update($membremoral);

                    $souscription3 = new Application_Model_EuSouscription();
                    $m_souscription3 = new Application_Model_EuSouscriptionMapper();

					$m_souscription3->find($id_souscription,$souscription3);
					$nombre_compte = $souscription3->souscription_nombre;

					if($nombre_compte >= 100)   {
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $a = new Application_Model_EuOffreurProjet();
                       $ma = new Application_Model_EuOffreurProjetMapper();

					   $compteur = $ma->findConuter() + 1;

					   $a->setOffreur_projet_id($compteur);
                            $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                            $a->setOffreur_projet_souscription($id_souscription);
                            $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
						    $a->setOffreur_projet_code_membre($_POST['offreur_projet_membre']);
                            $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                            $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
                            $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
							if($param >= 4) {
	                           $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                            }

							$a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                            $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                            $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                            $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                            $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                            $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                            $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                            $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);/*$sessionmembreasso->membreasso_id*/
                            $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $a->setOffreurProjetCanton($_POST['offreur_projet_canton']);
                            $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			                $a->setPublier($_POST['publier']);
                            $ma->save($a);

							////////////////////////////////////////////////////////////////////////////
                            $offreur_projet = new Application_Model_EuOffreurProjet();
                            $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                            $offreur_projetM->find($compteur, $offreur_projet);

                            $offreur_projet->setPublier(1);
		                    $offreur_projetM->update($offreur_projet);

							$id_offreur_projet = $offreur_projet->offreur_projet_id;
							$detailoffreur = new Application_Model_EuDetailOffreurProjet();
                            $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();

					        $cpte = $m_detailoffreur->findConuter() + 1;
							$detailoffreur->setId_detail_offreur_projet($cpte);
							$detailoffreur->setOffreur_projet_id($id_offreur_projet);
							$detailoffreur->setSouscription_id($souscription_id);
							$detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$m_detailoffreur->save($detailoffreur);

							/////////////////////////////////////////////////////////////////////////////////////////
							$code_agence = "";
							if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
							   $membreasso = new Application_Model_EuMembreasso();
                               $m_membreasso = new Application_Model_EuMembreassoMapper();
		                       $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);

                               $association = new Application_Model_EuAssociation();
                               $m_association = new Application_Model_EuAssociationMapper();
		                       $m_association->find($membreasso->membreasso_association, $association);
		                       $code_agence = $association->code_agence;
							}

							$eusouscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();

							$date = new Zend_Date();
		                    $compte_map = new Application_Model_EuCompteMapper();
                            $compte      = new Application_Model_EuCompte();
			                $sms_money   = new Application_Model_EuSmsmoney();
                            $money_map   = new Application_Model_EuSmsmoneyMapper();

			                $det_sms   = new Application_Model_EuDetailSmsmoney();
			                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                $det_vtesms  = new Application_Model_EuDetailVentesms();

							// insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();

							$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                    $membre_pbf = '0000000000000000001M';
	                        $code_compte_pbf = "NN-TR-".$membre_pbf;
			                $ret = $compte_map->find($code_compte_pbf,$compte);

							$finddepot = $m_dvente->findbysouscriptionmembre($id_souscription);
							if($finddepot == NULL) {
							   $souscriptionM->find($id_souscription,$eusouscription);
							   $mobile = $eusouscription->souscription_mobile;
							   if($eusouscription->souscription_programme == 'CMFH')   {
                                     $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                         if($eusouscription->souscription_autonome == 1) {
			                            $nbre_compte = $eusouscription->souscription_nombre - 1;
			                         } else {
				                        $nbre_compte = $eusouscription->souscription_nombre;
				                     }
									 $montant = $nbre_compte * $fcaps;

									 // Traitement des produits CAPS
				                     $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									 $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');

									 if ($lignesdetfcaps != null) {
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed($id_souscription)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                           $money_map->save($sms_money);

										   // Mise à jour du compte de transfert
				                           if($ret && ($cumulfcaps >= $montant)) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);
	                                       } else {
			                                 $db->rollback();
	                                         $this->view->param = $param;
											 $this->view->souscription_email  = $_POST['souscription_email'];
								             $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                 $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte  est insuffisant';
											 //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                                             return;
			                               }

										   $l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);


						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }

									 } else  {
				                       $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->souscription_email  = $_POST['souscription_email'];
								       $this->view->code_membre = $_POST['offreur_projet_membre'];
			                           $sessionmembreasso->error = 'Erreur de traitement : le solde du compte CAPS est null';
		                               //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                                       return;
				                    }

									$countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                    $dvente->setCode_membre($_POST['offreur_projet_membre']);
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($id_souscription);
				                    $m_dvente->save($dvente);

									$compteur = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								    include("automatisation.php");
								    codegenerer($id_souscription);

                                  }

							} else {
							    $m_dvente->find($finddepot->id_depot,$dvente);
							    $dvente->setCode_membre($_POST['offreur_projet_membre']);
							    $m_dvente->update($dvente);

							    include("automatisation.php");
								recupcodegenerer($id_souscription);

							}

					        $souscription = new Application_Model_EuSouscription();
                            $m_souscription = new Application_Model_EuSouscriptionMapper();
		                    $m_souscription->find($id_souscription,$souscription);

							$date_id = Zend_Date::now();

                            $association = new Application_Model_EuAssociation();
                            $association_mapper = new Application_Model_EuAssociationMapper();

                            $compteur_association = $association_mapper->findConuter() + 1;
                            $association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);

							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
							$login = "";
							$password = "";

							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							   //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                               $login = "";
                               while(strlen($login) != 8) {
                                  $login .= $liste[rand(0,61)];
                               }
							   $password = $login.$login;

							} else {
							   $login = $souscription->souscription_login;
							   $password = $souscription->souscription_passe;
							}



                             $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                             $membreasso->setMembreasso_id($compteur_membreasso);
                             $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                             $membreasso->setMembreasso_nom($souscription->souscription_raison);
                             $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                             $membreasso->setMembreasso_association($compteur_association);
                             $membreasso->setMembreasso_email($souscription->souscription_email);
                             $membreasso->setMembreasso_login($login);
                             $membreasso->setMembreasso_passe($password);
                             $membreasso->setMembreasso_type(1);
                             $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $membreasso->setPublier(1);
							 $membreasso->setSouscription_id($souscription->souscription_id);
                             $membreasso_mapper->save($membreasso);

							 $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                             $html .= "<br/>";
                             $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                             $html .= "<br/>";
							 $html .= "Login : ".$login."<br/>";
                             $html .= "Mot de passe : ".$password."<br/>";

							 $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							 $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                             Zend_Mail::setDefaultTransport($tr);
                             $mail = new Zend_Mail();

							 $mail->setBodyHtml($html);
                             $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                             $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                             $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                             $mail->send($tr);

							 $db->commit();
                             $sessionmembreasso->error = "Opération bien effectuée ...";
		                     $this->_redirect('/integrateur/addoffreinvalid/param/'.$_POST['offreur_projet_type']);

					    } else {
						     $db->rollback();
						     $sessionmembreasso->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...";
					         $this->view->param = $param;
						     $this->view->souscription_email  = $_POST['souscription_email'];
						     $this->view->code_membre = $_POST['offreur_projet_membre'];
						     return;
						}

					   } catch (Exception $exc) {
				            $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_email  = $_POST['souscription_email'];
						    $this->view->code_membre = $_POST['offreur_projet_membre'];
                            $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
		                    //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                            return;
                       }








			       }
			}
	}
	
	public  function addquittanceinvalideAction() {
	    /* page integrateur/addintegrateur - Ajout d'une integrateur */
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
	    $param = (int)$this->_request->getParam('param_int');
	    $this->view->param = $param;
		$t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville  = new Application_Model_EuVilleMapper();
		$m_souscription2 = new Application_Model_EuSouscriptionMapper();
        $cantons  = $t_canton->fetchAll();
        $villes   = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes  = $villes;
		$request = $this->getRequest();

	    if($request->isPost()) {
	        if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
		    && isset($_POST['code_activite']) && $_POST['code_activite']!=""
			&& isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""
			&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
			&& isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
            && isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!=""
		    && isset($_POST['souscription_montant']) && $_POST['souscription_montant']!=""
			&& isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1) {
	
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
			    try {
			        
					// Traitement sur la table eu_souscription
						$souscription0   = new Application_Model_EuSouscription();
                        $m_souscription0 = new Application_Model_EuSouscriptionMapper();
					    $membre = new Application_Model_EuMembre();
	                    $m_map  = new Application_Model_EuMembreMapper();
					    $membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					    $nombre_compte = 0;
						$nom = "";
						$prenom = "";
						$raison = "";
						$code_type_acteur = "";
						$id_souscription = "";
						$param = (int) $this->_request->getParam('param_int');

						$quittance_invalide = $m_souscription0->findquittanceinvalide($_POST['integrateur_souscription_ordre']);
						if($quittance_invalide != NULL) {
						   $db->rollback();
						   $this->view->param = $param;
						   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
						   $this->view->souscription_montant  = $_POST['souscription_montant'];
						   $this->view->souscription_nombre  = $_POST['souscription_nombre'];
					       $this->view->souscription_email  = $_POST['souscription_email'];
						   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						   $this->view->id_canton  = $_POST['integrateur_canton'];
						   $this->view->id_ville   = $_POST['integrateur_ville'];
						   $this->view->code_membre = $_POST['code_membre'];
		                   $sessionmembreasso->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre']."  est  dejà utilisé ...";
                           return;
		                }
						
						$programme = $request->getParam("souscription_programme");
						$nombre = $request->getParam("souscription_nombre");
						$montant = $request->getParam("souscription_montant");
						$integrateur_type = $request->getParam("integrateur_type");
						
						if($_POST['souscription_personne'] == "PP") {
						   $nom = $request->getParam("souscription_nom");
						   $prenom = $request->getParam("souscription_prenom");
						   $lignessous = $m_souscription0->findAllSouscriptionPP($nom,$prenom,$programme,$nombre,$montant);
						} else {
						   $raison = $request->getParam("souscription_raison");
						   $code_type_acteur = $request->getParam("type_acteur");
                           $lignessous = $m_souscription0->findAllSouscriptionPM($raison,$code_type_acteur,$programme,$nombre,$montant);
                        }
						
						if($lignessous == false) {
                           $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
						   $this->view->souscription_montant  = $_POST['souscription_montant'];
						   $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						   $this->view->souscription_email  = $_POST['souscription_email'];
						   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						   $this->view->id_canton  = $_POST['integrateur_canton'];
						   $this->view->id_ville   = $_POST['integrateur_ville'];
						   $this->view->code_membre = $_POST['code_membre'];
		                   $sessionmembreasso->error = "Veuillez revoir la saisie des informations de votre quittance";
					       return;
                        } else {
						   $lignesous = $lignessous[0];
						   $id_souscription = $lignesous->getSouscription_id();
						   $findsous = $m_souscription0->find($id_souscription,$souscription0);
                           $lignesous->setQuittance_invalide($request->getParam("integrateur_souscription_ordre"));
                           $m_souscription0->update($lignesous);
						}
						
						if(substr($_POST['code_membre'],19,1) == 'P') {
						    $findmembre = $m_map->find($_POST['code_membre'],$membre);
						    if($findmembre == false) {
						        $db->rollback();
					            $this->view->param = $param;
								$this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							    $this->view->souscription_montant  = $_POST['souscription_montant'];
							    $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						        $this->view->souscription_email  = $_POST['souscription_email'];
						        $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							    $this->view->id_canton  = $_POST['integrateur_canton'];
							    $this->view->id_ville   = $_POST['integrateur_ville'];
							    $this->view->code_membre = $_POST['code_membre'];
		                        $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['code_membre']." est introuvable ...";
					            return;
						    }

					    } else {
						    $findmembre = $m_mapmoral->find($_POST['code_membre'],$membremoral);
						    if($findmembre == false) {
						        $db->rollback();
					            $this->view->param = $param;
								$this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							    $this->view->souscription_montant  = $_POST['souscription_montant'];
							    $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						        $this->view->souscription_email  = $_POST['souscription_email'];
						        $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							    $this->view->id_canton  = $_POST['integrateur_canton'];
							    $this->view->id_ville   = $_POST['integrateur_ville'];
							    $this->view->code_membre = $_POST['code_membre'];
		                        $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['code_membre']." est introuvable ...";
					            return;
						    }
					    }
						
						$souscription3 = new Application_Model_EuSouscription();
                        $m_souscription3 = new Application_Model_EuSouscriptionMapper();

						$m_souscription3->find($id_souscription,$souscription3);
						$nombre_compte = $souscription3->souscription_nombre;
						if($nombre_compte >= 10)   {
						    include("Transfert.php");
		                       if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                          $chemin	= "integrateurs";
		                          $file = $_FILES['integrateur_diplome']['name'];
		                          $file1='integrateur_diplome';
		                          $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                       } else {$integrateur_diplome = "";}

							   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                         $chemin	= "integrateurs";
		                         $file = $_FILES['integrateur_document']['name'];
		                         $file1='integrateur_document';
		                         $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                        } else {$integrateur_document = "";}

							    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                $a  = new Application_Model_EuIntegrateur();
                                $ma = new Application_Model_EuIntegrateurMapper();

							    $compteur = $ma->findConuter() + 1;
                                $a->setIntegrateur_id($compteur);
                                $a->setIntegrateur_type($request->getParam("integrateur_type"));
                                $a->setIntegrateur_souscription($id_souscription);
						
						        if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22) {
                                      if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                         $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                      }
                                      $a->setIntegrateur_education($_POST['integrateur_education']);
                                      if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                        $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                      }
                                      $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                      $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                      $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                      $a->setIntegrateur_document($integrateur_document);
                                      $a->setIntegrateur_diplome($integrateur_diplome);
                                }
								
								$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                               $a->setIntegrateur_membreasso(0);
                               $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			                   $a->setPublier($request->getParam("publier"));
                               $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                               $a->setIntegrateurCanton($request->getParam("integrateur_canton"));
                               $a->setIntegrateurVille($request->getParam("integrateur_ville"));
							   $a->setCode_membre($request->getParam("code_membre"));
                               $ma->save($a);

							   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                               $integrateur  = new Application_Model_EuIntegrateur();
                               $integrateurM = new Application_Model_EuIntegrateurMapper();
                               $integrateurM->find($compteur,$integrateur);

                               $integrateur->setPublier(1);
		                       $integrateurM->update($integrateur);

							   $code_agence = '';
							   ///////////////////////////////////////////////////////////////////////////////////////////////////////
							   
							    if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
								    $membreasso   = new Application_Model_EuMembreasso();
                                    $m_membreasso = new Application_Model_EuMembreassoMapper();
		                            $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

									$association = new Application_Model_EuAssociation();
                                    $m_association = new Application_Model_EuAssociationMapper();
		                            $m_association->find($membreasso->membreasso_association,$association);
		                            $code_agence = $association->code_agence;

									$recubancaire = new Application_Model_EuRecubancaire();
                                    $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

									$partagea = new Application_Model_EuPartagea();
                                    $partagea_mapper = new Application_Model_EuPartageaMapper();

									$partagem = new Application_Model_EuPartagem();
                                    $partagem_mapper = new Application_Model_EuPartagemMapper();

								}
								
								$souscription = new Application_Model_EuSouscription();
                                 $m_souscription = new Application_Model_EuSouscriptionMapper();

							     $complement   = new Application_Model_EuComplementQuittance();
                                 $m_complement = new Application_Model_EuComplementQuittanceMapper();

								 $m_souscription->find($id_souscription, $souscription);
                                 $souscription->setCode_activite($request->getParam("code_activite"));
                                 $souscription->setId_metier($request->getParam("id_metier"));
                                 $souscription->setSouscription_email($request->getParam("souscription_email"));
                                 $m_souscription->update($souscription);

								 $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						         $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
		                         $m_souscription->find($integrateur->integrateur_souscription,$souscription);

								 $integrateur2 = $m_integrateur2->fetchAllBySouscription($souscription->souscription_souscription);
							     $complement2  = $m_complement_quittance2->fetchAllBySouscription($souscription->souscription_souscription);
								 
								 if(count($integrateur2) == 0  || count($complement2) == 0) {
								    $date_id = Zend_Date::now();
                                    $association = new Application_Model_EuAssociation();
                                    $association_mapper = new Application_Model_EuAssociationMapper();

								    $compteur_association = $association_mapper->findConuter() + 1;
                                    $association->setAssociation_id($compteur_association);
                                    $association->setAssociation_mobile($souscription->souscription_mobile);
                                    $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
                                    $association->setAssociation_numero($compteur_association."INT");
                                    $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                    $association->setAssociation_email($souscription->souscription_email);
                                    $association->setAssociation_recepisse(NULL);
                                    $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                    $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $association->setId_filiere(NULL);
                                    $association->setCode_type_acteur(NULL);
                                    $association->setCode_statut(NULL);
                                    $association->setCode_agence($code_agence);
                                    $association->setPublier(1);
                                    $association_mapper->save($association);

								    $date_id = Zend_Date::now();

                                    $membreasso = new Application_Model_EuMembreasso();
                                    $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								    $login = "";
								    $password = "";

								    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								       //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                       $login = "";
                                       while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)];
                                       }
									   $password = $login.$login;

								    } else {
								       $login = $souscription->souscription_login;
									   $password = $souscription->souscription_passe;
								    }

                                    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    $membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                    $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                    $membreasso->setMembreasso_association($compteur_association);
                                    $membreasso->setMembreasso_email($souscription->souscription_email);
                                    $membreasso->setMembreasso_login($login);
                                    $membreasso->setMembreasso_passe($password);
                                    $membreasso->setMembreasso_type(1);
                                    $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $membreasso->setPublier(1);
									$membreasso->setSouscription_id($souscription->souscription_id);
							        $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                    $membreasso_mapper->save($membreasso);

								    $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                    $html .= "<br/>";
                                    $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                    $html .= "<br/>";
							        $html .= "Login : ".$login."<br/>";
                                    $html .= "Mot de passe : ".$password."<br/>";

							        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                    Zend_Mail::setDefaultTransport($tr);
                                    $mail = new Zend_Mail();

							        $mail->setBodyHtml($html);
                                    $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                    $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                    $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                    $mail->send($tr);

								}
								
								///////////////////////////////////////////////////////////////////////////////////////////////////////
							    $id_integrateur = $integrateur->integrateur_id;

								 $cpte = $m_complement->findConuter() + 1;
								 $complement->setId_complement_quittance($cpte);
								 $complement->setIntegrateur_id($id_integrateur);
								 $complement->setSouscription_id($id_souscription);
								 $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd HH:mm:ss'));
								 $m_complement->save($complement);


								 $eusouscription = new Application_Model_EuSouscription();
		                         $souscriptionM = new Application_Model_EuSouscriptionMapper();

								 $date = new Zend_Date();
		                         $compte_map = new Application_Model_EuCompteMapper();
                                 $compte      = new Application_Model_EuCompte();
			                     $sms_money   = new Application_Model_EuSmsmoney();
                                 $money_map   = new Application_Model_EuSmsmoneyMapper();

			                     $det_sms   = new Application_Model_EuDetailSmsmoney();
			                     $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                    $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                    $det_vtesms  = new Application_Model_EuDetailVentesms();

							    // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();

							    $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                        $membre_pbf = '0000000000000000001M';
	                            $code_compte_pbf = "NN-TR-".$membre_pbf;
			                    $ret = $compte_map->find($code_compte_pbf,$compte);

								$finddepot = $m_dvente->findbysouscriptionmembre($id_souscription);
								if($finddepot == NULL) {
								    $souscriptionM->find($id_souscription,$eusouscription);
								    $mobile = $eusouscription->souscription_mobile;
								    if($eusouscription->souscription_programme == 'CMFH')   {
									    $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                            if($eusouscription->souscription_autonome == 1) {
			                               $nbre_compte = $eusouscription->souscription_nombre - 1;
			                            } else {
				                           $nbre_compte = $eusouscription->souscription_nombre;
				                        }
										$montant = $nbre_compte * $fcaps;
									    // Traitement des produits CAPS
									    $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									    $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
										if ($lignesdetfcaps != null) {
										    $nengfcaps = $money_map->findConuter() + 1;
                                            $sms_money->setNEng($nengfcaps)
                	                                  ->setCode_Agence(null)
                                                      ->setCreditAmount($montant)
                                                      ->setSentTo($mobile)
                                                      ->setMotif('CAPS')
                                                      ->setId_Utilisateur(null)
                                                      ->setCurrencyCode('XOF')
                                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setFromAccount($code_compte_pbf)
                                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                      ->setCreditCode($codefcaps)
                                                      ->setDestAccount(null)
                                                      ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                      ->setDestAccount_Consumed('CAPS-'.$id_souscription)
                                                      ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                      ->setNum_recu(null);
                                            $money_map->save($sms_money);

											// Mise à jour du compte de transfert
				                            if($ret && ($cumulfcaps >= $montant)) {
			                                  // Mise à jour du compte de transfert
				                              $compte->setSolde($compte->getSolde() - $montant);
                                              $compte_map->update($compte);
	                                        } else {
			                                  $db->rollback();
	                                          $this->view->param = $param;
											  $this->view->souscription_email  = $_POST['souscription_email'];
								              $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								              $this->view->id_canton  = $_POST['integrateur_canton'];
								              $this->view->id_ville   = $_POST['integrateur_ville'];
								              $this->view->code_membre = $_POST['code_membre'];
			                                  $sessionmembreasso->error = 'Le compte est introuvable ou le solde du compte est insuffisant';
                                              return;
			                                }

										    $l = 0;
					                        $reste = $montant;
					                        $nbre_lignesdetfcaps = count($lignesdetfcaps);
										    while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										          $lignedetfcaps = $lignesdetfcaps[$l];
                                                  $id = $lignedetfcaps->getId_detail_smsmoney();
						                          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											      if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                             //Mise à jour  des lignes d'enrégistrement
                                                     $reste = $reste - $lignedetfcaps->getSolde_sms();
												     //insertion dans la table eu_detailventesms
						                             $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                     $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                        ->setId_detail_smsmoney($id)
                                                                ->setCode_membre_dist($membre_pbf)
                                                                ->setCode_membre(null)
                                                                ->setType_tansfert('CAPS')
                                                                ->setCreditcode($codefcaps)
                                                                ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                ->setId_utilisateur(null)
                                                                ->setCode_produit('CAPS');
                                                      $det_vte_sms->insert($det_vtesms->toArray());

							                          $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                            ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                            ->setSolde_sms(0);
                                                      $det_sms_m->update($lignedetfcaps);

						                            } else {
												      //Mise à jour  des lignes d'enrégistrement
												      //insertion dans la table eu_detailventesms
						                              $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                      $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                         ->setId_detail_smsmoney($id)
                                                                 ->setCode_membre_dist($membre_pbf)
                                                                 ->setCode_membre(null)
                                                                 ->setType_tansfert('CAPS')
                                                                 ->setCreditcode($codefcaps)
                                                                 ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                 ->setMont_vente($reste)
                                                                 ->setId_utilisateur(null)
                                                                 ->setCode_produit('CAPS');
                                                       $det_vte_sms->insert($det_vtesms->toArray());

                                                       $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                               $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                           $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                       $det_sms_m->update($lignedetfcaps);
						                               $reste = 0;
												     }
										             $l++;
										         }

												 $countdvente = $m_dvente->findConuter() + 1;
				                                 $dvente->setId_depot($countdvente)
					                                    ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                 $dvente->setCode_membre($_POST['code_membre']);
			                                     $dvente->setCode_produit('CAPS');
				                                 $dvente->setMont_depot($montant);
				                                 $dvente->setMont_vendu(0);
				                                 $dvente->setSolde_depot($montant);
				                                 $dvente->setId_utilisateur(null);
				                                 $dvente->setType_depot('AvecListe');
				                                 $dvente->setSouscription_id($id_souscription);
				                                 $m_dvente->save($dvente);

									             $compteur = Util_Utils::findConuter() + 1;
				                                 Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								                 include("automatisation.php");
								                 codegenerer($id_souscription);
										} else  {
				                          $db->rollback();
	                                      $this->view->param = $param;
										  $this->view->souscription_email  = $_POST['souscription_email'];
								          $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								          $this->view->id_canton  = $_POST['integrateur_canton'];
								          $this->view->id_ville   = $_POST['integrateur_ville'];
								          $this->view->code_membre = $_POST['code_membre'];
			                              $sessionmembreasso->error = 'Le solde du compte CAPS est null';
                                          return;
				                        }
								    }
								} else {
								    $m_dvente->find($finddepot->id_depot,$dvente);
									$dvente->setCode_membre($_POST['code_membre']);
                                    $m_dvente->update($dvente);

									include("automatisation.php");
								    recupcodegenerer($id_souscription);
								}
							    $db->commit();
                                $sessionmembreasso->error = "Opération bien effectuée ...";
		                        $this->_redirect('/integrateur/addquittanceinvalide/param_int/'.$param);
					    }
			
			    } catch(Exception $exc) {
				    $db->rollback();
	                $this->view->param = $param;
				    $this->view->souscription_email  = $_POST['souscription_email'];
				    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
					$this->view->id_canton  = $_POST['integrateur_canton'];
				    $this->view->id_ville   = $_POST['integrateur_ville'];
				    $this->view->code_membre = $_POST['code_membre'];
                    $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
                }
			
			}
        
		}	
			
	}



	public  function addquittanceinvalidAction() {
	        /* page integrateur/addintegrateur - Ajout d'une integrateur */
            $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		    //$this->_helper->layout->disableLayout();
 		    $this->_helper->layout()->setLayout('layoutpublicesmcint');
			$param = (int)$this->_request->getParam('param');
			$this->view->param = $param;
		    $t_canton = new Application_Model_DbTable_EuCanton();
            $m_ville  = new Application_Model_EuVilleMapper();
		    $m_souscription2 = new Application_Model_EuSouscriptionMapper();
            $cantons  = $t_canton->fetchAll();
            $villes   = $m_ville->fetchAll();
            $this->view->cantons = $cantons;
            $this->view->villes  = $villes;
		    $request = $this->getRequest();

			if ($request->isPost ()) {
			    if (isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
				    && isset($_POST['code_activite']) && $_POST['code_activite']!=""
					&& isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""
					&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
				    && isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
                    && isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!=""
				    && isset($_POST['souscription_montant']) && $_POST['souscription_montant']!=""
				    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1) {

			        $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
						// Traitement sur la table eu_souscription
						$souscription0   = new Application_Model_EuSouscription();
                        $m_souscription0 = new Application_Model_EuSouscriptionMapper();
					    $membre = new Application_Model_EuMembre();
	                    $m_map  = new Application_Model_EuMembreMapper();
					    $membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					    $nombre_compte = 0;
						$nom = "";
						$prenom = "";
						$raison = "";
						$code_type_acteur = "";
						$id_souscription = "";

						$quittance_invalide = $m_souscription0->findquittanceinvalide($_POST['integrateur_souscription_ordre']);
						if($quittance_invalide != NULL) {
						   $db->rollback();
						   $this->view->param = $param;
						   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
						   $this->view->souscription_montant  = $_POST['souscription_montant'];
						   $this->view->souscription_nombre  = $_POST['souscription_nombre'];
					       $this->view->souscription_email  = $_POST['souscription_email'];
						   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						   $this->view->id_canton  = $_POST['integrateur_canton'];
						   $this->view->id_ville   = $_POST['integrateur_ville'];
						   $this->view->code_membre = $_POST['code_membre'];
		                   $sessionmembreasso->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre']."  est  dejà utilisé ...";
                           return;
		                }

						$programme = $request->getParam("souscription_programme");
						$nombre    = $request->getParam("souscription_nombre");
						$montant   = $request->getParam("souscription_montant");

						if($_POST['souscription_personne'] == "PP") {
						   $nom = $request->getParam("souscription_nom");
						   $prenom = $request->getParam("souscription_prenom");
						   $lignessous = $m_souscription0->findAllSouscriptionPP($nom,$prenom,$programme,$nombre,$montant);
						} else {
						   $raison = $request->getParam("souscription_raison");
						   $code_type_acteur = $request->getParam("type_acteur");
                           $lignessous = $m_souscription0->findAllSouscriptionPM($raison,$code_type_acteur,$programme,$nombre,$montant);
                        }

                        if($lignessous == false) {
                           $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
						   $this->view->souscription_montant  = $_POST['souscription_montant'];
						   $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						   $this->view->souscription_email  = $_POST['souscription_email'];
						   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						   $this->view->id_canton  = $_POST['integrateur_canton'];
						   $this->view->id_ville   = $_POST['integrateur_ville'];
						   $this->view->code_membre = $_POST['integrateur_membre'];
		                   $sessionmembreasso->error = "Veuillez revoir la saisie des informations de votre quittance";
					       return;
                         } else {
						   $lignesous = $lignessous[0];
						   $id_souscription = $lignesous->getSouscription_id();
						   $findsous = $m_souscription0->find($id_souscription,$souscription0);
                           $lignesous->setQuittance_invalide($request->getParam("integrateur_souscription_ordre"));
                           $m_souscription0->update($lignesous);
						 }

						 if(substr($_POST['integrateur_membre'],19,1) == 'P') {
						        $findmembre = $m_map->find($_POST['integrateur_membre'],$membre);
						        if($findmembre == false) {
						           $db->rollback();
					               $this->view->param = $param;
								   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							       $this->view->souscription_montant  = $_POST['souscription_montant'];
							       $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						           $this->view->souscription_email  = $_POST['souscription_email'];
						           $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							       $this->view->id_canton  = $_POST['integrateur_canton'];
							       $this->view->id_ville   = $_POST['integrateur_ville'];
							       $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					               return;
						        }

					       }
					       else {
						        $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						        if($findmembre == false) {
						           $db->rollback();
					               $this->view->param = $param;
								   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							       $this->view->souscription_montant  = $_POST['souscription_montant'];
							       $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						           $this->view->souscription_email  = $_POST['souscription_email'];
						           $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							       $this->view->id_canton  = $_POST['integrateur_canton'];
							       $this->view->id_ville   = $_POST['integrateur_ville'];
							       $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					               return;
						       }
					      }

						  $souscription3 = new Application_Model_EuSouscription();
                          $m_souscription3 = new Application_Model_EuSouscriptionMapper();

						  $m_souscription3->find($id_souscription,$souscription3);
						  $nombre_compte = $souscription3->souscription_nombre;

						  if($nombre_compte >= 10)   {
						       include("Transfert.php");
		                       if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                          $chemin	= "integrateurs";
		                          $file = $_FILES['integrateur_diplome']['name'];
		                          $file1='integrateur_diplome';
		                          $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                       } else {$integrateur_diplome = "";}

							   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                         $chemin	= "integrateurs";
		                         $file = $_FILES['integrateur_document']['name'];
		                         $file1='integrateur_document';
		                         $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                       } else {$integrateur_document = "";}

							   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                               $a  = new Application_Model_EuIntegrateur();
                               $ma = new Application_Model_EuIntegrateurMapper();

							   $compteur = $ma->findConuter() + 1;
                               $a->setIntegrateur_id($compteur);
                               $a->setIntegrateur_type($request->getParam("integrateur_type"));
                               $a->setIntegrateur_souscription($id_souscription);

							   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							        || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                       $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                       $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                       $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                               }

							   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22) {
                                      if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                         $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                      }
                                      $a->setIntegrateur_education($_POST['integrateur_education']);
                                      if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                        $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                      }
                                      $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                      $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                      $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                      $a->setIntegrateur_document($integrateur_document);
                                      $a->setIntegrateur_diplome($integrateur_diplome);
                               }

							   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                               $a->setIntegrateur_membreasso(0);
                               $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			                   $a->setPublier($request->getParam("publier"));
                               $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                               $a->setIntegrateurCanton($request->getParam("integrateur_canton"));
                               $a->setIntegrateurVille($request->getParam("integrateur_ville"));
							   $a->setCode_membre($request->getParam("integrateur_membre"));
                               $ma->save($a);

							   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                               $integrateur  = new Application_Model_EuIntegrateur();
                               $integrateurM = new Application_Model_EuIntegrateurMapper();
                               $integrateurM->find($compteur,$integrateur);

                               $integrateur->setPublier(1);
		                       $integrateurM->update($integrateur);

							   $code_agence = '';
							   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                               if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
								    $membreasso   = new Application_Model_EuMembreasso();
                                    $m_membreasso = new Application_Model_EuMembreassoMapper();
		                            $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

									$association = new Application_Model_EuAssociation();
                                    $m_association = new Application_Model_EuAssociationMapper();
		                            $m_association->find($membreasso->membreasso_association,$association);
		                            $code_agence = $association->code_agence;

									$recubancaire = new Application_Model_EuRecubancaire();
                                    $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

									$partagea = new Application_Model_EuPartagea();
                                    $partagea_mapper = new Application_Model_EuPartageaMapper();

									$partagem = new Application_Model_EuPartagem();
                                    $partagem_mapper = new Application_Model_EuPartagemMapper();

								 }

								 $souscription = new Application_Model_EuSouscription();
                                 $m_souscription = new Application_Model_EuSouscriptionMapper();

							     $complement   = new Application_Model_EuComplementQuittance();
                                 $m_complement = new Application_Model_EuComplementQuittanceMapper();

								 $m_souscription->find($id_souscription, $souscription);
                                 $souscription->setCode_activite($request->getParam("code_activite"));
                                 $souscription->setId_metier($request->getParam("id_metier"));
                                 $souscription->setSouscription_email($request->getParam("souscription_email"));
                                 $m_souscription->update($souscription);

								 $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						         $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
		                         $m_souscription->find($integrateur->integrateur_souscription,$souscription);

								 $integrateur2 = $m_integrateur2->fetchAllBySouscription($souscription->souscription_souscription);
							     $complement2  = $m_complement_quittance2->fetchAllBySouscription($souscription->souscription_souscription);

								 if(count($integrateur2) == 0  || count($complement2) == 0) {
								    $date_id = Zend_Date::now();
                                    $association = new Application_Model_EuAssociation();
                                    $association_mapper = new Application_Model_EuAssociationMapper();

								    $compteur_association = $association_mapper->findConuter() + 1;
                                    $association->setAssociation_id($compteur_association);
                                    $association->setAssociation_mobile($souscription->souscription_mobile);
                                    $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
                                    $association->setAssociation_numero($compteur_association."INT");
                                    $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                    $association->setAssociation_email($souscription->souscription_email);
                                    $association->setAssociation_recepisse(NULL);
                                    $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                    $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $association->setId_filiere(NULL);
                                    $association->setCode_type_acteur(NULL);
                                    $association->setCode_statut(NULL);
                                    $association->setCode_agence($code_agence);
                                    $association->setPublier(1);
                                    $association_mapper->save($association);

								    $date_id = Zend_Date::now();

                                    $membreasso = new Application_Model_EuMembreasso();
                                    $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								    $login = "";
								    $password = "";

								    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								       //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                       $login = "";
                                       while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)];
                                       }
									   $password = $login.$login;

								    } else {
								       $login = $souscription->souscription_login;
									   $password = $souscription->souscription_passe;
								    }

                                    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    $membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                    $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                    $membreasso->setMembreasso_association($compteur_association);
                                    $membreasso->setMembreasso_email($souscription->souscription_email);
                                    $membreasso->setMembreasso_login($login);
                                    $membreasso->setMembreasso_passe($password);
                                    $membreasso->setMembreasso_type(1);
                                    $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $membreasso->setPublier(1);
									$membreasso->setSouscription_id($souscription->souscription_id);
							        $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                    $membreasso_mapper->save($membreasso);

								    $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                    $html .= "<br/>";
                                    $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                    $html .= "<br/>";
							        $html .= "Login : ".$login."<br/>";
                                    $html .= "Mot de passe : ".$password."<br/>";

							        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                    Zend_Mail::setDefaultTransport($tr);
                                    $mail = new Zend_Mail();

							        $mail->setBodyHtml($html);
                                    $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                    $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                    $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                    $mail->send($tr);

								}

								///////////////////////////////////////////////////////////////////////////////////////////////////////
							    $id_integrateur = $integrateur->integrateur_id;

								 $cpte = $m_complement->findConuter() + 1;
								 $complement->setId_complement_quittance($cpte);
								 $complement->setIntegrateur_id($id_integrateur);
								 $complement->setSouscription_id($id_souscription);
								 $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd HH:mm:ss'));
								 $m_complement->save($complement);


								 $eusouscription = new Application_Model_EuSouscription();
		                         $souscriptionM = new Application_Model_EuSouscriptionMapper();

								 $date = new Zend_Date();
		                         $compte_map = new Application_Model_EuCompteMapper();
                                 $compte      = new Application_Model_EuCompte();
			                     $sms_money   = new Application_Model_EuSmsmoney();
                                 $money_map   = new Application_Model_EuSmsmoneyMapper();

			                     $det_sms   = new Application_Model_EuDetailSmsmoney();
			                     $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                     $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                     $det_vtesms  = new Application_Model_EuDetailVentesms();

							     // insertion dans la table eu_depot_vente
				                 $m_dvente = new Application_Model_EuDepotVenteMapper();
				                 $dvente = new Application_Model_EuDepotVente();

							     $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                         $membre_pbf = '0000000000000000001M';
	                             $code_compte_pbf = "NN-TR-".$membre_pbf;
			                     $ret = $compte_map->find($code_compte_pbf,$compte);

								 $finddepot = $m_dvente->findbysouscriptionmembre($id_souscription);
								 if($finddepot == NULL) {
								    $souscriptionM->find($id_souscription,$eusouscription);
								    $mobile = $eusouscription->souscription_mobile;
								    if($eusouscription->souscription_programme == 'CMFH')   {
									    $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                            if($eusouscription->souscription_autonome == 1) {
			                               $nbre_compte = $eusouscription->souscription_nombre - 1;
			                            } else {
				                           $nbre_compte = $eusouscription->souscription_nombre;
				                        }

										$montant = $nbre_compte * $fcaps;
									    // Traitement des produits CAPS
									    $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									    $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
										if ($lignesdetfcaps != null) {
										    $nengfcaps = $money_map->findConuter() + 1;
                                            $sms_money->setNEng($nengfcaps)
                	                                  ->setCode_Agence(null)
                                                      ->setCreditAmount($montant)
                                                      ->setSentTo($mobile)
                                                      ->setMotif('CAPS')
                                                      ->setId_Utilisateur(null)
                                                      ->setCurrencyCode('XOF')
                                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setFromAccount($code_compte_pbf)
                                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                      ->setCreditCode($codefcaps)
                                                      ->setDestAccount(null)
                                                      ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                      ->setDestAccount_Consumed('CAPS-'.$id_souscription)
                                                      ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                      ->setNum_recu(null);
                                            $money_map->save($sms_money);

											// Mise à jour du compte de transfert
				                            if($ret && ($cumulfcaps >= $montant)) {
			                                  // Mise à jour du compte de transfert
				                              $compte->setSolde($compte->getSolde() - $montant);
                                              $compte_map->update($compte);
	                                        } else {
			                                  $db->rollback();
	                                          $this->view->param = $param;
											  $this->view->souscription_email  = $_POST['souscription_email'];
								              $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								              $this->view->id_canton  = $_POST['integrateur_canton'];
								              $this->view->id_ville   = $_POST['integrateur_ville'];
								              $this->view->code_membre = $_POST['integrateur_membre'];
			                                  $sessionmembreasso->error = 'Le compte est introuvable ou le solde du compte est insuffisant';
                                              return;
			                                }

										    $l = 0;
					                        $reste = $montant;
					                        $nbre_lignesdetfcaps = count($lignesdetfcaps);
										    while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										          $lignedetfcaps = $lignesdetfcaps[$l];
                                                  $id = $lignedetfcaps->getId_detail_smsmoney();
						                          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											      if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                             //Mise à jour  des lignes d'enrégistrement
                                                     $reste = $reste - $lignedetfcaps->getSolde_sms();
												     //insertion dans la table eu_detailventesms
						                             $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                     $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                        ->setId_detail_smsmoney($id)
                                                                ->setCode_membre_dist($membre_pbf)
                                                                ->setCode_membre(null)
                                                                ->setType_tansfert('CAPS')
                                                                ->setCreditcode($codefcaps)
                                                                ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                ->setId_utilisateur(null)
                                                                ->setCode_produit('CAPS');
                                                      $det_vte_sms->insert($det_vtesms->toArray());

							                          $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                            ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                            ->setSolde_sms(0);
                                                      $det_sms_m->update($lignedetfcaps);

						                            } else {
												      //Mise à jour  des lignes d'enrégistrement
												      //insertion dans la table eu_detailventesms
						                              $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                      $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                         ->setId_detail_smsmoney($id)
                                                                 ->setCode_membre_dist($membre_pbf)
                                                                 ->setCode_membre(null)
                                                                 ->setType_tansfert('CAPS')
                                                                 ->setCreditcode($codefcaps)
                                                                 ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                 ->setMont_vente($reste)
                                                                 ->setId_utilisateur(null)
                                                                 ->setCode_produit('CAPS');
                                                       $det_vte_sms->insert($det_vtesms->toArray());

                                                       $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                               $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                           $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                       $det_sms_m->update($lignedetfcaps);
						                               $reste = 0;
												     }
										             $l++;
										         }

												 $countdvente = $m_dvente->findConuter() + 1;
				                                 $dvente->setId_depot($countdvente)
					                                    ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                 $dvente->setCode_membre($_POST['integrateur_membre']);
			                                     $dvente->setCode_produit('CAPS');
				                                 $dvente->setMont_depot($montant);
				                                 $dvente->setMont_vendu(0);
				                                 $dvente->setSolde_depot($montant);
				                                 $dvente->setId_utilisateur(null);
				                                 $dvente->setType_depot('AvecListe');
				                                 $dvente->setSouscription_id($id_souscription);
				                                 $m_dvente->save($dvente);

									             $compteur = Util_Utils::findConuter() + 1;
				                                 Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								                 include("automatisation.php");
								                 codegenerer($id_souscription);
										} else  {
				                          $db->rollback();
	                                      $this->view->param = $param;
										  $this->view->souscription_email  = $_POST['souscription_email'];
								          $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								          $this->view->id_canton  = $_POST['integrateur_canton'];
								          $this->view->id_ville   = $_POST['integrateur_ville'];
								          $this->view->code_membre = $_POST['integrateur_membre'];
			                              $sessionmembreasso->error = 'Le solde du compte CAPS est null';
                                          return;
				                        }
								    }
								 } else {
								    $m_dvente->find($finddepot->id_depot,$dvente);
									$dvente->setCode_membre($_POST['integrateur_membre']);
                                    $m_dvente->update($dvente);

									include("automatisation.php");
								    recupcodegenerer($id_souscription);
								 }
							     $db->commit();
                                 $sessionmembreasso->error = "Opération bien effectuée ...";
		                         $this->_redirect('/integrateur/addquittanceinvalid/param/'.$_POST['integrateur_type']);
						   }

			            } catch (Exception $exc) {
						     $db->rollback();
	                         $this->view->param = $param;
						     $this->view->souscription_email  = $_POST['souscription_email'];
						     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						     $this->view->id_canton  = $_POST['integrateur_canton'];
						     $this->view->id_ville   = $_POST['integrateur_ville'];
						     $this->view->code_membre = $_POST['integrateur_membre'];
                             $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
		                     //$this->_redirect('/index/addquittanceinvalid/param/'.$param);
                             return;
                        }


			        }

			}


	}
	
	

       
	public  function  addintegrateursouscriptionAction()   {
	    /* page public/addintegrateur - Ajout d'un integrateur */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
		if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
	    $param = (int) $this->_request->getParam('param');
	    
		$typeintegrateur = new Application_Model_EuTypeIntegrateur();
        $typeintegrateurM = new Application_Model_EuTypeIntegrateurMapper();
        $typeintegrateurM->find($param,$typeintegrateur);
		
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		 
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		 
		$this->view->param = $param;
		$this->view->integrateur_montant = $typeintegrateur->montant_param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		 
		$request = $this->getRequest();
		if($request->isPost())  {
		   if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			 && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
             && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""			   
			 && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  { 
                
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
					$param = (int) $this->_request->getParam('param');
					$m_typeintegrateur->find($param,$typeintegrateur);
						
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';   
					$integrateur_montant = $request->getParam("integrateur_montant");
					$statut = $request->getParam("liste");
					$programme = $request->getParam("programme");
					
					$multiple = "";
					$mont_msbcm = "";
					$type_souscription = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPS','valeur');
					
					
					
					if(substr($membre_integrateur,19,1) == 'P')  {
					    $findmembre = $m_map->find($membre_integrateur,$membre);
					    if($findmembre == false) {
						   $db->rollback();
					       $this->view->param = $param;
					       $this->view->id_ville   = $request->getParam("integrateur_ville");
					       $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					       $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					       return;
					    }
						
					} else {
						$findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					        return;
						}
					}
					  
					if($typeintegrateur->montant_param <  $integrateur_montant) {
					    $db->rollback();
					    $this->view->param = $param;
					    $this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    $this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					    return;
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $integrateur_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
					    $type_souscription = $request->getParam("type_souscription");
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						}   						
					}
					
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->id_ville = $request->getParam("integrateur_ville");
					   $this->view->integrateur_quartier = $request->getParam("integrateur_quartier");
					   $this->view->code_membre = $membre_integrateur;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					  
					if(($param == 23) && (substr($membre_integrateur,19,1) == 'M')) {
					    $db->rollback();
					    $this->view->param = $param;
					    $this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    $this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les membres personnes physiques sont autorises a effectuer cette operation ...";
					    return;
					}
					  
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
						 $db->rollback();
					     $this->view->param = $param;
						 $this->view->id_ville   = $request->getParam("integrateur_ville");
						 $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						 $this->view->code_membre = $membre_integrateur;
						 $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                         $this->view->error = "Votre Code BAn  incorrect ...";
                         return; 
					  }
					  
					  if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Montant restant du BAn est insuffisant ...";
                        return; 
					   }
					   
					   
					   if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
					       
						   $bon_neutre2 = new Application_Model_EuBonNeutre();
						   $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						   $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						   $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					       $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						   $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						   $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						   $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						   
						   
						    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						      $db->rollback();
					          $this->view->param = $param;
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $this->view->error = "Montant restant du BAn est insuffisant ...";
                              return; 
						    }
						   
						   
						   if($membre_integrateur != $code_membre_integrateur) {
						     $db->rollback();
					         $this->view->param = $param;
							 $this->view->id_ville   = $request->getParam("integrateur_ville");
							 $this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							 $this->view->code_membre = $membre_integrateur;
							 $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                             $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                             return;   
						   }
						   
						   
						   ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					       ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						   $i = 0;
					       $reste = $integrateur_montant;
					       $nbre_lignesdetbon = count($lignesdetbon);
                           while($reste > 0 && $i < $nbre_lignesdetbon) {
                               $lignedetbon = $lignesdetbon[$i];
                               $id = $lignedetbon->getBon_neutre_detail_id();
						       $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							   if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							      $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								  if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
								      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									  foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
								  
								  }
								  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                  $bon_neutre_detailM->update($lignedetbon);
								 
						  
						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);

                               } else {
							      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);

						  
						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);


						          $reste = 0;
                               }							   
                               $i++;
                             }
							 
							 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
						     $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						     $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						     $bon_neutre2M->update($bon_neutre2);
						  
						     /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							 
							 $m_depotvente = new Application_Model_EuDepotVenteMapper();
				             $depotvente = new Application_Model_EuDepotVente();

                             $m_mstiers = new Application_Model_EuMstiersMapper();
				             $mstiers = new Application_Model_EuMstiers();
							 
							 //$m_dmscm = new Application_Model_EuDetailMscmMapper();
				             //$dmscm = new Application_Model_EuDetailMscm();
							 
						     $finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
							 $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							 
							 $eusouscription = new Application_Model_DbTable_EuSouscription();
						     $select = $eusouscription->select();
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                            $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						     } else {
						        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						     }
						
						     $select->order(array("souscription_id ASC"));
	                         $select->limit(1);
	                         $rowseusouscription = $eusouscription->fetchRow($select);
		                     if(count($rowseusouscription) > 0) {
			                    $souscription_ok = 1;
			                    $souscription_first = $rowseusouscription->souscription_id;
			                 } else {
			                    $souscription_ok = 0;
			                 }
							 
					         $eusouscription = new Application_Model_DbTable_EuSouscription();
	                         $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
						
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));
			            
                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
						include("Transfert.php");
		                   if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                      $chemin = "integrateurs";
		                      $file = $_FILES['integrateur_diplome']['name'];
		                      $file1='integrateur_diplome';
		                      $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                   } else { $integrateur_diplome = ""; }
						   
						   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                   } else {$integrateur_document = "";}
						      
						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();
						   
						   $compteur = $ma->findConuter() + 1;
						   $a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);
						   
						   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							     || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                 $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                 $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                 $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                           }
						   
						   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                           }
						   
						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso(0);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_quartier"));
                           $a->setIntegrateurCanton($request->getParam("id_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("integrateur_membre"));
                           $ma->save($a);
						   
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);
		
                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);
						   
						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						   $cpte = $m_complement->findConuter() + 1;
						   $complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						   $m_complement->save($complement);

                           // Création du compte utilisateur intégrateur
						   $souscription = new Application_Model_EuSouscription();
                           $m_souscription = new Application_Model_EuSouscriptionMapper();
		                   $m_souscription->find($compteur_souscription,$souscription);
						   $integrateur_souscription = $compteur_souscription;
							   
						   $date_id = Zend_Date::now();
                           $association = new Application_Model_EuAssociation();
                           $association_mapper = new Application_Model_EuAssociationMapper();
							   
						   $login = "";
						   $password = "";
						   $code_agence = "";

                           if($finddepot == NULL && $findmstiers == NULL) {
							       $compteur_association = $association_mapper->findConuter() + 1;
                                   $association->setAssociation_id($compteur_association);
                                   $association->setAssociation_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								   } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                   }
								   
                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);
								   
								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							       if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                      $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)]; 
                                      }
								      $password = $login.$login; 
								   } else {
								     $login = $souscription->souscription_login;
								     $password = $souscription->souscription_passe;
								   }
								  
								   $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                   $membreasso->setMembreasso_id($compteur_membreasso);
                                   $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								   } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                   }								  
                                  
                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);
						       }
							   
							   // insertion dans les tables eu_mstiers
							   $id_souscription = $compteur_souscription;
                               $id_mstiers = $m_mstiers->findConuter() + 1;
								  
							   $code_ban = $request->getParam("code_BAn");
							   $code_integrateur = $request->getParam("integrateur_membre");
							   $montant_souscris = $request->getParam("integrateur_montant");
								  
                               $mstiers->setId_mstiers($id_mstiers);
							   $mstiers->setCode_membre($code_integrateur);
							   $mstiers->setMontant_souscris($montant_souscris);
							   $mstiers->setMontant_utilise(0);
							   $mstiers->setMontant_restant($montant_souscris);
							   if($programme == "CM"){
								$mstiers->setType_souscription("CAPS");   
							   } else {
								$mstiers->setType_souscription($request->getParam("type_souscription"));  
							   }
							    $mstiers->setId_souscription($id_souscription);
							    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							    $mstiers->setBon_neutre_code($code_ban);
							    $mstiers->setType_mstiers($programme);
							    $mstiers->setStatut_mstiers($statut);
							   
					            if($param == 21 || $param == 24) {
							      $mstiers->setType_souscripteur("ODD");
								} else {
								  $mstiers->setType_souscripteur("CMFH");
                                  $m_mstiers->save($mstiers);  								  
							    }  
							   
                                // script de creation de TE de prestation
							    $eucompte = new Application_Model_EuCompte();
							    $m_compte = new Application_Model_EuCompteMapper();
									
							    $prk = new Application_Model_EuPrk();
                                $m_prk = new Application_Model_EuPrkMapper();
									
                                $te   = new Application_Model_EuTegc();
							    $m_te = new Application_Model_EuTegcMapper();
							    $code_te = "";
							    $nom_tegc = "";
									
							    $code_membre = $request->getParam("integrateur_membre");
							   
							    if(substr($code_membre,19,1)=='P') {
								  $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
							    } else {
								  $nom_tegc = $membremoral->raison_sociale;
							    }
									
							    $code_zone     = $request->getParam("code_zone");
			                    $id_pays       = $request->getParam("id_pays");
			                    $id_region     = $request->getParam("id_region");
			                    $id_prefecture = $request->getParam("id_prefecture");
			                    $id_canton     = $request->getParam("id_canton");
									
							    $num_compte = 'NB-TPAGCP-'.$code_membre;
				                $res = $m_compte->find($num_compte,$eucompte);
									
							    if(!$res) {
								    $eucompte->setCode_cat('TPAGCP')
                                             ->setCode_compte($num_compte)
										     ->setCode_type_compte('NB')
                                             ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                             ->setDesactiver(0)
                                             ->setLib_compte('TPAGCP')
                                             ->setSolde(0);
												 
								    if(substr($code_membre,19,1)=='P') {		 
                                       $eucompte->setCode_membre($code_membre)
                                              ->setCode_membre_morale(NULL);
								    } else  {
                                      $eucompte->setCode_membre(NULL)
                                              ->setCode_membre_morale($code_membre);
                                  }										         
                                  $m_compte->save($eucompte);
										
								  $code_te = $m_te->getLastTegcByMembre($code_membre);
								  if($code_te == NULL) {
			                        $code_te = 'TEGCP'.$code_membre. '00001';         
			                      } else {
			                        $num_ordre = substr($code_te, -5);
                                    $num_ordre++;
                                    $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
										
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere(NULL);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
								  if(substr($code_membre,19,1)=='M') {
			                         $te->setCode_membre($code_membre);
								  } else {
                                     $te->setCode_membre_physique($code_membre);
                                  }										
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit("Prestation");
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("PRESTATAIRE");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($code_zone);
				                  $te->setId_pays($id_pays);
				                  $te->setId_region($id_region);
				                  $te->setId_prefecture($id_prefecture);
				                  $te->setId_canton($id_canton);

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(null);
					              $m_prk->save($prk);
                                        										
							}
									
							$num_comptets = 'NB-TSGCP-'.$code_membre;
				            $rests = $m_compte->find($num_comptets,$eucompte);
									
							if(!$rests) {
								$eucompte->setCode_cat('TSGCP')
                                         ->setCode_compte($num_comptets)
										 ->setCode_type_compte('NB')
                                         ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte('TSGCP')
                                         ->setSolde(0);
												 
								if(substr($code_membre,19,1)=='P') {		 
                                   $eucompte->setCode_membre($code_membre)
                                            ->setCode_membre_morale(NULL);
								} else  {
                                   $eucompte->setCode_membre(NULL)
                                            ->setCode_membre_morale($code_membre);
                                }										         
                                $m_compte->save($eucompte);
									
                            }
							
						    // fin script de creation TE 
							if(isset($_POST["code_te"])) {
						      $code_tegc   = $request->getParam("code_te");   
						    } else {
                              $eutegc = new Application_Model_DbTable_EuTegc();
                              $select = $eutegc->select();
							  if(substr($code_membre,19,1)=='P') {
                                $select->where("code_membre_physique like ? ", $code_membre);
							  } else {
							    $select->where("code_membre like ? ", $code_membre);
							  }
                              $select->limit(1);
                              $rowseutegc = $eutegc->fetchRow($select);
                              $code_tegc = $rowseutegc->code_tegc;
							}
							
							$type_bnp = "";
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
							if($programme == "CM"){
                               $type_bnp = "CAPS";
							} else {
							   $type_bnp = $request->getParam("type_souscription");;
							}
							
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							  $url,
							  array(
							     CURLOPT_PORT => "9001",
                                 CURLOPT_URL => "http://10.10.20.7:9001/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                                   "content-type: application/json",
                                ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
							    $db->commit();
							    if($finddepot == NULL && $findmstiers == NULL) {
							      $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						        } else {
							      $sessionmembreasso->error = "Operation bien effectuee ...";
							    }
							   $this->_redirect('/integrateur/addintegrateur/param/'.$_POST['integrateur_type']);
							} else {
							   $db->rollback();
							   $this->view->param = $param;
					           $this->view->id_ville   = $request->getParam("integrateur_ville");
					           $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					           $this->view->code_membre = $membre_integrateur;
					           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							   $sessionmembreasso->error = "Echec operation ... : ".$error;
							   return;
							}
							curl_close($url);							 	 
					    }
				
				} catch (Exception $exc) {				   
				    $db->rollback();
					$this->view->param = $param;
					$this->view->id_ville   = $request->getParam("integrateur_ville");
					$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					$this->view->code_membre = $membre_integrateur;
					$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
			    }
               			   
		    } else  {
			    $this->view->param = $param;
				$this->view->id_ville = $request->getParam("integrateur_ville");
				$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
			    $this->view->code_membre = $membre_integrateur;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
		
		}
	
    }
        

	
	
	public  function addintegrateursouscriptionoldAction()  {
	   /* page integrateur/addintegrateur - Ajout d'un integrateur  */
       $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	   $this->_helper->layout()->setLayout('layoutpublicesmcint');
	   if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
	   $m_ville  = new Application_Model_EuVilleMapper();
	   $ville = new Application_Model_EuVille();
	   $m_souscription = new Application_Model_EuSouscriptionMapper();
	   
	   $param = (int) $this->_request->getParam('param'); 
	   $typeintegrateur = new Application_Model_EuTypeIntegrateur();
       $typeintegrateurM = new Application_Model_EuTypeIntegrateurMapper();
       $typeintegrateurM->find($param,$typeintegrateur);
	   
	   $t_canton = new Application_Model_DbTable_EuCanton();
	   $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $t_region = new Application_Model_DbTable_EuRegion();
       $t_pays = new Application_Model_DbTable_EuPays();
       $t_zone = new Application_Model_DbTable_EuZone();

	   $cantons = $t_canton->fetchAll();
	   $prefectures = $t_prefecture->fetchAll();
       $regions = $t_region->fetchAll();
       $pays = $t_pays->fetchAll();
       $zones = $t_zone->fetchAll();
       $this->view->cantons = $cantons;
	   $this->view->prefectures = $prefectures;
       $this->view->regions = $regions;
       $this->view->zones = $zones;
       $this->view->pays = $pays;
       
       $cantons  = $t_canton->fetchAll();
       $villes   = $m_ville->fetchAll();
       $this->view->cantons = $cantons;
       $this->view->villes  = $villes;
	   $this->view->param = $param;
	   $this->view->integrateur_montant = $typeintegrateur->montant_param;
	   
	   $request = $this->getRequest();
	   if($request->isPost())  {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
          try {
		      if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
			      && isset($_POST['code_activite']) && $_POST['code_activite']!=""
			      && isset($_POST['integrateur_email']) && $_POST['integrateur_email']!=""
                  && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""
			      && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
                     
					 $membre = new Application_Model_EuMembre();
	                 $m_map  = new Application_Model_EuMembreMapper();
					 $membremoral = new Application_Model_EuMembreMorale();
	                 $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					 $param = (int) $this->_request->getParam('param');
					 $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                     $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					 $m_typeintegrateur->find($param,$typeintegrateur);

					 $date_id = Zend_Date::now();
					  
					 $id_utilisateur_acnev = 1;
                     $id_utilisateur_filiere = 2;
                     $id_utilisateur_technopole = 3;

					 $bon_neutre = new Application_Model_EuBonNeutre();
                     $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

					 $membre_integrateur  = $request->getParam("integrateur_membre");
					 $code_membre_integrateur = '';

					 $integrateur_montant = $request->getParam("integrateur_montant");
					 $statut = $request->getParam("liste");
					 
					 if(substr($membre_integrateur,19,1) == 'P')  {
						   $findmembre = $m_map->find($membre_integrateur,$membre);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmembreasso->error = "Le numero membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						   }
					    } else {
						   $findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmembreasso->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						  }

						}
						
						if($typeintegrateur->montant_param <  $integrateur_montant) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $sessionmembreasso->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					       return;
						}
						
						if(($param == 23) && (substr($membre_integrateur,19,1) == 'M')) {
					        $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					        $this->view->id_ville   = $request->getParam("integrateur_ville");
						    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					        $this->view->code_membre = $membre_integrateur;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $sessionmembreasso->error = "Seuls les membres personnes physiques sont autorises a effectuer cette operation ...";
					        return;
					    }
						
						
						$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					    if(count($bon_neutre) == 0) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Votre Code BAn  incorrect ...";
                           return;
					    }
						
						if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                           return;
						}
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
						    $bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						    $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;

					        $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
							
							if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						       $db->rollback();
					           $this->view->param = $param;
						       $this->view->integrateur_email   = $request->getParam("integrateur_email");
						       $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							   $this->view->id_ville   = $request->getParam("integrateur_ville");
							   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							   $this->view->code_membre = $membre_integrateur;
							   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                               $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                               return;
						    }

						    if(($membre_integrateur != $code_membre_integrateur)) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $sessionmembreasso->error = "Le code membre du CMFH doit être celui du bon neutre ...";
                              return;
						    }
							
							////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $integrateur_montant;
					        $nbre_lignesdetbon = count($lignesdetbon);
							while($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
									if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
									   
									}
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);


						  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						  } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						  }
						  $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						  $bon_neutre_utiliseM->save($bon_neutre_utilise);
						  
                                 } else {
								    
									if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);

						  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						  } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						  }
						  $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						  $bon_neutre_utiliseM->save($bon_neutre_utilise);
						  
						            $reste = 0;
                                 }
                               $i++;
							}
							
						    
						  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						  //$bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						  $bon_neutre2M->update($bon_neutre2);

						  /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						  } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						  }
						  $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						  $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
						  
						  
						  $m_depotvente = new Application_Model_EuDepotVenteMapper();
				          $depotvente = new Application_Model_EuDepotVente();
						  
						  $m_mstiers = new Application_Model_EuMstiersMapper();
				          $mstiers = new Application_Model_EuMstiers();
							 
						  //$m_dmscm = new Application_Model_EuDetailMscmMapper();
				          //$dmscm = new Application_Model_EuDetailMscm();
						  
						  $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("integrateur_membre"));
						  $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("integrateur_membre"));
						  
						  
						  
						  $eusouscription = new Application_Model_DbTable_EuSouscription();
						  $select = $eusouscription->select();
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                         $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						  } else {
						     $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						  }

						  $select->order(array("souscription_id ASC"));
	                      $select->limit(1);
	                      $rowseusouscription = $eusouscription->fetchRow($select);
		                  if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			              } else {
			                $souscription_ok = 0;
			              }

						  $eusouscription = new Application_Model_DbTable_EuSouscription();
	                      $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));

						  if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL  && $findmstiers == NULL) {
						     $db->rollback();
					         $this->view->param = $param;
						     $this->view->integrateur_email   = $request->getParam("integrateur_email");
						     $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						     $this->view->id_ville   = $request->getParam("integrateur_ville");
						     $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						     $this->view->code_membre = $membre_integrateur;
						     $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                             $sessionmembreasso->error = "Login déjà existant ...";
						     return;
	                      } else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
						     $db->rollback();
					         $this->view->param = $param;
						     $this->view->integrateur_email   = $request->getParam("integrateur_email");
						     $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						     $this->view->id_ville   = $request->getParam("integrateur_ville");
						     $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						     $this->view->code_membre = $membre_integrateur;
						     $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                             $sessionmembreasso->error = "Mot de passe incorret ...";
						     return;
	                       }
						
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);

						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                        $souscription->setSouscription_banque(null);

						$souscription->setSouscription_montant($integrateur_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));

                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));

                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }

			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }

						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(2);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

						///////////////////////////////////////////// validation technopole //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(3);
						$souscriptionM->update($souscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                   $chemin = "integrateurs";
		                   $file = $_FILES['integrateur_diplome']['name'];
		                   $file1='integrateur_diplome';
		                   $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }

						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                 } else {$integrateur_document = "";}

						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();

						   $compteur = $ma->findConuter() + 1;
						   $a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);

						   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							     || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                 $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                 $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                 $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                           }

						   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                           }

						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                           $a->setIntegrateurCanton($request->getParam("integrateur_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("integrateur_membre"));
                           $ma->save($a);

						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);

                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);

						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();

						   $cpte = $m_complement->findConuter() + 1;
						   $complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $m_complement->save($complement);

						   $code_agence = '';
						   
						   // Création du compte utilisateur intégrateur
						   $souscription = new Application_Model_EuSouscription();
                           $m_souscription = new Application_Model_EuSouscriptionMapper();
		                   $m_souscription->find($integrateur->integrateur_souscription,$souscription);
						   $integrateur_souscription = $integrateur->integrateur_souscription;

						   $date_id = Zend_Date::now();
                           $association = new Application_Model_EuAssociation();
                           $association_mapper = new Application_Model_EuAssociationMapper();

						   $login = "";
						   $password = "";

						   if($finddepot == NULL  &&  $findmstiers == NULL) {
							       $compteur_association = $association_mapper->findConuter() + 1;
                                   $association->setAssociation_id($compteur_association);
                                   $association->setAssociation_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								   } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                   }

                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);

								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();

							       if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                      $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)];
                                     }
								     $password = $login.$login;
								   } else {
								     $login = $souscription->souscription_login;
								     $password = $souscription->souscription_passe;
								   }

								   $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                   $membreasso->setMembreasso_id($compteur_membreasso);
                                   $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								   } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                   }

                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);

						       }
							   
							   //insertion dans les tables eu_mstiers
							   $id_souscription = $compteur_souscription;
							   $id_mstiers = $m_mstiers->findConuter() + 1;
							   $code_ban = $request->getParam("code_BAn");
							   $code_integrateur = $request->getParam("integrateur_membre");
							   $montant_souscris = $request->getParam("integrateur_montant");
							   
							   $mstiers->setId_mstiers($id_mstiers);
							   $mstiers->setCode_membre($code_integrateur);
							   $mstiers->setMontant_souscris($montant_souscris);
							   $mstiers->setMontant_utilise(0);
							   $mstiers->setMontant_restant($montant_souscris);
							   $mstiers->setType_souscription("CAPS");
							   $mstiers->setId_souscription($id_souscription);
							   $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							   $mstiers->setBon_neutre_code($code_ban);
							   $mstiers->setStatut_mstiers($statut);
                               $m_mstiers->save($mstiers);
							   
							   //script de creation de TE de prestation
							   $eucompte = new Application_Model_EuCompte();
							   $m_compte = new Application_Model_EuCompteMapper();
									
							   $prk = new Application_Model_EuPrk();
                               $m_prk = new Application_Model_EuPrkMapper();
									
                               $te   = new Application_Model_EuTegc();
							   $m_te = new Application_Model_EuTegcMapper();
							   $code_te = "";
							   $nom_tegc = "";
									
							   $code_membre = $_POST['integrateur_membre'];
							   if(substr($code_membre,19,1)=='P') {
								  $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
							   } else {
								  $nom_tegc = $membremoral->raison_sociale;
							   }
									
							   $code_zone     = $request->getParam("code_zone");
			                   $id_pays       = $request->getParam("id_pays");
			                   $id_region     = $request->getParam("id_region");
			                   $id_prefecture = $request->getParam("id_prefecture");
			                   $id_canton     = $request->getParam("id_canton");
									
							   $num_compte = 'NB-TPAGCP-'.$code_membre;
				               $res = $m_compte->find($num_compte,$eucompte);
									
							   if(!$res) {
								   $eucompte->setCode_cat('TPAGCP')
                                           ->setCode_compte($num_compte)
										   ->setCode_type_compte('NB')
                                           ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte('TPAGCP')
                                           ->setSolde(0);
												 
								  if(substr($code_membre,19,1)=='P') {		 
                                     $eucompte->setCode_membre($code_membre)
                                              ->setCode_membre_morale(NULL);
								  } else  {
                                     $eucompte->setCode_membre(NULL)
                                              ->setCode_membre_morale($code_membre);
                                  }										         
                                  $m_compte->save($eucompte);
										
								  $code_te = $m_te->getLastTegcByMembre($code_membre);
								  if($code_te == NULL) {
			                         $code_te = 'TEGCP'.$code_membre. '00001';         
			                      } else {
			                         $num_ordre = substr($code_te, -5);
                                     $num_ordre++;
                                     $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
										
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere(NULL);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
								  if(substr($code_membre,19,1)=='M') {
			                        $te->setCode_membre($code_membre);
								  } else {
                                    $te->setCode_membre_physique($code_membre);
                                  }
										
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit("Prestation");
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("PRESTATAIRE");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
							      $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($code_zone);
				                  $te->setId_pays($id_pays);
				                  $te->setId_region($id_region);
				                  $te->setId_prefecture($id_prefecture);
				                  $te->setId_canton($id_canton);

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(7);
					              $m_prk->save($prk);
                                        										
						   }
									
						   $num_comptets = 'NB-TSGCP-'.$code_membre;
				           $rests = $m_compte->find($num_comptets,$eucompte);
									
						   if(!$rests) {
							  $eucompte->setCode_cat('TSGCP')
                                       ->setCode_compte($num_comptets)
									   ->setCode_type_compte('NB')
                                       ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte('TSGCP')
                                       ->setSolde(0);
												 
							  if(substr($code_membre,19,1)=='P') {		 
                                 $eucompte->setCode_membre($code_membre)
                                          ->setCode_membre_morale(NULL);
							  } else  {
                                 $eucompte->setCode_membre(NULL)
                                          ->setCode_membre_morale($code_membre);
                              }										         
                              $m_compte->save($eucompte);
									
                            }
							
						    //fin script de creation TE
							
							$eutegc = new Application_Model_DbTable_EuTegc();
                            $select = $eutegc->select();
							if(substr($code_membre,19,1)=='P') {
                              $select->where("code_membre_physique like ? ", $code_membre);
							} else {
							  $select->where("code_membre like ? ", $code_membre);
							}
                            $select->limit(1);
                            $rowseutegc = $eutegc->fetchRow($select);
							
							$code_tegc = $rowseutegc->code_tegc;
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
                            $type_bnp = "CAPS";
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";
                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							  $url,
							  array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                                   "content-type: application/json",
                                 ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($reponse->resultat == 0)) {
                               $db->commit();
                               if($finddepot == NULL && $findmstiers == NULL) {
							     $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
							   } else {
							     $sessionmembreasso->error = "Operation bien effectuee ...";
							   }
							   $this->_redirect('/integrateur/addintegrateur/param/'.$_POST['integrateur_type']);
							   
                            } else {
							   $db->rollback();
							   $this->view->param = $param;
                               $this->view->integrateur_email   = $request->getParam("integrateur_email");
			                   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
			                   $this->view->id_ville   = $request->getParam("integrateur_ville");
			                   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
			                   $this->view->code_membre = $membre_integrateur;
			                   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                               $sessionmembreasso->error = "Echec operation ...".$error;
							   return;							   
						    }
                            curl_close($url);						   
					}
              }				  
		   
		  }  catch (Exception $exc) {
			   $db->rollback();
			   $this->view->param = $param;
			   $this->view->integrateur_email   = $request->getParam("integrateur_email");
			   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
			   $this->view->id_ville   = $request->getParam("integrateur_ville");
			   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
			   $this->view->code_membre = $membre_integrateur;
			   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
               $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
               return;
		   }
	   }
    }
	
	
	public  function addeliAction()   {
		/* page public/addeli - Ajout d'un eli */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
		
		$t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
		
		$t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
		
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
		
		$t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
		
		$request = $this->getRequest();
		if($request->isPost()) {
			if(isset($_POST['code_membre']) && $_POST['code_membre']!="" 
			&& isset($_POST['nom_membre']) && $_POST['nom_membre']!="" 
			&& isset($_POST['code_te']) && $_POST['code_te']!="")  {
                  
               $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction(); 
               try {				  
                   $membremoral = new Application_Model_EuMembreMorale();
                   $m_mapmoral = new Application_Model_EuMembreMoraleMapper();

                   $eli = new Application_Model_EuEli();
                   $m_eli = new Application_Model_EuEliMapper();
				  
				   $detaileli = new Application_Model_EuDetailEli();
                   $m_detaileli = new Application_Model_EuDetailEliMapper();

                   $code_membre = $request->getParam("code_membre");
				   $code_tegc = $request->getParam("code_te");
				   $libelle_eli = $request->getParam("libelle_eli");
				   //$id_canton = $request->getParam("id_canton");
				  
				   $db_convention = new Application_Model_DbTable_EuConvention();
				   $db_franchise = new Application_Model_DbTable_EuFranchise();
				   $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
				  
                   $bai = 0;
                   $ban = 0;
                   $opi = 0;	

                   $montant_bai = 0;
                   $montant_ban = 0;
                   $montant_opi = 0;
				   $montant_eli = 0;
				   
				   $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				  if($findmembre == false) {
				     $db->rollback();
			         $this->view->nom_membre = $request->getParam("nom_membre");
				     $this->view->code_membre = $request->getParam("code_membre");
                     $this->view->error = "Le code membre du fournisseur  ".$code_membre."  est introuvable ...";
                     return;
				  }
				  
				  if($membremoral->desactiver == 1) {
					 $db->rollback();
			         $this->view->nom_membre = $request->getParam("nom_membre");
				     $this->view->code_membre = $request->getParam("code_membre");
					 $this->view->error = "Ce fournisseur dont le code membre que voici  ".$code_membre."  n'est pas autorisé à effectuer cette opération ...";
					 return;
				  }
				  
				  $select = $db_convention->select();
				  $select->where('code_membre like  ?', $code_membre);
				  $rowsconvention = $db_convention->fetchRow($select);
				  
				  if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				  }
				  
				  
				  $select = $db_franchise->select();
				  $select->where('code_membre_franchise like  ?', $code_membre);
				  $rowsfranchise = $db_franchise->fetchRow($select);
				  
				  if(count($rowsfranchise) == 0) {
					  $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                      return;
				  }
				  
				  $select = $db_convention_eli->select();
				  $select->where('code_membre like  ?', $code_membre);
				  $rowseli = $db_convention_eli->fetchRow($select);
				  
				  if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				  }
				  
				  for($i = 0; $i < count($_POST['prix_unitaire']); $i++) {
					 if($_POST['prix_unitaire'][$i] > 0 && $_POST['quantite'][$i] > 0) {
					    $montant_eli = $montant_eli + ($_POST['prix_unitaire'][$i] * $_POST['quantite'][$i]);
					 } else {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Veuillez revoir votre saisie ... ";
                        return;						
					 }
				  }
				  
				  if(isset($_POST['bai']) && $_POST['bai'] == 1)  {
                     $bai = 1;					  
					 $montant_bai = $request->getParam("montant_bai");
					 if($montant_bai < 0) {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Montant BAi mal saisi ... ".$montant_bai;
                        return; 
					 }
				  }
				  
				  if(isset($_POST['ban']) && $_POST['ban'] == 1)  {
                     $ban = 1;					  
					 $montant_ban = $request->getParam("montant_ban");
					 if($montant_ban < 0) {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Montant BAn mal saisi ... ".$montant_ban;
                        return; 
					 }
				  }
				  
				  if(isset($_POST['opi']) && $_POST['opi'] == 1)  {
                     $opi = 1;					  
					 $montant_opi = $request->getParam("montant_opi");
					 if($montant_opi < 0) {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Montant Opi mal saisi ... ".$montant_opi;
                        return; 
					 }
				  }
				  
				  if((isset($_POST['opi']) && $_POST['opi'] == 1) || (isset($_POST['ban']) && $_POST['ban'] == 1) || (isset($_POST['bai']) && $_POST['bai'] == 1))  {
				        if(($montant_bai + $montant_ban + $montant_opi) != $montant_eli) {
					       $db->rollback();
			               $this->view->nom_membre = $request->getParam("nom_membre");
				           $this->view->code_membre = $request->getParam("code_membre");
                           $this->view->error = "Le montant du mode de règlement n'est pas conforme au montant total des produits ...";
                           return;					  
				        }
				  }
				  
				  $date_id = Zend_Date::now();
				  $codeeli = "";
                  $codeeli = strtoupper(Util_Utils::genererCodeSMS(6));
				  
				  /* do {
                     $codeeli = strtoupper(Util_Utils::genererCodeSMS(6));
                     $eli_mapper = new Application_Model_EuEliMapper();
                     $eli2 = $eli_mapper->findByNumero($codeeli);
                  } while(count($eli2) > 0);
                  */
				  
				  $numero_eli = "ELI-".$codeeli;
				  
				  $eli->setCode_membre($code_membre);
				  $eli->setNumero_eli($numero_eli);
                  $eli->setLibelle_eli($libelle_eli);
                  $eli->setDate_eli($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $eli->setBai($bai);
                  $eli->setMontant_bai($montant_bai);
		          $eli->setBan($ban);
		          $eli->setMontant_ban($montant_ban);
		          $eli->setOpi($opi);
		          $eli->setMontant_opi($montant_opi);
		          $eli->setMontant_eli($montant_eli);
				  $eli->setCode_tegc($code_tegc);
		          $eli->setValider(0);
				  $eli->setRejeter(0);
		          $eli->setPayer(0);
				  
			      $eli->setUtilisateur($sessionmembreasso->membreasso_id);
			      $eli->setId_canton($membremoral->id_canton);
				  $m_eli->save($eli);
				  
				  $id_eli = $db->lastInsertId();
				  
				  for($i = 0; $i < count($_POST['prix_unitaire']); $i++) {
				     $detaileli->setId_eli($id_eli);
					 $detaileli->setType_bps($_POST['type_bps'][$i]);
					 $detaileli->setLibelle_produit($_POST['libelle_produit'][$i]);
					 $detaileli->setMontant_produit($_POST['quantite'][$i] * $_POST['prix_unitaire'][$i]);
					 $detaileli->setQuantite($_POST['quantite'][$i]);
					 $detaileli->setPrix_unitaire($_POST['prix_unitaire'][$i]);
					 $detaileli->setStatut(1);
					 $m_detaileli->save($detaileli); 
				  }
				  
				  $db->commit();
				  $sessionmcnp->error = "Operation bien effectuee ...";
				  $this->_redirect('/integrateur/addeli');

			   } catch(Exception $exc) {				   
				  $db->rollback();
			      $this->view->nom_membre = $request->getParam("nom_membre");
				  $this->view->code_membre = $request->getParam("code_membre");
                  $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
			  }
			
			}
			
		}
		
	}
	
	
	
	public  function  addintegrationAction()   {
		/* page public/addintegration - Ajout d'une integration */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		
		$param = (int) $this->_request->getParam('param_int');
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
		
		$msbct = floor(Util_Utils::getParametre('MSBCT','valeur'));
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
		$select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);
		 
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		 
		$this->view->param = $param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		$this->view->formations = $formations;
		$this->view->montant_bc = $montant_bc;
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			    && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!="" && $_POST['integrateur_montant'] > 0			   
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
					
		            $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction(); 
                    try {
		                $membre = new Application_Model_EuMembre();
	                    $m_map  = new Application_Model_EuMembreMapper();
					    $membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                        $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
						
						$comptebancaire = new Application_Model_EuCompteBancaire();
                        $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
						
						$db_convention = new Application_Model_DbTable_EuConvention();
				        $db_franchise = new Application_Model_DbTable_EuFranchise();
				        $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
					    $bpssouscription = new Application_Model_EuBpsSouscription();
                        $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
						
						$mobilisateur = new Application_Model_EuMobilisateur();
                        $m_mobilisateur = new Application_Model_EuMobilisateurMapper();
						
						$commission = new Application_Model_EuMobilisateurCommission();
                        $m_commission = new Application_Model_EuMobilisateurCommissionMapper();
						
						$ville = new Application_Model_EuVille();
	                    $m_ville = new Application_Model_EuVilleMapper();
					
					    $param = (int) $this->_request->getParam('param_int');
					    $date_id = Zend_Date::now();
					    $id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;
						
						$bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						
						$cycle = new Application_Model_EuCycleFormation();
                        $m_cycle = new Application_Model_EuCycleFormationMapper();
					
					    $membre_integrateur = $request->getParam("code_membre");
						$code_membre_mobilisateur = $request->getParam("code_membre_mobilisateur");
						$findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($membre_integrateur);
					    $code_membre_integrateur = '';   
					    $integrateur_montant = $request->getParam("integrateur_montant");
					    $integrateur_type = $request->getParam("integrateur_type");
					    $statut = $request->getParam("liste");
					    $programme = $request->getParam("programme");
						$type_kit = $request->getParam("kit");
					    $multiple = "";
					    $mont_msbcm = "";
					    $type_souscription = "";
						$id_canton = NULL;
						$id_prefecture = NULL;
						$id_region = NULL;
						$id_pays = NULL;
						$code_zone = NULL;
					    $bps_demande = "";
					    $delai = "";
						
						$avecfs = false;
					    $mbc  = 0;
					    $vbc  = 0;
					    $mfs  = 0;
					    $vfs  = 0;
					    $mmat = 0;
					    $vmat = 0;
					    $mci  = 0;
					    $vci  = 0;
					    $mass = 0;
					    $vass = 0;
					    $mcb  = 0;
					    $vcb  = 0;
						
						$dist_peripherique = NULL;
						$dist_connectivite = NULL;
						$dist_assurance    = NULL;
						$id_cycle_formation = NULL;
						
					    $mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					    $mont_bc = 0;
						$mont_bps = 0;
					    $bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					    $bnpnmps  = Util_Utils::getParametre('BNPNMPSFS','valeur');
						$panupp  = Util_Utils::getParametre('TPANU','PP');
				        $panupm  =  Util_Utils::getParametre('TPANU','PM');
						$tauxcommission = Util_Utils::getParamEsmc(25);
						$mont_commission = 0;
						$mont_partage = 0;
					
					    $m_typeintegrateur->find($integrateur_type,$typeintegrateur);
						
						$m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

                        $m_mstiers = new Application_Model_EuMstiersMapper();
				        $mstiers = new Application_Model_EuMstiers();
							 
							 
						$finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					    $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
						
						
						if($programme == "CM") {
					      $type_souscription = $request->getParam("type_souscription_cm");		
					    } else if($programme == "BC") {
					      $type_souscription = $request->getParam("type_souscription_bc");
					    }
						
						if($code_membre_mobilisateur != "" && $code_membre_mobilisateur != NULL)  {
							 if(substr($code_membre_mobilisateur,19,1) == 'P')  {
					            $findmembre = $m_map->find($code_membre_mobilisateur,$membre);
					            if($findmembre == false) {
						           $db->rollback();
					               $this->view->param = $param;
						           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                           $this->view->error = "Le numéro membre du mobilisateur saisi  ".$code_membre_mobilisateur." est introuvable ...";
					               return;
					             }
						         if($membre->desactiver != 0) {
							        $db->rollback();
					                $this->view->param = $param;
							        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							        $this->view->error = "Le membre mobilisateur dont le code membre que voici  ".$code_membre_mobilisateur."  n'est pas autorisé à percevoir de commission ...";
							        return;
						         }
							
					        } else  {
							    $findmembre = $m_mapmoral->find($code_membre_mobilisateur,$membremoral);
						        if($findmembre == false) {
						          $db->rollback();
					              $this->view->param = $param;
							      $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                          $this->view->error = "Le numéro membre du mobilisateur saisi  ".$code_membre_mobilisateur."  est introuvable ...";
					              return;
						        }
						        if($membremoral->desactiver != 0) {
							       $db->rollback();
					               $this->view->param = $param;
							       $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							       $this->view->error = "Le membre mobilisateur dont le code membre que voici  ".$code_membre_mobilisateur."  n'est pas autorisé à percevoir de commission ...";
							       return;
						        }	
								
							 }
							 $findmobilisateur = $m_mobilisateur->fetchByMembre($code_membre_mobilisateur);
							 if($findmobilisateur == NULL) {
							    $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Ce membre  ".$code_membre_mobilisateur."  est pas enregistre en tant que mobilisateur ...";
					            return;	  
							 } 
						}
						
						if(substr($membre_integrateur,19,1) == 'P')  {
					        $findmembre = $m_map->find($membre_integrateur,$membre);
					        if($findmembre == false) {
						        $db->rollback();
					            $this->view->param = $param;
						        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					            return;
					        }
						
						    if($membre->desactiver != 0) {
							    $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							    return;
						    }
							
							$id_canton = $membre->id_canton;
							
					    } else {
						    $findmembre = $m_mapmoral->find($_POST['code_membre'],$membremoral);
						    if($findmembre == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					            return;
						    }
						    if($membremoral->desactiver != 0) {
							    $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							    return;
						    }
							$id_canton = $membremoral->id_canton;
					    }
						
						if($findbancaire == NULL) {
					        $db->rollback();
					        $this->view->param = $param;
					        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
					        $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					        return;
				        }
						
						
						$select = $db_convention->select();
				        $select->where('code_membre like  ?', $membre_integrateur);
				        $rowsconvention = $db_convention->fetchRow($select);
				  
				        if(count($rowsconvention) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
					       $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                           return;
				        }
					
					    if(substr($membre_integrateur,19,1) == 'M')  {
				           $select = $db_franchise->select();
				           $select->where('code_membre_franchise like  ?', $membre_integrateur);
				           $rowsfranchise = $db_franchise->fetchRow($select);
				  
				           if(count($rowsfranchise) == 0) {
					          $db->rollback();
			                  $this->view->param = $param;
					          $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                              return;
				           }
					    }
				   
				        $select = $db_convention_eli->select();
				        $select->where('code_membre like  ?', $membre_integrateur);
				        $rowseli = $db_convention_eli->fetchRow($select);
				  
				        if(count($rowseli) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
					       $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                           return;
				        }
						
						if($findmstiers == NULL) {
						    if($msbct > $integrateur_montant) {
					            $db->rollback();
					            $this->view->param = $param;
						        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					            return;
					        }
						}
						
						
						if($programme == "CM" && $statut == "AvecListe") {
					        $multiple = $integrateur_montant/$mont_caps;		
				        } elseif($programme == "BC" && $statut == "AvecListe") {
						    if($type_kit == "KITSU") {
								$mont_bc = 30000;
							    if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						           $mont_msbcm = 1800000;					
						        } else {
						           $mont_msbcm = 1443750;				
						        }
							} elseif($type_kit == "KITTECH") {
								$mont_bc = $request->getParam("mont_bc");
								$id_cycle_formation = $request->getParam("id_cycle_formation");
								$findcycle = $m_cycle->find($id_cycle_formation,$cycle);
								$mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
							}
						    $multiple = $integrateur_montant/$mont_msbcm;
							$vfs  = $multiple;
		                }
						
						if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				           $db->rollback();
					       $this->view->param = $param;
					       $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				           $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				           return;
				        }
						
						if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				           $db->rollback();
					       $this->view->param = $param;
					       $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				           $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm." ".$multiple;
				           return;
				        }
						
						if(substr($membre_integrateur,19,1) == 'P' &&  ($integrateur_type == 21  || $integrateur_type == 24 )) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Seuls les personnes morales sont autorisées à effectuer cette opération ....";
					        return;
					    }
						
						$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					    if(count($bon_neutre) == 0) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Votre Code BAn  incorrect ...";
                            return; 
					    }
					  
					    if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Montant restant du BAn est insuffisant ...";
                            return; 
					    }
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
							$bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						    $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					        $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValideBc($bon_neutre->bon_neutre_id);
						    $cumulbon = $bon_neutre_detailM->getSumByBonNeutreBc($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreApproBc($bon_neutre->bon_neutre_id);
							
							if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $this->view->error = "Montant restant du BAn est insuffisant ...";
                                return; 
						    }
						   
						    if($membre_integrateur != $code_membre_integrateur) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                                return;   
						    }
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
					        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $integrateur_montant;
					        $nbre_lignesdetbon = count($lignesdetbon);
							
							$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
							
							while($reste > 0 && $i < $nbre_lignesdetbon) {
                                $lignedetbon = $lignesdetbon[$i];
                                $id = $lignedetbon->getBon_neutre_detail_id();
						        $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                        $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									    foreach ($appro_detail as $appro) {
									        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            } 
                                        }
								  
								    }
									
									//Save des BAn utilisés 
								    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						            if(substr($membre_integrateur,19,1) == 'P')  {
						               $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						            } else {
						               $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						            }
						            $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						            $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						            $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
									$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->getBon_neutre_detail_id());
									$bon_neutre_utilise->setUsertable("membreasso");
                                    $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					                $bon_neutre_utiliseM->save($bon_neutre_utilise);
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);
								 
                                } else  {
							        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                        $appro_montant_solde = $reste;
                                        foreach ($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }
                                        }								   
                                    }
									
									// Save des BAn utilisés 
								    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						            if(substr($membre_integrateur,19,1) == 'P')  {
						               $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						            } else {
						               $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						            }
									
						            $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						            $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						            $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
									$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->getBon_neutre_detail_id());
								    $bon_neutre_utilise->setUsertable("membreasso");
                                    $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					                $bon_neutre_utiliseM->save($bon_neutre_utilise);
							   
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);
						            $reste = 0;
                                }							   
                                $i++;
                            }
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
							$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						    $bon_neutre2M->update($bon_neutre2);
						  
							//$integrateur_montant_kacm = 0;
						    //$integrateur_montant_bc = 0;
							
							/*
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
							
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							*/
							
							/*
							if($statut == "AvecListe") {
								$integrateur_montant_kacm = $multiple * $mont_caps;
							    $integrateur_montant_bc = $integrateur_montant - $integrateur_montant_kacm;
							
							    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_bc);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_kacm);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							} else {
							   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						       if(substr($membre_integrateur,19,1) == 'P')  {
						          $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						       } else {
						          $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						       }
						       $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						       $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						       $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						       $bon_neutre_utiliseM->save($bon_neutre_utilise);
							}
							
							*/
							
							
							
							$eusouscription = new Application_Model_DbTable_EuSouscription();
						    $select = $eusouscription->select();
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                            $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						    } else {
						        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						    }
							
							$select->order(array("souscription_id ASC"));
	                        $select->limit(1);
	                        $rowseusouscription = $eusouscription->fetchRow($select);
		                    if(count($rowseusouscription) > 0) {
			                   $souscription_ok = 1;
			                   $souscription_first = $rowseusouscription->souscription_id;
			                } else {
			                   $souscription_ok = 0;
			                }
						
						
						    $eusouscription = new Application_Model_DbTable_EuSouscription();
						    if(isset($_POST["souscription_login"]))  {
                               if($finddepot == NULL && $findmstiers == NULL) {						
	                              $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
						       }
						       if($finddepot == NULL && $findmstiers == NULL && $rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" ) {
						           $db->rollback();
					               $this->view->param = $param;
						           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                   $this->view->error = "Login déjà existant ...";
						           return;
	                           }  else if($finddepot == NULL && $findmstiers == NULL && $request->getParam("souscription_passe") != $request->getParam("confirme") && $request->getParam("souscription_passe") != "") {
						           $db->rollback();
					               $this->view->param = $param;
						           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                   $this->view->error = "Mot de passe incorret ...";
						           return;
	                           }
						    }
							
							$date_id = Zend_Date::now();
						    $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();
							
							
							if(substr($membre_integrateur,19,1) == 'P')  {
                               $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						  $souscription->setSouscription_ville($membre->ville_membre);
                          $souscription->setSouscription_quartier($membre->quartier_membre);
                          $souscription->setSouscription_email($membre->email_membre);
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						  $souscription->setSouscription_ville($membremoral->ville_membre);
                          $souscription->setSouscription_quartier($membremoral->quartier_membre);
                          $souscription->setSouscription_email($membremoral->email_membre);
						}
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
						
                        if(isset($_POST["integrateur_type_candidat"])) {
                           $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                        } else {
                           $souscription->setSouscription_type_candidat(NULL);
                        }
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($id_canton);
                        $souscription_mapper->save($souscription);
						
						    $compteur_souscription = $db->lastInsertId();
							
							$cmfh = new Application_Model_EuCmfh();
                            $cmfh_mapper = new Application_Model_EuCmfhMapper();
							
							$canton = new Application_Model_EuCanton();
                            $canton_mapper = new Application_Model_EuCantonMapper();
						
						    $prefecture = new Application_Model_EuPrefecture();
                            $prefecture_mapper = new Application_Model_EuPrefectureMapper();
						
						    $region = new Application_Model_EuRegion();
                            $region_mapper = new Application_Model_EuRegionMapper();
						
						    $pays = new Application_Model_EuPays();
                            $pays_mapper = new Application_Model_EuPaysMapper();
						
						    $zone = new Application_Model_EuZone();
                            $zone_mapper = new Application_Model_EuZoneMapper();
						
						    if(($id_canton != "") && ($id_canton != NULL)) {
						       $canton_mapper->find($id_canton,$canton);
						       $id_prefecture = $canton->id_prefecture;
						       $prefecture_mapper->find($id_prefecture,$prefecture);
						       $id_region = $prefecture->id_region;
						       $region_mapper->find($id_region,$region);
						       $id_pays = $region->id_pays;
						       $pays_mapper->find($id_pays,$pays);
						       $code_zone = $pays->code_zone;
						    }
							
							if(isset($_POST["integrateur_type_candidat"]))  {
				               $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($request->getParam("code_membre"),$request->getParam("integrateur_type_candidat"));
				               if($findrowscmfh == false)  {
					              $compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					              $cmfh->setId_cmfh($compteur_cmfh);
				                  $cmfh->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				                  $cmfh->setId_type_candidat($request->getParam("integrateur_type_candidat"));
					              $cmfh->setCode_membre($request->getParam("code_membre"));
                                  $cmfh->setCode_zone_create($code_zone);
                                  $cmfh->setId_pays($id_pays);
                                  $cmfh->setId_region($id_region);
                                  $cmfh->setId_prefecture($id_prefecture);
                                  $cmfh->setId_canton($id_canton);
					              $cmfh_mapper->save($cmfh);
			                   }
			                 }
							 
							 
							 
							 ///////////////////////////////////////////// validation acnev //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						
						$a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						
						if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22)  {
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						   
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso(0);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        $a->setIntegrateurCanton($id_canton);
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("code_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);

                        // Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";
						
						if($finddepot == NULL && $findmstiers == NULL) {
							//$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
							} else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            $membreasso->setMembreasso_id($compteur_membreasso);
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
						// insertion dans les tables eu_mstiers
						$id_souscription = $compteur_souscription;
                        //$id_mstiers = $m_mstiers->findConuter() + 1;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("code_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
						
						$mstiers->setCode_membre($code_integrateur);
						$mstiers->setMontant_souscris($montant_souscris);
						$mstiers->setMontant_utilise(0);
						$mstiers->setMontant_restant($montant_souscris);
						$mstiers->setType_souscription($type_souscription);
							
						$mstiers->setType_kit($type_kit);
                        $mstiers->setMontant_bc($mont_bc);
						$mstiers->setMontant_peripherique($mmat);
					    $mstiers->setMontant_connectivite($mci);
					    $mstiers->setMontant_assurance($mass);
					    $mstiers->setMontant_comptebancaire($mcb);
                        $mstiers->setId_cycle_formation($id_cycle_formation); 
							
					    $mstiers->setId_souscription($id_souscription);
					    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setType_mstiers($programme);
						$mstiers->setStatut_mstiers($statut);
						
						$mstiers->setBon_conso($vbc);
						$mstiers->setFrais_solvabilite($vfs);
						$mstiers->setPeripherique($vmat);
						$mstiers->setConnectivite($vci);
						$mstiers->setAssurance($vass);
						$mstiers->setCompte_bancaire($vcb);
						$mstiers->setDistributeur_peripherique($dist_peripherique);
						$mstiers->setDistributeur_connectivite($dist_connectivite);
						$mstiers->setDistributeur_assurance($dist_assurance);
							   
					    if($param == 4) {
						   $mstiers->setType_souscripteur("ODD");
						} elseif($param == 5)  {
						   $mstiers->setType_souscripteur("USER");  								  
					    } else {
						   $mstiers->setType_souscripteur("CMFH");
						}
                        $m_mstiers->save($mstiers);
						
						
						
						/*
						if($statut == "AvecListe")   {
						    $mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_kacm);
					        $mstiers->setType_souscription("CAPS");  
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique(NULL);
                            $mstiers->setDistributeur_connectivite(NULL);
                            $mstiers->setDistributeur_assurance(NULL);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);

                            $mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_bc);
					        $mstiers->setType_souscription($type_souscription);  
                            $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);

						} else {
						   $mstiers->setCode_membre($code_integrateur);
						   $mstiers->setMontant_souscris($montant_souscris);
						   $mstiers->setMontant_utilise(0);
						   $mstiers->setMontant_restant($montant_souscris);
						   $mstiers->setType_souscription($type_souscription);
							
						   $mstiers->setType_kit($type_kit);
                           $mstiers->setMontant_bc($mont_bc);
						   $mstiers->setMontant_peripherique($mmat);
					       $mstiers->setMontant_connectivite($mci);
					       $mstiers->setMontant_assurance($mass);
					       $mstiers->setMontant_comptebancaire($mcb);
                           $mstiers->setId_cycle_formation($id_cycle_formation); 
							
					       $mstiers->setId_souscription($id_souscription);
					       $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $mstiers->setBon_neutre_code($code_ban);
						   $mstiers->setType_mstiers($programme);
						   $mstiers->setStatut_mstiers($statut);
						
						   $mstiers->setBon_conso($vbc);
						   $mstiers->setFrais_solvabilite($vfs);
						   $mstiers->setPeripherique($vmat);
						   $mstiers->setConnectivite($vci);
						   $mstiers->setAssurance($vass);
						   $mstiers->setCompte_bancaire($vcb);
						   $mstiers->setDistributeur_peripherique($dist_peripherique);
						   $mstiers->setDistributeur_connectivite($dist_connectivite);
						   $mstiers->setDistributeur_assurance($dist_assurance);
							   
					       if($param == 4) {
							  $mstiers->setType_souscripteur("ODD");
						   } elseif($param == 5)  {
						      $mstiers->setType_souscripteur("USER");  								  
					       } else {
							  $mstiers->setType_souscripteur("CMFH");
						   }
                           $m_mstiers->save($mstiers);
						}

                        */						
							
					        $id_mstiers = $db->lastInsertId();
                            //insertion dans la table eu_mobilisateur_commission
							if($code_membre_mobilisateur != "" && $code_membre_mobilisateur != NULL)  {
							   $mont_commission = floor(($montant_souscris * $tauxcommission)/100);
							   $mont_partage = floor($mont_commission/3);
							   
							   $commission->setCode_membre($code_membre_mobilisateur);
							   $commission->setId_mstiers($id_mstiers);
							   $commission->setDatecreat($date_id->toString('yyyy-MM-dd HH:mm:ss'));		
				               $commission->setMontant_mstiers($montant_souscris);
				               $commission->setMontant_commission($mont_commission);
				               $commission->setMontant_ban($mont_partage);
				               $commission->setMontant_bai($mont_partage);
				               $commission->setMontant_opi($mont_partage);
				               $commission->setMembreasso_id($sessionmembreasso->membreasso_id);
                               $commission->setPayer(0);
							   $m_commission->save($commission);						
							}   
                            //script de creation de TE de prestation
						    $eucompte = new Application_Model_EuCompte();
						    $m_compte = new Application_Model_EuCompteMapper();
									
						    $prk = new Application_Model_EuPrk();
                            $m_prk = new Application_Model_EuPrkMapper();
									
                            $te = new Application_Model_EuTegc();
						    $m_te = new Application_Model_EuTegcMapper();
						    $code_te = "";
						    $code_tegc = "";
						    $nom_tegc = "";
						
						    $code_membre = $request->getParam("code_membre");
							   
						    if(substr($code_membre,19,1)=='P') {
						       $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						    } else {
							   $nom_tegc = $membremoral->raison_sociale;
					        }
							
							$num_compte = 'NB-TPAGCP-'.$code_membre;
				            $res = $m_compte->find($num_compte,$eucompte);
						
						    $num_comptets = 'NB-TSGCP-'.$code_membre;
				            $rests = $m_compte->find($num_comptets,$eucompte);
									
						    if(!$rests) {
						       $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                   $eucompte->setCode_membre($code_membre)
                                            ->setCode_membre_morale(NULL);
							} else  {
                                   $eucompte->setCode_membre(NULL)
                                            ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);
									
                        }
						
						// fin script de creation TE 
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						}
						
						
						$code_banque = "";
                        $referencepaie = "";
						
						if($type_souscription != "BPS")   {
							$type_bnp = "";
                            //$code_banque = $request->getParam("code_banque");
                            //$referencepaie   = $request->getParam("num_compte");
							
							$code_banque = $findbancaire->code_banque;
                            $referencepaie = $findbancaire->num_compte_bancaire;
							$type_bnp = $type_souscription;
							
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							    $url,
							    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
                                $db->commit();
							    $sessionmembreasso->error = $response->message;
							    $this->_redirect('/integrateur/addintegration/param_int/'.$param);
							} else {
							    $db->rollback();
							    $this->view->param = $param;
					            $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $sessionmembreasso->error = $response->message;
							    return;
							}
							curl_close($url);
							
					    } else {
						   if(substr($code_integrateur,19,1) == 'P')  {
							 $mont_bps =  ($montant_souscris) + (($montant_souscris * $panupp)/100);
						   } else {
							 $mont_bps =  ($montant_souscris) + (($montant_souscris * $panupm)/100);
						   }
						   $bpssouscription->setBps_demande($request->getParam("bps_demande"));
						   $bpssouscription->setMontant_bps_souscription($mont_bps);
						   $bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $bpssouscription->setId_mstiers($id_mstiers);
						   $bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
						   $bpssouscription->setCode_smcipn(NULL);
						   $bpssouscription->setAllouer(0);
                           $m_bpssouscription->save($bpssouscription);
							
						   $db->commit();
						   if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						   } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
						   }
						   $this->_redirect('/integrateur/addintegration/param_int/'.$param);
					   }	
							
					}	
					
					} catch(Exception $exc) {				   
				        $db->rollback();
					    $this->view->param = $param;
					    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                        return;
			        }
			} else {
				$this->view->param = $param;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
		}
	}
	
	
	
	
	
	public  function  addintegrationkitAction()   {
	    /* page public/addintegration - Ajout d'une integration */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		
		$param = (int) $this->_request->getParam('param_int');
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
		$select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);
		 
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		 
		$this->view->param = $param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		$this->view->formations = $formations;
		$this->view->montant_bc = $montant_bc;
		
		$request = $this->getRequest();
		if($request->isPost())  {
	        if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			    && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!="" && $_POST['integrateur_montant'] > 0			   
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
		        
				    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction(); 
                    try {
				        $membre = new Application_Model_EuMembre();
	                    $m_map  = new Application_Model_EuMembreMapper();
					    $membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                        $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
						
						$comptebancaire = new Application_Model_EuCompteBancaire();
                        $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
						
						$db_convention = new Application_Model_DbTable_EuConvention();
				        $db_franchise = new Application_Model_DbTable_EuFranchise();
				        $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
					    $bpssouscription = new Application_Model_EuBpsSouscription();
                        $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
						
						$ville = new Application_Model_EuVille();
	                    $m_ville  = new Application_Model_EuVilleMapper();
					
					    $param = (int) $this->_request->getParam('param_int');
					    $date_id = Zend_Date::now();
					    $id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;
						
						$bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						
						$cycle = new Application_Model_EuCycleFormation();
                        $m_cycle = new Application_Model_EuCycleFormationMapper();
					
					    $membre_integrateur = $request->getParam("code_membre");
						$findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($membre_integrateur);
					    $code_membre_integrateur = '';   
					    $integrateur_montant = $request->getParam("integrateur_montant");
					    $integrateur_type = $request->getParam("integrateur_type");
					    $statut = $request->getParam("liste");
					    $programme = $request->getParam("programme");
						$type_kit = $request->getParam("kit");
					    $multiple = "";
					    $mont_msbcm = "";
					    $type_souscription = "";
					    $bps_demande = "";
					    $delai = "";
						
						$avecfs = false;
					    $mbc  = 0;
					    $vbc  = 0;
					    $mfs  = 0;
					    $vfs  = 0;
					    $mmat = 0;
					    $vmat = 0;
					    $mci  = 0;
					    $vci  = 0;
					    $mass = 0;
					    $vass = 0;
					    $mcb = 0;
					    $vcb = 0;
						
						$dist_peripherique = NULL;
						$dist_connectivite = NULL;
						$dist_assurance    = NULL;
						$id_cycle_formation = NULL;
						
					
					    $mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					    $mont_bc = 0;
					    $bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					    $bnpnmps  = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					    $m_typeintegrateur->find($integrateur_type,$typeintegrateur);
						
						if($programme == "CM") {
					        $type_souscription = $request->getParam("type_souscription_cm");		
					    } else if($programme == "BC") {
					        $type_souscription = $request->getParam("type_souscription_bc");
					    }
						
						if(substr($membre_integrateur,19,1) == 'P')  {
					        $findmembre = $m_map->find($membre_integrateur,$membre);
					        if($findmembre == false) {
						        $db->rollback();
					            $this->view->param = $param;
						        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					            return;
					        }
						
						    if($membre->desactiver != 0) {
							    $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							    return;
						    }
					    } else {
						    $findmembre = $m_mapmoral->find($_POST['code_membre'],$membremoral);
						    if($findmembre == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					            return;
						    }
						    if($membremoral->desactiver != 0) {
							    $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							    return;
						    }
					    }
						
						if($findbancaire == NULL) {
					        $db->rollback();
					        $this->view->param = $param;
					        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
					        $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					        return;
				        }
						
						
						$select = $db_convention->select();
				        $select->where('code_membre like  ?', $membre_integrateur);
				        $rowsconvention = $db_convention->fetchRow($select);
				  
				        if(count($rowsconvention) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
					       $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                           return;
				        }
					
					    if(substr($membre_integrateur,19,1) == 'M')  {
				           $select = $db_franchise->select();
				           $select->where('code_membre_franchise like  ?', $membre_integrateur);
				           $rowsfranchise = $db_franchise->fetchRow($select);
				  
				           if(count($rowsfranchise) == 0) {
					          $db->rollback();
			                  $this->view->param = $param;
					          $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                              return;
				           }
					    }
				   
				        $select = $db_convention_eli->select();
				        $select->where('code_membre like  ?', $membre_integrateur);
				        $rowseli = $db_convention_eli->fetchRow($select);
				  
				        if(count($rowseli) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
					       $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                           return;
				        }
						
						if($typeintegrateur->montant_param > $integrateur_montant) {
					        $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;
					    }
						
						if($programme == "CM" && $statut == "AvecListe") {
					        $multiple = $integrateur_montant/$mont_caps;		
				        } elseif($programme == "BC" && $statut == "AvecListe") {
                            if(isset($_POST['mbc']) && $_POST['mbc'] == 1) {
						        $mbc = floor(Util_Utils::getParametre('MBC','valeur'));
							    $mont_bc = $request->getParam("montant_bc");
							    $vbc = 1;
							    if($type_kit == "KITSU") {
								    if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						              $mont_msbcm = $mont_bc * $bnpmps;					
						            } else {
						              $mont_msbcm = $mont_bc * $bnpnmps;				
						            }
								
							    } elseif($type_kit == "KITTECH") {
								    $id_cycle_formation = $request->getParam("id_cycle_formation");
								    $findcycle = $m_cycle->find($id_cycle_formation,$cycle);
								    $mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
							    }
					        }
						
						if(isset($_POST['mfs']) && $_POST['mfs'] == 1) {
						    $mfs = floor(Util_Utils::getParametre('CAPS','valeur'));
							$vfs = 1;
							$avecfs = true;
					    }
						
						if(isset($_POST['mmat']) && $_POST['mmat'] == 1) {
						    //$mmat = floor(Util_Utils::getParametre('MMAT','valeur'));
							$mmat = $request->getParam("montant_peripherique");
							$vmat = 1;
							$dist_peripherique = $request->getParam("dist_peripherique");
							
							$finddistperi = $m_mapmoral->find($dist_peripherique,$membremoral);
						    if($finddistperi == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_peripherique."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mci']) && $_POST['mci'] == 1) {
						    $mci = floor($request->getParam("montant_connectivite")) * floor(Util_Utils::getParametre('MSBCri','PS'));
							$vci = 1;
							$dist_connectivite = $request->getParam("dist_connectivite");
							
							$finddistcon = $m_mapmoral->find($dist_connectivite,$membremoral);
						    if($finddistcon == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_connectivite."  est introuvable ...";
					            return;
						    }
							
					    }
						
						if(isset($_POST['mass']) && $_POST['mass'] == 1) {
						    //$mass = floor(Util_Utils::getParametre('MASS','valeur'));
							$mass = $request->getParam("montant_assurance");
							$vass = 1;
							$dist_assurance = $request->getParam("dist_assurance");
							
							$finddistass = $m_mapmoral->find($dist_assurance,$membremoral);
						    if($finddistass == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_assurance."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mcb']) && $_POST['mcb'] == 1) {
						    //$mcb = floor(Util_Utils::getParametre('MCB','valeur'));
							$mcb = $request->getParam("montant_compte");
							$vcb = 1;
					    }
						
						$mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                        $multiple = $integrateur_montant/$mont_msbcm;                            
							
					    }
						
						/*
						elseif($programme == "BC" && $statut == "SansListe" && 
					        ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                            || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                            || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
						
						    if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						        $mont_msbcm = $mont_bc * $bnpmps;
							    $mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                                $multiple = $integrateur_montant/$mont_msbcm;							
						    } else {
						        $mont_msbcm = $mont_bc * $bnpnmps;
							    $mont_msbcm = $mont_msbcm + $mfs + $mmat + $mci + $mass + $mcb;
                                $multiple = $integrateur_montant/$mont_msbcm;							
						    } 
						
					    } */
						
						if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				            $db->rollback();
					        $this->view->param = $param;
					        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				            $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				            return;
				        }


                        if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				            $db->rollback();
					        $this->view->param = $param;
					        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				            $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm." ".$multiple;
				            return;
				        }
						
						/*
						if(stripos($multiple, ".") != FALSE && $programme == "BC" && $statut == "SansListe" && 
					        ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                            || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                            || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
							
						    $db->rollback();
					        $this->view->param = $param;
					        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				            $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				            return;	
					    } */
						
						if(substr($membre_integrateur,19,1) == 'P' &&  ($integrateur_type == 21  || $integrateur_type == 24 )) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Seuls les personnes morales sont autorisées à effectuer cette opération ....";
					        return;
					    }
						
						$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					    if(count($bon_neutre) == 0) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Votre Code BAn  incorrect ...";
                            return; 
					    }
					  
					    if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Montant restant du BAn est insuffisant ...";
                            return; 
					    }
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
						    $bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						    $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					        $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
							
							if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $this->view->error = "Montant restant du BAn est insuffisant ...";
                                return; 
						    }
						   
						    if($membre_integrateur != $code_membre_integrateur) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                                return;   
						    }
							
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
					        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $integrateur_montant;
					        $nbre_lignesdetbon = count($lignesdetbon);
                            while($reste > 0 && $i < $nbre_lignesdetbon) {
                                $lignedetbon = $lignesdetbon[$i];
                                $id = $lignedetbon->getBon_neutre_detail_id();
						        $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                        $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									    foreach ($appro_detail as $appro) {
									        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            } 
                                        }
								  
								    }
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);
								 
                                } else  {
							        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                        $appro_montant_solde = $reste;
                                        foreach ($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }
                                        }								   
                                    }
							   
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);
						            $reste = 0;
                                }							   
                                $i++;
                            }	 
						    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
							
							$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						    $bon_neutre2M->update($bon_neutre2);
						  
						    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						    $integrateur_montant_kacm = 0;
						    $integrateur_montant_bc = 0;
						  
						    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    if((isset($_POST['mfs']) && $_POST['mfs'] == 1)) {
							    $integrateur_montant_kacm = $multiple * $mfs;
							    $integrateur_montant_bc = $integrateur_montant - $integrateur_montant_kacm;
							
							    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_bc);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							
							    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_kacm);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
						    
						    } else {
						        $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						           $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						           $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						        $bon_neutre_utiliseM->save($bon_neutre_utilise);
						    }
							
					        $m_depotvente = new Application_Model_EuDepotVenteMapper();
				            $depotvente = new Application_Model_EuDepotVente();

                            $m_mstiers = new Application_Model_EuMstiersMapper();
				            $mstiers = new Application_Model_EuMstiers();
							 
							 
						    $finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					        $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							
							$eusouscription = new Application_Model_DbTable_EuSouscription();
						    $select = $eusouscription->select();
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                            $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						    } else {
						        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						    }
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
						
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						if(isset($_POST["souscription_login"])) {
                        if($finddepot == NULL && $findmstiers == NULL) {						
	                       $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
						}
						if($finddepot == NULL && $findmstiers == NULL && $rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" ) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Login déjà existant ...";
						   return;
	                    }  else if($finddepot == NULL && $findmstiers == NULL && $request->getParam("souscription_passe") != $request->getParam("confirme") && $request->getParam("souscription_passe") != "") {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Mot de passe incorret ...";
						   return;
	                    }
						}
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						//$compteur_souscription = $souscription_mapper->findConuter() + 1;
						//$souscription->setSouscription_id($compteur_souscription);
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						  $souscription->setSouscription_ville($membre->ville_membre);
                          $souscription->setSouscription_quartier($membre->quartier_membre);
                          $souscription->setSouscription_email($membre->email_membre);
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						  $souscription->setSouscription_ville($membremoral->ville_membre);
                          $souscription->setSouscription_quartier($membremoral->quartier_membre);
                          $souscription->setSouscription_email($membremoral->email_membre);
						}
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
						
                        if(isset($_POST["integrateur_type_candidat"])) {
                           $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                        } else {
                           $souscription->setSouscription_type_candidat(NULL);
                        }
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();
						
						$cmfh = new Application_Model_EuCmfh();
                        $cmfh_mapper = new Application_Model_EuCmfhMapper();
					
			            if(isset($_POST["integrateur_type_candidat"]))  {
				            $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($request->getParam("code_membre"),$request->getParam("integrateur_type_candidat"));
				            if($findrowscmfh == false)  {
					            $compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					            $cmfh->setId_cmfh($compteur_cmfh);
				                $cmfh->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				                $cmfh->setId_type_candidat($request->getParam("integrateur_type_candidat"));
					            $cmfh->setCode_membre($request->getParam("code_membre"));
                                $cmfh->setCode_zone_create($request->getParam("code_zone"));
                                $cmfh->setId_pays($request->getParam("id_pays"));
                                $cmfh->setId_region($request->getParam("id_region"));
                                $cmfh->setId_prefecture($request->getParam("id_prefecture"));
                                $cmfh->setId_canton($request->getParam("id_canton"));
					            $cmfh_mapper->save($cmfh);
			                }
			            }
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						
						$a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						
						if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22)  {
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						   
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso(0);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        $a->setIntegrateurCanton($request->getParam("id_canton"));
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("code_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);

                        // Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";
						
						if($finddepot == NULL && $findmstiers == NULL) {
							//$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
							} else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            $membreasso->setMembreasso_id($compteur_membreasso);
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
						
						// insertion dans les tables eu_mstiers
						$id_souscription = $compteur_souscription;
                        //$id_mstiers = $m_mstiers->findConuter() + 1;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("code_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
								  
                        //$mstiers->setId_mstiers($id_mstiers);
						if((isset($_POST['mfs']) && $_POST['mfs'] == 1)) {
							$mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_kacm);
					        $mstiers->setType_souscription("CAPS");
                            $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							
							$mstiers->setDistributeur_peripherique(NULL);
							$mstiers->setDistributeur_connectivite(NULL);
							$mstiers->setDistributeur_assurance(NULL);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
							
							
							$mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_bc);
					        $mstiers->setType_souscription($type_souscription);  
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);  
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
							$mstiers->setDistributeur_connectivite($dist_connectivite);
							$mstiers->setDistributeur_assurance($dist_assurance);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
							
						} else {
							
						    $mstiers->setCode_membre($code_integrateur);
						    $mstiers->setMontant_souscris($montant_souscris);
						    $mstiers->setMontant_utilise(0);
						    $mstiers->setMontant_restant($montant_souscris);
						    $mstiers->setType_souscription($type_souscription);
							
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation); 
							
					        $mstiers->setId_souscription($id_souscription);
					        $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
						    $mstiers->setStatut_mstiers($statut);
						
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
							$mstiers->setDistributeur_connectivite($dist_connectivite);
							$mstiers->setDistributeur_assurance($dist_assurance);
							   
					        if($param == 4) {
							   $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						       $mstiers->setType_souscripteur("USER");  								  
					        } else {
							   $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
						}
						
                        $id_mstiers = $db->lastInsertId();						
							   
                        //script de creation de TE de prestation
						$eucompte = new Application_Model_EuCompte();
						$m_compte = new Application_Model_EuCompteMapper();
									
						$prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
									
                        $te = new Application_Model_EuTegc();
						$m_te = new Application_Model_EuTegcMapper();
						$code_te = "";
						$code_tegc = "";
						$nom_tegc = "";
						
						$code_membre = $request->getParam("code_membre");
							   
						if(substr($code_membre,19,1)=='P') {
						    $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						} else {
							$nom_tegc = $membremoral->raison_sociale;
					    }
									
						$code_zone     = $request->getParam("code_zone");
			            $id_pays       = $request->getParam("id_pays");
			            $id_region     = $request->getParam("id_region");
			            $id_prefecture = $request->getParam("id_prefecture");
			            $id_canton     = $request->getParam("id_canton");
									
						$num_compte = 'NB-TPAGCP-'.$code_membre;
				        $res = $m_compte->find($num_compte,$eucompte);
						
						$num_comptets = 'NB-TSGCP-'.$code_membre;
				        $rests = $m_compte->find($num_comptets,$eucompte);
									
						if(!$rests) {
						    $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                   $eucompte->setCode_membre($code_membre)
                                            ->setCode_membre_morale(NULL);
							} else  {
                                   $eucompte->setCode_membre(NULL)
                                            ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);
									
                        }
						
						// fin script de creation TE 
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						} 
						
						/* else {
							
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
							$code_tegc = $code_te;
						}
						*/
						
						$code_banque = "";
                        $referencepaie = "";
						
						if($type_souscription != "BPS")   {
							$type_bnp = "";
                            //$code_banque = $request->getParam("code_banque");
                            //$referencepaie   = $request->getParam("num_compte");
							
							$code_banque = $findbancaire->code_banque;
                            $referencepaie = $findbancaire->num_compte_bancaire;
							$type_bnp = $type_souscription;
							
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							    $url,
							    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
                                $db->commit();
							    $sessionmembreasso->error = $response->message;
							    $this->_redirect('/integrateur/addintegration/param_int/'.$param);
							   
							} else {
							    $db->rollback();
							    $this->view->param = $param;
					            $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $sessionmembreasso->error = $response->message;
							    return;
							}
							curl_close($url);
					    } else {
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($request->getParam("integrateur_montant"));
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(NULL);
							$bpssouscription->setAllouer(0);
                            $m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addintegration/param_int/'.$param);
						}
				
				    }
		
		            } catch(Exception $exc) {				   
				        $db->rollback();
					    $this->view->param = $param;
					    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                        return;
			        }
			}   else  {
			    $this->view->param = $param;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
			
		}
	
	}
	
	
	public  function  addintegrationpreAction()  {
	    /* page public/addintegration - Ajout d'une integration */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	    
		$m_ville  = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_souscription = new Application_Model_EuSouscriptionMapper();
		
		$param = (int)$this->_request->getParam('param_int');
	    $this->view->param = $param;

	    $t_canton = new Application_Model_DbTable_EuCanton();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
        $m_ville = new Application_Model_EuVilleMapper ();

	    $cantons = $t_canton->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;

        $cantons  = $t_canton->fetchAll();
        $villes   = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes  = $villes;
	    $request = $this->getRequest();
		
		if($request->isPost())  {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
			&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
			&& isset($_POST['integrateur_email']) && $_POST['integrateur_email']!=""
            && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""
			&& isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
				
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
                    $membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
			        $membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					$param = (int) $this->_request->getParam('param');
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();

					$date_id = Zend_Date::now();
					$param = (int)$this->_request->getParam('param_int');
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;


                    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						
					$membre_integrateur  = $request->getParam("code_membre");
					$integrateur_type  = $request->getParam("integrateur_type");
					$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
					$code_membre_integrateur = '';
					
					$integrateur_montant = $request->getParam("integrateur_montant");
					$integrateur_nombre  = $request->getParam("integrateur_nombre");
					   
					$montant_souscription = $integrateur_nombre * 2187.5;

                    if(substr($membre_integrateur,19,1) == 'P')  {
						   $findmembre = $m_map->find($membre_integrateur,$membre);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmembreasso->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						   }
					} else {
						    $findmembre = $m_mapmoral->find($_POST['code_membre'],$membremoral);
						    if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmembreasso->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						    }
				    }
					
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->integrateur_email   = $request->getParam("integrateur_email");
					  $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					  $this->view->id_ville   = $request->getParam("integrateur_ville");
					  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					  $this->view->code_membre = $membre_integrateur;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $sessionmembreasso->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'M')  {
				       $select = $db_franchise->select();
				       $select->where('code_membre_franchise like  ?', $membre_integrateur);
				       $rowsfranchise = $db_franchise->fetchRow($select);
				  
				       if(count($rowsfranchise) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                           return;
				       }
					}
				   
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->integrateur_email   = $request->getParam("integrateur_email");
					  $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					  $this->view->id_ville   = $request->getParam("integrateur_ville");
					  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					  $this->view->code_membre = $membre_integrateur;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $sessionmembreasso->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					

                    if(substr($membre_integrateur,19,1) == 'M' &&  ($integrateur_type == 1  || $integrateur_type == 3 ||  $integrateur_type == 5 || $integrateur_type == 7))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
				        $this->view->id_ville   = $request->getParam("integrateur_ville");
					    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $sessionmembreasso->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					    return;
				    
					}
					
					if(substr($membre_integrateur,19,1) == 'P' &&  ($integrateur_type == 21  || $integrateur_type == 24 ))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
				        $this->view->id_ville   = $request->getParam("integrateur_ville");
					    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $sessionmembreasso->error = "Seuls les personnes morales sont autorisées à effectuer cette opération ....";
					    return;
					}

                    if($typeintegrateur->montant_param >  $integrateur_montant) {
					        $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						    $this->view->id_ville   = $request->getParam("integrateur_ville");
						    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						    $this->view->code_membre = $membre_integrateur;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $sessionmembreasso->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;
					    }


					    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					    if(count($bon_neutre) == 0) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->integrateur_email   = $request->getParam("integrateur_email");
						  $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						  $this->view->id_ville   = $request->getParam("integrateur_ville");
						  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						  $this->view->code_membre = $membre_integrateur;
						  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                          $sessionmembreasso->error = "Votre Code BAn  incorrect ...";
                          return;
					    }
						 
						if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                           return;
						}
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
                            $bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						    $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;

					        $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                            $cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);
                            
                        	if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
						        $db->rollback();
					            $this->view->param = $param;
						        $this->view->integrateur_email   = $request->getParam("integrateur_email");
						        $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						        $this->view->id_ville   = $request->getParam("integrateur_ville");
						        $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						        $this->view->code_membre = $membre_integrateur;
						        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $sessionmembreasso->error = "Montant restant du BAn est insuffisant ... ".$cumulbon;
                                return;
						    }

						    if(($membre_integrateur != $code_membre_integrateur)) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $sessionmembreasso->error = "Le code membre du CMFH doit être celui du bon neutre ...";
                              return;
						    }

                            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $montant_souscription;
					        $nbre_lignesdetbon = count($lignesdetbon);
                            while ($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
									if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
									   
									}
									
									$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						            $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						            //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						            //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						            $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						            if(substr($membre_integrateur,19,1) == 'P')  {
						               $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						            } else {
						               $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						            }
						            $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						            $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						            $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						            $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                                    $bon_neutre_utilise->setUsertable("membreasso");
                                    $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						            $bon_neutre_utiliseM->save($bon_neutre_utilise);
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);

						  

                                 } else {
								    
									if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);

						            $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						            $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						            //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						            //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						            $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						            if(substr($membre_integrateur,19,1) == 'P')  {
						               $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						            } else {
						              $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						            }
						            $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						            $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						            $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						            $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                                    $bon_neutre_utilise->setUsertable("membreasso");
                                    $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						            $bon_neutre_utiliseM->save($bon_neutre_utilise);

						            $reste = 0;
                                 }
                               $i++;
                             }

						  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						  //$bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						  $bon_neutre2M->update($bon_neutre2);

						  /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						  //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						  //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						  } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						  }
						  $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						  $bon_neutre_utiliseM->save($bon_neutre_utilise);*/

                           $m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();
						$finddepot = $m_depotvente->fetchAllByMembre($_POST['code_membre']);

						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                       $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}

						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }

						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));

						if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $request->getParam("souscription_passe") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Mot de passe incorret ...";
						   return;
	                    }

						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

						//$compteur_souscription = $souscription_mapper->findConuter() + 1;
						//$souscription->setSouscription_id($compteur_souscription);

						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                        $souscription->setSouscription_banque(null);

						$souscription->setSouscription_montant($montant_souscription);
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        if(isset($_POST["integrateur_type_candidat"])) {
                            $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                        } else {
                            $souscription->setSouscription_type_candidat(NULL);
                        }

                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));

                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }

			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }

						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$cmfh = new Application_Model_EuCmfh();
                             $cmfh_mapper = new Application_Model_EuCmfhMapper();
					
			     if(isset($_POST["integrateur_type_candidat"])) {
				  $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($request->getParam("code_membre"),$request->getParam("integrateur_type_candidat"));
				  if($findrowscmfh == false)  {
					$compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					$cmfh->setId_cmfh($compteur_cmfh);
					$cmfh->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					$cmfh->setId_type_candidat($request->getParam("integrateur_type_candidat"));
					$cmfh->setCode_membre($request->getParam("code_membre"));
                                        $cmfh->setCode_zone_create($request->getParam("code_zone"));
                                        $cmfh->setId_pays($request->getParam("id_pays"));
                                        $cmfh->setId_region($request->getParam("id_region"));
                                        $cmfh->setId_prefecture($request->getParam("id_prefecture"));
                                        $cmfh->setId_canton($request->getParam("id_canton"));
				        $cmfh_mapper->save($cmfh);
				   }
			       }

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(2);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

						///////////////////////////////////////////// validation technopole //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(3);
						$souscriptionM->update($souscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


                          $nombre_compte = $request->getParam("integrateur_nombre");

                        if($nombre_compte >= 10)   {
						   include("Transfert.php");
		                   if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                      $chemin = "integrateurs";
		                      $file = $_FILES['integrateur_diplome']['name'];
		                      $file1='integrateur_diplome';
		                      $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                   } else { $integrateur_diplome = ""; }

						   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                   } else {$integrateur_document = "";}

						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();

						   //$compteur = $ma->findConuter() + 1;
						   //$a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);

						   if($integrateur_type == 1 || $integrateur_type == 2 || $integrateur_type == 3|| $integrateur_type == 4 || $integrateur_type == 5 || $integrateur_type == 6 || $integrateur_type == 7 || $integrateur_type == 8
							     || $integrateur_type == 25 || $integrateur_type == 26 || $integrateur_type == 27 || $integrateur_type == 28) {
                                 $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                 $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                 $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                           }

						    if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22)  {
                                 if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                            }

						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                           $a->setIntegrateurCanton($request->getParam("integrateur_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("code_membre"));
                           $ma->save($a);
						   
						   $compteur = $db->lastInsertId();

						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);

                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);

						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();

						   //$cpte = $m_complement->findConuter() + 1;
						   //$complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $m_complement->save($complement);

						   $code_agence = '';
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
							  $membreasso   = new Application_Model_EuMembreasso();
                              $m_membreasso = new Application_Model_EuMembreassoMapper();
		                      $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

							  $association = new Application_Model_EuAssociation();
                              $m_association = new Application_Model_EuAssociationMapper();
		                      $m_association->find($membreasso->membreasso_association,$association);
		                      $code_agence = $association->code_agence;
                            }

							   // Création du compte utilisateur intégrateur
							   $souscription = new Application_Model_EuSouscription();
                               $m_souscription = new Application_Model_EuSouscriptionMapper();
		                       $m_souscription->find($integrateur->integrateur_souscription,$souscription);
							   $integrateur_souscription = $integrateur->integrateur_souscription;

							   $date_id = Zend_Date::now();
                               $association = new Application_Model_EuAssociation();
                               $association_mapper = new Application_Model_EuAssociationMapper();

						       $login = "";
						       $password = "";

							   if($finddepot == NULL) {
							       //$compteur_association = $association_mapper->findConuter() + 1;
                                   //$association->setAssociation_id($compteur_association);
								   
                                   $association->setAssociation_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								   } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                   }

                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);
								   
								   $compteur_association = $db->lastInsertId();

								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();

							       if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                      $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)];
                                     }
								     $password = $login.$login;
								   } else {
								     $login = $souscription->souscription_login;
								     $password = $souscription->souscription_passe;
								   }

								   //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                   //$membreasso->setMembreasso_id($compteur_membreasso);
                                   $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								   } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                   }

                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);

						        }

							      // Transfert
								  $eusouscription = new Application_Model_EuSouscription();
		                          $souscriptionM = new Application_Model_EuSouscriptionMapper();

								  $date = new Zend_Date();
		                          $compte_map = new Application_Model_EuCompteMapper();
                                  $compte      = new Application_Model_EuCompte();
			                      $sms_money   = new Application_Model_EuSmsmoney();
                                  $money_map   = new Application_Model_EuSmsmoneyMapper();

			                      $det_sms   = new Application_Model_EuDetailSmsmoney();
			                      $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                      $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                      $det_vtesms  = new Application_Model_EuDetailVentesms();

								  // insertion dans la table eu_depot_vente
				                  $m_dvente = new Application_Model_EuDepotVenteMapper();
				                  $dvente = new Application_Model_EuDepotVente();

								  $membretierscode = new Application_Model_EuMembretierscode();
                                  $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

								  $fcaps = Util_Utils::getParametre('CAPS','valeur');

								  $membre_pbf = '0000000000000000001M';
	                              $code_compte_pbf = "NN-TR-".$membre_pbf;
			                      $ret = $compte_map->find($code_compte_pbf,$compte);

								  $souscriptionM->find($compteur_souscription,$eusouscription);

								  $mobile = $eusouscription->souscription_mobile;
								  $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
								  $nbre_compte = $eusouscription->souscription_nombre;

								  $montant = $nbre_compte * $fcaps;
								  // Traitement des produits CAPS
								  $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
								  $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');

								  //$countdvente = $m_dvente->findConuter() + 1;
				                  //$dvente->setId_depot($countdvente)
								  
					              $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                  $dvente->setCode_membre($_POST['code_membre']);
			                      $dvente->setCode_produit('CAPS');
				                  $dvente->setMont_depot($montant);
				                  $dvente->setMont_vendu(0);
				                  $dvente->setSolde_depot($montant);
				                  $dvente->setId_utilisateur(null);
				                  $dvente->setType_depot('AvecListe');
				                  $dvente->setSouscription_id($compteur_souscription);
				                  $m_dvente->save($dvente);

								  for($i = 0; $i < $nbre_compte; $i++) {
									  $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
									  $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
									  $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                      $membretierscode->setMembretierscode_membretiers(0);
                                      $membretierscode->setMembretierscode_code($membretierscode_code);
                                      $membretierscode->setMembretierscode_souscription($compteur_souscription);
                                      $membretierscode->setPublier(0);
                                      $membretierscode->setCode_membre(NULL);
									  $membretierscode->setAllocation_cmfh_id(NULL);
                                      $membretierscode_mapper->save($membretierscode);
								   }

								   $compteur_sms = Util_Utils::findConuter() + 1;
				                   Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');

								   // script de creation de TE de prestation
								   $eucompte = new Application_Model_EuCompte();
								   $m_compte = new Application_Model_EuCompteMapper();
									
								   $prk = new Application_Model_EuPrk();
                                   $m_prk = new Application_Model_EuPrkMapper();
									
                                    $te   = new Application_Model_EuTegc();
									$m_te = new Application_Model_EuTegcMapper();
									$code_te = "";
									$nom_tegc = "";
									
									$code_membre = $_POST['code_membre'];
									if(substr($code_membre,19,1)=='P') {
									   $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
									} else {
									   $nom_tegc = $membremoral->raison_sociale;
									}
									
									$code_zone     =   $_POST['code_zone'];
			                        $id_pays       =   $_POST['id_pays'];
			                        $id_region     =   $_POST['id_region'];
			                        $id_prefecture =   $_POST['id_prefecture'];
			                        $id_canton     =   $_POST['id_canton'];
									
								    $num_compte = 'NB-TPAGCP-'.$code_membre;
				                    $res = $m_compte->find($num_compte,$eucompte);
									
									if(!$res) {
									    $eucompte->setCode_cat('TPAGCP')
                                                 ->setCode_compte($num_compte)
												 ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TPAGCP')
                                                 ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
										
										$code_te = $m_te->getLastTegcByMembre($code_membre);
										if($code_te == NULL) {
			                               $code_te = 'TEGCP'.$code_membre. '00001';         
			                            } else {
			                               $num_ordre = substr($code_te, -5);
                                           $num_ordre++;
                                           $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                            }
										
										$te->setCode_tegc($code_te);
			                            $te->setId_filiere(NULL);
			                            $te->setMdv(12);
			                            $te->setTranche_payement(1);
										if(substr($code_membre,19,1)=='M') {
			                               $te->setCode_membre($code_membre);
										} else {
                                           $te->setCode_membre_physique($code_membre);
                                        }										
			                            $te->setMontant(0);
			                            $te->setMontant_utilise(0);
			                            $te->setSolde_tegc(0);
			                            $te->setId_utilisateur(NULL);
			                            $te->setNom_tegc($nom_tegc);
			                            $te->setNom_produit("Prestation");
			                            $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					                    $te->setType_tegc("PRESTATAIRE");
										$te->setRecurrent_illimite(0);
										$te->setRecurrent_limite(0);
										$te->setNonrecurrent(1);
										$te->setPeriode1(0);
										$te->setPeriode2(0);
										$te->setPeriode3(0);
										$te->setFormel(0);
										$te->setRegime_tva(0);
										$te->setSpecial(0);
										$te->setOrdinaire(1);
										$te->setSubvention(0);
										
										$te->setCode_zone($code_zone);
				                        $te->setId_pays($id_pays);
				                        $te->setId_region($id_region);
				                        $te->setId_prefecture($id_prefecture);
				                        $te->setId_canton($id_canton);

                                        $m_te->save($te);

                                        $id_prk = $m_prk->findConuter() + 1;
					                    $prk->setId_prk($id_prk);
					                    $prk->setCode_tegc($code_te);
					                    $prk->setValeur(7);
					                    $m_prk->save($prk);
                                        										
									}
									
									$num_comptets = 'NB-TSGCP-'.$code_membre;
				                    $rests = $m_compte->find($num_comptets,$eucompte);
									
									if(!$rests) {
									    $eucompte->setCode_cat('TSGCP')
                                                 ->setCode_compte($num_comptets)
												 ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TSGCP')
                                                 ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
									
                                    }
								    // fin script de creation TE
								   
								    $db->commit();
								    if($finddepot == NULL) {
								      $sessionmembreasso->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
								    } else {
								      $sessionmembreasso->error = "Opération bien effectuée ...";
								    }
								    $this->_redirect('/integrateur/addintegrationpre/param/'.$param);

						} else  {
						   $db->rollback();
						   $sessionmembreasso->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 10 ...";
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
						   return;
						}

                        

						  
					
					    }
					
				} catch (Exception $exc) {
			        $db->rollback();
			        $this->view->param = $param;
			        $this->view->integrateur_email   = $request->getParam("integrateur_email");
			        $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
			        $this->view->id_ville   = $request->getParam("integrateur_ville");
			        $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
			        $this->view->code_membre = $membre_integrateur;
			        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
		        }	
						
			} else {
			    $this->view->param = $param;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
		    
		}
		
	}
	

       
	public  function  addintegrateurAction()   {
	    /* page public/addintegrateur - Ajout d'un integrateur */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
	    $param = (int) $this->_request->getParam('param');
	    
	    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
        $typeintegrateurM = new Application_Model_EuTypeIntegrateurMapper();
        $typeintegrateurM->find($param,$typeintegrateur);
		
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		 
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		 
		$this->view->param = $param;
		$this->view->integrateur_montant = $typeintegrateur->montant_param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		 
		$request = $this->getRequest();
		if($request->isPost())  {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			    && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!="" && $_POST['integrateur_montant'] > 0			   
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  { 
                
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
                    $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
					$ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
					$param = (int) $this->_request->getParam('param');
					$m_typeintegrateur->find($param,$typeintegrateur);
						
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';   
					$integrateur_montant = $request->getParam("integrateur_montant");
					$statut = $request->getParam("liste");
					$programme = $request->getParam("programme");
					
					$multiple = "";
					$mont_msbcm = "";
					$type_souscription = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");		
					} else if($programme == "BC") {
					    $type_souscription = $request->getParam("type_souscription_bc");	
					}
					
					if(substr($membre_integrateur,19,1) == 'P')  {
					    $findmembre = $m_map->find($membre_integrateur,$membre);
					    if($findmembre == false) {
						   $db->rollback();
					       $this->view->param = $param;
					       //$this->view->id_ville   = $request->getParam("integrateur_ville");
					       //$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					       //$this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					       return;
					    }
						
						if($membre->desactiver == 1) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
						
						
					} else {
						$findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
							//$this->view->id_ville   = $request->getParam("integrateur_ville");
							//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							//$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					        return;
						}
						
						if($membremoral->desactiver == 1) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
						
					}
					  
					if($typeintegrateur->montant_param > $integrateur_montant) {
					    $db->rollback();
					    $this->view->param = $param;
					    //$this->view->id_ville   = $request->getParam("integrateur_ville");
						//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    //$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					    return;
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $integrateur_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						}   						
					}
					
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   //$this->view->id_ville = $request->getParam("integrateur_ville");
					   //$this->view->integrateur_quartier = $request->getParam("integrateur_quartier");
					   //$this->view->code_membre = $membre_integrateur;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }


                    if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   //$this->view->code_membre = $membre_integrateur;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm." ".$multiple;
				       return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'M' &&  ($param == 1  || $param == 3 ||  $param == 5 ||  $param == 7))  {
						$db->rollback();
					    $this->view->param = $param;
						//$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					    return;
					}
					
					/*  
					if(($param == 23) && (substr($membre_integrateur,19,1) == 'M')) {
					    $db->rollback();
					    $this->view->param = $param;
					    //$this->view->id_ville   = $request->getParam("integrateur_ville");
						//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    //$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les membres personnes physiques sont autorises a effectuer cette operation ...";
					    return;
					}
					*/
					  
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
						$db->rollback();
					    $this->view->param = $param;
						//$this->view->id_ville   = $request->getParam("integrateur_ville");
						//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						//$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Votre Code BAn  incorrect ...";
                        return; 
					}
					  
					if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
						$db->rollback();
					    $this->view->param = $param;
						//$this->view->id_ville   = $request->getParam("integrateur_ville");
						//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						//$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Montant restant du BAn est insuffisant ...";
                        return; 
					}
					   
					   
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
					       
						$bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						//$cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);
					   
						   
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						    $db->rollback();
					        $this->view->param = $param;
							//$this->view->id_ville   = $request->getParam("integrateur_ville");
							//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							//$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Montant restant du BAn est insuffisant ...";
                            return; 
						}
						   
						   
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->param = $param;
						    //$this->view->id_ville   = $request->getParam("integrateur_ville");
							//$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							//$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                            return;   
						}
						   
						   
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$i = 0;
					    $reste = $integrateur_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        } 
                                    }
								  
								}
								//Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);

						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						//$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						//$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
								 
                            } else  {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
							   
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						//$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						//$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
								 
						        $reste = 0;
                            }							   
                            $i++;
                        }
							 
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						$bon_neutre2M->update($bon_neutre2);
						  
						/*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						//$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						//$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							 
					    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

                        $m_mstiers = new Application_Model_EuMstiersMapper();
				        $mstiers = new Application_Model_EuMstiers();
							 
							 
						$finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					    $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   //$this->view->id_ville   = $request->getParam("integrateur_ville");
						   //$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   //$this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   //$this->view->id_ville   = $request->getParam("integrateur_ville");
						   //$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   //$this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						//$compteur_souscription = $souscription_mapper->findConuter() + 1;
						//$souscription->setSouscription_id($compteur_souscription);
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						  $souscription->setSouscription_ville($membre->ville_membre);
                          $souscription->setSouscription_quartier($membre->quartier_membre);
                          $souscription->setSouscription_email($membre->email_membre);
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						  $souscription->setSouscription_ville($membremoral->ville_membre);
                          $souscription->setSouscription_quartier($membremoral->quartier_membre);
                          $souscription->setSouscription_email($membremoral->email_membre);
						}
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						      
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						   
						//$compteur = $ma->findConuter() + 1;
						//$a->setIntegrateur_id($compteur);
						
                        $a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						
						/*   
						if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
						    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                            $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                            $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                            $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                        }*/
						   
						if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                            if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						   
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        
                        $a->setIntegrateurCanton($request->getParam("id_canton"));
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("integrateur_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						   
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);

                        // Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";

                        if($finddepot == NULL && $findmstiers == NULL) {
							//$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
							} else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            $membreasso->setMembreasso_id($compteur_membreasso);
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
							   
					    // insertion dans les tables eu_mstiers
						$id_souscription = $compteur_souscription;
                        //$id_mstiers = $m_mstiers->findConuter() + 1;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("integrateur_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
								  
                        //$mstiers->setId_mstiers($id_mstiers);
						$mstiers->setCode_membre($code_integrateur);
						$mstiers->setMontant_souscris($montant_souscris);
						$mstiers->setMontant_utilise(0);
						$mstiers->setMontant_restant($montant_souscris);
						$mstiers->setType_souscription($type_souscription);  
							  
					    $mstiers->setId_souscription($id_souscription);
					    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setType_mstiers($programme);
						$mstiers->setStatut_mstiers($statut);
							   
					    if($param == 21 || $param == 24) {
							$mstiers->setType_souscripteur("ODD");
						} else {
						    $mstiers->setType_souscripteur("CMFH");        								  
					    }
                        $m_mstiers->save($mstiers);
                        $id_mstiers = $db->lastInsertId();						
							   
                        //script de creation de TE de prestation
						$eucompte = new Application_Model_EuCompte();
						$m_compte = new Application_Model_EuCompteMapper();
									
						$prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
									
                        $te = new Application_Model_EuTegc();
						$m_te = new Application_Model_EuTegcMapper();
						$code_te = "";
						$code_tegc = "";
						$nom_tegc = "";
									
						$code_membre = $request->getParam("integrateur_membre");
							   
						if(substr($code_membre,19,1)=='P') {
						    $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						} else {
							$nom_tegc = $membremoral->raison_sociale;
					    }
									
						$code_zone     = $request->getParam("code_zone");
			            $id_pays       = $request->getParam("id_pays");
			            $id_region     = $request->getParam("id_region");
			            $id_prefecture = $request->getParam("id_prefecture");
			            $id_canton     = $request->getParam("id_canton");
									
						$num_compte = 'NB-TPAGCP-'.$code_membre;
				        $res = $m_compte->find($num_compte,$eucompte);
						
						/*
					    if(!$res)   {
						    $eucompte->setCode_cat('TPAGCP')
                                     ->setCode_compte($num_compte)
									 ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TPAGCP')
                                     ->setSolde(0);
												 
						    if(substr($code_membre,19,1)=='P') {		 
                                $eucompte->setCode_membre($code_membre)
                                         ->setCode_membre_morale(NULL);
							} else  {
                                $eucompte->setCode_membre(NULL)
                                         ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);
										
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
										
							$te->setCode_tegc($code_te);
			                $te->setId_filiere(NULL);
			                $te->setMdv(12);
			                $te->setTranche_payement(1);
						    if(substr($code_membre,19,1)=='M') {
			                    $te->setCode_membre($code_membre);
							} else {
                                $te->setCode_membre_physique($code_membre);
                            }
							
			                $te->setMontant(0);
			                $te->setMontant_utilise(0);
			                $te->setSolde_tegc(0);
			                $te->setId_utilisateur(NULL);
			                $te->setNom_tegc($nom_tegc);
			                $te->setNom_produit("Prestation");
			                $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $te->setType_tegc("PRESTATAIRE");
						    $te->setRecurrent_illimite(0);
						    $te->setRecurrent_limite(0);
							$te->setNonrecurrent(1);
						    $te->setPeriode1(0);
							$te->setPeriode2(0);
							$te->setPeriode3(0);
							$te->setFormel(0);
							$te->setRegime_tva(0);
							$te->setSpecial(0);
							$te->setOrdinaire(0);
							$te->setSubvention(0);
										
						    $te->setCode_zone($code_zone);
				            $te->setId_pays($id_pays);
				            $te->setId_region($id_region);
				            $te->setId_prefecture($id_prefecture);
				            $te->setId_canton($id_canton);

                            $m_te->save($te);

                            //$id_prk = $m_prk->findConuter() + 1;
					        //$prk->setId_prk($id_prk);
					        $prk->setCode_tegc($code_te);
					        $prk->setValeur(null);
					        $m_prk->save($prk);
                                        										
						}
						
						*/
									
					    $num_comptets = 'NB-TSGCP-'.$code_membre;
				        $rests = $m_compte->find($num_comptets,$eucompte);
									
						if(!$rests) {
						    $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                   $eucompte->setCode_membre($code_membre)
                                            ->setCode_membre_morale(NULL);
							} else  {
                                   $eucompte->setCode_membre(NULL)
                                            ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);
									
                        }
							
						// fin script de creation TE 
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						} else {
                            //$eutegc = new Application_Model_DbTable_EuTegc();
                            //$select = $eutegc->select();
							//if(substr($code_membre,19,1)=='P') {
                            //$select->where("code_membre_physique like ? ", $code_membre);
							//} else {
							//$select->where("code_membre like ? ", $code_membre);
							//}
                            //$select->limit(1);
                            //$rowseutegc = $eutegc->fetchRow($select);
                            //$code_tegc = $rowseutegc->code_tegc;
							
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
							$code_tegc = $code_te;
						}
						
						$code_banque = "";
                        $referencepaie = "";
						
						if($type_souscription != "BPS")   {
							$type_bnp = "";
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
							$type_bnp = $type_souscription;
							
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							    $url,
							    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
							    //$db->commit();
							    //if($finddepot == NULL && $findmstiers == NULL) {
							    //$sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						            //} else {
							    //$sessionmembreasso->error = "Operation bien effectuee ...".$response->message;
							    //}

                                $db->commit();
							    $sessionmembreasso->error = $response->message;
							    $this->_redirect('/integrateur/addintegrateur/param/'.$_POST['integrateur_type']);
							   
							} else {
							    $db->rollback();
							    $this->view->param = $param;
					            //$this->view->id_ville   = $request->getParam("integrateur_ville");
					            //$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					            //$this->view->code_membre = $membre_integrateur;
					            $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							    //$sessionmembreasso->error = "Echec operation ... : ".$error.$response->resultat;
                                $sessionmembreasso->error = $response->message;
							    return;
							}
							curl_close($url);
							
					    } else {
							//$id_bps_souscription = $m_bpssouscription->findConuter() + 1;
							//$bpssouscription->setId_bps_souscription($id_bps_souscription);
							
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($request->getParam("integrateur_montant"));
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(NULL);
							$bpssouscription->setAllouer(0);
                            $m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addintegrateur/param/'.$_POST['integrateur_type']);
						}
					}
				
				} catch(Exception $exc) {				   
				    $db->rollback();
					$this->view->param = $param;
					//$this->view->id_ville   = $request->getParam("integrateur_ville");
					//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					//$this->view->code_membre = $membre_integrateur;
					$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
			    }
               			   
		    } else  {
			    $this->view->param = $param;
				//$this->view->id_ville = $request->getParam("integrateur_ville");
				//$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
			    //$this->view->code_membre = $membre_integrateur;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
		
		}
	
    }



       public function addintegrateurpreAction()   {
	    /* page integrateur/addintegrateur - Ajout d'une integrateur */
            $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

            //$date_idold = new Zend_Date(Zend_Date::ISO_8601);
            //$date_iddold = clone $date_idold;
            
            //if(($date_iddold->toString('yyyy-MM-dd') > "2018-01-31") && ($sessionmembreasso->membreasso_association != 1))  {
            //$this->_redirect('/integrateur/addsouscriptionban/paramban/1');
            //}
            

            $m_ville  = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_souscription = new Application_Model_EuSouscriptionMapper();

	    $t_canton = new Application_Model_DbTable_EuCanton();
            $t_region = new Application_Model_DbTable_EuRegion();
            $t_prefecture = new Application_Model_DbTable_EuPrefecture();
            $t_pays = new Application_Model_DbTable_EuPays();
            $t_zone = new Application_Model_DbTable_EuZone();
            $m_ville = new Application_Model_EuVilleMapper ();

	    $cantons = $t_canton->fetchAll();
            $regions = $t_region->fetchAll();
            $pays = $t_pays->fetchAll();
            $zones = $t_zone->fetchAll();
            $prefectures = $t_prefecture->fetchAll();
            $this->view->cantons = $cantons;
            $this->view->regions = $regions;
            $this->view->zones = $zones;
            $this->view->pays = $pays;
            $this->view->prefectures = $prefectures;


            $cantons  = $t_canton->fetchAll();
            $villes   = $m_ville->fetchAll();
            $this->view->cantons = $cantons;
            $this->view->villes  = $villes;
	    $request = $this->getRequest();
	    if($request->isPost ())  {
	        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
		        if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
			        && isset($_POST['code_activite']) && $_POST['code_activite']!=""
			        && isset($_POST['integrateur_email']) && $_POST['integrateur_email']!=""
                    && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""
			        && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {

			            $membre = new Application_Model_EuMembre();
	                    $m_map  = new Application_Model_EuMembreMapper();
			            $membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                           $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                            $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					    $param = (int) $this->_request->getParam('param');

					   $date_id = Zend_Date::now();
					   $param = (int)$this->_request->getParam('param');
					   $id_utilisateur_acnev = 1;
                       $id_utilisateur_filiere = 2;
                       $id_utilisateur_technopole = 3;

					   $bon_neutre = new Application_Model_EuBonNeutre();
                       $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                       $m_typeintegrateur->find($param,$typeintegrateur);

					   $membre_integrateur  = $request->getParam("integrateur_membre");
					   $code_membre_integrateur = '';

					   $integrateur_montant = $request->getParam("integrateur_montant");
					   $integrateur_nombre  = $request->getParam("integrateur_nombre");

					   $montant_souscription = $integrateur_nombre * 2187.5;

					   if(substr($membre_integrateur,19,1) == 'P')  {
						   $findmembre = $m_map->find($membre_integrateur,$membre);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmembreasso->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						   }
					    } else {
						   $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmembreasso->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						  }

						}
                                                
                        if(substr($membre_integrateur,19,1) == 'M' &&  ($param == 1  || $param == 3 ||  $param == 5 ||  $param == 7))  {
							$db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $sessionmembreasso->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					        return;
						}

                        if($typeintegrateur->montant_param >  $integrateur_montant) {
					        $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						    $this->view->id_ville   = $request->getParam("integrateur_ville");
						    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						    $this->view->code_membre = $membre_integrateur;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $sessionmembreasso->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;
					    }


					    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					    if(count($bon_neutre) == 0) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->integrateur_email   = $request->getParam("integrateur_email");
						  $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						  $this->view->id_ville   = $request->getParam("integrateur_ville");
						  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						  $this->view->code_membre = $membre_integrateur;
						  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                          $sessionmembreasso->error = "Votre Code BAn  incorrect ...";
                          return;
					    }
						 
						if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                           return;
						}
						 

						 if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
						    $bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						    $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;

					            $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    //$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                            //$cumulbon = trim($bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id));
                            
                            $cumulbon = trim($bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id));
                                                    
                            //$cumulbon = trim($bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id));

						    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
						        $db->rollback();
					            $this->view->param = $param;
						        $this->view->integrateur_email   = $request->getParam("integrateur_email");
						        $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						        $this->view->id_ville   = $request->getParam("integrateur_ville");
						        $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						        $this->view->code_membre = $membre_integrateur;
						        $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                $sessionmembreasso->error = "Montant restant du BAn est insuffisant ... ".$cumulbon;
                                return;
						    }

						    if(($membre_integrateur != $code_membre_integrateur)) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $sessionmembreasso->error = "Le code membre du CMFH doit être celui du bon neutre ...";
                              return;
						    }

							////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $montant_souscription;
					        $nbre_lignesdetbon = count($lignesdetbon);
                            while ($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
									if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
									   
									}
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);

						  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						  //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						  //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						  } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						  }
						  $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						  $bon_neutre_utiliseM->save($bon_neutre_utilise);


                                 } else {
								    
									if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);

						  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						  //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						  //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						  } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						  }
						  $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						  $bon_neutre_utiliseM->save($bon_neutre_utilise);

						            $reste = 0;
                                 }
                               $i++;
                             }

						  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						  //$bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						  $bon_neutre2M->update($bon_neutre2);

						  /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						  //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						  //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						  } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						  }
						  $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						  $bon_neutre_utiliseM->save($bon_neutre_utilise);*/

						   /*
						   if($bon_neutre->bon_neutre_montant_solde <  $montant_souscription ) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            return;
						  }

						  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  $bon_neutre2 = new Application_Model_EuBonNeutre();
						  $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						  $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

						  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						  $bon_neutre2M->update($bon_neutre2);

						  $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
						  $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						  $compteur_bon_neutre_detail = $bon_neutre_detailM->findConuter() + 1;
						  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
						  $bon_neutre_detail->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_detail->setBon_neutre_detail_type("PP");
						  } else {
						     $bon_neutre_detail->setBon_neutre_detail_type("PM");
						  }
						  $bon_neutre_detail->setBon_neutre_detail_libelle("CMFH");
						  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_detail->setBon_neutre_detail_montant($montant_souscription);
						  $bon_neutre_detailM->save($bon_neutre_detail);

						  */
						  
						  $m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();
						$finddepot = $m_depotvente->fetchAllByMembre($_POST['integrateur_membre']);

						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                       $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}

						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }

						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));

						if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmembreasso->error = "Mot de passe incorret ...";
						   return;
	                    }

						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

						//$compteur_souscription = $souscription_mapper->findConuter() + 1;
						//$souscription->setSouscription_id($compteur_souscription);

						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                        $souscription->setSouscription_banque(null);

						$souscription->setSouscription_montant($montant_souscription);
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));

                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));

                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }

			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }

						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();

                        ///////////////////////////////////////////// validation acnev //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(2);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

						///////////////////////////////////////////// validation technopole //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(3);
						$souscriptionM->update($souscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);







/*
//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1) {
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($membreasso->membreasso_association, $association);
        $code_agence = $association->code_agence;

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
           } else {
             $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
             } else {
               $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
             }
        }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}
*/





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





						$nombre_compte = $request->getParam("integrateur_nombre");

                        if($nombre_compte >= 10)   {
						   include("Transfert.php");
		                   if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                      $chemin = "integrateurs";
		                      $file = $_FILES['integrateur_diplome']['name'];
		                      $file1='integrateur_diplome';
		                      $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                   } else { $integrateur_diplome = ""; }

						   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                   } else {$integrateur_document = "";}

						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();

						   //$compteur = $ma->findConuter() + 1;
						   //$a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);

						   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							     || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                 $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                 $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                 $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                           }

						   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                           }

						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                           $a->setIntegrateurCanton($request->getParam("integrateur_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("integrateur_membre"));
                           $ma->save($a);
						   
						   $compteur = $db->lastInsertId();

						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);

                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);

						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();

						   //$cpte = $m_complement->findConuter() + 1;
						   //$complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $m_complement->save($complement);

						   $code_agence = '';
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
							  $membreasso   = new Application_Model_EuMembreasso();
                              $m_membreasso = new Application_Model_EuMembreassoMapper();
		                      $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

							  $association = new Application_Model_EuAssociation();
                              $m_association = new Application_Model_EuAssociationMapper();
		                      $m_association->find($membreasso->membreasso_association,$association);
		                      $code_agence = $association->code_agence;
                            }

							   // Création du compte utilisateur intégrateur
							   $souscription = new Application_Model_EuSouscription();
                               $m_souscription = new Application_Model_EuSouscriptionMapper();
		                       $m_souscription->find($integrateur->integrateur_souscription,$souscription);
							   $integrateur_souscription = $integrateur->integrateur_souscription;

							   $date_id = Zend_Date::now();
                               $association = new Application_Model_EuAssociation();
                               $association_mapper = new Application_Model_EuAssociationMapper();

						       $login = "";
						       $password = "";

							   if($finddepot == NULL) {
							       //$compteur_association = $association_mapper->findConuter() + 1;
                                   //$association->setAssociation_id($compteur_association);
								   
                                   $association->setAssociation_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								   } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                   }

                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);
								   
								   $compteur_association = $db->lastInsertId();

								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();

							       if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)];
                                     }
								     $password = $login.$login;
								   } else {
								     $login = $souscription->souscription_login;
								     $password = $souscription->souscription_passe;
								   }

								   //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                   //$membreasso->setMembreasso_id($compteur_membreasso);
                                   $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								   } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                   }

                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);

						       }

							      // Transfert
								  $eusouscription = new Application_Model_EuSouscription();
		                          $souscriptionM = new Application_Model_EuSouscriptionMapper();

								  $date = new Zend_Date();
		                          $compte_map = new Application_Model_EuCompteMapper();
                                  $compte      = new Application_Model_EuCompte();
			                      $sms_money   = new Application_Model_EuSmsmoney();
                                  $money_map   = new Application_Model_EuSmsmoneyMapper();

			                      $det_sms   = new Application_Model_EuDetailSmsmoney();
			                      $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                      $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                      $det_vtesms  = new Application_Model_EuDetailVentesms();

								  // insertion dans la table eu_depot_vente
				                  $m_dvente = new Application_Model_EuDepotVenteMapper();
				                  $dvente = new Application_Model_EuDepotVente();

								  $membretierscode = new Application_Model_EuMembretierscode();
                                  $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

								  $fcaps = Util_Utils::getParametre('CAPS','valeur');

								  $membre_pbf = '0000000000000000001M';
	                              $code_compte_pbf = "NN-TR-".$membre_pbf;
			                      $ret = $compte_map->find($code_compte_pbf,$compte);

								  $souscriptionM->find($compteur_souscription,$eusouscription);

								  $mobile = $eusouscription->souscription_mobile;
								  $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
								  $nbre_compte = $eusouscription->souscription_nombre;

								  $montant = $nbre_compte * $fcaps;
								  // Traitement des produits CAPS
								  $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
								  $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
								  
                                  /*
								  if ($lignesdetfcaps != null) {
								      $nengfcaps = $money_map->findConuter() + 1;
                                      $sms_money->setNEng($nengfcaps)
                	                            ->setCode_Agence(null)
                                                ->setCreditAmount($montant)
                                                ->setSentTo($mobile)
                                                ->setMotif('CAPS')
                                                ->setId_Utilisateur(null)
                                                ->setCurrencyCode('XOF')
                                                ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                ->setFromAccount($code_compte_pbf)
                                                ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                ->setCreditCode($codefcaps)
                                                ->setDestAccount(null)
                                                ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                ->setDestAccount_Consumed($compteur_souscription)
                                                ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                ->setNum_recu(null);
                                       $money_map->save($sms_money);

									   // Mise à jour du compte de transfert
				                       if($ret && ($cumulfcaps >= $montant)) {
			                              // Mise à jour du compte de transfert
				                          $compte->setSolde($compte->getSolde() - $montant);
                                          $compte_map->update($compte);
	                                   } else {
			                              $db->rollback();
	                                      $this->view->param = $param;
										  $this->view->souscription_email  = $_POST['souscription_email'];
								          $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								          $this->view->id_ville   = $_POST['integrateur_ville'];
								          $this->view->code_membre = $_POST['integrateur_membre'];
			                              $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant';
										  //$this->_redirect('/index/addintegrateur/param/'.$param);
                                          return;
			                           }

									   $l = 0;
					                   $reste = $montant;
					                   $nbre_lignesdetfcaps = count($lignesdetfcaps);
									   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
									         $lignedetfcaps = $lignesdetfcaps[$l];
                                             $id = $lignedetfcaps->getId_detail_smsmoney();
						                     $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											 if ($reste >= $lignedetfcaps->getSolde_sms()) {
												//Mise à jour  des lignes d'enrégistrement
                                                $reste = $reste - $lignedetfcaps->getSolde_sms();
												//insertion dans la table eu_detailventesms
						                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                   ->setId_detail_smsmoney($id)
                                                           ->setCode_membre_dist($membre_pbf)
                                                           ->setCode_membre(null)
                                                           ->setType_tansfert('CAPS')
                                                           ->setCreditcode($codefcaps)
                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                           ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                           ->setId_utilisateur(null)
                                                           ->setCode_produit('CAPS');
                                                 $det_vte_sms->insert($det_vtesms->toArray());

							                     $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                       ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                       ->setSolde_sms(0);
                                                 $det_sms_m->update($lignedetfcaps);

											  } else {
												 //Mise à jour  des lignes d'enrégistrement
												 //insertion dans la table eu_detailventesms
						                         $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                 $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                    ->setId_detail_smsmoney($id)
                                                            ->setCode_membre_dist($membre_pbf)
                                                            ->setCode_membre(null)
                                                            ->setType_tansfert('CAPS')
                                                            ->setCreditcode($codefcaps)
                                                            ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                            ->setMont_vente($reste)
                                                            ->setId_utilisateur(null)
                                                            ->setCode_produit('CAPS');
                                                  $det_vte_sms->insert($det_vtesms->toArray());

                                                  $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                          $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                      $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                  $det_sms_m->update($lignedetfcaps);
						                          $reste = 0;
												 }
											     $l++;
									   }

								  } else {
									   $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						               $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						               $this->view->id_ville   = $request->getParam("integrateur_ville");
						               $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						               $this->view->code_membre = $membre_integrateur;
			                           $sessionmembreasso->error = 'Le solde du compte de transfert  est vide';
                                       return;
								  }*/

								  //$countdvente = $m_dvente->findConuter() + 1;
				                  //$dvente->setId_depot($countdvente)
								  
					              $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                  $dvente->setCode_membre($_POST['integrateur_membre']);
			                      $dvente->setCode_produit('CAPS');
				                  $dvente->setMont_depot($montant);
				                  $dvente->setMont_vendu(0);
				                  $dvente->setSolde_depot($montant);
				                  $dvente->setId_utilisateur(null);
				                  $dvente->setType_depot('AvecListe');
				                  $dvente->setSouscription_id($compteur_souscription);
				                  $m_dvente->save($dvente);

								  for($i = 0; $i < $nbre_compte; $i++) {
									  $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
									  $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
									  $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                      $membretierscode->setMembretierscode_membretiers(0);
                                      $membretierscode->setMembretierscode_code($membretierscode_code);
                                      $membretierscode->setMembretierscode_souscription($compteur_souscription);
                                      $membretierscode->setPublier(0);
                                      $membretierscode->setCode_membre(NULL);
									  $membretierscode->setAllocation_cmfh_id(NULL);
                                      $membretierscode_mapper->save($membretierscode);
								   }

								   $compteur_sms = Util_Utils::findConuter() + 1;
				                   Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');

								   // script de creation de TE de prestation
								   $eucompte = new Application_Model_EuCompte();
								   $m_compte = new Application_Model_EuCompteMapper();
									
								   $prk = new Application_Model_EuPrk();
                                   $m_prk = new Application_Model_EuPrkMapper();
									
                                    $te   = new Application_Model_EuTegc();
									$m_te = new Application_Model_EuTegcMapper();
									$code_te = "";
									$nom_tegc = "";
									
									$code_membre = $_POST['integrateur_membre'];
									if(substr($code_membre,19,1)=='P') {
									   $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
									} else {
									   $nom_tegc = $membremoral->raison_sociale;
									}
									
									$code_zone     =   $_POST['code_zone'];
			                        $id_pays       =   $_POST['id_pays'];
			                        $id_region     =   $_POST['id_region'];
			                        $id_prefecture =   $_POST['id_prefecture'];
			                        $id_canton     =   $_POST['id_canton'];
									
								    $num_compte = 'NB-TPAGCP-'.$code_membre;
				                    $res = $m_compte->find($num_compte,$eucompte);
									
									if(!$res) {
									    $eucompte->setCode_cat('TPAGCP')
                                                 ->setCode_compte($num_compte)
												 ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TPAGCP')
                                                 ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
										
										$code_te = $m_te->getLastTegcByMembre($code_membre);
										if ($code_te == NULL) {
			                               $code_te = 'TEGCP'.$code_membre. '00001';         
			                            } else {
			                               $num_ordre = substr($code_te, -5);
                                           $num_ordre++;
                                           $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                            }
										
										$te->setCode_tegc($code_te);
			                            $te->setId_filiere(NULL);
			                            $te->setMdv(12);
			                            $te->setTranche_payement(1);
										if(substr($code_membre,19,1)=='M') {
			                               $te->setCode_membre($code_membre);
										} else {
                                           $te->setCode_membre_physique($code_membre);
                                        }										
			                            $te->setMontant(0);
			                            $te->setMontant_utilise(0);
			                            $te->setSolde_tegc(0);
			                            $te->setId_utilisateur(NULL);
			                            $te->setNom_tegc($nom_tegc);
			                            $te->setNom_produit("Prestation");
			                            $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					                    $te->setType_tegc("PRESTATAIRE");
										$te->setRecurrent_illimite(0);
										$te->setRecurrent_limite(0);
										$te->setNonrecurrent(1);
										$te->setPeriode1(0);
										$te->setPeriode2(0);
										$te->setPeriode3(0);
										$te->setFormel(0);
										$te->setRegime_tva(0);
										$te->setSpecial(0);
										$te->setOrdinaire(1);
										$te->setSubvention(0);
										
										$te->setCode_zone($code_zone);
				                        $te->setId_pays($id_pays);
				                        $te->setId_region($id_region);
				                        $te->setId_prefecture($id_prefecture);
				                        $te->setId_canton($id_canton);

                                        $m_te->save($te);

                                        $id_prk = $m_prk->findConuter() + 1;
					                    $prk->setId_prk($id_prk);
					                    $prk->setCode_tegc($code_te);
					                    $prk->setValeur(7);
					                    $m_prk->save($prk);
                                        										
									}
									
									$num_comptets = 'NB-TSGCP-'.$code_membre;
				                    $rests = $m_compte->find($num_comptets,$eucompte);
									
									if(!$rests) {
									    $eucompte->setCode_cat('TSGCP')
                                                 ->setCode_compte($num_comptets)
												 ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TSGCP')
                                                 ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
									
                                    }
								    // fin script de creation TE
								   
								   
								   
								   
								   $db->commit();

								   if($finddepot == NULL) {
								      $sessionmembreasso->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
								   } else {
								      $sessionmembreasso->error = "Opération bien effectuée ...";
								   }
								   $this->_redirect('/integrateur/addintegrateurpre/param/'.$_POST['integrateur_type']);


						} else {
						   $db->rollback();
						   $sessionmembreasso->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 10 ...";
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
						   return;
						}
						  
						  

						}

                        

			   }

	       } catch (Exception $exc) {
			   $db->rollback();
			   $this->view->param = $param;
			   $this->view->integrateur_email   = $request->getParam("integrateur_email");
			   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
			   $this->view->id_ville   = $request->getParam("integrateur_ville");
			   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
			   $this->view->code_membre = $membre_integrateur;
			   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
               $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
               return;
		    }

	    }
		$param = (int)$this->_request->getParam('param');
	    $this->view->param = $param;

	}

	
	public function adddemandeconfigAction() {
	    /* page integrateur/addintegrateur - Ajout d'une integrateur */
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
		if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$t_canton = new Application_Model_DbTable_EuCanton();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
		$cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        
        $this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
        $this->view->regions = $regions;
		$this->view->pays = $pays;
        $this->view->zones = $zones;
		
		$request = $this->getRequest();
		if ($request->isPost ())  {
		   $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction(); 
           try {
		       $offreur = new Application_Model_EuOffreurProjet();
               $m_offreur = new Application_Model_EuOffreurProjetMapper();
			   
			   $demande   = new Application_Model_EuDemandeConfigte();
               $m_demande = new Application_Model_EuDemandeConfigteMapper();
			   
			   $code_membre = $request->getParam("code_membre");
			   $nom_produit = $request->getParam("nom_produit");
			   $id_canton = $request->getParam("id_canton");
			   
			   $date_id = Zend_Date::now();
			   
			   $findoffreur = $m_offreur->fetchAllByMembre($code_membre);
			   if($findoffreur == false) {
			     $sessionmembreasso->error = "Le membre moral saisi n'est pas un offreur de projet ou de Biens,Produits et Service ...";
				 return;
			   }
	
			   $finddemande = $m_demande->findbymembre($code_membre);
			   if($finddemande != false) {
			      $sessionmembreasso->error = "Ce membre moral a déjà fait la demande de configuration de son TE ...";
				  return;
			   }
			   
			   $compteur_demande = $m_demande->findConuter() + 1;
						
			   $demande->setId_demande($compteur_demande);
               $demande->setNom_produit($nom_produit);
               $demande->setCode_membre_morale($code_membre);
			   $demande->setValider(3);
			   $demande->setId_canton($id_canton);
			   $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			   
			   if(isset($_POST['categorie1'])  && ($_POST['categorie1'] == 1)) {
				 $demande->setProduit_special(1);
			   } else {
                 $demande->setProduit_special(0);
               }					  
					  
			   if(isset($_POST['categorie2']) && ($_POST['categorie2'] == 1)) {
				 $demande->setProduit_ordinaire(1);
			   } else {
                 $demande->setProduit_ordinaire(0);
               }
			   
			   $m_demande->save($demande);
			   $db->commit();
			   $sessionmembreasso->error = "Opération bien effectuée ...";
		
		   } catch (Exception $exc) {				   
			  $db->rollback();
              $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
              return;
		   }
		
		}
		
	}	
	
	public function addintegrationquittanceAction() {
		/* page integrateur/addintegrateur - Ajout d'une integrateur */
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
		if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$param = (int)$this->_request->getParam('param_int');
	    $this->view->param = $param;
		
		$m_souscription2 = new Application_Model_EuSouscriptionMapper();
		$t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville  = new Application_Model_EuVilleMapper();
		$t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();

		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $cantons  = $t_canton->fetchAll();
        $villes   = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes  = $villes;
		$this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;

		$request = $this->getRequest();
	    if($request->isPost()) {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
			&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
		    && isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
		    && isset($_POST['integrateur_attestation'])
		    && $_POST['integrateur_attestation'] == 1)  {
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
			    try {
				    $souscription3 = new Application_Model_EuSouscription();
                    $m_souscription3 = new Application_Model_EuSouscriptionMapper();
				    $membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$param = (int) $this->_request->getParam('param_int');
					$nombre_compte = 0;
					$cpte = $_POST['cpteur'];
					$integrateur_type = $_POST['integrateur_type'];
					
					if(substr($_POST['code_membre'],19,1) == 'P') {
						$findmembre = $m_map->find($_POST['code_membre'],$membre);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_email  = $_POST['souscription_email'];
						    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							$this->view->id_canton  = $_POST['integrateur_canton'];
							$this->view->id_ville   = $_POST['integrateur_ville'];
							$this->view->code_membre = $_POST['code_membre'];
		                    $sessionmembreasso->error = "Le numéro membre du souscripteur  ".$_POST['code_membre']." est introuvable ...";
					        return;
						}
					} else  {
						$findmembre = $m_mapmoral->find($_POST['code_membre'],$membremoral);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_email  = $_POST['souscription_email'];
						    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							$this->view->id_canton  = $_POST['integrateur_canton'];
							$this->view->id_ville   = $_POST['integrateur_ville'];
							$this->view->code_membre = $_POST['code_membre'];
		                    $sessionmembreasso->error = "Le numéro membre du souscripteur  ".$_POST['code_membre']." est introuvable ...";
					        return;
						}
					}
					
					for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				        $numero_quittance = $_POST['integrateur_souscription_ordre'.$i];
					    $j = $i + 1;
					    if($cpte > 1) {
					        while($j < $cpte) {
						        $num_quittance = $_POST['integrateur_souscription_ordre'.$j];
							    if($numero_quittance == $num_quittance) {
							        $db->rollback();
					                $this->view->param = $param;
								    $this->view->souscription_email  = $_POST['souscription_email'];
								    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								    $this->view->id_canton  = $_POST['integrateur_canton'];
								    $this->view->id_ville   = $_POST['integrateur_ville'];
								    $this->view->code_membre = $_POST['code_membre'];
		                            $sessionmembreasso->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                return;
							    }
							    $j++;
						    }
					    }
				    }

					for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'. $i]);
						if($souscription_id == NULL) {
							$db->rollback();
						    $this->view->param = $param;
						    $this->view->souscription_email  = $_POST['souscription_email'];
						    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						    $this->view->id_canton  = $_POST['integrateur_canton'];
						    $this->view->id_ville   = $_POST['integrateur_ville'];
						    $this->view->code_membre = $_POST['code_membre'];
		                    $sessionmembreasso->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre'.$i]."  est  invalide ...";
                            return;
		                }
					}
					
					if(count($_POST['cpteur']) > 1)  {
							    $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
							    $m_souscription3->find($id,$souscription3);
							    $souscription_souscription = $souscription3->souscription_souscription;
							    for($i = 1; $i < $_POST['cpteur']; $i++)  {
							       $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								   $m_souscription3->find($id,$souscription3);
								   if($souscription_souscription != $souscription3->souscription_souscription) {
								      $db->rollback();
								      $this->view->param = $param;
								      $this->view->souscription_email  = $_POST['souscription_email'];
								      $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								      $this->view->id_canton  = $_POST['integrateur_canton'];
								      $this->view->id_ville   = $_POST['integrateur_ville'];
								      $this->view->code_membre = $_POST['code_membre'];
		                              $sessionmembreasso->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
                                      return;
								  }
							   }
				    }
					
					$m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						     $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
						     for($i = 0; $i < $_POST['cpteur']; $i++)   {
						        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription_id);
							    $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription_id);
							    if(count($integrateur2) > 0  || count($complement2) > 0) {
								    $db->rollback();
							        $this->view->param = $param;
								    $this->view->souscription_email = $_POST['souscription_email'];
								    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								    $this->view->id_canton  = $_POST['integrateur_canton'];
								    $this->view->id_ville   = $_POST['integrateur_ville'];
								    $this->view->code_membre = $_POST['code_membre'];
		                            $sessionmembreasso->error = "Numéro de quittance  ".$_POST['integrateur_souscription_ordre'.$i]."  déjà  utilisé ...";
                                    return;
	                            }
						    }
							
							for($i = 0; $i < $_POST['cpteur']; $i++)   {
						        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    $m_souscription3->find($souscription_id,$souscription3);
							    $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription3->souscription_souscription);
							    $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription3->souscription_souscription);
							    if(count($integrateur2) > 0  || count($complement2) > 0) {
								    $db->rollback();
							        $this->view->param = $param;
							        $this->view->souscription_email  = $_POST['souscription_email'];
								    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								    $this->view->id_canton  = $_POST['integrateur_canton'];
								    $this->view->id_ville   = $_POST['integrateur_ville'];
								    $this->view->code_membre = $_POST['code_membre'];
		                            $sessionmembreasso->error = "Veuillez plutôt faire un complément avec le numéro quittance  ".$_POST['integrateur_souscription_ordre'.$i];
                                    return;
	                            }
						    }

							for($i = 0; $i < $_POST['cpteur']; $i++) {
						        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    $m_souscription3->find($souscription_id,$souscription3);
						        $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
						    }
							
							if($nombre_compte >= 10)   {
							    include("Transfert.php");
		                        if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                          $chemin	= "integrateurs";
		                          $file = $_FILES['integrateur_diplome']['name'];
		                          $file1='integrateur_diplome';
		                          $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                         } else {$integrateur_diplome = "";}

							     if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                           $chemin	= "integrateurs";
		                           $file = $_FILES['integrateur_document']['name'];
		                           $file1='integrateur_document';
		                           $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                        } else {$integrateur_document = "";}

							    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                $a  = new Application_Model_EuIntegrateur();
                                $ma = new Application_Model_EuIntegrateurMapper();

								$compteur = $ma->findConuter() + 1;
							    $id_souscription = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
                                $a->setIntegrateur_id($compteur);
                                $a->setIntegrateur_type($_POST['integrateur_type']);
                                $a->setIntegrateur_souscription($id_souscription);

								if($integrateur_type == 1 || $integrateur_type == 2 || $integrateur_type == 3|| $integrateur_type == 4 || $integrateur_type == 5 || $integrateur_type == 6|| $integrateur_type == 7 || $integrateur_type == 8
								    || $integrateur_type == 25 || $integrateur_type == 26 || $integrateur_type == 27 || $integrateur_type == 28) {
                                    $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                    $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                    $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                                }
								
								
								if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22) {
                                    if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 22) {
                                      $a->setIntegrateur_poste($_POST['integrateur_poste']);
                                    }
                                    $a->setIntegrateur_education($_POST['integrateur_education']);
                                    if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22) {
                                      $a->setIntegrateur_affiliation($_POST['integrateur_affiliation']);
                                    }
                                    $a->setIntegrateur_formation($_POST['integrateur_formation']);
                                    $a->setIntegrateur_langue($_POST['integrateur_langue']);
                                    $a->setIntegrateur_experience($_POST['integrateur_experience']);
                                    $a->setIntegrateur_document($integrateur_document);
                                    $a->setIntegrateur_diplome($integrateur_diplome);
                                  }

								  $a->setIntegrateur_attestation($_POST['integrateur_attestation']);
                                  $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);
                                  $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			                      $a->setPublier($_POST['publier']);
                                  $a->setIntegrateurAdresse($_POST['integrateur_adresse']);
                                  $a->setIntegrateurCanton($_POST['integrateur_canton']);
                                  $a->setIntegrateurVille($_POST['integrateur_ville']);
							      $a->setCode_membre($_POST['code_membre']);
                                  $ma->save($a);

								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                  $integrateur  = new Application_Model_EuIntegrateur();
                                  $integrateurM = new Application_Model_EuIntegrateurMapper();
                                  $integrateurM->find($compteur,$integrateur);

                                  $integrateur->setPublier(1);
		                          $integrateurM->update($integrateur);


								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
							      $id_integrateur = $integrateur->integrateur_id;
							      $souscription = new Application_Model_EuSouscription();
                                  $m_souscription = new Application_Model_EuSouscriptionMapper();
							      $complement   = new Application_Model_EuComplementQuittance();
                                  $m_complement = new Application_Model_EuComplementQuittanceMapper();


								  for($i = 0; $i < $_POST['cpteur']; $i++) {
						             $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								     $m_souscription->find($souscription_id, $souscription);
                                     $souscription->setCode_activite($_POST["code_activite"]);
                                     $souscription->setId_metier($_POST["id_metier"]);
                                     $souscription->setSouscription_email($_POST["souscription_email"]);
                                     $m_souscription->update($souscription);

								     $cpte = $m_complement->findConuter() + 1;
								     $complement->setId_complement_quittance($cpte);
								     $complement->setIntegrateur_id($id_integrateur);
								     $complement->setSouscription_id($souscription_id);
								     $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd HH:mm:ss'));
								     $m_complement->save($complement);
                                  }

								  $code_agence = '';
								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
							       if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
							         $membreasso   = new Application_Model_EuMembreasso();
                                     $m_membreasso = new Application_Model_EuMembreassoMapper();
		                             $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

									 $association = new Application_Model_EuAssociation();
                                     $m_association = new Application_Model_EuAssociationMapper();
		                             $m_association->find($membreasso->membreasso_association,$association);
		                             $code_agence = $association->code_agence;
							      }
								  
								  // Création du compte utilisateur integrateur
								     $souscription = new Application_Model_EuSouscription();
                                     $m_souscription = new Application_Model_EuSouscriptionMapper();
		                             $m_souscription->find($integrateur->integrateur_souscription,$souscription);
								     $integrateur_souscription = $integrateur->integrateur_souscription;
								     $date_id = Zend_Date::now();

									 $association = new Application_Model_EuAssociation();
                                     $association_mapper = new Application_Model_EuAssociationMapper();

                                     $compteur_association = $association_mapper->findConuter() + 1;
                                     $association->setAssociation_id($compteur_association);
                                     $association->setAssociation_mobile($souscription->souscription_mobile);
									 if($souscription->souscription_personne == "PP") {
                                        $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
									 } else {
                                        $association->setAssociation_nom($souscription->souscription_raison);
                                     }
                                     $association->setAssociation_numero($compteur_association."INT");
                                     $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                     $association->setAssociation_email($souscription->souscription_email);
                                     $association->setAssociation_recepisse(NULL);
                                     $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                     $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                     $association->setId_filiere(NULL);
                                     $association->setCode_type_acteur(NULL);
                                     $association->setCode_statut(NULL);
                                     $association->setCode_agence($code_agence);
                                     $association->setPublier(1);
                                     $association_mapper->save($association);

									 $membreasso = new Application_Model_EuMembreasso();
                                     $membreasso_mapper = new Application_Model_EuMembreassoMapper();

								     $login = "";
								     $password = "";

								     if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								       //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                       $login = "";
                                       while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)];
                                       }
									   $password = $login.$login;

								     } else {
								       $login = $souscription->souscription_login;
									   $password = $souscription->souscription_passe;
								     }

									 $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                     $membreasso->setMembreasso_id($compteur_membreasso);
                                     $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
									 if($souscription->souscription_personne == "PP") {
                                        $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                        $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
									 } else {
                                        $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                        $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                     }
                                     $membreasso->setMembreasso_association($compteur_association);
                                     $membreasso->setMembreasso_email($souscription->souscription_email);
                                     $membreasso->setMembreasso_login($login);
                                     $membreasso->setMembreasso_passe($password);
                                     $membreasso->setMembreasso_type(1);
                                     $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                     $membreasso->setPublier(1);
								     $membreasso->setSouscription_id($souscription->souscription_id);
							         $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                     $membreasso_mapper->save($membreasso);


									 // Transfert
								     $eusouscription = new Application_Model_EuSouscription();
		                             $souscriptionM = new Application_Model_EuSouscriptionMapper();

								     $date = new Zend_Date();
		                             $compte_map = new Application_Model_EuCompteMapper();
                                     $compte      = new Application_Model_EuCompte();
			                         $sms_money   = new Application_Model_EuSmsmoney();
                                     $money_map   = new Application_Model_EuSmsmoneyMapper();

			                         $det_sms   = new Application_Model_EuDetailSmsmoney();
			                         $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                         $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                         $det_vtesms  = new Application_Model_EuDetailVentesms();

								     // insertion dans la table eu_depot_vente
				                     $m_dvente = new Application_Model_EuDepotVenteMapper();
				                     $dvente = new Application_Model_EuDepotVente();

								     $membretierscode = new Application_Model_EuMembretierscode();
                                     $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

							         $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                             $membre_pbf = '0000000000000000001M';
	                                 $code_compte_pbf = "NN-TR-".$membre_pbf;
			                         $ret = $compte_map->find($code_compte_pbf,$compte);
									 
									 
									 for($i = 0; $i < $_POST['cpteur']; $i++) {
									    $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
									    $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
										if($finddepot == NULL) {
										   $souscriptionM->find($souscription_id,$eusouscription);
								           $mobile = $eusouscription->souscription_mobile;
										   if($eusouscription->souscription_programme == 'CMFH')   {
										      $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                  if($eusouscription->souscription_autonome == 1) {
			                                     $nbre_compte = $eusouscription->souscription_nombre - 1;
			                                  } else {
				                                 $nbre_compte = $eusouscription->souscription_nombre;
				                              }

											  $montant = $nbre_compte * $fcaps;
									          // Traitement des produits CAPS
				                              $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
											  $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');

											  if ($lignesdetfcaps != null) {
											      $nengfcaps = $money_map->findConuter() + 1;
                                                  $sms_money->setNEng($nengfcaps)
                	                                        ->setCode_Agence(null)
                                                            ->setCreditAmount($montant)
                                                            ->setSentTo($mobile)
                                                            ->setMotif('CAPS')
                                                            ->setId_Utilisateur(null)
                                                            ->setCurrencyCode('XOF')
                                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                            ->setFromAccount($code_compte_pbf)
                                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                            ->setCreditCode($codefcaps)
                                                            ->setDestAccount(null)
                                                            ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                            ->setDestAccount_Consumed($souscription_id)
                                                            ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                            ->setNum_recu(null);
                                                   $money_map->save($sms_money);

												   // Mise à jour du compte de transfert
				                                   if($ret && ($cumulfcaps >= $montant)) {
			                                         // Mise à jour du compte de transfert
				                                     $compte->setSolde($compte->getSolde() - $montant);
                                                     $compte_map->update($compte);
	                                               } else {
			                                         $db->rollback();
	                                                 $this->view->param = $param;
											         $this->view->souscription_email  = $_POST['souscription_email'];
								                     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                     $this->view->id_canton  = $_POST['integrateur_canton'];
								                     $this->view->id_ville   = $_POST['integrateur_ville'];
								                     $this->view->code_membre = $_POST['code_membre'];
			                                         $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte  CAPS est insuffisant';
                                                     return;
			                                       }

												   $l = 0;
					                               $reste = $montant;
					                               $nbre_lignesdetfcaps = count($lignesdetfcaps);
												   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
												     $lignedetfcaps = $lignesdetfcaps[$l];
                                                     $id = $lignedetfcaps->getId_detail_smsmoney();
						                             $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											         if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                //Mise à jour  des lignes d'enrégistrement
                                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
												        //insertion dans la table eu_detailventesms
						                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                              ->setId_detail_smsmoney($id)
                                                                      ->setCode_membre_dist($membre_pbf)
                                                                      ->setCode_membre(null)
                                                                      ->setType_tansfert('CAPS')
                                                                      ->setCreditcode($codefcaps)
                                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                      ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                      ->setId_utilisateur(null)
                                                                      ->setCode_produit('CAPS');
                                                         $det_vte_sms->insert($det_vtesms->toArray());

							                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                               ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                               ->setSolde_sms(0);
                                                         $det_sms_m->update($lignedetfcaps);

						                               } else {
												         //Mise à jour  des lignes d'enrégistrement
												         //insertion dans la table eu_detailventesms
						                                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                            ->setId_detail_smsmoney($id)
                                                                    ->setCode_membre_dist($membre_pbf)
                                                                    ->setCode_membre(null)
                                                                    ->setType_tansfert('CAPS')
                                                                    ->setCreditcode($codefcaps)
                                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                    ->setMont_vente($reste)
                                                                    ->setId_utilisateur(null)
                                                                    ->setCode_produit('CAPS');
                                                          $det_vte_sms->insert($det_vtesms->toArray());

                                                          $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                  $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                              $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                          $det_sms_m->update($lignedetfcaps);
						                                  $reste = 0;
												       }
											         $l++;
											       }
											  } else  {
				                                 $db->rollback();
	                                             $this->view->param = $param;
										         $this->view->souscription_email  = $_POST['souscription_email'];
								                 $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                 $this->view->id_canton  = $_POST['integrateur_canton'];
								                 $this->view->id_ville   = $_POST['integrateur_ville'];
								                 $this->view->code_membre = $_POST['code_membre'];
			                                     $sessionmembreasso->error = 'Le solde du compte de transfert CAPS est null';
                                                 return;
				                              }

											  $countdvente = $m_dvente->findConuter() + 1;
				                              $dvente->setId_depot($countdvente)
					                                 ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                              $dvente->setCode_membre($_POST['code_membre']);
			                                  $dvente->setCode_produit('CAPS');
				                              $dvente->setMont_depot($montant);
				                              $dvente->setMont_vendu(0);
				                              $dvente->setSolde_depot($montant);
				                              $dvente->setId_utilisateur(null);
				                              $dvente->setType_depot('AvecListe');
				                              $dvente->setSouscription_id($souscription_id);
				                              $m_dvente->save($dvente);

											  for($i = 0; $i < $nbre_compte; $i++) {
										         $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
											     $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
											     $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                                 $membretierscode->setMembretierscode_membretiers(0);
                                                 $membretierscode->setMembretierscode_code($membretierscode_code);
                                                 $membretierscode->setMembretierscode_souscription($souscription_id);
                                                 $membretierscode->setPublier(0);
                                                 $membretierscode->setCode_membre(NULL);
                                                 $membretierscode_mapper->save($membretierscode);
										      }
                                              $compteur = Util_Utils::findConuter() + 1;
				                              Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
											}
									    } else {
										    $m_dvente->find($finddepot->id_depot,$dvente);
									        $dvente->setCode_membre($_POST['code_membre']);
                                            $m_dvente->update($dvente);
										}
								    }
									
							//--------------------------------- Fin de la boucle FOR ---------------------------------------------------------------
							$db->commit();

							$souscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();

                            for($i = 0; $i < $_POST['cpteur']; $i++)  {
								$souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    include("automatisation.php");
								recupcodegenerer($souscription_id);
                            }

							    $souscription = new Application_Model_EuSouscription();
                                $m_souscription = new Application_Model_EuSouscriptionMapper();
		                        $m_souscription->find($integrateur_souscription,$souscription);

                                $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                $html .= "<br/>";
                                $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                $html .= "<br/>";
							    $html .= "Login : ".$login."<br/>";
                                $html .= "Mot de passe : ".$password."<br/>";

							    $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                Zend_Mail::setDefaultTransport($tr);
                                $mail = new Zend_Mail();

							    $mail->setBodyHtml($html);
                                $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                $mail->send($tr);

							    $sessionmembreasso->error = "Opération bien effectuée ...";
		                        $this->_redirect('/integrateur/addintegrationquittance/param_int/'.$param);
							 
					
					
					        } else {
						        $db->rollback();
							    $this->view->param = $param;
							    $this->view->souscription_email  = $_POST['souscription_email'];
							    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							    $this->view->id_canton  = $_POST['integrateur_canton'];
							    $this->view->id_ville   = $_POST['integrateur_ville'];
							    $this->view->code_membre = $_POST['code_membre'];
		                        $sessionmembreasso->error = "Le nombre de comptes marchands souscris est insuffisant pour effectuer cette operation ...";
							    return;
						    }
					
					
					
				
				} catch(Exception $exc) {
				    $db->rollback();
	                $this->view->param = $param;
				    $this->view->souscription_email  = $_POST['souscription_email'];
				    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
				    $this->view->id_canton  = $_POST['integrateur_canton'];
				    $this->view->id_ville   = $_POST['integrateur_ville'];
				    $this->view->code_membre = $_POST['code_membre'];
                    $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
                }
		
		    }
		}
	}
	


	public function addintegrateurquittanceAction() {
	       /* page integrateur/addintegrateur - Ajout d'une integrateur */
		   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmcint');
		   if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		   $m_souscription2 = new Application_Model_EuSouscriptionMapper();
		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville  = new Application_Model_EuVilleMapper();
		   $t_region = new Application_Model_DbTable_EuRegion();
           $t_prefecture = new Application_Model_DbTable_EuPrefecture();
           $t_pays = new Application_Model_DbTable_EuPays();
           $t_zone = new Application_Model_DbTable_EuZone();

		   $regions = $t_region->fetchAll();
           $pays = $t_pays->fetchAll();
           $zones = $t_zone->fetchAll();
           $prefectures = $t_prefecture->fetchAll();
           $cantons  = $t_canton->fetchAll();
           $villes   = $m_ville->fetchAll();
           $this->view->cantons = $cantons;
           $this->view->villes  = $villes;
		   $this->view->regions = $regions;
           $this->view->zones = $zones;
           $this->view->pays = $pays;
           $this->view->prefectures = $prefectures;

		   $request = $this->getRequest ();
	       if ($request->isPost()) {
	           if (isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
			      && isset($_POST['code_activite']) && $_POST['code_activite']!=""
				  && isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
				  && isset($_POST['integrateur_attestation'])
				  && $_POST['integrateur_attestation'] == 1)  {
	                  $db = Zend_Db_Table::getDefaultAdapter();
                      $db->beginTransaction();
					  try {
	                      $souscription3 = new Application_Model_EuSouscription();
                          $m_souscription3 = new Application_Model_EuSouscriptionMapper();
						  $membre = new Application_Model_EuMembre();
	                      $m_map  = new Application_Model_EuMembreMapper();
					      $membremoral = new Application_Model_EuMembreMorale();
	                      $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					      $param = (int)$this->_request->getParam('param');
					      $nombre_compte = 0;
					      $cpte = $_POST['cpteur'];

						  if(substr($_POST['integrateur_membre'],19,1) == 'P') {
						    $findmembre = $m_map->find($_POST['integrateur_membre'],$membre);
						    if($findmembre == false) {
						       $db->rollback();
					           $this->view->param = $param;
						       $this->view->souscription_email  = $_POST['souscription_email'];
						       $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							   $this->view->id_canton  = $_POST['integrateur_canton'];
							   $this->view->id_ville   = $_POST['integrateur_ville'];
							   $this->view->code_membre = $_POST['integrateur_membre'];
		                       $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					           return;
						     }
					       } else {
						       $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						       if($findmembre == false) {
						         $db->rollback();
					             $this->view->param = $param;
						         $this->view->souscription_email  = $_POST['souscription_email'];
						         $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							     $this->view->id_canton  = $_POST['integrateur_canton'];
							     $this->view->id_ville   = $_POST['integrateur_ville'];
							     $this->view->code_membre = $_POST['integrateur_membre'];
		                         $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					             return;
						       }
					       }

						   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				              $numero_quittance = $_POST['integrateur_souscription_ordre'.$i];
					          $j = $i + 1;
					          if($cpte > 1) {
					              while($j < $cpte) {
						            $num_quittance = $_POST['integrateur_souscription_ordre'.$j];
							        if($numero_quittance == $num_quittance) {
							          $db->rollback();
					                  $this->view->param = $param;
								      $this->view->souscription_email  = $_POST['souscription_email'];
								      $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								      $this->view->id_canton  = $_POST['integrateur_canton'];
								      $this->view->id_ville   = $_POST['integrateur_ville'];
								      $this->view->code_membre = $_POST['integrateur_membre'];
		                              $sessionmembreasso->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                  return;
							         }
							          $j++;
						             }
					            }
				            }

							for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                       $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'. $i]);
						       if($souscription_id == NULL) {
							       $db->rollback();
						           $this->view->param = $param;
								   $this->view->souscription_email  = $_POST['souscription_email'];
								   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								   $this->view->id_canton  = $_POST['integrateur_canton'];
								   $this->view->id_ville   = $_POST['integrateur_ville'];
								   $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmembreasso->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre'.$i]."  est  invalide ...";
                                   return;
		                        }
					        }

							if(count($_POST['cpteur']) > 1)  {
							    $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
							    $m_souscription3->find($id,$souscription3);
							    $souscription_souscription = $souscription3->souscription_souscription;
							    for($i = 1; $i < $_POST['cpteur']; $i++)  {
							       $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								   $m_souscription3->find($id,$souscription3);
								   if($souscription_souscription != $souscription3->souscription_souscription) {
								      $db->rollback();
								      $this->view->param = $param;
								      $this->view->souscription_email  = $_POST['souscription_email'];
								      $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								      $this->view->id_canton  = $_POST['integrateur_canton'];
								      $this->view->id_ville   = $_POST['integrateur_ville'];
								      $this->view->code_membre = $_POST['integrateur_membre'];
		                              $sessionmembreasso->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
                                      return;
								  }
							   }
						     }

							 $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						     $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
						     for($i = 0; $i < $_POST['cpteur']; $i++)   {
						        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription_id);
							    $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription_id);
							    if(count($integrateur2) > 0  || count($complement2) > 0) {
								    $db->rollback();
							        $this->view->param = $param;
								    $this->view->souscription_email = $_POST['souscription_email'];
								    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								    $this->view->id_canton  = $_POST['integrateur_canton'];
								    $this->view->id_ville   = $_POST['integrateur_ville'];
								    $this->view->code_membre = $_POST['integrateur_membre'];
		                            $sessionmembreasso->error = "Numéro de quittance  ".$_POST['integrateur_souscription_ordre'.$i]."  déjà  utilisé ...";
                                    return;
	                            }
						     }

							 for($i = 0; $i < $_POST['cpteur']; $i++)   {
						         $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							     $m_souscription3->find($souscription_id,$souscription3);
							     $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription3->souscription_souscription);
							     $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription3->souscription_souscription);
							     if(count($integrateur2) > 0  || count($complement2) > 0) {
								    $db->rollback();
							        $this->view->param = $param;
							        $this->view->souscription_email  = $_POST['souscription_email'];
								    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								    $this->view->id_canton  = $_POST['integrateur_canton'];
								    $this->view->id_ville   = $_POST['integrateur_ville'];
								    $this->view->code_membre = $_POST['integrateur_membre'];
		                            $sessionmembreasso->error = "Veuillez plutôt faire un complément avec le numéro quittance  ".$_POST['integrateur_souscription_ordre'.$i];
                                    return;
	                             }
						     }

							 for($i = 0; $i < $_POST['cpteur']; $i++) {
						        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    $m_souscription3->find($souscription_id,$souscription3);
						        $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
						     }

							 if($nombre_compte >= 10)   {
							    include("Transfert.php");
		                        if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                          $chemin	= "integrateurs";
		                          $file = $_FILES['integrateur_diplome']['name'];
		                          $file1='integrateur_diplome';
		                          $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                         } else {$integrateur_diplome = "";}

							     if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                           $chemin	= "integrateurs";
		                           $file = $_FILES['integrateur_document']['name'];
		                           $file1='integrateur_document';
		                           $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                         } else {$integrateur_document = "";}

							     $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                 $a  = new Application_Model_EuIntegrateur();
                                 $ma = new Application_Model_EuIntegrateurMapper();

								 $compteur = $ma->findConuter() + 1;
							     $id_souscription = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
                                 $a->setIntegrateur_id($compteur);
                                 $a->setIntegrateur_type($_POST['integrateur_type']);
                                 $a->setIntegrateur_souscription($id_souscription);

								 if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6|| $param == 7 || $param == 8
								    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                    $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                    $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                    $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                                 }

								 if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22) {
                                    if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 22) {
                                      $a->setIntegrateur_poste($_POST['integrateur_poste']);
                                    }
                                    $a->setIntegrateur_education($_POST['integrateur_education']);
                                    if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22) {
                                      $a->setIntegrateur_affiliation($_POST['integrateur_affiliation']);
                                    }
                                    $a->setIntegrateur_formation($_POST['integrateur_formation']);
                                    $a->setIntegrateur_langue($_POST['integrateur_langue']);
                                    $a->setIntegrateur_experience($_POST['integrateur_experience']);
                                    $a->setIntegrateur_document($integrateur_document);
                                    $a->setIntegrateur_diplome($integrateur_diplome);
                                  }

								  $a->setIntegrateur_attestation($_POST['integrateur_attestation']);
                                  $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);
                                  $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			                      $a->setPublier($_POST['publier']);
                                  $a->setIntegrateurAdresse($_POST['integrateur_adresse']);
                                  $a->setIntegrateurCanton($_POST['integrateur_canton']);
                                  $a->setIntegrateurVille($_POST['integrateur_ville']);
							      $a->setCode_membre($_POST['integrateur_membre']);
                                  $ma->save($a);

								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                  $integrateur  = new Application_Model_EuIntegrateur();
                                  $integrateurM = new Application_Model_EuIntegrateurMapper();
                                  $integrateurM->find($compteur,$integrateur);

                                  $integrateur->setPublier(1);
		                          $integrateurM->update($integrateur);


								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
							      $id_integrateur = $integrateur->integrateur_id;
							      $souscription = new Application_Model_EuSouscription();
                                  $m_souscription = new Application_Model_EuSouscriptionMapper();
							      $complement   = new Application_Model_EuComplementQuittance();
                                  $m_complement = new Application_Model_EuComplementQuittanceMapper();


								  for($i = 0; $i < $_POST['cpteur']; $i++) {
						             $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								     $m_souscription->find($souscription_id, $souscription);
                                     $souscription->setCode_activite($_POST["code_activite"]);
                                     $souscription->setId_metier($_POST["id_metier"]);
                                     $souscription->setSouscription_email($_POST["souscription_email"]);
                                     $m_souscription->update($souscription);

								     $cpte = $m_complement->findConuter() + 1;
								     $complement->setId_complement_quittance($cpte);
								     $complement->setIntegrateur_id($id_integrateur);
								     $complement->setSouscription_id($souscription_id);
								     $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd HH:mm:ss'));
								     $m_complement->save($complement);
                                  }

								  $code_agence = '';
								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                  if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
							         $membreasso   = new Application_Model_EuMembreasso();
                                     $m_membreasso = new Application_Model_EuMembreassoMapper();
		                             $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

									 $association = new Application_Model_EuAssociation();
                                     $m_association = new Application_Model_EuAssociationMapper();
		                             $m_association->find($membreasso->membreasso_association,$association);
		                             $code_agence = $association->code_agence;
							      }

								  // Création du compte utilisateur integrateur
								     $souscription = new Application_Model_EuSouscription();
                                     $m_souscription = new Application_Model_EuSouscriptionMapper();
		                             $m_souscription->find($integrateur->integrateur_souscription,$souscription);
								     $integrateur_souscription = $integrateur->integrateur_souscription;
								     $date_id = Zend_Date::now();

									 $association = new Application_Model_EuAssociation();
                                     $association_mapper = new Application_Model_EuAssociationMapper();

                                     $compteur_association = $association_mapper->findConuter() + 1;
                                     $association->setAssociation_id($compteur_association);
                                     $association->setAssociation_mobile($souscription->souscription_mobile);
									 if($souscription->souscription_personne == "PP") {
                                        $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
									 } else {
                                        $association->setAssociation_nom($souscription->souscription_raison);
                                     }
                                     $association->setAssociation_numero($compteur_association."INT");
                                     $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                     $association->setAssociation_email($souscription->souscription_email);
                                     $association->setAssociation_recepisse(NULL);
                                     $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                     $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                     $association->setId_filiere(NULL);
                                     $association->setCode_type_acteur(NULL);
                                     $association->setCode_statut(NULL);
                                     $association->setCode_agence($code_agence);
                                     $association->setPublier(1);
                                     $association_mapper->save($association);

									 $membreasso = new Application_Model_EuMembreasso();
                                     $membreasso_mapper = new Application_Model_EuMembreassoMapper();

								     $login = "";
								     $password = "";

								     if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								       //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                       $login = "";
                                       while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)];
                                       }
									   $password = $login.$login;

								     } else {
								       $login = $souscription->souscription_login;
									   $password = $souscription->souscription_passe;
								     }

									 $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                     $membreasso->setMembreasso_id($compteur_membreasso);
                                     $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
									 if($souscription->souscription_personne == "PP") {
                                        $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                        $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
									 } else {
                                        $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                        $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                     }
                                     $membreasso->setMembreasso_association($compteur_association);
                                     $membreasso->setMembreasso_email($souscription->souscription_email);
                                     $membreasso->setMembreasso_login($login);
                                     $membreasso->setMembreasso_passe($password);
                                     $membreasso->setMembreasso_type(1);
                                     $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                     $membreasso->setPublier(1);
								     $membreasso->setSouscription_id($souscription->souscription_id);
							         $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                     $membreasso_mapper->save($membreasso);


									 // Transfert
								     $eusouscription = new Application_Model_EuSouscription();
		                             $souscriptionM = new Application_Model_EuSouscriptionMapper();

								     $date = new Zend_Date();
		                             $compte_map = new Application_Model_EuCompteMapper();
                                     $compte      = new Application_Model_EuCompte();
			                         $sms_money   = new Application_Model_EuSmsmoney();
                                     $money_map   = new Application_Model_EuSmsmoneyMapper();

			                         $det_sms   = new Application_Model_EuDetailSmsmoney();
			                         $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                         $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                         $det_vtesms  = new Application_Model_EuDetailVentesms();

								     // insertion dans la table eu_depot_vente
				                     $m_dvente = new Application_Model_EuDepotVenteMapper();
				                     $dvente = new Application_Model_EuDepotVente();

								     $membretierscode = new Application_Model_EuMembretierscode();
                                     $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

							         $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                             $membre_pbf = '0000000000000000001M';
	                                 $code_compte_pbf = "NN-TR-".$membre_pbf;
			                         $ret = $compte_map->find($code_compte_pbf,$compte);

									 for($i = 0; $i < $_POST['cpteur']; $i++) {
									    $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
									    $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
										if($finddepot == NULL) {
										   $souscriptionM->find($souscription_id,$eusouscription);
								           $mobile = $eusouscription->souscription_mobile;
										   if($eusouscription->souscription_programme == 'CMFH')   {
										      $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                  if($eusouscription->souscription_autonome == 1) {
			                                     $nbre_compte = $eusouscription->souscription_nombre - 1;
			                                  } else {
				                                 $nbre_compte = $eusouscription->souscription_nombre;
				                              }

											  $montant = $nbre_compte * $fcaps;
									          // Traitement des produits CAPS
				                              $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
											  $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');

											  if ($lignesdetfcaps != null) {
											      $nengfcaps = $money_map->findConuter() + 1;
                                                  $sms_money->setNEng($nengfcaps)
                	                                        ->setCode_Agence(null)
                                                            ->setCreditAmount($montant)
                                                            ->setSentTo($mobile)
                                                            ->setMotif('CAPS')
                                                            ->setId_Utilisateur(null)
                                                            ->setCurrencyCode('XOF')
                                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                            ->setFromAccount($code_compte_pbf)
                                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                            ->setCreditCode($codefcaps)
                                                            ->setDestAccount(null)
                                                            ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                            ->setDestAccount_Consumed($souscription_id)
                                                            ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                            ->setNum_recu(null);
                                                   $money_map->save($sms_money);

												   // Mise à jour du compte de transfert
				                                   if($ret && ($cumulfcaps >= $montant)) {
			                                         // Mise à jour du compte de transfert
				                                     $compte->setSolde($compte->getSolde() - $montant);
                                                     $compte_map->update($compte);
	                                               } else {
			                                         $db->rollback();
	                                                 $this->view->param = $param;
											         $this->view->souscription_email  = $_POST['souscription_email'];
								                     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                     $this->view->id_canton  = $_POST['integrateur_canton'];
								                     $this->view->id_ville   = $_POST['integrateur_ville'];
								                     $this->view->code_membre = $_POST['integrateur_membre'];
			                                         $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte  CAPS est insuffisant';
                                                     return;
			                                       }

												   $l = 0;
					                               $reste = $montant;
					                               $nbre_lignesdetfcaps = count($lignesdetfcaps);
												   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
												     $lignedetfcaps = $lignesdetfcaps[$l];
                                                     $id = $lignedetfcaps->getId_detail_smsmoney();
						                             $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											         if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                //Mise à jour  des lignes d'enrégistrement
                                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
												        //insertion dans la table eu_detailventesms
						                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                              ->setId_detail_smsmoney($id)
                                                                      ->setCode_membre_dist($membre_pbf)
                                                                      ->setCode_membre(null)
                                                                      ->setType_tansfert('CAPS')
                                                                      ->setCreditcode($codefcaps)
                                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                      ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                      ->setId_utilisateur(null)
                                                                      ->setCode_produit('CAPS');
                                                         $det_vte_sms->insert($det_vtesms->toArray());

							                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                               ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                               ->setSolde_sms(0);
                                                         $det_sms_m->update($lignedetfcaps);

						                               } else {
												         //Mise à jour  des lignes d'enrégistrement
												         //insertion dans la table eu_detailventesms
						                                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                            ->setId_detail_smsmoney($id)
                                                                    ->setCode_membre_dist($membre_pbf)
                                                                    ->setCode_membre(null)
                                                                    ->setType_tansfert('CAPS')
                                                                    ->setCreditcode($codefcaps)
                                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                    ->setMont_vente($reste)
                                                                    ->setId_utilisateur(null)
                                                                    ->setCode_produit('CAPS');
                                                          $det_vte_sms->insert($det_vtesms->toArray());

                                                          $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                  $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                              $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                          $det_sms_m->update($lignedetfcaps);
						                                  $reste = 0;
												       }
											         $l++;
											       }
											  } else  {
				                                 $db->rollback();
	                                             $this->view->param = $param;
										         $this->view->souscription_email  = $_POST['souscription_email'];
								                 $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                 $this->view->id_canton  = $_POST['integrateur_canton'];
								                 $this->view->id_ville   = $_POST['integrateur_ville'];
								                 $this->view->code_membre = $_POST['integrateur_membre'];
			                                     $sessionmembreasso->error = 'Le solde du compte de transfert CAPS est null';
                                                 return;
				                              }

											  $countdvente = $m_dvente->findConuter() + 1;
				                              $dvente->setId_depot($countdvente)
					                                 ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                              $dvente->setCode_membre($_POST['integrateur_membre']);
			                                  $dvente->setCode_produit('CAPS');
				                              $dvente->setMont_depot($montant);
				                              $dvente->setMont_vendu(0);
				                              $dvente->setSolde_depot($montant);
				                              $dvente->setId_utilisateur(null);
				                              $dvente->setType_depot('AvecListe');
				                              $dvente->setSouscription_id($souscription_id);
				                              $m_dvente->save($dvente);

											  for($i = 0; $i < $nbre_compte; $i++) {
										         $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
											     $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
											     $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                                 $membretierscode->setMembretierscode_membretiers(0);
                                                 $membretierscode->setMembretierscode_code($membretierscode_code);
                                                 $membretierscode->setMembretierscode_souscription($souscription_id);
                                                 $membretierscode->setPublier(0);
                                                 $membretierscode->setCode_membre(NULL);
                                                 $membretierscode_mapper->save($membretierscode);
										      }
                                              $compteur = Util_Utils::findConuter() + 1;
				                              Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
											}
									    } else {
										    $m_dvente->find($finddepot->id_depot,$dvente);
									        $dvente->setCode_membre($_POST['integrateur_membre']);
                                            $m_dvente->update($dvente);
										}
								     }
									 //--------------------------------- Fin de la boucle FOR ---------------------------------------------------------------
									 $db->commit();

									 $souscription = new Application_Model_EuSouscription();
		                             $souscriptionM = new Application_Model_EuSouscriptionMapper();

                                     for($i = 0; $i < $_POST['cpteur']; $i++)  {
								        $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
									    include("automatisation.php");
								        recupcodegenerer($souscription_id);
                                     }

									 $souscription = new Application_Model_EuSouscription();
                                     $m_souscription = new Application_Model_EuSouscriptionMapper();
		                             $m_souscription->find($integrateur_souscription,$souscription);

                                     $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                     $html .= "<br/>";
                                     $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                     $html .= "<br/>";
							         $html .= "Login : ".$login."<br/>";
                                     $html .= "Mot de passe : ".$password."<br/>";

							         $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							         $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                     Zend_Mail::setDefaultTransport($tr);
                                     $mail = new Zend_Mail();

							         $mail->setBodyHtml($html);
                                     $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                     $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                     $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                     $mail->send($tr);

									 $sessionmembreasso->error = "Opération bien effectuée ...";
		                             $this->_redirect('/integrateur/addintegrateurquittance/param/'.$_POST['integrateur_type']);

							 } else {
						         $db->rollback();
							     $this->view->param = $param;
							     $this->view->souscription_email  = $_POST['souscription_email'];
							     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							     $this->view->id_canton  = $_POST['integrateur_canton'];
							     $this->view->id_ville   = $_POST['integrateur_ville'];
							     $this->view->code_membre = $_POST['integrateur_membre'];
		                         $sessionmembreasso->error = "Le nombre de comptes marchands souscris est insuffisant pour effectuer cette operation ...";
							     return;
						     }

	                  } catch (Exception $exc) {
				          $db->rollback();
	                      $this->view->param = $param;
						  $this->view->souscription_email  = $_POST['souscription_email'];
						  $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						  $this->view->id_canton  = $_POST['integrateur_canton'];
						  $this->view->id_ville   = $_POST['integrateur_ville'];
						  $this->view->code_membre = $_POST['integrateur_membre'];
                          $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                          return;
                      }

	              }
	       }
	       $param = (int)$this->_request->getParam('param');
	       $this->view->param = $param;

	}





	public function addintegrateur1Action() {
	       /* page integrateur/addintegrateur - Ajout d'une integrateur */
		   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmcint');
		   if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville  = new Application_Model_EuVilleMapper();
		   $m_souscription2 = new Application_Model_EuSouscriptionMapper();
           $cantons  = $t_canton->fetchAll();
           $villes   = $m_ville->fetchAll();
           $this->view->cantons = $cantons;
           $this->view->villes  = $villes;
		   $request = $this->getRequest ();
		   if ($request->isPost()) {
		      if (isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
			      && isset($_POST['code_activite']) && $_POST['code_activite']!=""
				  && isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
				  && isset($_POST['integrateur_attestation'])
				  && $_POST['integrateur_attestation'] == 1) {
						$db = Zend_Db_Table::getDefaultAdapter();
                        $db->beginTransaction();
					    try {
						    $souscription3 = new Application_Model_EuSouscription();
                            $m_souscription3 = new Application_Model_EuSouscriptionMapper();
							$membre = new Application_Model_EuMembre();
	                        $m_map  = new Application_Model_EuMembreMapper();
					        $membremoral = new Application_Model_EuMembreMorale();
	                        $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					        $param = (int)$this->_request->getParam('param');
					        $nombre_compte = 0;
					        $cpte = $_POST['cpteur'];

							if(substr($_POST['integrateur_membre'],19,1) == 'P') {
						          $findmembre = $m_map->find($_POST['integrateur_membre'],$membre);
						          if($findmembre == false) {
						             $db->rollback();
					                 $this->view->param = $param;
						             $this->view->souscription_email  = $_POST['souscription_email'];
						             $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							         $this->view->id_canton  = $_POST['integrateur_canton'];
							         $this->view->id_ville   = $_POST['integrateur_ville'];
							         $this->view->code_membre = $_POST['integrateur_membre'];
		                             $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					                 return;
						           }
					         } else {
						           $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						           if($findmembre == false) {
						              $db->rollback();
					                  $this->view->param = $param;
						              $this->view->souscription_email  = $_POST['souscription_email'];
						              $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							          $this->view->id_canton  = $_POST['integrateur_canton'];
							          $this->view->id_ville   = $_POST['integrateur_ville'];
							          $this->view->code_membre = $_POST['integrateur_membre'];
		                              $sessionmembreasso->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					                  return;
						           }
					          }

							  for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				                  $numero_quittance = $_POST['integrateur_souscription_ordre'.$i];
					              $j = $i + 1;
					              if($cpte > 1) {
					                  while($j < $cpte) {
						                 $num_quittance = $_POST['integrateur_souscription_ordre'.$j];
							             if($numero_quittance == $num_quittance) {
							                $db->rollback();
					                        $this->view->param = $param;
								            $this->view->souscription_email  = $_POST['souscription_email'];
								            $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								            $this->view->id_canton  = $_POST['integrateur_canton'];
								            $this->view->id_ville   = $_POST['integrateur_ville'];
								            $this->view->code_membre = $_POST['integrateur_membre'];
		                                    $sessionmembreasso->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                        return;
							            }
							            $j++;
						             }
					            }
				            }

							for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'. $i]);
						        if($souscription_id == NULL) {
							       $db->rollback();
						           $this->view->param = $param;
								   $this->view->souscription_email  = $_POST['souscription_email'];
								   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								   $this->view->id_canton  = $_POST['integrateur_canton'];
								   $this->view->id_ville   = $_POST['integrateur_ville'];
								   $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmembreasso->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre'.$i]."  est  invalide ...";
                                   return;
		                        }
					        }

                            if(count($_POST['cpteur']) > 1)  {
							    $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
							    $m_souscription3->find($id,$souscription3);
							    $souscription_souscription = $souscription3->souscription_souscription;
							    for($i = 1; $i < $_POST['cpteur']; $i++)  {
							       $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								   $m_souscription3->find($id,$souscription3);
								   if($souscription_souscription != $souscription3->souscription_souscription) {
								      $db->rollback();
								      $this->view->param = $param;
								      $this->view->souscription_email  = $_POST['souscription_email'];
								      $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								      $this->view->id_canton  = $_POST['integrateur_canton'];
								      $this->view->id_ville   = $_POST['integrateur_ville'];
								      $this->view->code_membre = $_POST['integrateur_membre'];
		                              $sessionmembreasso->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
                                      return;
								  }
							   }
						     }

							 $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						     $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
						     for($i = 0; $i < $_POST['cpteur']; $i++)   {
						        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription_id);
							    $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription_id);
							    if(count($integrateur2) > 0  || count($complement2) > 0) {
								    $db->rollback();
							        $this->view->param = $param;
								    $this->view->souscription_email = $_POST['souscription_email'];
								    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								    $this->view->id_canton  = $_POST['integrateur_canton'];
								    $this->view->id_ville   = $_POST['integrateur_ville'];
								    $this->view->code_membre = $_POST['integrateur_membre'];
		                            $sessionmembreasso->error = "Numéro de quittance  ".$_POST['integrateur_souscription_ordre'.$i]."  déjà  utilisé ...";
                                    return;
	                            }
						     }

							 for($i = 0; $i < $_POST['cpteur']; $i++)   {
						         $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							     $m_souscription3->find($souscription_id,$souscription3);
							     $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription3->souscription_souscription);
							     $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription3->souscription_souscription);
							     if(count($integrateur2) > 0  || count($complement2) > 0) {
								    $db->rollback();
							        $this->view->param = $param;
							        $this->view->souscription_email  = $_POST['souscription_email'];
								    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								    $this->view->id_canton  = $_POST['integrateur_canton'];
								    $this->view->id_ville   = $_POST['integrateur_ville'];
								    $this->view->code_membre = $_POST['integrateur_membre'];
		                            $sessionmembreasso->error = "Veuillez plutôt faire un complément avec le numéro quittance  ".$_POST['integrateur_souscription_ordre'.$i];
                                    return;
	                             }
						     }

                             for($i = 0; $i < $_POST['cpteur']; $i++) {
						        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							    $m_souscription3->find($souscription_id,$souscription3);
						        $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
						     }

							 if($nombre_compte >= 10)   {
							     include("Transfert.php");
		                         if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                               $chemin	= "integrateurs";
		                               $file = $_FILES['integrateur_diplome']['name'];
		                               $file1='integrateur_diplome';
		                               $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                         } else {$integrateur_diplome = "";}

							     if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                               $chemin	= "integrateurs";
		                               $file = $_FILES['integrateur_document']['name'];
		                               $file1='integrateur_document';
		                               $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                         } else {$integrateur_document = "";}

							     $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                 $a  = new Application_Model_EuIntegrateur();
                                 $ma = new Application_Model_EuIntegrateurMapper();

								 $compteur = $ma->findConuter() + 1;
							     $id_souscription = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
                                 $a->setIntegrateur_id($compteur);
                                 $a->setIntegrateur_type($_POST['integrateur_type']);
                                 $a->setIntegrateur_souscription($id_souscription);

								 if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6|| $param == 7 || $param == 8
								    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                    $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                    $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                    $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                                 }

								 if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22) {
                                    if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 22) {
                                      $a->setIntegrateur_poste($_POST['integrateur_poste']);
                                    }
                                    $a->setIntegrateur_education($_POST['integrateur_education']);
                                    if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22) {
                                      $a->setIntegrateur_affiliation($_POST['integrateur_affiliation']);
                                    }
                                    $a->setIntegrateur_formation($_POST['integrateur_formation']);
                                    $a->setIntegrateur_langue($_POST['integrateur_langue']);
                                    $a->setIntegrateur_experience($_POST['integrateur_experience']);
                                    $a->setIntegrateur_document($integrateur_document);
                                    $a->setIntegrateur_diplome($integrateur_diplome);
                                  }

								  $a->setIntegrateur_attestation($_POST['integrateur_attestation']);
                                  $a->setIntegrateur_membreasso(0);
                                  $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			                      $a->setPublier($_POST['publier']);
                                  $a->setIntegrateurAdresse($_POST['integrateur_adresse']);
                                  $a->setIntegrateurCanton($_POST['integrateur_canton']);
                                  $a->setIntegrateurVille($_POST['integrateur_ville']);
							      $a->setCode_membre($_POST['integrateur_membre']);
                                  $ma->save($a);


								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                  $integrateur  = new Application_Model_EuIntegrateur();
                                  $integrateurM = new Application_Model_EuIntegrateurMapper();
                                  $integrateurM->find($compteur,$integrateur);

                                  $integrateur->setPublier(1);
		                          $integrateurM->update($integrateur);

								  ///////////////////////////////////////////////////////////////////////////////////////////////////////
							      $id_integrateur = $integrateur->integrateur_id;
							      $souscription = new Application_Model_EuSouscription();
                                  $m_souscription = new Application_Model_EuSouscriptionMapper();
							      $complement   = new Application_Model_EuComplementQuittance();
                                  $m_complement = new Application_Model_EuComplementQuittanceMapper();

							      for($i = 0; $i < $_POST['cpteur']; $i++) {
						              $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								      $m_souscription->find($souscription_id, $souscription);
                                      $souscription->setCode_activite($_POST["code_activite"]);
                                      $souscription->setId_metier($_POST["id_metier"]);
                                      $souscription->setSouscription_email($_POST["souscription_email"]);
                                      $m_souscription->update($souscription);

								      $cpte = $m_complement->findConuter() + 1;
								      $complement->setId_complement_quittance($cpte);
								      $complement->setIntegrateur_id($id_integrateur);
								      $complement->setSouscription_id($souscription_id);
								      $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
								      $m_complement->save($complement);
                                   }

								   $code_agence = '';
								   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                   if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
								         $membreasso   = new Application_Model_EuMembreasso();
                                         $m_membreasso = new Application_Model_EuMembreassoMapper();
		                                 $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);

									     $association = new Application_Model_EuAssociation();
                                         $m_association = new Application_Model_EuAssociationMapper();
		                                 $m_association->find($membreasso->membreasso_association,$association);
		                                 $code_agence = $association->code_agence;

									     $recubancaire = new Application_Model_EuRecubancaire();
                                         $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

									     $partagea = new Application_Model_EuPartagea();
                                         $partagea_mapper = new Application_Model_EuPartageaMapper();

									     $partagem = new Application_Model_EuPartagem();
                                         $partagem_mapper = new Application_Model_EuPartagemMapper();

                                   }

								   $eusouscription = new Application_Model_EuSouscription();
		                           $souscriptionM = new Application_Model_EuSouscriptionMapper();

								   $date = new Zend_Date();
		                           $compte_map = new Application_Model_EuCompteMapper();
                                   $compte      = new Application_Model_EuCompte();
			                       $sms_money   = new Application_Model_EuSmsmoney();
                                   $money_map   = new Application_Model_EuSmsmoneyMapper();

			                       $det_sms   = new Application_Model_EuDetailSmsmoney();
			                       $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                       $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                       $det_vtesms  = new Application_Model_EuDetailVentesms();

							       // insertion dans la table eu_depot_vente
				                   $m_dvente = new Application_Model_EuDepotVenteMapper();
				                   $dvente = new Application_Model_EuDepotVente();

							       $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                           $membre_pbf = '0000000000000000001M';
	                               $code_compte_pbf = "NN-TR-".$membre_pbf;
			                       $ret = $compte_map->find($code_compte_pbf,$compte);

								   for($i = 0; $i < $_POST['cpteur']; $i++) {
								       $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
									   $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
									   if($finddepot == NULL) {
									       $souscriptionM->find($souscription_id,$eusouscription);
								           $mobile = $eusouscription->souscription_mobile;
										   if($eusouscription->souscription_programme == 'CMFH')   {
										     $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                 if($eusouscription->souscription_autonome == 1) {
			                                    $nbre_compte = $eusouscription->souscription_nombre - 1;
			                                 } else {
				                                $nbre_compte = $eusouscription->souscription_nombre;
				                             }

											 $montant = $nbre_compte * $fcaps;
									         // Traitement des produits CAPS
				                             $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
											 $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
											 if ($lignesdetfcaps != null) {
											     $nengfcaps = $money_map->findConuter() + 1;
                                                 $sms_money->setNEng($nengfcaps)
                	                                       ->setCode_Agence(null)
                                                           ->setCreditAmount($montant)
                                                           ->setSentTo($mobile)
                                                           ->setMotif('CAPS')
                                                           ->setId_Utilisateur(null)
                                                           ->setCurrencyCode('XOF')
                                                           ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                           ->setFromAccount($code_compte_pbf)
                                                           ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                           ->setCreditCode($codefcaps)
                                                           ->setDestAccount(null)
                                                           ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                           ->setDestAccount_Consumed('CAPS-'.$souscription_id)
                                                           ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                           ->setNum_recu(null);
                                                  $money_map->save($sms_money);

												  // Mise à jour du compte de transfert
				                                  if($ret && ($cumulfcaps >= $montant)) {
			                                         // Mise à jour du compte de transfert
				                                     $compte->setSolde($compte->getSolde() - $montant);
                                                     $compte_map->update($compte);
	                                              } else {
			                                         $db->rollback();
	                                                 $this->view->param = $param;
											         $this->view->souscription_email  = $_POST['souscription_email'];
								                     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                     $this->view->id_canton  = $_POST['integrateur_canton'];
								                     $this->view->id_ville   = $_POST['integrateur_ville'];
								                     $this->view->code_membre = $_POST['integrateur_membre'];
			                                         $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte  CAPS est insuffisant';
                                                     return;
			                                      }

												  $l = 0;
					                              $reste = $montant;
					                              $nbre_lignesdetfcaps = count($lignesdetfcaps);
												  while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										                $lignedetfcaps = $lignesdetfcaps[$l];
                                                        $id = $lignedetfcaps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											            if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                   //Mise à jour  des lignes d'enrégistrement
                                                           $reste = $reste - $lignedetfcaps->getSolde_sms();
												           //insertion dans la table eu_detailventesms
						                                   $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                              ->setId_detail_smsmoney($id)
                                                                      ->setCode_membre_dist($membre_pbf)
                                                                      ->setCode_membre(null)
                                                                      ->setType_tansfert('CAPS')
                                                                      ->setCreditcode($codefcaps)
                                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                      ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                      ->setId_utilisateur(null)
                                                                      ->setCode_produit('CAPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());

							                                $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                                  ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                                  ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfcaps);


						                               } else {
												         //Mise à jour  des lignes d'enrégistrement
												         //insertion dans la table eu_detailventesms
						                                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                            ->setId_detail_smsmoney($id)
                                                                    ->setCode_membre_dist($membre_pbf)
                                                                    ->setCode_membre(null)
                                                                    ->setType_tansfert('CAPS')
                                                                    ->setCreditcode($codefcaps)
                                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                    ->setMont_vente($reste)
                                                                    ->setId_utilisateur(null)
                                                                    ->setCode_produit('CAPS');
                                                          $det_vte_sms->insert($det_vtesms->toArray());

                                                          $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                  $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                              $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                          $det_sms_m->update($lignedetfcaps);
						                                  $reste = 0;
												        }
										                $l++;
										          }

											 } else  {
				                                $db->rollback();
	                                            $this->view->param = $param;
										        $this->view->souscription_email  = $_POST['souscription_email'];
								                $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                $this->view->id_canton  = $_POST['integrateur_canton'];
								                $this->view->id_ville   = $_POST['integrateur_ville'];
								                $this->view->code_membre = $_POST['integrateur_membre'];
			                                    $sessionmembreasso->error = 'Le solde du compte de transfert CAPS est null';
                                                return;
				                            }

											$countdvente = $m_dvente->findConuter() + 1;
				                            $dvente->setId_depot($countdvente)
					                               ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                            $dvente->setCode_membre($_POST['integrateur_membre']);
			                                $dvente->setCode_produit('CAPS');
				                            $dvente->setMont_depot($montant);
				                            $dvente->setMont_vendu(0);
				                            $dvente->setSolde_depot($montant);
				                            $dvente->setId_utilisateur(null);
				                            $dvente->setType_depot('AvecListe');
				                            $dvente->setSouscription_id($souscription_id);
				                            $m_dvente->save($dvente);

									        $compteur = Util_Utils::findConuter() + 1;
				                            Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								            include("automatisation.php");
								            codegenerer($souscription_id);

									   }


									   } else {
								           $m_dvente->find($finddepot->id_depot,$dvente);
									       $dvente->setCode_membre($_POST['integrateur_membre']);
                                           $m_dvente->update($dvente);

                                           include("automatisation.php");
								           recupcodegenerer($souscription_id);
								      }

								   }

								   $souscription = new Application_Model_EuSouscription();
                                   $m_souscription = new Application_Model_EuSouscriptionMapper();
		                           $m_souscription->find($integrateur->integrateur_souscription,$souscription);

								   $date_id = Zend_Date::now();

                                   $association = new Application_Model_EuAssociation();
                                   $association_mapper = new Application_Model_EuAssociationMapper();

                                   $compteur_association = $association_mapper->findConuter() + 1;
                                   $association->setAssociation_id($compteur_association);
                                   $association->setAssociation_mobile($souscription->souscription_mobile);
                                   $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);

							       $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();

								   $login = "";
								   $password = "";

								   if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                        $login .= $liste[rand(0,61)];
                                      }
									  $password = $login.$login;

								   } else {
								      $login = $souscription->souscription_login;
									  $password = $souscription->souscription_passe;
								   }

								   $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                   $membreasso->setMembreasso_id($compteur_membreasso);
                                   $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                   $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                   $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                   $membreasso->setMembreasso_association($compteur_association);
                                   $membreasso->setMembreasso_email($souscription->souscription_email);
                                   $membreasso->setMembreasso_login($login);
                                   $membreasso->setMembreasso_passe($password);
                                   $membreasso->setMembreasso_type(1);
                                   $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $membreasso->setPublier(1);
								   $membreasso->setSouscription_id($souscription->souscription_id);
							       $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                   $membreasso_mapper->save($membreasso);

							       $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                   $html .= "<br/>";
                                   $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                   $html .= "<br/>";
							       $html .= "Login : ".$login."<br/>";
                                   $html .= "Mot de passe : ".$password."<br/>";

							       $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							       $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                   Zend_Mail::setDefaultTransport($tr);
                                   $mail = new Zend_Mail();

							       $mail->setBodyHtml($html);
                                   $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                   $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                   $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                   $mail->send($tr);

							       $db->commit();
                                   $sessionmembreasso->error = "Opération bien effectuée ...";
		                           $this->_redirect('/integrateur/addintegrateur/param/'.$_POST['integrateur_type']);


							 } else {
						         $db->rollback();
							     $this->view->param = $param;
							     $this->view->souscription_email  = $_POST['souscription_email'];
							     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							     $this->view->id_canton  = $_POST['integrateur_canton'];
							     $this->view->id_ville   = $_POST['integrateur_ville'];
							     $this->view->code_membre = $_POST['integrateur_membre'];
		                         $sessionmembreasso->error = "Le nombre de comptes marchands souscrits est insuffisant pour effectuer cette operation ...";
							     return;
						     }


		                } catch (Exception $exc) {
				          $db->rollback();
	                      $this->view->param = $param;
						  $this->view->souscription_email  = $_POST['souscription_email'];
						  $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						  $this->view->id_canton  = $_POST['integrateur_canton'];
						  $this->view->id_ville   = $_POST['integrateur_ville'];
						  $this->view->code_membre = $_POST['integrateur_membre'];
                          $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                          return;
                        }

		           }
		   }

		   $param = (int)$this->_request->getParam('param');
	       $this->view->param = $param;
    }




	public function addintegrateuroldAction() {
	       /* page integrateur/addintegrateur - Ajout d'une integrateur */

		   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmcint');

	       if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville = new Application_Model_EuVilleMapper ();
           $cantons = $t_canton->fetchAll();
           $villes = $m_ville->fetchAll();
           $this->view->cantons = $cantons;
           $this->view->villes = $villes;
		   if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	          if (isset($_POST['integrateur_souscription_ordre']) && $_POST['integrateur_souscription_ordre']!="" && isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" && isset($_POST['code_activite']) && $_POST['code_activite']!="" && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation']==1) {
		          $param = (int)$this->_request->getParam('param');
				  $sessionmembreasso->error = "Pour des raisons techniques, veuillez patienter pour l'opérationalité de l'interface intégrateur ...";
		          $this->_redirect('/integrateur/addintegrateur/param/'.$param);
	          }

			}

            $param = (int)$this->_request->getParam('param');
	        $this->view->param = $param;
	}



    public function addintegrateurolderAction() {
        /* page integrateur/addintegrateur - Ajout d'une integrateur */

		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

		$t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper ();
        $cantons = $t_canton->fetchAll();
        $villes = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	       if (isset($_POST['integrateur_souscription_ordre']) && $_POST['integrateur_souscription_ordre']!="" && isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" && isset($_POST['code_activite']) && $_POST['code_activite']!="" && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation']==1) {
		        $param = (int)$this->_request->getParam('param');
	            //$this->view->param = $param;

                $m_souscription2 = new Application_Model_EuSouscriptionMapper();
		        $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre']);

		        if($souscription_id == NULL) {
		            $sessionmembreasso->error = "Numéro de quittance invalide ...";
		        } else {
                    $souscription3 = new Application_Model_EuSouscription();
                    $m_souscription3 = new Application_Model_EuSouscriptionMapper();
		            $m_souscription3->find($souscription_id, $souscription3);

		if(count($souscription3) > 0 && $souscription3->souscription_nombre >= 10) {

           $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
		   $integrateur2 = $m_integrateur2->fetchAllBySouscription($souscription_id);

		   if(count($integrateur2) > 0) {
		     $sessionmembreasso->error = "Numéro de quittance déjà utilisé ...";
		   } else {
             $souscription = new Application_Model_EuSouscription();
             $m_souscription = new Application_Model_EuSouscriptionMapper();
		     $m_souscription->find($souscription_id, $souscription);

             $souscription->setCode_activite($_POST["code_activite"]);
             $souscription->setId_metier($_POST["id_metier"]);
             $souscription->setSouscription_email($_POST["souscription_email"]);
             $m_souscription->update($souscription);

		     include("Transfert.php");
		     if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		         $chemin	= "integrateurs";
		         $file = $_FILES['integrateur_diplome']['name'];
		         $file1='integrateur_diplome';
		         $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		     } else {$integrateur_diplome = "";}


		     if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		        $chemin	= "integrateurs";
		        $file = $_FILES['integrateur_document']['name'];
		        $file1='integrateur_document';
		        $integrateur_document = $chemin."/".transfert($chemin,$file1);
		     } else {$integrateur_document = "";}

             $date_id = new Zend_Date(Zend_Date::ISO_8601);
             $a = new Application_Model_EuIntegrateur();
             $ma = new Application_Model_EuIntegrateurMapper();

             $compteur = $ma->findConuter() + 1;
             $a->setIntegrateur_id($compteur);
             $a->setIntegrateur_type($_POST['integrateur_type']);
             $a->setIntegrateur_souscription($souscription_id);
             if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6|| $param == 7 || $param == 8) {
                $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
             }
             if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22) {
             if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 22) {
                $a->setIntegrateur_poste($_POST['integrateur_poste']);
             }
            $a->setIntegrateur_education($_POST['integrateur_education']);
            if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 22) {
                $a->setIntegrateur_affiliation($_POST['integrateur_affiliation']);
            }
            $a->setIntegrateur_formation($_POST['integrateur_formation']);
            $a->setIntegrateur_langue($_POST['integrateur_langue']);
            $a->setIntegrateur_experience($_POST['integrateur_experience']);
            $a->setIntegrateur_document($integrateur_document);
            $a->setIntegrateur_diplome($integrateur_diplome);
            }
            $a->setIntegrateur_attestation($_POST['integrateur_attestation']);
            $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);/**/
            $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			$a->setPublier($_POST['publier']);
            $a->setIntegrateurAdresse($_POST['integrateur_adresse']);
            $a->setIntegrateurCanton($_POST['integrateur_canton']);
            $a->setIntegrateurVille($_POST['integrateur_ville']);
            $ma->save($a);


        //////////////////////////////////////////////////////////

        $integrateur = new Application_Model_EuIntegrateur();
        $integrateurM = new Application_Model_EuIntegrateurMapper();
        $integrateurM->find($compteur, $integrateur);

        $integrateur->setPublier(1);
		$integrateurM->update($integrateur);



        $id_integrateur = $integrateur->integrateur_id;
        //////////////////////////////////////////
        /*if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
           $membreasso = new Application_Model_EuMembreasso();
           $m_membreasso = new Application_Model_EuMembreassoMapper();
		   $m_membreasso->find($integrateur->integrateur_membreasso, $membreasso);

           $association = new Application_Model_EuAssociation();
           $m_association = new Application_Model_EuAssociationMapper();
		   $m_association->find($membreasso->membreasso_association, $association);
		   $code_agence = $association->code_agence;

           $recubancaire = new Application_Model_EuRecubancaire();
           $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
           $cumul_recubancaire = $recubancaire_mapper->findCumul($integrateur->integrateur_souscription);
           //$cumul_recubancaire = 0;

		   if($cumul_recubancaire > 0) {

		     if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {

			    $partagea_montant = floor($cumul_recubancaire / 100 * 5);

		    } else {

			   $partagea_montant = floor($cumul_recubancaire / 100 * 5);

		   }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_integrateur($integrateur->integrateur_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_integrateur($integrateur->integrateur_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}

			}*/


        $membreasso_sous_m = new Application_Model_EuMembreassoMapper();
        $membreasso_sous = $membreasso_sous_m->fetchAllBySouscription($integrateur->integrateur_souscription);



///////////////////////////////////////////////////////////////
//if($integrateur->integrateur_type <= 8 && count($membreasso_sous) > 0){

        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
		$m_souscription->find($integrateur->integrateur_souscription, $souscription);

        $date_id = Zend_Date::now();

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();

            $compteur_association = $association_mapper->findConuter() + 1;
            $association->setAssociation_id($compteur_association);
            $association->setAssociation_mobile($souscription->souscription_mobile);
            $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
            $association->setAssociation_numero($compteur_association."INT");
            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
            $association->setAssociation_email($souscription->souscription_email);
            $association->setAssociation_recepisse(NULL);
            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $association->setId_filiere(NULL);
            $association->setCode_type_acteur(NULL);
            $association->setCode_statut(NULL);
            $association->setCode_agence($code_agence);
            $association->setPublier(1);
            $association_mapper->save($association);





        $date_id = Zend_Date::now();

        $membreasso = new Application_Model_EuMembreasso();
        $membreasso_mapper = new Application_Model_EuMembreassoMapper();

            $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
            $membreasso->setMembreasso_id($compteur_membreasso);
            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
            $membreasso->setMembreasso_nom($souscription->souscription_nom);
            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
            $membreasso->setMembreasso_association($compteur_association);
            $membreasso->setMembreasso_email($souscription->souscription_email);
            $membreasso->setMembreasso_login($souscription->souscription_login);
            $membreasso->setMembreasso_passe($souscription->souscription_passe);
            $membreasso->setMembreasso_type(1);
            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $membreasso->setPublier(1);
            $membreasso_mapper->save($membreasso);


$html = "Vous avez rempli le formulaire d'intégrateur, donc utilisez les mêmes Login et Mot de passe pour vous connecter à votre espace Integrateur .";
$html .= "<br />";
$html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
$html .= "<br />";
$html .= "Login : ".$souscription->souscription_login;
$html .= "<br />";
$html .= "Mot de passe : ".$souscription->souscription_passe;
$html .= "<br />";


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));

$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->setSubject('Formulaire Intégrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->send($tr);

	//}




//////////////////////////////////////////////////////////

            $sessionmembreasso->error = "Opération bien effectuée ...";



		$this->_redirect('/integrateur/addintegrateur/param/'.$_POST['integrateur_type']);
								}

			}else{
		   $sessionmembreasso->error = "Numéro de quittance doit être celui d'un CMFH Offreur de projet ...";
				}
		}

		} else {  $sessionmembreasso->error = "Champs * obligatoire ...";  }
		}


            $param = (int)$this->_request->getParam('param');
	 $this->view->param = $param;


    }




	public function listintegrateurAction()
    {
        /* page integrateur/listlivraison - Liste des livraisons */

		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $integrateur = new Application_Model_EuIntegrateurMapper();
        $this->view->entries = $integrateur->fetchAllByMembreasso($sessionmembreasso->membreasso_id);

    }




    public function listintegrateur1Action()
    {
        /* page integrateur/listlivraison - Liste des livraisons */

		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $integrateur = new Application_Model_EuIntegrateurMapper();
        $this->view->entries = $integrateur->fetchAllByAssociation($sessionmembreasso->membreasso_association);

    }






    public function suppmembreassoAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $membreasso = new Application_Model_EuMembreasso();
        $membreassoM = new Application_Model_EuMembreassoMapper();
        $membreassoM->find($id, $membreasso);

        //$membreassoM->delete($membreasso->membreasso_id);

        }

		$this->_redirect('/integrateur/listmembreasso');
    }



    public function detailsmembreassoAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
               $membreasso = new Application_Model_EuMembreasso();
               $membreassoM = new Application_Model_EuMembreassoMapper();
               $membreassoM->find($id, $membreasso);
		       $this->view->membreasso = $membreasso;
            }

	}



    public function addsouscriptionAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

		$param = (int)$this->_request->getParam('param');
	    $this->view->param = $param;

		$request = $this->getRequest ();
		if ($request->isPost ()) {

		    if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""
			    && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!=""
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!=""
				&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
				&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
				&& isset($_POST['souscription_type']) && $_POST['souscription_type']!=""
				&& isset($_POST['souscription_numero']) && $_POST['souscription_numero']!=""
				&& isset($_POST['souscription_date_numero']) && $_POST['souscription_date_numero']!="0000-00-00"
				&& isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!=""
				&& isset($_POST['souscription_montant']) && $_POST['souscription_montant']!=""
				&& isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="" && verif_img($_FILES['souscription_vignette']['name']) == 1
				) {

		            $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select();
			            if($_POST['souscription_personne'] == "PP") {
	                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("souscription_nom"))));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("souscription_prenom"))));
			            } else {
	                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("souscription_raison"))));
			            }
	                    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			              $souscription_ok = 0;
			            }

                        /////////////////controle numero de banque
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select()
                                                //->where('souscription_banque = ?',$request->getParam("souscription_banque"))
                                                ->where('souscription_numero = ?',$request->getParam("souscription_numero"))
                                                ;
                        if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_numero") != "") {
                            $db->rollback();
                            $this->view->param = $param;
                            $sessionmembreasso->error = "Numéro de banque déjà utilisé ...";
                            $this->_redirect('/integrateur/addsouscription/param/'.$param);
                            return;
                        }



						/////////////////controle login
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
                        if ($rowseusouscription = $eusouscription->fetchRow($select) && ($request->getParam("souscription_login") != "" && $request->getParam("souscription_login") != NULL) && $souscription_ok == 0) {
                            $db->rollback();
                            $this->view->param = $param;
                            $sessionmembreasso->error = "Login déjà existant ...";
                            $this->_redirect('/integrateur/addsouscription/param/'.$param);
                            return;
                        }  else if($request->getParam("souscription_passe") != $request->getParam("confirme")) {
                            $db->rollback();
                            $this->view->param = $param;
                            $sessionmembreasso->error = "Mot de passe incorret ...";
                            $this->_redirect('/integrateur/addsouscription/param/'.$param);
                            return;

                        } else {

						    $date_id = Zend_Date::now();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

		                    include("Transfert.php");
		                    if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
		                        $chemin	= "souscriptions";
		                        $file = $_FILES['souscription_vignette']['name'];
		                        $file1='souscription_vignette';
		                        $souscription_vignette = $chemin."/".transfert($chemin,$file1);
		                    } else {$souscription_vignette = "";}

							$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne($request->getParam("souscription_personne"));
			                if($_POST['souscription_personne'] == "PP") {
                                $souscription->setSouscription_nom($request->getParam("souscription_nom"));
                                $souscription->setSouscription_prenom($request->getParam("souscription_prenom"));
			                } else {
                                $souscription->setSouscription_raison($request->getParam("souscription_raison"));
                                $souscription->setCode_type_acteur($request->getParam("type_acteur"));
                                $souscription->setCode_statut($request->getParam("statut_juridique"));
			                }
                            $souscription->setSouscription_email($request->getParam("souscription_email"));
                            $souscription->setSouscription_mobile($request->getParam("souscription_mobile"));
                            $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                            $souscription->setSouscription_type($request->getParam("souscription_type"));
                            $souscription->setSouscription_numero($request->getParam("souscription_numero"));
                            $souscription->setSouscription_date_numero($request->getParam("souscription_date_numero"));
			                if($_POST['souscription_type'] == "Banque") {
                                $souscription->setSouscription_banque($request->getParam("souscription_banque"));
			                }
                            $souscription->setSouscription_montant($request->getParam("souscription_montant"));
                            $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                            $souscription->setSouscription_programme($request->getParam("souscription_programme"));
                            $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
                            //$souscription->setSouscription_filiere($_POST['souscription_filiere']);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $souscription->setSouscription_vignette($souscription_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("souscription_ville"));
                            $souscription->setSouscription_quartier($request->getParam("souscription_quartier"));
			                if($_POST['souscription_programme'] == "CMFH") {
                                $souscription->setSouscription_login($request->getParam("souscription_login"));
                                $souscription->setSouscription_passe($request->getParam("souscription_passe"));
			                }
			                if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
				            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
					        }

                            $souscription->setSouscription_autonome($request->getParam("souscription_autonome"));
			                $souscription->setPublier(0);
							$souscription->setErreur(0);
							$souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);


							///////////////////////////////////////////////////////////////////////////////////////

							$recubancaire = new Application_Model_EuRecubancaire();
                            $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

                            $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
                            $recubancaire->setRecubancaire_id($compteur_recubancaire);
                            $recubancaire->setRecubancaire_type($request->getParam("souscription_type"));
                            $recubancaire->setRecubancaire_numero($request->getParam("souscription_numero"));
                            $recubancaire->setRecubancaire_date_numero($request->getParam("souscription_date_numero"));
			                if($_POST['souscription_type'] == "Banque") {
                                $recubancaire->setRecubancaire_banque($request->getParam("souscription_banque"));
			                }
                            $recubancaire->setRecubancaire_montant($request->getParam("souscription_montant"));
                            $recubancaire->setRecubancaire_vignette($souscription_vignette);
                            $recubancaire->setRecubancaire_souscription($compteur_souscription);
			                $recubancaire->setPublier(1);
                            $recubancaire_mapper->save($recubancaire);

							/////////////////////////////////////////////////////////////////////////////////////////////
							$association = new Application_Model_EuAssociation();
                            $m_association = new Application_Model_EuAssociationMapper();
		                    $m_association->find($sessionmembreasso->membreasso_association, $association);
		                    $code_agence = $association->code_agence;

							/*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

			                    if($_POST['souscription_programme'] == "KACM"){
			                        $partagea_montant = floor(($_POST['souscription_montant'] / 100 * 10) / 2);
				                } else {
			                        $partagea_montant = floor(($_POST['souscription_montant'] / 100 * 5) / 2);
					            }

		                    } else {
			                    if($_POST['souscription_programme'] == "KACM"){
			                       $partagea_montant = floor($_POST['souscription_montant'] / 100 * 10);
				                } else {
			                       $partagea_montant = floor($_POST['souscription_montant'] / 100 * 5);
					            }
		                    }*/

							//////////////////////////////////////////////////////////////////////////////////////////////
							    /*$partagea = new Application_Model_EuPartagea();
                                $partagea_mapper = new Application_Model_EuPartageaMapper();

                                $compteur_partagea = $partagea_mapper->findConuter() + 1;
                                $partagea->setPartagea_id($compteur_partagea);
                                $partagea->setPartagea_association(1);
                                $partagea->setPartagea_souscription($compteur_souscription);
                                $partagea->setPartagea_montant($partagea_montant * 0.75);
                                $partagea_mapper->save($partagea);*/

							////////////////////////////////////////////////////////////////////////////////////////////////
                                /*$partagem = new Application_Model_EuPartagem();
                                $partagem_mapper = new Application_Model_EuPartagemMapper();

                                $compteur_partagem = $partagem_mapper->findConuter() + 1;
                                $partagem->setPartagem_id($compteur_partagem);
                                $partagem->setPartagem_membreasso(1);
                                $partagem->setPartagem_souscription($compteur_souscription);
                                $partagem->setPartagem_montant($partagea_montant * 0.25);
                                $partagem_mapper->save($partagem);*/

                            //////////////////////////////////////////
                                /*$membreasso = new Application_Model_EuMembreasso();

                                $m_membreasso = new Application_Model_EuMembreassoMapper();
		                        $m_membreasso->find(1, $membreasso);*/

                                $html = "";
                                if($_POST['souscription_personne'] == "PP") {
                                    $html .= "Nom : ".$request->getParam("souscription_nom")."<br />";
                                    $html .= "Prenom : ".$request->getParam("souscription_prenom")."<br />";
			                    } else {
                                    $html .= "Raison sociale : ".$request->getParam("souscription_raison")."<br />";
                                    if($_POST["type_acteur"] == 'EI'){$html .= "Type Association : Entreprise Industrie<br />";}
                                    if($_POST["type_acteur"] == 'OE'){$html .= "Type Association : Op&eacute;rateur Economique<br />";}
                                    if($_POST["type_acteur"] == 'OSE'){$html .= "Type Association : Op&eacute;rateur Socio-Economique<br />";}
                                    if($_POST["type_acteur"] == 'PEI'){$html .= "Type Association : Partenaire Entreprise Industrie<br />";}
                                    if($_POST["type_acteur"] == 'POE'){$html .= "Type Association : Partenaire Op&eacute;rateur Economique<br />";}
                                    if($_POST["type_acteur"] == 'POSE'){$html .= "Type Association : Partenaire Op&eacute;rateur Socio-Economique<br />";}

                                    $statutjuridique = new Application_Model_EuStatutJuridique();
                                    $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                                    $statutjuridiqueM->find($request->getParam("statut_juridique"), $statutjuridique);
                                    $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br />";
			                    }

                                $html .= "E-mail : ".$request->getParam("souscription_email")."<br />";
                                $html .= "Mobile : ".$request->getParam("souscription_mobile")."<br />";
                                $html .= "Ville : ".$request->getParam("souscription_ville")."<br/>";
                                $html .= "Quartier : ".$request->getParam("souscription_quartier")."<br />";
                                $html .= "Programme : ".$request->getParam("souscription_programme")."<br />";

								if(isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']!="") {
                                    $type_candidatM = new Application_Model_DbTable_EuTypeCandidat();
                                    $type_candidat = $type_candidatM->find($request->getParam("souscription_type_candidat"));
									$row = $type_candidat->current();
                                    $html .= "Type candidat : ".$row->libelle_type_candidat."<br />";
								}

                                /*
                                $filiere = new Application_Model_EuFiliere();
                                $filiereM = new Application_Model_EuFiliereMapper();
                                $filiereM->find($_POST['souscription_filiere'], $filiere);
                                $html .= "Filiere : ".$filiere->nom_filiere."<br />";*/

								if(isset($_POST['code_activite']) && $_POST['code_activite']!="") {
                                $activiteM = new Application_Model_DbTable_EuActivite();
                                $activite = $activiteM->find($request->getParam("code_activite"));
								$row = $activite->current();
                                $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";
								}
								if(isset($_POST['id_metier']) && $_POST['id_metier']!="") {
								$metierM = new Application_Model_DbTable_EuMetier();
                                $metier = $metierM->find($request->getParam("id_metier"));
								$row = $metier->current();
                                $html .= "M&eacute;tier : ".$row->libelle_metier."<br />";
                                }
								if(isset($_POST['id_competence']) && $_POST['id_competence']!="") {
                                $competenceM = new Application_Model_DbTable_EuCompetence();
                                $competence = $competenceM->find($request->getParam("id_competence"));
								$row = $competence->current();
                                $html .= "Comp&eacute;tence : ".$row->libelle_competence."<br />";
								}

								$html .= "Type : ".$request->getParam("souscription_type")."<br/>";

			                    if($_POST['souscription_type'] == "Banque") {
                                    $banque = new Application_Model_EuBanque();
                                    $banqueM = new Application_Model_EuBanqueMapper();
                                    $banqueM->find($request->getParam("souscription_banque"), $banque);
                                    $html .= "Banque : ".$banque->libelle_banque."<br/>";
			                    }

								$html .= "Numero Re&ccedil;u Banque ou Num&eacute;ro Transaction Flooz: ".$request->getParam("souscription_numero")."<br/>";
                                $html .= "Date Re&ccedil;u Banque ou Transaction Flooz: ".$request->getParam("souscription_date_numero")."<br/>";
                                $html .= "Montant : ".$request->getParam("souscription_montant")."<br/>";
                                $html .= "Nombre : ".$request->getParam("souscription_nombre")."<br/>";

                                $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                                $html .= "Vignette : <a href='https://esmcgie.com/".$souscription_vignette."'>".$souscription_vignette."</a>";

                                $html .= "Agr&eacute;ment OSE/OE: ".$association->association_nom."<br />";

                                //$esmc_email	 = "achatcmmcnp@esmcgacsource.com";
                                $esmc_email	 = Util_Utils::getParamEsmc(3);

                                $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                                Zend_Mail::setDefaultTransport($tr);
                                $mail = new Zend_Mail();
                                //$mail->setBodyText('Mon texte de test');
                                $mail->setBodyHtml($html);
                                $mail->setFrom(Util_Utils::getParamEsmc(3), $association->association_nom);
                                $mail->addTo($esmc_email, "ESMC - SIF");
                                $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));

                                $mail->send();

								if(isset($_POST['souscription_mobilisateur']) && $_POST['souscription_mobilisateur'] == 1) {

								    $date_id = Zend_Date::now();
                                    $association = new Application_Model_EuAssociation();
                                    $association_mapper = new Application_Model_EuAssociationMapper();

                                    $compteur_association = $association_mapper->findConuter() + 1;
                                    $association->setAssociation_id($compteur_association);
                                    $association->setAssociation_mobile($request->getParam("souscription_mobile"));
                                    $association->setAssociation_nom($request->getParam("souscription_nom")." ".$request->getParam("souscription_prenom"));
                                    $association->setAssociation_numero($compteur_association."PP");
                                    $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                    $association->setAssociation_email($request->getParam("souscription_email"));
                                    $association->setAssociation_recepisse(NULL);
                                    $association->setAssociation_adresse($request->getParam("souscription_quartier")." - ".$request->getParam("souscription_ville"));
                                    $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $association->setId_filiere(NULL);
                                    $association->setCode_type_acteur(NULL);
                                    $association->setCode_statut(NULL);
                                    $association->setCode_agence($code_agence);
                                    $association->setPublier(1);
                                    $association_mapper->save($association);

                                    $date_id = Zend_Date::now();

                                    $membreasso = new Application_Model_EuMembreasso();
                                    $membreasso_mapper = new Application_Model_EuMembreassoMapper();

                                    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    $membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($request->getParam("souscription_mobile"));
                                    $membreasso->setMembreasso_nom($request->getParam("souscription_nom"));
                                    $membreasso->setMembreasso_prenom($request->getParam("souscription_prenom"));
                                    $membreasso->setMembreasso_association($compteur_association);
                                    $membreasso->setMembreasso_email($request->getParam("souscription_email"));
                                    $membreasso->setMembreasso_login($request->getParam("souscription_login"));
                                    $membreasso->setMembreasso_passe($request->getParam("souscription_passe"));
                                    $membreasso->setMembreasso_type(1);
                                    $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $membreasso->setPublier(1);
                                    $membreasso_mapper->save($membreasso);

							    }

								if($_POST['souscription_programme'] == "CMFH") {
                                    $html .= "<br />";
                                    $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter &acirc; votre espace d'int&eacute;grateur. Veuillez vous int&eacute;grer selon le type d'int&eacute;grateur qui vous convient.";
                                    //$html .= "<br />";
                                    //$html .= "Connectez vous ici : <a href='http://prod.esmcgacsource.com/souscription/login'>Connexion Souscription</a>";
                                    $html .= "<br />";
                                    $html .= "Login : ".$request->getParam("souscription_login")."<br />";
                                    $html .= "<br />";
                                    $html .= "Mot de passe : ".$request->getParam("souscription_passe")."<br />";
                                    $html .= "<br />";

                                    /*if(isset($_POST['souscription_mobilisateur']) && $_POST['souscription_mobilisateur'] == 1) {
                                        $html .= "Vous avez s&eacute;lectionner l'option Mobilisateur donc utilisez les m&ecirc;mes Login et Mot de passe pour vous connecter à votre espace Agr&eacute;ment OSE/OE pour pouvoir souscrire d'autres personnes.";
                                        $html .= "<br />";
                                        $html .= "Connectez vous aussi : <a href='http://prod.esmcgacsource.com/integrateur/login'>Connexion Integrateur</a>";
                                        $html .= "<br />";
                                    }*/
if($request->getParam("souscription_email") != ""){
                                    $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));

                                    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                    Zend_Mail::setDefaultTransport($tr);
                                    $mail = new Zend_Mail();
                                    //$mail->setBodyText('Mon texte de test');
                                    $mail->setBodyHtml($html);
                                    $mail->setFrom(Util_Utils::getParamEsmc(3), $association->association_nom);
                                    $mail->addTo($request->getParam("souscription_email"), $request->getParam("souscription_nom")." ".$request->getParam("souscription_prenom"));
                                    $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                    $mail->send($tr);
}
			                    }

								$relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($request->getParam("souscription_banque"),$request->getParam("souscription_numero"),$request->getParam("souscription_date_numero"));
                                if(count($relevebancairedetail) > 0) {
								    if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']) {
								        include("automatisation.php");
								        validation_automatique($compteur_souscription);
								        // operation de transfert
										$souscription = new Application_Model_EuSouscription();
		                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
										$date = new Zend_Date();
		                                $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
			                            $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

			                            $det_sms   = new Application_Model_EuDetailSmsmoney();
			                            $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                            $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                            $det_vtesms  = new Application_Model_EuDetailVentesms();

			                            $mobile = $souscription->souscription_mobile;
			                            //$nbre_compte = $souscription->souscription_nombre;
			                            $fcaps = Util_Utils::getParametre('CAPS','valeur');

										$mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

		                                //$montant = $nbre_compte * $fcaps;
		                                $membre_pbf = '0000000000000000001M';
	                                    $code_compte_pbf = "NN-TR-".$membre_pbf;
			                            $ret = $compte_map->find($code_compte_pbf,$compte);



										if(($souscription->souscription_programme == 'KACM')
			                                || ($souscription->souscription_programme == 'CMFH')
				                            && $souscription->souscription_autonome == 1) {

													if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			                                            // Mise à jour du compte de transfert
				                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
	                                                } else {
			                                            $db->rollback();
			                                            $sessionmembreasso->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';                                    $this->view->param = $param;
														$this->_redirect('/integrateur/addsouscription/param/'.$param);
														$this->view->param = $param;

                                                        return;
			                                        }

													$codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

													// Traitement des produits FS
				                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
												    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
												    // Traitement des produits FCPS
				                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

													if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

											            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					                                    $nengfs = $money_map->findConuter() + 1;
														$sms_money->setNEng($nengfs)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

														$i = 0;
					                                    $reste = $mont_fs;
					                                    $nbre_lignesdetfs = count($lignesdetfs);
														while ($reste > 0 && $i < $nbre_lignesdetfs) {
					                                        $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
						                                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                    if ($reste >= $lignedetfs->getSolde_sms()) {
						                                        //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
							                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                                                   ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                                                   ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
						                                    } else  {
							                                    //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                                        $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
						                                        $reste = 0;
						                                    }
						                                    $i++;
					                                    }

														$codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

													$j = 0;
					                                $reste = $mont_fl;
					                                $nbre_lignesdetfl = count($lignesdetfl);
					                                while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                                    $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfl->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
							                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                                $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
						                                    $reste = 0;
						                                }
						                                $j++;
					                                }

													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }

													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;

				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                    $codeactivation->setCode_membre(null);
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($compteur_souscription);
													$codeactivation->setOrigine_code('ESMC');
				                                    $m_codeactivation->save($codeactivation);

				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);

										            }  else {
												        $db->rollback();
	                                                    $this->view->param = $param;
			                                            $sessionmembreasso->error = 'Erreur de traitement : le solde du compte est null';
														$this->_redirect('/integrateur/addsouscription/param/'.$param);
                                                        return;
												    }

										}

								$db->commit();
								$this->view->param = $param;
                                $sessionmembreasso->error = "Opération bien effectuée. Votre souscription a été vérifiée.";
		                        $this->_redirect('/integrateur/addsouscription/param/'.$param);/**/

		                    } else {
							    $db->commit();
                                $sessionmembreasso->error = "Opération bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre versement à la banque.";
		                        $this->_redirect('/integrateur/addsouscriptioncomplement');/**/
					                }
		                    }  else {
								$db->commit();
                                $sessionmembreasso->error = "Opération bien effectuée. Votre souscription n’est pas encore vérifiée, revenez plus tard.";
		                        $this->_redirect('/integrateur/recherchesouscription');/**/
			                }


		                }

		            }  catch (Exception $exc) {
	                    $this->view->param = $param;
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
		                $this->_redirect('/integrateur/addsouscription/param/'.$param);/**/
                        //return;
                    }

		    }   else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }


		}

	}

	 public function recherchesouscriptionAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $request = $this->getRequest ();
		if ($request->isPost ()) {
            if(isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="") {
			     $db = Zend_Db_Table::getDefaultAdapter();
                 $db->beginTransaction();
			     try {
			         $souscription_mapper = new Application_Model_EuSouscriptionMapper();
			         $recubancaire = new Application_Model_EuRecubancaire();
			         $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
			         $result = $souscription_mapper->fectchByNumeroBanque($_POST['souscription_numero']);
			         $resultat = $recubancaire_mapper->fetchByNumero($_POST['souscription_numero']);

			         if(($result != NULL) && ($resultat != FALSE)) {
			               $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		                   $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($resultat->recubancaire_banque,
				           $resultat->recubancaire_numero,$resultat->recubancaire_date_numero);
				           if(count($relevebancairedetail) > 0) {
                                  if(($relevebancairedetail->relevebancairedetail_montant) >= ($result->souscription_montant)) {
                                       include("automatisation.php");
								       validation_automatique($result->souscription_id);
								       // operation de transfert
								       $souscription = new Application_Model_EuSouscription();
		                               $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                       $souscriptionM->find($result->souscription_id, $souscription);
								       $date = new Zend_Date();
		                               $compte_map = new Application_Model_EuCompteMapper();
                                       $compte      = new Application_Model_EuCompte();
			                           $sms_money   = new Application_Model_EuSmsmoney();
                                       $money_map   = new Application_Model_EuSmsmoneyMapper();

			                           $det_sms   = new Application_Model_EuDetailSmsmoney();
			                           $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                           $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                           $det_vtesms  = new Application_Model_EuDetailVentesms();

			                           $mobile = $souscription->souscription_mobile;
			                           //$nbre_compte = $souscription->souscription_nombre;
			                           $fcaps = Util_Utils::getParametre('CAPS','valeur');

								       $mont_fs = Util_Utils::getParametre('FS','valeur');
                                       $mont_fl = Util_Utils::getParametre('FL','valeur');
                                       $mont_kps = Util_Utils::getParametre('FKPS','valeur');

								       $membre_pbf = '0000000000000000001M';
	                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
			                           $ret = $compte_map->find($code_compte_pbf,$compte);

									   if(($souscription->souscription_programme == 'KACM') || ($souscription->souscription_programme == 'CMFH') && $souscription->souscription_autonome == 1) {

											   if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			                                      // Mise à jour du compte de transfert
				                                  $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                  $compte_map->update($compte);
	                                           } else {
			                                      $db->rollback();
			                                      $sessionmembreasso->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                                                  return;
			                                   }

											   $codefs   = '';
                                               $codefl   = '';
                                               $codefkps = '';

													// Traitement des produits FS
				                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
												    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
												    // Traitement des produits FCPS
				                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

													if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

											            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					                                    $nengfs = $money_map->findConuter() + 1;
														$sms_money->setNEng($nengfs)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

														$i = 0;
					                                    $reste = $mont_fs;
					                                    $nbre_lignesdetfs = count($lignesdetfs);
														while ($reste > 0 && $i < $nbre_lignesdetfs) {
					                                        $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
						                                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                    if ($reste >= $lignedetfs->getSolde_sms()) {
						                                        //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
							                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                                                   ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                                                   ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
						                                    } else  {
							                                    //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                                        $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
						                                        $reste = 0;
						                                    }
						                                    $i++;
					                                    }

														$codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

													$j = 0;
					                                $reste = $mont_fl;
					                                $nbre_lignesdetfl = count($lignesdetfl);
					                                while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                                    $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfl->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
							                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                                $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
						                                    $reste = 0;
						                                }
						                                $j++;
					                                }

													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }

													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;

				                                    $codeactivation->setId_code_activation($countcode)
					                                               ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                    $codeactivation->setCode_membre(null);
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($souscription->souscription_id);
				                                    $m_codeactivation->save($codeactivation);

				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);

										            }  else {
												        $db->rollback();
			                                            $sessionmembreasso->error = 'Erreur de traitement : le solde du compte est null';
                                                        return;
												    }
										}
										if($souscription->souscription_programme == 'CMFH')   {
			                                $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                if($souscription->souscription_autonome == 1) {
			                                    $nbre_compte = $souscription->souscription_nombre - 1;
			                                } else {
				                                $nbre_compte = $souscription->souscription_nombre;
				                            }
				                            $montant = $nbre_compte * $fcaps;

				                            // Traitement des produits CAPS
				                            $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
				                            if ($lignesdetfcaps != null) {
				                                $nengfcaps = $money_map->findConuter() + 1;
                                                $sms_money->setNEng($nengfcaps)
                	                                      ->setCode_Agence(null)
                                                          ->setCreditAmount($montant)
                                                          ->setSentTo($mobile)
                                                          ->setMotif('CAPS')
                                                          ->setId_Utilisateur(null)
                                                          ->setCurrencyCode('XOF')
                                                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setFromAccount($code_compte_pbf)
                                                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                          ->setCreditCode($codefcaps)
                                                          ->setDestAccount(null)
                                                          ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                          ->setDestAccount_Consumed('CAPS-'.$compteur_souscription)
                                                          ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                          ->setNum_recu(null);
                                                $money_map->save($sms_money);

					                            // Mise à jour du compte de transfert
				                                if($ret) {
			                                        // Mise à jour du compte de transfert
				                                    $compte->setSolde($compte->getSolde() - $montant);
                                                    $compte_map->update($compte);
	                                            } else {
			                                        $db->rollback();
			                                        $sessionmembreasso->error = 'Erreur de traitement : le compte est introuvable';
                                                    return;
			                                    }

				                                $l = 0;
					                            $reste = $montant;
					                            $nbre_lignesdetfcaps = count($lignesdetfcaps);
					                            while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
					                                $lignedetfcaps = $lignesdetfcaps[$l];
                                                    $id = $lignedetfcaps->getId_detail_smsmoney();
						                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                            if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                //Mise à jour  des lignes d'enrégistrement
                                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
													    //insertion dans la table eu_detailventesms
						                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('CAPS')
                                                                       ->setCreditcode($codefcaps)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('CAPS');
                                                        $det_vte_sms->insert($det_vtesms->toArray());

							                            $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                              ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                              ->setSolde_sms(0);
                                                        $det_sms_m->update($lignedetfcaps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                         ->setId_detail_smsmoney($id)
                                                                 ->setCode_membre_dist($membre_pbf)
                                                                 ->setCode_membre(null)
                                                                 ->setType_tansfert('CAPS')
                                                                 ->setCreditcode($codefcaps)
                                                                 ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                 ->setMont_vente($reste)
                                                                 ->setId_utilisateur(null)
                                                                 ->setCode_produit('CAPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());

                                                            $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                    $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                                $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfcaps);
						                                    $reste = 0;
						                                }
						                        $l++;
					                        }

				                } else  {
				                    $db->rollback();
			                        $sessionmembreasso->error = 'Erreur de traitement : le solde du compte CAPS est null';
                                    return;
				                }

				                // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();
			                    $countdvente = $m_dvente->findConuter() + 1;
				                $dvente->setId_depot($countdvente)
					                   ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                $dvente->setCode_membre(null);
			                    $dvente->setCode_produit('CAPS');
				                $dvente->setMont_depot($montant);
				                $dvente->setMont_vendu(0);
				                $dvente->setSolde_depot($montant);
				                $dvente->setId_utilisateur(null);
				                $dvente->setType_depot('AvecListe');
				                $dvente->setSouscription_id($souscription->souscription_id);
				                $m_dvente->save($dvente);

				                $compteur = Util_Utils::findConuter() + 1;
				                Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								codegenerer($souscription->souscription_id);
			                }

			               }
			          }
				}
                $this->view->entries =  $souscription_mapper->fetchAllByPublierRecherche(0, "", $_POST['souscription_numero']);
				$db->commit();
				}
				catch (Exception $exc) {
                    $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    $db->rollback();
                    return;
                }

		        }
        }
        $this->view->tabletri = 1;

    }




    public function recherchesouscriptionoldAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
           if(isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="") {
              $souscription = new Application_Model_EuSouscriptionMapper();
              $this->view->entries = $souscription->fetchAllByPublierRecherche(0, "", $_POST['souscription_numero']);
           }
       }

        $this->view->tabletri = 1;

    }





    public function addsouscription1Action() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	       if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	       if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="" && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!="" && isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!="" && isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="" && isset($_POST['code_activite']) && $_POST['code_activite']!="" && isset($_POST['souscription_type']) && $_POST['souscription_type']!="" && isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="" && isset($_POST['souscription_date_numero']) && $_POST['souscription_date_numero']!="" && isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!="" && isset($_POST['souscription_montant']) && $_POST['souscription_montant']!="") {
	           $eusouscription = new Application_Model_DbTable_EuSouscription();
	           $select = $eusouscription->select();
			   if($_POST['souscription_personne'] == "PP") {
	              $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_nom'])));
	              $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_prenom'])));
			  } else{
	              $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));
			  }
	          $select->order(array("souscription_id ASC"));
	          $select->limit(1);
	          $rowseusouscription = $eusouscription->fetchRow($select);
		      if(count($rowseusouscription) > 0) {
			      $souscription_ok = 1;
			      $souscription_first = $rowseusouscription->souscription_id;
			  } else {
			      $souscription_ok = 0;
			  }

	          $eusouscription = new Application_Model_DbTable_EuSouscription();
	          $select = $eusouscription->select()->where('souscription_login = ?', $_POST['souscription_login']);
	          if ($rowseusouscription = $eusouscription->fetchRow($select) && $_POST['souscription_login'] != "" && $souscription_ok == 0) {
                 $this->view->error = "Login déjà existant ...";
	          } else if($_POST['souscription_passe'] != $_POST['confirme']) {
                 $this->view->error = "Mot de passe non conforme ...";
	          } else {
                 $date_id = Zend_Date::now();

                 $souscription = new Application_Model_EuSouscription();
                 $souscription_mapper = new Application_Model_EuSouscriptionMapper();

		         include("Transfert.php");
		         if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
		            $chemin	= "souscriptions";
		            $file = $_FILES['souscription_vignette']['name'];
		            $file1='souscription_vignette';
		            $souscription_vignette = $chemin."/".transfert($chemin,$file1);
		         } else {$souscription_vignette = "";}

            $compteur_souscription = $souscription_mapper->findConuter() + 1;
            $souscription->setSouscription_id($compteur_souscription);
            $souscription->setSouscription_personne($_POST['souscription_personne']);
			if($_POST['souscription_personne'] == "PP"){
            $souscription->setSouscription_nom($_POST['souscription_nom']);
            $souscription->setSouscription_prenom($_POST['souscription_prenom']);
			}else{
            $souscription->setSouscription_raison($_POST['souscription_raison']);
			}
            $souscription->setSouscription_email($_POST['souscription_email']);
            $souscription->setSouscription_mobile($_POST['souscription_mobile']);
            $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
            $souscription->setSouscription_type($_POST['souscription_type']);
            $souscription->setSouscription_numero($_POST['souscription_numero']);
            $souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
			if($_POST['souscription_type'] == "Banque"){
            $souscription->setSouscription_banque($_POST['souscription_banque']);
			}
            $souscription->setSouscription_montant($_POST['souscription_montant']);
            $souscription->setSouscription_nombre($_POST['souscription_nombre']);
            $souscription->setSouscription_programme($_POST['souscription_programme']);
            $souscription->setSouscription_type_candidat($_POST['souscription_type_candidat']);
            //$souscription->setSouscription_filiere($_POST['souscription_filiere']);
            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $souscription->setSouscription_vignette($souscription_vignette);
            $souscription->setCode_type_acteur($_POST["type_acteur"]);
            $souscription->setCode_statut($_POST["statut_juridique"]);
            $souscription->setCode_activite($_POST["code_activite"]);
            $souscription->setId_metier($_POST["id_metier"]);
            $souscription->setId_competence($_POST["id_competence"]);
            $souscription->setSouscription_ville($_POST['souscription_ville']);
            $souscription->setSouscription_quartier($_POST['souscription_quartier']);
			if($_POST['souscription_programme'] == "CMFH"){
            $souscription->setSouscription_login($_POST['souscription_login']);
            $souscription->setSouscription_passe($_POST['souscription_passe']);
			}
			if($souscription_ok == 1){
            $souscription->setSouscription_souscription($souscription_first);
				}else{
            $souscription->setSouscription_souscription($compteur_souscription);
					}

            $souscription->setSouscription_autonome($_POST['souscription_autonome']);
			$souscription->setPublier(0);
			$souscription->setErreur(0);
            $souscription_mapper->save($souscription);



//////////////////////////////////////////

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

            $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
            $recubancaire->setRecubancaire_id($compteur_recubancaire);
            $recubancaire->setRecubancaire_type($_POST['souscription_type']);
            $recubancaire->setRecubancaire_numero($_POST['souscription_numero']);
            $recubancaire->setRecubancaire_date_numero($_POST['souscription_date_numero']);
			if($_POST['souscription_type'] == "Banque"){
            $recubancaire->setRecubancaire_banque($_POST['souscription_banque']);
			}
            $recubancaire->setRecubancaire_montant($_POST['souscription_montant']);
            $recubancaire->setRecubancaire_vignette($souscription_vignette);
            $recubancaire->setRecubancaire_souscription($compteur_souscription);
			$recubancaire->setPublier(1);
            $recubancaire_mapper->save($recubancaire);










/*//////////////////////////////////////////

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($sessionmembreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;

		if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

			if($_POST['souscription_programme'] == "KACM"){
			$partagea_montant = floor(($_POST['souscription_montant'] / 100 * 10) / 2);
				}else{
			$partagea_montant = floor(($_POST['souscription_montant'] / 100 * 5) / 2);
					}

		}else{

			if($_POST['souscription_programme'] == "KACM"){
			$partagea_montant = floor($_POST['souscription_montant'] / 100 * 10);
				}else{
			$partagea_montant = floor($_POST['souscription_montant'] / 100 * 5);
					}

		}

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($sessionmembreasso->membreasso_association);
            $partagea->setPartagea_souscription($compteur_souscription);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($sessionmembreasso->membreasso_id);
            $partagem->setPartagem_souscription($compteur_souscription);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////*/

$html = "";

			if($_POST['souscription_personne'] == "PP"){
$html .= "Nom : ".$_POST['souscription_nom']."<br />";
$html .= "Prenom : ".$_POST['souscription_prenom']."<br />";
			}else{
$html .= "Raison sociale : ".$_POST['souscription_raison']."<br />";
if($_POST["type_acteur"] == 'EI'){$html .= "Type Association : Entreprise Industrie<br />";}
if($_POST["type_acteur"] == 'OE'){$html .= "Type Association : Opérateur Economique<br />";}
if($_POST["type_acteur"] == 'OSE'){$html .= "Type Association : Opérateur Socio-Economique<br />";}
if($_POST["type_acteur"] == 'PEI'){$html .= "Type Association : Partenaire Entreprise Industrie<br />";}
if($_POST["type_acteur"] == 'POE'){$html .= "Type Association : Partenaire Opérateur Economique<br />";}
if($_POST["type_acteur"] == 'POSE'){$html .= "Type Association : Partenaire Opérateur Socio-Economique<br />";}

        $statutjuridique = new Application_Model_EuStatutJuridique();
        $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
        $statutjuridiqueM->find($_POST["statut_juridique"], $statutjuridique);
$html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br />";
			}
$html .= "E-mail : ".$_POST['souscription_email']."<br />";
$html .= "Mobile : ".$_POST['souscription_mobile']."<br />";
$html .= "Ville : ".$_POST['souscription_ville']."<br />";
$html .= "Quartier : ".$_POST['souscription_quartier']."<br />";
$html .= "Programme : ".$_POST['souscription_programme']."<br />";

        $type_candidatM = new Application_Model_DbTable_EuTypeCandidat();
        $type_candidat = $type_candidatM->find($_POST['souscription_type_candidat']);
		$row = $type_candidat->current();
$html .= "Type candidat : ".$row->libelle_type_candidat."<br />";

        /*$filiere = new Application_Model_EuFiliere();
        $filiereM = new Application_Model_EuFiliereMapper();
        $filiereM->find($_POST['souscription_filiere'], $filiere);
$html .= "Filiere : ".$filiere->nom_filiere."<br />";*/

        $activiteM = new Application_Model_DbTable_EuActivite();
        $activite = $activiteM->find($_POST['code_activite']);
		$row = $activite->current();
$html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

        $metierM = new Application_Model_DbTable_EuMetier();
        $metier = $metierM->find($_POST['id_metier']);
		$row = $metier->current();
$html .= "Métier : ".$row->libelle_metier."<br />";

        $competenceM = new Application_Model_DbTable_EuCompetence();
        $competence = $competenceM->find($_POST['id_competence']);
		$row = $competence->current();
$html .= "Compétence : ".$row->libelle_competence."<br />";

$html .= "Type : ".$_POST['souscription_type']."<br />";

			if($_POST['souscription_type'] == "Banque"){
        $banque = new Application_Model_EuBanque();
        $banqueM = new Application_Model_EuBanqueMapper();
        $banqueM->find($_POST['souscription_banque'], $banque);
$html .= "Banque : ".$banque->libelle_banque."<br />";
			}

$html .= "Numero Reçu Banque ou Numéro Transaction Flooz: ".$_POST['souscription_numero']."<br />";
$html .= "Date Reçu Banque ou Transaction Flooz: ".$_POST['souscription_date_numero']."<br />";
$html .= "Montant : ".$_POST['souscription_montant']."<br />";
$html .= "Nombre : ".$_POST['souscription_nombre']."<br />";

$html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
$html .= "Vignette : <a href='https://esmcgie.com/".$souscription_vignette."'>".$souscription_vignette."</a>";


$html .= "Utilisateur : ".$sessionmembreasso->membreasso_nom." ".$sessionmembreasso->membreasso_prenom."<br />";
        $association = new Application_Model_EuAssociation();
        $associationM = new Application_Model_EuAssociationMapper();
        $associationM->find($sessionmembreasso->membreasso_association, $association);
$html .= "Agrément OSE/OE : ".$association->association_nom."<br />";








if(isset($_POST['souscription_mobilisateur']) && $_POST['souscription_mobilisateur'] == 1){



        $date_id = Zend_Date::now();

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();

            $compteur_association = $association_mapper->findConuter() + 1;
            $association->setAssociation_id($compteur_association);
            $association->setAssociation_mobile($_POST['souscription_mobile']);
            $association->setAssociation_nom($_POST['souscription_nom']." ".$_POST['souscription_prenom']);
            $association->setAssociation_numero($compteur_association."PP");
            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
            $association->setAssociation_email($_POST['souscription_email']);
            $association->setAssociation_recepisse(NULL);
            $association->setAssociation_adresse($_POST['souscription_quartier']." - ".$_POST['souscription_ville']);
            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $association->setId_filiere(NULL);
            $association->setCode_type_acteur(NULL);
            $association->setCode_statut(NULL);
            $association->setCode_agence($code_agence);
            $association->setPublier(1);
            $association_mapper->save($association);





        $date_id = Zend_Date::now();

        $membreasso = new Application_Model_EuMembreasso();
        $membreasso_mapper = new Application_Model_EuMembreassoMapper();

            $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
            $membreasso->setMembreasso_id($compteur_membreasso);
            $membreasso->setMembreasso_mobile($_POST['souscription_mobile']);
            $membreasso->setMembreasso_nom($_POST['souscription_nom']);
            $membreasso->setMembreasso_prenom($_POST['souscription_prenom']);
            $membreasso->setMembreasso_association($compteur_association);
            $membreasso->setMembreasso_email($_POST['souscription_email']);
            $membreasso->setMembreasso_login($_POST['souscription_login']);
            $membreasso->setMembreasso_passe($_POST['souscription_passe']);
            $membreasso->setMembreasso_type(1);
            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $membreasso->setPublier(1);
            $membreasso_mapper->save($membreasso);



	}










//$esmc_email	 = "achatcmmcnp@esmcgacsource.com";
//$esmc_email	 = "natacha@gacsource.com";
$esmc_email	 = Util_Utils::getParamEsmc(3);

$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
Zend_Mail::setDefaultTransport($tr);
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), $association->association_nom." : ".$sessionmembreasso->membreasso_nom." ".$sessionmembreasso->membreasso_prenom);
$mail->addTo($esmc_email, "ESMC - SIF");
$mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->send();



if($association->association_email != ""){
$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));

$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), $sessionmembreasso->membreasso_nom." ".$sessionmembreasso->membreasso_prenom);
$mail->addTo($association->association_email, $association->association_nom);
$mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->send($tr);
}


			if($_POST['souscription_programme'] == "CMFH"){

$html .= "<br />";
$html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter et compléter les informations vous concernant pour &ecirc;tre bien classifié dans votre domaine et ainsi &ecirc;tre en bonne position pour l’ouverture prochaine du marché MCNP.";
$html .= "<br />";
$html .= "Connectez vous ici : <a href='https://esmcgie.com/souscription/login'>Connexion Souscription</a>";
$html .= "<br />";
$html .= "Login : ".$_POST['souscription_login']."<br />";
$html .= "<br />";
$html .= "Mot de passe : ".$_POST['souscription_passe']."<br />";
$html .= "<br />";

if(isset($_POST['souscription_mobilisateur']) && $_POST['souscription_mobilisateur'] == 1){
$html .= "Vous avez sélectionner l'option Mobilisateur donc utilisez les m&ecirc;mes Login et Mot de passe pour vous connecter à votre espace Agrément OSE/OE pour pouvoir souscrire d'autres personnes.";
$html .= "<br />";
$html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
$html .= "<br />";
}


if($_POST['souscription_email'] != ""){
$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));

$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), $association->association_nom." : ".$sessionmembreasso->membreasso_nom." ".$sessionmembreasso->membreasso_prenom);
$mail->addTo($_POST['souscription_email'], $_POST['souscription_nom']." ".$_POST['souscription_prenom']);
$mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->send($tr);
}
			}


        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		$relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($_POST['souscription_banque'], $_POST['souscription_numero'], $_POST['souscription_date_numero']);
        if(count($relevebancairedetail) > 0){
			if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']){

include("automatisation.php");
  validation_automatique($compteur_souscription);
  dotransfertAction($compteur_souscription);



$sessionmembreasso->error = "Opération bien effectuée. Votre souscription a été vérifiée.";
				}else{
$sessionmembreasso->error = "Opération bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre dépôt à la banque.";

					}
		}else{
$sessionmembreasso->error = "Opération bien effectuée. Votre souscription n’est pas encore vérifiée, revenez plus tard.";
			}


		$this->_redirect('/integrateur/listsouscription2');/**/
	}
		} else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
	}



            $param = (int)$this->_request->getParam('param');
	 $this->view->param = $param;


	}



   /* public function editsouscriptionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	       if (isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!="" && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="" && isset($_POST['souscription_type']) && $_POST['souscription_type']!="" && isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="" && isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="") {


        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
		$m_souscription->find($_POST['souscription_id'], $souscription);

		include("Transfert.php");
		if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!=""){
		$chemin	= "souscriptions";
		$file = $_FILES['souscription_vignette']['name'];
		$file1='souscription_vignette';
		$souscription_vignette = $chemin."/".transfert($chemin,$file1);
		} else {$souscription_vignette = $_POST['souscription_vignetteold'];}

            $souscription->setSouscription_personne($_POST['souscription_personne']);
			if($_POST['souscription_personne'] == "PP"){
            $souscription->setSouscription_nom($_POST['souscription_nom']);
            $souscription->setSouscription_prenom($_POST['souscription_prenom']);
			}else{
            $souscription->setSouscription_raison($_POST['souscription_raison']);
			}
            $souscription->setSouscription_email($_POST['souscription_email']);
            $souscription->setSouscription_mobile($_POST['souscription_mobile']);
            $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
            //$souscription->setSouscription_type($_POST['souscription_type']);
            //$souscription->setSouscription_numero($_POST['souscription_numero']);
            //$souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
			//if($_POST['souscription_type'] == "Banque"){
            //$souscription->setSouscription_banque($_POST['souscription_banque']);
			//}
            //$souscription->setSouscription_montant($_POST['souscription_montant']);
            $souscription->setSouscription_nombre($_POST['souscription_nombre']);
            $souscription->setSouscription_programme($_POST['souscription_programme']);
            $souscription->setSouscription_type_candidat($_POST['souscription_type_candidat']);
            //$souscription->setSouscription_filiere($_POST['souscription_filiere']);
            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            //$souscription->setSouscription_vignette($souscription_vignette);
            $souscription->setCode_type_acteur($_POST["type_acteur"]);
            $souscription->setCode_statut($_POST["statut_juridique"]);
            $souscription->setCode_activite($_POST["code_activite"]);
            $souscription->setId_metier($_POST["id_metier"]);
            $souscription->setId_competence($_POST["id_competence"]);
            $souscription->setSouscription_ville($_POST['souscription_ville']);
            $souscription->setSouscription_quartier($_POST['souscription_quartier']);
            $souscription->setSouscription_login($_POST['souscription_login']);
            $souscription->setSouscription_passe($_POST['souscription_passe']);
            //$souscription->setSouscription_souscription($compteur_souscription);
            $souscription->setSouscription_autonome($_POST['souscription_autonome']);
            $m_souscription->update($souscription);

		    $this->_redirect('/integrateur/listsouscription2');
		} else {  $this->view->error = "Champs * obligatoire ...";
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
               $a = new Application_Model_EuSouscription();
               $ma = new Application_Model_EuSouscriptionMapper();
		       $ma->find($id, $a);
		       $this->view->souscription = $a;
            }
	}

	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	}
	}
*/


    public function listsouscriptionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAll3();

        $this->view->tabletri = 1;

    }

    public function listsouscription2Action() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllByMembreasso($sessionmembreasso->membreasso_id);

        $this->view->tabletri = 1;

    }








    public function listsouscription3Action()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllByAssociation($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;

    }

    public function publiersouscriptionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id, $souscription);

        $souscription->setPublier($this->_request->getParam('publier'));
		$souscriptionM->update($souscription);
        }

		$this->_redirect('/integrateuur/listsouscription');
    }




    public function suppsouscriptionAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id, $souscription);

        $souscriptionM->delete($souscription->souscription_id);

        }

		$this->_redirect('/integrateur/listsouscription');
    }



    public function detailssouscriptionAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id, $souscription);
		$this->view->souscription = $souscription;

            }

	}





    public function addsouscriptioncomplementAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


	    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	    if (isset($_POST['ancien_recubancaire_type']) && $_POST['ancien_recubancaire_type']!="" && isset($_POST['ancien_recubancaire_numero']) && $_POST['ancien_recubancaire_numero']!="" && isset($_POST['ancien_recubancaire_date_numero']) && $_POST['ancien_recubancaire_date_numero']!="" && isset($_POST['recubancaire_type']) && $_POST['recubancaire_type']!="" && isset($_POST['recubancaire_numero']) && $_POST['recubancaire_numero']!="" && isset($_POST['recubancaire_date_numero']) && $_POST['recubancaire_date_numero']!="" && isset($_POST['recubancaire_montant']) && $_POST['recubancaire_montant']!=""
					&& isset($_FILES['recubancaire_vignette']['name']) && $_FILES['recubancaire_vignette']['name']!="" && verif_img($_FILES['recubancaire_vignette']['name']) == 1
) {
           $recubancaireM = new Application_Model_EuRecubancaireMapper();
           $recubancaire = $recubancaireM->fetchAllByTypeNumeroDate($_POST['ancien_recubancaire_type'], $_POST['ancien_recubancaire_numero'], $_POST['ancien_recubancaire_date_numero']);
		   if(count($recubancaire) > 0) {

             $date_id = Zend_Date::now();
		     include("Transfert.php");
		     if(isset($_FILES['recubancaire_vignette']['name']) && $_FILES['recubancaire_vignette']['name']!=""){
		     $chemin	= "recubancaires";
		     $file = $_FILES['recubancaire_vignette']['name'];
		     $file1='recubancaire_vignette';
		     $recubancaire_vignette = $chemin."/".transfert($chemin,$file1);
		} else {$recubancaire_vignette = "";}



        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

            $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
            $recubancaire->setRecubancaire_id($compteur_recubancaire);
            $recubancaire->setRecubancaire_type($_POST['recubancaire_type']);
            $recubancaire->setRecubancaire_numero($_POST['recubancaire_numero']);
            $recubancaire->setRecubancaire_date_numero($_POST['recubancaire_date_numero']);
			if($_POST['recubancaire_type'] == "Banque"){
            $recubancaire->setRecubancaire_banque($_POST['recubancaire_banque']);
			}
            $recubancaire->setRecubancaire_montant($_POST['recubancaire_montant']);
            $recubancaire->setRecubancaire_vignette($recubancaire_vignette);
            $recubancaire->setRecubancaire_souscription($recubancaire->recubancaire_souscription);
			$recubancaire->setPublier(1);
            $recubancaire_mapper->save($recubancaire);




            $sessionmembreasso->error = "Opération bien effectuée";
		    $this->_redirect('/integrateur/listsouscription2');/**/

			}else{

$sessionmembreasso->error = "Erreur : Veuillez rependre";
				}










		} else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
	}

	}






    public function addoffreurprojetcomplementAction() {
		   /* page integrateur/addoffreurprojet - Ajout d'une offreurprojet */
	       $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	       //$this->_helper->layout->disableLayout();
 	       $this->_helper->layout()->setLayout('layoutpublicesmcint');

	       $request = $this->getRequest ();
	       $m_souscription2 = new Application_Model_EuSouscriptionMapper();
	       if ($request->isPost ()) {

			   $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction();
			   try {
			       $nombre_compte = 0;
			       $cpte = $_POST['cpteur'];

                   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				     $numero_quittance = $_POST['offreur_projet_souscription_ordre'.$i];
					 $j = $i + 1;
					 if($cpte > 1) {
					      while($j < $cpte) {
						     $num_quittance = $_POST['offreur_projet_souscription_ordre'.$j];
							 if($numero_quittance == $num_quittance) {
							    $db->rollback();
					            $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		                        $sessionmembreasso->error = "Erreur de traitement : Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					            return;
							 }
							 $j++;
						  }
					 }
				  }

                  $souscription_id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
				  if($souscription_id == NULL) {
					 $db->rollback();
					 $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		             $sessionmembreasso->error = "Erreur de traitement : Ancien Numéro de quittance ".$_POST['ancien_numero_quittance']."  est  invalide ...";
					 return;
		           }

                   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		              $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'. $i]);
					  if($souscription_id == NULL) {
					     $db->rollback();
						 $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                 $sessionmembreasso->error = "Erreur de traitement : Numéro de quittance ".$_POST['offreur_projet_souscription_ordre'.$i]."  est  invalide ...";
					     return;
		               }
					}

                    $souscription3 = new Application_Model_EuSouscription();
                    $m_souscription3 = new Application_Model_EuSouscriptionMapper();
					$id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					$m_souscription3->find($id,$souscription3);
					$souscription_souscription = $souscription3->souscription_souscription;
					for($i = 0; $i < $_POST['cpteur']; $i++)  {
						$id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						$m_souscription3->find($id,$souscription3);
						if($souscription_souscription != $souscription3->souscription_souscription) {
							$db->rollback();
							$this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                    $sessionmembreasso->error = "Erreur de traitement : les numéros quittances doivent appartenir au même souscripteur !!! ";
                            return;
						}
					}

                    $m_offreur2 = new Application_Model_EuOffreurProjetMapper();
					$m_detail_offreur2 = new Application_Model_EuDetailOffreurProjetMapper();
					for($i = 0; $i < $_POST['cpteur']; $i++) {
					   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
					   $offreur2    = $m_offreur2->fetchAllBySouscription($souscription_id);
					   $detail2    = $m_detail_offreur2->fetchAllBySouscription($souscription_id);
					   if(count($offreur2) > 0  || count($detail2) > 0) {
						   $db->rollback();
						   $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                   $sessionmembreasso->error = "Erreur de traitement : Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]."  déjà  utilisé ...";
                           return;
	                   }
				    }

                    $id_souscription = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					$offreur2    = $m_offreur2->fetchAllBySouscription($id_souscription);
					$detail2    = $m_detail_offreur2->fetchAllBySouscription($id_souscription);
					if((count($offreur2) == 0)  || (count($detail2) == 0)) {
					  $db->rollback();
					  $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		              $sessionmembreasso->error = "Erreur de traitement : Ancien Numéro de quittance  ".$_POST['ancien_numero_quittance']."  non utilisé ...";
                      return;
				    }

					/*for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   if(($souscription3->souscription_type_candidat != 6 && $souscription3->souscription_type_candidat == 7)) {
						       $db->rollback();
							   $this->view->param = $param;
							   $this->view->souscription_email = $_POST['souscription_email'];
							   $this->view->code_membre = $_POST['offreur_projet_membre'];
						       $sessionmembreasso->error = "Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]." doit être celui d'un CMFH Offreur de projet ...";
						   }
				     } */


					for($i = 0; $i < $_POST['cpteur']; $i++) {
					   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
					   $m_souscription3->find($souscription_id,$souscription3);
					   $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
					}

					if($nombre_compte >= 100)   {
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $a = new Application_Model_EuOffreurProjet();
                       $ma = new Application_Model_EuOffreurProjetMapper();

					   $id_offreur_projet = $detail2->offreur_projet_id;
					   $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                       $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
					   $offreur  = new Application_Model_EuOffreurProjet();
                       $offreurM = new Application_Model_EuOffreurProjetMapper();
                       $offreurM->find($id_offreur_projet,$offreur);


					   for($i = 0; $i < $_POST['cpteur']; $i++) {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $cpte = $m_detailoffreur->findConuter() + 1;
						   $detailoffreur->setId_detail_offreur_projet($cpte);
						   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
						   $detailoffreur->setSouscription_id($souscription_id);
						   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
						   $m_detailoffreur->save($detailoffreur);
					    }

						/////////////////////////////////////////////////////////////////////////////////////////
						    $eusouscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();

							$date = new Zend_Date();
		                    $compte_map = new Application_Model_EuCompteMapper();
                            $compte      = new Application_Model_EuCompte();
			                $sms_money   = new Application_Model_EuSmsmoney();
                            $money_map   = new Application_Model_EuSmsmoneyMapper();

			                $det_sms   = new Application_Model_EuDetailSmsmoney();
			                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                $det_vtesms  = new Application_Model_EuDetailVentesms();

							// insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();

							$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                    $membre_pbf = '0000000000000000001M';
	                        $code_compte_pbf = "NN-TR-".$membre_pbf;
			                $ret = $compte_map->find($code_compte_pbf,$compte);

							for($i = 0; $i < $_POST['cpteur']; $i++) {
							   $souscription_id = $souscriptionM->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
							   $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
							   if($finddepot == NULL) {
							      $souscriptionM->find($souscription_id,$eusouscription);
								  $mobile = $eusouscription->souscription_mobile;
                                  if($eusouscription->souscription_programme == 'CMFH')   {
                                     $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                         if($eusouscription->souscription_autonome == 1) {
			                            $nbre_compte = $eusouscription->souscription_nombre - 1;
			                         } else {
				                        $nbre_compte = $eusouscription->souscription_nombre;
				                     }
									 $montant = $nbre_compte * $fcaps;
									 // Traitement des produits CAPS
				                     $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									 $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
									 if ($lignesdetfcaps != null) {
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed($souscription_id)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                           $money_map->save($sms_money);

										   // Mise à jour du compte de transfert
				                           if($ret && ($cumulfcaps >= $montant)) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);
	                                       } else {
			                                 $db->rollback();
	                                         $this->view->param = $param;
											 $this->view->souscription_email  = $_POST['souscription_email'];
								             $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                 $sessionmembreasso->error = 'Le compte est introuvable ou le solde du compte CAPS est insuffisant';
											 //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                                             return;
			                               }

										   $l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);


						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }

									 } else  {
				                       $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->souscription_email  = $_POST['souscription_email'];
								       $this->view->code_membre = $_POST['offreur_projet_membre'];
			                           $sessionmembreasso->error = 'Le solde du compte CAPS est null';
		                               //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                                       return;
				                    }

									$countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                    $dvente->setCode_membre($offreur->offreur_projet_code_membre);
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($souscription_id);
				                    $m_dvente->save($dvente);

									$compteur = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								    include("automatisation.php");
								    codegenerer($souscription_id);

                                  }
							   } else {
							         $m_dvente->find($finddepot->id_depot,$dvente);
							         $dvente->setCode_membre($offreur->offreur_projet_code_membre);
									 $m_dvente->update($dvente);

									 include("automatisation.php");
								     recupcodegenerer($souscription_id);

							   }
                            }
				            $db->commit();
                            $sessionmembreasso->error = "Opération bien effectuée ...";
		                    $this->_redirect('/integrateur/addoffreurprojetcomplement');
				    }

			   }
			   catch (Exception $exc) {
			      $db->rollback();
			      $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
                  return;
               }


	       }
	}
	
	
	public  function addsouscriptionbcAction()  {
	    /* page integrateur/addsouscriptionbc - Ajout d'une souscription bc  */
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
	    $t_ville = new Application_Model_DbTable_EuVille();
	    $selection = $t_ville->select();
	    $selection->order('lib_ville asc');
	    $villes = $t_ville->fetchAll($selection);
	    $this->view->villes = $villes;
		
	    $caps = Util_Utils::getParametre('CAPS','valeur');
	    $this->view->caps = $caps;
		
	    $date_id = Zend_Date::now();
	    $request = $this->getRequest();
		if($request->isPost()) {
	        if(isset($_POST['code_membre']) && $_POST['code_membre'] !="" 
			&& isset($_POST['montant_souscription']) && $_POST['montant_souscription']!=""
            && $_POST['montant_souscription'] > 0			
			&& isset($_POST['msbc_attestation']) && $_POST['msbc_attestation'] == 1)  {
			   $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction(); 
               try {
			       $membre = new Application_Model_EuMembre();
	               $m_map  = new Application_Model_EuMembreMapper();
			       $membremoral = new Application_Model_EuMembreMorale();
	               $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				   $eucompte = new Application_Model_EuCompte();
				   $m_compte = new Application_Model_EuCompteMapper();
				
				   $date_id = Zend_Date::now();
				   $id_utilisateur_acnev = 1;
                   $id_utilisateur_filiere = 2;
                   $id_utilisateur_technopole = 3;
								
				   $bon_neutre = new Application_Model_EuBonNeutre();
                   $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
				
				   $code_membre  = $request->getParam("code_membre");
				   $montant_souscription  = $request->getParam("montant_souscription");
				   $code_te  = $request->getParam("code_te");
				   $type_souscription  = $request->getParam("type_souscription");
				   $code_banque = $request->getParam("code_banque");
				   $num_compte  = $request->getParam("num_compte");
				   $statut  = $request->getParam("liste");
				
				   $num_compte = 'NB-TPAGCP-'.$code_membre;
				   $res = $m_compte->find($num_compte,$eucompte);
				   
				   if(substr($code_membre,19,1) == 'P')  {
				      $findmembre = $m_map->find($code_membre,$membre);
				      if($findmembre == false) {
					     $db->rollback();
					     $this->view->code_membre = $request->getParam("code_membre");
					     $this->view->nom_membre = $request->getParam("design_membre");
					     $this->view->montant_souscription = $request->getParam("montant_souscription");
		                 $this->view->error = "Le numéro membre du souscripteur saisi  ".$code_membre."  est introuvable ...";
					     return;
				       }
			        } else {
				       $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				       if($findmembre == false) {
					      $db->rollback();
					      $this->view->code_membre = $request->getParam("code_membre");
					      $this->view->nom_membre = $request->getParam("design_membre");
					      $this->view->montant_souscription = $request->getParam("montant_souscription");
		                  $this->view->error = "Le numéro membre du souscripteur saisi  ".$code_membre."  est introuvable ...";
					      return;
				       }
			        }
					
					if(!$res) {
				      $db->rollback();
				      $this->view->code_membre = $request->getParam("code_membre");
				      $this->view->nom_membre = $request->getParam("design_membre");
				      $this->view->montant_souscription = $request->getParam("montant_souscription");
		              $this->view->error = "Ce membre ne dispose pas de terminal d'Echange (TE) ...";
				      return;
				    }
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
				       $db->rollback();
				       $this->view->code_membre = $request->getParam("code_membre");
				       $this->view->nom_membre = $request->getParam("design_membre");
				       $this->view->montant_souscription = $request->getParam("montant_souscription");
                       $this->view->error = "Votre Code BAn  incorrect ...";
                       return; 
			        }
				
				    if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
				        $db->rollback();
			            $this->view->code_membre = $request->getParam("code_membre");
				        $this->view->nom_membre = $request->getParam("design_membre");
				        $this->view->montant_souscription = $request->getParam("montant_souscription");
                        $this->view->error = "Montant restant du BAn est insuffisant ...";
                        return; 
			         }
					 
					 $bon_neutre2 = new Application_Model_EuBonNeutre();
				     $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
				     $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
				     $code_membre_souscripteur = $bon_neutre2->bon_neutre_code_membre;
					   
				     $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
				     $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
			         $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
			         $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					 
					 if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
				         $db->rollback();
				         $this->view->code_membre   = $request->getParam("code_membre");
				         $this->view->nom_membre = $request->getParam("design_membre");
				         $this->view->montant_souscription = $request->getParam("montant_souscription");
                         $this->view->error = "Montant restant du BAn est insuffisant ...";
                         return; 
				      }
				
				      if($code_membre != $code_membre_souscripteur) {
				         $db->rollback();
				         $this->view->code_membre   = $request->getParam("code_membre");
				         $this->view->nom_membre = $request->getParam("design_membre");
				         $this->view->montant_souscription = $request->getParam("montant_souscription");
                         $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                         return;   
				      }
					  
					  
					  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
				      $i = 0;
			          $reste = $montant_souscription;
			          $nbre_lignesdetbon = count($lignesdetbon);
				      while($reste > 0 && $i < $nbre_lignesdetbon) {
                         $lignedetbon = $lignesdetbon[$i];
                         $id = $lignedetbon->getBon_neutre_detail_id();
				         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
					     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						   $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
						   if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();	  
								foreach($appro_detail as $appro) {
								   $bnad = new Application_Model_EuBonNeutreApproDetail();
                                   $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                   if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                      $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                      $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                      $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                      $bnad_M->update($bnad);
                                   } else {
                                      $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                      $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                      $bnad_M->update($bnad);
                                      break;
                                   }
										 
                                 }
								  
						     }
						     //Mise à jour  des lignes d'enrégistrement
						     $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                 ->setBon_neutre_detail_montant_solde(0);
                             $bon_neutre_detailM->update($lignedetbon);
								 
				  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
				  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
				  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
				  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
				  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
				  if(substr($code_membre,19,1) == 'P')  {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
				  } else {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
				  }
				  
				  $bon_neutre_utilise->setBon_neutre_utilise_libelle("MSBC");
				  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
				  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
				  $bon_neutre_utiliseM->save($bon_neutre_utilise);

                         } else {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                  }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);
								 
				  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
				  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
				  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
				  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
				  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
				  if(substr($code_membre,19,1) == 'P')  {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
				  } else {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
				  }
				  
				  $bon_neutre_utilise->setBon_neutre_utilise_libelle("MSBC");
				  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
				  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
				  $bon_neutre_utiliseM->save($bon_neutre_utilise);

						          $reste = 0;
                               }							   
                               $i++;
                     }
					 
				  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
				  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
				  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
				  $bon_neutre2M->update($bon_neutre2);
						  
				  /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
				  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
				  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
				  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
				  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
				  if(substr($code_membre,19,1) == 'P')  {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
				  } else {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
				  }
				  
				  $bon_neutre_utilise->setBon_neutre_utilise_libelle("MSBC");
				  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
				  $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
				  
				  $m_mstiers = new Application_Model_EuMstiersMapper();
				  $mstiers = new Application_Model_EuMstiers();
				  
				  $eusouscription = new Application_Model_DbTable_EuSouscription();
				  $select = $eusouscription->select();
				  if(substr($code_membre,19,1) == 'P')  {
					 $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                 $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
				  } else {
					 $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
				  }
						
				  $select->order(array("souscription_id ASC"));
	              $select->limit(1);
	              $rowseusouscription = $eusouscription->fetchRow($select);
		          if(count($rowseusouscription) > 0) {
			        $souscription_ok = 1;
			        $souscription_first = $rowseusouscription->souscription_id;
			      } else {
			        $souscription_ok = 0;
			      }
				  
				  $date_id = Zend_Date::now();
				  $souscription = new Application_Model_EuSouscription();
                  $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
				  $compteur_souscription = $souscription_mapper->findConuter() + 1;
				  $souscription->setSouscription_id($compteur_souscription);
				  
				  if(substr($code_membre,19,1) == 'P')  {
                     $souscription->setSouscription_nom($membre->nom_membre);
                     $souscription->setSouscription_prenom($membre->prenom_membre);
				     $souscription->setSouscription_mobile($membre->portable_membre);
				     $souscription->setSouscription_personne("PP");
					 $souscription->setSouscription_quartier($membre->quartier_membre);     
                     $souscription->setSouscription_email($membre->email_membre);
				  } else {
					 $souscription->setSouscription_raison($membremoral->raison_sociale);
                     $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                     $souscription->setCode_statut($membremoral->code_statut);
					 $souscription->setSouscription_mobile($membremoral->portable_membre);
					 $souscription->setSouscription_personne("PM");
					 $souscription->setSouscription_quartier($membremoral->quartier_membre);     
                     $souscription->setSouscription_email($membremoral->email_membre);
				  }
				  
				  $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);	
				  $souscription->setSouscription_type("BAn");
                  $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                  $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);      
                  $souscription->setSouscription_banque(null);	
				  $souscription->setSouscription_montant($request->getParam("montant_souscription"));
                  $souscription->setSouscription_nombre(NULL);
                  $souscription->setSouscription_programme("MSBC");
                  $souscription->setSouscription_type_candidat(NULL);
				  $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $souscription->setSouscription_vignette(null);
                  $souscription->setCode_activite(null);
                  $souscription->setId_metier(null);
                  $souscription->setId_competence(null);		      
                  $souscription->setSouscription_login(null);
                  $souscription->setSouscription_passe(null);
                        						          
			      if($souscription_ok == 1)  {
                    $souscription->setSouscription_souscription($souscription_first);
				  } else {
                    $souscription->setSouscription_souscription($compteur_souscription);
				  }	
				  $souscription->setSouscription_autonome(0);
			      $souscription->setPublier(0);
				  $souscription->setErreur(0);
				  $souscription->setId_canton($request->getParam("id_canton"));
                  $souscription_mapper->save($souscription);
					
				  ///////////////////////////////////////////// validation acnev //////////////////////////////////	
				  $souscription = new Application_Model_EuSouscription();
				  $souscriptionM = new Application_Model_EuSouscriptionMapper();
				  $souscriptionM->find($compteur_souscription,$souscription);
								
				  $souscription->setPublier(1);
				  $souscriptionM->update($souscription);
						
				  $validation_quittance = new Application_Model_EuValidationQuittance();
				  $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				  $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				  $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				  $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
				  $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				  $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $validation_quittance->setPublier(1);
				  $validation_quittance_mapper->save($validation_quittance);
						
						
				  ///////////////////////////////////////////// validation filiere //////////////////////////////////
				  $souscription = new Application_Model_EuSouscription();
				  $souscriptionM = new Application_Model_EuSouscriptionMapper();
				  $souscriptionM->find($compteur_souscription, $souscription);
								
				  $souscription->setPublier(2);
				  $souscriptionM->update($souscription);
						
				  $validation_quittance = new Application_Model_EuValidationQuittance();
				  $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				  $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				  $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				  $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
				  $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				  $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $validation_quittance->setPublier(1);
				  $validation_quittance_mapper->save($validation_quittance);
						
				  ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
				  $souscription = new Application_Model_EuSouscription();
				  $souscriptionM = new Application_Model_EuSouscriptionMapper();
				  $souscriptionM->find($compteur_souscription, $souscription);
								
				  $souscription->setPublier(3);
				  $souscriptionM->update($souscription);

				  $validation_quittance = new Application_Model_EuValidationQuittance();
				  $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				  $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				  $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				  $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
				  $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				  $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $validation_quittance->setPublier(1);
				  $validation_quittance_mapper->save($validation_quittance);
						
							
				   //insertion dans les tables eu_mstiers
				   $id_souscription = $compteur_souscription;			  
				   $code_ban = $request->getParam("code_BAn");

				   if($type_souscription == "CMIT") {
                      $id_mstiers = $m_mstiers->findConuter() + 1;				   
                      $mstiers->setId_mstiers($id_mstiers);
				      $mstiers->setCode_membre($code_membre);
				      $mstiers->setMontant_souscris($montant_souscription);
				      $mstiers->setMontant_utilise(0);
				      $mstiers->setMontant_restant($montant_souscription);
				      $mstiers->setType_souscription("CMIT");
				      $mstiers->setId_souscription($id_souscription);
				      $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $mstiers->setBon_neutre_code($code_ban);
					  $mstiers->setStatut_mstiers($statut);
                      $m_mstiers->save($mstiers);
					  
                   }  else if($type_souscription == "CAPU") {
                      $id_mstiers = $m_mstiers->findConuter() + 1;				   
                      $mstiers->setId_mstiers($id_mstiers);
				      $mstiers->setCode_membre($code_membre);
				      $mstiers->setMontant_souscris($montant_souscription);
				      $mstiers->setMontant_utilise(0);
				      $mstiers->setMontant_restant($montant_souscription);
				      $mstiers->setType_souscription("CAPU");
				      $mstiers->setId_souscription($id_souscription);
				      $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $mstiers->setBon_neutre_code($code_ban);
					  $mstiers->setStatut_mstiers($statut);
                      $m_mstiers->save($mstiers);
					  
                   }  elseif($type_souscription == "CAIPC") {
                      $id_mstiers = $m_mstiers->findConuter() + 1;				   
                      $mstiers->setId_mstiers($id_mstiers);
				      $mstiers->setCode_membre($code_membre);
				      $mstiers->setMontant_souscris($montant_souscription);
				      $mstiers->setMontant_utilise(0);
				      $mstiers->setMontant_restant($montant_souscription);
				      $mstiers->setType_souscription("CAIPC");
				      $mstiers->setId_souscription($id_souscription);
				      $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $mstiers->setBon_neutre_code($code_ban);
					  $mstiers->setStatut_mstiers($statut);
                      $m_mstiers->save($mstiers); 
                   }

                   $code  = $request->getParam("code_membre");
				   $montant  = $request->getParam("montant_souscription");
				   $code_tegc  = $request->getParam("code_te");
				   $type_bnp  = $request->getParam("type_souscription");
				   $code_banque  = $request->getParam("code_banque");
				   $referencepaie  = $request->getParam("num_compte");
                   $souscription_id = $id_souscription;
                   $typeOpi = "BNP";

                   $url = curl_init();
                   $resultjson = array();
				   curl_setopt_array(
				   $url,
				   array(
                      CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                      CURLOPT_RETURNTRANSFER => true,
                      CURLOPT_ENCODING => "",
                      CURLOPT_MAXREDIRS => 10,
                      CURLOPT_TIMEOUT => 30,
                      CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                      CURLOPT_CUSTOMREQUEST => "POST",
					  CURLOPT_POSTFIELDS => "{
						\n\t\"codeMembre\":\"$code\",
					    \n\t\"modePaiement\":\"$code_banque\",
						\n\t\"referencePaiement\":\"$referencepaie\",
					    \n\t\"montant\":\"$montant\",
						\n\t\"codeTegc\":\"$code_tegc\",
						\n\t\"typeOpi\":\"$typeOpi\",
						\n\t\"souscriptionId\":\"$souscription_id\",
						\n\t\"typeBnp\":\"$type_bnp\"
					  }",
					  CURLOPT_HTTPHEADER => array(
                        "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                        "content-type: application/json",
                      ),
				     )
					);
				
					$response = json_decode(curl_exec($url));
					$error = curl_error($url);
					 
                  	if(($error === '') && ($reponse->resultat == 0)) {			  
                      $db->commit();
				      $sessionmembreasso->error = "Operation bien effectuee ...";
				      $this->_redirect('/integrateur/addsouscriptionbc');
					} else {
					  $db->rollback();
					  $this->view->code_membre   = $request->getParam("code_membre");
			          $this->view->nom_membre = $request->getParam("design_membre");
			          $this->view->montant_souscription = $request->getParam("montant_souscription");
			          $this->view->error = "Echec operation ...".$error; 
                      return;
					}
			
			   } catch (Exception $exc) {
			       $db->rollback();
			       $this->view->code_membre   = $request->getParam("code_membre");
			       $this->view->nom_membre = $request->getParam("design_membre");
			       $this->view->montant_souscription = $request->getParam("montant_souscription");
			       $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                   return;
			   }
			
			} else {
		       $this->view->code_membre   = $request->getParam("code_membre");
			   $this->view->nom_membre = $request->getParam("design_membre");
			   $this->view->montant_souscription = $request->getParam("montant_souscription");
               $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			   return;
		   }
	
	    }
	}
	
	

        
	public  function addoffreurprojetsouscriptionAction()  {
	   /*  page administration/addoffreurprojet - Ajout d'un offreurprojet  */
	   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcint');
	   if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
 	   $t_canton = new Application_Model_DbTable_EuCanton();
       $m_ville = new Application_Model_EuVilleMapper();
	   $ville = new Application_Model_EuVille();
	   $m_filiere = new Application_Model_EuFiliereMapper();
	   $t_region = new Application_Model_DbTable_EuRegion();
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $t_pays = new Application_Model_DbTable_EuPays();
       $t_zone = new Application_Model_DbTable_EuZone();

       $cantons = $t_canton->fetchAll();
	   $regions = $t_region->fetchAll();
       $pays = $t_pays->fetchAll();
       $zones = $t_zone->fetchAll();
       $prefectures = $t_prefecture->fetchAll();
       $villes = $m_ville->fetchAll();
	   $filieres = $m_filiere->fetchAll();

	   $this->view->regions = $regions;
       $this->view->zones = $zones;
       $this->view->pays = $pays;
       $this->view->prefectures = $prefectures;
       $this->view->cantons = $cantons;
       $this->view->villes = $villes;
	   $this->view->filieres = $filieres;
	   $request = $this->getRequest();
	   
	   $param = (int) $this->_request->getParam('param');
	   
	   $typeoffreur = new Application_Model_EuTypeOffreurProjet();
       $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
       $typeoffreurM->find($param,$typeoffreur);
	   
	   $this->view->param = $param;
	   $this->view->souscription_montant = $typeoffreur->montant_param;
	   
	   if($request->isPost()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try {  
              if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			    && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			    && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			    && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot'] !=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
                    
                    $param = (int) $this->_request->getParam('param');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

				    $membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
				   
				    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($param,$typeoffreur);
				   
				    $m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
							 
                    //$m_dmscm = new Application_Model_EuDetailMscmMapper();
                    //$dmscm = new Application_Model_EuDetailMscm();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
				   
				    $souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
				    $statut = $request->getParam("liste");
					
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPS','valeur');
					$bnpnmps  = Util_Utils::getParametre('BNPNMPS','valeur');
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
					    $type_souscription = $request->getParam("type_souscription");
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $souscription_montant/$mont_msbcm;							
						}   						
					}

				    $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
				    if($findmembre == false) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmembreasso->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					  return;
				    }

				    $souscription_type_candidat= $request->getParam("souscription_type_candidat");
				    if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmembreasso->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...";
					  return;
				    }
				   
				    if($typeoffreur->montant_param <  $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmembreasso->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				    }
					
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->code_membre = $request->getParam("offreur_projet_membre");
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->code_membre = $request->getParam("offreur_projet_membre");
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
				    $offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';
				   
				    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmembreasso->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                      $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
				   
				   if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
				        $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					   
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
						   $this->view->code_membre = $request->getParam("offreur_projet_membre");
                           $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if(($offreur_membre != $offreur_code_membre)) {
						 $db->rollback();
	                     $this->view->param = $param;
						 $this->view->souscription_montant = $souscription_montant;
						 $this->view->code_membre = $request->getParam("offreur_projet_membre");
                         $sessionmembreasso->error = "Le code membre du souscripteur  doit être celui du bon neutre ...";
                         return;   
					    }
					   
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					   $i = 0;
					   $reste = $souscription_montant;
					   $nbre_lignesdetbon = count($lignesdetbon);
					   while($reste > 0 && $i < $nbre_lignesdetbon) {
                          $lignedetbon = $lignesdetbon[$i];
                          $id = $lignedetbon->getBon_neutre_detail_id();
						  $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						  if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                               $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                               $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                               $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                               foreach($appro_detail as $appro) {
							      $bnad = new Application_Model_EuBonNeutreApproDetail();
                                  $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                  if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                  } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                  }
										 
                                }
									   
							}
						  
						    //Mise à jour  des lignes d'enrégistrement
						    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                ->setBon_neutre_detail_montant_solde(0);
                            $bon_neutre_detailM->update($lignedetbon);
						  
					   $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
					   $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);

						  } else {
						      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                   $appro_montant_solde = $reste;
                                   foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                     }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						  
					   $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
					   $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);

						        $reste = 0;
						  }
                          $i++;						
				       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					   $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					   $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					   //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					   $bon_neutre2M->update($bon_neutre2);
						  
					   /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
					   
					   
					   $eusouscription = new Application_Model_DbTable_EuSouscription();
					   $select = $eusouscription->select();

                       $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					   $select->order(array("souscription_id ASC"));
	                   $select->limit(1);
	                   $rowseusouscription = $eusouscription->fetchRow($select);
		               if(count($rowseusouscription) > 0) {
			             $souscription_ok = 1;
			             $souscription_first = $rowseusouscription->souscription_id;
			           } else {
			             $souscription_ok = 0;
			           }
					   
					   $eusouscription = new Application_Model_DbTable_EuSouscription();
	                   $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $sessionmembreasso->error = "Login déjà existant ...";
						  return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $sessionmembreasso->error = "Mot de passe incorret ...";
						  return;
	                    }
					   
					   $date_id = Zend_Date::now();
					   $souscription = new Application_Model_EuSouscription();
                       $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                       $compteur_souscription = $souscription_mapper->findConuter() + 1;
					   $souscription->setSouscription_id($compteur_souscription);
						
					   $souscription->setSouscription_raison($membremorale->raison_sociale);
                       $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                       $souscription->setCode_statut($membremorale->code_statut);
					   $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					   $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
					   $souscription->setSouscription_type("BAn");
                       $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                       $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                       $souscription->setSouscription_banque(null);
						
					   $souscription->setSouscription_montant($souscription_montant);
                       $souscription->setSouscription_nombre(null);
                       $souscription->setSouscription_programme("CMFH");
                       $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					   $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                       $souscription->setSouscription_vignette(null);
						
					   $souscription->setCode_activite(null);
                       $souscription->setId_metier(null);
                       $souscription->setId_competence(null);
					   $m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                       $souscription->setSouscription_ville($ville->lib_ville);
						
					   $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                         $souscription->setSouscription_souscription($souscription_first);
				        } else {
                         $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						
					   ///////////////////////////////////////////// validation acnev //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(1);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
						
					   ///////////////////////////////////////////// validation filiere //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(2);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
					   ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(3);
					   $souscriptionM->update($souscription);

					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
					   
					   // --- Faire la demande de configuration ----///////
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $date_idd = clone $date_id;
					   $demande   = new Application_Model_EuDemandeConfigte();
                       $m_demande = new Application_Model_EuDemandeConfigteMapper();
					   $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					    if($finddemande == false) {
					      $compteur_demande = $m_demande->findConuter() + 1;
			              $demande->setId_demande($compteur_demande);
                          $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                          $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			              $demande->setValider(3);
			              $demande->setId_canton($request->getParam("id_canton"));
			              $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $demande->setProduit_special(1);
						  $demande->setProduit_ordinaire(0);
			              $m_demande->save($demande);
					    }
					   
					   //--- Début de l'opération de mise sur chaine ---
					   $code = $_POST['offreur_projet_membre'];
					   $code_zone = $request->getParam("code_zone");
					   $id_filiere = $_POST['offreur_projet_filiere'];
					   $code_agence = substr($code,0,12);
				       $table = new Application_Model_DbTable_EuActeur();
					   $model_acteur = new Application_Model_EuActeur();
					   $mapper_acteur = new Application_Model_EuActeurMapper();
                       $selection = $table->select();
                       $selection->where('code_membre like ?',$code_agence.'%');
                       $selection->where('type_acteur like ?','gac_surveillance');
                       $resultat = $table->fetchAll($selection);
                       $trouvacteursur = $resultat->current();
                       $code_acteur = $trouvacteursur->code_acteur;
                       $acteur  =  $code_acteur;
					   
					   
					    //script de creation de TE des vendeurs ou offreurs de projet
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
							   	   
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
					    $code_te = "";
							   
					    $nom_tegc = $membremorale->raison_sociale;
							   
						$eutegc = new Application_Model_DbTable_EuTegc();
                        $select = $eutegc->select();
					    $select->where("code_membre like ? ", $code);
                        $rowseutegc = $eutegc->fetchAll($select);
							   
						if(count($rowseutegc) <= 0)  {
							$code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
								  
						    $te->setCode_tegc($code_te);
			                $te->setId_filiere($id_filiere);
			                $te->setMdv(12);
			                $te->setTranche_payement(1);
			                $te->setCode_membre($code);
                            $te->setCode_membre_physique(null);								  
			                $te->setMontant(0);
			                $te->setMontant_utilise(0);
			                $te->setSolde_tegc(0);
			                $te->setId_utilisateur(NULL);
			                $te->setNom_tegc($nom_tegc);
			                $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $te->setType_tegc("DISTRIBUTEUR");
						    $te->setRecurrent_illimite(0);
						    $te->setRecurrent_limite(0);
						    $te->setNonrecurrent(1);
						    $te->setPeriode1(0);
						    $te->setPeriode2(0);
							$te->setPeriode3(0);
							$te->setFormel(0);
						    $te->setRegime_tva(0);
						    $te->setSpecial(0);
						    $te->setOrdinaire(0);
							$te->setSubvention(0);
										
							$te->setCode_zone($request->getParam("code_zone"));
				            $te->setId_pays($request->getParam("id_pays"));
				            $te->setId_region($request->getParam("id_region"));
				            $te->setId_prefecture($request->getParam("id_prefecture"));
				            $te->setId_canton($request->getParam("id_canton"));

                            $m_te->save($te);

                            $id_prk = $m_prk->findConuter() + 1;
					        $prk->setId_prk($id_prk);
					        $prk->setCode_tegc($code_te);
					        $prk->setValeur(null);
					        $m_prk->save($prk);
								   
					    }
							   
					    $code_compte = 'NB-TPAGCP-'.$code;
				        $res = $map_compte->find($code_compte,$compte);
				
				        if(!$res) {
                            $compte->setCode_cat('TPAGCP')
                                   ->setCode_compte($code_compte)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TPAGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
				
				        $code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
							   
					    // Fin script de creation des TE vendeurs ou offreurs de projet
					   
					   
					   
					   
					   
					   
					   /*$findacteur = $mapper_acteur->findByActeur($code);
					   if($findacteur == false) {
					        if(($param == 1) || ($param == 4) || ($param == 7)) {
						      $id_type_acteur = 1;
						    }		   
						    if(($param == 2) || ($param == 5) || ($param == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($param == 3) || ($param == 6) || ($param == 9)) {
						      $id_type_acteur = 3;
						    }
						    if(($param == 1) || ($param == 2) || ($param == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($param == 4) || ($param == 5) || ($param == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($param == 7) || ($param == 8) || ($param == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
								 
						    // Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
                            $c_acteur->setType_acteur(null);
                    
                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());
								
								
						    // Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if($trouveuser) {
							       if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } 
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);			  
		                       }
							   
							   // Mise à jour de la table eu_membre_morale
				               $membremorale->setId_filiere($id_filiere);
				               $m_mapmorale->update($membremorale);
					           
							   //script de creation de TE des vendeurs ou offreurs de projet
							   $prk = new Application_Model_EuPrk();
                               $m_prk = new Application_Model_EuPrkMapper();
							   	   
                               $te   = new Application_Model_EuTegc();
							   $m_te = new Application_Model_EuTegcMapper();
							   $code_te = "";
							   
							   $nom_tegc = $membremorale->raison_sociale;
							   
							   $eutegc = new Application_Model_DbTable_EuTegc();
                               $select = $eutegc->select();
							   $select->where("code_membre like ? ", $code);
                               $rowseutegc = $eutegc->fetchAll($select);
							   
							   if(count($rowseutegc) <= 0)  {
							      $code_te = $m_te->getLastTegcByMembre($code);
								  if($code_te == NULL) {
			                         $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                      } else {
			                         $num_ordre = substr($code_te, -5);
                                     $num_ordre++;
                                     $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
								  
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere($id_filiere);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
			                      $te->setCode_membre($code);
                                  $te->setCode_membre_physique(null);								  
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("DISTRIBUTEUR");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($request->getParam("code_zone"));
				                  $te->setId_pays($request->getParam("id_pays"));
				                  $te->setId_region($request->getParam("id_region"));
				                  $te->setId_prefecture($request->getParam("id_prefecture"));
				                  $te->setId_canton($request->getParam("id_canton"));

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(null);
					              $m_prk->save($prk);
								   
							   }
							   
							   $code_compte = 'NB-TPAGCP-'.$code;
				               $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
				
				               $code_comptets = 'NB-TSGCP-'.$code;
				               $rests = $map_compte->find($code_comptets,$compte);
				
				               if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
							   
							   // Fin script de creation des TE vendeurs ou offreurs de projet
				
                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);
					   }
					   */
					   //---  Fin de l'opération de mise sur chaine ---
					   
					   // Mise à jour du type de fournisseur
					   //$membremoral = new Application_Model_EuMembreMorale();
	                   //$m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					   //$trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				       //$membremoral->setType_fournisseur($_POST['type_fournisseur']);
				       //$m_mapmoral->update($membremoral);
					   
					   
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $a = new Application_Model_EuOffreurProjet();
                       $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					   $compteur = $ma->findConuter() + 1;
					   $id_souscription = $compteur_souscription;
                                    
                       $a->setOffreur_projet_id($compteur);
                       $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                       $a->setOffreur_projet_souscription($id_souscription);
                       $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					   $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                       $a->setOffreur_projet_adresse($request->getParam("offreur_projet_quartier"));
                       $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
                       $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					   if($param >= 4) {
	                      $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                       }
							
					   $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                       $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                       $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                       $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                       $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                       $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                       $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                       $a->setOffreur_projet_membreasso(0);
                       $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                       $a->setOffreurProjetCanton($request->getParam("id_canton"));
                       $a->setOffreurProjetVille($request->getParam("offreur_projet_ville"));
					   $a->setOffreurProjetFournisseur($request->getParam("type_fournisseur"));
			           $a->setPublier($_POST['publier']);
                       $ma->save($a);
							  
							  
					   ////////////////////////////////////////////////////////////////////////////
                       $offreur_projet = new Application_Model_EuOffreurProjet();
                       $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                       $offreur_projetM->find($compteur,$offreur_projet);
		
                       $offreur_projet->setPublier(1);
		               $offreur_projetM->update($offreur_projet);
							
					   $id_offreur_projet = $offreur_projet->offreur_projet_id;
					   $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                       $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					   $cpte = $m_detailoffreur->findConuter() + 1;
					   $detailoffreur->setId_detail_offreur_projet($cpte);
					   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					   $detailoffreur->setSouscription_id($id_souscription);
					   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					   $m_detailoffreur->save($detailoffreur);
							  
					   /////////////////////////////////////////////////////////////////////////////////////////
					   $code_agence = "";
							  
					   // Création du compte utilisateur intégrateur
                       $souscription = new Application_Model_EuSouscription();
                       $m_souscription = new Application_Model_EuSouscriptionMapper();
		               $m_souscription->find($id_souscription,$souscription);
							   
					   $date_id = Zend_Date::now();
                       $association = new Application_Model_EuAssociation();
                       $association_mapper = new Application_Model_EuAssociationMapper();

                       $login = "";
					   $password = "";
							  
					   if($finddepot == NULL  &&  $findmstiers == NULL) {
                            $compteur_association = $association_mapper->findConuter() + 1;
                            $association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                  $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                  }
								    $password = $login.$login; 
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }
										  
								$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id(null);
                                $membreasso_mapper->save($membreasso);
                        }
								  
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						
						$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						
						if($programme == "CM") {
						  $mstiers->setType_souscription("CAPS");	
						} else {
						   $mstiers->setType_souscription($request->getParam("type_souscription"));
						}
					    
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("CMFH");
                        $m_mstiers->save($mstiers);
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						if($programme == "CM") {
						   $type_bnp = "CAPS";
						} else {
						   $type_bnp = $request->getParam("type_souscription");	
						}
						$code_banque = $request->getParam("code_banque");
						$referencepaie   = $request->getParam("num_compte");
						$montant = $souscription_montant;
						
						if(isset($_POST["code_te"])) {
						  $code_tegc   = $request->getParam("code_te");   
						} else {
						  $eutegc = new Application_Model_DbTable_EuTegc();
                          $select = $eutegc->select();
						  $select->where("code_membre like ? ",$code);
                          $select->limit(1);
                          $rowseutegc = $eutegc->fetchRow($select);
                          $code_tegc = $rowseutegc->code_tegc;
						}
						
						$url = curl_init();
                        $resultjson = array();
					    curl_setopt_array(
					    $url,
						array(
							     CURLOPT_PORT => "9001",
                                 CURLOPT_URL => "http://10.10.20.7:9001/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                                   "content-type: application/json",
                                 ),
						 )
						);
							
						$response = json_decode(curl_exec($url));
						$error = curl_error($url);
						
						if(($error === '')  && ($response->resultat == 1)) {
						    $db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							  $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							  $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
							
						} else {
							$db->rollback();
							$this->view->param = $param;
				            $this->view->souscription_montant = $souscription_montant;
			                $this->view->code_membre = $request->getParam("offreur_projet_membre");
							$sessionmembreasso->error = "Echec operation ...";
							return;
						}	
				   }

            } else {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
			    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                $sessionmembreasso->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}					   
	   
	    } catch (Exception $exc) {
		    $db->rollback();
	        $this->view->param = $param;
			$this->view->souscription_montant = $souscription_montant;
			$this->view->code_membre = $request->getParam("offreur_projet_membre");
            $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            return;
        }
	   
	   }
	   
	
	}


	
	
	public function addoffreurprojetsouscriptionoldAction()  {
	       /* page integrateur/addoffreurprojet - Ajout d'un offreurprojet */
	       $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmcint');
		   if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
 		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville = new Application_Model_EuVilleMapper();
		   $ville = new Application_Model_EuVille();
		   $m_filiere = new Application_Model_EuFiliereMapper();
		   $t_region = new Application_Model_DbTable_EuRegion();
           $t_prefecture = new Application_Model_DbTable_EuPrefecture();
           $t_pays = new Application_Model_DbTable_EuPays();
           $t_zone = new Application_Model_DbTable_EuZone();
		   
		   $param = (int) $this->_request->getParam('param');
	       $typeoffreur = new Application_Model_EuTypeOffreurProjet();
           $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
           $typeoffreurM->find($param,$typeoffreur);

           $cantons = $t_canton->fetchAll();
		   $regions = $t_region->fetchAll();
           $pays = $t_pays->fetchAll();
           $zones = $t_zone->fetchAll();
           $prefectures = $t_prefecture->fetchAll();
           $villes = $m_ville->fetchAll();
		   $filieres = $m_filiere->fetchAll();

		   $this->view->regions = $regions;
           $this->view->zones = $zones;
           $this->view->pays = $pays;
           $this->view->prefectures = $prefectures;
           $this->view->cantons = $cantons;
           $this->view->villes = $villes;
		   $this->view->filieres = $filieres;
		   $this->view->param = $param;
	       $this->view->souscription_montant = $typeoffreur->montant_param;
		   $request = $this->getRequest();
		   
		   if($request->isPost())   {
		      $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
			  try {
			      if(isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
			           && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			           && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			           && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			           && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			           && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!=""
			           && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {      
			             
						  $param = (int)$this->_request->getParam('param');
						  
						  $id_utilisateur_acnev = 1;
                          $id_utilisateur_filiere = 2;
                          $id_utilisateur_technopole = 3;

						  $membremorale = new Application_Model_EuMembreMorale();
	                      $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                          $compte = new Application_Model_EuCompte();
                          $map_compte = new Application_Model_EuCompteMapper();

			              $contrat = new Application_Model_EuContrat();
                          $map_contrat = new Application_Model_EuContratMapper();

						  $m_depotvente = new Application_Model_EuDepotVenteMapper();
				          $depotvente = new Application_Model_EuDepotVente();
						  
						  $typeoffreur = new Application_Model_EuTypeOffreurProjet();
                          $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                          $m_typeoffreur->find($param,$typeoffreur);
				   
				          $m_mstiers = new Application_Model_EuMstiersMapper();
                          $mstiers = new Application_Model_EuMstiers();

						  $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
						  $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));
						  
						  $date_id = Zend_Date::now();

						  $bon_neutre = new Application_Model_EuBonNeutre();
                          $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

						  $id_type_acteur = "";
			              $id_type_creneau = "";
						  
						  $offreur_membre = $request->getParam("offreur_projet_membre");
						  $souscription_montant = $request->getParam("souscription_montant");

						  $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					      if($findmembre == false) {
					         $db->rollback();
	                         $this->view->param = $param;
							 $this->view->souscription_montant  = $request->getParam("souscription_montant");
						     $this->view->souscription_email  = $request->getParam("souscription_email");
						     $this->view->code_membre = $request->getParam("offreur_projet_membre");
					         $sessionmembreasso->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					         return;
					      }
						  
						  $souscription_type_candidat= $request->getParam("souscription_type_candidat");
						  if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					         $db->rollback();
					         $this->view->param = $param;
					         $this->view->souscription_montant  = $request->getParam("souscription_montant");
						     $this->view->souscription_email  = $request->getParam("souscription_email");
						     $this->view->code_membre = $request->getParam("offreur_projet_membre");
					         $sessionmembreasso->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de Bien,Produit et Service ...";
						     return;
					      }
						  
						  
						  if($typeoffreur->montant_param <  $souscription_montant) {
					        $db->rollback();
					        $this->view->param = $param;
					        $this->view->souscription_montant = $souscription_montant;
					        $this->view->souscription_email = $request->getParam("souscription_email");
					        $this->view->code_membre = $request->getParam("offreur_projet_membre");
					        $sessionmembreasso->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;     
				          }
						  
						  
						  $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
						  if(count($bon_neutre) == 0) {
						    $db->rollback();
	                        $this->view->param = $param;
							$this->view->souscription_montant = $souscription_montant;
						    $this->view->souscription_email  = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
					        $sessionmembreasso->error = "Votre Code BAn  incorrect ...";
					        return;
						  }
						  
						  if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
						    $db->rollback();
	                        $this->view->param = $param;
							$this->view->souscription_montant = $souscription_montant;
						    $this->view->souscription_email  = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            return;
						  }
						  
						  if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
						      $bon_neutre2 = new Application_Model_EuBonNeutre();
						      $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						      $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						      $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;

					          $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						      $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						      $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						      $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
							  
							  
							  if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						        $db->rollback();
	                            $this->view->param = $param;
								$this->view->souscription_montant  = $request->getParam("souscription_montant");
						        $this->view->souscription_email  = $request->getParam("souscription_email");
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                                return;
						      }

						      if(($offreur_membre != $offreur_code_membre)) {
						        $db->rollback();
	                            $this->view->param = $param;
								$this->view->souscription_montant  = $request->getParam("souscription_montant");
						        $this->view->souscription_email  = $request->getParam("souscription_email");
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $sessionmembreasso->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                                return;
						      }
							  
							  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						      $i = 0;
					          $reste = $souscription_montant;
					          $nbre_lignesdetbon = count($lignesdetbon);
							  while($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							       $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								   if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }  
									}
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);
							 
							 $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);

                                 } else {
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);
							 
							 $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);

						            $reste = 0;
                                 }
                                 $i++;
                             }
							 
							 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						     $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
						     $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
						     $bon_neutre2M->update($bon_neutre2);
							 
							 /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							 
							 $eusouscription = new Application_Model_DbTable_EuSouscription();
						     $select = $eusouscription->select();

                             $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						     $select->order(array("souscription_id ASC"));
	                         $select->limit(1);
	                         $rowseusouscription = $eusouscription->fetchRow($select);
		                     if(count($rowseusouscription) > 0) {
			                    $souscription_ok = 1;
			                    $souscription_first = $rowseusouscription->souscription_id;
			                 } else {
			                    $souscription_ok = 0;
			                 }

                             $eusouscription = new Application_Model_DbTable_EuSouscription();
	                         $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));

							 if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						        $db->rollback();
					            $this->view->param = $param;
								$this->view->souscription_montant = $request->getParam("souscription_montant");
						        $this->view->souscription_email = $request->getParam("souscription_email");
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $sessionmembreasso->error = "Login déjà existant ...";
							    return;
	                         } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						        $db->rollback();
					            $this->view->param = $param;
								$this->view->souscription_montant = $request->getParam("souscription_montant");
						        $this->view->souscription_email = $request->getParam("souscription_email");
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $sessionmembreasso->error = "Mot de passe incorret ...";
							    return;
	                         }
							 
							 $date_id = Zend_Date::now();
						     $souscription = new Application_Model_EuSouscription();
                             $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                             $compteur_souscription = $souscription_mapper->findConuter() + 1;
						     $souscription->setSouscription_id($compteur_souscription);
							 
							 
					     $souscription->setSouscription_raison($membremorale->raison_sociale);
                         $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                         $souscription->setCode_statut($membremorale->code_statut);
						 $souscription->setSouscription_mobile($membremorale->portable_membre);

						 $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

						 $souscription->setSouscription_type("BAn");
                         $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                         $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                         $souscription->setSouscription_banque(null);

						 $souscription->setSouscription_montant($montant_souscription);
                         $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                         $souscription->setSouscription_programme("CMFH");
                         $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));

						 $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $souscription->setSouscription_vignette(null);

						 $souscription->setCode_activite(null);
                         $souscription->setId_metier(null);
                         $souscription->setId_competence(null);
						 $m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                         $souscription->setSouscription_ville($ville->lib_ville);

						 $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));

					     if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						 } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                         }

						 if($souscription_ok == 1) {
                           $souscription->setSouscription_souscription($souscription_first);
				         } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					     }

						 $souscription->setSouscription_autonome(0);
			             $souscription->setPublier(0);
					     $souscription->setErreur(0);
					     $souscription->setId_canton($request->getParam("id_canton"));
                         $souscription_mapper->save($souscription);
							 
							 
						 ///////////////////////////////////////////// validation acnev //////////////////////////////////
						 $souscription = new Application_Model_EuSouscription();
						 $souscriptionM = new Application_Model_EuSouscriptionMapper();
						 $souscriptionM->find($compteur_souscription, $souscription);

					     $souscription->setPublier(1);
						 $souscriptionM->update($souscription);

						 $validation_quittance = new Application_Model_EuValidationQuittance();
						 $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						 $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					     $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						 $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						 $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						 $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						 $validation_quittance->setPublier(1);
						 $validation_quittance_mapper->save($validation_quittance);


						 ///////////////////////////////////////////// validation filiere //////////////////////////////////
						 $souscription = new Application_Model_EuSouscription();
						 $souscriptionM = new Application_Model_EuSouscriptionMapper();
						 $souscriptionM->find($compteur_souscription, $souscription);

						 $souscription->setPublier(2);
						 $souscriptionM->update($souscription);

						 $validation_quittance = new Application_Model_EuValidationQuittance();
						 $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						 $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						 $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						 $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						 $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						 $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						 $validation_quittance->setPublier(1);
						 $validation_quittance_mapper->save($validation_quittance);

						 ///////////////////////////////////////////// validation technopole //////////////////////////////////

						 $souscription = new Application_Model_EuSouscription();
						 $souscriptionM = new Application_Model_EuSouscriptionMapper();
						 $souscriptionM->find($compteur_souscription, $souscription);

						 $souscription->setPublier(3);
						 $souscriptionM->update($souscription);

						 $validation_quittance = new Application_Model_EuValidationQuittance();
						 $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						 $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					     $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						 $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						 $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						 $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						 $validation_quittance->setPublier(1);
						 $validation_quittance_mapper->save($validation_quittance);

                         // --- Faire la demande de configuration ----///////
					     $date_id = new Zend_Date(Zend_Date::ISO_8601);
                         $date_idd = clone $date_id;
					     $demande   = new Application_Model_EuDemandeConfigte();
                         $m_demande = new Application_Model_EuDemandeConfigteMapper();
					     $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					     if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					     }
						  
						  
                         ////////////////////////////////////////////////////////////////////////////////////////////////
                         //--- Début de l'opération de mise sur chaine ---
						 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                         $date_idd = clone $date_id;
						 $code = $_POST['offreur_projet_membre'];
					     $code_zone = $request->getParam("code_zone");
						 $id_filiere = $_POST['offreur_projet_filiere'];
						 $code_agence = substr($code,0,12);
				         $table = new Application_Model_DbTable_EuActeur();
					     $model_acteur = new Application_Model_EuActeur();
					     $mapper_acteur = new Application_Model_EuActeurMapper();
                         $selection = $table->select();
                         $selection->where('code_membre like ?',$code_agence.'%');
                         $selection->where('type_acteur like ?','gac_surveillance');
                         $resultat = $table->fetchAll($selection);
                         $trouvacteursur = $resultat->current();
                         $code_acteur = $trouvacteursur->code_acteur;
                         $acteur  =  $code_acteur;
					     $findacteur = $mapper_acteur->findByActeur($code);
						 
						 if($findacteur == false) {
						    if(($param == 1) || ($param == 4) || ($param == 7)) {
						        $id_type_acteur = 1;
						    }

						    if(($param == 2) || ($param == 5) || ($param == 8)) {
						        $id_type_acteur = 2;
						    }

						    if(($param == 3) || ($param == 6) || ($param == 9)) {
						        $id_type_acteur = 3;
						    }

						    if(($param == 1) || ($param == 2) || ($param == 3)) {
						        $id_type_creneau = 3;
						    }

						    if(($param == 4) || ($param == 5) || ($param == 6)) {
						        $id_type_creneau = 2;
						    }

						    if(($param == 7) || ($param == 8) || ($param == 9)) {
						        $id_type_creneau = 1;
						    }
						 
						    //insertion dans la table eu_acteur_creneau
						    $cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();

							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);

						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);

                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);

						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                               $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                               $num_ordre = substr($code_acteur, -4);
                               $num_ordre++;
                               $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }

                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);

						    // Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
							$count = $c_acteur->findConuter() + 1;

						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);

							$c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					          $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					          $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					          $c_acteur->setCode_activite('GROSSISTE');
				            }

			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
						    $c_acteur->setId_prefecture($request->getParam("id_prefecture"));
						    $c_acteur->setId_canton($request->getParam("id_canton"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
                            
							if($id_filiere == 4) {
							   $c_acteur->setType_acteur('PBF');
						    } else {
							   $c_acteur->setType_acteur(NULL);
						    };

                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());

							//Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();

				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				              $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
							
							if($trouveuser) {
							   if($id_filiere == 4) {
								      if($id_type_acteur == 3) {
									     $userin->setCode_groupe('pbf_detaillant');
                                         $userin->setCode_gac_filiere('pbf_detaillant');
                                         $userin->setCode_groupe_create('pbf_detaillant');
									  } elseif($id_type_acteur == 2) {
									     $userin->setCode_groupe('pbf_semi_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_semi_grossiste');
									  } elseif($id_type_acteur == 1) {
									     $userin->setCode_groupe('pbf_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_grossiste');
									  }
								   
								   } else {
								   
								   
								   if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   }
								   elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
								   
								   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);
											  
		                       }
							

							/*
						    if($trouveuser) {
							   if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                 $userin->setCode_groupe('oe_detaillant');
                                 $userin->setCode_gac_filiere('oe_detaillant');
                                 $userin->setCode_groupe_create('oe_detaillant');
                               }
                               elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                               } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                               } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                               }
                               elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                               }
                               elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                               }
				               $userin->setId_filiere($id_filiere);
                               $user_mapper->update($userin);
						 
						     }*/
								 
							 //Mise à jour de la table eu_membre_morale
				             $membremorale->setId_filiere($id_filiere);
				             $m_mapmorale->update($membremorale);
							  
                             $code_compte = 'NB-TPAGCP-'.$code;
				             $res = $map_compte->find($code_compte,$compte);

				             if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte);
                             }

				             $code_comptets = 'NB-TSGCP-'.$code;
				             $rests = $map_compte->find($code_comptets,$compte);

				             if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte);
                               }

                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);							  
						 
						 }
						 
						 // ---  Fin de l'opération de mise sur chaine ---
						 
						 //Mise à jour du type de fournisseur
						 $membremoral = new Application_Model_EuMembreMorale();
	                     $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
						 $trouvermembre = $m_mapmoral->find($request->getParam("offreur_projet_membre"),$membremoral);
				         $membremoral->setType_fournisseur($request->getParam("type_fournisseur"));
				         $m_mapmoral->update($membremoral);
						 
						 
						 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                         $a = new Application_Model_EuOffreurProjet();
                         $ma = new Application_Model_EuOffreurProjetMapper();

					     $compteur = $ma->findConuter() + 1;
					     $id_souscription = $compteur_souscription;

                         $a->setOffreur_projet_id($compteur);
                         $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                         $a->setOffreur_projet_souscription($id_souscription);
                         $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					     $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                         $a->setOffreur_projet_adresse($request->getParam("offreur_projet_adresse"));
                         $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
                         $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
					     if($param >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                         }

					     $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                         $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                         $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                         $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                         $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                         $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                         $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                         $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);
                         $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $a->setOffreurProjetCanton($request->getParam("id_canton"));
                         $a->setOffreurProjetVille($request->getParam("offreur_projet_ville"));
			             $a->setPublier($_POST['publier']);
                         $ma->save($a);
						 
						 
						 ////////////////////////////////////////////////////////////////////////////
                         $offreur_projet = new Application_Model_EuOffreurProjet();
                         $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                         $offreur_projetM->find($compteur,$offreur_projet);

                         $offreur_projet->setPublier(1);
		                 $offreur_projetM->update($offreur_projet);

					     $id_offreur_projet = $offreur_projet->offreur_projet_id;
					     $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                         $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();

					     $cpte = $m_detailoffreur->findConuter() + 1;
					     $detailoffreur->setId_detail_offreur_projet($cpte);
					     $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					     $detailoffreur->setSouscription_id($id_souscription);
					     $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					     $m_detailoffreur->save($detailoffreur);
						 
						 /////////////////////////////////////////////////////////////////////////////////////////
					     $code_agence = "";
						 
						 
						 // Création du compte utilisateur intégrateur
                         $souscription = new Application_Model_EuSouscription();
                         $m_souscription = new Application_Model_EuSouscriptionMapper();
		                 $m_souscription->find($id_souscription,$souscription);

					     $date_id = Zend_Date::now();
                         $association = new Application_Model_EuAssociation();
                         $association_mapper = new Application_Model_EuAssociationMapper();

                         $login = "";
						 $password = "";
						 
						 if($finddepot == NULL && $findmstiers == NULL) {
						    $compteur_association = $association_mapper->findConuter() + 1;
                            $association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);

							$date_id = Zend_Date::now();
							
							$membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();

							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							  //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                              $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                              $login = "";
                              while(strlen($login) != 8) {
                                $login .= $liste[rand(0,61)];
                              }
						      $password = $login.$login;
						    } else {
							  $login = $souscription->souscription_login;
							  $password = $souscription->souscription_passe;
						    }
							
							$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            $membreasso->setMembreasso_id($compteur_membreasso);
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
						 
						 }
						  
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						
						$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
					    $mstiers->setType_souscription("CAPS");
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
                        $m_mstiers->save($mstiers);
						
						//Emission des OPI
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = "CAPS";
						$code_banque = $request->getParam("code_banque");
						$referencepaie   = $request->getParam("num_compte");
						$montant = $souscription_montant;
						
						if(isset($_POST["code_te"])) {
						  $code_tegc   = $request->getParam("code_te");   
						} else {
						  $eutegc = new Application_Model_DbTable_EuTegc();
                          $select = $eutegc->select();
						  $select->where("code_membre like ? ",$code);
                          $select->limit(1);
                          $rowseutegc = $eutegc->fetchRow($select);
                          $code_tegc = $rowseutegc->code_tegc;
						}
						
						$url = curl_init();
                        $resultjson = array();
					    curl_setopt_array(
					    $url,
						array(
                          CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                          CURLOPT_RETURNTRANSFER => true,
                          CURLOPT_ENCODING => "",
                          CURLOPT_MAXREDIRS => 10,
                          CURLOPT_TIMEOUT => 30,
                          CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                          CURLOPT_CUSTOMREQUEST => "POST",
						  CURLOPT_POSTFIELDS => "{
						    \n\t\"codeMembre\":\"$code\",
							\n\t\"modePaiement\":\"$code_banque\",
							\n\t\"referencePaiement\":\"$referencepaie\",
							\n\t\"montant\":\"$montant\",
							\n\t\"codeTegc\":\"$code_tegc\",
							\n\t\"typeOpi\":\"$typeOpi\",
							\n\t\"souscriptionId\":\"$souscription_id\",
							\n\t\"typeBnp\":\"$type_bnp\"
						  }",
						  CURLOPT_HTTPHEADER => array(
                            "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                            "content-type: application/json",
                          ),
						)
					 );
							
				     $response = json_decode(curl_exec($url));
					 $error = curl_error($url);
					 
					 if(($error === '') && ($reponse->resultat == 0)) {
					    $db->commit();
					    if($finddepot == NULL && $findmstiers == NULL) {
                          $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder à votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
		                } else {
					      $sessionmembreasso->error = "Operation bien effectuee ...";
					    }
					    $this->_redirect('/integrateur/addoffreurprojet/param/'.$_POST['offreur_projet_type']); 
					 } else {
					    $db->rollback();
					    $this->view->param = $param;
				        $this->view->souscription_montant  = $request->getParam("souscription_montant");
				        $this->view->souscription_email  = $request->getParam("souscription_email");
				        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                        $sessionmembreasso->error = "Echec Operation ...".$error;
					    return;
					 } 	  
				  }
			  
			     } else {
					$db->rollback();
					$this->view->param = $param;
				    $this->view->souscription_montant  = $request->getParam("souscription_montant");
				    $this->view->souscription_email  = $request->getParam("souscription_email");
				    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                    $sessionmembreasso->error = "Veuillez saisir les champs obligatoires (*) ...";
					return;
				 }
			  
			  } catch (Exception $exc) {
				  $db->rollback();
	              $this->view->param = $param;
				  $this->view->souscription_montant  = $request->getParam("souscription_montant");
				  $this->view->souscription_email  = $request->getParam("souscription_email");
				  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                  $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                  return;
              }
	
	       }
	
	}
	
	
	public  function addacteurcotewebAction()  {
		/* page administration/addoffreurprojet - Ajout d'un offreurprojet */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param_int');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
	   
	    $this->view->param = $param;
	   
	    if($request->isPost()) {
			if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
				&& isset($_POST['param']) && $_POST['param']!=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
					$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
		            try {
						$param = (int) $this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
					
					$offreur_type = $request->getParam("offreur_projet_type");
					$typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($offreur_type,$typeoffreur);
					
					$m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
					
					$souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						  $mont_msbcm = $mont_bc * $bnpmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						  $mont_msbcm = $mont_bc * $bnpnmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						}   						
					}
					
					$findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
				    if($findmembre == false) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Le numéro du membre souscripteur est introuvable ...";
					  return;
				    }
					
					if($membremorale->desactiver == 1) {
					    $db->rollback();
	                    $this->view->param = $param;	
						$this->view->souscription_montant = $souscription_montant;
					    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$request->getParam("offreur_projet_membre")."  n'est pas autorisé à effectuer cette opération ...";
					    return;
					}
					
					if($typeoffreur->montant_param > $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					$offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					   
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
                           $this->view->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if((trim($offreur_membre) != trim($offreur_code_membre))) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Le code membre du souscripteur  doit être celui du bon neutre ...".$offreur_code_membre;
                            return;   
					    }

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
					    while($reste > 0 && $i < $nbre_lignesdetbon) {
                          $lignedetbon = $lignesdetbon[$i];
                          $id = $lignedetbon->getBon_neutre_detail_id();
						  $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						  if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                               $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                               $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                               $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                               foreach($appro_detail as $appro) {
							      $bnad = new Application_Model_EuBonNeutreApproDetail();
                                  $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                  if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                  } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                  }
										 
                                }
									   
							}
						  
						    //Mise à jour  des lignes d'enrégistrement
						    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                ->setBon_neutre_detail_montant_solde(0);
                            $bon_neutre_detailM->update($lignedetbon);
						  
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
					    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);

						  } else {
						      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                   $appro_montant_solde = $reste;
                                   foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                     }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
					    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);

						        $reste = 0;
						  }
                          $i++;						
				       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					    $bon_neutre2M->update($bon_neutre2);
						  
					    /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/

                        $eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Login déjà existant ...";
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Mot de passe incorret ...";
						    return;
	                    }
						
						$date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                        //$compteur_souscription = $souscription_mapper->findConuter() + 1;
					    //$souscription->setSouscription_id($compteur_souscription);
						
					    $souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $souscription->setSouscription_membreasso(1);
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat(6);
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
					    
                        $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						

                        ///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						// --- Faire la demande de configuration ----///////
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					    if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
						
						//--- Début de l'opération de mise sur chaine ---
						$code = $request->getParam("offreur_projet_membre");
					    $code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						if(isset($_POST['offreur_projet_filiere'])) {
					        $id_filiere = $_POST['offreur_projet_filiere'];
						}
						$code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
					        if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						      $id_type_acteur = 1;
						    }
							
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						      $id_type_acteur = 3;
						    }
							
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
							
							// Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
							
							if($param == 2) {
                                $c_acteur->setType_acteur("PBF");
							} else {
								$c_acteur->setType_acteur(NULL);
							}
                    
                            $c_acteur->setCode_gac_chaine(NULL);
                            $t_acteur->insert($c_acteur->toArray());
							
							// Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if(($trouveuser) &&  ($param == 1)) {
							    if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                } 
                                elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                } 
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                }
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							if(($trouveuser) &&  ($param == 2)) {
							    if($id_type_acteur == 3) {
                                    $userin->setCode_groupe('pbf_detaillant');
                                    $userin->setCode_gac_filiere('pbf_detaillant');
                                    $userin->setCode_groupe_create('pbf_detaillant');
                                } 
                                 elseif($id_type_acteur == 2 ) {
                                    $userin->setCode_groupe('pbf_semi_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_semi_grossiste');
                                }  
                                elseif($id_type_acteur == 1 ) {
                                    $userin->setCode_groupe('pbf_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							// Mise à jour de la table eu_membre_morale
				            $membremorale->setId_filiere($id_filiere);
				            $m_mapmorale->update($membremorale);
							
							
							// Mise à jour de la table eu_contrat
				            $findcontrat = $map_contrat->findByMembre($code);
				            $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				            $contrat->setId_type_creneau($id_type_creneau);
				            $contrat->setId_type_acteur($id_type_acteur);
				            $map_contrat->update($contrat);
							
						}
						//---Fin de l'opération de mise sur chaine---


                        $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
						
						$a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                        $a->setOffreur_projet_adresse($membremorale->quartier_membre);
						if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
                        $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
						
					    if($offreur_type >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
						if(isset($_POST['offreur_projet_nom_entrepot'])) {
                          $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                          $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
						} else {
						  $a->setOffreur_projet_nom_entrepot(null);
                          $a->setOffreur_projet_adresse_entrepot(null);
						}
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso(0);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($request->getParam("id_canton"));
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    $a->setOffreurProjetFournisseur(null);
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
						
						
						/////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    //Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";

                        if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }

                        //insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						//$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						$mstiers->setType_souscription($type_souscription);
						
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("USER");
                        $m_mstiers->save($mstiers);
						$id_mstiers = $db->lastInsertId();
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;
                        $m_te = new Application_Model_EuTegcMapper();
                        $te = new Application_Model_EuTegc();						
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc  = $request->getParam("code_te");   
						} else {
						    $code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
						    $code_tegc = $code_te;
						}
						
						$code_banque = "";
						$referencepaie = "";
						$montant = 0;
						
						if($type_souscription != "BPS") {
						    $db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addacteurcoteweb/param_int/'.$param);
						}  else  {
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($souscription_montant);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addacteur/param_int/'.$param);
						}						
						
						
						
					}
					
					} catch(Exception $exc) {
		                $db->rollback();
	                    $this->view->param = $param;
			            $this->view->souscription_montant = $souscription_montant;
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        return;
                    }
			} else  {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
                $sessionmembreasso->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}
			
		}
	
	}
	
	
	
	
	
	public  function addacteurAction()  {
	   /* page administration/addoffreurprojet - Ajout d'un offreurprojet */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
		
		$msbct = floor(Util_Utils::getParametre('MSBCT','valeur'));
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
		$select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
		$this->view->formations = $formations;
		$this->view->montant_bc = $montant_bc;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param_int');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
	   
	    $this->view->param = $param;
		if($request->isPost()) {
		    if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			  && isset($_POST['code_membre']) && $_POST['code_membre']!=""
			  && isset($_POST['param']) && $_POST['param']!=""
			  && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
					$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
		            try {
					    $param = (int) $this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					
					$comptebancaire = new Application_Model_EuCompteBancaire();
                    $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
					$mobilisateur = new Application_Model_EuMobilisateur();
                    $m_mobilisateur = new Application_Model_EuMobilisateurMapper();
						
				    $commission = new Application_Model_EuMobilisateurCommission();
                    $m_commission = new Application_Model_EuMobilisateurCommissionMapper();
					
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
					
					$offreur_type = $request->getParam("offreur_projet_type");
					$typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($offreur_type,$typeoffreur);
					
					$m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
					
					$cycle = new Application_Model_EuCycleFormation();
                    $m_cycle = new Application_Model_EuCycleFormationMapper();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("code_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("code_membre"));
					
					$findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($request->getParam("code_membre"));
					$code_membre_mobilisateur = $request->getParam("code_membre_mobilisateur");

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
					
					$souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
					$type_kit = $request->getParam("kit");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					$id_canton = NULL;
					$id_prefecture = NULL;
					$id_region = NULL;
					$id_pays = NULL;
					$code_zone = NULL;
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 0;
					$mont_bps = 0;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					$panupp  = Util_Utils::getParametre('TPANU','PP');
				    $panupm  =  Util_Utils::getParametre('TPANU','PM');
					$tauxcommission = Util_Utils::getParamEsmc(25);
					$mont_commission = 0;
					$mont_partage = 0;
					
					$avecfs = false;
                    $mbc  = 0;
                    $vbc  = 0;
                    $mfs  = 0;
                    $vfs  = 0;
                    $mmat = 0;
                    $vmat = 0;
                    $mci  = 0;
                    $vci  = 0;
                    $mass = 0;
                    $vass = 0;
                    $mcb  = 0;
                    $vcb  = 0;
					
					$dist_peripherique  = NULL;
                    $dist_connectivite  = NULL;
                    $dist_assurance     = NULL;
					$id_cycle_formation = NULL;
					
					if($programme == "CM") {
					  $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
					  $type_souscription = $request->getParam("type_souscription_bc");
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
					    if($type_kit == "KITSU") {
							$mont_bc = 30000;	 
						    if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						        $mont_msbcm = 1800000;					
						    } else {
						        $mont_msbcm = 1443750;				
						    }
								
					     } else if($type_kit == "KITTECH") {
							 $mont_bc = $request->getParam("mont_bc");
							 $id_cycle_formation = $request->getParam("id_cycle_formation");
							 $findcycle = $m_cycle->find($id_cycle_formation,$cycle);
							 $mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
						 }
						 $multiple = $souscription_montant/$mont_msbcm;
						 $vfs  = $multiple;
					}
					
					if($code_membre_mobilisateur != "" && $code_membre_mobilisateur != NULL)  {
					   if(substr($code_membre_mobilisateur,19,1) == 'P')  {
					     $findmembre = $m_map->find($code_membre_mobilisateur,$membre);
					     if($findmembre == false) {
						    $db->rollback();
	                        $this->view->param = $param;
					        $this->view->souscription_montant = $souscription_montant;
		                    $this->view->error = "Le numéro membre du mobilisateur saisi  ".$code_membre_mobilisateur." est introuvable ...";
					        return;
					     }
						 if($membre->desactiver != 0) {
						    $db->rollback();
	                        $this->view->param = $param;
					        $this->view->souscription_montant = $souscription_montant;
						    $this->view->error = "Le membre mobilisateur dont le code membre que voici  ".$code_membre_mobilisateur."  n'est pas autorisé à percevoir de commission ...";
						    return;
						 }	
					   } else {
						    $findmembre = $m_mapmorale->find($code_membre_mobilisateur,$membremorale);
				            if($findmembre == false) {
					           $db->rollback();
	                           $this->view->param = $param;
					           $this->view->souscription_montant = $souscription_montant;
					           $this->view->error = "Le numéro membre du mobilisateur est introuvable ...";
					           return;
				            }
					        if($membremorale->desactiver != 0) {
					           $db->rollback();
	                           $this->view->param = $param;	
						       $this->view->souscription_montant = $souscription_montant;
					           $this->view->error = "Le membre mobilisateur dont le code membre que voici  ".$code_membre_mobilisateur."  n'est pas autorisé à percevoir de commission ...";
					           return;
					        }
						}
						
						$findmobilisateur = $m_mobilisateur->fetchByMembre($code_membre_mobilisateur);
					    if($findmobilisateur == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->integrateur_montant = $souscription_montant;
		                  $this->view->error = "Ce membre  ".$code_membre_mobilisateur."  n'est pas enregistre en tant que mobilisateur ...";
					      return;	  
					    }
					}
					
					$findmembre = $m_mapmorale->find($_POST['code_membre'],$membremorale);
				    if($findmembre == false) {
					     $db->rollback();
	                     $this->view->param = $param;
					     $this->view->souscription_montant = $souscription_montant;
					     $this->view->error = "Le numéro du membre souscripteur est introuvable ...";
					     return;
				    }
					
					if($membremorale->desactiver != 0) {
					    $db->rollback();
	                    $this->view->param = $param;	
						$this->view->souscription_montant = $souscription_montant;
					    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$request->getParam("code_membre")."  n'est pas autorisé à effectuer cette opération ...";
					    return;
					}
					
					if($findbancaire == NULL) {
					   $db->rollback();
	                   $this->view->param = $param;	
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					   return;
				    }
					
					$id_canton = $membremorale->id_canton;
					$canton = new Application_Model_EuCanton();
                    $canton_mapper = new Application_Model_EuCantonMapper();
						
				    $prefecture = new Application_Model_EuPrefecture();
                    $prefecture_mapper = new Application_Model_EuPrefectureMapper();
						
				    $region = new Application_Model_EuRegion();
                    $region_mapper = new Application_Model_EuRegionMapper();
						
				    $pays = new Application_Model_EuPays();
                    $pays_mapper = new Application_Model_EuPaysMapper();
						
				    $zone = new Application_Model_EuZone();
                    $zone_mapper = new Application_Model_EuZoneMapper();
						
				    if(($id_canton != "") && ($id_canton != NULL)) {
					    $canton_mapper->find($id_canton,$canton);
						$id_prefecture = $canton->id_prefecture;
						$prefecture_mapper->find($id_prefecture,$prefecture);
						$id_region = $prefecture->id_region;
						$region_mapper->find($id_region,$region);
						$id_pays = $region->id_pays;
						$pays_mapper->find($id_pays,$pays);
						$code_zone = $pays->code_zone;
				    }
					
					
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
					
				       $select = $db_franchise->select();
				       $select->where('code_membre_franchise like  ?', $request->getParam("code_membre"));
				       $rowsfranchise = $db_franchise->fetchRow($select);
				  
				       if(count($rowsfranchise) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
					       $this->view->souscription_montant = $souscription_montant;
                           $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                           return;
				       }
					
				   
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					if($findmstiers == NULL) {
					    if($msbct > $souscription_montant) {
					        $db->rollback();
					        $this->view->param = $param;
					        $this->view->souscription_montant = $souscription_montant;
					        $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;     
				        }
					}
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					$offreur_membre = $request->getParam("code_membre");
				    $offreur_code_membre = '';
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
					
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValideBc($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutreBc($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreApproBc($bon_neutre->bon_neutre_id);
					   
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
                           $this->view->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if((trim($offreur_membre) != trim($offreur_code_membre))) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Le code membre du souscripteur  doit être celui du bon neutre ...".$offreur_code_membre;
                            return;   
					    }
						
						
						//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
						
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						
						while($reste > 0 && $i < $nbre_lignesdetbon) {
                          $lignedetbon = $lignesdetbon[$i];
                          $id = $lignedetbon->getBon_neutre_detail_id();
						  $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						  if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                               $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                               $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                               $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                               foreach($appro_detail as $appro) {
							      $bnad = new Application_Model_EuBonNeutreApproDetail();
                                  $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                  if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                  } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                  }
										 
                                }
									   
							}
							
							// Save des BAn utilisés 
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						    $bon_neutre_utilise->setUsertable("membreasso");
                            $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
						  
						    //Mise à jour  des lignes d'enrégistrement
						    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                ->setBon_neutre_detail_montant_solde(0);
                            $bon_neutre_detailM->update($lignedetbon);
						  
						  } else {
						      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                   $appro_montant_solde = $reste;
                                   foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                     }								   
                                }
								
								// Save des BAn utilisés 
								$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
								$bon_neutre_utilise->setUsertable("membreasso");
                                $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
								 
                                // Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
						  }
                          $i++;						
				       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					   $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					   $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					   //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					   $bon_neutre2M->update($bon_neutre2);
						  
					   
					   
					   //$integrateur_montant_kacm = 0;
					   //$integrateur_montant_bc = 0;
					   
					   /*$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						 $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						 $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   */
					   
					   /*
					   if($statut == "AvecListe") {
						   $integrateur_montant_kacm = $multiple * $mont_caps;
						   $integrateur_montant_bc = $souscription_montant - $integrateur_montant_kacm;
						   
						   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						   if(substr($membre_integrateur,19,1) == 'P')  {
						      $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						   } else {
						      $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						   }
						   $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_bc);
					       $bon_neutre_utiliseM->save($bon_neutre_utilise);
						   
						   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						   if(substr($membre_integrateur,19,1) == 'P')  {
						      $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						   } else {
						      $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						   }
						   $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_kacm);
					       $bon_neutre_utiliseM->save($bon_neutre_utilise);
						   
					   } else {
					      $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					      if(substr($offreur_membre,19,1) == 'P')  {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					      } else {
						     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					      }
					      $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					      $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					      $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					      $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   }
					   */
					   
					   $eusouscription = new Application_Model_DbTable_EuSouscription();
					   $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Login déjà existant ...";
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Mot de passe incorret ...";
						    return;
	                    }
						
						$date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                        //$compteur_souscription = $souscription_mapper->findConuter() + 1;
					    //$souscription->setSouscription_id($compteur_souscription);
						
					    $souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat(6);
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
					    
                        $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($id_canton);
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						// --- Faire la demande de configuration ----///////
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("code_membre"));
					   
					    if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("code_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
						
						
						//--- Début de l'opération de mise sur chaine ---
						$code = $request->getParam("code_membre");
					    $code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						if(isset($_POST['offreur_projet_filiere'])) {
					        $id_filiere = $_POST['offreur_projet_filiere'];
						}
						$code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
					        if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						      $id_type_acteur = 1;
						    }
							
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						      $id_type_acteur = 3;
						    }
							
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
							
							// Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($id_pays);
                            $c_acteur->setId_region($id_region);
                            $c_acteur->setCode_secteur_create($id_prefecture);
                            $c_acteur->setCode_agence_create($id_canton);
							$c_acteur->setId_prefecture($id_prefecture);
                            $c_acteur->setId_canton($id_canton);
							
							if($param == 2) {
								  $c_acteur->setType_acteur('PBF');
								  if($id_type_acteur == 3) {
					                 $c_acteur->setCode_activite('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setCode_activite('GROSSISTE');
				                  }
						    } else {
								  if($id_type_acteur == 3) {
					                 $c_acteur->setType_acteur('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setType_acteur('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setType_acteur('GROSSISTE');
				                  }
								  
								  if($id_type_creneau == 3) {
					                 $c_acteur->setCode_activite('DISTRIBUTION');
			                      } else if($id_type_creneau == 2) {
					                 $c_acteur->setCode_activite('TRANSFORMATION');
			                      } else if($id_type_creneau == 1) {
					                 $c_acteur->setCode_activite('PRODUCTION');
				                  }
						    }
                    
                            $c_acteur->setCode_gac_chaine(NULL);
                            $t_acteur->insert($c_acteur->toArray());
							
							// Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if(($trouveuser) &&  ($param == 1)) {
							    if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                } 
                                elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                } 
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                }
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							if(($trouveuser) &&  ($param == 2)) {
							    if($id_type_acteur == 3) {
                                    $userin->setCode_groupe('pbf_detaillant');
                                    $userin->setCode_gac_filiere('pbf_detaillant');
                                    $userin->setCode_groupe_create('pbf_detaillant');
                                } 
                                 elseif($id_type_acteur == 2 ) {
                                    $userin->setCode_groupe('pbf_semi_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_semi_grossiste');
                                }  
                                elseif($id_type_acteur == 1 ) {
                                    $userin->setCode_groupe('pbf_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							// Mise à jour de la table eu_membre_morale
				            $membremorale->setId_filiere($id_filiere);
				            $m_mapmorale->update($membremorale);
							
							
							// Mise à jour de la table eu_contrat
				            $findcontrat = $map_contrat->findByMembre($code);
				            $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				            $contrat->setId_type_creneau($id_type_creneau);
				            $contrat->setId_type_acteur($id_type_acteur);
				            $map_contrat->update($contrat);
							
						}
						//---Fin de l'opération de mise sur chaine---
						
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
						
						$a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("code_membre"));
                        $a->setOffreur_projet_adresse($membremorale->quartier_membre);
						if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
                        $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
						
					    if($offreur_type >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
						if(isset($_POST['offreur_projet_nom_entrepot'])) {
                          $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                          $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
						} else {
						  $a->setOffreur_projet_nom_entrepot(null);
                          $a->setOffreur_projet_adresse_entrepot(null);
						}
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso(0);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($id_canton);
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    $a->setOffreurProjetFournisseur(null);
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
					
					
					    /////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    //Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";

                        if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }

                        //insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						$mstiers->setCode_membre($request->getParam("code_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						$mstiers->setType_souscription($type_souscription);
					    $mstiers->setType_kit($type_kit);
                        $mstiers->setMontant_bc($mont_bc);
					    $mstiers->setMontant_peripherique($mmat);
					    $mstiers->setMontant_connectivite($mci);
					    $mstiers->setMontant_assurance($mass);
					    $mstiers->setMontant_comptebancaire($mcb);
                        $mstiers->setId_cycle_formation($id_cycle_formation);
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setBon_conso($vbc);
                        $mstiers->setFrais_solvabilite($vfs);
                        $mstiers->setPeripherique($vmat);
                        $mstiers->setConnectivite($vci);
                        $mstiers->setAssurance($vass);
                        $mstiers->setCompte_bancaire($vcb);
						$mstiers->setType_souscripteur("USER");
					    $mstiers->setDistributeur_peripherique($dist_peripherique);
                        $mstiers->setDistributeur_connectivite($dist_connectivite);
                        $mstiers->setDistributeur_assurance($dist_assurance);
                        $m_mstiers->save($mstiers);
						
						/*
						if($statut == "AvecListe") {
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($integrateur_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_kacm);
					        $mstiers->setType_souscription("CAPS");  
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						    $mstiers->setType_souscripteur("USER");  								  
                            $m_mstiers->save($mstiers);
							
							
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($integrateur_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_bc);
					        $mstiers->setType_souscription($type_souscription);  
                            $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						    $mstiers->setType_souscripteur("USER");  								  
                            $m_mstiers->save($mstiers);
						
						} else {
						   $mstiers->setCode_membre($request->getParam("code_membre"));
					       $mstiers->setMontant_souscris($souscription_montant);
						   $mstiers->setMontant_utilise(0);
					       $mstiers->setMontant_restant($souscription_montant);
						   $mstiers->setType_souscription($type_souscription);
					       $mstiers->setType_kit($type_kit);
                           $mstiers->setMontant_bc($mont_bc);
					       $mstiers->setMontant_peripherique($mmat);
					       $mstiers->setMontant_connectivite($mci);
					       $mstiers->setMontant_assurance($mass);
					       $mstiers->setMontant_comptebancaire($mcb);
                           $mstiers->setId_cycle_formation($id_cycle_formation);
						   $mstiers->setId_souscription($id_souscription);
						   $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $mstiers->setBon_neutre_code($code_ban);
						   $mstiers->setStatut_mstiers($statut);
						   $mstiers->setType_mstiers($programme);
						   $mstiers->setBon_conso($vbc);
                           $mstiers->setFrais_solvabilite($vfs);
                           $mstiers->setPeripherique($vmat);
                           $mstiers->setConnectivite($vci);
                           $mstiers->setAssurance($vass);
                           $mstiers->setCompte_bancaire($vcb);
						   $mstiers->setType_souscripteur("USER");
					       $mstiers->setDistributeur_peripherique($dist_peripherique);
                           $mstiers->setDistributeur_connectivite($dist_connectivite);
                           $mstiers->setDistributeur_assurance($dist_assurance);
                           $m_mstiers->save($mstiers);	
						}
						*/
						
					    $id_mstiers = $db->lastInsertId();
						// insertion dans la table eu_mobilisateur_commission
						if($code_membre_mobilisateur != "" && $code_membre_mobilisateur != NULL)  {
						     $mont_commission = floor(($souscription_montant * $tauxcommission)/100);
							 $mont_partage = floor($mont_commission/3);
							   
							 $commission->setCode_membre($code_membre_mobilisateur);
							 $commission->setId_mstiers($id_mstiers);
							 $commission->setDatecreat($date_id->toString('yyyy-MM-dd HH:mm:ss'));		
				             $commission->setMontant_mstiers($souscription_montant);
				             $commission->setMontant_commission($mont_commission);
				             $commission->setMontant_ban($mont_partage);
				             $commission->setMontant_bai($mont_partage);
				             $commission->setMontant_opi($mont_partage);
				             $commission->setMembreasso_id($sessionmembreasso->membreasso_id);
                             $commission->setPayer(0);
							 $m_commission->save($commission);						
						 }
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;
						
                        $m_te = new Application_Model_EuTegcMapper();
                        $te = new Application_Model_EuTegc();						
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc  = $request->getParam("code_te");   
						}
						
						$code_banque = "";
						$referencepaie = "";
						$montant = 0;
						
						if($type_souscription != "BPS") {
						    //$code_banque = $request->getParam("code_banque");
						    //$referencepaie   = $request->getParam("num_compte");
							
							$code_banque = $findbancaire->code_banque;
                            $referencepaie = $findbancaire->num_compte_bancaire;
						    $montant = $souscription_montant;
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\", 
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
								$db->commit();
						        $sessionmembreasso->error = $response->message;
							    $this->_redirect('/integrateur/addacteur/param_int/'.$param);
							
						    } else {
							    $db->rollback();
							    $this->view->param = $param;
				                $this->view->souscription_montant = $souscription_montant;
							    $sessionmembreasso->error = $response->message;
							    return;
						    }
							
						}  else  {
							$mont_bps =  ($souscription_montant) + (($souscription_montant * $panupm)/100);
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($mont_bps);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addacteur/param_int/'.$param);
						}
					}
				} catch(Exception $exc) {
		           $db->rollback();
	               $this->view->param = $param;
			       $this->view->souscription_montant = $souscription_montant;
                   $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
                }
		
			} else  {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
                $sessionmembreasso->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}
		}	
	}
	
	
	
	
	public  function addacteurkitAction()  {
		/* page administration/addoffreurprojet - Ajout d'un offreurprojet */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
		$select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
		$this->view->formations = $formations;
		$this->view->montant_bc = $montant_bc;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param_int');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
	   
	    $this->view->param = $param;
	   
	    if($request->isPost()) {
			if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['code_membre']) && $_POST['code_membre']!=""
				&& isset($_POST['param']) && $_POST['param']!=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
					$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
		            try {
						
				    $param = (int) $this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$comptebancaire = new Application_Model_EuCompteBancaire();
                    $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
					
					$offreur_type = $request->getParam("offreur_projet_type");
					$typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($offreur_type,$typeoffreur);
					
					$m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
					
					$cycle = new Application_Model_EuCycleFormation();
                    $m_cycle = new Application_Model_EuCycleFormationMapper();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("code_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("code_membre"));
					
					$findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($request->getParam("code_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
					
					$souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
					$type_kit = $request->getParam("kit");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 0;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					$avecfs = false;
                    $mbc  = 0;
                    $vbc  = 0;
                    $mfs  = 0;
                    $vfs  = 0;
                    $mmat = 0;
                    $vmat = 0;
                    $mci  = 0;
                    $vci  = 0;
                    $mass = 0;
                    $vass  = 0;
                    $mcb = 0;
                    $vcb = 0;
					
					$dist_peripherique = NULL;
                    $dist_connectivite = NULL;
                    $dist_assurance    = NULL;
					$id_cycle_formation = NULL;
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if(isset($_POST['mbc']) && $_POST['mbc'] == 1) {
						    $mbc = floor(Util_Utils::getParametre('MBC','valeur'));
							$mont_bc = $request->getParam("montant_bc");
							$vbc = 1;
							if($type_kit == "KITSU") {
								 if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						              $mont_msbcm = $mont_bc * $bnpmps;					
						         } else {
						              $mont_msbcm = $mont_bc * $bnpnmps;				
						         }
								
							} else if($type_kit == "KITTECH") {
								$id_cycle_formation = $request->getParam("id_cycle_formation");
								$findcycle = $m_cycle->find($id_cycle_formation,$cycle);
								$mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
							}
					    }
						
						if(isset($_POST['mfs']) && $_POST['mfs'] == 1) {
						    $mfs = floor(Util_Utils::getParametre('CAPS','valeur'));
							$vfs = 1;
							$avecfs = true;
					    }
						
						if(isset($_POST['mmat']) && $_POST['mmat'] == 1) {
						    //$mmat = floor(Util_Utils::getParametre('MMAT','valeur'));
							$mmat = $request->getParam("montant_peripherique");
							$vmat = 1;
							$dist_peripherique = $request->getParam("dist_peripherique");
							
							$finddistperi = $m_mapmorale->find($dist_peripherique,$membremorale);
						    if($finddistperi == false) {
						        $db->rollback();
	                            $this->view->param = $param;
					            $this->view->souscription_montant = $souscription_montant;
					            $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_peripherique."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mci']) && $_POST['mci'] == 1) {
						    $mci = floor($request->getParam("montant_connectivite")) * floor(Util_Utils::getParametre('MSBCri','PS'));
							$vci = 1;
							$dist_connectivite = $request->getParam("dist_connectivite");
							
							$finddistcon = $m_mapmorale->find($dist_connectivite,$membremorale);
						    if($finddistcon == false) {
						        $db->rollback();
	                            $this->view->param = $param;
					            $this->view->souscription_montant = $souscription_montant;
					            $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_connectivite."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mass']) && $_POST['mass'] == 1) {
						    $mass = $request->getParam("montant_assurance");
							$vass = 1;
							$dist_assurance = $request->getParam("dist_assurance");
							
							$finddistass = $m_mapmorale->find($dist_assurance,$membremorale);
						    if($finddistass == false) {
						        $db->rollback();
	                            $this->view->param = $param;
					            $this->view->souscription_montant = $souscription_montant;
					            $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_assurance."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mcb']) && $_POST['mcb'] == 1) {
						    //$mcb = floor(Util_Utils::getParametre('MCB','valeur'));
							$mcb = $request->getParam("montant_compte");
							$vcb = 1;
					    }
						
						$mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                        $multiple = $souscription_montant/$mont_msbcm;
   						
					}
					
					/*
					elseif($programme == "BC" && $statut == "SansListe" && 
					    ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                        || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                        || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
						
						if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						    $mont_msbcm = $mont_bc * $bnpmps;
							$mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                            $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
							$mont_msbcm = $mont_msbcm + $mfs + $mmat + $mci + $mass + $mcb;
                            $multiple = $souscription_montant/$mont_msbcm;							
						} 
					  }
					  */
					
					$findmembre = $m_mapmorale->find($_POST['code_membre'],$membremorale);
				    if($findmembre == false) {
					     $db->rollback();
	                     $this->view->param = $param;
					     $this->view->souscription_montant = $souscription_montant;
					     $this->view->error = "Le numéro du membre souscripteur est introuvable ...";
					     return;
				    }
					
					if($membremorale->desactiver != 0) {
					    $db->rollback();
	                    $this->view->param = $param;	
						$this->view->souscription_montant = $souscription_montant;
					    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$request->getParam("code_membre")."  n'est pas autorisé à effectuer cette opération ...";
					    return;
					}
					
					if($findbancaire == NULL) {
					   $db->rollback();
	                   $this->view->param = $param;	
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					   return;
				    }
					
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
					
				       $select = $db_franchise->select();
				       $select->where('code_membre_franchise like  ?', $request->getParam("code_membre"));
				       $rowsfranchise = $db_franchise->fetchRow($select);
				  
				       if(count($rowsfranchise) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
					       $this->view->souscription_montant = $souscription_montant;
                           $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                           return;
				       }
					
				   
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					
					
					
					if($typeoffreur->montant_param > $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					/*
					if(stripos($multiple, ".") != FALSE && $programme == "BC" && $statut == "SansListe" && 
					    ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                        || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                        || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
							
						$db->rollback();
					    $this->view->param = $param;
					    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				        $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				        return;		
					}
					*/
					
					
					$offreur_membre = $request->getParam("code_membre");
				    $offreur_code_membre = '';
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					   
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
                           $this->view->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if((trim($offreur_membre) != trim($offreur_code_membre))) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Le code membre du souscripteur  doit être celui du bon neutre ...".$offreur_code_membre;
                            return;   
					    }

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
					    while($reste > 0 && $i < $nbre_lignesdetbon) {
                          $lignedetbon = $lignesdetbon[$i];
                          $id = $lignedetbon->getBon_neutre_detail_id();
						  $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						  if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                               $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                               $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                               $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                               foreach($appro_detail as $appro) {
							      $bnad = new Application_Model_EuBonNeutreApproDetail();
                                  $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                  if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                  } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                  }
										 
                                }
									   
							}
						  
						    //Mise à jour  des lignes d'enrégistrement
						    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                ->setBon_neutre_detail_montant_solde(0);
                            $bon_neutre_detailM->update($lignedetbon);
						  
						  } else {
						      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                   $appro_montant_solde = $reste;
                                   foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                     }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
						  }
                          $i++;						
				       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					    $bon_neutre2M->update($bon_neutre2);
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						$souscription_montant_kacm = 0;
						$souscription_montant_bc = 0;
						
						if((isset($_POST['mfs']) && $_POST['mfs'] == 1)) {
							$souscription_montant_kacm = $multiple * $mfs;
							$souscription_montant_bc = $souscription_montant - $souscription_montant_kacm;
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant_bc);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant_kacm);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
						    
						} else {
					        $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					        if(substr($offreur_membre,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					        } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					        }
					        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
					    }

                        $eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Login déjà existant ...";
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Mot de passe incorret ...";
						    return;
	                    }
						
						$date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                        //$compteur_souscription = $souscription_mapper->findConuter() + 1;
					    //$souscription->setSouscription_id($compteur_souscription);
						
					    $souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat(6);
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
					    
                        $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						

                        ///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						// --- Faire la demande de configuration ----///////
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("code_membre"));
					   
					    if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("code_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
						
						//--- Début de l'opération de mise sur chaine ---
						$code = $request->getParam("code_membre");
					    $code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						if(isset($_POST['offreur_projet_filiere'])) {
					        $id_filiere = $_POST['offreur_projet_filiere'];
						}
						$code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
					        if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						      $id_type_acteur = 1;
						    }
							
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						      $id_type_acteur = 3;
						    }
							
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
							
							// Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
							$c_acteur->setId_prefecture($request->getParam("id_prefecture"));
                            $c_acteur->setId_canton($request->getParam("id_canton"));
							
							if($param == 2) {
                                $c_acteur->setType_acteur("PBF");
							} else {
								$c_acteur->setType_acteur(NULL);
							}
                    
                            $c_acteur->setCode_gac_chaine(NULL);
                            $t_acteur->insert($c_acteur->toArray());
							
							// Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if(($trouveuser) &&  ($param == 1)) {
							    if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                } 
                                elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                } 
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                }
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							if(($trouveuser) &&  ($param == 2)) {
							    if($id_type_acteur == 3) {
                                    $userin->setCode_groupe('pbf_detaillant');
                                    $userin->setCode_gac_filiere('pbf_detaillant');
                                    $userin->setCode_groupe_create('pbf_detaillant');
                                } 
                                 elseif($id_type_acteur == 2 ) {
                                    $userin->setCode_groupe('pbf_semi_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_semi_grossiste');
                                }  
                                elseif($id_type_acteur == 1 ) {
                                    $userin->setCode_groupe('pbf_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							// Mise à jour de la table eu_membre_morale
				            $membremorale->setId_filiere($id_filiere);
				            $m_mapmorale->update($membremorale);
							
							
							// Mise à jour de la table eu_contrat
				            $findcontrat = $map_contrat->findByMembre($code);
				            $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				            $contrat->setId_type_creneau($id_type_creneau);
				            $contrat->setId_type_acteur($id_type_acteur);
				            $map_contrat->update($contrat);
							
						}
						//---Fin de l'opération de mise sur chaine---


                        $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
						
						$a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("code_membre"));
                        $a->setOffreur_projet_adresse($membremorale->quartier_membre);
						if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
                        $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
						
					    if($offreur_type >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
						if(isset($_POST['offreur_projet_nom_entrepot'])) {
                          $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                          $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
						} else {
						  $a->setOffreur_projet_nom_entrepot(null);
                          $a->setOffreur_projet_adresse_entrepot(null);
						}
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso(0);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($request->getParam("id_canton"));
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    $a->setOffreurProjetFournisseur(null);
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
						
						
						/////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    //Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";

                        if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }

                        //insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						
						//$mstiers->setId_mstiers($id_mstiers);
						if((isset($_POST['mfs']) && $_POST['mfs'] == 1)) {
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($souscription_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($souscription_montant_kacm);
					        $mstiers->setType_souscription("CAPS");
							
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setType_souscripteur("USER");
							$mstiers->setDistributeur_peripherique(NULL);
                            $mstiers->setDistributeur_connectivite(NULL);
                            $mstiers->setDistributeur_assurance(NULL);
                            $m_mstiers->save($mstiers);
							
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($souscription_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($souscription_montant_bc);
					        $mstiers->setType_souscription($type_souscription);
                            
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setType_souscripteur("USER");
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
                            $m_mstiers->save($mstiers);
							
						} else {
					        $mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($souscription_montant);
						    $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($souscription_montant);
						    $mstiers->setType_souscription($type_souscription);
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
						    $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setStatut_mstiers($statut);
						    $mstiers->setType_mstiers($programme);
						    $mstiers->setBon_conso($vbc);
                            $mstiers->setFrais_solvabilite($vfs);
                            $mstiers->setPeripherique($vmat);
                            $mstiers->setConnectivite($vci);
                            $mstiers->setAssurance($vass);
                            $mstiers->setCompte_bancaire($vcb);
						    $mstiers->setType_souscripteur("USER");
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
                            $m_mstiers->save($mstiers);
					    }
						
						$id_mstiers = $db->lastInsertId();
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;
						
                        $m_te = new Application_Model_EuTegcMapper();
                        $te = new Application_Model_EuTegc();						
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc  = $request->getParam("code_te");   
						}
						
						/*
						else {
						    $code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
						    $code_tegc = $code_te;
						}
						*/
						
						$code_banque = "";
						$referencepaie = "";
						$montant = 0;
						
						if($type_souscription != "BPS") {
						    //$code_banque = $request->getParam("code_banque");
						    //$referencepaie   = $request->getParam("num_compte");
							
							$code_banque = $findbancaire->code_banque;
                            $referencepaie = $findbancaire->num_compte_bancaire;
						    $montant = $souscription_montant;
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\", 
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
								$db->commit();
						        $sessionmembreasso->error = $response->message;
							    $this->_redirect('/integrateur/addacteur/param_int/'.$param);
							
						    } else {
							    $db->rollback();
							    $this->view->param = $param;
				                $this->view->souscription_montant = $souscription_montant;
							    $sessionmembreasso->error = $response->message;
							    return;
						    }
						}  else  {
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($souscription_montant);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addacteur/param_int/'.$param);
						}
						
					}
					
					} catch(Exception $exc) {
		                $db->rollback();
	                    $this->view->param = $param;
			            $this->view->souscription_montant = $souscription_montant;
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        return;
                    }
			} else  {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
                $sessionmembreasso->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}
			
		}
	
	}
	
	
	
	
	
	public  function addacteurpreAction()  {
		/* page administration/addoffreurprojet - Ajout d'un offreurprojet */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    //$this->_helper->layout()->setLayout('layoutpublicesmcint');
		$this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param_int');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
	   
	    $this->view->param = $param;
	   
	    if($request->isPost()) {
			if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
				&& isset($_POST['param']) && $_POST['param']!=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {
					$param = (int)$this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
						  
				    $membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
			
			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();
								 
				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
							   
				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
						 
				    $date_id = Zend_Date::now();
						
				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						 
				    $id_type_acteur = "";
			        $id_type_creneau = "";
						  
					$findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					if($findmembre == false) {
					    $db->rollback();
	                    $this->view->param = $param;
						$this->view->code_membre = $_POST['offreur_projet_membre'];
					    $sessionmembreasso->error = "Le numéro du membre souscripteur est introuvable ...";
					    return;
					}
					
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $request->getParam("offreur_projet_membre"));
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			           $this->view->param = $param;
						$this->view->code_membre = $_POST['offreur_projet_membre'];
                      $sessionmembreasso->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
					
				       $select = $db_franchise->select();
				       $select->where('code_membre_franchise like  ?', $request->getParam("offreur_projet_membre"));
				       $rowsfranchise = $db_franchise->fetchRow($select);
				  
				       if(count($rowsfranchise) == 0) {
					       $db->rollback();
			                $this->view->param = $param;
						$this->view->code_membre = $_POST['offreur_projet_membre'];
                           $sessionmembreasso->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                           return;
				       }
					
				   
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $request->getParam("offreur_projet_membre"));
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			           $this->view->param = $param;
						$this->view->code_membre = $_POST['offreur_projet_membre'];
                      $sessionmembreasso->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					
					
					$offreur_membre = $request->getParam("offreur_projet_membre");
					$offreur_type = $request->getParam("offreur_projet_type");
				    $offreur_code_membre = '';
						  
				    $souscription_nombre  = $request->getParam("souscription_nombre");
				    $montant_souscription = $souscription_nombre * 2187.5;

                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
						$db->rollback();
	                    $this->view->param = $param;
						$this->view->code_membre = $request->getParam("offreur_projet_membre");
					    $sessionmembreasso->error = "Votre Code BAn  incorrect ...";
					    return;     
				    }
					
					if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						$db->rollback();
	                    $this->view->param = $param;
						$this->view->code_membre = $request->getParam("offreur_projet_membre");
                        $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                        return; 
				    }

                    if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {					
						
						$bon_neutre2 = new Application_Model_EuBonNeutre();
				        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
				        $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
				        $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
			            $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
				        $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
				        $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                        $cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);
							 
				        if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
				            $db->rollback();
	                        $this->view->param = $param;
				            $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ... ".$cumulbon;
                            return; 
				        }
						 
				        if(($offreur_membre != $offreur_code_membre)) {
				            $db->rollback();
	                        $this->view->param = $param;
				            $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Le code membre du souscripteur  doit être celui du bon neutre ...";
                            return;   
				        }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
				        $i = 0;
			            $reste = $montant_souscription;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
									if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
									   
									}
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);
								 
						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
							 
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);

                                 } else {
								 
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);
						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
							 
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);

						            $reste = 0;
                                }							   
                                $i++;
                        }						 
						  
						////////////////////////////////////////////////////////////////////////////////////////////////////////////	
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);     
						$bon_neutre2M->update($bon_neutre2);
						  
						/*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
							 
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);*/
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			               $souscription_ok = 1;
			               $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }


                        $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
                                  
                        if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Login déjà existant ...";
							return;
	                    }  else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Mot de passe incorret ...";
							return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                         //$compteur_souscription = $souscription_mapper->findConuter() + 1;
						 //$souscription->setSouscription_id($compteur_souscription);
						
						$souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
						$souscription->setSouscription_mobile($membremorale->portable_membre);
						
						$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($montant_souscription);
                        $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat(6);
						
						$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
						$souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
						 
                        $souscription->setSouscription_ville($membremorale->ville_membre);
						
						$souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
						if($souscription_ok == 1) {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
                        $compteur_souscription = $db->lastInsertId();
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
					         $souscription->setPublier(1);
						     $souscriptionM->update($souscription);
						
						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						
						     ///////////////////////////////////////////// validation filiere //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
						     $souscription->setPublier(2);
						     $souscriptionM->update($souscription);
						
						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						     //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						     ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
						     $souscription->setPublier(3);
						     $souscriptionM->update($souscription);

						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						
						//--- Début de l'opération de mise sur chaine ---
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
						$code = $_POST['offreur_projet_membre'];
						$code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
						    $id_filiere = $request->getParam("offreur_projet_filiere");
							if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						        $id_type_acteur = 1;
						    }		   
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						        $id_type_acteur = 2;
						    }
								  
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						        $id_type_acteur = 3;
						    }
						
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						        $id_type_creneau = 3;
						    }			   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						        $id_type_creneau = 2;
						    }			   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						        $id_type_creneau = 1;
						    }
							
							//insertion dans la table eu_acteur_creneau
								$cm  = new Application_Model_EuActeurCreneauMapper();
                                $acren = new Application_Model_EuActeurCreneau();
											  
								$rep_mapper = new Application_Model_EuRepresentationMapper();
				                $rep = $rep_mapper->findbyrep($code);
						
						        $acren->setNom_acteur($membremorale->getRaison_sociale());
                                $acren->setCode_membre($code);
                                $acren->setId_type_acteur($id_type_acteur);
              
                                $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                                $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                                $acren->setId_utilisateur(null);
                                $acren->setGroupe(null);
                                $acren->setCode_creneau(NULL);
                                $acren->setCode_gac_filiere(NULL);
                                $acren->setCode_gac(NULL);
											  
								$code_acteur = $cm->getLastActeurByCrenau($code_zone);
                                if($code_acteur == NULL) {
                                    $code_acteur = 'A' . $code_zone . '0001';
                                } else {
                                    $num_ordre = substr($code_acteur, -4);
                                    $num_ordre++;
                                    $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                                }
                                $acren->setCode_acteur($code_acteur);
                                $acren->setId_filiere($id_filiere);
                                $cm->save($acren);
								
								//Insertion dans la table eu_acteur
				                $t_acteur = new Application_Model_DbTable_EuActeur();
				                $c_acteur = new Application_Model_EuActeur();
								$count = $c_acteur->findConuter() + 1;
											  
								//Mise à jour des tables
				                $filiere =  new Application_Model_EuFiliere();
                                $map_filiere = new Application_Model_EuFiliereMapper();
                                $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
								$c_acteur->setId_acteur($count)
                                          ->setCode_acteur(NULL)
                                          ->setCode_division($filiere->getCode_division())
                                          ->setCode_membre($code)
                                          ->setId_utilisateur(NULL)
                                          ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				                
						
			                    $c_acteur->setCode_source_create('SOURCE');
                                $c_acteur->setCode_monde_create('MONDE');
                                $c_acteur->setCode_zone_create($code_zone);
                                $c_acteur->setId_pays($request->getParam("id_pays"));
                                $c_acteur->setId_region($request->getParam("id_region"));
                                $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                                $c_acteur->setCode_agence_create($request->getParam("id_canton"));
								$c_acteur->setId_prefecture($request->getParam("id_prefecture"));
                                $c_acteur->setId_canton($request->getParam("id_canton"));
								
								
                                if($param == 2) {
								  $c_acteur->setType_acteur('PBF');
								  if($id_type_acteur == 3) {
					                 $c_acteur->setCode_activite('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setCode_activite('GROSSISTE');
				                  }
								} else {
								  if($id_type_acteur == 3) {
					                 $c_acteur->setType_acteur('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setType_acteur('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setType_acteur('GROSSISTE');
				                  }
								  
								  if($id_type_creneau == 3) {
					                 $c_acteur->setCode_activite('DISTRIBUTION');
			                      } else if($id_type_creneau == 2) {
					                 $c_acteur->setCode_activite('TRANSFORMATION');
			                      } else if($id_type_creneau == 1) {
					                 $c_acteur->setCode_activite('PRODUCTION');
				                  }
								}
                                $c_acteur->setCode_gac_chaine($acteur);
                                $t_acteur->insert($c_acteur->toArray());
								
								// Mise à jour de la table eu_utilisateur
                                $user_mapper = new Application_Model_EuUtilisateurMapper();
                                $userin = new Application_Model_EuUtilisateur();
				                $trouveuser = false;
				                $code_type_acteur = $membremorale->getCode_type_acteur();
				
				                $finduser = $user_mapper->findByMembre($code,"personne_morale");
				                if($finduser != false) {
				                  $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				                }
								
								if($trouveuser) {
								   if($param == 2) {
								      if($id_type_acteur == 3) {
									     $userin->setCode_groupe('pbf_detaillant');
                                         $userin->setCode_gac_filiere('pbf_detaillant');
                                         $userin->setCode_groupe_create('pbf_detaillant');
									  } elseif($id_type_acteur == 2) {
									     $userin->setCode_groupe('pbf_semi_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_semi_grossiste');
									  } elseif($id_type_acteur == 1) {
									     $userin->setCode_groupe('pbf_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_grossiste');
									  }
								   
								   } else {
								   
								   
								   if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   }
								   elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
								   
								   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);
											  
		                        }
								
								// Mise à jour de la table eu_membre_morale
				                $membremorale->setId_filiere($id_filiere);
				                $m_mapmorale->update($membremorale);
								
								$params = new Application_Model_EuParametresMapper();
                                $par = new Application_Model_EuParametres();
                                $prc = 0;
                                $par_prc = $params->find('prc','nr',$par);
                                if($par_prc == true) {
                                   $prc = $par->getMontant();
                                }
											  
							    $te_mapper = new Application_Model_EuTegcMapper();
                                $te = new Application_Model_EuTegc();
								
								$prk = new Application_Model_EuPrk();
                                $m_prk = new Application_Model_EuPrkMapper();
								
                                //$code_te = 'TEGCP' .$id_filiere. $code;
							    $code_te = $te_mapper->getLastTegc();
			                    if($code_te == NULL) {
			                      $code_te = 'TEGCP'.$id_filiere.$code.'00001';         
			                    } else {
			                      $num_ordre = substr($code_te, -5);
                                  $num_ordre++;
                                  $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                    }
								
								$find_te = $te_mapper->find($code_te,$te);
                                if($find_te == false) {
								    $te->setCode_tegc($code_te);
			                        $te->setId_filiere($id_filiere);
			                        $te->setMdv(12);
			                        $te->setTranche_payement(1);
									$te->setCode_membre($code);
									$te->setCode_membre_physique(null);										
			                        $te->setMontant(0);
			                        $te->setMontant_utilise(0);
			                        $te->setSolde_tegc(0);
			                        $te->setId_utilisateur(NULL);
			                        $te->setNom_tegc($membremorale->raison_sociale);
			                        $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                        $te->setDate_tegc($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
					                $te->setType_tegc("DISTRIBUTEUR");
								    $te->setRecurrent_illimite(0);
							        $te->setRecurrent_limite(0);
								    $te->setNonrecurrent(1);
								    $te->setPeriode1(0);
									$te->setPeriode2(0);
								    $te->setPeriode3(0);
									$te->setFormel(0);
									$te->setRegime_tva(0);
									$te->setSpecial(1);
									$te->setOrdinaire(0);
									$te->setSubvention(0);
										
									$te->setCode_zone($code_zone);
				                    $te->setId_pays($request->getParam("id_pays"));
				                    $te->setId_region($request->getParam("id_region"));
				                    $te->setId_prefecture($request->getParam("id_prefecture"));
				                    $te->setId_canton($request->getParam("id_canton"));

                                    $te_mapper->save($te);

                                    $id_prk = $m_prk->findConuter() + 1;
					                $prk->setId_prk($id_prk);
					                $prk->setCode_tegc($code_te);
					                $prk->setValeur(null);
					                $m_prk->save($prk);
								
						        }
								
								$code_compte = 'NB-TPAGCP-'.$code;
				                $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                                }
				
				                $code_comptets = 'NB-TSGCP-'.$code;
				                $rests = $map_compte->find($code_comptets,$compte);
				
				                if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                                }
				
                                // Mise à jour de la table eu_contrat
				                $findcontrat = $map_contrat->findByMembre($code);
				                $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				                $contrat->setId_type_creneau($id_type_creneau);
				                $contrat->setId_type_acteur($id_type_acteur);
				                $map_contrat->update($contrat);
								
								
									
		
					    }
						//---  Fin de l'opération de mise sur chaine ---
						
						$nombre_compte = $request->getParam("souscription_nombre");
                        if($nombre_compte >= 100)   {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $a = new Application_Model_EuOffreurProjet();
                            $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					        //$compteur = $ma->findConuter() + 1;
					        $id_souscription = $compteur_souscription;
                                    
                            //$a->setOffreur_projet_id($compteur);
                              $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                              $a->setOffreur_projet_souscription($id_souscription);
                              $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					          $a->setOffreur_projet_code_membre($_POST['offreur_projet_membre']);
                              $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                              if(isset($_POST['offreur_projet_produit'])) {
                                $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						      } else {
						        $a->setOffreur_projet_produit(null);
						      }
                              $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					          if($offreur_type >= 4) {
	                            $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                              }
							
					          $a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                              $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                              $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                              $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                              $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                              $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                              $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                              $a->setOffreur_projet_membreasso(0);
                              $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                              $a->setOffreurProjetCanton($request->getParam("id_canton"));
                              $a->setOffreurProjetVille(null);
			                  $a->setPublier($_POST['publier']);
                              $ma->save($a);
							  
							  $compteur = $db->lastInsertId();
							  
							   ////////////////////////////////////////////////////////////////////////////
                              $offreur_projet = new Application_Model_EuOffreurProjet();
                              $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                              $offreur_projetM->find($compteur,$offreur_projet);
		
                              $offreur_projet->setPublier(1);
		                      $offreur_projetM->update($offreur_projet);
							
					          $id_offreur_projet = $offreur_projet->offreur_projet_id;
					          $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                              $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					          //$cpte = $m_detailoffreur->findConuter() + 1;
					          //$detailoffreur->setId_detail_offreur_projet($cpte);
							  
					          $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					          $detailoffreur->setSouscription_id($id_souscription);
					          $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					          $m_detailoffreur->save($detailoffreur);

                              /////////////////////////////////////////////////////////////////////////////////////////
					          $code_agence = "";
							  
							   ////////////////////////////////////////////////////////////////////////////
                              $offreur_projet = new Application_Model_EuOffreurProjet();
                              $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                              $offreur_projetM->find($compteur,$offreur_projet);
		
                              $offreur_projet->setPublier(1);
		                      $offreur_projetM->update($offreur_projet);
							
					          $id_offreur_projet = $offreur_projet->offreur_projet_id;
					          $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                              $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					          //$cpte = $m_detailoffreur->findConuter() + 1;
					          //$detailoffreur->setId_detail_offreur_projet($cpte);
							  
					          $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					          $detailoffreur->setSouscription_id($id_souscription);
					          $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					          $m_detailoffreur->save($detailoffreur);

                              /////////////////////////////////////////////////////////////////////////////////////////
					          $code_agence = "";
							  if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
					            $membreasso = new Application_Model_EuMembreasso();
                                $m_membreasso = new Application_Model_EuMembreassoMapper();
		                        $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);
			
                                $association = new Application_Model_EuAssociation();
                                $m_association = new Application_Model_EuAssociationMapper();
		                        $m_association->find($membreasso->membreasso_association, $association);
		                        $code_agence = $association->code_agence;
					          }
							  
							  // Création du compte utilisateur intégrateur
                              $souscription = new Application_Model_EuSouscription();
                              $m_souscription = new Application_Model_EuSouscriptionMapper();
		                      $m_souscription->find($id_souscription,$souscription);
							   
					          $date_id = Zend_Date::now();
                              $association = new Application_Model_EuAssociation();
                              $association_mapper = new Application_Model_EuAssociationMapper();

                              $login = "";
						      $password = "";

                              if($finddepot == NULL) {
                                //$compteur_association = $association_mapper->findConuter() + 1;
                                //$association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_raison);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);
								$compteur_association = $db->lastInsertId();
							   
							    $date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                  $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                  }
								    $password = $login.$login; 
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }
										  
										  $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                          $membreasso->setMembreasso_id($compteur_membreasso);
                                          $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                          $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                          $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                          $membreasso->setMembreasso_association($compteur_association);
                                          $membreasso->setMembreasso_email($souscription->souscription_email);
                                          $membreasso->setMembreasso_login($login);
                                          $membreasso->setMembreasso_passe($password);
                                          $membreasso->setMembreasso_type(1);
                                          $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                          $membreasso->setPublier(1);
								          $membreasso->setSouscription_id($souscription->souscription_id);
							              $membreasso->setIntegrateur_id(null);
                                          $membreasso_mapper->save($membreasso);
                                }
								
								$eusouscription = new Application_Model_EuSouscription();
		                               $souscriptionM = new Application_Model_EuSouscriptionMapper();
							   
							           $date = new Zend_Date();
		                               $compte_map  = new Application_Model_EuCompteMapper();
                                       $compte      = new Application_Model_EuCompte();
			                           $sms_money   = new Application_Model_EuSmsmoney();
                                       $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                           $det_sms   = new Application_Model_EuDetailSmsmoney();
			                           $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                           $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                           $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							           // insertion dans la table eu_depot_vente
				                       $m_dvente = new Application_Model_EuDepotVenteMapper();
				                       $dvente = new Application_Model_EuDepotVente();
									   
									   $membretierscode = new Application_Model_EuMembretierscode();
                                       $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();
							   
							           $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                               $membre_pbf = '0000000000000000001M';
	                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
			                           $ret = $compte_map->find($code_compte_pbf,$compte);
							
							           $souscriptionM->find($id_souscription,$eusouscription);
						               $mobile = $eusouscription->souscription_mobile;
							           $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
							           $nbre_compte = $eusouscription->souscription_nombre;
							           $montant = $nbre_compte * $fcaps;
									   
									   // Traitement des produits CAPS
                                       $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									   $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
									   
									   
									   //$countdvente = $m_dvente->findConuter() + 1;
				                           //$dvente->setId_depot($countdvente)
										   
					                       $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                           $dvente->setCode_membre($_POST['offreur_projet_membre']);   
			                               $dvente->setCode_produit('CAPS');
				                           $dvente->setMont_depot($montant);
				                           $dvente->setMont_vendu(0);
				                           $dvente->setSolde_depot($montant);
				                           $dvente->setId_utilisateur(null);
				                           $dvente->setType_depot('AvecListe');
				                           $dvente->setSouscription_id($id_souscription);
				                           $m_dvente->save($dvente);
										   
										   for($i = 0; $i < $nbre_compte; $i++) {
										     $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
											 $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
											 $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                             $membretierscode->setMembretierscode_membretiers(0);
                                             $membretierscode->setMembretierscode_code($membretierscode_code);
                                             $membretierscode->setMembretierscode_souscription($id_souscription);
                                             $membretierscode->setPublier(0);
                                             $membretierscode->setCode_membre(NULL);
											 $membretierscode->setAllocation_cmfh_id(NULL);
                                             $membretierscode_mapper->save($membretierscode);
										   }
										   
										   //$compteur_sms = Util_Utils::findConuter() + 1;
				                           Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');
						
						
						}   else {
						    $db->rollback();
	                        $this->view->param = $param;
							$this->view->code_membre = $request->getParam("offreur_projet_membre");
							$sessionmembreasso->error = 'Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...';
						    return;
						}
						
						$db->commit();
						if($finddepot == NULL) {
                            $sessionmembreasso->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace intégrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
		                } else {
						    $sessionmembreasso->error = "Opération bien effectuée ...";
						}
						$this->_redirect('/index/addacteurpre/param_int/'.$param);
						
					}
			    } catch(Exception $exc) {
		                $db->rollback();
	                    $this->view->param = $param;
			            $this->view->souscription_montant = $souscription_montant;
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        return;
                }
			} else  {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
                $sessionmembreasso->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}
			
			
			
			
		}
	
	
	
	}
	
	


	
	public  function addoffreurprojetAction()  {
	    /* page administration/addoffreurprojet - Ajout d'un offreurprojet */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	   
 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
        $typeoffreurM->find($param,$typeoffreur);
	   
	    $this->view->param = $param;
	    $this->view->souscription_montant = $typeoffreur->montant_param;
	   
	    if($request->isPost()) {
	        $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {  
                if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			    && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			    && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot'] !=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
                    
                    $param = (int) $this->_request->getParam('param');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

				    $membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();

                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
				   
				    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($param,$typeoffreur);
				   
				    $m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
							 

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
				   
				    $souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
				    $statut = $request->getParam("liste");
					
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPS','valeur');
					$bnpnmps  = Util_Utils::getParametre('BNPNMPS','valeur');
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $souscription_montant/$mont_msbcm;							
						}   						
					}

					
				    $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
				    if($findmembre == false) {
					  $db->rollback();
	                  $this->view->param = $param;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					  return;
				    }
					
					if($membremorale->desactiver == 1) {
					    $db->rollback();
	                    $this->view->param = $param;	
						$this->view->souscription_montant = $souscription_montant;
					    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$request->getParam("offreur_projet_membre")."  n'est pas autorisé à effectuer cette opération ...";
					    return;
					}

				    $souscription_type_candidat= $request->getParam("souscription_type_candidat");
				    if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					  $db->rollback();
					  $this->view->param = $param;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...";
					  return;
				    }
				   
				    if($typeoffreur->montant_param >  $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				    }
					
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					   $this->view->souscription_montant = $souscription_montant;
				       $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
				    $offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';
				   
				    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
				   
				   if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
				        $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					   
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   //$this->view->code_membre = $request->getParam("offreur_projet_membre");
						   $this->view->souscription_montant = $souscription_montant;
                           $this->view->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if((trim($offreur_membre) != trim($offreur_code_membre))) {
						    $db->rollback();
	                        $this->view->param = $param;
							//$this->view->code_membre = $request->getParam("offreur_projet_membre");
						    $this->view->souscription_montant = $souscription_montant;
                            $this->view->error = "Le code membre du souscripteur  doit être celui du bon neutre ...".$offreur_code_membre;
                            return;   
					    }
					   
					   
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
					    while($reste > 0 && $i < $nbre_lignesdetbon) {
                          $lignedetbon = $lignesdetbon[$i];
                          $id = $lignedetbon->getBon_neutre_detail_id();
						  $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						  if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                               $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                               $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                               $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                               foreach($appro_detail as $appro) {
							      $bnad = new Application_Model_EuBonNeutreApproDetail();
                                  $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                  if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                  } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                  }
										 
                                }
									   
							}
						  
						    //Mise à jour  des lignes d'enrégistrement
						    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                ->setBon_neutre_detail_montant_solde(0);
                            $bon_neutre_detailM->update($lignedetbon);
						  
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
					    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						  } else {
						      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                   $appro_montant_solde = $reste;
                                   foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                     }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
					    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						        $reste = 0;
						  }
                          $i++;						
				       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					    $bon_neutre2M->update($bon_neutre2);
						  
					    /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
					   
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			             $souscription_ok = 1;
			             $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			             $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $this->view->error = "Login déjà existant ...";
						  return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $this->view->error = "Mot de passe incorret ...";
						  return;
	                    }
					   
					   $date_id = Zend_Date::now();
					   $souscription = new Application_Model_EuSouscription();
                       $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                       //$compteur_souscription = $souscription_mapper->findConuter() + 1;
					   //$souscription->setSouscription_id($compteur_souscription);
						
					   $souscription->setSouscription_raison($membremorale->raison_sociale);
                       $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                       $souscription->setCode_statut($membremorale->code_statut);
					   $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					   $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						
					   $souscription->setSouscription_type("BAn");
                       $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                       $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                       $souscription->setSouscription_banque(null);
						
					   $souscription->setSouscription_montant($souscription_montant);
                       $souscription->setSouscription_nombre(null);
                       $souscription->setSouscription_programme("CMFH");
                       $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					   $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                       $souscription->setSouscription_vignette(null);
						
					   $souscription->setCode_activite(null);
                       $souscription->setId_metier(null);
                       $souscription->setId_competence(null);
					   $souscription->setSouscription_ville($membremorale->ville_membre);
					   $souscription->setSouscription_quartier($membremorale->quartier_membre);
					   
					   //$m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                       //$souscription->setSouscription_ville($ville->lib_ville);
						
					    $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						
						
					   ///////////////////////////////////////////// validation acnev //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(1);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
						
					   ///////////////////////////////////////////// validation filiere //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(2);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
					   ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(3);
					   $souscriptionM->update($souscription);

					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
					   
					   // --- Faire la demande de configuration ----///////
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $date_idd = clone $date_id;
					   $demande   = new Application_Model_EuDemandeConfigte();
                       $m_demande = new Application_Model_EuDemandeConfigteMapper();
					   $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					    if($finddemande == false) {
					      $compteur_demande = $m_demande->findConuter() + 1;
			              $demande->setId_demande($compteur_demande);
                          $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                          $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			              $demande->setValider(3);
			              $demande->setId_canton($request->getParam("id_canton"));
			              $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $demande->setProduit_special(1);
						  $demande->setProduit_ordinaire(0);
			              $m_demande->save($demande);
					    }
					   
					    //--- Début de l'opération de mise sur chaine ---
					    $code = $_POST['offreur_projet_membre'];
					    $code_zone = $request->getParam("code_zone");
					    $id_filiere = "";
					    if(isset($_POST['offreur_projet_filiere'])) {
					        $id_filiere = $_POST['offreur_projet_filiere'];
					    }
					    $code_agence = substr($code,0,12);
				        $table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur  =  $code_acteur;
					   
					   
					    //script de creation de TE des vendeurs ou offreurs de projet
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
							   	   
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
					    $code_te = "";
						$code_tegc = "";
							   
					    $nom_tegc = $membremorale->raison_sociale;
							   
						$eutegc = new Application_Model_DbTable_EuTegc();
                        $select = $eutegc->select();
					    $select->where("code_membre like ? ", $code);
                        $rowseutegc = $eutegc->fetchAll($select);
						
                        /*						
						if(count($rowseutegc) <= 0)  {
							$code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
								  
						    $te->setCode_tegc($code_te);
			                $te->setId_filiere($id_filiere);
			                $te->setMdv(12);
			                $te->setTranche_payement(1);
			                $te->setCode_membre($code);
                            $te->setCode_membre_physique(null);								  
			                $te->setMontant(0);
			                $te->setMontant_utilise(0);
			                $te->setSolde_tegc(0);
			                $te->setId_utilisateur(NULL);
			                $te->setNom_tegc($nom_tegc);
			                $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $te->setType_tegc("DISTRIBUTEUR");
						    $te->setRecurrent_illimite(0);
						    $te->setRecurrent_limite(0);
						    $te->setNonrecurrent(1);
						    $te->setPeriode1(0);
						    $te->setPeriode2(0);
							$te->setPeriode3(0);
							$te->setFormel(0);
						    $te->setRegime_tva(0);
						    $te->setSpecial(0);
						    $te->setOrdinaire(0);
							$te->setSubvention(0);
										
							$te->setCode_zone($request->getParam("code_zone"));
				            $te->setId_pays($request->getParam("id_pays"));
				            $te->setId_region($request->getParam("id_region"));
				            $te->setId_prefecture($request->getParam("id_prefecture"));
				            $te->setId_canton($request->getParam("id_canton"));

                            $m_te->save($te);

                            //$id_prk = $m_prk->findConuter() + 1;
					        //$prk->setId_prk($id_prk);
					        $prk->setCode_tegc($code_te);
					        $prk->setValeur(null);
					        $m_prk->save($prk);
								   
					    }
							   
					    $code_compte = 'NB-TPAGCP-'.$code;
				        $res = $map_compte->find($code_compte,$compte);
				
				        if(!$res) {
                            $compte->setCode_cat('TPAGCP')
                                   ->setCode_compte($code_compte)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TPAGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						*/
				
				        $code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
							   
					    // Fin script de creation des TE vendeurs ou offreurs de projet
					   
					    /*$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
					        if(($param == 1) || ($param == 4) || ($param == 7)) {
						      $id_type_acteur = 1;
						    }		   
						    if(($param == 2) || ($param == 5) || ($param == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($param == 3) || ($param == 6) || ($param == 9)) {
						      $id_type_acteur = 3;
						    }
						    if(($param == 1) || ($param == 2) || ($param == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($param == 4) || ($param == 5) || ($param == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($param == 7) || ($param == 8) || ($param == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
								 
						    // Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
                            $c_acteur->setType_acteur(null);
                    
                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());
								
								
						    // Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if($trouveuser) {
							       if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } 
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);			  
		                       }
							   
							   // Mise à jour de la table eu_membre_morale
				               $membremorale->setId_filiere($id_filiere);
				               $m_mapmorale->update($membremorale);
					           
							   //script de creation de TE des vendeurs ou offreurs de projet
							   $prk = new Application_Model_EuPrk();
                               $m_prk = new Application_Model_EuPrkMapper();
							   	   
                               $te   = new Application_Model_EuTegc();
							   $m_te = new Application_Model_EuTegcMapper();
							   $code_te = "";
							   
							   $nom_tegc = $membremorale->raison_sociale;
							   
							   $eutegc = new Application_Model_DbTable_EuTegc();
                               $select = $eutegc->select();
							   $select->where("code_membre like ? ", $code);
                               $rowseutegc = $eutegc->fetchAll($select);
							   
							   if(count($rowseutegc) <= 0)  {
							      $code_te = $m_te->getLastTegcByMembre($code);
								  if($code_te == NULL) {
			                         $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                      } else {
			                         $num_ordre = substr($code_te, -5);
                                     $num_ordre++;
                                     $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
								  
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere($id_filiere);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
			                      $te->setCode_membre($code);
                                  $te->setCode_membre_physique(null);								  
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("DISTRIBUTEUR");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($request->getParam("code_zone"));
				                  $te->setId_pays($request->getParam("id_pays"));
				                  $te->setId_region($request->getParam("id_region"));
				                  $te->setId_prefecture($request->getParam("id_prefecture"));
				                  $te->setId_canton($request->getParam("id_canton"));

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(null);
					              $m_prk->save($prk);
								   
							   }
							   
							   $code_compte = 'NB-TPAGCP-'.$code;
				               $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
				
				               $code_comptets = 'NB-TSGCP-'.$code;
				               $rests = $map_compte->find($code_comptets,$compte);
				
				               if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
							   
							   // Fin script de creation des TE vendeurs ou offreurs de projet
				
                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);
					   }
					   */
					   //---  Fin de l'opération de mise sur chaine ---
					   
					   // Mise à jour du type de fournisseur
					   //$membremoral = new Application_Model_EuMembreMorale();
	                   //$m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					   //$trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				       //$membremoral->setType_fournisseur($_POST['type_fournisseur']);
				       //$m_mapmoral->update($membremoral);
					   
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
                                    
                        //$a->setOffreur_projet_id($compteur);
                        $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                        $a->setOffreur_projet_adresse($request->getParam("offreur_projet_quartier"));
					    if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
					   
                        $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					    if($param >= 4) {
	                      $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                        $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                        $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($request->getParam("id_canton"));
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    if(isset($_POST['type_fournisseur'])) {
					        $a->setOffreurProjetFournisseur($request->getParam("type_fournisseur"));
						} else {
							$a->setOffreurProjetFournisseur(null);
						}
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
							  
							  
					   ////////////////////////////////////////////////////////////////////////////
                       $offreur_projet = new Application_Model_EuOffreurProjet();
                       $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                       $offreur_projetM->find($compteur,$offreur_projet);
		
                       $offreur_projet->setPublier(1);
		               $offreur_projetM->update($offreur_projet);
							
					   $id_offreur_projet = $offreur_projet->offreur_projet_id;
					   $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                       $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					   //$cpte = $m_detailoffreur->findConuter() + 1;
					   //$detailoffreur->setId_detail_offreur_projet($cpte);
					   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					   $detailoffreur->setSouscription_id($id_souscription);
					   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					   $m_detailoffreur->save($detailoffreur);
							  
					    /////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    // Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";
							  
					    if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                  $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                  }
								    $password = $login.$login; 
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }
										  
								//$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                //$membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id(null);
                                $membreasso_mapper->save($membreasso);
                        }
								  
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						//$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						$mstiers->setType_souscription($type_souscription);
						
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("CMFH");
                        $m_mstiers->save($mstiers);
						$id_mstiers = $db->lastInsertId();
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;
						$montant = $souscription_montant;
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						  $code_tegc   = $request->getParam("code_te");   
						} else {
						  //$eutegc = new Application_Model_DbTable_EuTegc();
                          //$select = $eutegc->select();
						  //$select->where("code_membre like ? ",$code);
                          //$select->limit(1);
                          //$rowseutegc = $eutegc->fetchRow($select);
                          //$code_tegc = $rowseutegc->code_tegc;
						  
						    $code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
						  
						    $code_tegc = $code_te;
						}
						
						$code_banque = "";
						$referencepaie = "";
						
						if($type_souscription != "BPS")  {
						    $code_banque = $request->getParam("code_banque");
						    $referencepaie   = $request->getParam("num_compte");
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 30000000,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "POST",
								CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
							
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
						        //$db->commit();
							    //if($finddepot == NULL && $findmstiers == NULL) {
							    //$sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						        //} else {
							    //$sessionmembreasso->error = "Operation bien effectuee ...".$response->message;
							    //}
							    //$this->_redirect('/integrateur/addoffreurprojet/param/'.$_POST['offreur_projet_type']);

                                $db->commit();
						        $sessionmembreasso->error = $response->message;
							    $this->_redirect('/integrateur/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
							
						    } else {
							    $db->rollback();
							    $this->view->param = $param;
						        //$this->view->code_membre = $request->getParam("offreur_projet_membre");
				                $this->view->souscription_montant = $souscription_montant;
                                $sessionmembreasso->error = $response->message;
                                return;
							    //$sessionmembreasso->error = "Echec operation ...".$response->resultat;
						    }

						}   else  {
						    //$id_bps_souscription = $m_bpssouscription->findConuter() + 1;
						    //$bpssouscription->setId_bps_souscription($id_bps_souscription);
							
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($souscription_montant);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmembreasso->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmembreasso->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/integrateur/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
						}						
				    }

            } else  {
			    $this->view->param = $param;
				//$this->view->code_membre = $request->getParam("offreur_projet_membre");
				$this->view->souscription_montant = $souscription_montant;
                $sessionmembreasso->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}					   
	   
	    } catch (Exception $exc) {
		    $db->rollback();
	        $this->view->param = $param;
			//$this->view->code_membre = $request->getParam("offreur_projet_membre");
			$this->view->souscription_montant = $souscription_montant;
            $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            return;
        }
	   
	   }
	   
	
	}


	public function addoffreurprojetpreAction()   {
	       /* page integrateur/addoffreurprojet - Ajout d'une offreurprojet */
	       $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	       //$this->_helper->layout->disableLayout();
 	       $this->_helper->layout()->setLayout('layoutpublicesmcint');
	       if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

               //$date_idold = new Zend_Date(Zend_Date::ISO_8601);
               //$date_iddold = clone $date_idold;
            
               //if(($date_iddold->toString('yyyy-MM-dd') > "2018-01-31") && ($sessionmembreasso->membreasso_association != 1))  {
               //$this->_redirect('/integrateur/addsouscriptionban/paramban/1');
               //}


 		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville = new Application_Model_EuVilleMapper();
		   $ville = new Application_Model_EuVille();
		   $m_filiere = new Application_Model_EuFiliereMapper();
		   $t_region = new Application_Model_DbTable_EuRegion();
           $t_prefecture = new Application_Model_DbTable_EuPrefecture();
           $t_pays = new Application_Model_DbTable_EuPays();
           $t_zone = new Application_Model_DbTable_EuZone();

           $cantons = $t_canton->fetchAll();
		   $regions = $t_region->fetchAll();
           $pays = $t_pays->fetchAll();
           $zones = $t_zone->fetchAll();
           $prefectures = $t_prefecture->fetchAll();
           $villes = $m_ville->fetchAll();
		   $filieres = $m_filiere->fetchAll();

		   $this->view->regions = $regions;
           $this->view->zones = $zones;
           $this->view->pays = $pays;
           $this->view->prefectures = $prefectures;
           $this->view->cantons = $cantons;
           $this->view->villes = $villes;
		   $this->view->filieres = $filieres;
		   $request = $this->getRequest();

		   if ($request->isPost ()) {
		       $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction();
			   try  {
			        if (isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
			           && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			           && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			           && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			           && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			           && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!=""
			           && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {

		                  $param = (int)$this->_request->getParam('param');
						  $id_utilisateur_acnev = 1;
                          $id_utilisateur_filiere = 2;
                          $id_utilisateur_technopole = 3;

						  $membremorale = new Application_Model_EuMembreMorale();
	                      $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                          $compte = new Application_Model_EuCompte();
                          $map_compte = new Application_Model_EuCompteMapper();

			              $contrat = new Application_Model_EuContrat();
                          $map_contrat = new Application_Model_EuContratMapper();

						  $m_depotvente = new Application_Model_EuDepotVenteMapper();
				          $depotvente = new Application_Model_EuDepotVente();

						  $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));

						  $date_id = Zend_Date::now();

						  $bon_neutre = new Application_Model_EuBonNeutre();
                          $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

						  $id_type_acteur = "";
			              $id_type_creneau = "";

						  $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					      if($findmembre == false) {
					         $db->rollback();
	                         $this->view->param = $param;
						     $this->view->souscription_email  = $_POST['souscription_email'];
						     $this->view->code_membre = $_POST['offreur_projet_membre'];
					         $sessionmembreasso->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					         return;
					      }

						  $souscription_type_candidat= $request->getParam("souscription_type_candidat");
						  if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					         $db->rollback();
					         $this->view->param = $param;
					         $this->view->souscription_email = $_POST['souscription_email'];
					         $this->view->code_membre = $_POST['offreur_projet_membre'];
					         $sessionmembreasso->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de Bien,Produit et Service ...";
						     return;
					      }

						  $offreur_membre = $request->getParam("offreur_projet_membre");
						  $offreur_code_membre = '';
						  $souscription_nombre  = $request->getParam("souscription_nombre");
						  $montant_souscription = $souscription_nombre * 2187.5;

                          $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
						  if(count($bon_neutre) == 0) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_email  = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
					        $sessionmembreasso->error = "Votre Code BAn  incorrect ...";
					        return;
						  }
						  
						  if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_email  = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            return;
						  }

						  if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {

							$bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;

					        $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    //$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                            //$cumulbon = trim($bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id));
							//$cumulbon = trim($bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id));

						
                                //$cumulbon = trim($bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id));
							
                            $cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);

						    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
						        $db->rollback();
	                            $this->view->param = $param;
						        $this->view->souscription_email  = $request->getParam("souscription_email");
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $sessionmembreasso->error = "Montant restant du BAn est insuffisant  ... ".$cumulbon;
                                return;
						    }

						    if(($offreur_membre != $offreur_code_membre)) {
						       $db->rollback();
	                           $this->view->param = $param;
						       $this->view->souscription_email  = $request->getParam("souscription_email");
						       $this->view->code_membre = $request->getParam("offreur_projet_membre");
                               $sessionmembreasso->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                               return;
						    }

							////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $montant_souscription;
					        $nbre_lignesdetbon = count($lignesdetbon);
                            while($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
									
									if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }  
									}
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);

						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						     //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
							$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);

                                 } else {
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);
						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						     //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
							$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);

						            $reste = 0;
                                 }
                                 $i++;
                             }

						     ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						     $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						     $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						     //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
						     $bon_neutre2M->update($bon_neutre2);

						     /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						     //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/

						    /*
						    if($bon_neutre->bon_neutre_montant_solde  <  $montant_souscription ) {
						      $db->rollback();
	                          $this->view->param = $param;
						      $this->view->souscription_email  = $request->getParam("souscription_email");
						      $this->view->code_membre = $request->getParam("offreur_projet_membre");
					          $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
					          return;
						    }

							$bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

						    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						    $bon_neutre2M->update($bon_neutre2);

						    $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						    $compteur_bon_neutre_detail = $bon_neutre_detailM->findConuter() + 1;
						    $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
						    $bon_neutre_detail->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						      $bon_neutre_detail->setBon_neutre_detail_type("PP");
						    } else {
						      $bon_neutre_detail->setBon_neutre_detail_type("PM");
						    }
						    $bon_neutre_detail->setBon_neutre_detail_libelle("CMFH");
						    $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_detail->setBon_neutre_detail_montant($montant_souscription);
						    $bon_neutre_detailM->save($bon_neutre_detail);
							*/
							
							
							$eusouscription = new Application_Model_DbTable_EuSouscription();
						    $select = $eusouscription->select();

                         $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						 $select->order(array("souscription_id ASC"));
	                     $select->limit(1);
	                     $rowseusouscription = $eusouscription->fetchRow($select);
		                 if(count($rowseusouscription) > 0) {
			               $souscription_ok = 1;
			               $souscription_first = $rowseusouscription->souscription_id;
			             } else {
			               $souscription_ok = 0;
			             }


                         $eusouscription = new Application_Model_DbTable_EuSouscription();
	                     $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));

                         if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_email = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Login déjà existant ...";
							return;
	                     }  else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_email = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmembreasso->error = "Mot de passe incorret ...";
							return;
	                     }

                         $date_id = Zend_Date::now();
						 $souscription = new Application_Model_EuSouscription();
                         $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                         //$compteur_souscription = $souscription_mapper->findConuter() + 1;
						 //$souscription->setSouscription_id($compteur_souscription);

						 $souscription->setSouscription_raison($membremorale->raison_sociale);
                         $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                         $souscription->setCode_statut($membremorale->code_statut);
						 $souscription->setSouscription_mobile($membremorale->portable_membre);

						 $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

						 $souscription->setSouscription_type("BAn");
                         $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                         $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                         $souscription->setSouscription_banque(null);

						 $souscription->setSouscription_montant($montant_souscription);
                         $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                         $souscription->setSouscription_programme("CMFH");
                         $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));

						 $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $souscription->setSouscription_vignette(null);

						 $souscription->setCode_activite(null);
                         $souscription->setId_metier(null);
                         $souscription->setId_competence(null);
						 $m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                         $souscription->setSouscription_ville($ville->lib_ville);

						 $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));

					     if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						 } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                         }

						 if($souscription_ok == 1) {
                           $souscription->setSouscription_souscription($souscription_first);
				         } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					     }

						 $souscription->setSouscription_autonome(0);
			             $souscription->setPublier(0);
					     $souscription->setErreur(0);
					     $souscription->setId_canton($request->getParam("id_canton"));
                         $souscription_mapper->save($souscription);
						 
						 $compteur_souscription = $db->lastInsertId();

                         ///////////////////////////////////////////// validation acnev //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);

					         $souscription->setPublier(1);
						     $souscriptionM->update($souscription);

						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);


						     ///////////////////////////////////////////// validation filiere //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);

						     $souscription->setPublier(2);
						     $souscriptionM->update($souscription);

						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						     //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);

						     ///////////////////////////////////////////// validation technopole //////////////////////////////////

						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);

						     $souscription->setPublier(3);
						     $souscriptionM->update($souscription);

						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);


/*
//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1) {
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($membreasso->membreasso_association, $association);
        $code_agence = $association->code_agence;

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
           } else {
             $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
             } else {
               $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
             }
        }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}
*/





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

						      //--- Début de l'opération de mise sur chaine ---

						     $date_id = new Zend_Date(Zend_Date::ISO_8601);
                             $date_idd = clone $date_id;
						     $code = $_POST['offreur_projet_membre'];
							 $code_zone = $request->getParam("code_zone");
						     $id_filiere = $_POST['offreur_projet_filiere'];
						     $code_agence = substr($code,0,12);
				             $table = new Application_Model_DbTable_EuActeur();
							 $model_acteur = new Application_Model_EuActeur();
							 $mapper_acteur = new Application_Model_EuActeurMapper();
                             $selection = $table->select();
                             $selection->where('code_membre like ?',$code_agence.'%');
                             $selection->where('type_acteur like ?','gac_surveillance');
                             $resultat = $table->fetchAll($selection);
                             $trouvacteursur = $resultat->current();
                             $code_acteur = $trouvacteursur->code_acteur;
                             $acteur  =  $code_acteur;

							 $findacteur = $mapper_acteur->findByActeur($code);
							 if($findacteur == false) {

								  if(($param == 1) || ($param == 4) || ($param == 7)) {
						            $id_type_acteur = 1;
						          }

						          if(($param == 2) || ($param == 5) || ($param == 8)) {
						            $id_type_acteur = 2;
						          }

						          if(($param == 3) || ($param == 6) || ($param == 9)) {
						            $id_type_acteur = 3;
						          }

						          if(($param == 1) || ($param == 2) || ($param == 3)) {
						            $id_type_creneau = 3;
						          }

						          if(($param == 4) || ($param == 5) || ($param == 6)) {
						            $id_type_creneau = 2;
						          }

						          if(($param == 7) || ($param == 8) || ($param == 9)) {
						            $id_type_creneau = 1;
						          }

								 // insertion dans la table eu_acteur_creneau
								 $cm  = new Application_Model_EuActeurCreneauMapper();
                                 $acren = new Application_Model_EuActeurCreneau();

								 $rep_mapper = new Application_Model_EuRepresentationMapper();
				                 $rep = $rep_mapper->findbyrep($code);

						         $acren->setNom_acteur($membremorale->getRaison_sociale());
                                 $acren->setCode_membre($code);
                                 $acren->setId_type_acteur($id_type_acteur);

                                 $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                                 $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                                 $acren->setId_utilisateur(null);
                                 $acren->setGroupe(null);
                                 $acren->setCode_creneau(NULL);
                                 $acren->setCode_gac_filiere(NULL);
                                 $acren->setCode_gac(NULL);

								 $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                                 if ($code_acteur == NULL) {
                                    $code_acteur = 'A' . $code_zone . '0001';
                                 } else {
                                    $num_ordre = substr($code_acteur, -4);
                                    $num_ordre++;
                                    $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                                 }

                                 $acren->setCode_acteur($code_acteur);
                                 $acren->setId_filiere($id_filiere);
                                 $cm->save($acren);

						         // Insertion dans la table eu_acteur
				                 $t_acteur = new Application_Model_DbTable_EuActeur();
				                 $c_acteur = new Application_Model_EuActeur();
								 $count = $c_acteur->findConuter() + 1;

								 // Mise à jour des tables
				                 $filiere =  new Application_Model_EuFiliere();
                                 $map_filiere = new Application_Model_EuFiliereMapper();
                                 $find_filiere = $map_filiere->find($id_filiere,$filiere);

								 $c_acteur->setId_acteur($count)
                                          ->setCode_acteur(NULL)
                                          ->setCode_division($filiere->getCode_division())
                                          ->setCode_membre($code)
                                          ->setId_utilisateur(NULL)
                                          ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				                if($id_type_acteur == 3) {
					              $c_acteur->setCode_activite('DETAILLANT');
			                    } else if($id_type_acteur == 2) {
					              $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                    } else if($id_type_acteur == 1) {
					              $c_acteur->setCode_activite('GROSSISTE');
				                }

			                    $c_acteur->setCode_source_create('SOURCE');
                                $c_acteur->setCode_monde_create('MONDE');
                                $c_acteur->setCode_zone_create($code_zone);
                                $c_acteur->setId_pays($request->getParam("id_pays"));
                                $c_acteur->setId_region($request->getParam("id_region"));
								$c_acteur->setId_prefecture($request->getParam("id_prefecture"));
								$c_acteur->setId_canton($request->getParam("id_canton"));
                                $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                                $c_acteur->setCode_agence_create($request->getParam("id_canton"));
                                if($id_filiere == 4) {
								  $c_acteur->setType_acteur('PBF');
								} else {
								  $c_acteur->setType_acteur(NULL);
								}

                                $c_acteur->setCode_gac_chaine($acteur);
                                $t_acteur->insert($c_acteur->toArray());

							    // Mise à jour de la table eu_utilisateur
                                $user_mapper = new Application_Model_EuUtilisateurMapper();
                                $userin = new Application_Model_EuUtilisateur();
				                $trouveuser = false;
				                $code_type_acteur = $membremorale->getCode_type_acteur();

				                $finduser = $user_mapper->findByMembre($code,"personne_morale");
				                if($finduser != false) {
				                  $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				                }

								if($trouveuser) {
							       if($id_filiere == 4) {
								      if($id_type_acteur == 3) {
									     $userin->setCode_groupe('pbf_detaillant');
                                         $userin->setCode_gac_filiere('pbf_detaillant');
                                         $userin->setCode_groupe_create('pbf_detaillant');
									  } elseif($id_type_acteur == 2) {
									     $userin->setCode_groupe('pbf_semi_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_semi_grossiste');
									  } elseif($id_type_acteur == 1) {
									     $userin->setCode_groupe('pbf_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_grossiste');
									  }
								   
								   } else {
								   
								   
								   if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   }
								   elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
								   
								   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);

		                       }

					           // Mise à jour de la table eu_membre_morale
				               $membremorale->setId_filiere($id_filiere);
				               $m_mapmorale->update($membremorale);

						       // Recuperation de la PRK nr
							   /*
                               $params = new Application_Model_EuParametresMapper();
                               $par = new Application_Model_EuParametres();
                               $prc = 0;
                               $par_prc = $params->find('prc','nr',$par);
                               if ($par_prc == true) {
                                  $prc = $par->getMontant();
                               }

							   $te_mapper = new Application_Model_EuTegcMapper();
                               $te = new Application_Model_EuTegc();
                               //$code_te = 'TEGCP' .$id_filiere. $code;
							   $code_te = $te_mapper->getLastTegc();
			                   if ($code_te == NULL) {
			                      $code_te = 'TEGCP'.$id_filiere.$code.'00001';
			                   } else {
			                      $num_ordre = substr($code_te, -5);
                                  $num_ordre++;
                                  $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);
			                   }

                               $find_te = $te_mapper->find($code_te,$te);
                               if ($find_te == false) {
                                  $te->setCode_tegc($code_te)
                                     ->setId_filiere($id_filiere)
                                     ->setMdv($prc)
									 ->setNom_tegc($membremorale->raison_sociale)
                                     ->setCode_membre($code)
                                     ->setMontant(0)
                                     ->setMontant_utilise(0)
                                     ->setSolde_tegc(0);
                                  $te_mapper->save($te);
                               } else {
                                  $te->setId_filiere($id_filiere);
                                  $te->setMdv($prc);
                                  $te_mapper->update($te);
                               }
							   
							   */

				               $code_compte = 'NB-TPAGCP-'.$code;
				               $res = $map_compte->find($code_compte,$compte);

				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte);
                               }

				               $code_comptets = 'NB-TSGCP-'.$code;
				               $rests = $map_compte->find($code_comptets,$compte);

				               if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte);
                               }

                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);
						}

                        //---  Fin de l'opération de mise sur chaine ---

						   //Mise à jour du type de fournisseur
						    $membremoral = new Application_Model_EuMembreMorale();
	                        $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
						    $trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				            $membremoral->setType_fournisseur($_POST['type_fournisseur']);
				            $m_mapmoral->update($membremoral);

						    $nombre_compte = $request->getParam("souscription_nombre");
                            if($nombre_compte >= 100)   {
						      $date_id = new Zend_Date(Zend_Date::ISO_8601);
                              $a = new Application_Model_EuOffreurProjet();
                              $ma = new Application_Model_EuOffreurProjetMapper();

					          //$compteur = $ma->findConuter() + 1;
					          $id_souscription = $compteur_souscription;

                              $a->setOffreur_projet_id($compteur);
                              $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                              $a->setOffreur_projet_souscription($id_souscription);
                              $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					          $a->setOffreur_projet_code_membre($_POST['offreur_projet_membre']);
                              $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                              $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
                              $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					          if($param >= 4) {
	                            $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                              }

					          $a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                              $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                              $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                              $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                              $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                              $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                              $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                              $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);
                              $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                              $a->setOffreurProjetCanton($request->getParam("id_canton"));
                              $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			                  $a->setPublier($_POST['publier']);
                              $ma->save($a);

                              $compteur = $db->lastInsertId();
							  ////////////////////////////////////////////////////////////////////////////
                              $offreur_projet = new Application_Model_EuOffreurProjet();
                              $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                              $offreur_projetM->find($compteur,$offreur_projet);

                              $offreur_projet->setPublier(1);
		                      $offreur_projetM->update($offreur_projet);

					          $id_offreur_projet = $offreur_projet->offreur_projet_id;
					          $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                              $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();

					          //$cpte = $m_detailoffreur->findConuter() + 1;
					          //$detailoffreur->setId_detail_offreur_projet($cpte);
							  
					          $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					          $detailoffreur->setSouscription_id($id_souscription);
					          $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					          $m_detailoffreur->save($detailoffreur);

                              /////////////////////////////////////////////////////////////////////////////////////////
					          $code_agence = "";

							  if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
					            $membreasso = new Application_Model_EuMembreasso();
                                $m_membreasso = new Application_Model_EuMembreassoMapper();
		                        $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);

                                $association = new Application_Model_EuAssociation();
                                $m_association = new Application_Model_EuAssociationMapper();
		                        $m_association->find($membreasso->membreasso_association, $association);
		                        $code_agence = $association->code_agence;
					          }

							  // Création du compte utilisateur intégrateur
                              $souscription = new Application_Model_EuSouscription();
                              $m_souscription = new Application_Model_EuSouscriptionMapper();
		                      $m_souscription->find($id_souscription,$souscription);

					          $date_id = Zend_Date::now();
                              $association = new Application_Model_EuAssociation();
                              $association_mapper = new Application_Model_EuAssociationMapper();

                              $login = "";
						      $password = "";

							  if($finddepot == NULL) {
                                //$compteur_association = $association_mapper->findConuter() + 1;
                                //$association->setAssociation_id($compteur_association);
								
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_raison);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);
								$compteur_association = $db->lastInsertId();

							    $date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();

								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)];
                                  }
								    $password = $login.$login;
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }

										  //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                          //$membreasso->setMembreasso_id($compteur_membreasso);
                                          $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                          $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                          $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                          $membreasso->setMembreasso_association($compteur_association);
                                          $membreasso->setMembreasso_email($souscription->souscription_email);
                                          $membreasso->setMembreasso_login($login);
                                          $membreasso->setMembreasso_passe($password);
                                          $membreasso->setMembreasso_type(1);
                                          $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                          $membreasso->setPublier(1);
								          $membreasso->setSouscription_id($souscription->souscription_id);
							              $membreasso->setIntegrateur_id(null);
                                          $membreasso_mapper->save($membreasso);
                                  }

									   $eusouscription = new Application_Model_EuSouscription();
		                               $souscriptionM = new Application_Model_EuSouscriptionMapper();

							           $date = new Zend_Date();
		                               $compte_map  = new Application_Model_EuCompteMapper();
                                       $compte      = new Application_Model_EuCompte();
			                           $sms_money   = new Application_Model_EuSmsmoney();
                                       $money_map   = new Application_Model_EuSmsmoneyMapper();

			                           $det_sms   = new Application_Model_EuDetailSmsmoney();
			                           $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                           $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                           $det_vtesms  = new Application_Model_EuDetailVentesms();

							           // insertion dans la table eu_depot_vente
				                       $m_dvente = new Application_Model_EuDepotVenteMapper();
				                       $dvente = new Application_Model_EuDepotVente();

									   $membretierscode = new Application_Model_EuMembretierscode();
                                       $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

							           $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                               $membre_pbf = '0000000000000000001M';
	                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
			                           $ret = $compte_map->find($code_compte_pbf,$compte);

							           $souscriptionM->find($id_souscription,$eusouscription);
						               $mobile = $eusouscription->souscription_mobile;
							           $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
							           $nbre_compte = $eusouscription->souscription_nombre;
							           $montant = $nbre_compte * $fcaps;

									   // Traitement des produits CAPS
                                       $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									   $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
									   
									   //if ($lignesdetfcaps != null) {
									       /*$nengfcaps = $money_map->findConuter() + 1;
                                           $sms_money->setNEng($nengfcaps)
                	                                ->setCode_Agence(null)
                                                    ->setCreditAmount($montant)
                                                    ->setSentTo($mobile)
                                                    ->setMotif('CAPS')
                                                    ->setId_Utilisateur(null)
                                                    ->setCurrencyCode('XOF')
                                                    ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setFromAccount($code_compte_pbf)
                                                    ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                    ->setCreditCode($codefcaps)
                                                    ->setDestAccount(null)
                                                    ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                    ->setDestAccount_Consumed($id_souscription)
                                                    ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                    ->setNum_recu(null);
                                           $money_map->save($sms_money);*/

										   // Mise à jour du compte de transfert
				                           /*if($ret && ($cumulfcaps >= $montant)) {
			                                  // Mise à jour du compte de transfert
				                              $compte->setSolde($compte->getSolde() - $montant);
                                              $compte_map->update($compte);
	                                       } else {
			                                  $db->rollback();
	                                          $this->view->param = $param;
											  $this->view->souscription_email  = $_POST['souscription_email'];
								              $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                  $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant';
                                              return;
			                               }*/

										   /*$l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);

						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;

										   }*/

										    //$countdvente = $m_dvente->findConuter() + 1;
				                            //$dvente->setId_depot($countdvente)
											
					                        $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                            $dvente->setCode_membre($_POST['offreur_projet_membre']);
			                                $dvente->setCode_produit('CAPS');
				                            $dvente->setMont_depot($montant);
				                            $dvente->setMont_vendu(0);
				                            $dvente->setSolde_depot($montant);
				                            $dvente->setId_utilisateur(null);
				                            $dvente->setType_depot('AvecListe');
				                            $dvente->setSouscription_id($id_souscription);
				                            $m_dvente->save($dvente);

										    for($i = 0; $i < $nbre_compte; $i++) {
										      $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
											  $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
											  $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                              $membretierscode->setMembretierscode_membretiers(0);
                                              $membretierscode->setMembretierscode_code($membretierscode_code);
                                              $membretierscode->setMembretierscode_souscription($id_souscription);
                                              $membretierscode->setPublier(0);
                                              $membretierscode->setCode_membre(NULL);
											  $membretierscode->setAllocation_cmfh_id(NULL);
                                              $membretierscode_mapper->save($membretierscode);

										    }

										   $compteur_sms = Util_Utils::findConuter() + 1;
				                           Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');

									    /* } else  {
				                           $db->rollback();
	                                       $this->view->param = $param;
									       $this->view->souscription_email  = $_POST['souscription_email'];
								           $this->view->code_membre = $_POST['offreur_projet_membre'];
			                               $sessionmembreasso->error = 'Le solde du compte de transfert est vide';
                                          return;
				                        }*/

						    }  else {
							    $db->rollback();
	                            $this->view->param = $param;
							    $this->view->souscription_email  = $_POST['souscription_email'];
							    $this->view->code_membre = $_POST['offreur_projet_membre'];
							    $sessionmembreasso->error = 'Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...';
						        return;
						    }

						    $db->commit();
						    if($finddepot == NULL) {
                                $sessionmembreasso->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace intégrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
		                    } else {
						        $sessionmembreasso->error = "Opération bien effectuée ...";
						    }
						    $this->_redirect('/integrateur/addoffreurprojetpre/param/'.$_POST['offreur_projet_type']);

						}

		            }

		        } catch (Exception $exc) {
				    $db->rollback();
	                $this->view->param = $param;
				    $this->view->souscription_email  = $request->getParam("souscription_email");
				    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                    $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
                }

		    }
	        $param = (int) $this->_request->getParam('param');
	        $this->view->param = $param;
	}

	



    public function addoffreurprojetquittanceAction() {
        /* page association/addoffreurprojet - Ajout d'une offreurprojet */
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
 		$t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper ();
		$m_filiere = new Application_Model_EuFiliereMapper();
        $cantons = $t_canton->fetchAll();
        $villes = $m_ville->fetchAll();
		$filieres = $m_filiere->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
		$this->view->filieres = $filieres;
		$request = $this->getRequest ();
		if ($request->isPost ()) {
		    if (isset($_POST['offreur_projet_souscription_ordre0']) && $_POST['offreur_projet_souscription_ordre0']!=""
			    && isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
			    && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			    && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			    && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			    && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1) {

		            $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
				    try {
		                $membremorale = new Application_Model_EuMembreMorale();
	                    $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
						$m_souscription2 = new Application_Model_EuSouscriptionMapper();
						$souscription3 = new Application_Model_EuSouscription();
                        $m_souscription3 = new Application_Model_EuSouscriptionMapper();
						$compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();

			            $contrat = new Application_Model_EuContrat();
                        $map_contrat = new Application_Model_EuContratMapper();

						$id_type_acteur = "";
			            $id_type_creneau = "";

				        $param = (int)$this->_request->getParam('param');
						$nombre_compte = 0;
					    $cpte = $_POST['cpteur'];

					    $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					    if($findmembre == false) {
					      $db->rollback();
	                      $this->view->param = $param;
						  $this->view->souscription_email  = $_POST['souscription_email'];
						  $this->view->code_membre = $_POST['offreur_projet_membre'];
					      $sessionmembreasso->error = "Le numero du membre offreur de projet est introuvable ...";
					      return;
					    }

						//--- Début de l'opération de mise sur chaine ---
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
						$code = $_POST['offreur_projet_membre'];
						$m_acteur = new Application_Model_EuActeurMapper();
						$findacteur = $m_acteur->findByActeur($code);


						if($findacteur == false) {
						$id_filiere = $_POST['offreur_projet_filiere'];
						$code_agence = substr($code,0,12);
				        $table = new Application_Model_DbTable_EuActeur();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur  =  $code_acteur;

						if(($param == 1) || ($param == 4) || ($param == 7)) {
						  $id_type_acteur = 1;
						}
						if(($param == 2) || ($param == 5) || ($param == 8)) {
						  $id_type_acteur = 2;
						}
						if(($param == 3) || ($param == 6) || ($param == 9)) {
						  $id_type_acteur = 3;
						}

						if(($param == 1) || ($param == 2) || ($param == 3)) {
						  $id_type_creneau = 3;
						}
						if(($param == 4) || ($param == 5) || ($param == 6)) {
						  $id_type_creneau = 2;
						}
						if(($param == 7) || ($param == 8) || ($param == 9)) {
						  $id_type_creneau = 1;
						}

						// insertion dans la table eu_acteur_creneau
                        $cm    = new Application_Model_EuActeurCreneauMapper();
                        $acren = new Application_Model_EuActeurCreneau();
				        $rep_mapper = new Application_Model_EuRepresentationMapper();
				        $rep = $rep_mapper->findbyrep($code);

						$acren->setNom_acteur($membremorale->getRaison_sociale());
                        $acren->setCode_membre($code);
                        $acren->setId_type_acteur($id_type_acteur);

                        $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                        $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                        $acren->setId_utilisateur(null);
                        $acren->setGroupe(null);
                        $acren->setCode_creneau(NULL);
                        $acren->setCode_gac_filiere(NULL);
                        $acren->setCode_gac(NULL);

				        $code_zone =  substr($membremorale->getCode_agence(),0,3);
                        $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                        if ($code_acteur == NULL) {
                           $code_acteur = 'A' . $code_zone . '0001';
                        } else {
                           $num_ordre = substr($code_acteur, -4);
                           $num_ordre++;
                           $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                        }

                        $acren->setCode_acteur($code_acteur);
                        $acren->setId_filiere($id_filiere);
                        $cm->save($acren);

						// Insertion dans la table eu_acteur
				        $t_acteur = new Application_Model_DbTable_EuActeur();
				        $c_acteur = new Application_Model_EuActeur();
                        $table = new Application_Model_DbTable_EuActeur();
                        $select = $table->select();
                        $select->where('code_acteur like ?',$acteur);
                        $resultSet = $table->fetchAll($select);
                        $ligneacteur = $resultSet->current();
                        $count = $c_acteur->findConuter() + 1;

						// Mise à jour des tables
				        $filiere =  new Application_Model_EuFiliere();
                        $map_filiere = new Application_Model_EuFiliereMapper();
                        $find_filiere = $map_filiere->find($id_filiere,$filiere);

				        $c_acteur->setId_acteur($count)
                                 ->setCode_acteur(NULL)
                                 ->setCode_division($filiere->getCode_division())
                                 ->setCode_membre($code)
                                 ->setId_utilisateur(NULL)
                                 ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				        if($id_type_acteur == 3) {
					      $c_acteur->setCode_activite('DETAILLANT');
			            } else if($id_type_acteur == 2) {
					      $c_acteur->setCode_activite('SEMI-GROSSISTE');
			            } else if($id_type_acteur == 1) {
					      $c_acteur->setCode_activite('GROSSISTE');
				        }

			            $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                        $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                        $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                        $c_acteur->setId_pays($ligneacteur->id_pays);
                        $c_acteur->setId_region($ligneacteur->id_region);
                        $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                        $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                        $c_acteur->setType_acteur('DSMS');

                        $c_acteur->setCode_gac_chaine($acteur);
                        $t_acteur->insert($c_acteur->toArray());

						// Mise à jour de la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
				        $trouveuser = false;
				        $code_type_acteur = $membremorale->getCode_type_acteur();

				        $finduser = $user_mapper->findByMembre($code,"personne_morale");
				        if($finduser != false) {
				           $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				        }

						if($trouveuser) {
				           if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                              $userin->setCode_groupe('oe_detaillant');
                              $userin->setCode_gac_filiere('oe_detaillant');
                              $userin->setCode_groupe_create('oe_detaillant');
                           }
                           elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_detaillant');
                             $userin->setCode_gac_filiere('ose_detaillant');
                             $userin->setCode_groupe_create('ose_detaillant');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_semi_grossiste');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_semi_grossiste');
                          }
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_grossiste');
                          }
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_grossiste');
                         }
				         $userin->setId_filiere($id_filiere);
                         $user_mapper->update($userin);

				       }

					   // Mise à jour de la table eu_membre_morale
				       $membremorale->setId_filiere($id_filiere);
				       $m_mapmorale->update($membremorale);

					   // Recuperation de la PRK nr
					   /*
                       $params = new Application_Model_EuParametresMapper();
                       $par = new Application_Model_EuParametres();
                       $prc = 0;
                       $par_prc = $params->find('prc','nr',$par);
                       if ($par_prc == true) {
                           $prc = $par->getMontant();
                       }

                       $te_mapper = new Application_Model_EuTegcMapper();
                       $te = new Application_Model_EuTegc();
                       //$code_te = 'TEGCP' .$id_filiere. $code;
					   $code_te = $te_mapper->getLastTegc();
			           if ($code_te == NULL) {
			              $code_te = 'TEGCP'.$id_filiere.$code.'00001';
			           } else {
			              $num_ordre = substr($code_te, -5);
                          $num_ordre++;
                          $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);
			           }
                       $find_te = $te_mapper->find($code_te,$te);
                       if ($find_te == false) {
                           $te->setCode_tegc($code_te)
                              ->setId_filiere($id_filiere)
                              ->setMdv($prc)
							  ->setNom_tegc($membremorale->raison_sociale)
                              ->setCode_membre($code)
                              ->setMontant(0)
                              ->setMontant_utilise(0)
                              ->setSolde_tegc(0);
                           $te_mapper->save($te);
                       } else {
                           $te->setId_filiere($id_filiere);
                           $te->setMdv($prc);
                           $te_mapper->update($te);
                       }
					   */

				       $code_compte = 'NB-TPAGCP-'.$code;
				       $res = $map_compte->find($code_compte,$compte);

				       if(!$res) {
                          $compte->setCode_cat('TPAGCP')
                                 ->setCode_compte($code_compte)
                                 ->setCode_membre(NULL)
                                 ->setCode_membre_morale($code)
                                 ->setCode_type_compte('NB')
                                 ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                 ->setDesactiver(0)
                                 ->setLib_compte('TPAGCP')
                                 ->setSolde(0);
                          $map_compte->save($compte);
                      }

				      $code_comptets = 'NB-TSGCP-'.$code;
				      $rests = $map_compte->find($code_comptets,$compte);

				      if(!$rests) {
                         $compte->setCode_cat('TSGCP')
                                ->setCode_compte($code_comptets)
                                ->setCode_membre(NULL)
                                ->setCode_membre_morale($code)
                                ->setCode_type_compte('NB')
                                ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                ->setDesactiver(0)
                                ->setLib_compte('TSGCP')
                                ->setSolde(0);
                         $map_compte->save($compte);
                     }

                     // Mise à jour de la table eu_contrat
				     $findcontrat = $map_contrat->findByMembre($code);
				     $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				     $contrat->setId_type_creneau($id_type_creneau);
				     $contrat->setId_type_acteur($id_type_acteur);
				     $map_contrat->update($contrat);

					 }
					//--- Fin de l'opération de mise sur chaine ---

                        // Mise à jour du type de fournisseur
						$membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
						$trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				        $membremoral->setType_fournisseur($_POST['type_fournisseur']);
				        $m_mapmoral->update($membremoral);


						for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				            $numero_quittance = $_POST['offreur_projet_souscription_ordre'.$i];
					        $j = $i + 1;
					        if($cpte > 1) {
					           while($j < $cpte) {
						             $num_quittance = $_POST['offreur_projet_souscription_ordre'.$j];
							         if($numero_quittance == $num_quittance) {
							            $db->rollback();
					                    $this->view->param = $param;
								        $this->view->souscription_email  = $_POST['souscription_email'];
								        $this->view->code_membre = $_POST['offreur_projet_membre'];
		                                $sessionmembreasso->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                    return;
							         }
							         $j++;
						       }
					       }
				       }

					   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'. $i]);
						   if($souscription_id == NULL) {
							  $db->rollback();
						      $this->view->param = $param;
							  $this->view->souscription_email  = $_POST['souscription_email'];
							  $this->view->code_membre = $_POST['offreur_projet_membre'];
		                      $sessionmembreasso->error = "Numéro de quittance ".$_POST['offreur_projet_souscription_ordre'.$i]."  est  invalide ...";
							  //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                              return;
		                    }
					    }

						if(count($_POST['cpteur']) > 1)  {
							$id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre0']);
							$m_souscription3->find($id,$souscription3);
							$souscription_souscription = $souscription3->souscription_souscription;
							for($i = 1; $i < $_POST['cpteur']; $i++)  {
							    $id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
								$m_souscription3->find($id,$souscription3);
								if($souscription_souscription != $souscription3->souscription_souscription) {
								   $db->rollback();
								   $this->view->param = $param;
								   $this->view->souscription_email  = $_POST['souscription_email'];
								   $this->view->code_membre = $_POST['offreur_projet_membre'];
		                           $sessionmembreasso->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
							       //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                                   return;
								  }
							}
						}

						$m_offreur_projet2 = new Application_Model_EuOffreurProjetMapper();
						$m_detail_offreur2 = new Application_Model_EuDetailOffreurProjetMapper();
						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $offreur2        = $m_offreur_projet2->fetchAllBySouscription($souscription_id);
						   $detailoffreur2  = $m_detail_offreur2->fetchAllBySouscription($souscription_id);
						   if(count($offreur2) > 0  || count($detailoffreur2) > 0) {
						     $db->rollback();
							 $this->view->param = $param;
							 $this->view->souscription_email = $_POST['souscription_email'];
							 $this->view->code_membre = $_POST['offreur_projet_membre'];
		                     $sessionmembreasso->error = "Erreur de traitement : Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]."  déjà  utilisé ...";
							 //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                             return;
	                       }
						}

						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   $offreur2    = $m_offreur_projet2->fetchAllBySouscription($souscription3->souscription_souscription);
						   $detailoffreur2    = $m_detail_offreur2->fetchAllBySouscription($souscription3->souscription_souscription);
						   if((count($offreur2) > 0  || count($detailoffreur2) > 0)) {
							 $db->rollback();
							 $this->view->param = $param;
							 $this->view->souscription_email = $_POST['souscription_email'];
							 $this->view->code_membre = $_POST['offreur_projet_membre'];
		                     $sessionmembreasso->error = "Veuillez plutôt faire un complément avec le numéro quittance  ".$_POST['offreur_projet_souscription_ordre'.$i];
							 //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                             return;
	                       }
						}

						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   if(($souscription3->souscription_type_candidat != 6 && $souscription3->souscription_type_candidat != 7)) {
						       $db->rollback();
							   $this->view->param = $param;
							   $this->view->souscription_email = $_POST['souscription_email'];
							   $this->view->code_membre = $_POST['offreur_projet_membre'];
						       $sessionmembreasso->error = "Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]." doit être celui d'un CMFH Offreur de projet ...";
						       return;
						   }
						}


						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
					    }

						if($nombre_compte >= 100)   {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $a = new Application_Model_EuOffreurProjet();
                            $ma = new Application_Model_EuOffreurProjetMapper();

						    $compteur = $ma->findConuter() + 1;
						    $id_souscription = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre0']);
                            $a->setOffreur_projet_id($compteur);
                            $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                            $a->setOffreur_projet_souscription($id_souscription);
                            $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
						    $a->setOffreur_projet_code_membre($_POST['offreur_projet_membre']);
                            $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                            $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
                            $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
							if($param >= 4) {
	                           $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                            }

							$a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                            $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                            $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                            $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                            $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                            $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                            $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                            $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);/*$sessionmembreasso->membreasso_id*/
                            $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $a->setOffreurProjetCanton($_POST['offreur_projet_canton']);
                            $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			                $a->setPublier($_POST['publier']);
                            $ma->save($a);

							////////////////////////////////////////////////////////////////////////////
                            $offreur_projet = new Application_Model_EuOffreurProjet();
                            $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                            $offreur_projetM->find($compteur, $offreur_projet);

                            $offreur_projet->setPublier(1);
		                    $offreur_projetM->update($offreur_projet);

							$id_offreur_projet = $offreur_projet->offreur_projet_id;
							$detailoffreur = new Application_Model_EuDetailOffreurProjet();
                            $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();

							for($i = 0; $i < $_POST['cpteur']; $i++) {
							   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
							   $cpte = $m_detailoffreur->findConuter() + 1;
							   $detailoffreur->setId_detail_offreur_projet($cpte);
							   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
							   $detailoffreur->setSouscription_id($souscription_id);
							   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							   $m_detailoffreur->save($detailoffreur);
							}

							/////////////////////////////////////////////////////////////////////////////////////////
							$code_agence = "";
							if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
							   $membreasso = new Application_Model_EuMembreasso();
                               $m_membreasso = new Application_Model_EuMembreassoMapper();
		                       $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);

                               $association = new Application_Model_EuAssociation();
                               $m_association = new Application_Model_EuAssociationMapper();
		                       $m_association->find($membreasso->membreasso_association, $association);
		                       $code_agence = $association->code_agence;
							}

							$eusouscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();

							$date = new Zend_Date();
		                    $compte_map = new Application_Model_EuCompteMapper();
                            $compte      = new Application_Model_EuCompte();
			                $sms_money   = new Application_Model_EuSmsmoney();
                            $money_map   = new Application_Model_EuSmsmoneyMapper();

			                $det_sms   = new Application_Model_EuDetailSmsmoney();
			                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                $det_vtesms  = new Application_Model_EuDetailVentesms();

							// insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();

							$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                    $membre_pbf = '0000000000000000001M';
	                        $code_compte_pbf = "NN-TR-".$membre_pbf;
			                $ret = $compte_map->find($code_compte_pbf,$compte);

							for($i = 0; $i < $_POST['cpteur']; $i++) {
							   $souscription_id = $souscriptionM->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
							   $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
							   if($finddepot == NULL) {
							      $souscriptionM->find($souscription_id,$eusouscription);
								  $mobile = $eusouscription->souscription_mobile;
                                  if($eusouscription->souscription_programme == 'CMFH')   {
                                     $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                         if($eusouscription->souscription_autonome == 1) {
			                            $nbre_compte = $eusouscription->souscription_nombre - 1;
			                         } else {
				                        $nbre_compte = $eusouscription->souscription_nombre;
				                     }
									 $montant = $nbre_compte * $fcaps;

									 // Traitement des produits CAPS
				                     $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									 $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');

									 if ($lignesdetfcaps != null) {
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed($souscription_id)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                           $money_map->save($sms_money);

										   // Mise à jour du compte de transfert
				                           if($ret && ($cumulfcaps >= $montant)) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);
	                                       } else {
			                                 $db->rollback();
	                                         $this->view->param = $param;
											 $this->view->souscription_email  = $_POST['souscription_email'];
								             $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                 $sessionmembreasso->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte CAPS est insuffisant';
											 //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                                             return;
			                               }

										   $l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);


						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());

                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }

									 } else  {
				                       $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->souscription_email  = $_POST['souscription_email'];
								       $this->view->code_membre = $_POST['offreur_projet_membre'];
			                           $sessionmembreasso->error = 'Erreur de traitement : le solde du compte CAPS est null';
		                               //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                                       return;
				                    }

									$countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                    $dvente->setCode_membre($_POST['offreur_projet_membre']);
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($souscription_id);
				                    $m_dvente->save($dvente);

									$compteur = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');

								    include("automatisation.php");
								    codegenerer($souscription_id);

                                  }

							   } else {
							         $m_dvente->find($finddepot->id_depot,$dvente);
							         $dvente->setCode_membre($_POST['offreur_projet_membre']);
									 $m_dvente->update($dvente);

									 include("automatisation.php");
								     recupcodegenerer($souscription_id);

							   }

                            }

                            $souscription = new Application_Model_EuSouscription();
                            $m_souscription = new Application_Model_EuSouscriptionMapper();
		                    $m_souscription->find($offreur_projet->offreur_projet_souscription,$souscription);

							$date_id = Zend_Date::now();

                            $association = new Application_Model_EuAssociation();
                            $association_mapper = new Application_Model_EuAssociationMapper();

                            $compteur_association = $association_mapper->findConuter() + 1;
                            $association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);

							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
							$login = "";
							$password = "";

							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							   //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                               $login = "";
                               while(strlen($login) != 8) {
                                  $login .= $liste[rand(0,61)];
                               }
							   $password = $login.$login;

							} else {
							   $login = $souscription->souscription_login;
							   $password = $souscription->souscription_passe;
							}



                             $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                             $membreasso->setMembreasso_id($compteur_membreasso);
                             $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                             $membreasso->setMembreasso_nom($souscription->souscription_raison);
                             $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                             $membreasso->setMembreasso_association($compteur_association);
                             $membreasso->setMembreasso_email($souscription->souscription_email);
                             $membreasso->setMembreasso_login($login);
                             $membreasso->setMembreasso_passe($password);
                             $membreasso->setMembreasso_type(1);
                             $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $membreasso->setPublier(1);
							 $membreasso->setSouscription_id($souscription->souscription_id);
                             $membreasso_mapper->save($membreasso);

							 $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                             $html .= "<br/>";
                             $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                             $html .= "<br/>";
							 $html .= "Login : ".$login."<br/>";
                             $html .= "Mot de passe : ".$password."<br/>";

							 $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							 $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                             Zend_Mail::setDefaultTransport($tr);
                             $mail = new Zend_Mail();

							 $mail->setBodyHtml($html);
                             $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                             $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                             $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                             $mail->send($tr);/**/

							 $db->commit();
                             $sessionmembreasso->error = "Opération bien effectuée ...";
		                     $this->_redirect('/integrateur/addoffreurprojet/param/'.$_POST['offreur_projet_type']);

						} else {
						     $db->rollback();
						     $sessionmembreasso->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...";
					         $this->view->param = $param;
						     $this->view->souscription_email  = $_POST['souscription_email'];
						     $this->view->code_membre = $_POST['offreur_projet_membre'];
						     return;
						}

		            } catch (Exception $exc) {
				        $db->rollback();
	                    $this->view->param = $param;
						$this->view->souscription_email  = $_POST['souscription_email'];
						$this->view->code_membre = $_POST['offreur_projet_code_membre'];
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
		                //$this->_redirect('/integrateur/addoffreurprojet/param/'.$param);
                        return;
                   }


		        }
		}
        $param = (int)$this->_request->getParam('param');
	    $this->view->param = $param;


    }


    public function testAction() {
$this->_helper->layout->disableLayout();
      $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                             $html .= "<br/>";
                             $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                             $html .= "<br/>";
               //$html .= "Login : ".$login."<br/>";
                             //$html .= "Mot de passe : ".$password."<br/>";

               $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
               $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                             Zend_Mail::setDefaultTransport($tr);
                             $mail = new Zend_Mail();

               $mail->setBodyHtml($html);
                             $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                             //$mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                             $mail->addTo("looky@gacsource.com", "LOOKY Yokamly");
                             $mail->setSubject('Formulaire Integrateur');
                             $mail->send($tr);
                             var_dump($tr);
}


    public function addoffreurprojetoldAction() {
        /* page association/addoffreurprojet - Ajout d'une offreurprojet */

	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');
 		$t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper ();
        $cantons = $t_canton->fetchAll();
        $villes = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['offreur_projet_souscription_ordre']) && $_POST['offreur_projet_souscription_ordre']!="" && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!="" && isset($_POST['offreur_projet_raison_sociale']) && $_POST['offreur_projet_raison_sociale']!="" && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!="" && isset($_POST['offreur_projet_stock_disponible']) && $_POST['offreur_projet_stock_disponible']!="" && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!="" && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!="" && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation']==1) {

		            $param = (int)$this->_request->getParam('param');
	 //$this->view->param = $param;

        $m_souscription2 = new Application_Model_EuSouscriptionMapper();
		$souscription_id = $m_souscription2->findIdSouscriptionOffreur($_POST['offreur_projet_souscription_ordre']);

		if($souscription_id == NULL) {
		   $sessionmembreasso->error = "Numéro de quittance invalide ...";
		} else {

        $souscription3 = new Application_Model_EuSouscription();
        $m_souscription3 = new Application_Model_EuSouscriptionMapper();
		$m_souscription3->find($souscription_id, $souscription3);

		if(count($souscription3) > 0 && $souscription3->souscription_nombre >= 100 && ($souscription3->souscription_type_candidat == 6 || $souscription3->souscription_type_candidat == 7)){

        $m_offreur_projet2 = new Application_Model_EuOffreurProjetMapper();
		$offreur_projet2 = $m_offreur_projet2->fetchAllBySouscription($souscription_id);

		if(count($offreur_projet2) > 0){
		   $sessionmembreasso->error = "Numéro de quittance déjà utilisé ...";
			}else{



            $souscription = new Application_Model_EuSouscription();
            $m_souscription = new Application_Model_EuSouscriptionMapper();
		    $m_souscription->find($souscription_id, $souscription);

            $souscription->setSouscription_email($_POST["souscription_email"]);
            $m_souscription->update($souscription);



            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $a = new Application_Model_EuOffreurProjet();
            $ma = new Application_Model_EuOffreurProjetMapper();

            $compteur = $ma->findConuter() + 1;
            $a->setOffreur_projet_id($compteur);
            $a->setOffreur_projet_type($_POST['offreur_projet_type']);
            $a->setOffreur_projet_souscription($souscription_id);
            $a->setOffreur_projet_raison_sociale($_POST['offreur_projet_raison_sociale']);
            $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
            $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
            $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
if($param == 4 || $param == 5){
	        $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
}
            $a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
            $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
            $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
            $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
            $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
            $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
            $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
            $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);/**/
            $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
            $a->setOffreurProjetCanton($_POST['offreur_projet_canton']);
            $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			$a->setPublier($_POST['publier']);
            $ma->save($a);


////////////////////////////////////////////////////////////////////////////

        $offreur_projet = new Application_Model_EuOffreurProjet();
        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
        $offreur_projetM->find($compteur, $offreur_projet);

        $offreur_projet->setPublier($this->_request->getParam('publier'));
		$offreur_projetM->update($offreur_projet);




$id_offreur_projet = $offreur_projet->offreur_projet_id;
//////////////////////////////////////////
/*if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($offreur_projet->offreur_projet_souscription);
        //$cumul_recubancaire = 0;

		if($cumul_recubancaire > 0){


		if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

			$partagea_montant = floor($cumul_recubancaire / 100 * 5);

		}else{

			$partagea_montant = floor($cumul_recubancaire / 100 * 5);

		}

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_offreur_projet($id_offreur_projet);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_offreur_projet($id_offreur_projet);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}
}*/

////////////////////////////////////////////////////////////////////////////

            $sessionmembreasso->error = "Opération bien effectuée ...";



		$this->_redirect('/integrateur/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
				}

			}else{
		   $sessionmembreasso->error = "Numéro de quittance doit être celui d'un CMFH Offreur de projet ...";
				}
		}
		} else {  $sessionmembreasso->error = "Champs * obligatoire ...";  }
		}


            $param = (int)$this->_request->getParam('param');
	 $this->view->param = $param;


    }





	public function listoffreurprojetAction() {
        /* page integrateur/listlivraison - Liste des livraisons */
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $offreurprojet = new Application_Model_EuOffreurProjetMapper();
        $this->view->entries = $offreurprojet->fetchAllByMembreasso($sessionmembreasso->membreasso_id);

    }




    public function listoffreurprojet1Action()
    {
        /* page integrateur/listlivraison - Liste des livraisons */

		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $offreurprojet = new Application_Model_EuOffreurProjetMapper();
        $this->view->entries = $offreurprojet->fetchAllByAssociation($sessionmembreasso->membreasso_association);

    }






    public function editmembreassosouscriptionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['souscription_ordre']) && $_POST['souscription_ordre']!="") {


         $m_souscription2 = new Application_Model_EuSouscriptionMapper();
		$souscription_id = $m_souscription2->findIdSouscription($_POST['souscription_ordre']);

		if($souscription_id == NULL) {
		   $sessionmembreasso->error = "Numéro de quittance invalide ...";
		} else {

       $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($_POST['membreasso_id'], $membreasso);

            $membreasso->setSouscription_id($souscription_id);
            $m_membreasso->update($membreasso);

            $sessionmembreasso->error = "Opération bien effectuée ...";
		$this->_redirect('/integrateur/editmembreassosouscription');
		}
		} else {  $sessionmembreasso->error = "Champs * obligatoire ...";

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMembreasso();
        $ma = new Application_Model_EuMembreassoMapper();
		$ma->find($id, $a);
		$this->view->membreasso = $a;
            }
	}

	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMembreasso();
        $ma = new Application_Model_EuMembreassoMapper();
		$ma->find($id, $a);
		$this->view->membreasso = $a;
            }
	}
	}









    public function ancienppAction() {
        /* page integrateur/ancienpp - Retrouve ancienne personne physique GIE/ReDeMaRe */
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Physique();
                $membres = new Application_Model_DbTable_EuAncienMembre();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentp like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
				    $trouvmembre = $memb->current();
				    $souscription = new Application_Model_DbTable_EuSouscription();
					$selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->numidentp);
				    $sous = $souscription->fetchAll($selection);
					if(count($sous) == 0) {
                        $this->_redirect('/integrateur/reactivationsouscriptiongiepp/id/'.$trouvmembre->numidentp);
					} else {
					   $this->view->message = "Quittance de Réactivation déjà effectuée ...";
					}
                } else {
     				$this->view->message = "Pas de resultat ... Déjà Activé";
				}
            } else {
			    $this->view->message = "Champs * obligatoire ...";
		    }

        }
    }







    public function reactivationsouscriptiongieppAction() {
		//$this->_helper->layout->disableLayout();
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

		if (isset($_POST['ok']) && $_POST['ok']=="ok")   {
		    if (isset($_POST['numident']) && $_POST['numident'] !=""
			    && isset($_POST['souscription_personne']) && $_POST['souscription_personne'] !=""
				&& isset($_POST['souscription_autonome']) && $_POST['souscription_autonome'] !=""
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile'] !=""
				&& isset($_POST['souscription_programme']) && $_POST['souscription_programme'] !=""
				&& isset($_POST['code_activite']) && $_POST['code_activite'] !=""
				&& isset($_POST['souscription_nom']) && $_POST['souscription_nom'] !=""
				&& isset($_POST['souscription_prenom']) && $_POST['souscription_prenom'] !="") {

		        $db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
				    $souscriptioneu = new Application_Model_DbTable_EuSouscription();
					$selection = $souscriptioneu->select();
                    $selection->from($souscriptioneu)
                              ->where('souscription_ancien_membre like ?',$_POST['numident']);
				    $sous = $souscriptioneu->fetchAll($selection);
					if(count($sous) == 0) {
		            $eusouscription = new Application_Model_DbTable_EuSouscription();
	                $select = $eusouscription->select();
			        if($_POST['souscription_personne'] == "PP") {
	                   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_nom'])));
	                   $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_prenom'])));
			        } else {
	                   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));
			        }
	                $select->order(array("souscription_id ASC"));
	                $select->limit(1);
	                $rowseusouscription = $eusouscription->fetchRow($select);
		            if(count($rowseusouscription) > 0) {
			            $souscription_ok = 1;
			            $souscription_first = $rowseusouscription->souscription_id;
			        } else {
			            $souscription_ok = 0;
			        }

				    $date_id = Zend_Date::now();
                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();
		            include("Transfert.php");

				    $compteur_souscription = $souscription_mapper->findConuter() + 1;
                    $souscription->setSouscription_id($compteur_souscription);
				    $souscription->setSouscription_personne($_POST['souscription_personne']);
				    $souscription->setSouscription_nom($_POST['souscription_nom']);
                    $souscription->setSouscription_prenom($_POST['souscription_prenom']);

				    $souscription->setSouscription_email($_POST['souscription_email']);
                    $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                    $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

				    $souscription->setSouscription_nombre(1);
                    $souscription->setSouscription_programme($_POST['souscription_programme']);
				    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));

				    $souscription->setCode_activite($_POST["code_activite"]);
                    $souscription->setId_metier($_POST["id_metier"]);
                    $souscription->setId_competence($_POST["id_competence"]);
                    $souscription->setSouscription_ville($_POST['souscription_ville']);
                    $souscription->setSouscription_quartier($_POST['souscription_quartier']);

				    if($souscription_ok == 1) {
                        $souscription->setSouscription_souscription($souscription_first);
				    } else {
                        $souscription->setSouscription_souscription($compteur_souscription);
			        }

				    $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                    $souscription->setSouscription_ancien_membre($_POST['numident']);
			        $souscription->setPublier(3);
					$souscription->setErreur(0);
					$souscription->setId_canton($_POST['id_canton']);
                    $souscription_mapper->save($souscription);

		            $html = "";
					$html .= "Nom : ".$_POST['souscription_nom']."<br />";
                    $html .= "Prenom : ".$_POST['souscription_prenom']."<br />";

					$html .= "E-mail : ".$_POST['souscription_email']."<br />";
                    $html .= "Mobile : ".$_POST['souscription_mobile']."<br />";
                    $html .= "Ville : ".$_POST['souscription_ville']."<br />";
                    $html .= "Quartier : ".$_POST['souscription_quartier']."<br />";
                    $html .= "Programme : ".$_POST['souscription_programme']."<br />";

                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
		                $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
		                $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
		                $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";

                    $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";


					$htmlpdf = "";

                    $htmlpdf .= '
                        <page backbottom="15mm">
                        <page_footer>
                        <table>
                        <tr>
                           <td align="center">
	                       <hr>
	                       Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
                        </tr>
                        </table>
                        </page_footer>

                        <table width="768" border="0">
                        <tbody>
                        <tr>
                           <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
                        </tr>';

						if($souscription->souscription_personne == "PP") {
                            $souscrip = new Application_Model_EuSouscription();
                            $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                            $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");

	                        if($souscription->souscription_programme == "KACM") {
		                        //if($compteur_souscrip == 0) {$compteur_souscrip = 1029;}
		                            $unite = 0;
                                    $htmlpdf .= '
                                    <tr>
                                        <td colspan="4" align="center"><strong><em><u>N° Reçu Personne Physique : PP'.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                                    </tr>';
	                        }
                        }

						$souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
		                $souscriptionM->update($souscription);

						if($souscription->souscription_autonome == 1) {
	                        $souscription_nombre = $souscription->souscription_nombre;
			                if($souscription->souscription_personne == "PP") {
				                $autonome = 0;
			                }

						}

						if($souscription->souscription_personne == "PP") {
                            $htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_nom.' '.$souscription->souscription_prenom.'</em></strong></p></td>
                                </tr>';
                        }

						if($souscription->souscription_nombre > 0) {
	                        $htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="left"><em><u>Nombre de Comptes Marchands ré-activés: '.$souscription->souscription_nombre.'</u></em></td>
                                </tr>';
                        } else {
                            $htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="left">&nbsp;</td>
                                </tr>';
	                    }

                        $htmlpdf .= '
                                <tr>
                                    <td colspan="2">&nbsp;</td>
                                    <td colspan="2" align="center">&nbsp;</td>
                                </tr>';
                        $htmlpdf .= '
                                <tr>
                                    <td colspan="2" align="left"><em><strong>Libellé</strong></em></td>
                                    <td align="center"><em><strong>Nombre de compte ré-activé</strong></em></td>
                                    <td align="center"><strong><em>Montant ré-activation</em></strong></td>
                                </tr>';

                        $htmlpdf .= '
                                <tr style="background-color:#999;">
                                    <td colspan="2" align="left"><em><strong>Ré-activation de Comptes Marchands</strong></em></td>
                                    <td align="center"><em>'.$souscription_nombre.'</em></td>
                                    <td align="center"><em>'.$autonome.' FCFA</em></td>
                                </tr>';

                        $htmlpdf .= '
                                <tr>
                                    <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($autonome), 50).' CFA</em></td>
                                    <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
                                    Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                                </tr>';

	                    if($souscription->souscription_programme == "KACM") {
                            $htmlpdf .= '
                                <tr>
                                    <td colspan="2" align="left">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td colspan="2" align="left">&nbsp;</td>
                                </tr>';
		                }

						$htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="left">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td colspan="4" align="left">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td colspan="4" align="center">';
	                                    if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")) {
                                            list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$souscription->souscription_vignette);
	                                        $pourcent = 700 * 100 / $width;
	                                        $width2 = 700;
	                                        $height2 = $pourcent * $height / 100;
                                            $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />

                                            ';
                                        }
                                $htmlpdf .= '  </td>
	                                    </tr>
                                        </tbody>
                                        </table>
                                        <br />
                                        <br />
                                        &nbsp;
                                       </page>';
                        $htmlpdf .= '';


				//////////////////////////////////////////////////////////////////////
				    $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                    $somecontent = $htmlpdf;

                // Assurons nous que le fichier est accessible en écriture
                if (is_writable($filename)) {
                    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                    // Le pointeur de fichier est placé à la fin du fichier
                    // c'est là que $somecontent sera placé
                    if (!$handle = fopen($filename, 'w+')) {
                        echo "Impossible d'ouvrir le fichier ($filename)";
                        exit;
                    }

                    // Ecrivons quelque chose dans notre fichier.
                    if (fwrite($handle, $somecontent) === FALSE) {
                        echo "Impossible d'écrire dans le fichier ($filename)";
                        exit;
                    }
                    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                    fclose($handle);
                } else {
                    echo "Le fichier $filename n'est pas accessible en écriture.";
                }

                ////////////////////////////////////////////////////////////////////////////
                $file = $filename;
                if (!is_dir("../../webfiles/pdf_souscription/")) {
                    mkdir("../../webfiles/pdf_souscription/", 0777);
                }
                /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

                $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
                $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                $newchemin = "../../webfiles/pdf_souscription/";

                copy($file, $newfile);

                ob_start();
                include(dirname(__FILE__).'/../'.$newfile);
                $content = ob_get_clean();


                // convert to PDF
                require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                try {
                    $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                    $html2pdf->pdf->SetDisplayMode('fullpage');
                    $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                    //$html2pdf->writeHTML($content);
                    $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                }
                catch(HTML2PDF_exception $e) {
                    echo $e;
                    exit;
                }
                $file = $newchemin.$newnom.'.pdf';
                $filena	= $newnom.'.pdf';
                unlink($newfile);

				if($souscription->souscription_email != "") {
                    $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                    Zend_Mail::setDefaultTransport($tr);
                    $mail = new Zend_Mail();
                    //$mail->setBodyText('Mon texte de test');
                    $mail->setBodyHtml($html);
                    $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                    $mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
					$mail->setSubject('Ré-activation Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));

					$monImage = file_get_contents($file);
                    $finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
                    $at = new Zend_Mime_Part($monImage);
                    $at->type        = finfo_file($finfo, $file);
                    $at->disposition = Zend_Mime::DISPOSITION_INLINE;
                    $at->encoding    = Zend_Mime::ENCODING_BASE64;
                    $at->filename    = $filena;
                    $mail->addAttachment($at);
                    $mail->send($tr);
		        }
				$esmc_email = Util_Utils::getParamEsmc(3);
                $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));

				$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                Zend_Mail::setDefaultTransport($tr);
                $mail = new Zend_Mail();
                //$mail->setBodyText('Mon texte de test');
                $mail->setBodyHtml($html);
                $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                $mail->addTo($esmc_email, "ESMC - SIF");
                $mail->setSubject('Ré-activation Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));

                $monImage = file_get_contents($file);
                $finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
                $at = new Zend_Mime_Part($monImage);
                $at->type        = finfo_file($finfo, $file);
                $at->disposition = Zend_Mime::DISPOSITION_INLINE;
                $at->encoding    = Zend_Mime::ENCODING_BASE64;
                $at->filename    = $filena;
                $mail->addAttachment($at);
                $mail->send($tr);

				// operation de transfert des codes kacm
				$date = new Zend_Date();
		        $compte_map = new Application_Model_EuCompteMapper();
                $compte      = new Application_Model_EuCompte();
			    $sms_money   = new Application_Model_EuSmsmoney();
                $money_map   = new Application_Model_EuSmsmoneyMapper();

			    $det_sms   = new Application_Model_EuDetailSmsmoney();
			    $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			    $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			    $det_vtesms  = new Application_Model_EuDetailVentesms();

			    $mobile = $souscription->souscription_mobile;
			    //$nbre_compte = $souscription->souscription_nombre;
			    $fcaps = Util_Utils::getParametre('CAPS','valeur');

				$mont_fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $mont_kps = Util_Utils::getParametre('FKPS','valeur');

		        //$montant = $nbre_compte * $fcaps;
		        $membre_pbf = '0000000000000000001M';
	            $code_compte_pbf = "NN-TR-".$membre_pbf;
			    $ret = $compte_map->find($code_compte_pbf,$compte);

				if($souscription->souscription_programme == 'KACM') {
				     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			             // Mise à jour du compte de transfert
				         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);
	                  } else {
			             $db->rollback();
			             $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
						 $this->view->numident = $_POST['numident'];
                         $this->view->nom_membre = $_POST['souscription_nom'];
                         $this->view->prenom_membre = $_POST['souscription_prenom'];
                         $this->view->ville_membre = $_POST['souscription_ville'];
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
					     $this->_redirect('/integrateur/reactivationsouscriptiongiepp/id/'.$_POST['numident']);
                         return;
			          }

					  $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
					  // Traitement des produits FS
				      // insertion dans la table eu_smsmoney
				      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
					  // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
				      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
					  // Traitement des produits FCPS
				      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
			          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
							$codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					        $nengfs = $money_map->findConuter() + 1;
							$sms_money->setNEng($nengfs)
                	                  ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

							$i = 0;
					        $reste = $mont_fs;
					        $nbre_lignesdetfs = count($lignesdetfs);
				            while ($reste > 0 && $i < $nbre_lignesdetfs) {
					              $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
						          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						          if ($reste >= $lignedetfs->getSolde_sms()) {
						                 //Mise à jour  des lignes d'enrégistrement
					                     //insertion dans la table eu_detailventesms
						                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                            ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
							              $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                             ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                             ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
						            } else  {
							              //Mise à jour  des lignes d'enrégistrement
						                  //insertion dans la table eu_detailventesms
						                  $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                             ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                  $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							              $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
						                  $reste = 0;
						             }
						             $i++;
					              }

								  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                	                        ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);

								  $j = 0;
					              $reste = $mont_fl;
					              $nbre_lignesdetfl = count($lignesdetfl);
					              while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                    $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
						                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                if ($reste >= $lignedetfl->getSolde_sms()) {
						                   //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
									       //insertion dans la table eu_detailventesms
						                   $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                              ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
							                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
						                  } else  {
							                 //Mise à jour  des lignes d'enrégistrement
											//insertion dans la table eu_detailventesms
						                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                               ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                      $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                  $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
						                      $reste = 0;
						                   }
						                                $j++;
					                   }

													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }

													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;

				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                    $codeactivation->setCode_membre(null);
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($souscription->souscription_id);
													$codeactivation->setOrigine_code('GIE');
				                                    $m_codeactivation->save($codeactivation);

				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);

										            }  else {
												        $db->rollback();
	                                                    $this->view->error = 'Erreur de traitement : le solde est null';
						                                $this->view->numident = $_POST['numident'];
                                                        $this->view->nom_membre = $_POST['souscription_nom'];
                                                        $this->view->prenom_membre = $_POST['souscription_prenom'];
                                                        $this->view->ville_membre = $_POST['souscription_ville'];
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
					                                    $this->_redirect('/integrateur/reactivationsouscriptiongiepp/id/'.$_POST['numident']);
												    }



				}



		        $db->commit();
		        $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
		        $this->_redirect('/integrateur/ancienpp');
				}
				} catch (Exception $exc) {
				    $db->rollback();
				    $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				    return;
			    }

			}   else {  $this->view->error = "Champs * obligatoire ...";  }

		} else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Physique();
            $membres = new Application_Model_DbTable_EuAncienMembre();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentp like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->numident = $trouvmembre->numidentp;
            $this->view->nom_membre = $trouvmembre->nom;
            $this->view->prenom_membre = $trouvmembre->prenom;
            //$this->view->sexe = $trouvmembre->sexe;
            //$this->view->profession = $trouvmembre->prof;
            //$this->view->tel = $trouvmembre->tel;
            $this->view->ville_membre = $trouvmembre->ville;
            //$this->view->pere = $trouvmembre->pere;
            //$this->view->mere = $trouvmembre->mere;
            $this->view->quartier_membre = $trouvmembre->qartresid;
            //$this->view->bp = $trouvmembre->bp;
            //$this->view->nbre_enf = $trouvmembre->nbrenf;
            $this->view->email = $trouvmembre->email;
            $this->view->portable = $trouvmembre->portable;
            //$this->view->formation = $trouvmembre->formation;
            //$this->view->lieu_nais = $trouvmembre->lieunais;
        }

	}








    public function ancienpmAction() {
        /* page integrateur/ancienpm - Retrouve ancienne personne morale GIE/ReDeMaRe */
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Morale();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentm like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                       ->order('nomm ASC');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $souscription = new Application_Model_DbTable_EuSouscription();
					$selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->numidentm);
				    $sous = $souscription->fetchAll($selection);
					if(count($sous) == 0) {
                      $this->_redirect('/integrateur/reactivationsouscriptiongiepm/id/'.$trouvmembre->numidentm);
					} else {
					  $this->view->message = "Quittance de Réactivation déjà effectuée ...";
					}
                } else {  $this->view->message = "Pas de resultat ... Déjà Activé";}
            } else {  $this->view->message = "Champs * obligatoire ...";}

        }
    }



    public function reactivationsouscriptiongiepmAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['numidentm']) && $_POST['numidentm']!=""
			    && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""
				&& isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!=""
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!=""
				&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
				&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
				&& isset($_POST['souscription_raison']) && $_POST['souscription_raison']!=""
				&& isset($_POST['type_acteur']) && $_POST['type_acteur']!=""
				&& isset($_POST['statut_juridique']) && $_POST['statut_juridique']!=""
				&& isset($_POST['souscription_type']) && $_POST['souscription_type']!=""
				&& isset($_POST['souscription_numero']) && $_POST['souscription_numero']!=""
				&& isset($_POST['souscription_date_numero']) && $_POST['souscription_date_numero']!=""
				&& isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!=""
				&& isset($_POST['souscription_montant']) && $_POST['souscription_montant']!="") {

				    $db = Zend_Db_Table::getDefaultAdapter();
				    $db->beginTransaction();
				    try {
					    $souscriptioneu = new Application_Model_DbTable_EuSouscription();
					    $selection = $souscriptioneu->select();
                        $selection->from($souscriptioneu)
                                  ->where('souscription_ancien_membre like ?',$_POST['numidentm']);
				        $sous = $souscriptioneu->fetchAll($selection);

					    if(count($sous) == 0) {

		                $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select();
					    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));

						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }

						$date_id = Zend_Date::now();
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

						include("Transfert.php");
		                if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
		                    $chemin	= "souscriptions";
		                    $file = $_FILES['souscription_vignette']['name'];
		                    $file1='souscription_vignette';
		                    $souscription_vignette = $chemin."/".transfert($chemin,$file1);
		                } else {$souscription_vignette = "";}

						$compteur_souscription = $souscription_mapper->findConuter() + 1;
                        $souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne($_POST['souscription_personne']);

						$souscription->setSouscription_raison($_POST['souscription_raison']);
                        $souscription->setCode_type_acteur($_POST["type_acteur"]);
                        $souscription->setCode_statut($_POST["statut_juridique"]);

						$souscription->setSouscription_email($_POST['souscription_email']);
                        $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                        $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                        $souscription->setSouscription_type($_POST['souscription_type']);
                        $souscription->setSouscription_numero($_POST['souscription_numero']);
                        $souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
			            if($_POST['souscription_type'] == "Banque") {
                            $souscription->setSouscription_banque($_POST['souscription_banque']);
			            }

                        $souscription->setSouscription_montant($_POST['souscription_montant']);
                        $souscription->setSouscription_nombre($_POST['souscription_nombre']);
                        $souscription->setSouscription_programme($_POST['souscription_programme']);
						$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette($souscription_vignette);
                        $souscription->setCode_activite($_POST["code_activite"]);
                        $souscription->setId_metier($_POST["id_metier"]);
                        $souscription->setId_competence($_POST["id_competence"]);
                        $souscription->setSouscription_ville($_POST['souscription_ville']);
                        $souscription->setSouscription_quartier($_POST['souscription_quartier']);

						if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
			            }

                        $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                        $souscription->setSouscription_ancien_membre($_POST['numidentm']);
			            $souscription->setPublier(0);
						$souscription->setErreur(0);
						$souscription->setId_canton($_POST['id_canton']);
                        $souscription_mapper->save($souscription);


						////////////////////////////////////////////////////////////////////////////////////////

						$recubancaire = new Application_Model_EuRecubancaire();
                        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

						$compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
						$recubancaire->setRecubancaire_id($compteur_recubancaire);
                        $recubancaire->setRecubancaire_type($request->getParam("souscription_type"));
                        $recubancaire->setRecubancaire_numero($request->getParam("souscription_numero"));
                        $recubancaire->setRecubancaire_date_numero($request->getParam("souscription_date_numero"));
			            if($_POST['souscription_type'] == "Banque") {
                          $recubancaire->setRecubancaire_banque($request->getParam("souscription_banque"));
			            }
                        $recubancaire->setRecubancaire_montant($request->getParam("souscription_montant"));
                        $recubancaire->setRecubancaire_vignette($souscription_vignette);
                        $recubancaire->setRecubancaire_souscription($compteur_souscription);
			            $recubancaire->setPublier(1);
                        $recubancaire_mapper->save($recubancaire);




						$html = "";
						$html .= "Raison sociale : ".$_POST['souscription_raison']."<br />";
                        if($_POST["type_acteur"] == 'EI')   { $html .= "Type Association : Entreprise Industrie<br />";}
                        if($_POST["type_acteur"] == 'OE')   {$html .= "Type Association : Opérateur Economique<br />";}
                        if($_POST["type_acteur"] == 'OSE')  {$html .= "Type Association : Opérateur Socio-Economique<br />";}
                        if($_POST["type_acteur"] == 'PEI')  {$html .= "Type Association : Partenaire Entreprise Industrie<br />";}
                        if($_POST["type_acteur"] == 'POE')  {$html .= "Type Association : Partenaire Opérateur Economique<br />";}
                        if($_POST["type_acteur"] == 'POSE') {$html .= "Type Association : Partenaire Opérateur Socio-Economique<br />";}

                        $statutjuridique = new Application_Model_EuStatutJuridique();
                        $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                        $statutjuridiqueM->find($_POST["statut_juridique"], $statutjuridique);
                        $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br />";

                        $html .= "E-mail : ".$_POST['souscription_email']."<br />";
                        $html .= "Mobile : ".$_POST['souscription_mobile']."<br />";
                        $html .= "Ville : ".$_POST['souscription_ville']."<br />";
                        $html .= "Quartier : ".$_POST['souscription_quartier']."<br />";
                        $html .= "Programme : ".$_POST['souscription_programme']."<br />";

                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
		                $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
		                $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
		                $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";


                        $html .= "Type : ".$_POST['souscription_type']."<br />";

			            if($_POST['souscription_type'] == "Banque") {
                            $banque = new Application_Model_EuBanque();
                            $banqueM = new Application_Model_EuBanqueMapper();
                            $banqueM->find($_POST['souscription_banque'], $banque);
                            $html .= "Banque : ".$banque->libelle_banque."<br/>";
			            }
                        $html .= "Numero Reçu Banque ou Numéro Transaction Flooz: ".$_POST['souscription_numero']."<br />";
                        $html .= "Date Reçu Banque ou Transaction Flooz: ".$_POST['souscription_date_numero']."<br />";
                        $html .= "Montant : ".$_POST['souscription_montant']."<br />";
                        $html .= "Nombre : ".$_POST['souscription_nombre']."<br />";

                        $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                        $html .= "Vignette : <a href='https://esmcgie.com/".$souscription_vignette."'>".$souscription_vignette."</a>";

						$esmc_email	 = Util_Utils::getParamEsmc(3);
						$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                        Zend_Mail::setDefaultTransport($tr);
                        $mail = new Zend_Mail();
                        //$mail->setBodyText('Mon texte de test');
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($esmc_email, "ESMC - SIF");
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                        $mail->send();

						if($_POST['souscription_email'] != "") {
                            $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                            $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                            Zend_Mail::setDefaultTransport($tr);
                            $mail = new Zend_Mail();
                            //$mail->setBodyText('Mon texte de test');
                            $mail->setBodyHtml($html);
                            $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                            $mail->addTo($_POST['souscription_email'], $_POST['souscription_raison']);
                            $mail->setSubject('Ré-activation par souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                            $mail->send($tr);
			            }

                        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($request->getParam("souscription_banque"),$request->getParam("souscription_numero"),$request->getParam("souscription_date_numero"));
                        if(count($relevebancairedetail) > 0) {
                              if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']) {
							       validation_automatique($compteur_souscription);
								   // operation de transfert
								   $souscription = new Application_Model_EuSouscription();
		                           $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                   $souscriptionM->find($compteur_souscription, $souscription);
								   $date = new Zend_Date();
		                           $compte_map = new Application_Model_EuCompteMapper();
                                   $compte      = new Application_Model_EuCompte();
			                       $sms_money   = new Application_Model_EuSmsmoney();
                                   $money_map   = new Application_Model_EuSmsmoneyMapper();

			                       $det_sms   = new Application_Model_EuDetailSmsmoney();
			                       $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                       $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                       $det_vtesms  = new Application_Model_EuDetailVentesms();

			                       $mobile = $souscription->souscription_mobile;
			                       //$nbre_compte = $souscription->souscription_nombre;
			                       $fcaps = Util_Utils::getParametre('CAPS','valeur');

								   $mont_fs = Util_Utils::getParametre('FS','valeur');
                                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                                   $mont_kps = Util_Utils::getParametre('FKPS','valeur');

		                           //$montant = $nbre_compte * $fcaps;
		                           $membre_pbf = '0000000000000000001M';
	                               $code_compte_pbf = "NN-TR-".$membre_pbf;
			                       $ret = $compte_map->find($code_compte_pbf,$compte);

								   if($souscription->souscription_programme == 'KACM') {
				     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			             // Mise à jour du compte de transfert
				         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);
	                  } else {
			             $db->rollback();
			             $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
						 $this->view->numidentm = $_POST['numidentm'];
                         $this->view->raison = $_POST['souscription_raison'];
                         $this->view->ville_membre = $_POST['souscription_ville'];
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
					     $this->_redirect('/integrateur/reactivationsouscriptiongiepm/id/'.$_POST['numidentm']);
                         return;
			          }

					  $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
					  // Traitement des produits FS
				      // insertion dans la table eu_smsmoney
				      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
					  // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
				      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
					  // Traitement des produits FCPS
				      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
			          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
							$codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					        $nengfs = $money_map->findConuter() + 1;
							$sms_money->setNEng($nengfs)
                	                  ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

							$i = 0;
					        $reste = $mont_fs;
					        $nbre_lignesdetfs = count($lignesdetfs);
				            while ($reste > 0 && $i < $nbre_lignesdetfs) {
					              $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
						          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						          if ($reste >= $lignedetfs->getSolde_sms()) {
						                 //Mise à jour  des lignes d'enrégistrement
					                     //insertion dans la table eu_detailventesms
						                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                            ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
							              $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                             ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                             ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
						            } else  {
							              //Mise à jour  des lignes d'enrégistrement
						                  //insertion dans la table eu_detailventesms
						                  $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                             ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                  $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							              $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
						                  $reste = 0;
						             }
						             $i++;
					              }

								  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                	                        ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);

								  $j = 0;
					              $reste = $mont_fl;
					              $nbre_lignesdetfl = count($lignesdetfl);
					              while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                    $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
						                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                if ($reste >= $lignedetfl->getSolde_sms()) {
						                   //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
									       //insertion dans la table eu_detailventesms
						                   $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                              ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
							                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
						                  } else  {
							                 //Mise à jour  des lignes d'enrégistrement
											//insertion dans la table eu_detailventesms
						                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                               ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                      $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                  $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
						                      $reste = 0;
						                   }
						                                $j++;
					                   }

													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }

													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;

				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                    $codeactivation->setCode_membre(null);
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($souscription->souscription_id);
													$codeactivation->setOrigine_code('GIE');
				                                    $m_codeactivation->save($codeactivation);

				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);

										            }  else {
												        $db->rollback();
	                                                    $this->view->error = 'Erreur de traitement : le solde est null';
						                                $this->view->numidentm = $_POST['numidentm'];
                                                        $this->view->raison = $_POST['souscription_raison'];
                                                        $this->view->ville_membre = $_POST['souscription_ville'];
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
					                                    $this->_redirect('/integrateur/reactivationsouscriptiongiepm/id/'.$_POST['numidentm']);
												    }
				                             }

							  } else {
							       $db->commit();
                                   $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre dépôt à la banque.";
		                           $this->_redirect('/integrateur/ancienpm');/**/
					          }

                        }  else {
						      $db->commit();
                              $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée. Votre demande n’est pas encore vérifiée, revenez plus tard.";
		                      $this->_redirect('/integrateur/ancienpm');/**/
			            }



						$db->commit();
		                $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
		                $this->_redirect('/integrateur/ancienpm');
		              }
		            } catch (Exception $exc) {
				        $db->rollback();
				        $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				        return;
			        }

		    }   else {
			    $this->view->error = "Champs * obligatoire ...";
			}

		} else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Morale();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentm like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                   ->order('nomm ASC');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->numidentm = $trouvmembre->numidentm;
            $this->view->raison = $trouvmembre->nomm;
            //$this->view->code_rep = $trouvmembre->representant;
            $this->view->quartier_membre = $trouvmembre->qart;
            $this->view->ville_membre = $trouvmembre->ville;
            //$this->view->bp = $trouvmembre->bp;
            //$this->view->tel = $trouvmembre->tel;
            $this->view->portable = $trouvmembre->portable;
            $this->view->email = $trouvmembre->email;
            //$this->view->site_web = $trouvmembre->site;
        }

	}








    public function ancienppmcnpAction() {
        /* page integrateur/ancienppmcnp - Retrouve ancienne personne physique MCNP */

		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_EuAncienMembre();
                $select = $tabela->select();
                $select->where('ancien_code_membre like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $souscription = new Application_Model_DbTable_EuSouscription();
					$selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->ancien_code_membre);
				    $sous = $souscription->fetchAll($selection);
					if(count($sous) == 0) {
                      $this->_redirect('/integrateur/reactivationsouscriptionmcnppp/id/'.$trouvmembre->ancien_code_membre);
					} else {
					   $this->view->message = "Quittance de Réactivation déjà effectuée ...";
					}
                } else {  $this->view->message = "Pas de resultat ... Déjà Activé";}
            } else {  $this->view->message = "Champs * obligatoire ...";}

        }
    }


    public function reactivationsouscriptionmcnpppAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!=""
			    && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""
				&& isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!=""
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!=""
				&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
				&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
				&& isset($_POST['souscription_nom']) && $_POST['souscription_nom']!=""
				&& isset($_POST['souscription_prenom']) && $_POST['souscription_prenom']!="") {
		            $db = Zend_Db_Table::getDefaultAdapter();
				    $db->beginTransaction();
				    try {
					    $souscriptioneu = new Application_Model_DbTable_EuSouscription();
					    $selection = $souscriptioneu->select();
                        $selection->from($souscriptioneu)
                                  ->where('souscription_ancien_membre like ?',$_POST['ancien_code_membre']);
				        $sous = $souscriptioneu->fetchAll($selection);

					    if(count($sous) == 0) {

		                $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select();
						$select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_nom'])));
	                    $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_prenom'])));
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
						$date_id = Zend_Date::now();
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
		                include("Transfert.php");

						$compteur_souscription = $souscription_mapper->findConuter() + 1;
                        $souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne($_POST['souscription_personne']);
						$souscription->setSouscription_nom($_POST['souscription_nom']);
						$souscription->setSouscription_prenom($_POST['souscription_prenom']);

						$souscription->setSouscription_email($_POST['souscription_email']);
                        $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                        $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
						$souscription->setSouscription_nombre(1);
                        $souscription->setSouscription_programme($_POST['souscription_programme']);
						$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$souscription->setCode_activite($_POST["code_activite"]);
                        $souscription->setId_metier($_POST["id_metier"]);
                        $souscription->setId_competence($_POST["id_competence"]);
                        $souscription->setSouscription_ville($_POST['souscription_ville']);
                        $souscription->setSouscription_quartier($_POST['souscription_quartier']);

						if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }

                        $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                        $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
			            $souscription->setPublier(3);
						$souscription->setErreur(0);
						$souscription->setId_canton($_POST['id_canton']);
                        $souscription_mapper->save($souscription);

						$html = "";

						$html .= "Nom : ".$_POST['souscription_nom']."<br />";
                        $html .= "Prenom : ".$_POST['souscription_prenom']."<br />";
						$html .= "E-mail : ".$_POST['souscription_email']."<br />";
                        $html .= "Mobile : ".$_POST['souscription_mobile']."<br />";
                        $html .= "Ville : ".$_POST['souscription_ville']."<br />";
                        $html .= "Quartier : ".$_POST['souscription_quartier']."<br />";
                        $html .= "Programme : ".$_POST['souscription_programme']."<br />";

                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
		                $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
		                $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
		                $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";

                        $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";

						$htmlpdf = "";
						$htmlpdf .='
                        <page backbottom="15mm">
                        <page_footer>
                        <table>
                        <tr>
                           <td align="center">
	                       <hr>
	                       Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
                        </tr>
                        </table>
                        </page_footer>

                        <table width="768" border="0">
                        <tbody>
                        <tr>
                        <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
                        </tr>';

						$souscrip = new Application_Model_EuSouscription();
                        $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                        $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");

	                    if($souscription->souscription_programme == "KACM") {
		                    if($compteur_souscrip == 0) {$compteur_souscrip = 1029;}
		                        $unite = 0;
                                $htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="center"><strong><em><u>N° Reçu Personne Physique : PP'.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                                </tr>';
	                    }

						$souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
		                $souscriptionM->update($souscription);
						if($souscription->souscription_autonome == 1) {
						    $souscription_nombre = $souscription->souscription_nombre;
			                if($souscription->souscription_personne == "PP") {
				                $autonome = 0;
			                }
						}

						$souscription_nombre = $souscription->souscription_nombre;
			            if($souscription->souscription_personne == "PP") {
				           $autonome = 0;
			            }

						if($souscription->souscription_nombre > 0) {
	                        $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left"><em><u>Nombre de Comptes Marchands ré-activés: '.$souscription->souscription_nombre.'</u></em></td>
                            </tr>';
                        } else {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left">&nbsp;</td>
                            </tr>';
	                    }

                        $htmlpdf .= '
                            <tr>
                               <td colspan="2">&nbsp;</td>
                               <td colspan="2" align="center">&nbsp;</td>
                            </tr>';
                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><strong>Libellé</strong></em></td>
                            <td align="center"><em><strong>Nombre de compte ré-activé</strong></em></td>
                            <td align="center"><strong><em>Montant ré-activation</em></strong></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr style="background-color:#999;">
                            <td colspan="2" align="left"><em><strong>Ré-activation de Comptes Marchands</strong></em></td>
                            <td align="center"><em>'.$souscription_nombre.'</em></td>
                            <td align="center"><em>'.$autonome.' FCFA</em></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($autonome), 50).' CFA</em></td>
                            <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
                            Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                        </tr>';

	                    if($souscription->souscription_programme == "KACM") {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>';
		                }


                        $htmlpdf .= '
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="center">';
	                        if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")){
                            list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$souscription->souscription_vignette);
	                        $pourcent = 700 * 100 / $width;
	                        $width2 = 700;
	                        $height2 = $pourcent * $height / 100;
                            $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />
                            ';
                            }
                        $htmlpdf .= '  </td>
	                    </tr>

                        </tbody>
                        </table>
                        <br />
                        <br />
                        &nbsp;
                        </page>';
                        $htmlpdf .= '';

						////////////////////////////////////////////////////////////////////////////////
                        $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                        $somecontent = $htmlpdf;

                        // Assurons nous que le fichier est accessible en écriture
                        if (is_writable($filename)) {
                            // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                            // Le pointeur de fichier est placé à la fin du fichier
                            // c'est là que $somecontent sera placé
                        if (!$handle = fopen($filename, 'w+')) {
                            echo "Impossible d'ouvrir le fichier ($filename)";
                            exit;
                        }

                        // Ecrivons quelque chose dans notre fichier.
                        if (fwrite($handle, $somecontent) === FALSE) {
                            echo "Impossible d'écrire dans le fichier ($filename)";
                            exit;
                        }
                            //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                            fclose($handle);
                        } else {
                            echo "Le fichier $filename n'est pas accessible en écriture.";
                        }

                        ////////////////////////////////////////////////////////////////////////////
                        $file = $filename;
                        if (!is_dir("../../webfiles/pdf_souscription/")) {
                            mkdir("../../webfiles/pdf_souscription/", 0777);
                        }
                        /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

                        $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
                        $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                        $newchemin = "../../webfiles/pdf_souscription/";

                        copy($file, $newfile);

                        ob_start();
                        include(dirname(__FILE__).'/../'.$newfile);
                        $content = ob_get_clean();

                        // convert to PDF
                        require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                        try {
                            $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                            $html2pdf->pdf->SetDisplayMode('fullpage');
                            $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                            //$html2pdf->writeHTML($content);
                            $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                        }
                        catch(HTML2PDF_exception $e) {
                            echo $e;
                            exit;
                        }
                        $file = $newchemin.$newnom.'.pdf';
                        $filena	= $newnom.'.pdf';
                        unlink($newfile);

						///////////////////////////////////////////////////////

						$esmc_email	 = Util_Utils::getParamEsmc(3);
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                        Zend_Mail::setDefaultTransport($tr);
                        $mail = new Zend_Mail();
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($esmc_email, "ESMC - SIF");
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                        $mail->send();

						if($_POST['souscription_email'] != "") {
                            $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                            $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                            Zend_Mail::setDefaultTransport($tr);
                            $mail = new Zend_Mail();

                            $mail->setBodyHtml($html);
                            $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                            $mail->addTo($_POST['souscription_email'], $_POST['souscription_nom']." ".$_POST['souscription_prenom']);
                            $mail->setSubject('Ré-activation par souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                            $mail->send($tr);

			            }

						// operation de transfert des codes kacm
				$date = new Zend_Date();
		        $compte_map = new Application_Model_EuCompteMapper();
                $compte      = new Application_Model_EuCompte();
			    $sms_money   = new Application_Model_EuSmsmoney();
                $money_map   = new Application_Model_EuSmsmoneyMapper();

			    $det_sms   = new Application_Model_EuDetailSmsmoney();
			    $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			    $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			    $det_vtesms  = new Application_Model_EuDetailVentesms();

			    $mobile = $souscription->souscription_mobile;
			    //$nbre_compte = $souscription->souscription_nombre;
			    $fcaps = Util_Utils::getParametre('CAPS','valeur');

				$mont_fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $mont_kps = Util_Utils::getParametre('FKPS','valeur');

		        //$montant = $nbre_compte * $fcaps;
		        $membre_pbf = '0000000000000000001M';
	            $code_compte_pbf = "NN-TR-".$membre_pbf;
			    $ret = $compte_map->find($code_compte_pbf,$compte);
				if($souscription->souscription_programme == 'KACM') {
				     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			             // Mise à jour du compte de transfert
				         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);
	                  } else {
			             $db->rollback();
			             $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
						 $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                         $this->view->nom_membre = $_POST['souscription_nom'];
                         $this->view->prenom_membre = $_POST['souscription_prenom'];
                         $this->view->ville_membre = $_POST['souscription_ville'];
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
					     $this->_redirect('/integrateur/reactivationsouscriptionmcnppp/id/'.$_POST['ancien_code_membre']);
                         return;
			          }

					  $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
					  // Traitement des produits FS
				      // insertion dans la table eu_smsmoney
				      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
					  // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
				      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
					  // Traitement des produits FCPS
				      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
			          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
							$codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					        $nengfs = $money_map->findConuter() + 1;
							$sms_money->setNEng($nengfs)
                	                  ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

							$i = 0;
					        $reste = $mont_fs;
					        $nbre_lignesdetfs = count($lignesdetfs);
				            while ($reste > 0 && $i < $nbre_lignesdetfs) {
					              $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
						          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						          if ($reste >= $lignedetfs->getSolde_sms()) {
						                 //Mise à jour  des lignes d'enrégistrement
					                     //insertion dans la table eu_detailventesms
						                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                            ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
							              $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                             ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                             ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
						            } else  {
							              //Mise à jour  des lignes d'enrégistrement
						                  //insertion dans la table eu_detailventesms
						                  $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                             ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                  $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							              $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
						                  $reste = 0;
						             }
						             $i++;
					              }

								  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                	                        ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);

								  $j = 0;
					              $reste = $mont_fl;
					              $nbre_lignesdetfl = count($lignesdetfl);
					              while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                    $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
						                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                if ($reste >= $lignedetfl->getSolde_sms()) {
						                   //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
									       //insertion dans la table eu_detailventesms
						                   $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                              ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
							                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
						                  } else  {
							                 //Mise à jour  des lignes d'enrégistrement
											//insertion dans la table eu_detailventesms
						                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                               ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                      $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                  $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
						                      $reste = 0;
						                   }
						                                $j++;
					                   }

													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }

													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;

				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                    $codeactivation->setCode_membre(null);
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($souscription->souscription_id);
													$codeactivation->setOrigine_code('MCNP');
				                                    $m_codeactivation->save($codeactivation);

				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);

										            }  else {
												        $db->rollback();
	                                                    $this->view->error = 'Erreur de traitement : le solde est null';
						                                $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                                                        $this->view->nom_membre = $_POST['souscription_nom'];
                                                        $this->view->prenom_membre = $_POST['souscription_prenom'];
                                                        $this->view->ville_membre = $_POST['souscription_ville'];
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
					                                    $this->_redirect('/integrateur/reactivationsouscriptionmcnppp/id/'.$_POST['ancien_code_membre']);
												    }
				}

		                $db->commit();
		                $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
		                $this->_redirect('/integrateur/ancienppmcnp');
					  }
		            } catch (Exception $exc) {
				        $db->rollback();
				        $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				        return;
			        }

		        } else {
			        $this->view->error = "Champs * obligatoire ...";
			    }
		} else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_nais_membre as datenaismembre"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->nom_membre = $trouvmembre->nom_membre;
            $this->view->prenom_membre = $trouvmembre->prenom_membre;
            //$this->view->sexe = $trouvmembre->sexe_membre;
            //$this->view->profession = $trouvmembre->profession_membre;
            //$this->view->tel = $trouvmembre->tel_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
            //$this->view->pere = $trouvmembre->pere_membre;
            //$this->view->mere = $trouvmembre->mere_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            //$this->view->bp = $trouvmembre->bp_membre;
            //$this->view->nbre_enf = $trouvmembre->nbr_enf_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->portable = $trouvmembre->portable_membre;
            //$this->view->formation = $trouvmembre->formation;
            //$this->view->lieu_nais = $trouvmembre->lieu_nais_membre;
            //$this->view->datnais = $trouvmembre->datenaismembre;
            //$this->view->sitfam = $trouvmembre->sitfam_membre;
            //$this->view->nation = $trouvmembre->id_pays;
            //$this->view->religion = $trouvmembre->id_religion_membre;
        }

    }






    public function ancienpmmcnpAction() {
        /* page integrateur/ancienpmmcnp - Retrouve ancienne personne morale MCNP */
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_EuAncienMembre();
                $select = $tabela->select();
                $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                       ->where('ancien_code_membre LIKE ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $table  = new Application_Model_DbTable_EuSouscription();
				    $selection = $table->select();
                    $selection->from($table)
                              ->where('souscription_ancien_membre like ?',$_POST['code_membre']);
					$sous = $table->fetchAll($selection);
                    if(count($sous) == 0) {
                       $this->_redirect('/integrateur/reactivationsouscriptionmcnppm/id/'.$trouvmembre->ancien_code_membre);
					} else {
                       $this->view->message = "Quittance de Réactivation déjà effectuée ...";
                    }
                } else {  $this->view->message = "Pas de resultat ... Déjà Activé";}
                } else {  $this->view->message = "Champs * obligatoire ...";}

        }
    }




    public function reactivationsouscriptionmcnppmAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	    if (isset($_POST['ok']) && $_POST['ok']=="ok")  {
	        if (isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!=""
			    && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""
				&& isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!=""
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!=""
				&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
				&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
				&& isset($_POST['souscription_raison']) && $_POST['souscription_raison']!=""
				&& isset($_POST['type_acteur']) && $_POST['type_acteur']!=""
				&& isset($_POST['statut_juridique']) && $_POST['statut_juridique']!="")  {
	            $db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
				    $souscriptioneu = new Application_Model_DbTable_EuSouscription();
					$selection = $souscriptioneu->select();
                    $selection->from($souscriptioneu)
                              ->where('souscription_ancien_membre like ?',$_POST['ancien_code_membre']);
				    $sous = $souscriptioneu->fetchAll($selection);

					if(count($sous) == 0) {

				    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                $select = $eusouscription->select();
					$select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));
                    $select->order(array("souscription_id ASC"));
	                $select->limit(1);
	                $rowseusouscription = $eusouscription->fetchRow($select);
		            if(count($rowseusouscription) > 0) {
			          $souscription_ok = 1;
			          $souscription_first = $rowseusouscription->souscription_id;
			        } else {
			          $souscription_ok = 0;
			        }

					$date_id = Zend_Date::now();
                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();
		            include("Transfert.php");

					if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
		              $chemin	= "souscriptions";
		              $file = $_FILES['souscription_vignette']['name'];
		              $file1 = 'souscription_vignette';
		              $souscription_vignette = $chemin."/".transfert($chemin,$file1);
		            } else {
					  $souscription_vignette = "";
					}
					$compteur_souscription = $souscription_mapper->findConuter() + 1;
                    $souscription->setSouscription_id($compteur_souscription);
                    $souscription->setSouscription_personne($_POST['souscription_personne']);

					$souscription->setSouscription_raison($_POST['souscription_raison']);
                    $souscription->setCode_type_acteur($_POST["type_acteur"]);
                    $souscription->setCode_statut($_POST["statut_juridique"]);

					$souscription->setSouscription_email($_POST['souscription_email']);
                    $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                    $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

					$tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    $result = $tafl->find($code_fl);

					if(count($result) == 0)  {
                        $souscription->setSouscription_type($_POST['souscription_type']);
                        $souscription->setSouscription_numero($_POST['souscription_numero']);
                        $souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
			            if($_POST['souscription_type'] == "Banque") {
                            $souscription->setSouscription_banque($_POST['souscription_banque']);
			            }
                        $souscription->setSouscription_montant($_POST['souscription_montant']);
                        $souscription->setSouscription_nombre($_POST['souscription_nombre']);
						$souscription->setPublier(0);
				    } else {
					    $souscription->setPublier(3);
					}
					$souscription->setSouscription_programme($_POST['souscription_programme']);
					$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $souscription->setSouscription_vignette($souscription_vignette);
                    $souscription->setCode_activite($_POST["code_activite"]);
                    $souscription->setId_metier($_POST["id_metier"]);
                    $souscription->setId_competence($_POST["id_competence"]);
                    $souscription->setSouscription_ville($_POST['souscription_ville']);
                    $souscription->setSouscription_quartier($_POST['souscription_quartier']);

					if($souscription_ok == 1) {
                      $souscription->setSouscription_souscription($souscription_first);
				    } else {
                      $souscription->setSouscription_souscription($compteur_souscription);
				    }

                    $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                    $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
					$souscription->setId_canton($_POST['id_canton']);
					$souscription->setErreur(0);
                    $souscription_mapper->save($souscription);

					$html = "";
                    $html .= "Raison sociale : ".$_POST['souscription_raison']."<br/>";
                    if($_POST["type_acteur"] == 'EI')   {$html .= "Type Association : Entreprise Industrie<br/>";}
                    if($_POST["type_acteur"] == 'OE')   {$html .= "Type Association : Opérateur Economique<br/>";}
                    if($_POST["type_acteur"] == 'OSE')  {$html .= "Type Association : Opérateur Socio-Economique<br/>";}
                    if($_POST["type_acteur"] == 'PEI')  {$html .= "Type Association : Partenaire Entreprise Industrie<br/>";}
                    if($_POST["type_acteur"] == 'POE')  {$html .= "Type Association : Partenaire Opérateur Economique<br/>";}
                    if($_POST["type_acteur"] == 'POSE') {$html .= "Type Association : Partenaire Opérateur Socio-Economique<br/>";}

					$statutjuridique = new Application_Model_EuStatutJuridique();
                    $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                    $statutjuridiqueM->find($_POST["statut_juridique"], $statutjuridique);
                    $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br />";

                    $html .= "E-mail : ".$_POST['souscription_email']."<br/>";
                    $html .= "Mobile : ".$_POST['souscription_mobile']."<br/>";
                    $html .= "Ville : ".$_POST['souscription_ville']."<br/>";
                    $html .= "Quartier : ".$_POST['souscription_quartier']."<br/>";
                    $html .= "Programme : ".$_POST['souscription_programme']."<br/>";

                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
		                $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
		                $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
		                $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";


					$tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    $result = $tafl->find($code_fl);

					if(count($result) == 0) {
                        $html .= "Type : ".$_POST['souscription_type']."<br/>";
			            if($_POST['souscription_type'] == "Banque") {
                            $banque = new Application_Model_EuBanque();
                            $banqueM = new Application_Model_EuBanqueMapper();
                            $banqueM->find($_POST['souscription_banque'], $banque);
                            $html .= "Banque : ".$banque->libelle_banque."<br/>";
			            }

                        $html .= "Numero Reçu Banque ou Numéro Transaction Flooz: ".$_POST['souscription_numero']."<br/>";
                        $html .= "Date Reçu Banque ou Transaction Flooz: ".$_POST['souscription_date_numero']."<br/>";
                        $html .= "Montant : ".$_POST['souscription_montant']."<br/>";
                        $html .= "Nombre : ".$_POST['souscription_nombre']."<br/>";

						///////////////////////////////////////////////////////////////////////////////////////

						$recubancaire = new Application_Model_EuRecubancaire();
                        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();

                        $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
                        $recubancaire->setRecubancaire_id($compteur_recubancaire);
                        $recubancaire->setRecubancaire_type($request->getParam("souscription_type"));
                        $recubancaire->setRecubancaire_numero($request->getParam("souscription_numero"));
                        $recubancaire->setRecubancaire_date_numero($request->getParam("souscription_date_numero"));
			            if($_POST['souscription_type'] == "Banque") {
                                $recubancaire->setRecubancaire_banque($request->getParam("souscription_banque"));
			            }
                        $recubancaire->setRecubancaire_montant($request->getParam("souscription_montant"));
                        $recubancaire->setRecubancaire_vignette($souscription_vignette);
                        $recubancaire->setRecubancaire_souscription($compteur_souscription);
			            $recubancaire->setPublier(1);
                        $recubancaire_mapper->save($recubancaire);

						$relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($request->getParam("souscription_banque"),$request->getParam("souscription_numero"),$request->getParam("souscription_date_numero"));
                        if(count($relevebancairedetail) > 0) {
                              if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']) {
							      include("automatisation.php");
								  validation_automatique($compteur_souscription);
								  // operation de transfert
								   $souscription = new Application_Model_EuSouscription();
		                           $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                   $souscriptionM->find($compteur_souscription, $souscription);
								   $date = new Zend_Date();
		                           $compte_map = new Application_Model_EuCompteMapper();
                                   $compte      = new Application_Model_EuCompte();
			                       $sms_money   = new Application_Model_EuSmsmoney();
                                   $money_map   = new Application_Model_EuSmsmoneyMapper();

			                       $det_sms   = new Application_Model_EuDetailSmsmoney();
			                       $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                       $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                       $det_vtesms  = new Application_Model_EuDetailVentesms();

			                       $mobile = $souscription->souscription_mobile;
			                       //$nbre_compte = $souscription->souscription_nombre;
			                       $fcaps = Util_Utils::getParametre('CAPS','valeur');

								   $mont_fs = Util_Utils::getParametre('FS','valeur');
                                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                                   $mont_kps = Util_Utils::getParametre('FKPS','valeur');

		                           //$montant = $nbre_compte * $fcaps;
		                           $membre_pbf = '0000000000000000001M';
	                               $code_compte_pbf = "NN-TR-".$membre_pbf;
			                       $ret = $compte_map->find($code_compte_pbf,$compte);

								   if($souscription->souscription_programme == 'KACM') {
				     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			             // Mise à jour du compte de transfert
				         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);
	                  } else {
			             $db->rollback();
			             $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
						 $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                         $this->view->raison = $_POST['souscription_raison'];
                         $this->view->ville_membre = $_POST['souscription_ville'];
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
						 $this->view->statut_juridique = $_POST['statut_juridique'];
                         $this->view->type_acteur = $_POST['type_acteur'];
					     $this->_redirect('/integrateur/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']);
                         return;
			          }

					  $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
					  // Traitement des produits FS
				      // insertion dans la table eu_smsmoney
				      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
					  // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
				      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
					  // Traitement des produits FCPS
				      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
			          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
							$codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					        $nengfs = $money_map->findConuter() + 1;
							$sms_money->setNEng($nengfs)
                	                  ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

							$i = 0;
					        $reste = $mont_fs;
					        $nbre_lignesdetfs = count($lignesdetfs);
				            while ($reste > 0 && $i < $nbre_lignesdetfs) {
					              $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
						          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						          if ($reste >= $lignedetfs->getSolde_sms()) {
						                 //Mise à jour  des lignes d'enrégistrement
					                     //insertion dans la table eu_detailventesms
						                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                            ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
							              $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                             ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                             ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
						            } else  {
							              //Mise à jour  des lignes d'enrégistrement
						                  //insertion dans la table eu_detailventesms
						                  $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                             ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                  $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							              $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
						                  $reste = 0;
						             }
						             $i++;
					              }

								  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                	                        ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);

								  $j = 0;
					              $reste = $mont_fl;
					              $nbre_lignesdetfl = count($lignesdetfl);
					              while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                    $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
						                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                if ($reste >= $lignedetfl->getSolde_sms()) {
						                   //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
									       //insertion dans la table eu_detailventesms
						                   $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                              ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
							                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
						                  } else  {
							                 //Mise à jour  des lignes d'enrégistrement
											//insertion dans la table eu_detailventesms
						                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                               ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                      $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                  $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
						                      $reste = 0;
						                   }
						                                $j++;
					                   }

													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }

													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;

				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                    $codeactivation->setCode_membre(null);
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($souscription->souscription_id);
													$codeactivation->setOrigine_code('MCNP');
				                                    $m_codeactivation->save($codeactivation);

				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);

										            }  else {
												        $db->rollback();
	                                                    $this->view->error = 'Erreur de traitement : le solde est null';
						                                $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                                                        $this->view->raison = $_POST['souscription_raison'];
                                                        $this->view->ville_membre = $_POST['souscription_ville'];
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
														$this->view->statut_juridique = $_POST['statut_juridique'];
                                                        $this->view->type_acteur = $_POST['type_acteur'];
					                                    $this->_redirect('/integrateur/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']);
												    }
				                             }
						      } else {
							       $db->commit();
                                   $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre dépôt à la banque.";
		                           $this->_redirect('/integrateur/ancienpmmcnp');

							  }

						} else {
						      $db->commit();
                              $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée. Votre demande n’est pas encore vérifiée, revenez plus tard.";
		                      $this->_redirect('/integrateur/ancienpmmcnp');
						}

				    }
					else {
					    $htmlpdf = "";
                        $htmlpdf .='
                        <page backbottom="15mm">
                        <page_footer>
                        <table>
                        <tr>
                           <td align="center">
	                       <hr>
	                       Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
                        </tr>
                        </table>
                        </page_footer>

                        <table width="768" border="0">
                        <tbody>
                        <tr>
                           <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif" width="738" height="156" /></td>
                        </tr>';

						$souscrip = new Application_Model_EuSouscription();
                        $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                        $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, $souscription->code_type_acteur);

		                if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OSE"){$compteur_souscrip = 4;}
		                if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OE"){$compteur_souscrip = 5;}
		                $unite = 0;
                        $htmlpdf .= '
                        <tr>
                            <td colspan="4" align="center"><strong><em><u>N° Reçu '.$souscription->code_type_acteur.' : '.$souscription->code_type_acteur.''.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                        </tr>';
						$souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
		                $souscriptionM->update($souscription);
						$autonome = 0;

						$htmlpdf .= '
                        <tr>
                            <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_raison.'</em></strong></p></td>
                        </tr>';

						if($souscription->souscription_nombre > 0) {
	                        $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left"><em><u>Nombre de Comptes Marchands ré-activés: '.$souscription->souscription_nombre.'</u></em></td>
                            </tr>';
                        } else {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left">&nbsp;</td>
                            </tr>';
	                    }

						$htmlpdf .= '
                        <tr>
                            <td colspan="2">&nbsp;</td>
                            <td colspan="2" align="center">&nbsp;</td>
                        </tr>';
                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><strong>Libellé</strong></em></td>
                            <td align="center"><em><strong>Nombre de compte ré-activé</strong></em></td>
                            <td align="center"><strong><em>Montant ré-activation</em></strong></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr style="background-color:#999;">
                            <td colspan="2" align="left"><em><strong>Ré-activation de Comptes Marchands</strong></em></td>
                            <td align="center"><em>'.$souscription_nombre.'</em></td>
                            <td align="center"><em>'.$autonome.' FCFA</em></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($autonome), 50).' CFA</em></td>
                            <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
                            Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                        </tr>';

	                    if($souscription->souscription_programme == "KACM") {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>';
		                }

						$htmlpdf .= '
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="center">';
	                        if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")){
                            list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$souscription->souscription_vignette);
	                        $pourcent = 700 * 100 / $width;
	                        $width2 = 700;
	                        $height2 = $pourcent * $height / 100;
                            $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />
                            ';
                            }
                        $htmlpdf .= '  </td>
	                    </tr>
                        </tbody>
                        </table>
                        <br />
                        <br />
                        &nbsp;
                        </page>';
                        $htmlpdf .= '';

						////////////////////////////////////////////////////////////////////////////////
                        $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                        $somecontent = $htmlpdf;

                        // Assurons nous que le fichier est accessible en écriture
                        if (is_writable($filename)) {
                            // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                            // Le pointeur de fichier est placé à la fin du fichier
                             // c'est là que $somecontent sera placé
                        if (!$handle = fopen($filename, 'w+')) {
                            echo "Impossible d'ouvrir le fichier ($filename)";
                            exit;
                        }

                        // Ecrivons quelque chose dans notre fichier.
                        if (fwrite($handle, $somecontent) === FALSE) {
                            echo "Impossible d'écrire dans le fichier ($filename)";
                            exit;
                        }
                        //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                        fclose($handle);

                        } else {
                           echo "Le fichier $filename n'est pas accessible en écriture.";
                        }

                        ////////////////////////////////////////////////////////////////////////////
                        $file = $filename;
                        if (!is_dir("../../webfiles/pdf_souscription/")) {
                            mkdir("../../webfiles/pdf_souscription/", 0777);
                        }
                        /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

                        $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
                        $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                        $newchemin = "../../webfiles/pdf_souscription/";
                        copy($file, $newfile);
                        ob_start();
                        include(dirname(__FILE__).'/../'.$newfile);
                        $content = ob_get_clean();

                        // convert to PDF
                        require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                        try {
                            $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                            $html2pdf->pdf->SetDisplayMode('fullpage');
                            $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                            //$html2pdf->writeHTML($content);
                            $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                        }
                        catch(HTML2PDF_exception $e) {
                            echo $e;
                            exit;
                        }

                        $file = $newchemin.$newnom.'.pdf';
                        $filena	= $newnom.'.pdf';

                        unlink($newfile);

						// operation de transfert
						$souscription = new Application_Model_EuSouscription();
		                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                   $souscriptionM->find($compteur_souscription, $souscription);
								   $date = new Zend_Date();
		                           $compte_map = new Application_Model_EuCompteMapper();
                                   $compte      = new Application_Model_EuCompte();
			                       $sms_money   = new Application_Model_EuSmsmoney();
                                   $money_map   = new Application_Model_EuSmsmoneyMapper();

			                       $det_sms   = new Application_Model_EuDetailSmsmoney();
			                       $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                       $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                       $det_vtesms  = new Application_Model_EuDetailVentesms();

			                       $mobile = $souscription->souscription_mobile;
			                       //$nbre_compte = $souscription->souscription_nombre;
			                       $fcaps = Util_Utils::getParametre('CAPS','valeur');

								   $mont_fs = Util_Utils::getParametre('FS','valeur');
                                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                                   $mont_kps = Util_Utils::getParametre('FKPS','valeur');

		                           //$montant = $nbre_compte * $fcaps;
		                           $membre_pbf = '0000000000000000001M';
	                               $code_compte_pbf = "NN-TR-".$membre_pbf;
			                       $ret = $compte_map->find($code_compte_pbf,$compte);

								   if($souscription->souscription_programme == 'KACM') {
				     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			             // Mise à jour du compte de transfert
				         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);
	                  } else {
			             $db->rollback();
			             $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
						 $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                         $this->view->raison = $_POST['souscription_raison'];
                         $this->view->ville_membre = $_POST['souscription_ville'];
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
						 $this->view->statut_juridique = $_POST['statut_juridique'];
                         $this->view->type_acteur = $_POST['type_acteur'];
					     $this->_redirect('/integrateur/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']);
                         return;
			          }

					  $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
					  // Traitement des produits FS
				      // insertion dans la table eu_smsmoney
				      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
					  // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
				      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
					  // Traitement des produits FCPS
				      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
			          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
							$codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					        $nengfs = $money_map->findConuter() + 1;
							$sms_money->setNEng($nengfs)
                	                  ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

							$i = 0;
					        $reste = $mont_fs;
					        $nbre_lignesdetfs = count($lignesdetfs);
				            while ($reste > 0 && $i < $nbre_lignesdetfs) {
					              $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
						          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						          if ($reste >= $lignedetfs->getSolde_sms()) {
						                 //Mise à jour  des lignes d'enrégistrement
					                     //insertion dans la table eu_detailventesms
						                 $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                            ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
							              $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                             ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                             ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
						            } else  {
							              //Mise à jour  des lignes d'enrégistrement
						                  //insertion dans la table eu_detailventesms
						                  $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                             ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                  $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							              $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
						                  $reste = 0;
						             }
						             $i++;
					              }

								  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                	                        ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);

								  $j = 0;
					              $reste = $mont_fl;
					              $nbre_lignesdetfl = count($lignesdetfl);
					              while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                    $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
						                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                if ($reste >= $lignedetfl->getSolde_sms()) {
						                   //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
									       //insertion dans la table eu_detailventesms
						                   $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                              ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
							                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
						                  } else  {
							                 //Mise à jour  des lignes d'enrégistrement
											//insertion dans la table eu_detailventesms
						                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                               ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                      $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                  $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
						                      $reste = 0;
						                   }
						                                $j++;
					                   }

													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }

													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;

				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
				                                    $codeactivation->setCode_membre(null);
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($souscription->souscription_id);
				                                    $m_codeactivation->save($codeactivation);

				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);

										            }  else {
												        $db->rollback();
	                                                    $this->view->error = 'Erreur de traitement : le solde est null';
						                                $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                                                        $this->view->raison = $_POST['souscription_raison'];
                                                        $this->view->ville_membre = $_POST['souscription_ville'];
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
														$this->view->statut_juridique = $_POST['statut_juridique'];
                                                        $this->view->type_acteur = $_POST['type_acteur'];
					                                    $this->_redirect('/integrateur/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']);
												    }
				                             }






					}
					$html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                    $tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    $result = $tafl->find($code_fl);
				    if(count($result) == 0) {
                       $html .= "Vignette : <a href='https://esmcgie.com/".$souscription_vignette."'>".$souscription_vignette."</a>";
				    }

					$esmc_email	 = Util_Utils::getParamEsmc(3);
                    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                    Zend_Mail::setDefaultTransport($tr);
                    $mail = new Zend_Mail();
                    //$mail->setBodyText('Mon texte de test');
                    $mail->setBodyHtml($html);
                    $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                    $mail->addTo($esmc_email, "ESMC - SIF");
                    $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                    $mail->send();

					if($_POST['souscription_email'] != "") {
                        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                        Zend_Mail::setDefaultTransport($tr);
                        $mail = new Zend_Mail();
                        //$mail->setBodyText('Mon texte de test');
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($_POST['souscription_email'], $_POST['souscription_raison']);
                        $mail->setSubject('Ré-activation par souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                        $mail->send($tr);
			        }
	                $db->commit();
		            $sessionmembreasso->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
		            $this->_redirect('/integrateur/ancienpmmcnp');
				  }
				} catch (Exception $exc) {
				    $db->rollback();
				    $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				    return;
			    }
            }   else {  $this->view->error = "Champs * obligatoire ...";  }

        }   else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->raison = $trouvmembre->raison_sociale;
            //$this->view->code_rep = $trouvmembre->nom_membre." ".$trouvmembre->prenom_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
             //$this->view->bp = $trouvmembre->bp_membre;
            //$this->view->tel = $trouvmembre->tel_membre;
            $this->view->portable = $trouvmembre->portable_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->site_web = $trouvmembre->site_web;
            $this->view->statut_juridique = $trouvmembre->code_statut;
            $this->view->type_acteur = $trouvmembre->code_type_acteur;
        }


    }






   public function enrolementsms2Action() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

		$t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

		$request = $this->getRequest ();
		if ($request->isPost ()) {
		   if (isset($_POST['code_fs']) && $_POST['code_fs']!=""
		      && isset($_POST['code_fl']) && $_POST['code_fl']!=""
		      && isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
		      && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
		      && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
		      && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
		      && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
		      && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
		      && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
		      && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
		      && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
		      && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
		      //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
		      && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
		      && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
		      && isset($_POST['id_pays']) && $_POST['id_pays']!=""
		      && isset($_POST['code_agence']) && $_POST['code_agence']!="") {



                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


				    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
					$code_agence = $request->getParam("code_agence");
                    $code_zone = substr($_POST['code_agence'], 0, 3);
                    $id_pays = $_POST['id_pays'];
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

					$date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

					$souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
					$ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
				    try {
				        $code_fs = $request->getParam("code_fs");
                        $code_fl = $request->getParam("code_fl");
                        $code_fkps = $request->getParam("code_fkps");

						if($code_fs != "") {
						    $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }
                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
							if ($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

							if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

							$date_nais = new Zend_Date($_POST["date_nais_membre"]);

							$trouvemembre = $mapper->fetchByMembre($request->getParam("nom_membre"),$request->getParam("prenom_membre"),$date_nais->toString('yyyy-MM-dd'),$request->getParam("lieu_nais_membre"));
						    if($trouvemembre != false) {
						       $sessionmembreasso->error = "Ouverture de compte marchand déjà effectué pour ce membre !!!";
                               $db->rollback();
                               $this->view->nom_membre = $request->getParam("nom_membre");
                               $this->view->prenom_membre = $request->getParam("prenom_membre");
                               $this->view->sexe = $request->getParam("sexe_membre");
                               $this->view->sitfam = $request->getParam("sitfam_membre");
                               $this->view->datnais = $request->getParam("date_nais_membre");
                               $this->view->nation = $request->getParam("nationalite_membre");
                               $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                               $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                               $this->view->formation = $request->getParam("formation");
                               $this->view->profession = $request->getParam("profession_membre");
                               $this->view->religion = $request->getParam("religion_membre");
                               $this->view->pere = $request->getParam("pere_membre");
                               $this->view->mere = $request->getParam("mere_membre");
                               $this->view->quartier_membre = $request->getParam("quartier_membre");
                               $this->view->ville_membre = $request->getParam("ville_membre");
                               $this->view->bp = $request->getParam("bp_membre");
                               //$this->view->tel = $request->getParam("tel_membre");
                               $this->view->email = $request->getParam("email_membre");
                               //$this->view->portable = $request->getParam("portable_membre");
                               return;
						    }


                            if ($date_nais >= $date_idd) {
                                $sessionmembreasso->error = "La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


            ///////////////////////////////preinscription
            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            //$compteur_preinscription = $preinsc_mapper->findConuter() + 1;
            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            //$preinscription->setId_preinscription($compteur_preinscription)
            $preinscription->setNom_membre($request->getParam("nom_membre"))
                           ->setPrenom_membre($request->getParam("prenom_membre"))
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre(null)
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
						   ->setCode_agence($code_agence)
                           ->setCode_fs($request->getParam("code_fs"))
                           ->setCode_fl($request->getParam("code_fl"))
                		   ->setCode_fkps($request->getParam("code_fkps"))
						   ->setId_canton($request->getParam("id_canton"));
                $preinscription->setPublier(1);
                $preinsc_mapper->save($preinscription);
				
				$compteur_preinscription = $db->lastInsertId();


                ///////////////////////////validation acnev
								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

								//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
							    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												
								$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
							    $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
								$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							    $validation_quittance->setPublier(1);
								$validation_quittance_mapper->save($validation_quittance);


                /////////////////////////validation filere
								$preinscription = new Application_Model_EuPreinscription();
								$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
								$preinscriptionM->find($compteur_preinscription, $preinscription);

								$preinscription->setPublier(2);
								$preinscriptionM->update($preinscription);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

								//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
								//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
								$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
							    $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
								$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
								$validation_quittance->setPublier(1);
								$validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
								$preinscription = new Application_Model_EuPreinscription();
								$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
								$preinscriptionM->find($compteur_preinscription, $preinscription);

								$preinscription->setPublier(3);
								$preinscriptionM->update($preinscription);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

												//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
												$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


							$membre->setCode_membre($code)
                                   ->setNom_membre($request->getParam("nom_membre"))
                                   ->setPrenom_membre($request->getParam("prenom_membre"))
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre(null)
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
								   ->setDesactiver(2)
                                   ->setEtat_membre(null)
								   ->setId_canton($request->getParam("id_canton"));
                            $mapper->save($membre);


								/////////////
								$preinscription = new Application_Model_EuPreinscription();
								$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
								$preinscriptionM->find($compteur_preinscription, $preinscription);

								$preinscription->setCode_membre($code);
								$preinscriptionM->update($preinscription);


                            //for($i = 0; $i < count($_POST['numero_telephone']); $i++)  {
                                $compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
                                $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
                                if($compagnie == 1)  {
                                   $sessionmembreasso->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
                                   $db->rollback();
                                   return;								   
                                } else {
                                    //$date_id = new Zend_Date(Zend_Date::ISO_8601);
                                    $telephone = new Application_Model_EuTelephone();
                                    $m_telephone = new Application_Model_EuTelephoneMapper();

                                    //$compteurte = $m_telephone->findConuter() + 1;
                                    //$telephone->setId_telephone($compteurte);
									
                                    $telephone->setNumero_telephone($numero_telephone);
                                    $telephone->setCompagnie_telephone($compagnie);
                                    $telephone->setCode_membre($code);
                                    $m_telephone->save($telephone);
                                }
                            //}



						// insertion dans la table eu_code_activation
				        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				        $codeactivation = new Application_Model_EuCodeActivation();

						$m_dvente = new Application_Model_EuDepotVenteMapper();
				        $dvente = new Application_Model_EuDepotVente();


						$findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
						if($findcode != NULL)  {
						    $findcode = $findcode[0];
							//$id_souscription = $findcode->souscription_id;
							//$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
							//if($findsouscrip != FALSE) {
							//}
							$souscription_mapper->find($findcode->souscription_id,$souscription);
							$ancien_code = $souscription->souscription_ancien_membre;
							//$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
							//$id_depot = $findsousdv->id_depot;
							//$trouvedepot = $m_dvente->find($id_depot,$dvente);
							$trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
							$codeactivation->setCode_membre($code);
							$m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
						}
						else {
							$sessionmembreasso->error = "Les codes d'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            //$this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            //$this->view->portable = $_POST["portable_membre"];
                            return;
					    }

							$mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
							$findmem = $mem_mapper->find($code,$mem);

							if(($ancien_code == '') || ($ancien_code == NULL)) {
							  $mem->setEtat_membre('N');
							} else {
							  if(substr($ancien_code,-1,1) == 'M') {
							     $sessionmembreasso->error = "Ce membre n'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->nom_membre = $_POST["nom_membre"];
                                 $this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 //$this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 //$this->view->portable = $_POST["portable_membre"];
                                 return;
							  }

                              $mem->setEtat_membre('A');
							  //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);
                              }
							  // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                              }
                            }
							$mem_mapper->update($mem);

							$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
						    for($i = 0; $i < count($_POST['code_banque']); $i++) {
                  if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
                                  }
                                }

								$place = new Application_Model_EuOperation();
								$mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrôlement';
                                $type_op = 'AERL';
                                //Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                                
								$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                                $place->setId_utilisateur(null);
                                $place->setCode_membre($code);
                                $place->setCode_membre_morale(null);
                                $place->setMontant_op($fs);
                                $place->setCode_produit('FS');
                                $place->setLib_op($lib_op);
                                $place->setType_op($type_op);
                                $place->setCode_cat('TFS');
                                $mapper_op->save($place);
								
								
								
								$tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
								if(($ancien_code =='') || ($ancien_code == NULL)) {
				                   $fs_model->setOrigine_fs('N');
								} else {
                                   $fs_model->setOrigine_fs('A');
                                }
                                $tab_fs->insert($fs_model->toArray());

                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);

								$userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                //$id_user = $mapper->findConuter() + 1;
                                //$userin->setId_utilisateur($id_user)
								
                                $userin->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                       ->setNom_utilisateur($request->getParam("nom_membre"))
                                       ->setLogin($code)
                                       ->setPwd(md5($codesecret))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code)
									   ->setId_canton($request->getParam("id_canton"));
                                $mapper->save($userin);

								// Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                //$id_contrat = $mapper->findConuter() + 1;
                                //$contrat->setId_contrat($id_contrat);
								
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
						} else {
                            $sessionmembreasso->error = "Le code FS est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
					    }

						if($code_fl != "") {
						    $sms_fl = $sms_mapper->findByCreditCode($code_fl);
							if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

							if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

							$tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

							 if(($ancien_code =='') || ($ancien_code == NULL)) {
				                $fl->setOrigine_fl('N');
							 } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

							//Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            //$compteurfl = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_fl);
                            $place->setCode_produit('FL');
                            $place->setLib_op('Frais de licences');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
							
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

							$tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

							for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

							for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
				        }  else {
                            $sessionmembreasso->error = "Le code FL est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
					    }


						if($code_fkps != "") {
						    $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
							if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

							if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

							$carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            //$id_demande = $carte->findConuter() + 1;
                            //$carte->setId_demande($id_demande)
                            $carte->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
							if(($ancien_code =='') || ($ancien_code == NULL)) {
				               $carte->setOrigine_fkps('N');
							} else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            
							//$compteurcps = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            
							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_cps);
                            $place->setCode_produit('CPS');
                            $place->setLib_op('Frais de CPS');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
							
							$sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
						}

/////////////////////////////////////////////////////////////
/*
			if(isset($souscription->souscription_id) && $souscription->souscription_id > 0){

//////////////////////////////////////////////////////////
$id_souscription = $souscription->souscription_id;

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id_souscription, $souscription);




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1 && $sessionmembreasso->membreasso_id != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($souscription->souscription_id);
        //$cumul_recubancaire = 0;

		if($cumul_recubancaire > 0){
if($souscription->souscription_programme == "KACM"){
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
}else if($souscription->souscription_programme == "CMFH"){
			//$partagea_montant = floor(($cumul_recubancaire / 100 * 5) / $souscription->souscription_nombre);
      $partagea_montant = floor(109);
}

		/*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

			$partagea_montant = floor($cumul_recubancaire / 100 * 5);

		}else{

			$partagea_montant = floor($cumul_recubancaire / 100 * 5);

		}*/

//////////////////////////////////////////
/*
        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}

			}


					}
*/

/////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmembreasso->membre = $code;
                        $sessionmembreasso->codesecret = $codesecret;
                        $this->_redirect('/integrateur/enrolementsms2');

						//$compteur = Util_Utils::findConuter() + 1;
                        //Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        //$db->commit();
						//$this->view->message = "Ouverture de compte marchand bien effectuée ...";

				    }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->nom_membre = $request->getParam("nom_membre");
                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        //$this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
		    } else {
			    $sessionmembreasso->error = "Champs * obligatoire ...";
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
			}
		}
	}







	public function enrolementpmsms2Action() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

		$request = $this->getRequest ();
		if ($request->isPost ()) {
	        if (isset($_POST['code_fs']) && $_POST['code_fs']!=""
			&& isset($_POST['code_fl']) && $_POST['code_fl']!=""
			&& isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
			&& isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
			&& isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
			&& isset($_POST['code_statut']) && $_POST['code_statut']!=""
			&& isset($_POST['code_rep']) && $_POST['code_rep']!=""
			&& isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
			&& isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
			//&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
			&& isset($_POST['id_pays']) && $_POST['id_pays']!=""
			&& isset($_POST['code_agence']) && $_POST['code_agence']!="") {

                $id_utilisateur_acnev = 1;
                $id_utilisateur_filiere = 2;
                $id_utilisateur_technopole = 3;

                $codesecret = Util_Utils::genererCodeSMS(8);

			    $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
                $code_fs = $request->getParam("code_fs");
                $code_fl = $request->getParam("code_fl");
                $code_fkps = $request->getParam("code_fkps");
				$ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

				$place = new Application_Model_EuOperation();
                $mapper_op = new Application_Model_EuOperationMapper();
				
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

				$souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
				try {
				    if($code_fs !="") {
					    $sms_fs = $sms_mapper->findByCreditCode($code_fs);
						$code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($request->getParam("raison_sociale"))
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(null)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($request->getParam("code_fs"))
                               ->setCode_fl($request->getParam("code_fl"))
                               ->setCode_fkps($request->getParam("code_fkps"))
							   ->setCode_agence($code_agence)
							   ->setId_canton($request->getParam("id_canton"))
				               ->setPublier(1)
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


//////validation acnev
								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

												//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);


//////validation filere
								$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
								$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
								$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

								$preinscriptionmorale->setPublier(2);
								$preinscriptionmoraleM->update($preinscriptionmorale);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

												//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);

//////validation technopole
								$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
								$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
								$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

								$preinscriptionmorale->setPublier(3);
								$preinscriptionmoraleM->update($preinscriptionmorale);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

												//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
						$membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($request->getParam("raison_sociale"));
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(null);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
						$membre->setType_fournisseur(NULL);
						$membre->setDesactiver(2);
						$membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);


					    /////////////////////////////////////////////////////////////////////
						$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
						$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
						$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

						$preinscriptionmorale->setCode_membre_morale($code);
						$preinscriptionmoraleM->update($preinscriptionmorale);

                        //for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
                            $compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
                            $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
                            if($compagnie == 1) {
                               $sessionmembreasso->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
                               $db->rollback();
                               return;							   
                            } else {
                               //$date_id = new Zend_Date(Zend_Date::ISO_8601);

                               $telephone = new Application_Model_EuTelephone();
                               $m_telephone = new Application_Model_EuTelephoneMapper();

                               //$compteurte = $m_telephone->findConuter() + 1;

                               //$telephone->setId_telephone($compteurte);
                               $telephone->setNumero_telephone($numero_telephone);
                               $telephone->setCompagnie_telephone($compagnie);
                               $telephone->setCode_membre($code);
                               $m_telephone->save($telephone);
                            }
                        //}

						// insertion dans la table eu_code_activation
				        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				        $codeactivation = new Application_Model_EuCodeActivation();

						$m_dvente = new Application_Model_EuDepotVenteMapper();
				        $dvente = new Application_Model_EuDepotVente();

						$findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
						if($findcode != NULL)  {
                            $findcode = $findcode[0];
							$id_souscription = $findcode->souscription_id;
							$findsouscription = $souscription_mapper->find($id_souscription,$souscription);
							$ancien_code = $souscription->souscription_ancien_membre;
							//$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
							//$id_depot = $findsousdv->id_depot;
							//$trouvedepot = $m_dvente->find($id_depot,$dvente);
							$trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
							$codeactivation->setCode_membre($code);
							$m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

						} else {
							$sessionmembreasso->error = "Erreur d'éxecution: Les codes d'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->raison_sociale = $request->getParam("raison_sociale");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            //$this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
					    }

						$mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
					    $findmem = $mem_mapper->find($code,$mem);

						if(($ancien_code =='') || ($ancien_code == NULL)) {
							  $mem->setEtat_membre('N');
						} else {
						      if(substr($ancien_code,-1,1) == 'P') {
							     $sessionmembreasso->error = "Ce membre n'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
							  }
                              $mem->setEtat_membre('A');
							  //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

							 // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
						 $mem_mapper->update($mem);




						// eu_operation
                        //Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($fs);
                        $place->setCode_produit('FS');
                        $place->setLib_op('Auto-enrôlement');
                        $place->setType_op('AERL');
                        $place->setCode_cat('TFS');
                        $mapper_op->save($place);
						
						
				        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);

						$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
						for($i = 0; $i < count($_POST['code_banque']); $i++) {
              if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                          }
                        }


						//insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        //$id_user = $user_mapper->findConuter() + 1;

                        //$userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

						// Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        //$id_contrat = $mapper_contrat->findConuter() + 1;

                        //$contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

						$tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
						if(($ancien_code =='') || ($ancien_code == NULL)) {
						   $fs_model->setOrigine_fs('N');
						} else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

			        } else {
                        $sessionmembreasso->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
					}





					if($code_fl !="") {

						$sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

						$fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

						if(($ancien_code =='') || ($ancien_code == NULL)) {
						   $fl->setOrigine_fl('N');
						} else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

						//Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                       // $compteurfl = $mapper_op->findConuter() + 1;
                        //Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($mont_fl);
                        $place->setCode_produit('FL');
                        $place->setLib_op('Frais de licences');
                        $place->setType_op(null);
                        $place->setCode_cat(null);
                        $mapper_op->save($place);
						
						
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

						//$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }

                                                //$tcartes[0]="TPAGCP";
                                                $tcartes[1]="TSCNCSEI";
                                                $tcartes[2]="TSGCI";
                                                $tcartes[3]="TSIR";
                                                $tcartes[4]="TR";
                                                $tcartes[5]="TPaNu";
                                                $tcartes[6]="TSPaR";
                                                $tcartes[7]="TSFS";
                                                $tcartes[8]="TSPN";
                                                $tcartes[9]="TSIB";
                                                $tcartes[10]="TSPaNu";
                                                $tcartes[11]="TSIN";
                                                $tcartes[12]="TSCAPA";
                                                $tcartes[13]="TSMARGE";
                                                //$tcartes[14]="TSRE";


						for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $sessionmembreasso->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
					}

					if($code_fkps !="") {
					    $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        //$id_demande = $carte->findConuter() + 1;
                        //$carte->setId_demande($id_demande)
                        $carte->setCode_cat($tcartes[2])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[2]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
						if(($ancien_code =='') || ($ancien_code == NULL)) {
						   $carte->setOrigine_fkps('N');
						} else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());
						
						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($fkps);
                        $place->setCode_produit('CPS');
                        $place->setLib_op('Frais de CPS');
                        $place->setType_op(null);
                        $place->setCode_cat(null);
                        $mapper_op->save($place);
						
						

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
			        }



/////////////////////////////////////////////////////////////
/*

			if(isset($souscription->souscription_id) && $souscription->souscription_id > 0){
//////////////////////////////////////////////////////////
$id_souscription = $souscription->souscription_id;

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id_souscription, $souscription);



//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1 && $sessionmembreasso->membreasso_id != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($souscription->souscription_id);
        //$cumul_recubancaire = 0;

		if($cumul_recubancaire > 0){
if($souscription->souscription_programme == "KACM"){
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
}else if($souscription->souscription_programme == "CMFH"){
			//$partagea_montant = floor(($cumul_recubancaire / 100 * 5) / $souscription->souscription_nombre);
      $partagea_montant = floor(109);
}

		/*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

			$partagea_montant = floor($cumul_recubancaire / 100 * 5);

		}else{

			$partagea_montant = floor($cumul_recubancaire / 100 * 5);

		}*/

//////////////////////////////////////////
/*
        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}

			}



						}
*/
/////////////////////////////////////////////////////////////



					//$compteur = Util_Utils::findConuter() + 1;
                    //Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);
                    //$db->commit();

					$compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                    $db->commit();
                    $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                    $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;
                    $this->_redirect('/integrateur/enrolementpmsms2');




			    } catch (Exception $exc) {
                    $db->rollback();
                    $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                    $this->view->code_statut = $request->getParam("code_statut");
                    $this->view->raison_sociale = $request->getParam("raison_sociale");
                    $this->view->domaine_activite = $request->getParam("domaine_activite");
                    $this->view->site_web = $request->getParam("site_web");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    //$this->view->tel = $request->getParam("tel_membre");
                    $this->view->email = $request->getParam("email_membre");
                    $this->view->id_pays = $request->getParam("id_pays");
                    //$this->view->portable = $request->getParam("portable_membre");
                    $this->view->registre = $request->getParam("num_registre_membre");
                    $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
                }

	        }  else {
			    $sessionmembreasso->error = "Champs * obligatoire ...";
                $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                $this->view->code_statut = $request->getParam("code_statut");
                $this->view->raison_sociale = $request->getParam("raison_sociale");
                $this->view->domaine_activite = $request->getParam("domaine_activite");
                $this->view->site_web = $request->getParam("site_web");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->id_pays = $request->getParam("id_pays");
                //$this->view->portable = $request->getParam("portable_membre");
                $this->view->registre = $request->getParam("num_registre_membre");
			}
	    }

	}




   public function activationcapsoldAction()   {
	       $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	       //$this->_helper->layout->disableLayout();
 	       $this->_helper->layout()->setLayout('layoutpublicesmcint');

	       $t_canton = new Application_Model_DbTable_EuCanton();
           $t_region = new Application_Model_DbTable_EuRegion();
           $t_prefecture = new Application_Model_DbTable_EuPrefecture();
           $t_pays = new Application_Model_DbTable_EuPays();
           $t_zone = new Application_Model_DbTable_EuZone();

	       $cantons = $t_canton->fetchAll();
           $regions = $t_region->fetchAll();
           $pays = $t_pays->fetchAll();
           $zones = $t_zone->fetchAll();
           $prefectures = $t_prefecture->fetchAll();
           $this->view->cantons = $cantons;
           $this->view->regions = $regions;
           $this->view->zones = $zones;
           $this->view->pays = $pays;
           $this->view->prefectures = $prefectures;

	       if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		   $request = $this->getRequest();
	       if ($request->isPost ()) {
		      $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
			  try {
			        if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
		                && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
		                && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
		                && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
		                && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
		                && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
		                && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
		                && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
		                && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
		                && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
		                && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
		                && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
		                && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
		                && isset($_POST['id_pays']) && $_POST['id_pays']!=""
		                && isset($_POST['code_agence']) && $_POST['code_agence']!="") {

						   $mont_caps = Util_Utils::getParametre('CAPS','valeur');
		                   $fs = Util_Utils::getParametre('FS','valeur');
		                   $mont_fl = Util_Utils::getParametre('FL','valeur');
		                   $fkps = Util_Utils::getParametre('FKPS','valeur');

						   $id_utilisateur_acnev = 1;
						   $id_utilisateur_filiere = 2;
						   $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);

						   $place    = new Application_Model_EuOperation();
		                   $mapper   = new Application_Model_EuOperationMapper();
	                       $membre   = new Application_Model_EuMembre();
	                       $m_map    = new Application_Model_EuMembreMapper();
					       $membremoral = new Application_Model_EuMembreMorale();
	                       $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
		                   $m_caps   = new Application_Model_EuCapsMapper();
                           $caps     = new Application_Model_EuCaps();
		                   $dvente   = new Application_Model_EuDepotVente();
		                   $m_dvente = new Application_Model_EuDepotVenteMapper();

		                   $activation   = new Application_Model_EuActivation();
		                   $m_activation = new Application_Model_EuActivationMapper();
	                       $membretiers = new Application_Model_EuMembretierscode();
		                   $m_membretiers = new Application_Model_EuMembretierscodeMapper();

						   $allocation = new Application_Model_EuAllocationCmfh();
		                   $m_allocation = new Application_Model_EuAllocationCmfhMapper();

					       $souscription = new Application_Model_EuSouscription();
                           $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						   
						   $compte_map = new Application_Model_EuCompteMapper();
                           $compte      = new Application_Model_EuCompte();
			               $sms_money   = new Application_Model_EuSmsmoney();
                           $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			               $det_sms   = new Application_Model_EuDetailSmsmoney();
			               $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			               $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			               $det_vtesms  = new Application_Model_EuDetailVentesms();

					       $date = new Zend_Date(Zend_Date::ISO_8601);

						   $code_agence = $request->getParam("code_agence");
						   $code_autorisation = $request->getParam("code_autorisation");
						   $type_activation = $request->getParam("type_activation");
						   $code_zone = $request->getParam("code_zone");

						   $type_bnp  = 'CAPS';
                           $type_caps = 'CAPSFLFCPS';
						   $code_activation  = '';
			               $id_membretiers  = '';
						   $id_allocation   = '';
						   $id_depot = '';
			               $souscription_id = '';
			               $apporteur = '';
						   $reste_allocation = '';

						   $table = new Application_Model_DbTable_EuActeur();
                           $selection = $table->select();
                           $selection->where('code_membre like ?',$code_agence.'%');
                           $selection->where('type_acteur like ?','gac_surveillance');
                           $resultat = $table->fetchAll($selection);
                           $trouvacteursur = $resultat->current();
                           $code_acteur = $trouvacteursur->code_acteur;
                           $acteur =  $code_acteur;
						   $reste = $mont_caps;

						   if($type_activation == "SansListe")  {
						       $i = 0;
							   $lignesallocation = $m_allocation->fetchAllAllocation();
							   if($lignesallocation != false) {
                                  $nbre_lignesallocation = count($lignesallocation);
							      $solde_depot = 0;
                                  while ($solde_depot <= 0 && $i < $nbre_lignesallocation) {
                                      $ligneallocation = $lignesallocation[$i];
								      $id_allocation = $ligneallocation->getAllocation_cmfh_id();
							          $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
							          $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
								      $trouvesdvente = $m_dvente->findbycmfh($apporteur);

								      if($trouvesdvente != NULL && $reste_allocation > 0) {
									     $trouvedvente = $trouvesdvente[0];
								         $solde_depot = $trouvedvente->getSolde_depot();
								         $findalloc = $m_allocation->find($id_allocation,$allocation);
									     $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
									     $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
									     $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                                         $m_allocation->update($allocation);
								      }
                                      $i++;
                               }

							   } else {

							          $db->rollback();
			                          $this->view->message = "Pas de comptes marchands pour tiers disponible ...";
                                      $this->view->nom_membre = $request->getParam("nom_membre");
                                      $this->view->prenom_membre = $request->getParam("prenom_membre");
                                      $this->view->sexe = $request->getParam("sexe_membre");
                                      $this->view->sitfam = $request->getParam("sitfam_membre");
                                      $this->view->datnais = $request->getParam("date_nais_membre");
                                      $this->view->nation = $request->getParam("nationalite_membre");
                                      $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                      $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                      $this->view->formation = $request->getParam("formation");
                                      $this->view->profession = $request->getParam("profession_membre");
                                      $this->view->religion = $request->getParam("religion_membre");
                                      $this->view->pere = $request->getParam("pere_membre");
                                      $this->view->mere = $request->getParam("mere_membre");
                                      $this->view->quartier_membre = $request->getParam("quartier_membre");
                                      $this->view->ville_membre = $request->getParam("ville_membre");
                                      $this->view->bp = $request->getParam("bp_membre");
                                      $this->view->tel = $request->getParam("tel_membre");
                                      $this->view->email = $request->getParam("email_membre");
                                      $this->view->portable = $request->getParam("portable_membre");
                                      return;

							   }

						   } else {
						       $ligneallocation = $m_allocation->findByCode($code_autorisation);
							   if($ligneallocation != NULL) {
							      $id_allocation = $ligneallocation->getAllocation_cmfh_id();
								  $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
							      $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
							      $findalloc = $m_allocation->find($id_allocation,$allocation);

								  if($reste_allocation == 0) {
							          $db->rollback();
			                          $this->view->message = "Cette clé d'autorisation octroyée au CMFH ne dispose pas de comptes marchands pour tiers ...";
                                      $this->view->nom_membre = $request->getParam("nom_membre");
                                      $this->view->prenom_membre = $request->getParam("prenom_membre");
                                      $this->view->sexe = $request->getParam("sexe_membre");
                                      $this->view->sitfam = $request->getParam("sitfam_membre");
                                      $this->view->datnais = $request->getParam("date_nais_membre");
                                      $this->view->nation = $request->getParam("nationalite_membre");
                                      $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                      $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                      $this->view->formation = $request->getParam("formation");
                                      $this->view->profession = $request->getParam("profession_membre");
                                      $this->view->religion = $request->getParam("religion_membre");
                                      $this->view->pere = $request->getParam("pere_membre");
                                      $this->view->mere = $request->getParam("mere_membre");
                                      $this->view->quartier_membre = $request->getParam("quartier_membre");
                                      $this->view->ville_membre = $request->getParam("ville_membre");
                                      $this->view->bp = $request->getParam("bp_membre");
                                      $this->view->tel = $request->getParam("tel_membre");
                                      $this->view->email = $request->getParam("email_membre");
                                      $this->view->portable = $request->getParam("portable_membre");
                                      return;
							       }

						           $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
								   $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
								   $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                                   $m_allocation->update($allocation);

							   } else {
							       $db->rollback();
                                   $this->view->message = "Cette clé d'autorisation est mal renseignée ou n'est pas active.Veuillez verifier votre saisie ...";
			                       $this->view->nom_membre = $request->getParam("nom_membre");
                                   $this->view->prenom_membre = $request->getParam("prenom_membre");
                                   $this->view->sexe = $request->getParam("sexe_membre");
                                   $this->view->sitfam = $request->getParam("sitfam_membre");
                                   $this->view->datnais = $request->getParam("date_nais_membre");
                                   $this->view->nation = $request->getParam("nationalite_membre");
                                   $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                   $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                   $this->view->formation = $request->getParam("formation");
                                   $this->view->profession = $request->getParam("profession_membre");
                                   $this->view->religion = $request->getParam("religion_membre");
                                   $this->view->pere = $request->getParam("pere_membre");
                                   $this->view->mere = $request->getParam("mere_membre");
                                   $this->view->quartier_membre = $request->getParam("quartier_membre");
                                   $this->view->ville_membre = $request->getParam("ville_membre");
                                   $this->view->bp = $request->getParam("bp_membre");
                                   $this->view->tel = $request->getParam("tel_membre");
                                   $this->view->email = $request->getParam("email_membre");
                                   $this->view->portable = $request->getParam("portable_membre");
                                   return;
                               }

						   }

						   $lignesdvente = $m_dvente->findbycmfh($apporteur);
						   $nbre_lignesdvente = count($lignesdvente);
						   $reste = $mont_caps;

						   if ($lignesdvente != NULL) {
			                   $lignedvente = $lignesdvente[0];
                                $id_depot = $lignedvente->getId_depot();
							    $souscription_id = $lignedvente->getSouscription_id();
							    $finddepotvente = $m_dvente->find($id_depot,$dvente);

							    $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
						        $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                                $m_dvente->update($lignedvente);

							    $findCodesBySous = $m_membretiers->findBySouscription($souscription_id);
						        if($findCodesBySous != NULL)  {
						           $findCodeBySous = $findCodesBySous[0];
						           $id_membretiers = $findCodeBySous->getMembretierscode_id();
						           $code_activation = $findCodeBySous->getMembretierscode_code();
						        } else {
						           $db->rollback();
                                   $this->view->message = "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ...";
			                       $this->view->nom_membre = $request->getParam("nom_membre");
                                   $this->view->prenom_membre = $request->getParam("prenom_membre");
                                   $this->view->sexe = $request->getParam("sexe_membre");
                                   $this->view->sitfam = $request->getParam("sitfam_membre");
                                   $this->view->datnais = $request->getParam("date_nais_membre");
                                   $this->view->nation = $request->getParam("nationalite_membre");
                                   $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                   $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                   $this->view->formation = $request->getParam("formation");
                                   $this->view->profession = $request->getParam("profession_membre");
                                   $this->view->religion = $request->getParam("religion_membre");
                                   $this->view->pere = $request->getParam("pere_membre");
                                   $this->view->mere = $request->getParam("mere_membre");
                                   $this->view->quartier_membre = $request->getParam("quartier_membre");
                                   $this->view->ville_membre = $request->getParam("ville_membre");
                                   $this->view->bp = $request->getParam("bp_membre");
                                   $this->view->tel = $request->getParam("tel_membre");
                                   $this->view->email = $request->getParam("email_membre");
                                   $this->view->portable = $request->getParam("portable_membre");
                                   return;
						        }


						   } else {
						      $db->rollback();
                              $this->view->message = "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ...";
			                  $this->view->nom_membre = $request->getParam("nom_membre");
                              $this->view->prenom_membre = $request->getParam("prenom_membre");
                              $this->view->sexe = $request->getParam("sexe_membre");
                              $this->view->sitfam = $request->getParam("sitfam_membre");
                              $this->view->datnais = $request->getParam("date_nais_membre");
                              $this->view->nation = $request->getParam("nationalite_membre");
                              $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                              $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                              $this->view->formation = $request->getParam("formation");
                              $this->view->profession = $request->getParam("profession_membre");
                              $this->view->religion = $request->getParam("religion_membre");
                              $this->view->pere = $request->getParam("pere_membre");
                              $this->view->mere = $request->getParam("mere_membre");
                              $this->view->quartier_membre = $request->getParam("quartier_membre");
                              $this->view->ville_membre = $request->getParam("ville_membre");
                              $this->view->bp = $request->getParam("bp_membre");
                              $this->view->tel = $request->getParam("tel_membre");
                              $this->view->email = $request->getParam("email_membre");
                              $this->view->portable = $request->getParam("portable_membre");
                              return;
						   }


						   $count = $mapper->findConuter() + 1;
                           $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                           $date_deb = clone $date_fin;

		                   $place->setId_operation($count)
                                 ->setDate_op($date->toString('yyyy-MM-dd'))
                                 ->setHeure_op($date->toString('HH:mm:ss'))
                                 ->setId_utilisateur(null);

                           if(substr($apporteur,19,1)=='P') {
                             $place->setCode_membre($apporteur)
                                   ->setCode_membre_morale(null);
                            } else  {
                              $place->setCode_membre(null)
                                    ->setCode_membre_morale($apporteur);
                            }

                            $place->setMontant_op($mont_caps)
                                  ->setCode_produit('CAPS')
                                  ->setLib_op('Enrolement')
                                  ->setType_op($type_bnp)
                                  ->setCode_cat('TCAPS');
			                $mapper->save($place);

			                $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
			                $code = $m_map->getLastCodeMembreByAgence($code_agence);
                            if ($code == null) {
                               $code = $code_agence . '0000001' . 'P';
                            } else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }
			                $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $date_idd = clone $date_id;

						    if ($date_nais >= $date_idd) {
                                $this->view->message = "La date de naissance doit etre antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

						    /////////////////controle nom prenom
					        $eupreinscription = new Application_Model_DbTable_EuMembre();
	                        $select = $eupreinscription->select();
	                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));

						    $tabprenom = explode(" ",$request->getParam("prenom_membre"));
						    foreach ($tabprenom as $value) {
	                          $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
						    }

	                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                        $select->limit(1);
	                        $rowseupreinscription = $eupreinscription->fetchRow($select);
		                    if(count($rowseupreinscription) > 0) {
							   $this->view->message = "Vous êtes déjà membre !!!";
                               $db->rollback();
                               $this->view->nom_membre = $request->getParam("nom_membre");
                               $this->view->prenom_membre = $request->getParam("prenom_membre");
                               $this->view->sexe = $request->getParam("sexe_membre");
                               $this->view->sitfam = $request->getParam("sitfam_membre");
                               $this->view->datnais = $request->getParam("date_nais_membre");
                               $this->view->nation = $request->getParam("nationalite_membre");
                               $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                               $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                               $this->view->formation = $request->getParam("formation");
                               $this->view->profession = $request->getParam("profession_membre");
                               $this->view->religion = $request->getParam("religion_membre");
                               $this->view->pere = $request->getParam("pere_membre");
                               $this->view->mere = $request->getParam("mere_membre");
                               $this->view->quartier_membre = $request->getParam("quartier_membre");
                               $this->view->ville_membre = $request->getParam("ville_membre");
                               $this->view->bp = $request->getParam("bp_membre");
                               $this->view->tel = $request->getParam("tel_membre");
                               $this->view->email = $request->getParam("email_membre");
                               $this->view->portable = $request->getParam("portable_membre");
                               return;
			                }

						    /////////////////////////////// preinscription ///////////////////////////////////////////////

                            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

                            $preinscription = new Application_Model_EuPreinscription();
                            $mapper = new Application_Model_EuPreinscriptionMapper();

                            $preinscription->setId_preinscription($compteur_preinscription)
                                           ->setNom_membre($request->getParam("nom_membre"))
						                   ->setCode_agence($code_agence)
                                           ->setPrenom_membre($request->getParam("prenom_membre"))
                                           ->setSexe_membre($request->getParam("sexe_membre"))
                                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                           ->setId_pays($request->getParam("id_pays"))
                                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                           ->setPere_membre($request->getParam("pere_membre"))
                                           ->setMere_membre($request->getParam("mere_membre"))
                                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                           ->setProfession_membre($request->getParam("profession_membre"))
                                           ->setFormation($request->getParam("formation"))
                                           ->setId_religion_membre($request->getParam("religion_membre"))
                                           ->setQuartier_membre($request->getParam("quartier_membre"))
                                           ->setVille_membre($request->getParam("ville_membre"))
                                           ->setBp_membre($request->getParam("bp_membre"))
                                           ->setTel_membre($request->getParam("tel_membre"))
                                           ->setEmail_membre($request->getParam("email_membre"))
                                           ->setPortable_membre($request->getParam("portable_membre"))
                                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                           ->setCode_membre(null)
                                           ->setCode_fs(null)
                                           ->setCode_fl(null)
                			               ->setCode_fkps(null)
									       ->setId_canton($request->getParam("id_canton"));
                             $preinscription->setPublier(1);

                             $mapper->save($preinscription);

						     ////// validation acnev ///////////////////////////////////////
					         $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						     $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						     $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						     $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);


                             ////// validation filere ///////////////////////////////////
						     $preinscription = new Application_Model_EuPreinscription();
						     $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
					         $preinscriptionM->find($compteur_preinscription, $preinscription);

						     $preinscription->setPublier(2);
						     $preinscriptionM->update($preinscription);


						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						     $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						     $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						     $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
					         $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);

                             ////// validation technopole ///////////////////////////////////////////////////////////////
						     $preinscription = new Application_Model_EuPreinscription();
					         $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
						     $preinscriptionM->find($compteur_preinscription, $preinscription);

						     $preinscription->setPublier(3);
						     $preinscriptionM->update($preinscription);


						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						     $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						     $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						     $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
					         $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);


                             ////////////////////////////////////////////
						     // insertion dans la table eu_membre
                             $membre->setCode_membre($code)
                                    ->setNom_membre($request->getParam("nom_membre"))
                                    ->setPrenom_membre($request->getParam("prenom_membre"))
                                    ->setSexe_membre($request->getParam("sexe_membre"))
                                    ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                    ->setId_pays($request->getParam("nationalite_membre"))
                                    ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                    ->setPere_membre($request->getParam("pere_membre"))
                                    ->setMere_membre($request->getParam("mere_membre"))
                                    ->setSitfam_membre($request->getParam("sitfam_membre"))
                                    ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                    ->setProfession_membre($request->getParam("profession_membre"))
                                    ->setFormation($request->getParam("formation"))
                                    ->setId_religion_membre($request->getParam("religion_membre"))
                                    ->setQuartier_membre($request->getParam("quartier_membre"))
                                    ->setVille_membre($request->getParam("ville_membre"))
                                    ->setBp_membre($request->getParam("bp_membre"))
                                    ->setTel_membre($request->getParam("tel_membre"))
                                    ->setEmail_membre($request->getParam("email_membre"))
                                    ->setPortable_membre($request->getParam("portable_membre"))
                                    ->setId_utilisateur(null)
                                    ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                    ->setDate_identification($date_idd->toString('yyyy-MM-dd'))
                                    ->setCode_agence($code_agence)
                                    ->setId_maison(null)
                                    ->setCodesecret(md5($codesecret))
				                    ->setEtat_membre('N')
				                    ->setCode_gac($acteur)
                                    ->setAuto_enroler('N')
							        ->setId_canton($request->getParam("id_canton"));
                            $m_map->save($membre);

						////////////////////////////////////////////////////////////////////////////////
						$preinscription = new Application_Model_EuPreinscription();
						$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
						$preinscriptionM->find($compteur_preinscription, $preinscription);

						$preinscription->setCode_membre($code);
						$preinscriptionM->update($preinscription);

				        $findmembretiers = $m_membretiers->find($id_membretiers,$membretiers);
			            if($findmembretiers) {
			               $membretiers->setCode_membre($code)
							           ->setPublier(1)
									   ->setAllocation_cmfh_id($id_allocation);
				           $m_membretiers->update($membretiers);
		                }

				        // insertion dans la table eu_activation
						$id_activation = $m_activation->findConuter() + 1;
						$activation->setId_activation($id_activation)
						           ->setId_depot($id_depot)
								   ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
								   ->setCode_activation($code_activation)
								   ->setCode_membre($code)
								   ->setMembreasso_id($sessionmembreasso->membreasso_id);
						$m_activation->save($activation);

                        $findsmsmoney = $money_map->findBySouscription($souscription_id);
						$souscription_mapper->find($souscription_id,$souscription);
						$montcaps = Util_Utils::getParametre('CAPS','valeur');
						$membre_pbf = '0000000000000000001M';
	                    $code_compte_pbf = "NN-TR-".$membre_pbf;
			            $ret = $compte_map->find($code_compte_pbf,$compte);
						
						$lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
						$cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
						
						if($findsmsmoney == NULL && $souscription->souscription_type == 'BAn') {
						  if ($lignesdetfcaps != null) {
							  $nengfcaps = $money_map->findConuter() + 1;
                              $sms_money->setNEng($nengfcaps)
                	                    ->setCode_Agence(null)
                                        ->setCreditAmount($montcaps)
                                        ->setSentTo($souscription->souscription_mobile)
                                        ->setMotif('CAPS')
                                        ->setId_Utilisateur(null)
                                        ->setCurrencyCode('XOF')
                                        ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                        ->setFromAccount($code_compte_pbf)
                                        ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                        ->setCreditCode($code_activation)
                                        ->setDestAccount(null)
                                        ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                        ->setDestAccount_Consumed($souscription_id)
                                        ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                        ->setNum_recu(null);
                              $money_map->save($sms_money);
									   
							  // Mise à jour du compte de transfert
				              if($ret && ($cumulfcaps >= $montcaps)) {
			                    // Mise à jour du compte de transfert
				                $compte->setSolde($compte->getSolde() - $montcaps);
                                $compte_map->update($compte);    
	                          } else {
			                    $this->view->message = "Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;			   
			                  }
									   
							  $l = 0;
					          $reste = $montcaps;
					          $nbre_lignesdetfcaps = count($lignesdetfcaps);
							  while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
									$lignedetfcaps = $lignesdetfcaps[$l];
                                    $id = $lignedetfcaps->getId_detail_smsmoney();
						            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
							        if ($reste >= $lignedetfcaps->getSolde_sms()) {
									    //Mise à jour  des lignes d'enrégistrement
                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
										//insertion dans la table eu_detailventesms
						                $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                           ->setId_detail_smsmoney($id)
                                                   ->setCode_membre_dist($membre_pbf)
                                                   ->setCode_membre(null)
                                                   ->setType_tansfert('CAPS')
                                                   ->setCreditcode($code_activation)
                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                   ->setId_utilisateur(null)
                                                   ->setCode_produit('CAPS');
                                         $det_vte_sms->insert($det_vtesms->toArray());
															
							             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                               ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                               ->setSolde_sms(0);
                                         $det_sms_m->update($lignedetfcaps);
												 
						             } else {
								        //Mise à jour  des lignes d'enrégistrement
										//insertion dans la table eu_detailventesms
						                $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                           ->setId_detail_smsmoney($id)
                                                   ->setCode_membre_dist($membre_pbf)
                                                   ->setCode_membre(null)
                                                   ->setType_tansfert('CAPS')
                                                   ->setCreditcode($code_activation)
                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setMont_vente($reste)
                                                   ->setId_utilisateur(null)
                                                   ->setCode_produit('CAPS');
                                        $det_vte_sms->insert($det_vtesms->toArray());
															
                                        $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							            $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                        $det_sms_m->update($lignedetfcaps);
						                $reste = 0;
							         } 
									 $l++;
								}
								  
								} else {
								$this->view->message = "Le solde du compte de transfert  est vide";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
							}  
						
						}

						$userin = new Application_Model_EuUtilisateur();
                        $mapper_user = new Application_Model_EuUtilisateurMapper();

			            // insertion dans la table eu_utilisateur
                        $id_user = $mapper_user->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(null)
                               ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                               ->setNom_utilisateur($request->getParam("nom_membre"))
                               ->setLogin($code)
                               ->setPwd(md5($codesecret))
                               ->setDescription(null)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
				               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(null)
                               ->setCode_zone($code_zone)
                               //->setCode_gac_filiere(null)
		                       ->setId_pays($request->getParam("id_pays"))
                               ->setId_canton($request->getParam("id_canton"))
                               ->setCode_acteur($acteur)
				               ->setCode_membre($code);
                        $mapper_user->save($userin);

				        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
		                $mapper_contrat = new Application_Model_EuContratMapper();
		                $id_contrat = $mapper_contrat->findConuter() + 1;
				        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(null);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(null);
                        $contrat->setId_pays(null);
                        $contrat->setId_utilisateur(null);
                        $contrat->setFiliere(null);
                        $mapper_contrat->save($contrat);

				        // insertion dans la table eu_compte_bancaire
					    $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
					    for($i = 0; $i < count($_POST['code_banque']); $i++) {
                if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                          }
                        }

                        // insertion dans eu_fs
						$tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
						         ->setCode_membre_morale(null)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($code_activation)
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur(null)
                                 ->setMont_fs($fs)
								 ->setOrigine_fs('N');
                        $tab_fs->insert($fs_model->toArray());

						//insertion des frais d'identification dans la table operation
                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;
						$lib_op = 'Enrôlement';
                        $type_op = 'ERL';
						Util_Utils::addOperation($compteur,$code,null,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'),null);

				        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();

					    $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
				        $caps->setCode_caps($id)
                             ->setCode_membre_benef($code)
                             ->setMont_caps($mont_caps)
                             ->setMont_fs(0)
                             ->setPeriode(0)
                             ->setId_operation($count)
                             ->setRembourser('N')
                             ->setId_credit(null)
                             ->setIndexer(1)
                             ->setType_caps($type_caps)
                             ->setCode_type_bnp($type_bnp)
                             ->setFs_utiliser(1)
                             ->setFl_utiliser(1)
	                         ->setCps_utiliser(1)
                             ->setMont_panu_fs(0)
                             ->setReconst_fs(0)
                             ->setPanu(0)
                             ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur(null)
							 ;

					    if(substr($apporteur,19,1)=='P') {
                            $caps->setCode_membre_app($apporteur)
                                 ->setCode_membre_morale_app(null);
                        } else  {
                            $caps->setCode_membre_app(null)
                                 ->setCode_membre_morale_app($apporteur);
                        }
				        $m_caps->save($caps);

						$tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
						$mapper_op = new Application_Model_EuOperationMapper();
						$compteur = $mapper_op->findConuter() + 1;

						// insertion dans la table eu_operation
                        Util_Utils::addOperation($compteur,$code,null,null,$mont_fl,null,'Frais de licences','FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

						// insertion dans la table eu_fl
						$fl->setCode_fl("FL-".$code)
                           ->setCode_membre($code)
						   ->setCode_membre_morale(null)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(null)
                           ->setCreditcode($code_activation)
						   ->setOrigine_fl('N');
                        $tfl->insert($fl->toArray());

						$tcartes[0]="TPAGCRPG";
						$tcartes[1]="TCNCS";
						$tcartes[2]="TPaNu";
						$tcartes[3]="TPaR";
						$tcartes[4]="TR";
						$tcartes[5]="CAPA";

						$tscartes[0]="TSRPG";
					    $tscartes[1]="TSCNCS";
					    $tscartes[2]="TSPaNu";
						$tscartes[3]="TSPaR";
						$tscartes[4]="TSCAPA";

						for($i = 0; $i < count($tcartes); $i++) {
							if($tcartes[$i] == "TCNCS") {
                              $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NR';
							  $res = $map_compte->find($code_compte,$compte);
							} elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                              $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NN';
							  $res = $map_compte->find($code_compte,$compte);
							} else {
							  $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NB';
							  $res = $map_compte->find($code_compte,$compte);
							}
								if(!$res) {
								    // insertion dans la table eu_compte
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
										   ->setCode_membre_morale(null)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
									$map_compte->save($compte);

							    }

                        }

						for($j = 0; $j < count($tscartes); $j++) {
							if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NR';
							    $res = $map_compte->find($code_comptets,$compte);
						    } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NN';
								$res = $map_compte->find($code_comptets,$compte);
							} else  {
								$code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NB';
								$res = $map_compte->find($code_comptets,$compte);
							}

								if(!$res) {
								    // insertion dans la table eu_compte
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
										   ->setCode_membre_morale(null)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
									$map_compte->save($compte);

							    }
                        }

						//Mise e jour du compte general fgfn
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

						// insertion dans la table eu_carte
    					$id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
							  ->setCode_cat(null)
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte(null)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(null);
                        $t_carte->insert($carte->toArray());

						$mapper_op = new Application_Model_EuOperationMapper();
						$countop = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($countop,$code,null,null,$fkps,null,'Frais de CPS','CPS',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

						/*if(substr($apporteur,19,1) == 'P') {
						    $findmembre = $m_map->find($apporteur,$membre);
						    $compt = Util_Utils::findConuter() + 1;
                            Util_Utils::addSms($compt,$membre->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);
                        } else {
						    $findmembre = $m_mapmoral->find($apporteur,$membremoral);
						    $compt = Util_Utils::findConuter() + 1;
                            Util_Utils::addSms($compt,$membremoral->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);
						}*/




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1) {
        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
        $m_souscription->find($souscription_id, $souscription);
        
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($membreasso->membreasso_association, $association);
        $code_agence = $association->code_agence;

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea->setPartagea_activation($m_activation->findConuter());
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            //$partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem->setPartagem_activation($m_activation->findConuter());
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}


//////////////////////////////////////////


						$compt1 = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compt1,$request->getParam("portable_membre"),"Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);

						$db->commit();

						//$this->view->message = "Ouverture de compte marchand bien effectuée ...";
                        $sessionmembreasso->errorlogin = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;

						$this->_redirect('/integrateur/activationcaps');

		                } else {
                            $db->rollback();
			                $this->view->message = "Champs * obligatoire ...";
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                         }

		       } catch (Exception $exc) {
                    $db->rollback();
                    $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->message = $message;
				    $this->view->nom_membre = $request->getParam("nom_membre");
                    $this->view->prenom_membre = $request->getParam("prenom_membre");
                    $this->view->sexe = $request->getParam("sexe_membre");
                    $this->view->sitfam = $request->getParam("sitfam_membre");
                    $this->view->datnais = $request->getParam("date_nais_membre");
                    $this->view->nation = $request->getParam("nationalite_membre");
                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                    $this->view->formation = $request->getParam("formation");
                    $this->view->profession = $request->getParam("profession_membre");
                    $this->view->religion = $request->getParam("religion_membre");
                    $this->view->pere = $request->getParam("pere_membre");
                    $this->view->mere = $request->getParam("mere_membre");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    $this->view->tel = $request->getParam("tel_membre");
                    $this->view->email = $request->getParam("email_membre");
                    $this->view->portable = $request->getParam("portable_membre");
				    return;
               }

		   }

	}


	
   public function inscriptioncapsoldAction()   {
       $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmcint');
	   if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	  
	   $t_canton = new Application_Model_DbTable_EuCanton();
       $t_region = new Application_Model_DbTable_EuRegion();
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $t_pays = new Application_Model_DbTable_EuPays();
       $t_zone = new Application_Model_DbTable_EuZone();
	  
	   $cantons = $t_canton->fetchAll();
       $regions = $t_region->fetchAll();
       $pays = $t_pays->fetchAll();
       $zones = $t_zone->fetchAll();
       $prefectures = $t_prefecture->fetchAll();
       $this->view->cantons = $cantons;
       $this->view->regions = $regions;
       $this->view->zones = $zones;
       $this->view->pays = $pays;
       $this->view->prefectures = $prefectures;
   
	   $request = $this->getRequest();
	   if($request->isPost()) {
	      if(isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
		    && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
		    && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
		    && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
		    && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
		    && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
		    && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
		    && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
		    && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
		    && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
		    && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
		    && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
		    && isset($_POST['id_pays']) && $_POST['id_pays']!=""
		    && isset($_POST['code_agence']) && $_POST['code_agence']!="")  {
                 
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {
                    $membre  = new Application_Model_EuMembre();
	                $m_map   = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$mstiersliste = new Application_Model_EuMstiersListecm();
		            $m_mstiersliste = new Application_Model_EuMstiersListecmMapper();
					$mstiers   = new Application_Model_EuMstiers();
		            $m_mstiers = new Application_Model_EuMstiersMapper();
					
					$code_agence = $request->getParam("code_agence");
				    $type_inscription = $request->getParam("type_inscription");
				    $code_zone = $request->getParam("code_zone");
					$date_nais = new Zend_Date($request->getParam("date_nais_membre"));
					
					$date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
					
					$apporteur = NULL;
					$liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                    $codesecret = "";
                    while(strlen($codesecret) != 8) {
                      $codesecret .= $liste[rand(0,strlen($liste)-1)]; 
                    }

					if($type_inscription == "AvecListe")  {
					   $apporteur = $request->getParam("code_membre_apporteur");
					   if(substr($apporteur,19,1) == 'P')  {
					     $findmembre = $m_map->find($apporteur,$membre);
					     if($findmembre == false) {
						     $this->view->message = "Le numéro membre du CMFH saisi  ".$apporteur."  est introuvable ...";
                             $db->rollback();
                             $this->view->nom_membre = $request->getParam("nom_membre");
                             $this->view->prenom_membre = $request->getParam("prenom_membre");
                             $this->view->sexe = $request->getParam("sexe_membre");
                             $this->view->sitfam = $request->getParam("sitfam_membre");
                             $this->view->datnais = $request->getParam("date_nais_membre");
                             $this->view->nation = $request->getParam("nationalite_membre");
                             $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                             $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                             $this->view->formation = $request->getParam("formation");
                             $this->view->profession = $request->getParam("profession_membre");
                             $this->view->religion = $request->getParam("religion_membre");
                             $this->view->pere = $request->getParam("pere_membre");
                             $this->view->mere = $request->getParam("mere_membre");
                             $this->view->quartier_membre = $request->getParam("quartier_membre");
                             $this->view->ville_membre = $request->getParam("ville_membre");
                             $this->view->bp = $request->getParam("bp_membre");
                             $this->view->email = $request->getParam("email_membre");
                             return;
						 }
					   
					   } else {
					      $findmembre = $m_mapmoral->find($apporteur,$membremoral);
						  if($findmembre == false) {
							 $this->view->message = "Le numéro membre du CMFH saisi  ".$apporteur."  est introuvable ...";
                             $db->rollback();
                             $this->view->nom_membre = $request->getParam("nom_membre");
                             $this->view->prenom_membre = $request->getParam("prenom_membre");
                             $this->view->sexe = $request->getParam("sexe_membre");
                             $this->view->sitfam = $request->getParam("sitfam_membre");
                             $this->view->datnais = $request->getParam("date_nais_membre");
                             $this->view->nation = $request->getParam("nationalite_membre");
                             $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                             $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                             $this->view->formation = $request->getParam("formation");
                             $this->view->profession = $request->getParam("profession_membre");
                             $this->view->religion = $request->getParam("religion_membre");
                             $this->view->pere = $request->getParam("pere_membre");
                             $this->view->mere = $request->getParam("mere_membre");
                             $this->view->quartier_membre = $request->getParam("quartier_membre");
                             $this->view->ville_membre = $request->getParam("ville_membre");
                             $this->view->bp = $request->getParam("bp_membre");
                             $this->view->email = $request->getParam("email_membre");
                             return;
						  }
					   
					   }
                       
					   $montant_cm = 0;
                       $mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));					   
					   $lignesmstiers = $m_mstiers->fetchAllMstiersAvecListe($apporteur);
					   $cumulsolde = $m_mstiers->findcumulMstiersAvecListe($apporteur);
					   $lignescm = $m_mstiersliste->fetchAllByMembre($apporteur);
					   
					   if($lignescm == NULL) {
					     $montant_cm =  $mont_caps;  
					   } else {
					     $montant_cm = (count($lignescm) * $mont_caps) + $mont_caps;
					   }
					   
					   if(($lignesmstiers == false) || ($cumulsolde < $montant_cm)) {
					      $this->view->message = "L'apporteur CMFH ne dispose pas de souscription pour tiers  ...";
                          $db->rollback();
                          $this->view->nom_membre = $request->getParam("nom_membre");
                          $this->view->prenom_membre = $request->getParam("prenom_membre");
                          $this->view->sexe = $request->getParam("sexe_membre");
                          $this->view->sitfam = $request->getParam("sitfam_membre");
                          $this->view->datnais = $request->getParam("date_nais_membre");
                          $this->view->nation = $request->getParam("nationalite_membre");
                          $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                          $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                          $this->view->formation = $request->getParam("formation");
                          $this->view->profession = $request->getParam("profession_membre");
                          $this->view->religion = $request->getParam("religion_membre");
                          $this->view->pere = $request->getParam("pere_membre");
                          $this->view->mere = $request->getParam("mere_membre");
                          $this->view->quartier_membre = $request->getParam("quartier_membre");
                          $this->view->ville_membre = $request->getParam("ville_membre");
                          $this->view->bp = $request->getParam("bp_membre");
                          $this->view->email = $request->getParam("email_membre");
                          return;
					   }
                                                   
					}
					
					///////////////// controle nom prenom dans mstiers_listecm ////////////////////////////
					$tabprenom = explode(" ",$request->getParam("prenom_membre"));
					$euliste = new Application_Model_DbTable_EuMstiersListecm();
					$selection = $euliste->select();
					$selection->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));
                    foreach($tabprenom as $value) {
	                  $selection->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				    }
					
					$selection->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                $selection->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                $selection->limit(1);
	                $rowseuliste = $euliste->fetchRow($selection);
					
					if(count($rowseuliste) > 0) {
					   $this->view->message = "Vous êtes déjà inscrit !!!";
                       $db->rollback();
                       $this->view->nom_membre = $request->getParam("nom_membre");
                       $this->view->prenom_membre = $request->getParam("prenom_membre");
                       $this->view->sexe = $request->getParam("sexe_membre");
                       $this->view->sitfam = $request->getParam("sitfam_membre");
                       $this->view->datnais = $request->getParam("date_nais_membre");
                       $this->view->nation = $request->getParam("nationalite_membre");
                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                       $this->view->formation = $request->getParam("formation");
                       $this->view->profession = $request->getParam("profession_membre");
                       $this->view->religion = $request->getParam("religion_membre");
                       $this->view->pere = $request->getParam("pere_membre");
                       $this->view->mere = $request->getParam("mere_membre");
                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                       $this->view->ville_membre = $request->getParam("ville_membre");
                       $this->view->bp = $request->getParam("bp_membre");
                       $this->view->email = $request->getParam("email_membre");
                       return;
			        }
					
					///////////////// controle nom prenom dans membre ////////////////////////////////////
					$eupreinscription = new Application_Model_DbTable_EuMembre();
					$select = $eupreinscription->select();
					$select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));

				    foreach($tabprenom as $value) {
	                  $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				    }

	                $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                $select->limit(1);
	                $rowseupreinscription = $eupreinscription->fetchRow($select);
					
					if(count($rowseupreinscription) > 0) {
					   $this->view->message = "Vous êtes déjà membre !!!";
                       $db->rollback();
                       $this->view->nom_membre = $request->getParam("nom_membre");
                       $this->view->prenom_membre = $request->getParam("prenom_membre");
                       $this->view->sexe = $request->getParam("sexe_membre");
                       $this->view->sitfam = $request->getParam("sitfam_membre");
                       $this->view->datnais = $request->getParam("date_nais_membre");
                       $this->view->nation = $request->getParam("nationalite_membre");
                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                       $this->view->formation = $request->getParam("formation");
                       $this->view->profession = $request->getParam("profession_membre");
                       $this->view->religion = $request->getParam("religion_membre");
                       $this->view->pere = $request->getParam("pere_membre");
                       $this->view->mere = $request->getParam("mere_membre");
                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                       $this->view->ville_membre = $request->getParam("ville_membre");
                       $this->view->bp = $request->getParam("bp_membre");
                       $this->view->email = $request->getParam("email_membre");
                       return;
			        }
					
					
					//insertion dans la table eu_mstiers_listecm
                    $mstierslistecm_mapper = new Application_Model_EuMstiersListecmMapper();
                    $compteur_mstiers = $mstierslistecm_mapper->findConuter() + 1;
					
					$mstiersliste->setId_mstiers_listecm($compteur_mstiers)
					             ->setCode_membre_apporteur($apporteur)
								 ->setCode_membre_beneficiaire(NULL)
								 ->setNom_membre($request->getParam("nom_membre"))
								 ->setPrenom_membre($request->getParam("prenom_membre"))
								 ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
								 ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
								 ->setPere_membre($request->getParam("pere_membre"))
                                 ->setMere_membre($request->getParam("mere_membre"))
								 ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
								 ->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
								 ->setBp_membre($request->getParam("bp_membre"))
								 ->setCodesecret($codesecret)
								 ->setEmail_membre($request->getParam("email_membre"))
								 ->setFormation($request->getParam("formation"))
								 ->setQuartier_membre($request->getParam("quartier_membre"))
								 ->setSexe_membre($request->getParam("sexe_membre"))
								 ->setSitfam_membre($request->getParam("sitfam_membre"))
								 ->setVille_membre($request->getParam("ville_membre"))
								 ->setCode_zone($request->getParam("code_zone"))
								 ->setId_pays($request->getParam("nationalite_membre"))
								 ->setId_canton($request->getParam("id_canton"))
								 ->setId_religion_membre($request->getParam("religion_membre"))
								 ->setCode_agence($code_agence)
								 ->setDate_listecm($date_id->toString('yyyy-MM-dd HH:mm:ss'))
								 ->setCode_caps(null)
								 ->setUtilisateur($sessionmembreasso->membreasso_id);
					$m_mstiersliste->save($mstiersliste);
					
					for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
					   $compagnie = telephonecompagnie($_POST['code_telephonique'][$i], $_POST['numero_telephone'][$i]);
                       $numero_telephone = intval($_POST['code_telephonique'][$i]).$_POST['numero_telephone'][$i];
					
					   if($compagnie == 1)  {
                            $this->view->message = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            return;
							 
                         } else {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
				            $telephone = new Application_Model_EuTelephone();
				            $m_telephone = new Application_Model_EuTelephoneMapper();
							 
					        $compteur = $m_telephone->findConuter() + 1;
					        $telephone->setId_telephone($compteur);
					        $telephone->setNumero_telephone($numero_telephone);
					        $telephone->setCompagnie_telephone($compagnie);
					        $telephone->setCode_membre(null);
							$telephone->setId_mstiers_listecm($compteur_mstiers);
					        $m_telephone->save($telephone); 
						  }
					}

                    $db->commit();
                    $sessionmembreasso->errorlogin = "Operation d'inscription reussie pour ce membre";										
				    $this->_redirect('/integrateur/inscriptioncaps');
					
                } catch (Exception $exc) {
			         $db->rollback();
		             $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                     $this->view->message = $message;
			         $this->view->nom_membre = $request->getParam("nom_membre");
                     $this->view->prenom_membre = $request->getParam("prenom_membre");
                     $this->view->sexe = $request->getParam("sexe_membre");
                     $this->view->sitfam = $request->getParam("sitfam_membre");
                     $this->view->datnais = $request->getParam("date_nais_membre");
                     $this->view->nation = $request->getParam("nationalite_membre");
                     $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                     $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                     $this->view->formation = $request->getParam("formation");
                     $this->view->profession = $request->getParam("profession_membre");
                     $this->view->religion = $request->getParam("religion_membre");
                     $this->view->pere = $request->getParam("pere_membre");
                     $this->view->mere = $request->getParam("mere_membre");
                     $this->view->quartier_membre = $request->getParam("quartier_membre");
                     $this->view->ville_membre = $request->getParam("ville_membre");
                     $this->view->bp = $request->getParam("bp_membre");
			         $this->view->email = $request->getParam("email_membre");
		             return;
	            }

            			
	   
	        } else  {
			   $this->view->message = "Champs * obligatoire ...";
               $this->view->nom_membre = $request->getParam("nom_membre");
               $this->view->prenom_membre = $request->getParam("prenom_membre");
               $this->view->sexe = $request->getParam("sexe_membre");
               $this->view->sitfam = $request->getParam("sitfam_membre");
               $this->view->datnais = $request->getParam("date_nais_membre");
               $this->view->nation = $request->getParam("nationalite_membre");
               $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
               $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
               $this->view->formation = $request->getParam("formation");
               $this->view->profession = $request->getParam("profession_membre");
               $this->view->religion = $request->getParam("religion_membre");
               $this->view->pere = $request->getParam("pere_membre");
               $this->view->mere = $request->getParam("mere_membre");
               $this->view->quartier_membre = $request->getParam("quartier_membre");
               $this->view->ville_membre = $request->getParam("ville_membre");
               $this->view->bp = $request->getParam("bp_membre");
               $this->view->email = $request->getParam("email_membre");
               return;
			}
	   
	   }
	   
	   
    }



   
    public  function inscriptionbcAction()  {
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
        $this->view->montant_bc = $montant_bc;
		
	    $request = $this->getRequest();
	    if($request->isPost()) {
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
		       $mstiersliste = new Application_Model_EuMstiersListebc();
		       $m_mstiersliste = new Application_Model_EuMstiersListebcMapper();
			   $t_mstiersliste = new Application_Model_DbTable_EuMstiersListebc();
			
		       $mstiers   = new Application_Model_EuMstiers();
               $m_mstiers = new Application_Model_EuMstiersMapper();
			   $t_fifo = new Application_Model_DbTable_EuMembreFifo();
			
               $membre  = new Application_Model_EuMembre();
	           $m_map   = new Application_Model_EuMembreMapper();
		       $membremoral = new Application_Model_EuMembreMorale();
	           $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
			 
		       $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $date_idd = clone $date_id;
			 
		       $apporteur = NULL;
			   $nom_benef = NULL;
			   $prenom_benef = NULL;
               $type_inscription = $request->getParam("type_inscription");
		       $type_souscription = $request->getParam("type_souscription");
	           $beneficiaire = NULL;
				
		       $mont_msbcm = 0;
			   $nbre_be = 0;
               $bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
               $bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
			
			   $bc  = 0;
		       $fs  = 0;
			   $mat = 0;
			   $ci  = 0;
			   $ass = 0;
			   $cb  = 0;
			   
			   if($type_inscription == 0) {
				 $nom_benef = $request->getParam("nom_beneficiaire");
				 $prenom_benef = $request->getParam("prenom_beneficiaire");
				 $fs  = 1;
			   } elseif($type_inscription == 1) {
				 $beneficiaire = $request->getParam("code_membre_beneficiaire");
			   }
			
			   if($beneficiaire != NULL) {
			       $findbeneficiaire = $m_map->find($beneficiaire,$membre);
			       if($findbeneficiaire == false) {
			          $this->view->error = "Le code membre du beneficiaire saisi  ".$beneficiaire."  est introuvable ...";
                      $db->rollback();
                      return;      
			       }
			   }

               $mstierslistebc_mapper = new Application_Model_EuMstiersListebcMapper();

			   $apporteur = $request->getParam("code_membre_apporteur");
			   if(substr($apporteur,19,1) == 'P') {
				      $findmembre = $m_map->find($apporteur,$membre);
				      if($findmembre == false) {
				         $this->view->error = "Le numéro membre du souscripteur saisi  ".$apporteur."  est introuvable ...";
                         $db->rollback();
                         return;      
			          }
			   } else {
			          $findmembre = $m_mapmoral->find($apporteur,$membremoral);
				      if($findmembre == false) {
			             $this->view->error = "Le numéro membre du souscripteur saisi  ".$apporteur."  est introuvable ...";
                         $db->rollback();
			             return;
				      }	 
			   }
				  
			   if($apporteur == $beneficiaire) {
					  $this->view->error = "Impossible de faire la souscription pour tiers à vous-meme ...";
                      $db->rollback();
			          return;
			   }
				  
				  
					
			      $cumulsolde = $m_mstiers->findcumulbc($apporteur,$type_souscription);
			      if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
				        //$mont_msbcm = $mont_bc * $bnpmps;
						$mont_msbcm = 1800000;
                        //$mont_msbcm = $mont_msbcm + $mfs + $mmat + $mci + $mass + $mcb;						
                  } else {
				        //$mont_msbcm = $mont_bc * $bnpnmps;
						$mont_msbcm = 1443750;
                        //$mont_msbcm = $mont_msbcm + $mfs + $mmat + $mci + $mass + $mcb;					
                  }
					
			      $count = $mstierslistebc_mapper->findcountbenef($apporteur) + 1;
				  $nbre_be = floor($cumulsolde/$mont_msbcm);
			      //$mont_msbcm = $count * $mont_msbcm;
					
			      if($nbre_be < $count) {
				       $this->view->error = "Le souscripteur apporteur ne dispose pas de bon de consommation pour tiers ...";
                       $db->rollback();
                       return;
			      }
				    
			 
                //insertion dans la table eu_mstiers_listebc
                //$compteur_mstiers = $mstierslistebc_mapper->findConuter() + 1;	
		        //$mstiersliste->setId_mstiers_listebc($compteur_mstiers)
				
		        $mstiersliste->setCode_membre_apporteur($apporteur)
				             ->setCode_membre_beneficiaire($beneficiaire)
				             ->setType_souscription($type_souscription)
                             ->setType_kit("KITSU")
				             ->setCode_bnp(null)
                             ->setType_liste("AvecListe")
				             ->setUtilisateur($sessionmembreasso->membreasso_id)
				             ->setDate_listebc($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
				             ->setStatut(0)
				             ->setBon_conso($bc)
				             ->setFrais_solvabilite($fs)
				             ->setPeripherique($mat)
				             ->setConnectivite($ci)
				             ->setAssurance($ass)
				             ->setCompte_bancaire($cb)
							 ->setBon_neutre_id(NULL)
							 ->setNom_membre($nom_benef)
							 ->setPrenom_membre($prenom_benef);
			     $m_mstiersliste->save($mstiersliste);
			 
			     $db->commit();
			     $sessionmembreasso->error = "Operation bien effectuée ...";
			     $this->_redirect('/integrateur/inscriptionbc');
			 
		    } catch (Exception $exc) {
		        $db->rollback();
			    $error = "Erreur d'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
				$this->view->montant_bc = $mont_bc;
                $this->view->error = $error;
                return;
		    }
        }
    }
   
   
   
   public  function inscriptionbcoldAction()  {
          $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmcint');
	  if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
	  $request = $this->getRequest();
	  if($request->isPost()) {
             $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
		 try {
		     $mstiersliste = new Application_Model_EuMstiersListebc();
		     $m_mstiersliste = new Application_Model_EuMstiersListebcMapper();
             $membre  = new Application_Model_EuMembre();
	         $m_map   = new Application_Model_EuMembreMapper();
			 $membremoral = new Application_Model_EuMembreMorale();
	         $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
			 
			 $date_id = new Zend_Date(Zend_Date::ISO_8601);
             $date_idd = clone $date_id;
			 
			 $apporteur = NULL;
             $type_inscription = $request->getParam("type_inscription");
			 $type_souscription = $request->getParam("type_souscription");
			 $beneficiaire = $request->getParam("code_membre_beneficiaire");

             if($type_inscription == "AvecListe")  {
			   $apporteur = $request->getParam("code_membre_apporteur");
			   if(substr($apporteur,19,1) == 'P')  {
				 $findmembre = $m_map->find($apporteur,$membre);
				 if($findmembre == false) {
				   $this->view->error = "Le numéro membre du CMFH saisi  ".$apporteur."  est introuvable ...";
                   $db->rollback();
                   return;      
			      }
			   } else {
			      $findmembre = $m_mapmoral->find($apporteur,$membremoral);
				  if($findmembre == false) {
					 $this->view->error = "Le numéro membre du CMFH saisi  ".$apporteur."  est introuvable ...";
                     $db->rollback();
					 return;
				   }	 
			   }
			 }
			 
			 $findbeneficiaire = $m_map->find($beneficiaire,$membre);
			 if($findbeneficiaire == false) {
			   $this->view->error = "Le code membre du beneficiaire saisi  ".$beneficiaire."  est introuvable ...";
               $db->rollback();
               return;      
			 }

             //insertion dans la table eu_mstiers_listebc
             $mstierslistebc_mapper = new Application_Model_EuMstiersListebcMapper();
             $compteur_mstiers = $mstierslistebc_mapper->findConuter() + 1;
					
			 $mstiersliste->setId_mstiers_listebc($compteur_mstiers)
					      ->setCode_membre_apporteur($apporteur)
						  ->setCode_membre_beneficiaire($beneficiaire)
						  ->setType_souscription($type_souscription)
						  ->setCode_bnp(null)
						  ->setDate_listebc($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
			 $m_mstiersliste->save($mstiersliste);
			 
			 $db->commit();
			 $sessionmembreasso->error = "Operation bien effectuée ...";
			 $this->_redirect('/integrateur/inscriptionbc');
			 
		 } catch (Exception $exc) {
		     $db->rollback();
		     $error = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                     $this->view->error = $error;
		 }
		 
      }
   }


    
   public function activationcapsAction()   {
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();

        //$membreasso_mapper->find($membreasso_id,$membreasso);
	$association_mapper->find($sessionmembreasso->membreasso_association,$association);

        //$date_idold = new Zend_Date(Zend_Date::ISO_8601);
        //$date_iddold = clone $date_idold;
            
        if(($association->guichet == 1) && ($sessionmembreasso->membreasso_association != 1))  {
           $this->_redirect('/integrateur/addsouscriptionban/paramban/1');
        } elseif($sessionmembreasso->membreasso_association != 1) {
	   $this->_redirect('/integrateur/addsouscriptionban/paramban/1');
	}

        $t_canton = new Application_Model_DbTable_EuCanton();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();

        $cantons = $t_canton->fetchAll();
          $regions = $t_region->fetchAll();
          $pays = $t_pays->fetchAll();
          $zones = $t_zone->fetchAll();
          $prefectures = $t_prefecture->fetchAll();
          $this->view->cantons = $cantons;
          $this->view->regions = $regions;
          $this->view->zones = $zones;
          $this->view->pays = $pays;
          $this->view->prefectures = $prefectures;

        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
            $request = $this->getRequest();
            if($request->isPost ()) {
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
              if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
                    && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
                    && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
                    && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
                    && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
                    && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
                    && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
                    && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
                    && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
                    && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
                    //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
                    && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
                    && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
                    && isset($_POST['id_pays']) && $_POST['id_pays']!=""
                    && isset($_POST['code_agence']) && $_POST['code_agence']!="") {

                        $mont_caps = Util_Utils::getParametre('CAPS','valeur');
                        $fs = Util_Utils::getParametre('FS','valeur');
                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                        $fkps = Util_Utils::getParametre('FKPS','valeur');

                        $id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;

                        $codesecret = Util_Utils::genererCodeSMS(8);

                        $place    = new Application_Model_EuOperation();
                        $mapper   = new Application_Model_EuOperationMapper();
                        $membre   = new Application_Model_EuMembre();
                        $m_map    = new Application_Model_EuMembreMapper();
                        $membremoral = new Application_Model_EuMembreMorale();
                        $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                        $m_caps   = new Application_Model_EuCapsMapper();
                        $caps     = new Application_Model_EuCaps();
                        $dvente   = new Application_Model_EuDepotVente();
                        $m_dvente = new Application_Model_EuDepotVenteMapper();

                        $activation   = new Application_Model_EuActivation();
                        $m_activation = new Application_Model_EuActivationMapper();
                        $membretiers = new Application_Model_EuMembretierscode();
                        $m_membretiers = new Application_Model_EuMembretierscodeMapper();

                        $allocation = new Application_Model_EuAllocationCmfh();
                        $m_allocation = new Application_Model_EuAllocationCmfhMapper();

                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
               
                        $compte_map = new Application_Model_EuCompteMapper();
                        $compte      = new Application_Model_EuCompte();
                        $sms_money   = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();
      
                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
      
                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                        $det_vtesms  = new Application_Model_EuDetailVentesms();
               
                        $telephone = new Application_Model_EuTelephone();
                        $m_telephone = new Application_Model_EuTelephoneMapper();

                        $date = new Zend_Date(Zend_Date::ISO_8601);

                        $code_agence = $request->getParam("code_agence");
                        $code_autorisation = $request->getParam("code_autorisation");
                        $type_activation = $request->getParam("type_activation");
                        $code_zone = $request->getParam("code_zone");

                        $type_bnp  = 'CAPS';
                        $type_caps = 'CAPSFLFCPS';
                        $code_activation  = '';
                        $id_membretiers  = '';
                        $id_allocation   = '';
                        $id_depot = '';
                        $souscription_id = '';
                        $apporteur = '';
                        $reste_allocation = '';

                        $table = new Application_Model_DbTable_EuActeur();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur =  $code_acteur;
                        $reste = $mont_caps;

                        if($type_activation == "SansListe")  {
                            $i = 0;
                            $lignesallocation = $m_allocation->fetchAllAllocation();
                            if($lignesallocation != false) {
                                $nbre_lignesallocation = count($lignesallocation);
                                $solde_depot = 0;
                                while($solde_depot <= 0 && $i < $nbre_lignesallocation) {
                                    $ligneallocation = $lignesallocation[$i];
                                    $id_allocation = $ligneallocation->getAllocation_cmfh_id();
                        $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
                        $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
                      $trouvesdvente = $m_dvente->findbycmfh($apporteur);

                      if($trouvesdvente != NULL && $reste_allocation > 0) {
                       $trouvedvente = $trouvesdvente[0];
                         $solde_depot = $trouvedvente->getSolde_depot();
                         $findalloc = $m_allocation->find($id_allocation,$allocation);
                       $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
                       $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
                       $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                                         $m_allocation->update($allocation);
                      }
                                      $i++;
                               }

                 } else {
                        $db->rollback();
                                $this->view->message = "Pas de comptes marchands pour tiers disponible ...";
                                      $this->view->nom_membre = $request->getParam("nom_membre");
                                      $this->view->prenom_membre = $request->getParam("prenom_membre");
                                      $this->view->sexe = $request->getParam("sexe_membre");
                                      $this->view->sitfam = $request->getParam("sitfam_membre");
                                      $this->view->datnais = $request->getParam("date_nais_membre");
                                      $this->view->nation = $request->getParam("nationalite_membre");
                                      $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                      $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                      $this->view->formation = $request->getParam("formation");
                                      $this->view->profession = $request->getParam("profession_membre");
                                      $this->view->religion = $request->getParam("religion_membre");
                                      $this->view->pere = $request->getParam("pere_membre");
                                      $this->view->mere = $request->getParam("mere_membre");
                                      $this->view->quartier_membre = $request->getParam("quartier_membre");
                                      $this->view->ville_membre = $request->getParam("ville_membre");
                                      $this->view->bp = $request->getParam("bp_membre");
                                      //$this->view->tel = $request->getParam("tel_membre");
                                      $this->view->email = $request->getParam("email_membre");
                                      //$this->view->portable = $request->getParam("portable_membre");
                                      return;

                 }

               } else {
                   $ligneallocation = $m_allocation->findByCode($code_autorisation);
                 if($ligneallocation != NULL) {
                    $id_allocation = $ligneallocation->getAllocation_cmfh_id();
                  $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
                    $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
                    $findalloc = $m_allocation->find($id_allocation,$allocation);

                  if($reste_allocation == 0) {
                        $db->rollback();
                                $this->view->message = "Cette clé d'autorisation octroyée au CMFH ne dispose pas de comptes marchands pour tiers ...";
                                      $this->view->nom_membre = $request->getParam("nom_membre");
                                      $this->view->prenom_membre = $request->getParam("prenom_membre");
                                      $this->view->sexe = $request->getParam("sexe_membre");
                                      $this->view->sitfam = $request->getParam("sitfam_membre");
                                      $this->view->datnais = $request->getParam("date_nais_membre");
                                      $this->view->nation = $request->getParam("nationalite_membre");
                                      $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                      $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                      $this->view->formation = $request->getParam("formation");
                                      $this->view->profession = $request->getParam("profession_membre");
                                      $this->view->religion = $request->getParam("religion_membre");
                                      $this->view->pere = $request->getParam("pere_membre");
                                      $this->view->mere = $request->getParam("mere_membre");
                                      $this->view->quartier_membre = $request->getParam("quartier_membre");
                                      $this->view->ville_membre = $request->getParam("ville_membre");
                                      $this->view->bp = $request->getParam("bp_membre");
                                      //$this->view->tel = $request->getParam("tel_membre");
                                      $this->view->email = $request->getParam("email_membre");
                                      //$this->view->portable = $request->getParam("portable_membre");
                                      return;
                     }

                       $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
                   $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
                   $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                                   $m_allocation->update($allocation);

                 } else {
                     $db->rollback();
                                   $this->view->message = "Cette clé d'autorisation est mal renseignée ou n'est pas active.Veuillez verifier votre saisie ...";
                             $this->view->nom_membre = $request->getParam("nom_membre");
                                   $this->view->prenom_membre = $request->getParam("prenom_membre");
                                   $this->view->sexe = $request->getParam("sexe_membre");
                                   $this->view->sitfam = $request->getParam("sitfam_membre");
                                   $this->view->datnais = $request->getParam("date_nais_membre");
                                   $this->view->nation = $request->getParam("nationalite_membre");
                                   $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                   $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                   $this->view->formation = $request->getParam("formation");
                                   $this->view->profession = $request->getParam("profession_membre");
                                   $this->view->religion = $request->getParam("religion_membre");
                                   $this->view->pere = $request->getParam("pere_membre");
                                   $this->view->mere = $request->getParam("mere_membre");
                                   $this->view->quartier_membre = $request->getParam("quartier_membre");
                                   $this->view->ville_membre = $request->getParam("ville_membre");
                                   $this->view->bp = $request->getParam("bp_membre");
                                   //$this->view->tel = $request->getParam("tel_membre");
                                   $this->view->email = $request->getParam("email_membre");
                                   //$this->view->portable = $request->getParam("portable_membre");
                                   return;
                               }

               }

               $lignesdvente = $m_dvente->findbycmfh($apporteur);
               $nbre_lignesdvente = count($lignesdvente);
               $reste = $mont_caps;

               if ($lignesdvente != NULL) {
                         $lignedvente = $lignesdvente[0];
                                $id_depot = $lignedvente->getId_depot();
                  $souscription_id = $lignedvente->getSouscription_id();
                  $finddepotvente = $m_dvente->find($id_depot,$dvente);

                  $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
                    $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                                $m_dvente->update($lignedvente);

                  $findCodesBySous = $m_membretiers->findBySouscription($souscription_id);
                    if($findCodesBySous != NULL)  {
                       $findCodeBySous = $findCodesBySous[0];
                       $id_membretiers = $findCodeBySous->getMembretierscode_id();
                       $code_activation = $findCodeBySous->getMembretierscode_code();
                    } else {
                       $db->rollback();
                                   $this->view->message = "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ...";
                             $this->view->nom_membre = $request->getParam("nom_membre");
                                   $this->view->prenom_membre = $request->getParam("prenom_membre");
                                   $this->view->sexe = $request->getParam("sexe_membre");
                                   $this->view->sitfam = $request->getParam("sitfam_membre");
                                   $this->view->datnais = $request->getParam("date_nais_membre");
                                   $this->view->nation = $request->getParam("nationalite_membre");
                                   $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                   $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                   $this->view->formation = $request->getParam("formation");
                                   $this->view->profession = $request->getParam("profession_membre");
                                   $this->view->religion = $request->getParam("religion_membre");
                                   $this->view->pere = $request->getParam("pere_membre");
                                   $this->view->mere = $request->getParam("mere_membre");
                                   $this->view->quartier_membre = $request->getParam("quartier_membre");
                                   $this->view->ville_membre = $request->getParam("ville_membre");
                                   $this->view->bp = $request->getParam("bp_membre");
                                   //$this->view->tel = $request->getParam("tel_membre");
                                   $this->view->email = $request->getParam("email_membre");
                                   //$this->view->portable = $request->getParam("portable_membre");
                                   return;
                    }


               } else {
                  $db->rollback();
                              $this->view->message = "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ...";
                        $this->view->nom_membre = $request->getParam("nom_membre");
                              $this->view->prenom_membre = $request->getParam("prenom_membre");
                              $this->view->sexe = $request->getParam("sexe_membre");
                              $this->view->sitfam = $request->getParam("sitfam_membre");
                              $this->view->datnais = $request->getParam("date_nais_membre");
                              $this->view->nation = $request->getParam("nationalite_membre");
                              $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                              $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                              $this->view->formation = $request->getParam("formation");
                              $this->view->profession = $request->getParam("profession_membre");
                              $this->view->religion = $request->getParam("religion_membre");
                              $this->view->pere = $request->getParam("pere_membre");
                              $this->view->mere = $request->getParam("mere_membre");
                              $this->view->quartier_membre = $request->getParam("quartier_membre");
                              $this->view->ville_membre = $request->getParam("ville_membre");
                              $this->view->bp = $request->getParam("bp_membre");
                              //$this->view->tel = $request->getParam("tel_membre");
                              $this->view->email = $request->getParam("email_membre");
                              //$this->view->portable = $request->getParam("portable_membre");
                              return;
               }


                    //$count = $mapper->findConuter() + 1;
                    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;

                    //$place->setId_operation($count);
                    $place->setDate_op($date->toString('yyyy-MM-dd'));
                    $place->setHeure_op($date->toString('HH:mm:ss'));
                    $place->setId_utilisateur(null);

                    if(substr($apporteur,19,1)=='P') {
                        $place->setCode_membre($apporteur);
                        $place->setCode_membre_morale(null);
                    } else  {
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($apporteur);
                    }

                    $place->setMontant_op($mont_caps);
                    $place->setCode_produit('CAPS');
                    $place->setLib_op('Enrolement');
                    $place->setType_op($type_bnp);
                    $place->setCode_cat('TCAPS');
                    $mapper->save($place);
					
					//$count = $mapper->findlastinsert();
					$count = $db->lastInsertId();

                    $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
                    $code = $m_map->getLastCodeMembreByAgence($code_agence);
                            if ($code == null) {
                               $code = $code_agence . '0000001' . 'P';
                            } else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }
                      $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $date_idd = clone $date_id;

                if ($date_nais >= $date_idd) {
                                $this->view->message = "La date de naissance doit etre antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                /////////////////controle nom prenom
                $eupreinscription = new Application_Model_DbTable_EuMembre();
                $prenom_membre = $request->getParam("prenom_membre");
		$prenom_membre = str_replace("'", " ", $prenom_membre);
		$tabprenom = explode(" ",$prenom_membre);
					
		$nom_membre = $request->getParam("nom_membre");
		$nom_membre = str_replace("'", " ", $nom_membre);

                $select = $eupreinscription->select();
                $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

                //$tabprenom = explode(" ",$request->getParam("prenom_membre"));
                foreach ($tabprenom as $value) {
                   $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                }

                $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
                $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                $select->limit(1);
                $rowseupreinscription = $eupreinscription->fetchRow($select);
                if(count($rowseupreinscription) > 0) {
                $this->view->message = "Vous êtes déjà membre !!!";
                     $db->rollback();
                     $this->view->nom_membre = $request->getParam("nom_membre");
                     $this->view->prenom_membre = $request->getParam("prenom_membre");
                     $this->view->sexe = $request->getParam("sexe_membre");
                     $this->view->sitfam = $request->getParam("sitfam_membre");
                     $this->view->datnais = $request->getParam("date_nais_membre");
                     $this->view->nation = $request->getParam("nationalite_membre");
                     $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                     $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                     $this->view->formation = $request->getParam("formation");
                     $this->view->profession = $request->getParam("profession_membre");
                     $this->view->religion = $request->getParam("religion_membre");
                     $this->view->pere = $request->getParam("pere_membre");
                     $this->view->mere = $request->getParam("mere_membre");
                     $this->view->quartier_membre = $request->getParam("quartier_membre");
                     $this->view->ville_membre = $request->getParam("ville_membre");
                     $this->view->bp = $request->getParam("bp_membre");
                     //$this->view->tel = $request->getParam("tel_membre");
                     $this->view->email = $request->getParam("email_membre");
                     //$this->view->portable = $request->getParam("portable_membre");
                      return;
                }

                /////////////////////////////// preinscription   ///////////////////////////////////////////////
                $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                //$compteur_preinscription = $preinsc_mapper->findConuter() + 1;

                $preinscription = new Application_Model_EuPreinscription();
                $mapper = new Application_Model_EuPreinscriptionMapper();

                //$preinscription->setId_preinscription($compteur_preinscription);
							
                $preinscription->setNom_membre($request->getParam("nom_membre"))
                               ->setCode_agence($code_agence)
                               ->setPrenom_membre($request->getParam("prenom_membre"))
                               ->setSexe_membre($request->getParam("sexe_membre"))
                               ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                               ->setId_pays($request->getParam("id_pays"))
                               ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                           ->setPere_membre($request->getParam("pere_membre"))
                                           ->setMere_membre($request->getParam("mere_membre"))
                                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                           ->setProfession_membre($request->getParam("profession_membre"))
                                           ->setFormation($request->getParam("formation"))
                                           ->setId_religion_membre($request->getParam("religion_membre"))
                                           ->setQuartier_membre($request->getParam("quartier_membre"))
                                           ->setVille_membre($request->getParam("ville_membre"))
                                           ->setBp_membre($request->getParam("bp_membre"))
                                           ->setTel_membre(null)
                                           //->setTel_membre($request->getParam("tel_membre"))
                                           ->setEmail_membre($request->getParam("email_membre"))
                                           //->setPortable_membre($request->getParam("portable_membre"))
                                           ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                           ->setCode_membre(null)
                                           ->setCode_fs(null)
                                           ->setCode_fl(null)
                                           ->setCode_fkps(null)
                                           ->setId_canton($request->getParam("id_canton"));
                            $preinscription->setPublier(1);
                            $mapper->save($preinscription);
							
							$compteur_preinscription = $db->lastInsertId();

                    ////// validation acnev ///////////////////////////////////////
                    $validation_quittance = new Application_Model_EuValidationQuittance();
                    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                    $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $validation_quittance->setPublier(1);
                    $validation_quittance_mapper->save($validation_quittance);


                ////// validation filere ///////////////////////////////////
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(2);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);

                             ////// validation technopole ///////////////////////////////////////////////////////////////
                $preinscription = new Application_Model_EuPreinscription();
                   $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                 $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(3);
                $preinscriptionM->update($preinscription);

                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);


                ////////////////////////////////////////////
                //insertion dans la table eu_membre
                $membre->setCode_membre($code)
                       ->setNom_membre($nom_membre)
                       ->setPrenom_membre($prenom_membre)
                       ->setSexe_membre($request->getParam("sexe_membre"))
                       ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                       ->setId_pays($request->getParam("nationalite_membre"))
                       ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                       ->setPere_membre($request->getParam("pere_membre"))
                       ->setMere_membre($request->getParam("mere_membre"))
                       ->setSitfam_membre($request->getParam("sitfam_membre"))
                       ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                       ->setProfession_membre($request->getParam("profession_membre"))
                       ->setFormation($request->getParam("formation"))
                       ->setId_religion_membre($request->getParam("religion_membre"))
                       ->setQuartier_membre($request->getParam("quartier_membre"))
                       ->setVille_membre($request->getParam("ville_membre"))
                       ->setBp_membre($request->getParam("bp_membre"))
                       ->setTel_membre(null)
                     //->setTel_membre($request->getParam("tel_membre"))
                       ->setEmail_membre($request->getParam("email_membre"))
                     //->setPortable_membre($request->getParam("portable_membre"))
                       ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                       ->setId_utilisateur(null)
                       ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                       ->setDate_identification($date_idd->toString('yyyy-MM-dd'))
                       ->setCode_agence($code_agence)
                       ->setId_maison(null)
                       ->setCodesecret(md5($codesecret))
                       ->setEtat_membre('N')
                       ->setCode_gac($acteur)
                       ->setAuto_enroler('N')
					   ->setDesactiver(2)
                       ->setId_canton($request->getParam("id_canton"));
                $m_map->save($membre);

            ////////////////////////////////////////////////////////////////////////////////
            $preinscription = new Application_Model_EuPreinscription();
            $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
            $preinscriptionM->find($compteur_preinscription, $preinscription);

            $preinscription->setCode_membre($code);
            $preinscriptionM->update($preinscription);

            $findmembretiers = $m_membretiers->find($id_membretiers,$membretiers);
            if($findmembretiers) {
                $membretiers->setCode_membre($code)
                            ->setPublier(1)
                           ->setAllocation_cmfh_id($id_allocation);
                $m_membretiers->update($membretiers);
            }

                // insertion dans la table eu_activation
            //$id_activation = $m_activation->findConuter() + 1;
            //$activation->setId_activation($id_activation)
            $activation->setId_depot($id_depot)
                       ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
                       ->setCode_activation($code_activation)
                       ->setCode_membre($code)
                       ->setMembreasso_id($sessionmembreasso->membreasso_id);
            $m_activation->save($activation);
			$id_activation = $db->lastInsertId();
            
            //for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
                $compagnie = telephonecompagnie($_POST['code_telephonique'],$_POST['numero_telephone']);
                $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
               
                if($compagnie == 1)  {
                             $this->view->message = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!";
                             $db->rollback();
                             $this->view->nom_membre = $request->getParam("nom_membre");
                             $this->view->prenom_membre = $request->getParam("prenom_membre");
                             $this->view->sexe = $request->getParam("sexe_membre");
                             $this->view->sitfam = $request->getParam("sitfam_membre");
                             $this->view->datnais = $request->getParam("date_nais_membre");
                             $this->view->nation = $request->getParam("nationalite_membre");
                             $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                             $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                             $this->view->formation = $request->getParam("formation");
                             $this->view->profession = $request->getParam("profession_membre");
                             $this->view->religion = $request->getParam("religion_membre");
                             $this->view->pere = $request->getParam("pere_membre");
                             $this->view->mere = $request->getParam("mere_membre");
                             $this->view->quartier_membre = $request->getParam("quartier_membre");
                             $this->view->ville_membre = $request->getParam("ville_membre");
                             $this->view->bp = $request->getParam("bp_membre");
                             $this->view->email = $request->getParam("email_membre");
                             return;
               
                          } else {
              
                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $telephone = new Application_Model_EuTelephone();
                     $m_telephone = new Application_Model_EuTelephoneMapper();
               
                   //$compteur = $m_telephone->findConuter() + 1;
                   //$telephone->setId_telephone($compteur);
                   $telephone->setNumero_telephone($numero_telephone);
                   $telephone->setCompagnie_telephone($compagnie);
                   $telephone->setCode_membre($code);
                   $m_telephone->save($telephone);
               
            }
            
            
            //}

            $findsmsmoney = $money_map->findBySouscription($souscription_id);
            $souscription_mapper->find($souscription_id,$souscription);
            $montcaps = Util_Utils::getParametre('CAPS','valeur');
            $membre_pbf = '0000000000000000001M';
                      $code_compte_pbf = "NN-TR-".$membre_pbf;
                  $ret = $compte_map->find($code_compte_pbf,$compte);
            
            $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
            $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
            
            if($findsmsmoney == NULL && $souscription->souscription_type == 'BAn') {
                if($lignesdetfcaps != null) {
                    //$nengfcaps = $money_map->findConuter() + 1;
                    //$sms_money->setNEng($nengfcaps)
                    $sms_money->setCode_Agence(null)
                              ->setCreditAmount($montcaps)
                              ->setSentTo($souscription->souscription_mobile)
                              ->setMotif('CAPS')
                              ->setId_Utilisateur(null)
                              ->setCurrencyCode('XOF')
                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                              ->setFromAccount($code_compte_pbf)
                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                              ->setCreditCode($code_activation)
                              ->setDestAccount(null)
                              ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                              ->setDestAccount_Consumed($souscription_id)
                              ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                              ->setNum_recu(null);
                    $money_map->save($sms_money);
				    $nengfcaps = $db->lastInsertId();
                     
                    // Mise à jour du compte de transfert
                    if($ret && ($cumulfcaps >= $montcaps)) {
                        // Mise à jour du compte de transfert
                        $compte->setSolde($compte->getSolde() - $montcaps);
                        $compte_map->update($compte);	
                    } else {
                        $this->view->message = "Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant";
                        $db->rollback();
                        $this->view->nom_membre = $request->getParam("nom_membre");
                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        //$this->view->portable = $request->getParam("portable_membre");
                        return;        
                    }
                     
                    $l = 0;
                    $reste = $montcaps;
                    $nbre_lignesdetfcaps = count($lignesdetfcaps);
                while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
                  $lignedetfcaps = $lignesdetfcaps[$l];
                                    $id = $lignedetfcaps->getId_detail_smsmoney();
                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                      if ($reste >= $lignedetfcaps->getSolde_sms()) {
                      //Mise à jour  des lignes d'enrégistrement
                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
                    //insertion dans la table eu_detailventesms
                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                $det_vtesms->setId_detail_smsmoney($id)
                                                   ->setCode_membre_dist($membre_pbf)
                                                   ->setCode_membre(null)
                                                   ->setType_tansfert('CAPS')
                                                   ->setCreditcode($code_activation)
                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                   ->setId_utilisateur(null)
                                                   ->setCode_produit('CAPS');
                                $det_vte_sms->insert($det_vtesms->toArray());
							    $id_detail_vtsms = $db->lastInsertId();
                              
                                $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
                                                   ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
                                                   ->setSolde_sms(0);
                                $det_sms_m->update($lignedetfcaps);
                         
                         } else {
                        //Mise à jour  des lignes d'enrégistrement
                    //insertion dans la table eu_detailventesms
                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                $det_vtesms->setId_detail_smsmoney($id)
                                                   ->setCode_membre_dist($membre_pbf)
                                                   ->setCode_membre(null)
                                                   ->setType_tansfert('CAPS')
                                                   ->setCreditcode($code_activation)
                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setMont_vente($reste)
                                                   ->setId_utilisateur(null)
                                                   ->setCode_produit('CAPS');
                                $det_vte_sms->insert($det_vtesms->toArray());
								$id_detail_vtsms = $db->lastInsertId();
                              
                                        $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
                            $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
                          $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                        $det_sms_m->update($lignedetfcaps);
                            $reste = 0;
                       } 
                   $l++;
                }
                  
                } else {
                $this->view->message = "Le solde du compte de transfert  est vide";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
              }  
            
            }

            $userin = new Application_Model_EuUtilisateur();
            $mapper_user = new Application_Model_EuUtilisateurMapper();

                  // insertion dans la table eu_utilisateur
                        //$id_user = $mapper_user->findConuter() + 1;
                        //$userin->setId_utilisateur($id_user)
                        $userin->setId_utilisateur_parent(null)
                               ->setPrenom_utilisateur($prenom_membre)
                               ->setNom_utilisateur($nom_membre)
                               ->setLogin($code)
                               ->setPwd(md5($codesecret))
                               ->setDescription(null)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
                               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(null)
                               ->setCode_zone($code_zone)
                               //->setCode_gac_filiere(null)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setId_canton($request->getParam("id_canton"))
                               ->setCode_acteur($acteur)
                               ->setCode_membre($code);
                        $mapper_user->save($userin);

                // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                    $mapper_contrat = new Application_Model_EuContratMapper();
                    //$id_contrat = $mapper_contrat->findConuter() + 1;
                //$contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(null);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(null);
                        $contrat->setId_pays(null);
                        $contrat->setId_utilisateur(null);
                        $contrat->setFiliere(null);
                        $mapper_contrat->save($contrat);

                // insertion dans la table eu_compte_bancaire
              $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
              for($i = 0; $i < count($_POST['code_banque']); $i++) {
			            if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
						}	
                        }

                        // insertion dans eu_fs
            $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
                     ->setCode_membre_morale(null)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($code_activation)
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur(null)
                                 ->setMont_fs($fs)
                 ->setOrigine_fs('N');
                        $tab_fs->insert($fs_model->toArray());

            //insertion des frais d'identification dans la table operation
                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;
            $lib_op = 'Enrôlement';
                        $type_op = 'ERL';
            //Util_Utils::addOperation($compteur,$code,null,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'),null);

			$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
            $place->setId_utilisateur(null);
            $place->setCode_membre($code);
            $place->setCode_membre_morale(null);
            $place->setMontant_op($fs);
            $place->setCode_produit('FS');
            $place->setLib_op($lib_op);
            $place->setType_op($type_op);
            $place->setCode_cat('TFS');
            $mapper_op->save($place);
			
			//Util_Utils::addOperation2($code,null,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'),null);

                $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();

              $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
                $caps->setCode_caps($id)
                             ->setCode_membre_benef($code)
                             ->setMont_caps($mont_caps)
                             ->setMont_fs(0)
                             ->setPeriode(0)
                             ->setId_operation($count)
                             ->setRembourser('N')
                             ->setId_credit(null)
                             ->setIndexer(1)
                             ->setType_caps($type_caps)
                             ->setCode_type_bnp($type_bnp)
                             ->setFs_utiliser(1)
                             ->setFl_utiliser(1)
                           ->setCps_utiliser(1)
                             ->setMont_panu_fs(0)
                             ->setReconst_fs(0)
                             ->setPanu(0)
                             ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur(null)
               ;

              if(substr($apporteur,19,1)=='P') {
                            $caps->setCode_membre_app($apporteur)
                                 ->setCode_membre_morale_app(null);
                        } else  {
                            $caps->setCode_membre_app(null)
                                 ->setCode_membre_morale_app($apporteur);
                        }
                $m_caps->save($caps);

            $tfl = new Application_Model_DbTable_EuFl();
            $fl = new Application_Model_EuFl();
            $mapper_op = new Application_Model_EuOperationMapper();
            $compteur = $mapper_op->findConuter() + 1;

            // insertion dans la table eu_operation
            // Util_Utils::addOperation($compteur,$code,null,null,$mont_fl,null,'Frais de licences','FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

			$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
            $place->setId_utilisateur(null);
            $place->setCode_membre($code);
            $place->setCode_membre_morale(null);
            $place->setMontant_op($mont_fl);
            $place->setCode_produit('FL');
            $place->setLib_op('Frais de licences');
            $place->setType_op(null);
            $place->setCode_cat(null);
            $mapper_op->save($place);
			
			//Util_Utils::addOperation2($code,null,null,$mont_fl,null,'Frais de licences','FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);
            // insertion dans la table eu_fl
            $fl->setCode_fl("FL-".$code)
               ->setCode_membre($code)
               ->setCode_membre_morale(null)
               ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(null)
                           ->setCreditcode($code_activation)
               ->setOrigine_fl('N');
                        $tfl->insert($fl->toArray());

            $tcartes[0]="TPAGCRPG";
            $tcartes[1]="TCNCS";
            $tcartes[2]="TPaNu";
            $tcartes[3]="TPaR";
            $tcartes[4]="TR";
            $tcartes[5]="CAPA";

            $tscartes[0]="TSRPG";
              $tscartes[1]="TSCNCS";
              $tscartes[2]="TSPaNu";
            $tscartes[3]="TSPaR";
            $tscartes[4]="TSCAPA";

            for($i = 0; $i < count($tcartes); $i++) {
              if($tcartes[$i] == "TCNCS") {
                              $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                $type_carte = 'NR';
                $res = $map_compte->find($code_compte,$compte);
              } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                              $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                $type_carte = 'NN';
                $res = $map_compte->find($code_compte,$compte);
              } else {
                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                $type_carte = 'NB';
                $res = $map_compte->find($code_compte,$compte);
              }
                if(!$res) {
                    // insertion dans la table eu_compte
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                       ->setCode_membre_morale(null)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                  $map_compte->save($compte);

                  }

                        }

            for($j = 0; $j < count($tscartes); $j++) {
              if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NR';
                  $res = $map_compte->find($code_comptets,$compte);
                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NN';
                $res = $map_compte->find($code_comptets,$compte);
              } else  {
                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NB';
                $res = $map_compte->find($code_comptets,$compte);
              }

                if(!$res) {
                    //insertion dans la table eu_compte
                    $compte->setCode_cat($tscartes[$j])
                           ->setCode_compte($code_comptets)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(null)
                           ->setCode_type_compte($type_carte)
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte($tscartes[$j])
                           ->setSolde(0);
                    $map_compte->save($compte);
                }
                        }

            //Mise e jour du compte general fgfn
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                // insertion dans la table eu_carte
                //$id_demande = $carte->findConuter() + 1;
                //$carte->setId_demande($id_demande)
				
                $carte->setCode_cat(null)
                      ->setCode_membre($code)
                      ->setMont_carte($fkps)
                      ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                      ->setLivrer(0)
                      ->setCode_Compte(null)
                      ->setImprimer(0)
                      ->setCardPrintedDate('')
                      ->setCardPrintedIDDate(0)
                      ->setId_utilisateur(null);
                $t_carte->insert($carte->toArray());

                $mapper_op = new Application_Model_EuOperationMapper();
                $countop = $mapper_op->findConuter() + 1;
                //Util_Utils::addOperation($countop,$code,null,null,$fkps,null,'Frais de CPS','CPS',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

				$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                $place->setId_utilisateur(null);
                $place->setCode_membre($code);
                $place->setCode_membre_morale(null);
                $place->setMontant_op($fkps);
                $place->setCode_produit('CPS');
                $place->setLib_op('Frais de CPS');
                $place->setType_op(null);
                $place->setCode_cat(null);
                $mapper_op->save($place);
				
		        //Util_Utils::addOperation2($code,null,null,$fkps,null,'Frais de CPS','CPS',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

                /*if(substr($apporteur,19,1) == 'P') {
                $findmembre = $m_map->find($apporteur,$membre);
                $compt = Util_Utils::findConuter() + 1;
                            Util_Utils::addSms($compt,$membre->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);
                        } else {
                $findmembre = $m_mapmoral->find($apporteur,$membremoral);
                $compt = Util_Utils::findConuter() + 1;
                            Util_Utils::addSms($compt,$membremoral->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);
            }*/




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1) {
        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
        $m_souscription->find($souscription_id, $souscription);
        
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($membreasso->membreasso_association, $association);
        $code_agence = $association->code_agence;

if($souscription->souscription_date <= '2018-01-31'){

        if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }

}else{

  if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }


}


//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea->setPartagea_activation($m_activation->findConuter());
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            //$partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem->setPartagem_activation($m_activation->findConuter());
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}


            //////////////////////////////////////////
            $compt1 = Util_Utils::findConuter() + 1;
            //Util_Utils::addSms2($compt1,intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);
            
			Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);

			//Util_Utils::addSms2new(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);

            $db->commit();

            //$this->view->message = "Ouverture de compte marchand bien effectuée ...";
            $sessionmembreasso->errorlogin = "Ouverture de compte marchand bien effectuée ...<br /><br />
            Code Membre (Login) : <strong>".$code."</strong><br />
            Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
            $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;

            $this->_redirect('/integrateur/activationcaps');

                    } else  {
                        $db->rollback();
                        $this->view->message = "Champs * obligatoire ...";
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                    }

            } catch(Exception $exc) {
                $db->rollback();
                $message = "Erreur d'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
	            //$message = "Veuillez rafraichir la page de votre formulaire";
                $this->view->message = $message;
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
                return;
            }

        }

    }
	
	
	
	


	public function activationcapsold1Action()   {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

		$request = $this->getRequest();
		if($request->isPost()) {

		    if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
		        && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
		        && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
		        && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
		        && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
		        && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
		        && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
		        && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
		        && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
		        && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
		        && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
		        && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
		        && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
		        && isset($_POST['id_pays']) && $_POST['id_pays']!=""
		        && isset($_POST['code_agence']) && $_POST['code_agence']!="") {

                    $codesecret = Util_Utils::genererCodeSMS(8);

				    $mont_caps = Util_Utils::getParametre('CAPS','valeur');
		            $fs = Util_Utils::getParametre('FS','valeur');
		            $mont_fl = Util_Utils::getParametre('FL','valeur');
		            $fkps = Util_Utils::getParametre('FKPS','valeur');

					$place    = new Application_Model_EuOperation();
		            $mapper   = new Application_Model_EuOperationMapper();
	                $membre   = new Application_Model_EuMembre();
	                $m_map    = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
		            $m_caps   = new Application_Model_EuCapsMapper();
                    $caps     = new Application_Model_EuCaps();
		            $dvente   = new Application_Model_EuDepotVente();
		            $m_dvente = new Application_Model_EuDepotVenteMapper();

		            $activation   = new Application_Model_EuActivation();
		            $m_activation = new Application_Model_EuActivationMapper();
	                $membretiers = new Application_Model_EuMembretierscode();
		            $m_membretiers = new Application_Model_EuMembretierscodeMapper();
					$souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

					$date = new Zend_Date(Zend_Date::ISO_8601);
		            $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
				        //$code_activation = null;
						$code_agence = $request->getParam("code_agence");
						//$categorie = $request->getParam("type_activation");
		                $type_bnp  = 'CAPS';
                        $type_caps = 'CAPSFLFCPS';
			            $id_membretiers  = '';
						$id_depot = '';
			            $souscription_id = '';
			            $apporteur = '';
						//$apporteur = $request->getParam("apporteur");
			            $table = new Application_Model_DbTable_EuActeur();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur =  $code_acteur;

						//if($categorie == 'AvecListe') {
						    $code_activation = $request->getParam("code_activation");
						    $tmtc = new Application_Model_DbTable_EuMembretierscode();
		                    $select = $tmtc->select();
                            $select->where('membretierscode_code like ?',$code_activation)
			                       ->where('publier = ?',0);
		                    $results = $tmtc->fetchAll($select);

			                if (count($results) > 0) {
			                    $id_membretiers = $results->current()->membretierscode_id;
			                    $souscription_id = $results->current()->membretierscode_souscription;
								$trouvesou = $souscription_mapper->find($souscription_id,$souscription);
								//$souscription_id = $souscription->getSouscription_souscription();
			                } else {
			                    $db->rollback();
                                $this->view->message = "Votre code activation est mal renseigné ou est déjà utilisé";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
			                }

						    $lignedvente = $m_dvente->findbysouscriptionmembre($souscription_id);
						    $reste = $mont_caps;
						    if ($lignedvente != NULL) {
							    if($lignedvente->getSolde_depot() >= $reste) {
						            $id_depot = $lignedvente->getId_depot();
							        $apporteur = $lignedvente->getCode_membre();
				                    $finddvente = $m_dvente->find($id_depot,$dvente);

							        //Mise à jour de la table eu_depot_vente
                                    $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
						            $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                                    $m_dvente->update($lignedvente);

								} else {
								    $db->rollback();
                                    $this->view->message = "Le montant de la souscription est insuffisant ...";
			                        $this->view->nom_membre = $request->getParam("nom_membre");
                                    $this->view->prenom_membre = $request->getParam("prenom_membre");
                                    $this->view->sexe = $request->getParam("sexe_membre");
                                    $this->view->sitfam = $request->getParam("sitfam_membre");
                                    $this->view->datnais = $request->getParam("date_nais_membre");
                                    $this->view->nation = $request->getParam("nationalite_membre");
                                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                    $this->view->formation = $request->getParam("formation");
                                    $this->view->profession = $request->getParam("profession_membre");
                                    $this->view->religion = $request->getParam("religion_membre");
                                    $this->view->pere = $request->getParam("pere_membre");
                                    $this->view->mere = $request->getParam("mere_membre");
                                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                                    $this->view->ville_membre = $request->getParam("ville_membre");
                                    $this->view->bp = $request->getParam("bp_membre");
                                    $this->view->tel = $request->getParam("tel_membre");
                                    $this->view->email = $request->getParam("email_membre");
                                    $this->view->portable = $request->getParam("portable_membre");
                                    return;
								}

				            } else {
			                    $db->rollback();
                                $this->view->message = "Ce code d'activation n'est lié à aucune souscription";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
			                }

							if(($apporteur == '') || ($apporteur == NULL)) {
							    $db->rollback();
                                $this->view->message = "Le CMFH de la souscription doit activer son compte marchand";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
							}


							if(substr($apporteur,19,1) == 'P') {
						     $findmembre = $m_map->find($apporteur,$membre);
							 if($findmembre == false) {
							     $db->rollback();
                                 $message = "Le compte marchand du CMFH est introuvable !!!";
                                 $this->view->message = $message;
						         $this->view->nom_membre = $request->getParam("nom_membre");
                                 $this->view->prenom_membre = $request->getParam("prenom_membre");
                                 $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->portable = $request->getParam("portable_membre");
				                 return;
							 }
						  }  else {
						     $findmembre = $m_mapmoral->find($apporteur,$membremoral);
							 if($findmembre == false) {
							    $db->rollback();
                                $message = "Le compte marchand du CMFH est introuvable !!!";
                                $this->view->message = $message;
						        $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
				                return;
						     }
						}




						//}

						/*else  {
						    $lignedventes = $m_dvente->findbycmfhsansliste();
				            $reste = $mont_caps;
							if ($lignedventes != null) {
				                $lignedvente = $lignedventes[0];
					            $id_depot = $lignedvente->getId_depot();
					            $finddvente = $m_dvente->find($id_depot,$dvente);
						        $apporteur = $lignedvente->getCode_membre();
						        $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
						        $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                                $m_dvente->update($lignedvente);
				            } else {
			                    $db->rollback();
                                $this->view->message = "Aucun  CMFH ne dispose de code d'activation";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
			                }

						}*/


						$count = $mapper->findConuter() + 1;
                        $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                        $date_deb = clone $date_fin;

				        $place->setId_operation($count)
                              ->setDate_op($date->toString('yyyy-MM-dd'))
                              ->setHeure_op($date->toString('HH:mm:ss'))
                              ->setId_utilisateur(null);
						if(substr($apporteur,19,1) == 'P') {
                          $place->setCode_membre($apporteur)
						        ->setCode_membre_morale(NULL);
						} else {
                          $place->setCode_membre_morale($apporteur)
						        ->setCode_membre(NULL);
						}

                        $place->setMontant_op($mont_caps)
                              ->setCode_produit('CAPS')
                              ->setLib_op('Enrolement')
                              ->setType_op($type_bnp)
                              ->setCode_cat('TCAPS');
			            $mapper->save($place);

		                /*$place->setId_operation($count)
                              ->setDate_op($date->toString('yyyy-MM-dd'))
                              ->setHeure_op($date->toString('HH:mm:ss'))
                              ->setId_utilisateur(null)
                              ->setCode_membre($apporteur)
                              ->setCode_membre_morale(null)
                              ->setMontant_op($mont_caps)
                              ->setCode_produit('CAPS')
                              ->setLib_op('Enrolement')
                              ->setType_op($type_bnp)
                              ->setCode_cat('TCAPS');
			            $mapper->save($place);*/

			            $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
			            $code = $m_map->getLastCodeMembreByAgence($code_agence);
                        if ($code == null) {
                            $code = $code_agence . '0000001' . 'P';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'P';
                        }

			            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                        $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;

						$trouvemembre = $m_map->fetchByMembre($request->getParam("nom_membre"),$request->getParam("prenom_membre"),$date_nais->toString('yyyy-MM-dd'),$request->getParam("lieu_nais_membre"));
						if($trouvemembre != false) {
						    $this->view->message = "Ouverture de compte marchand déjà effectué pour ce membre !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
						}



						if ($date_nais >= $date_idd) {
                            $this->view->message = "La date de naissance doit etre antérieure à la date actuelle !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }

						/////////////////////////////// preinscription ///////////////////////////////////////////////

                        $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                        $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

                        $preinscription = new Application_Model_EuPreinscription();
                        $mapper = new Application_Model_EuPreinscriptionMapper();

                        $preinscription->setId_preinscription($compteur_preinscription)
                                       ->setNom_membre($request->getParam("nom_membre"))
						               ->setCode_agence($code_agence)
                                       ->setPrenom_membre($request->getParam("prenom_membre"))
                                       ->setSexe_membre($request->getParam("sexe_membre"))
                                       ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                       ->setId_pays($request->getParam("id_pays"))
                                       ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                       ->setPere_membre($request->getParam("pere_membre"))
                                       ->setMere_membre($request->getParam("mere_membre"))
                                       ->setSitfam_membre($request->getParam("sitfam_membre"))
                                       ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                       ->setProfession_membre($request->getParam("profession_membre"))
                                       ->setFormation($request->getParam("formation"))
                                       ->setId_religion_membre($request->getParam("religion_membre"))
                                       ->setQuartier_membre($request->getParam("quartier_membre"))
                                       ->setVille_membre($request->getParam("ville_membre"))
                                       ->setBp_membre($request->getParam("bp_membre"))
                                       ->setTel_membre($request->getParam("tel_membre"))
                                       ->setEmail_membre($request->getParam("email_membre"))
                                       ->setPortable_membre($request->getParam("portable_membre"))
                                       ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                       ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                       ->setCode_membre(null)
                                       ->setCode_fs(null)
                                       ->setCode_fl(null)
                			           ->setCode_fkps(null);
                        $preinscription->setPublier(1);

                        $mapper->save($preinscription);

						////// validation acnev ///////////////////////////////////////
					    $validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


                        ////// validation filere ///////////////////////////////////
						$preinscription = new Application_Model_EuPreinscription();
						$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
					    $preinscriptionM->find($compteur_preinscription, $preinscription);

						$preinscription->setPublier(2);
						$preinscriptionM->update($preinscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

                        ////// validation technopole ///////////////////////////////////////////////////////////////
						$preinscription = new Application_Model_EuPreinscription();
					    $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
						$preinscriptionM->find($compteur_preinscription, $preinscription);

						$preinscription->setPublier(3);
						$preinscriptionM->update($preinscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


                        ////////////////////////////////////////////
						// insertion dans la table eu_membre
                        $membre->setCode_membre($code)
                               ->setNom_membre($request->getParam("nom_membre"))
                               ->setPrenom_membre($request->getParam("prenom_membre"))
                               ->setSexe_membre($request->getParam("sexe_membre"))
                               ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                               ->setId_pays($request->getParam("nationalite_membre"))
                               ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                               ->setPere_membre($request->getParam("pere_membre"))
                               ->setMere_membre($request->getParam("mere_membre"))

                               ->setSitfam_membre($request->getParam("sitfam_membre"))
                               ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                               ->setProfession_membre($request->getParam("profession_membre"))
                               ->setFormation($request->getParam("formation"))
                               ->setId_religion_membre($request->getParam("religion_membre"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre($request->getParam("tel_membre"))
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre($request->getParam("portable_membre"))
                               ->setId_utilisateur(null)
                               ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                               ->setDate_identification($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_agence($code_agence)
                               ->setId_maison(null)
                               ->setCodesecret(md5($codesecret))
				               ->setEtat_membre('N')
				               ->setCode_gac($acteur)
                               ->setAuto_enroler('N');
                            $m_map->save($membre);

						////////////////////////////////////////////////////////////////////////////////
						$preinscription = new Application_Model_EuPreinscription();
						$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
						$preinscriptionM->find($compteur_preinscription, $preinscription);

						$preinscription->setCode_membre($code);
						$preinscriptionM->update($preinscription);

				        // insertion dans la table eu_activation
						$id_activation = $m_activation->findConuter() + 1;
						$activation->setId_activation($id_activation)
						           ->setId_depot($id_depot)
								   ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
								   ->setCode_activation($code_activation)
								   ->setCode_membre($code);
						$m_activation->save($activation);


				        $findmembretiers = $m_membretiers->find($id_membretiers,$membretiers);
			            if($findmembretiers) {
			                $membretiers->setCode_membre($code)
							            ->setPublier(1);
				            $m_membretiers->update($membretiers);
		                }

			            $userin = new Application_Model_EuUtilisateur();
                        $mapper_user = new Application_Model_EuUtilisateurMapper();

			            // insertion dans la table eu_utilisateur
                        $id_user = $mapper_user->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(null)
                               ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                               ->setNom_utilisateur($request->getParam("nom_membre"))
                               ->setLogin($code)
                               ->setPwd(md5($codesecret))
                               ->setDescription(null)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
				               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(null)
                               ->setCode_zone($code_zone)
                               //->setCode_gac_filiere(null)
		                       ->setId_pays($request->getParam("id_pays"))
                               ->setCode_acteur($acteur)
				               ->setCode_membre($code);
                        $mapper_user->save($userin);

				        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
		                $mapper_contrat = new Application_Model_EuContratMapper();
		                $id_contrat = $mapper_contrat->findConuter() + 1;
				        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(null);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(null);
                        $contrat->setId_pays(null);
                        $contrat->setId_utilisateur(null);
                        $contrat->setFiliere(null);
                        $mapper_contrat->save($contrat);

				        // insertion dans la table eu_compte_bancaire
					    $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
					    for($i = 0; $i < count($_POST['code_banque']); $i++) {
                if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                          }
                        }

                        // insertion dans eu_fs
						$tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
						         ->setCode_membre_morale(null)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($code_activation)
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur(null)
                                 ->setMont_fs($fs)
								 ->setOrigine_fs('N');
                        $tab_fs->insert($fs_model->toArray());

						//insertion des frais d'identification dans la table operation
                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;
						$lib_op = 'Enrôlement';
                        $type_op = 'ERL';
						Util_Utils::addOperation($compteur,$code,null,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'),null);

				        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();

					    $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
				        $caps->setCode_caps($id)
                             ->setCode_membre_benef($code)
                             ->setMont_caps($mont_caps)
                             ->setMont_fs(0)
                             ->setPeriode(0)
                             ->setId_operation($count)
                             ->setRembourser('N')
                             ->setId_credit(null)
                             ->setIndexer(1)
                             ->setType_caps($type_caps)
                             ->setCode_type_bnp($type_bnp)
                             ->setFs_utiliser(1)
                             ->setFl_utiliser(1)
	                         ->setCps_utiliser(1)
                             ->setMont_panu_fs(0)
                             ->setReconst_fs(0)
                             ->setPanu(0)
                             ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur(null);

					    if(substr($apporteur,19,1)=='P') {
                            $caps->setCode_membre_app($apporteur)
                                 ->setCode_membre_morale_app(null);
                        } else  {
                            $caps->setCode_membre_app(null)
                                 ->setCode_membre_morale_app($apporteur);
                        }
				        $m_caps->save($caps);

						$mapper_op = new Application_Model_EuOperationMapper();
						$tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
						$compteur = $mapper_op->findConuter() + 1;

						// insertion dans la table eu_operation
                        Util_Utils::addOperation($compteur,$code,null,null,$mont_fl,null,'Frais de licences','FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

						// insertion dans la table eu_fl
						$fl->setCode_fl("FL-".$code)
                           ->setCode_membre($code)
						   ->setCode_membre_morale(null)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(null)
                           ->setCreditcode($code_activation)
						   ->setOrigine_fl('N');
                        $tfl->insert($fl->toArray());

						$tcartes[0]="TPAGCRPG";
						$tcartes[1]="TCNCS";
						$tcartes[2]="TPaNu";
						$tcartes[3]="TPaR";
						$tcartes[4]="TR";
						$tcartes[5]="CAPA";

						$tscartes[0]="TSRPG";
					    $tscartes[1]="TSCNCS";
					    $tscartes[2]="TSPaNu";
						$tscartes[3]="TSPaR";
						$tscartes[4]="TSCAPA";

						for($i = 0; $i < count($tcartes); $i++) {
							if($tcartes[$i] == "TCNCS") {
                              $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NR';
							  $res = $map_compte->find($code_compte,$compte);
							} elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                              $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NN';
							  $res = $map_compte->find($code_compte,$compte);
							} else {
							  $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NB';
							  $res = $map_compte->find($code_compte,$compte);
							}
								if(!$res) {
								    // insertion dans la table eu_compte
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
										   ->setCode_membre_morale(null)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
									$map_compte->save($compte);

							    }

                        }

						for($j = 0; $j < count($tscartes); $j++) {
							if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NR';
							    $res = $map_compte->find($code_comptets,$compte);
						    } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NN';
								$res = $map_compte->find($code_comptets,$compte);
							} else  {
								$code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NB';
								$res = $map_compte->find($code_comptets,$compte);
							}

								if(!$res) {
								    // insertion dans la table eu_compte
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
										   ->setCode_membre_morale(null)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
									$map_compte->save($compte);

							    }

                        }

						//Mise e jour du compte general fgfn
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $fl);
                            $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($fl);
                            $cg_mapper->save($cg_fgfn);
                        }

						// insertion dans la table eu_carte
    					$id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
							  ->setCode_cat(null)
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte(null)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(null)
							  ->setOrigine_fkps('N');
                        $t_carte->insert($carte->toArray());




/////////////////////////////////////////////////////////////
/*
			if(isset($souscription->souscription_id) && $souscription->souscription_id > 0){
//////////////////////////////////////////////////////////
$id_souscription = $souscription->souscription_id;

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id_souscription, $souscription);




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1 && $sessionmembreasso->membreasso_id != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($souscription->souscription_id);
        //$cumul_recubancaire = 0;

		if($cumul_recubancaire > 0){

		if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor($cumul_recubancaire / 100 * 5);
}else if($souscription->souscription_programme == "CMFH"){
      //$partagea_montant = floor(($cumul_recubancaire / 100 * 5) / $souscription->souscription_nombre);
      $partagea_montant = floor(109);
}
/*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

			if($souscription->souscription_type == "1"){
			$partagea_montant = floor(($cumul_recubancaire / 100 * 10) / 2);
				}else{
			$partagea_montant = floor(($cumul_recubancaire / 100 * 5) / 2);
					}
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);*/

		/*}else{

			if($souscription->souscription_type == "1"){
			$partagea_montant = floor($cumul_recubancaire / 100 * 10);
				}else{
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
					}
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);

		}*/

//////////////////////////////////////////
/*
        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}

			}



						}
*/
/////////////////////////////////////////////////////////////

                        $mapper_op = new Application_Model_EuOperationMapper();
						$countop = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($countop,$code,null,null,$fkps,null,'Frais de CPS','CPS',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

						/* if(substr($apporteur,19,1) == 'P') {
						   $findmembre = $m_map->find($apporteur,$membre);
						   $compt = Util_Utils::findConuter() + 1;
                           Util_Utils::addSms($compt,$membre->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);
                        } else {
						   $findmembre = $m_mapmoral->find($apporteur,$membremoral);
						   $compt = Util_Utils::findConuter() + 1;
                           Util_Utils::addSms($compt,$membremoral->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);
						} */

			            $compt1 = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms($compt1,$request->getParam("portable_membre"),"Bienvenue dans le reseau MCNP !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);

						$db->commit();
						$this->view->message = "Ouverture de compte marchand bien effectuée ...";
						$this->_redirect('/integrateur/activationcaps');

	                } catch (Exception $exc) {
                        $db->rollback();
                        $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                        $this->view->message = $message;
						$this->view->nom_membre = $request->getParam("nom_membre");
                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->portable = $request->getParam("portable_membre");
				        return;
                    }

	        }  else {
			    $this->view->message = "Champs * obligatoire ...";
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
			}

	    }

	}










    public function listsouscriptionetatAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->findMoisAnneeAssociation($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;

    }


    public function listsouscriptionetat2Action()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription($sessionmembreasso->membreasso_association, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;

	}
	} /*else {

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription(0, "", "");

	}*/
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat22Action()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription($sessionmembreasso->membreasso_id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;

	} /*else {

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription(0, "", "");

	}*/
	}
        $this->view->tabletri = 1;


    }



    public function listsouscriptionetat23Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme2($sessionmembreasso->membreasso_association, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;

  }
  } /*else {

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription(0, "", "");

  }*/
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat223Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme2($sessionmembreasso->membreasso_id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;

  }
  } /*else {

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription(0, "", "");

  }*/
        $this->view->tabletri = 1;


    }





    public function listsouscriptionetat24Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

$periode = (string) $this->_request->getParam('periode');

  //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;

  }
  /*} else {

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription(0, "", "");

  }*/
        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat224Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

$periode = (string) $this->_request->getParam('periode');

  //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;

  }
  /*} else {

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription(0, "", "");

  }*/
        $this->view->tabletri = 1;


    }






public function listsouscriptionetat231Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme22($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;


    }


    public function listsouscriptionetat2231Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme22($sessionmembreasso->membreasso_id);

       $this->view->tabletri = 1;


    }



    public function listsouscriptionetat241Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


$id = (int) $this->_request->getParam('id');

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionAutre($id);

        
         $this->view->tabletri = 1;


    }


    public function listsouscriptionetat2241Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


$id = (int) $this->_request->getParam('id');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionAutre($id);


        $this->view->tabletri = 1;


    }






    public function etatsouscriptionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


            $debut = (string)$this->_request->getParam('debut');
            $fin = (string)$this->_request->getParam('fin');

			if($debut != "" && $fin != ""){

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme($sessionmembreasso->membreasso_association, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;

        $this->view->tabletri = 1;
		}else{
		$this->_redirect('/integrateur/listsouscriptionetat');
			}

    }






    public function addpayementcommissionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


            $type = (int)$this->_request->getParam('type');

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="" && isset($_POST['payement_commission_montant']) && $_POST['payement_commission_montant']!="" && isset($_POST['id_type_commission']) && $_POST['id_type_commission']!="" && isset($_POST['id_mode_payement']) && $_POST['id_mode_payement']!="") {


			list($date_debut, $date_fin) = explode("/", $_POST['periode']);

        $date_id = Zend_Date::now();

if($type == 1){
        $partagea_m = new Application_Model_EuPartageaMapper();
        $partage = $partagea_m->findSomme($sessionmembreasso->membreasso_association, $date_debut, $date_fin);
	}else{
        $partagem_m = new Application_Model_EuPartagemMapper();
        $partage = $partagem_m->findSomme($sessionmembreasso->membreasso_association, $sessionmembreasso->membreasso_id, $date_debut, $date_fin);
		}

		if($_POST['payement_commission_montant'] <= $partage[2]){


        $payement_commission = new Application_Model_EuPayementCommission();
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();

            $compteur_payement_commission = $payement_commission_mapper->findConuter() + 1;
            $payement_commission->setPayement_commission_id($compteur_payement_commission);
	        $payement_commission->setPayement_commission_montant($_POST['payement_commission_montant']);
            $payement_commission->setPayement_commission_date_demande($date_id->toString('yyyy-MM-dd'));
            $payement_commission->setPayement_commission_demande(1);
	        $payement_commission->setPayement_commission_payer(0);
			$payement_commission->setPayement_commission_date_payer(NULL);
			$payement_commission->setPayement_commission_date_debut($date_debut);
			$payement_commission->setPayement_commission_date_fin($date_fin);
			$payement_commission->setMembreasso_id($sessionmembreasso->membreasso_id);
			$payement_commission->setId_type_commission($_POST['id_type_commission']);
			$payement_commission->setId_mode_payement($_POST['id_mode_payement']);
			$payement_commission->setPayement_commission_type($type);
            $payement_commission_mapper->save($payement_commission);


		$this->_redirect('/integrateur/listpayementcommission');

}else {  $sessionmembreasso->error = "Vous ne pouvez pas demander plus que votre commission."; }


		} else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
	}

	}



    public function listpayementcommissionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByMembreasso($sessionmembreasso->membreasso_id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
	} else {
        $payement_commission_mapper = new Application_Model_EuPayementCommissionMapper();
        $this->view->entries = $payement_commission_mapper->fetchAllByMembreasso($sessionmembreasso->membreasso_id, "", "");
	}
	}

        $this->view->tabletri = 1;


    }






    public function supppayementcommissionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $payement_commission = new Application_Model_EuPayementCommission();
        $payement_commissionM = new Application_Model_EuPayementCommissionMapper();
        $payement_commissionM->find($id, $payement_commission);

        $payement_commissionM->delete($payement_commission->payement_commission_id);

        }

		$this->_redirect('/integrateur/listpayementcommission');
    }









    public function editsouscriptionAction()
    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

            			$id = (int)$this->_request->getParam('id');

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
			    //&& isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!=""
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!=""
				//&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
				//&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
				//&& isset($_POST['souscription_type']) && $_POST['souscription_type']!=""
				//&& isset($_POST['souscription_numero']) && $_POST['souscription_numero']!=""
				//&& isset($_POST['souscription_date_numero']) && $_POST['souscription_date_numero']!=""
				//&& isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!=""
				//&& isset($_POST['souscription_montant']) && $_POST['souscription_montant']!=""
				) {

		            /*$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {*/

						/*$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()
													->where('souscription_id != ?',$_POST['souscription_id'])
													->where('souscription_login = ?',$_POST['souscription_login'])
													->where('souscription_passe = ?',$_POST['souscription_passe']);
	                    if ($rowseusouscription = $eusouscription->fetchRow($select) && $_POST['souscription_login'] != "") {
                            $sessionmembreasso->error = "Login déjà existant ...";

            $id = $_POST['souscription_id'];
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	                    }  else if($_POST['souscription_passe'] != $_POST['confirme']) {
                            $sessionmembreasso->error = "Mot de passe incorret ...";

            $id = $_POST['souscription_id'];
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	                    } else {*/
						    $date_id = Zend_Date::now();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();
							$souscription_mapper->find($_POST['souscription_id'], $souscription);

		                    /*include("Transfert.php");
		                    if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
		                        $chemin	= "souscriptions";
		                        $file = $_FILES['souscription_vignette']['name'];
		                        $file1='souscription_vignette';
		                        $souscription_vignette = $chemin."/".transfert($chemin,$file1);
							} else {$souscription_vignette = $_POST['souscription_vignetteold'];}
							*/



							//$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
                            //$souscription->setSouscription_personne($_POST['souscription_personne']);
			                if($_POST['souscription_personne'] == "PP") {
                                $souscription->setSouscription_nom($_POST['souscription_nom']);
                                $souscription->setSouscription_prenom($_POST['souscription_prenom']);
			                } else {
                                $souscription->setSouscription_raison($_POST['souscription_raison']);
                                $souscription->setCode_type_acteur($_POST['type_acteur']);
                                $souscription->setCode_statut($_POST['statut_juridique']);
			                }
                            $souscription->setSouscription_email($_POST['souscription_email']);
                            $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                            //$souscription->setSouscription_membreasso(1);
                            //$souscription->setSouscription_type($_POST['souscription_type']);
                            //$souscription->setSouscription_numero($_POST['souscription_numero']);
                            //$souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
			                /*if($_POST['souscription_type'] == "Banque") {
                                $souscription->setSouscription_banque($_POST['souscription_banque']);
			                }*/
                            //$souscription->setSouscription_montant($_POST['souscription_montant']);
                            //$souscription->setSouscription_nombre($_POST['souscription_nombre']);
                            //$souscription->setSouscription_programme($_POST['souscription_programme']);
                            //$souscription->setSouscription_type_candidat($_POST['souscription_type_candidat']);

                            //$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($souscription_vignette);
                            $souscription->setCode_activite($_POST['code_activite']);
                            $souscription->setId_metier($_POST['id_metier']);
                            $souscription->setId_competence($_POST['id_competence']);
                            $souscription->setSouscription_ville($_POST['souscription_ville']);
                            $souscription->setSouscription_quartier($_POST['souscription_quartier']);
			                /*if($_POST['souscription_programme'] == "CMFH") {
                                $souscription->setSouscription_login($_POST['souscription_login']);
                                $souscription->setSouscription_passe($_POST['souscription_passe']);
			                }*/
			                /*if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
				            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
					        }*/

                            //$souscription->setSouscription_autonome($_POST['souscription_autonome']);
			                //$souscription->setPublier(0);
							$souscription->setId_canton($_POST['id_canton']);
                            $souscription_mapper->update($souscription);


							///////////////////////////////////////////////////////////////////////////////////////


$sessionmembreasso->error = "Opération bien effectuée ...";


		$this->_redirect('/integrateur');



						//}

		            /*}  catch (Exception $exc) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($_POST['souscription_id'], $a);
		$this->view->souscription = $a;
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
		                $this->_redirect('/integrateur/editsouscription/id/'.$id);
                        return;
                    }*/

		} else {  $sessionmembreasso->error = "Champs * obligatoire ...";

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	}

	} else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuSouscription();
        $ma = new Application_Model_EuSouscriptionMapper();
		$ma->find($id, $a);
		$this->view->souscription = $a;
            }
	}
	}




















    public function listactivationmppAction()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries = $membre->fetchAllByActivationMembreasso($sessionmembreasso->membreasso_id);

        $this->view->tabletri = 1;

    }






    public function listactivationmpmAction()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $membremorale->fetchAllByActivationMembreasso($sessionmembreasso->membreasso_id);

        $this->view->tabletri = 1;

    }






    public function listactivationmpp2Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $membre = new Application_Model_EuMembreMapper();
        $this->view->entries = $membre->fetchAllByActivationAssociation($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;

    }





    public function listactivationmpm2Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $membremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $membremorale->fetchAllByActivationAssociation($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;

    }









    public function addsouscriptionbanAction() {
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');


        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


    $date_id = Zend_Date::now();

    $request = $this->getRequest ();
    if ($request->isPost ()) {

  if (
  (
  (isset($_POST['bon_neutre_nom']) && $_POST['bon_neutre_nom']!="" && isset($_POST['bon_neutre_prenom']) && $_POST['bon_neutre_prenom']!="") ||
  (isset($_POST['bon_neutre_raison']) && $_POST['bon_neutre_raison']!="")
  ) &&
  isset($_POST['bon_neutre_autonome']) &&
  isset($_POST['bon_neutre_mobile']) && $_POST['bon_neutre_mobile']>0 &&
  isset($_POST['bon_neutre_email']) && $_POST['bon_neutre_email']!="" &&
  isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']!="" &&
  isset($_POST['id_canton']) && $_POST['id_canton']!="" &&
  isset($_POST['bon_neutre_banque']) && $_POST['bon_neutre_banque']!="" &&
  isset($_POST['bon_neutre_numero']) && $_POST['bon_neutre_numero']!="" && $_POST['bon_neutre_numero']!=NULL &&
  isset($_POST['bon_neutre_date_numero']) && $_POST['bon_neutre_date_numero']!="" &&
  isset($_POST['bon_neutre_montant']) && $_POST['bon_neutre_montant']!="") {

                $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
          try {
                $date_id = Zend_Date::now();

                        /////////////////controle nom prenom
              /*$eubon_neutre = new Application_Model_DbTable_EuBonNeutre();
                      $select = $eubon_neutre->select();
                      $select->where("LOWER(REPLACE(bon_neutre_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_nom"))));
                      $select->where("LOWER(REPLACE(bon_neutre_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_prenom"))));
                      $select->order(array("bon_neutre_id ASC"));
                      $select->limit(1);
                      $rowseubon_neutre = $eubon_neutre->fetchRow($select);
                    if(count($rowseubon_neutre) > 0) {
                    $bon_neutre_ok = 1;
                    $bon_neutre_first = $rowseubon_neutre->bon_neutre_id;
                  } else {
                    $bon_neutre_ok = 0;
                  }*/

            /////////////////controle numero de banque
                        $eubon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
                        $select = $eubon_neutre_detail->select()
                                                ->where('bon_neutre_detail_banque = ?',$request->getParam("bon_neutre_banque"))
                                                ->where('bon_neutre_detail_numero = ?',$request->getParam("bon_neutre_numero"))
                                                ->where('bon_neutre_detail_date_numero = ?',$request->getParam("bon_neutre_date_numero"))
                                                ;
                        if ($rowseubon_neutre_detail = $eubon_neutre_detail->fetchRow($select)) {
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($rowseubon_neutre_detail->bon_neutre_id, $bon_neutre);

                                $code_BAn = $bon_neutre->bon_neutre_code;

                            //$db->rollback();
                            //$sessionmembreasso->error = "Numéro de banque déjà utilisé ...";
                            //$this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            //return;
                        }else{

            /////////////////controle email
            if(!filter_var($request->getParam("bon_neutre_email"), FILTER_VALIDATE_EMAIL)){
                            $db->rollback();
                            $sessionmembreasso->error = "E-mail non valable ...";
                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;
            }

          //////////////////////////bon_neutre_code_ban
          if(isset($_POST['bon_neutre_code_ban']) && $_POST['bon_neutre_code_ban']!=""){
          $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByCode($request->getParam("bon_neutre_code_ban"));
          if(count($bon_neutre2) > 0){
                      if((str_replace(" ", "", $_POST['bon_neutre_nom']) == str_replace(" ", "", $bon_neutre2->bon_neutre_nom) && str_replace(" ", "", $_POST['bon_neutre_prenom']) == str_replace(" ", "", $bon_neutre2->bon_neutre_prenom)) || (str_replace(" ", "", $_POST['bon_neutre_raison']) == str_replace(" ", "", $bon_neutre2->bon_neutre_raison))){

                      }else{
                        $db->rollback();
                            $sessionmembreasso->error = "Le nom du recu de versement ne correspond pas à ce Code BAn ...";
                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;
                    }

          }else{
            $db->rollback();
                            $sessionmembreasso->error = "Ancien Code BAn erroné ...";
                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;
          }
          }



                        /////////////////controle montant
            if($request->getParam("bon_neutre_banque") == "BOA" || $request->getParam("bon_neutre_banque") == "UTB" || $request->getParam("bon_neutre_banque") == "BAT"  || $request->getParam("bon_neutre_banque") == "DBANK"  || $request->getParam("bon_neutre_banque") == "ECOBANK" || $request->getParam("bon_neutre_banque") == "ORABANK"  || $request->getParam("bon_neutre_banque") == "WARI" || $request->getParam("bon_neutre_banque") == "BPEC" || $request->getParam("bon_neutre_banque") == "CCP" || $request->getParam("bon_neutre_banque") == "BTCI" || $request->getParam("bon_neutre_banque") == "FAIP" || $request->getParam("bon_neutre_banque") == "CECL" || $request->getParam("bon_neutre_banque") == "MECIT" || $request->getParam("bon_neutre_banque") == "MUTUAL" || $request->getParam("bon_neutre_banque") == "MECI" || $request->getParam("bon_neutre_banque") == "ASMA") {

                $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate7($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $libellebanques, $request->getParam("bon_neutre_date_numero"));

                if(count($relevebancairedetail) > 0) {
                    if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                        $db->rollback();
                        $sessionmembreasso->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                        $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                        return;
                    }
					
                } else {

                    if($request->getParam("bon_neutre_banque") == "BAT"  || $request->getParam("bon_neutre_banque") == "DBANK") {
                        $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                        if(count($relevebancairedetail) > 0) {
                            if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                $db->rollback();
                                $sessionmembreasso->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...".$relevebancairedetail->relevebancairedetail_montant;
                                $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                                return;
                            }
                        } else {
                            $db->rollback();
                            $sessionmembreasso->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;
                        }

                    } else if($request->getParam("bon_neutre_banque") == "ECOBANK") {
                        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate6($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $request->getParam("bon_neutre_date_numero"));
                        if(count($relevebancairedetail) > 0) {
                            if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                $db->rollback();
                                $sessionmembreasso->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                                return;
                            }
                        } else {
                            $db->rollback();
                            $sessionmembreasso->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;
                        }

                    } else if($request->getParam("bon_neutre_banque") == "ORABANK")  {
                        $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                        if(count($relevebancairedetail) > 0) {
                            if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                $db->rollback();
                                $sessionmembreasso->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                                return;
                            }
                        } else {
                            $db->rollback();
                            $sessionmembreasso->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;
                        }

                                }else if($request->getParam("bon_neutre_banque") == "UTB"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmembreasso->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmembreasso->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                    } else {
                        $db->rollback();
                        $sessionmembreasso->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                        $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                        return;
                    }
                }
                } else {
                    $db->rollback();
                    $sessionmembreasso->error = "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ...";
                    $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                    return;
                }


            //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                  $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);



/////////////////////////////////////controle code membre
if(isset($_POST['bon_neutre_code_membre']) && $_POST['bon_neutre_code_membre']!=""){
if(strlen($_POST['bon_neutre_code_membre']) != 20) {
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                  $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                  return;
}else{
if(substr($_POST['bon_neutre_code_membre'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['bon_neutre_code_membre'], $membre);
                                if(count($membre) == 0){
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                  $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                  return;
                }
                if($_POST['bon_neutre_nom'] == "" || $_POST['bon_neutre_nom'] == NULL){
                  $db->rollback();
                                $sessionmembreasso->error = "Veuillez bien saisir le nom et prénom(s)";
                  $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                  return;
                }
                                $nom_membre = $membre->nom_membre;
                                $prenom_membre = $membre->prenom_membre;
                                $raison_sociale = "";
  }
if(substr($_POST['bon_neutre_code_membre'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['bon_neutre_code_membre'], $membremorale);
                                if(count($membremorale) == 0){
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                  $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                  return;
                }
                if($_POST['bon_neutre_raison'] == "" || $_POST['bon_neutre_raison'] == NULL){
                  $db->rollback();
                                $sessionmembreasso->error = "Veuillez bien saisir la raison sociale";
                  $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                  return;
                }
                                $nom_membre = "";
                                $prenom_membre = "";
                                $raison_sociale = $membremorale->raison_sociale;
  }

if((str_replace(" ", "", $_POST['bon_neutre_nom']) == str_replace(" ", "", $nom_membre) && str_replace(" ", "", $_POST['bon_neutre_prenom']) == str_replace(" ", "", $prenom_membre)) || (str_replace(" ", "", $_POST['bon_neutre_raison']) == str_replace(" ", "", $raison_sociale))){

                      }else{
                        $db->rollback();
                            $sessionmembreasso->error = "Le nom du recu de versement ne correspond pas à ce Code Membre ...";
                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;
                    }    
}

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($request->getParam("bon_neutre_code_membre"));
          if(count($bon_neutre2) > 0){

                $bon_neutre = new Application_Model_EuBonNeutre();
                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                $bon_neutre->setBon_neutre_code($code_BAn);
                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                $bon_neutreM->update($bon_neutre);

                $bon_neutre_id = $bon_neutre->bon_neutre_id;

            }else{

              $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($request->getParam("bon_neutre_code_membre"));
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                $bon_neutre_id = $compteur_bon_neutre;
              }


              $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);

}else if(isset($_POST['bon_neutre_code_ban']) && $_POST['bon_neutre_code_ban']!=""){



                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByCode($request->getParam("bon_neutre_code_ban"));
          if(count($bon_neutre2) > 0){

                $bon_neutre = new Application_Model_EuBonNeutre();
                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                $bon_neutre->setBon_neutre_code($code_BAn);
                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                $bon_neutreM->update($bon_neutre);

                $bon_neutre_id = $bon_neutre->bon_neutre_id;

            }else{

              $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre(NULL);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                $bon_neutre_id = $compteur_bon_neutre;
              }


              $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


}else{


              $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre(NULL);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);




              $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


            }



                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                $relevebancairedetail2M->find($relevebancairedetail->relevebancairedetail_id, $relevebancairedetail2);

                $relevebancairedetail2->setPublier(1);
                $relevebancairedetail2M->update($relevebancairedetail2);

                        }
                ///////////////////////////////////////////////////////////////////////////////////////

                /**Enregistrement des données de la convention**/

                            $db->commit();
                            $montantbanmembreasso = $request->getParam("bon_neutre_montant");
							$sessionmembreasso->code_BAn = $code_BAn;
                            $sessionmembreasso->montantbanmembreasso = $montantbanmembreasso;
							$sessionmembreasso->bon_neutre_detail_id = $compteur_bon_neutre_detail;
							
                            $sessionmembreasso->membre_code = $bon_neutre->bon_neutre_code_membre;

                            $sessionmembreasso->error = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn). <br />
Utilisez ce BAn pour : <br />
- votre propre Activation Personne Physique et/ou Personne Morale <br />
- la souscription pour tiers (CMFH) de votre choix <br />
<br />
";
if($sessionmembreasso->membre_code != "" && $sessionmembreasso->membre_code != NULL){
    $sessionmembreasso->error .= "Le code du Bon d'Achat neutre (BAn) se trouve dans le compte marchand du membre <strong>".$sessionmembreasso->membre_code."</strong><br />";
    $sessionmembreasso->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}else{
    $sessionmembreasso->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}
    $sessionmembreasso->error .= "<strong>Veuillez bien noter votre code BAn. Il est très important.</strong>Le cas échéant, en cas de perte, reprenez l'opération.";


                            $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                            return;

                }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->_redirect('/integrateur/addsouscriptionban/paramban/'.$paramban);
                        return;
                    }


        }   else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }


    }


  }












   public function enrolementsms2intoldAction() {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');
      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}



    $paramban = (int)$this->_request->getParam('paramban');
      $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                $date_id = Zend_Date::now();

    $request = $this->getRequest ();
    if ($request->isPost ()) {
       if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
          //&& isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
          && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
          && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
          && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
          //&& isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
          && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
          && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
          && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
          && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
          && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
          && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
          && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
          && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
          && isset($_POST['id_pays']) && $_POST['id_pays']!=""
          && isset($_POST['code_agence']) && $_POST['code_agence']!=""
          && isset($_POST['code_activite']) && $_POST['code_activite']!=""
          && isset($_POST['id_canton']) && $_POST['id_canton']!=""
        ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
            try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

          $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
          if(count($bon_neutre) == 0){
                            $sessionmembreasso->error = "Code BAn incorrect ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                            return;
          }

                        /////////////////controle nom prenom
              $eupreinscription = new Application_Model_DbTable_EuMembre();
                      $select = $eupreinscription->select();
                      $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));

            $tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
            foreach ($tabprenom as $value) {
                      $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
            }

                      $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                      $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                      $select->limit(1);
                      $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
                            $sessionmembreasso->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                            return;
                  }

            /////////////////controle email
            if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmembreasso->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                            return;
            }

                        /////////////////controle nom prenom
              $eusouscription = new Application_Model_DbTable_EuSouscription();
                      $select = $eusouscription->select();
                      $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                      $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                      $select->order(array("souscription_id ASC"));
                      $select->limit(1);
                      $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                    $souscription_ok = 1;
                    $souscription_first = $rowseusouscription->souscription_id;
                  } else {
                    $souscription_ok = 0;
                  }





          if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
            if($bon_neutre->bon_neutre_montant_solde < 5000){
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                            return;
              }

                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

              $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(5000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                      if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                    } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                  }
                            $souscription->setSouscription_ordre(NULL);
                      $souscription->setSouscription_autonome(1);
                      $souscription->setPublier(0);
              $souscription->setErreur(0);
              $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 5000);
                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 5000);
                $bon_neutre2M->update($bon_neutre2);

              ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          $mont = 5000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
          if($bon_neutre_detail_somme < $mont){
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                            return;
            }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
          foreach ($bon_neutre_detail as $detail){
                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

            if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2M->update($bon_neutre_detail2);


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

              }else{
                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                $bon_neutre_detail2M->update($bon_neutre_detail2);


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);
                
                break;
                }

            }
              }


              ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(1);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(2);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(3);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




/*
//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1) {
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($membreasso->membreasso_association, $association);
        $code_agence = $association->code_agence;

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
           } else {
             $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
             } else {
               $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
             }
        }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}
*/





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        // operation de transfert
                    $souscription = new Application_Model_EuSouscription();
                                    $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                    $date = new Zend_Date();
                                    $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                  $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                  $det_sms   = new Application_Model_EuDetailSmsmoney();
                                  $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                  $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                  $det_vtesms  = new Application_Model_EuDetailVentesms();

                                  $mobile = $souscription->souscription_mobile;
                                  //$nbre_compte = $souscription->souscription_nombre;
                                  $fcaps = Util_Utils::getParametre('CAPS','valeur');

                    $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                    //$montant = $nbre_compte * $fcaps;
                                    $membre_pbf = '0000000000000000001M';
                                      $code_compte_pbf = "NN-TR-".$membre_pbf;
                                  $ret = $compte_map->find($code_compte_pbf,$compte);



                    $souscription2 = new Application_Model_EuSouscription();
                                    $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                     $souscription2->setSouscription_autonome(1);
                     $souscription2->setSouscription_programme('KACM');
                     $souscription2M->update($souscription2);


                          if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                  // Mise à jour du compte de transfert
                                                $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                  } else {
                                                  $db->rollback();
                                                  $sessionmembreasso->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                            return;
                                                        return;
                                              }

                          $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                          // Traitement des produits FS
                                            // insertion dans la table eu_smsmoney
                                            $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                            // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                            $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                            // Traitement des produits FCPS
                                            $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                  $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                              $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                                                ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                            $i = 0;
                                              $reste = $mont_fs;
                                              $nbre_lignesdetfs = count($lignesdetfs);
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                  $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                if ($reste >= $lignedetfs->getSolde_sms()) {
                                                    //Mise à jour  des lignes d'enrégistrement
                                  //insertion dans la table eu_detailventesms
                                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                               ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                  $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                       ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                } else  {
                                                  //Mise à jour  des lignes d'enrégistrement
                                  //insertion dans la table eu_detailventesms
                                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                               ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                  $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                    $reste = 0;
                                                }
                                                $i++;
                                              }

                            $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                          $j = 0;
                                          $reste = $mont_fl;
                                          $nbre_lignesdetfl = count($lignesdetfl);
                                          while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                              $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                            if ($reste >= $lignedetfl->getSolde_sms()) {
                                                //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                           ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                   ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                   ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                            } else  {
                                              //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                              $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                $reste = 0;
                                            }
                                            $j++;
                                          }

                          $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                            $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                            ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                          $k = 0;
                                          $reste = $mont_kps;
                                          $nbre_lignesdetfkps = count($lignesdetfkps);
                                          while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                              $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                            if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                              $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                     ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                     ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                            } else  {
                                              //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                              $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                $reste = 0;
                                            }
                                            $k++;
                                          }

                          // insertion dans la table eu_code_activation
                                            $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                            $codeactivation = new Application_Model_EuCodeActivation();
                                              $countcode = $m_codeactivation->findConuter() + 1;

                                            $codeactivation->setId_code_activation($countcode)
                                                        ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                            $codeactivation->setCode_membre(NULL);
                                              $codeactivation->setCode_fs($codefs);
                                            $codeactivation->setCode_fl($codefl);
                                            $codeactivation->setCode_fkps($codefkps);
                          $codeactivation->setOrigine_code("ESMC");
                                            $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($compteur_souscription);
                                            $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
          $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

          $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

          $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

          $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
          $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;


            if($code_fs != "") {
                $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
              if ($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

              if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

              $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if ($date_nais >= $date_idd) {
                                $sessionmembreasso->error = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            $preinscription->setId_preinscription($compteur_preinscription)
                           ->setNom_membre($bon_neutre->bon_neutre_nom)
                           ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre($request->getParam("tel_membre"))
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre($request->getParam("portable_membre"))
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
               ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                       ->setCode_fkps($code_fkps)
               ->setId_canton($request->getParam("id_canton"))
                           ;
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);


///////////////////////////validation acnev
                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(2);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                  $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(3);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


              $membre->setCode_membre($code)
                                   ->setNom_membre($bon_neutre->bon_neutre_nom)
                                   ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre($request->getParam("tel_membre"))
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre($request->getParam("portable_membre"))
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null)
                   ->setId_canton($request->getParam("id_canton"))
                                   ;
                                $mapper->save($membre);


                /////////////
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setCode_membre($code);
                $preinscriptionM->update($preinscription);



            // insertion dans la table eu_code_activation
                $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                $codeactivation = new Application_Model_EuCodeActivation();

            $m_dvente = new Application_Model_EuDepotVenteMapper();
                $dvente = new Application_Model_EuDepotVente();


            $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
            if($findcode != NULL)  {
                $findcode = $findcode[0];
              //$id_souscription = $findcode->souscription_id;
              //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
              //if($findsouscrip != FALSE) {
              //}
              $souscription_mapper->find($findcode->souscription_id,$souscription);
              $ancien_code = $souscription->souscription_ancien_membre;
              //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
              //$id_depot = $findsousdv->id_depot;
              //$trouvedepot = $m_dvente->find($id_depot,$dvente);
              $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
              $codeactivation->setCode_membre($code);
              $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
            }
            else {
              $sessionmembreasso->error = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune souscription !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $_POST["nom_membre"];
                            //$this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
              }

              $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
              $findmem = $mem_mapper->find($code,$mem);

              if(($ancien_code == '') || ($ancien_code == NULL)) {
                $mem->setEtat_membre('N');
              } else {
                if(substr($ancien_code,-1,1) == 'M') {
                   $sessionmembreasso->error = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 //$this->view->nom_membre = $_POST["nom_membre"];
                                 //$this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 $this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 $this->view->portable = $_POST["portable_membre"];
                                 return;
                }

                              $mem->setEtat_membre('A');
                //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);
                              }
                // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                              }
                            }
              $mem_mapper->update($mem);

              $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                for($i = 0; $i < count($_POST['code_banque']); $i++) {
                  if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
                                  }
                                }

                $mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrôlement';
                                $type_op = 'AERL';
                                Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                                $tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                } else {
                                   $fs_model->setOrigine_fs('A');
                                }
                                $tab_fs->insert($fs_model->toArray());

                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);

                $userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                $id_user = $mapper->findConuter() + 1;
                                $userin->setId_utilisateur($id_user)
                                       ->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($bon_neutre->bon_neutre_prenom)
                                       ->setNom_utilisateur($bon_neutre->bon_neutre_nom)
                                       ->setLogin($code)
                                       ->setPwd(md5($codesecret))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code)
                     ->setId_canton($request->getParam("id_canton"))
                                       ;
                                $mapper->save($userin);

                // Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                $id_contrat = $mapper->findConuter() + 1;
                                $contrat->setId_contrat($id_contrat);
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
            } else {
                            $sessionmembreasso->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
              }
            }
            if($code_fl != "") {
                $sms_fl = $sms_mapper->findByCreditCode($code_fl);
              if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
              if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

              $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

               if(($ancien_code =='') || ($ancien_code == NULL)) {
                        $fl->setOrigine_fl('N');
               } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

              //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

              $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

              for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

              for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                }  else {
                            $sessionmembreasso->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
              }


            if($code_fkps != "") {
                $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
              if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
              if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

              $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
              if(($ancien_code =='') || ($ancien_code == NULL)) {
                       $carte->setOrigine_fkps('N');
              } else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            $compteurcps = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
            }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)){
                $bon_neutre2->setBon_neutre_code_membre($code);
                $bon_neutre2M->update($bon_neutre2);
                }



                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant(5000);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
              ///////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
/*
      if(isset($souscription->souscription_id) && $souscription->souscription_id > 0){

//////////////////////////////////////////////////////////
$id_souscription = $souscription->souscription_id;

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id_souscription, $souscription);




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1 && $sessionmembreasso->membreasso_id != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;


    if($souscription->souscription_montant > 0){

    if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
    }else{
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
    }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////
    }
}
}
//////////////////////////////////////////
*/


            $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

            $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
            $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;
                            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);

          }
            }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
        } else {
          $sessionmembreasso->error = "Champs * obligatoire ...";
                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
      }
    }
  }










   public function enrolementpmsms2intoldAction() {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');
      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}



    $paramban = (int)$this->_request->getParam('paramban');
      $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                $date_id = Zend_Date::now();

    $request = $this->getRequest ();
    if ($request->isPost ()) {
       if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
      && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
      //&& isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
      && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
      && isset($_POST['code_statut']) && $_POST['code_statut']!=""
      && isset($_POST['code_rep']) && $_POST['code_rep']!=""
      && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
      && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
      && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
      && isset($_POST['email_membre']) && $_POST['email_membre']!=""
      && isset($_POST['id_pays']) && $_POST['id_pays']!=""
      && isset($_POST['code_agence']) && $_POST['code_agence']!=""
        && isset($_POST['code_activite']) && $_POST['code_activite']!=""
        && isset($_POST['id_canton']) && $_POST['id_canton']!=""
        ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
            try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

          $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
          if(count($bon_neutre) == 0){
                            $sessionmembreasso->error = "Code BAn incorrect ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
          }

                        /////////////////controle nom prenom
              $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                      $select = $eupreinscription->select();
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));

            /*$tabraison = explode("", $bon_neutre->bon_neutre_raison);
            foreach ($tabraison as $value) {
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
            }*/

                      $select->limit(1);
                      $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
                            $sessionmembreasso->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
                  }

            /////////////////controle email
            if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmembreasso->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
            }

                        /////////////////controle nom prenom
              $eusouscription = new Application_Model_DbTable_EuSouscription();
                      $select = $eusouscription->select();
                      $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                      $select->order(array("souscription_id ASC"));
                      $select->limit(1);
                      $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                    $souscription_ok = 1;
                    $souscription_first = $rowseusouscription->souscription_id;
                  } else {
                    $souscription_ok = 0;
                  }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)){
                                //count($membre) == 0;
                            $sessionmembreasso->error = "Le Code Membre est erroné ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
                            }
                        }




          if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
            if($bon_neutre->bon_neutre_montant_solde < 70000){
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
              }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

              $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(70000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                      if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                    } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                  }
                            $souscription->setSouscription_ordre(NULL);
                      $souscription->setSouscription_autonome(1);
                      $souscription->setPublier(0);
              $souscription->setErreur(0);
              $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 70000);
                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 70000);
                $bon_neutre2M->update($bon_neutre2);

              ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          $mont = 70000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
          if($bon_neutre_detail_somme < $mont){
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
            }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
          foreach ($bon_neutre_detail as $detail){
                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

            if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2M->update($bon_neutre_detail2);



                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                }else{
                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                $bon_neutre_detail2M->update($bon_neutre_detail2);


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                break;
                }

            }
              }

//////validation acnev
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(1);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(2);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(3);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $souscription->souscription_montant = $recubancaire_mapper->findCumul($souscription->souscription_id);



    if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
        }else{
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
          }

    }else{

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
        }else{
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
          }

    }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}


*/


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        // operation de transfert
                    $souscription = new Application_Model_EuSouscription();
                                    $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                    $date = new Zend_Date();
                                    $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                  $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                  $det_sms   = new Application_Model_EuDetailSmsmoney();
                                  $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                  $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                  $det_vtesms  = new Application_Model_EuDetailVentesms();

                                  $mobile = $souscription->souscription_mobile;
                                  //$nbre_compte = $souscription->souscription_nombre;
                                  $fcaps = Util_Utils::getParametre('CAPS','valeur');

                    $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                    //$montant = $nbre_compte * $fcaps;
                                    $membre_pbf = '0000000000000000001M';
                                      $code_compte_pbf = "NN-TR-".$membre_pbf;
                                  $ret = $compte_map->find($code_compte_pbf,$compte);



                    $souscription2 = new Application_Model_EuSouscription();
                                    $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                     $souscription2->setSouscription_autonome(1);
                     $souscription2->setSouscription_programme('KACM');
                     $souscription2M->update($souscription2);


                          if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                  // Mise à jour du compte de transfert
                                                $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                  } else {
                                                  $db->rollback();
                                                  $sessionmembreasso->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
                                                        return;
                                              }

                          $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                          // Traitement des produits FS
                                            // insertion dans la table eu_smsmoney
                                            $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                            // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                            $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                            // Traitement des produits FCPS
                                            $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                  $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                              $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                                                ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                            $i = 0;
                                              $reste = $mont_fs;
                                              $nbre_lignesdetfs = count($lignesdetfs);
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                  $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                if ($reste >= $lignedetfs->getSolde_sms()) {
                                                    //Mise à jour  des lignes d'enrégistrement
                                  //insertion dans la table eu_detailventesms
                                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                               ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                  $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                       ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                } else  {
                                                  //Mise à jour  des lignes d'enrégistrement
                                  //insertion dans la table eu_detailventesms
                                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                               ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                  $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                    $reste = 0;
                                                }
                                                $i++;
                                              }

                            $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                          $j = 0;
                                          $reste = $mont_fl;
                                          $nbre_lignesdetfl = count($lignesdetfl);
                                          while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                              $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                            if ($reste >= $lignedetfl->getSolde_sms()) {
                                                //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                           ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                   ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                   ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                            } else  {
                                              //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                              $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                $reste = 0;
                                            }
                                            $j++;
                                          }

                          $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                            $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                            ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                          $k = 0;
                                          $reste = $mont_kps;
                                          $nbre_lignesdetfkps = count($lignesdetfkps);
                                          while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                              $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                            if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                              $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                     ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                     ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                            } else  {
                                              //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)

                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                              $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                $reste = 0;
                                            }
                                            $k++;
                                          }

                          // insertion dans la table eu_code_activation
                                            $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                            $codeactivation = new Application_Model_EuCodeActivation();
                                              $countcode = $m_codeactivation->findConuter() + 1;

                                            $codeactivation->setId_code_activation($countcode)
                                                        ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                            $codeactivation->setCode_membre(NULL);
                                              $codeactivation->setCode_fs($codefs);
                                            $codeactivation->setCode_fl($codefl);
                                            $codeactivation->setCode_fkps($codefkps);
                          $codeactivation->setOrigine_code("ESMC");
                                            $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                                            $codeactivation->setSouscription_id($compteur_souscription);
                                            $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

        $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

        $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


            if($code_fs !="") {
              $sms_fs = $sms_mapper->findByCreditCode($code_fs);
            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($bon_neutre->bon_neutre_raison)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre($request->getParam("tel_membre"))
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre($request->getParam("portable_membre"))
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                 ->setCode_agence($code_agence)
                       ->setPublier(1)
                 ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/



//////validation acnev
                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                $preinscriptionmorale->setPublier(2);
                $preinscriptionmoraleM->update($preinscriptionmorale);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                $preinscriptionmorale->setPublier(3);
                $preinscriptionmoraleM->update($preinscriptionmorale);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
            $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($bon_neutre->bon_neutre_raison);
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre($request->getParam("tel_membre"));
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre($request->getParam("portable_membre"));
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




              /////////////
            $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
            $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
            $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

            $preinscriptionmorale->setCode_membre_morale($code);
            $preinscriptionmoraleM->update($preinscriptionmorale);



            // insertion dans la table eu_code_activation
                $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                $codeactivation = new Application_Model_EuCodeActivation();

            $m_dvente = new Application_Model_EuDepotVenteMapper();
                $dvente = new Application_Model_EuDepotVente();

            $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
            if($findcode != NULL)  {
                            $findcode = $findcode[0];
              $id_souscription = $findcode->souscription_id;
              $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
              $ancien_code = $souscription->souscription_ancien_membre;
              //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
              //$id_depot = $findsousdv->id_depot;
              //$trouvedepot = $m_dvente->find($id_depot,$dvente);
              $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
              $codeactivation->setCode_membre($code);
              $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

            } else {
              $this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
              }

            $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
              $findmem = $mem_mapper->find($code,$mem);

            if(($ancien_code =='') || ($ancien_code == NULL)) {
                $mem->setEtat_membre('N');
            } else {
                  if(substr($ancien_code,-1,1) == 'P') {
                   $this->view->message = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 $this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                }
                              $mem->setEtat_membre('A');
                //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

               // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
             $mem_mapper->update($mem);




            // eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

                //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);

            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
            for($i = 0; $i < count($_POST['code_banque']); $i++) {
              if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                          }
                        }


            //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;

                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

            // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

            $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
            if(($ancien_code =='') || ($ancien_code == NULL)) {
               $fs_model->setOrigine_fs('N');
            } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

              } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
          }





          if($code_fl !="") {

            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

            $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

            if(($ancien_code =='') || ($ancien_code == NULL)) {
               $fl->setOrigine_fl('N');
            } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

            //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

            //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }

                                                //$tcartes[0]="TPAGCP";
                                                $tcartes[1]="TSCNCSEI";
                                                $tcartes[2]="TSGCI";
                                                $tcartes[3]="TSIR";
                                                $tcartes[4]="TR";
                                                $tcartes[5]="TPaNu";
                                                $tcartes[6]="TSPaR";
                                                $tcartes[7]="TSFS";
                                                $tcartes[8]="TSPN";
                                                $tcartes[9]="TSIB";
                                                $tcartes[10]="TSPaNu";
                                                $tcartes[11]="TSIN";
                                                $tcartes[12]="TSCAPA";
                                                $tcartes[13]="TSMARGE";
                                                //$tcartes[14]="TSRE";


            for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
          }

          if($code_fkps !="") {
              $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
            if(($ancien_code =='') || ($ancien_code == NULL)) {
               $carte->setOrigine_fkps('N');
            } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
              }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                $bon_neutre2->setBon_neutre_code_membre($code);
                $bon_neutre2M->update($bon_neutre2);
                }



                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant(70000);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
              ///////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////
/*
      if(isset($souscription->souscription_id) && $souscription->souscription_id > 0){
//////////////////////////////////////////////////////////
$id_souscription = $souscription->souscription_id;

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id_souscription, $souscription);




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1 && $sessionmembreasso->membreasso_id != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;


    if($souscription->souscription_montant > 0){

    if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
    }else{
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
    }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}

      }

            }
*/
/////////////////////////////////////////////////////////////






            $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
            $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
            $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;
                            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);

          }

          }
            }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
        } else {
          $sessionmembreasso->error = "Champs * obligatoire ...";
            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
      }
    }
  }

   public function enrolementsms2intAction() {
       $sessionmembreasso = new Zend_Session_Namespace('membreasso');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcint');
       if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
   
       $paramban = (int)$this->_request->getParam('paramban');
       $this->view->paramban = $paramban;
		  
	   $t_zone = new Application_Model_DbTable_EuZone();
       $zones = $t_zone->fetchAll();
       $this->view->zones = $zones;
       $t_pays = new Application_Model_DbTable_EuPays();
       $pays = $t_pays->fetchAll();
       $this->view->pays = $pays;
       $t_region = new Application_Model_DbTable_EuRegion();
       $regions = $t_region->fetchAll();
       $this->view->regions = $regions;
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $prefectures = $t_prefecture->fetchAll();
       $this->view->prefectures = $prefectures;
       $t_canton = new Application_Model_DbTable_EuCanton();
       $cantons = $t_canton->fetchAll();
       $this->view->cantons = $cantons;

       $date_id = Zend_Date::now();
	   
	   $request = $this->getRequest();
	   if($request->isPost())  {
           if(isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
             && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
             && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
             && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
             && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
             && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
             && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
             && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
             && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
             && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
             && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
             && isset($_POST['id_pays']) && $_POST['id_pays']!=""
             && isset($_POST['code_agence']) && $_POST['code_agence']!=""
             && isset($_POST['code_activite']) && $_POST['code_activite']!=""
             && isset($_POST['id_canton']) && $_POST['id_canton']!="")  {
			      
                  $db = Zend_Db_Table::getDefaultAdapter();
                  $db->beginTransaction();
                  try  {
                        $id_utilisateur_acnev = 1;
                       $id_utilisateur_filiere = 2;
                       $id_utilisateur_technopole = 3;
					   
					   
					   $mont_caps = Util_Utils::getParametre('CAPS','valeur');
                       $mont_fs = Util_Utils::getParametre('FS','valeur');
                       $mont_fl = Util_Utils::getParametre('FL','valeur');
                       $mont_fkps = Util_Utils::getParametre('FKPS','valeur');
					   
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $date_idd = clone $date_id;

                       $codesecret = Util_Utils::genererCodeSMS(8);
					   
					   $mstiersbc = new Application_Model_EuMstiersListebc();
					   $m_mstiersbc = new Application_Model_EuMstiersListebcMapper();
					   
					   $telephone = new Application_Model_EuTelephone();
                       $m_telephone = new Application_Model_EuTelephoneMapper();
					   
					   $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                       $codeactivation = new Application_Model_EuCodeActivation();
					   
					   $place = new Application_Model_EuOperation();
					   $m_place = new Application_Model_EuOperationMapper();
					   
					   $membre   = new Application_Model_EuMembre();
					   $m_membre    = new Application_Model_EuMembreMapper();
					   
					   $membremorale = new Application_Model_EuMembreMorale();
                       $m_membremorale = new Application_Model_EuMembreMoraleMapper();
					   
					   $caps   = new Application_Model_EuCaps();
                       $m_caps = new Application_Model_EuCapsMapper();
					   
					   $activation   = new Application_Model_EuActivation();
                       $m_activation = new Application_Model_EuActivationMapper();
					   
					   $souscription = new Application_Model_EuSouscription();
                       $m_souscription = new Application_Model_EuSouscriptionMapper();
					   
					   $m_compte = new Application_Model_EuCompteMapper();
                       $compte      = new Application_Model_EuCompte();
                       $sms_money   = new Application_Model_EuSmsmoney();
                       $money_map   = new Application_Model_EuSmsmoneyMapper();
      
                       $det_sms   = new Application_Model_EuDetailSmsmoney();
                       $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
      
                       $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                       $det_vtesms  = new Application_Model_EuDetailVentesms();
               
                       $telephone = new Application_Model_EuTelephone();
                       $m_telephone = new Application_Model_EuTelephoneMapper();

                       $date = new Zend_Date(Zend_Date::ISO_8601);
					   
					   $type_bnp  = 'CAPS';
                       $type_caps = 'CAPSFLFCPS';
					   $apporteur = NULL;
					   
					   $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                       $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					   
					   ///////////////// controle Code BAn ///////////////////////////////////////////////
                       if(count($bon_neutre) == 0) {
                          $sessionmembreasso->error = "Code BAn incorrect ...";
					      $this->view->sexe = $request->getParam("sexe_membre");
                          $this->view->sitfam = $request->getParam("sitfam_membre");
                          $this->view->datnais = $request->getParam("date_nais_membre");
                          $this->view->nation = $request->getParam("nationalite_membre");
                          $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                          $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                          $this->view->formation = $request->getParam("formation");
                          $this->view->profession = $request->getParam("profession_membre");
                          $this->view->religion = $request->getParam("religion_membre");
                          $this->view->pere = $request->getParam("pere_membre");
                          $this->view->mere = $request->getParam("mere_membre");
                          $this->view->quartier_membre = $request->getParam("quartier_membre");
                          $this->view->ville_membre = $request->getParam("ville_membre");
                          $this->view->bp = $request->getParam("bp_membre");
                          $this->view->email = $request->getParam("email_membre");
                          $db->rollback();
                          return;
                        }
						
						///////////////// controle nom prenom ////////////////////////////////
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $prenom_membre = $bon_neutre->bon_neutre_prenom;
	                    $prenom_membre = str_replace("'", " ", $prenom_membre);
	                    $tabprenom = explode(" ",$prenom_membre);
					
	                    $nom_membre = $bon_neutre->bon_neutre_nom;
	                    $nom_membre = str_replace("'", " ", $nom_membre);
						
						$select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

                        //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
                        foreach ($tabprenom as $value) {
                           $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }
						
                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmembreasso->error = $nom_membre." ".$prenom_membre." est déjà membre ...";
							$this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
							return;
                        }
						
						
						///////////////// controle email //////////////////////////////////////
                         if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))) {
                            $sessionmembreasso->error = "E-mail non valable ...";
							$this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
							return;
                         }
					   
                         if(count($bon_neutre) > 0)  {
				              $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			                  $mont = 5000;
			                  $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
			                  $montant_cm = 5000;
							  $findmstiersbc = $m_mstiersbc->fetchByBanBeneficiaire($bon_neutre->bon_neutre_id);
							  
							  /////////////// controle sur Intégrité du compte BAn  //////////////////////////////
							  if($bon_neutre->bon_neutre_montant_solde != $bon_neutre_detail_somme)  {
							     $sessionmembreasso->error = " Compte BAn non intègre ...";
							     $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
						         return;
							  }
							  
							  ///////////////// controle solde BAn //////////////////////////////
                              if($bon_neutre->bon_neutre_montant_solde < $montant_cm) {
                                 $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
							     $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
						         return;
                              }
							  
							  if($bon_neutre_detail_somme < $mont) {
                                 $sessionmembreasso->error = "Montant Total restant du BAn est insuffisant ...";
						         $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
						         return;
                              }
							  
							  $eusouscription = new Application_Model_DbTable_EuSouscription();
                              $select = $eusouscription->select();
                              $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                              $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                              $select->order(array("souscription_id ASC"));
                              $select->limit(1);
                              $rowseusouscription = $eusouscription->fetchRow($select);
                              if(count($rowseusouscription) > 0) {
                                $souscription_ok = 1;
                                $souscription_first = $rowseusouscription->souscription_id;
                              } else {
                                $souscription_ok = 0;
                              }
							  
							  /////////////////souscription KACM PP ////////////////////////////////////////////
							  $souscription->setSouscription_personne("PP");
                              $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                              $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                              $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                              $souscription->setSouscription_email($request->getParam("email_membre"));
                              $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                              $souscription->setSouscription_membreasso(1);
                              $souscription->setSouscription_type("BAn");
                              $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                              $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                              $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                              $souscription->setSouscription_montant($montant_cm);
                              $souscription->setSouscription_nombre(1);
                              $souscription->setSouscription_programme("KACM");
                              $souscription->setSouscription_type_candidat(0);
                              $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                              $souscription->setCode_activite($request->getParam("code_activite"));
                              $souscription->setId_metier($request->getParam("id_metier"));
                              $souscription->setId_competence($request->getParam("id_competence"));
                              $souscription->setSouscription_ville($request->getParam("ville_membre"));
                              $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                              if($souscription_ok == 1) {
                                  $souscription->setSouscription_souscription($souscription_first);
                              } else {
                                  $souscription->setSouscription_souscription($compteur_souscription);
                              }
                              $souscription->setSouscription_ordre(NULL);
							  if($findmstiersbc == NULL) {
                                 $souscription->setSouscription_autonome(1);
							  } else {
							     $souscription->setSouscription_autonome(0);
							  }
                              $souscription->setPublier(0);
                              $souscription->setErreur(0);
                              $souscription->setId_canton($request->getParam("id_canton"));
                              $m_souscription->save($souscription);
							  
							  $compteur_souscription = $db->lastInsertId();
							  
							  //////// Mise à jour du bon_neutre ////////////////////////////////////
							   $bon_neutre2 = new Application_Model_EuBonNeutre();
                               $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                               $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                               $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_cm);
                               $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_cm);
                               $bon_neutre2M->update($bon_neutre2);
							   
							   // Mise à jour du bon_neutre_detail
							   $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
							   foreach($bon_neutre_detail as $detail)  {
							       $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                   $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                   $bon_neutre_detail2M->find($detail->bon_neutre_detail_id,$bon_neutre_detail2);
								   
								   if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont)  {
								      $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
								      if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                         $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                         $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                         foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                 $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                 $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                 $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                 $bnad_M->update($bnad);
                                            } else {
                                                 $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                 $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                 $bnad_M->update($bnad);
                                                 break;
                                            }
                                          }
                                      }
									  
									  $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                      $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                      $bon_neutre_detail2M->update($bon_neutre_detail2);
									  
									  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                      $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                      //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                      //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                      $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                      $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
									  if($findmstiersbc == NULL) {
                                         $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
									  } else {
										 $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation Tiers PP"); 
									  }
                                      $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                      $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                      $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	              $bon_neutre_utilise2->setUsertable("utilisateur");
              		   	              $bon_neutre_utilise2->setUser_id(1);
                                      $bon_neutre_utilise2M->save($bon_neutre_utilise2);
									  
							  
							       } else {
                                       if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
										    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                            $appro_montant_solde = $mont;
                                            foreach($appro_detail as $appro) {
                                               $bnad = new Application_Model_EuBonNeutreApproDetail();
                                               $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                               $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);
                                               if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                    $bnad_M->update($bnad);
                                               } else {
                                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                    $bnad_M->update($bnad);
                                                    break;
                                                }

                                            }   
									   }
									   
									   $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                       $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                       $bon_neutre_detail2M->update($bon_neutre_detail2);

                                       $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                       $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                       //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                       //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                       $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                       $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                       if($findmstiersbc == NULL) {
                                         $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
									   } else {
										 $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation Tiers PP"); 
									   }
                                       $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                       $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                       $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	               $bon_neutre_utilise2->setUsertable("utilisateur");
              		   	               $bon_neutre_utilise2->setUser_id(1);
                                       $bon_neutre_utilise2M->save($bon_neutre_utilise2);
                                       break;
                                   }
					           }
							   
							   ////////  operation de transfert  /////////////////////////
							   $souscription = new Application_Model_EuSouscription();
                               $souscriptionM = new Application_Model_EuSouscriptionMapper();
                               $souscriptionM->find($compteur_souscription, $souscription);
                               $date = new Zend_Date();
							   $mobile = $souscription->souscription_mobile;
							   
							   $codefs   = '';
                               $codefl   = '';
                               $codefkps = '';
							   $codecaps = '';
							   
							   $membre_pbf = '0000000000000000001M';
                               $code_compte_pbf = "NN-TR-".$membre_pbf;
                               $ret = $m_compte->find($code_compte_pbf,$compte);
							   
							   $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						       $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						       $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
							   $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
						       $cumuls = $cumulfs + $cumulfl + $cumulfcps;
							   
							   // Traitement des produits FS
                               $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                               // Traitement des produits FL
                               $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                               // Traitement des produits FCPS
                               $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS'); 
							   // Traitement des produits FCAPS
							   $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
							   
							   if($findmstiersbc == NULL) {
								   if(!$ret && ($cumuls < ($mont_fs + $mont_fl + $mont_fkps))) {
							           $db->rollback();
                                       $sessionmembreasso->error = 'Le compte est introuvable ou le solde du compte insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;   
							       }

                                   if($lignesdetfs == null || $lignesdetfl ==  null || $lignesdetfkps == null) {
								       $db->rollback();
                                       $sessionmembreasso->error = 'Le compte des unités est insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;
								    }								   
								   
							   }  else {
								   if(!$ret && ($cumulfcaps < $mont_caps)) {
									   $db->rollback();
                                       $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;
								   }
								   
								   if($lignesdetfcaps == null) {
								       $db->rollback();
                                       $sessionmcnp->error = 'Le compte des unités est insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;
								   }
							   }
							   
							   
							   //Mise à jour du compte de transfert
							   if($findmstiersbc == NULL) {
                                  $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_fkps));
                                  $m_compte->update($compte);
								  
								  $codefs = strtoupper(Util_Utils::genererCodeSMS(8));
								  $sms_money->setCode_Agence(null)
                                            ->setCreditAmount($mont_fs)
                                            ->setSentTo($mobile)
                                            ->setMotif('FS')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefs)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
								  
								  $i = 0;
                                  $reste = $mont_fs;
                                  $nbre_lignesdetfs = count($lignesdetfs);
                                  while($reste > 0 && $i < $nbre_lignesdetfs) {
									 $lignedetfs = $lignesdetfs[$i];
                                     $id = $lignedetfs->getId_detail_smsmoney();
                                     $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                     if($reste >= $lignedetfs->getSolde_sms()) {									 
									     //Mise à jour  des lignes d'enrégistrement
                                         //insertion dans la table eu_detailventesms
                                         //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                         //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
										 
										 $det_vtesms->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                         $det_vte_sms->insert($det_vtesms->toArray());
										 
										 $reste = $reste - $lignedetfs->getSolde_sms();
                                         $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                    ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                    ->setSolde_sms(0);
                                         $det_sms_m->update($lignedetfs);
										 
                                      } else  {
										  //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                          //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                          $det_vtesms->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                           $det_vte_sms->insert($det_vtesms->toArray());
																
                                           $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                           $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                           $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                           $det_sms_m->update($lignedetfs);
                                           $reste = 0;
                                      }								  
									  $i++;  
								  }
								  
								  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
								  $sms_money->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
								  
								  $j = 0;
                                  $reste = $mont_fl;
                                  $nbre_lignesdetfl = count($lignesdetfl);
                                  while($reste > 0 && $j < $nbre_lignesdetfl) {
                                     $lignedetfl = $lignesdetfl[$j];
                                     $id = $lignedetfl->getId_detail_smsmoney();
                                     $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                     if($reste >= $lignedetfl->getSolde_sms()) {
                                          //Mise à jour  des lignes d'enrégistrement
                                          $reste = $reste - $lignedetfl->getSolde_sms();
                                          //insertion dans la table eu_detailventesms
                                          //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                          //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                          $det_vtesms->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FL')
                                                     ->setCreditcode($codefl)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($lignedetfl->getSolde_sms())
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FL');
                                          $det_vte_sms->insert($det_vtesms->toArray());
															
                                          $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                     ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                     ->setSolde_sms(0);
                                          $det_sms_m->update($lignedetfl);
										  
                                       } else  {
                                          //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                          //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                          $det_vtesms->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FL')
                                                     ->setCreditcode($codefl)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FL');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                          $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                          $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfl);
                                          $reste = 0;
                                        }
                                        $j++;
                                     }
									 
									 $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
									 $sms_money->setCode_Agence(null)
                                               ->setCreditAmount($mont_kps)
                                               ->setSentTo($mobile)
                                               ->setMotif('FCPS')
                                               ->setId_Utilisateur(null)
                                               ->setCurrencyCode('XOF')
                                               ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setFromAccount($code_compte_pbf)
                                               ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                               ->setCreditCode($codefkps)
                                               ->setDestAccount(null)
                                               ->setIDDatetimeConsumed(0)
                                               ->setDestAccount_Consumed(null)
                                               ->setDatetimeConsumed(null)
                                               ->setNum_recu(null);
                                      $money_map->save($sms_money);

                                      $k = 0;
                                      $reste = $mont_fkps;
                                      $nbre_lignesdetfkps = count($lignesdetfkps);
									  while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                          $lignedetfkps = $lignesdetfkps[$k];
                                          $id = $lignedetfkps->getId_detail_smsmoney();
                                          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                          if($reste >= $lignedetfkps->getSolde_sms()) {
                                               //Mise à jour  des lignes d'enrégistrement
                                               //insertion dans la table eu_detailventesms
                                               //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                               //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               $det_vtesms->setId_detail_smsmoney($id)
                                                          ->setCode_membre_dist($membre_pbf)
                                                          ->setCode_membre(null)
                                                          ->setType_tansfert('FCPS')
                                                          ->setCreditcode($codefl)
                                                          ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setMont_vente($lignedetfkps->getSolde_sms())
                                                          ->setId_utilisateur(null)
                                                          ->setCode_produit('FCPS');
                                               $det_vte_sms->insert($det_vtesms->toArray());
                                               $reste = $reste - $lignedetfkps->getSolde_sms();
                                               $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                            ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                            ->setSolde_sms(0);
                                               $det_sms_m->update($lignedetfkps);
											   
                                            } else  {
                                               //Mise à jour  des lignes d'enrégistrement
                                               //insertion dans la table eu_detailventesms
                                               //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                               //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)			
                                               $det_vtesms->setId_detail_smsmoney($id)
                                                          ->setCode_membre_dist($membre_pbf)
                                                          ->setCode_membre(null)
                                                          ->setType_tansfert('FCPS')
                                                          ->setCreditcode($codefl)
                                                          ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setMont_vente($reste)
                                                          ->setId_utilisateur(null)
                                                          ->setCode_produit('FCPS');
                                               $det_vte_sms->insert($det_vtesms->toArray());
															
                                               $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                               $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                               $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                               $det_sms_m->update($lignedetfkps);
                                               $reste = 0;
                                              }
                                              $k++;
                                           }
								  
							       } else {
								  $compte->setSolde($compte->getSolde() - $mont_caps);
                                  $m_compte->update($compte);

								  $codecaps = strtoupper(Util_Utils::genererCodeSMS(8));
                                  $sms_money->setCode_Agence(null)
                                            ->setCreditAmount($mont_caps)
                                            ->setSentTo($mobile)
                                            ->setMotif('CAPS')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codecaps)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                            ->setDestAccount_Consumed($compteur_souscription)
                                            ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                            ->setNum_recu(null);
                                   $money_map->save($sms_money);
				                   $nengfcaps = $db->lastInsertId();
								   
								   
								   $l = 0;
                                   $reste = $mont_caps;
                                   $nbre_lignesdetfcaps = count($lignesdetfcaps);
                                   while($reste > 0 && $l < $nbre_lignesdetfcaps) {
								       $lignedetfcaps = $lignesdetfcaps[$l];
                                       $id = $lignedetfcaps->getId_detail_smsmoney();
                                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
								       if($reste >= $lignedetfcaps->getSolde_sms())  {
                                            //Mise à jour  des lignes d'enrégistrement
                                            $reste = $reste - $lignedetfcaps->getSolde_sms();
                                            //insertion dans la table eu_detailventesms
                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                            $det_vtesms->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('CAPS')
                                                       ->setCreditcode($codecaps)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('CAPS');
                                             $det_vte_sms->insert($det_vtesms->toArray());
							                 $id_detail_vtsms = $db->lastInsertId();
                              
                                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
                                                           ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
                                                           ->setSolde_sms(0);
                                             $det_sms_m->update($lignedetfcaps);
                         
                                         } else {
										     //Mise à jour  des lignes d'enrégistrement
                                             //insertion dans la table eu_detailventesms
                                             //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                             //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                             $det_vtesms->setId_detail_smsmoney($id)
                                                   ->setCode_membre_dist($membre_pbf)
                                                   ->setCode_membre(null)
                                                   ->setType_tansfert('CAPS')
                                                   ->setCreditcode($codecaps)
                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setMont_vente($reste)
                                                   ->setId_utilisateur(null)
                                                   ->setCode_produit('CAPS');
                                             $det_vte_sms->insert($det_vtesms->toArray());
								             $id_detail_vtsms = $db->lastInsertId();
                              
                                             $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
                                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
                                             $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                             $det_sms_m->update($lignedetfcaps);
                                             $reste = 0;	  
									     }
										 $l++;
								   }
							  }
							  
							  /////////////////////////////// preinscription ///////////////////////////////////////////////
							  $sms_mapper = new Application_Model_EuSmsmoneyMapper();
                              $code_agence = $request->getParam("code_agence");
							  $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
							  $code_zone = substr($request->getParam("code_agence"), 0, 3);
                              $id_pays = $request->getParam("id_pays");
                              $table = new Application_Model_DbTable_EuActeur();
                              $selection = $table->select();
                              $selection->where('code_membre like ?',$code_agence.'%');
                              $selection->where('type_acteur like ?','gac_surveillance');
                              $resultat = $table->fetchAll($selection);
                              $trouvacteursur = $resultat->current();
                              $code_acteur = $trouvacteursur->code_acteur;
							  
							  $tcartes = array();
                              $tscartes = array();
							  
							  $code_fs = NULL;
                              $code_fl = NULL;
                              $code_fkps = NULL;
							  $code_caps = NULL;
							  
							  if($date_nais >= $date_idd) {
                                 $sessionmembreasso->error = "La date de naissance doit être antérieure à la date actuelle !!!";
                                 $db->rollback();
                                 $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 return;
                              }
							  
							  $compagnie = telephonecompagnie($_POST['code_telephonique'],$_POST['numero_telephone']);
                              $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
							  if($compagnie == 1) {
                                 $sessionmembreasso->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
								 $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
                                 return;	
                              }
							  
							  if($findmstiersbc == NULL) { 
								 $code_fs = $codefs;
                                 $code_fl = $codefl;
                                 $code_fkps = $codefkps;
							  } else {
								 $code_caps = $codecaps;  
							  }
							  
							  $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
							  $preinscription = new Application_Model_EuPreinscription();
							  
							  $preinscription->setNom_membre($nom_membre)
                                             ->setPrenom_membre($prenom_membre)
                                             ->setSexe_membre($request->getParam("sexe_membre"))
                                             ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                             ->setId_pays($request->getParam("id_pays"))
                                             ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                             ->setPere_membre($request->getParam("pere_membre"))
                                             ->setMere_membre($request->getParam("mere_membre"))
                                             ->setSitfam_membre($request->getParam("sitfam_membre"))
                                             ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                             ->setProfession_membre($request->getParam("profession_membre"))
                                             ->setFormation($request->getParam("formation"))
                                             ->setId_religion_membre($request->getParam("religion_membre"))
                                             ->setQuartier_membre($request->getParam("quartier_membre"))
                                             ->setVille_membre($request->getParam("ville_membre"))
                                             ->setBp_membre($request->getParam("bp_membre"))
                                             ->setTel_membre(NULL)
                                             ->setEmail_membre($request->getParam("email_membre"))
                                             ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                                             ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                             ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                             ->setCode_membre(NULL)
                                             ->setCode_agence($code_agence)
                                             ->setCode_fs($code_fs)
                                             ->setCode_fl($code_fl)
                                             ->setCode_fkps($code_fkps)
                                             ->setId_canton($request->getParam("id_canton"));
                             $preinscription->setPublier(1);
                             $preinsc_mapper->save($preinscription);
				
				             $compteur_preinscription = $db->lastInsertId();
							 /////////////////////////// validation acnev ////////////////////////////////////////
                             $validation_quittance = new Application_Model_EuValidationQuittance();
                             $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                             //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                             //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                             $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                             $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                             $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $validation_quittance->setPublier(1);
                             $validation_quittance_mapper->save($validation_quittance);
							 
							 //////   validation filere ////////////////////////////////////////////////////////////
                             $preinscription = new Application_Model_EuPreinscription();
                             $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                             $preinscriptionM->find($compteur_preinscription, $preinscription);

                             $preinscription->setPublier(2);
                             $preinscriptionM->update($preinscription);


                             $validation_quittance = new Application_Model_EuValidationQuittance();
                             $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                             //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                             //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                             $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                             $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                             $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $validation_quittance->setPublier(1);
                             $validation_quittance_mapper->save($validation_quittance);
							 
							 //////  validation technopole ///////////////////////////////////////////////////////////////////
                             $preinscription = new Application_Model_EuPreinscription();
                             $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                             $preinscriptionM->find($compteur_preinscription, $preinscription);

                             $preinscription->setPublier(3);
                             $preinscriptionM->update($preinscription);


                             $validation_quittance = new Application_Model_EuValidationQuittance();
                             $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                             //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                             //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                             $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                             $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                             $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $validation_quittance->setPublier(1);
                             $validation_quittance_mapper->save($validation_quittance);
							 
							 
							 // insertion dans eu_membre //
							 $code = $m_membre->getLastCodeMembreByAgence($code_agence);
                             if($code == NULL) {
                                $code = $code_agence . '0000001' . 'P';
                             } else {
                                $num_ordre = substr($code, 12, 7);
                                $num_ordre++;
                                $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                                $code = $code_agence . $num_ordre_bis . 'P';
                             }
							 
							 
							 $membre->setCode_membre($code);
                             $membre->setNom_membre($nom_membre);
                             $membre->setPrenom_membre($prenom_membre);
                             $membre->setSexe_membre($request->getParam("sexe_membre"));
                             $membre->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'));
                             $membre->setId_pays($request->getParam("nationalite_membre"));
                             $membre->setLieu_nais_membre($request->getParam("lieu_nais_membre"));
                             $membre->setPere_membre($request->getParam("pere_membre"));
                             $membre->setMere_membre($request->getParam("mere_membre"));
                             $membre->setSitfam_membre($request->getParam("sitfam_membre"));
                             $membre->setNbr_enf_membre($request->getParam("nbr_enf_membre"));
                             $membre->setProfession_membre($request->getParam("profession_membre"));
                             $membre->setFormation($request->getParam("formation"));
                             $membre->setId_religion_membre($request->getParam("religion_membre"));
                             $membre->setQuartier_membre($request->getParam("quartier_membre"));
                             $membre->setVille_membre($request->getParam("ville_membre"));
                             $membre->setBp_membre($request->getParam("bp_membre"));
                             $membre->setTel_membre(NULL);
                             $membre->setEmail_membre($request->getParam("email_membre"));
                             $membre->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                             $membre->setId_utilisateur(NULL);
                             $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                             $membre->setDate_identification($date_id->toString('yyyy-MM-dd'));
                             $membre->setCode_agence($code_agence);
                             $membre->setCodesecret(md5($codesecret));
							 if($findmstiersbc == NULL) {	   
                               $membre->setAuto_enroler('O');
							 } else {
                               $membre->setAuto_enroler('N');
                             }							 
                             $membre->setEtat_membre('N');
						     $membre->setDesactiver(2);
                             $membre->setId_canton($request->getParam("id_canton"));
                             $m_membre->save($membre);
							 
							 //////////////////////////////////////////////////////////////////////////////////
							 
							 $preinscription = new Application_Model_EuPreinscription();
                             $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                             $preinscriptionM->find($compteur_preinscription, $preinscription);

                             $preinscription->setCode_membre($code);
                             $preinscriptionM->update($preinscription);
							 
							 if($findmstiersbc == NULL) {
							    $codeactivation->setDate_generer($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
                                $codeactivation->setCode_membre($code);
                                $codeactivation->setCode_fs($code_fs);
                                $codeactivation->setCode_fl($code_fl);
                                $codeactivation->setCode_fkps($code_fkps);
                                $codeactivation->setOrigine_code("ESMC");
								$codeactivation->setMontant_souscrit($montant_cm);
                                $codeactivation->setSouscription_id($compteur_souscription);
                                $m_codeactivation->save($codeactivation);

                                $sms_fs = $sms_mapper->findByCreditCode($code_fs);
								$sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);
								
								$sms_fl = $sms_mapper->findByCreditCode($code_fl);
								$sms_fl->setDestAccount_Consumed('FL-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fl);
								
								$sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
								$sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                         ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                         ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fkps);
                                                                
							 } else  {
								$apporteur = $findmstiersbc->code_membre_apporteur;
                                $id_mstiersbc =	$findmstiersbc->id_mstiers_listebc;
                                $m_mstiersbc->find($id_mstiersbc,$mstiersbc);

                                $mstiersbc->setCode_membre_beneficiaire($code);
                                $m_mstiersbc->update($mstiersbc);								
								 
								$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                                $place->setId_utilisateur(null);

                                if(substr($apporteur,19,1)=='P') {
                                   $place->setCode_membre($apporteur);
                                   $place->setCode_membre_morale(null);
                                } else  {
                                   $place->setCode_membre(null);
                                   $place->setCode_membre_morale($apporteur);
                                }

                                $place->setMontant_op($mont_caps);
                                $place->setCode_produit('CAPS');
                                $place->setLib_op('Enrolement');
                                $place->setType_op($type_bnp);
                                $place->setCode_cat('TCAPS');
                                $m_place->save($place);
					
					            $count = $db->lastInsertId();
								 
								$activation->setId_depot(NULL)
                                           ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
                                           ->setCode_activation($code_caps)
                                           ->setCode_membre($code)
                                           ->setMembreasso_id(1);
                                $m_activation->save($activation);
								
								$idcaps = $type_bnp . $apporteur . $date_idd->toString('yyyyMMddHHmmss');
                                $caps->setCode_caps($idcaps)
                                     ->setCode_membre_benef($code)
                                     ->setMont_caps($mont_caps)
                                     ->setMont_fs(0)
                                     ->setPeriode(0)
                                     ->setId_operation($count)
                                     ->setRembourser('N')
                                     ->setId_credit(null)
                                     ->setIndexer(1)
                                     ->setType_caps($type_caps)
                                     ->setCode_type_bnp($type_bnp)
                                     ->setFs_utiliser(1)
                                     ->setFl_utiliser(1)
                                     ->setCps_utiliser(1)
                                     ->setMont_panu_fs(0)
                                     ->setReconst_fs(0)
                                     ->setPanu(0)
                                     ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                                     ->setId_utilisateur(null);

                                 if(substr($apporteur,19,1)=='P') {
                                    $caps->setCode_membre_app($apporteur)
                                         ->setCode_membre_morale_app(null);
                                 } else  {
                                    $caps->setCode_membre_app(null)
                                         ->setCode_membre_morale_app($apporteur);
                                 }
                                 $m_caps->save($caps);
								
                                 $sms_caps = $sms_mapper->findByCreditCode($code_caps);
								 $sms_caps->setDestAccount_Consumed('NB-TCAPS-'.$code)
                                          ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                          ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                 $sms_mapper->update($sms_caps);								
							 }
							 
							 // insertion dans eu_telephone //
                             $telephone->setNumero_telephone($numero_telephone);
                             $telephone->setCompagnie_telephone($compagnie);
                             $telephone->setCode_membre($code);
                             $m_telephone->save($telephone);
							 
							 // insertion dans eu_compte_bancaire
							 $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                             $cb = new Application_Model_EuCompteBancaire();
                             for($i = 0; $i < count($_POST['code_banque']); $i++) {
							    if($_POST['num_compte'][$i]!="") {
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
								}	
                              }
							 
							  $lib_op = NULL;
                              $type_op = NULL;
							  $mapper_op = new Application_Model_EuOperationMapper();
							  $place = new Application_Model_EuOperation();
                              $compteurfs = $mapper_op->findConuter() + 1;
							  if($findmstiersbc == NULL) {
                                 $lib_op = 'Auto-enrolement';
                                 $type_op = 'AERL';
                              } else {
                                 $lib_op = 'Enrolement';
                                 $type_op = 'ERL';
                              }
							  
							  
							  $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                              $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                              $place->setId_utilisateur(null);
                              $place->setCode_membre($code);
                              $place->setCode_membre_morale(null);
                              $place->setMontant_op($mont_fs);
                              $place->setCode_produit('FS');
                              $place->setLib_op($lib_op);
                              $place->setType_op($type_op);
                              $place->setCode_cat('TFS');
                              $mapper_op->save($place);	

                              $tab_fs = new Application_Model_DbTable_EuFs();
                              $fs_model = new Application_Model_EuFs();
                              $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($mont_fs);
                              $fs_model->setOrigine_fs('N');
							  if($findmstiersbc == NULL) {
							     $fs_model->setCreditcode($code_fs);
							  } else {
								 $fs_model->setCreditcode($code_caps); 
							  }
                              $tab_fs->insert($fs_model->toArray());

                              $userin = new Application_Model_EuUtilisateur();
                              $m_userin = new Application_Model_EuUtilisateurMapper();
							
                              $userin->setId_utilisateur_parent(NULL)
                                     ->setPrenom_utilisateur($prenom_membre)
                                     ->setNom_utilisateur($nom_membre)
                                     ->setLogin($code)
                                     ->setPwd(md5($codesecret))
                                     ->setDescription(NULL)
                                     ->setUlock(0)
                                     ->setCh_pwd_flog(0)
                                     ->setCode_groupe('personne_physique')
                                     ->setCode_groupe_create('personne_physique')
                                     ->setConnecte(0)
                                     ->setCode_agence($code_agence)
                                     ->setCode_secteur(NULL)
                                     ->setCode_zone($request->getParam("code_zone"))
                                     ->setId_pays($request->getParam("id_pays"))
                                     ->setCode_acteur($code_acteur)
                                     ->setCode_membre($code)
                                     ->setId_canton($request->getParam("id_canton"));
                               $m_userin->save($userin);
							   
							   // Mise à jour de la table eu_contrat
                               $contrat = new Application_Model_EuContrat();
                               $mapper_contrat = new Application_Model_EuContratMapper();
							   
                               //$id_contrat = $mapper->findConuter() + 1;
                               //$contrat->setId_contrat($id_contrat);
                               $contrat->setCode_membre($code);
                               $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                               $contrat->setNature_contrat('numeraire');
                               $contrat->setId_type_contrat(NULL);
                               $contrat->setId_type_creneau(NULL);
                               $contrat->setId_type_acteur(NULL);
                               $contrat->setId_pays(NULL);
                               $contrat->setId_utilisateur(NULL);
                               $contrat->setFiliere(NULL);
                               $mapper_contrat->save($contrat);

                               $tfl = new Application_Model_DbTable_EuFl();
                               $fl = new Application_Model_EuFl();
                               $code_fl = 'FL-' . $code;

                               $fl->setCode_fl($code_fl)
                                  ->setCode_membre($code)
                                  ->setCode_membre_morale(NULL)
                                  ->setMont_fl($mont_fl)
                                  ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                                  ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                                  ->setId_utilisateur(NULL);

                               if($findmstiersbc == NULL) {
                                   $fl->setCreditcode($code_fl);
                               } else {
                                   $fl->setCreditcode($code_caps);
                               }
                               $tfl->insert($fl->toArray());

                               //Mise à jour du compte general FGFL
                               $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                               $cg_fgfn = new Application_Model_EuCompteGeneral();
                               $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                               if($result3) {
                                  $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                  $cg_mapper->update($cg_fgfn);
                               } else {
                                  $cg_fgfn->setCode_compte('FL')
                                          ->setIntitule('Frais de licence')
                                          ->setService('E')
                                          ->setCode_type_compte('NN')
                                          ->setSolde($mont_fl);
                                   $cg_mapper->save($cg_fgfn);
                               }

                               $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                               $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                               $place->setId_utilisateur(null);
                               $place->setCode_membre($code);
                               $place->setCode_membre_morale(null);
                               $place->setMontant_op($mont_fl);
                               $place->setCode_produit('FL');
                               $place->setLib_op('Frais de licences');
                               $place->setType_op(null);
                               $place->setCode_cat(null);
                               $mapper_op->save($place);
							   
							   $tcartes[0]="TPAGCRPG";
                               $tcartes[1]="TCNCS";
                               $tcartes[2]="TPaNu";
                               $tcartes[3]="TPaR";
                               $tcartes[4]="TR";
                               $tcartes[5]="CAPA";

                               $tscartes[0]="TSRPG";
                               $tscartes[1]="TSCNCS";
                               $tscartes[2]="TSPaNu";
                               $tscartes[3]="TSPaR";
                               $tscartes[4]="TSCAPA";

                               for($i = 0; $i < count($tcartes); $i++) {
                                  if($tcartes[$i] == "TCNCS") {
                                      $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                      $type_carte = 'NR';
                                      $res = $m_compte->find($code_compte,$compte);
                                  } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                      $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                      $type_carte = 'NN';
                                      $res = $m_compte->find($code_compte,$compte);
                                  } else  {
                                      $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                      $type_carte = 'NB';
                                      $res = $m_compte->find($code_compte,$compte);
                                  }

                                  if(!$res) {
                                      $compte->setCode_cat($tcartes[$i])
                                             ->setCode_compte($code_compte)
                                             ->setCode_membre($code)
                                             ->setCode_membre_morale(NULL)
                                             ->setCode_type_compte($type_carte)
                                             ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                             ->setDesactiver(0)
                                             ->setLib_compte($tcartes[$i])
                                             ->setSolde(0);
                                      $m_compte->save($compte);
                                   }
                               }
							   
							   
							   for($j = 0; $j < count($tscartes); $j++) {
                                   if($tscartes[$j] == "TSCNCS") {
                                       $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                       $type_carte = 'NR';
                                       $res = $m_compte->find($code_comptets,$compte);
                                   } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                       $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                       $type_carte = 'NN';
                                       $res = $m_compte->find($code_comptets,$compte);
                                   } else {
                                       $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                       $type_carte = 'NB';
                                       $res = $m_compte->find($code_comptets,$compte);
                                   }
                                   if(!$res) {
                                      $compte->setCode_cat($tscartes[$j])
                                             ->setCode_compte($code_comptets)
                                             ->setCode_membre($code)
                                             ->setCode_membre_morale(NULL)
                                             ->setCode_type_compte($type_carte)
                                             ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                             ->setDesactiver(0)
                                             ->setLib_compte($tscartes[$j])
                                             ->setSolde(0);
                                       $m_compte->save($compte);
                                    }
                                 }

                                 $carte = new Application_Model_EuCartes();
                                 $t_carte = new Application_Model_DbTable_EuCartes();
                                 $id_demande = $carte->findConuter() + 1;
                                 $carte->setId_demande($id_demande)
                                       ->setCode_cat($tcartes[0])
                                       ->setCode_membre($code)
                                       ->setMont_carte($mont_fkps)
                                       ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                       ->setLivrer(0)
                                       ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                       ->setImprimer(0)
                                       ->setCardPrintedDate('')
                                       ->setCardPrintedIDDate(0)
                                       ->setId_utilisateur(NULL);
                                 $carte->setOrigine_fkps('N');
                                 $t_carte->insert($carte->toArray());

                                 $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                                 $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                                 $place->setId_utilisateur(null);
                                 $place->setCode_membre($code);
                                 $place->setCode_membre_morale(null);
                                 $place->setMontant_op($mont_fkps);
                                 $place->setCode_produit('CPS');
                                 $place->setLib_op('Frais de CPS');
                                 $place->setType_op(null);
                                 $place->setCode_cat(null);
                                 $mapper_op->save($place);
								 
								 
								 //////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)) {
                                     $bon_neutre2->setBon_neutre_code_membre($code);
                                     $bon_neutre2M->update($bon_neutre2);

                                     $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                     $bon_neutre_detail2 = $bon_neutre_detail2M->fetchAllByCode($bon_neutre->bon_neutre_code);

                                     if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                               	          $bon_neutre_appro2 = new Application_Model_EuBonNeutreAppro();
                                          $bon_neutre_appro2M = new Application_Model_EuBonNeutreApproMapper();
                                          $bon_neutre_appro2M->find($bon_neutre_detail2->bon_neutre_appro_id, $bon_neutre_appro2);

                                          $bon_neutre_appro2->setBon_neutre_appro_beneficiaire($code);
                                          $bon_neutre_appro2M->update($bon_neutre_appro2);
                            	     }
                                }
								
								$convention = new Application_Model_DbTable_EuConvention();
                                $select2 = $convention->select();
                                $select2->where("code_activation = ?", $_POST['code_BAn']);
                                $select2->orwhere("(code_membre IS NULL");
                                $select2->where("code_membre = '')");
                                $select2->limit(1);

                                if($convention_rows = $convention->fetchRow($select2)) {
                                   $convention2 = new Application_Model_DbTable_EuConvention();
                                   $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
                                }
								
								$compteur = Util_Utils::findConuter() + 1;
                                Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                                $db->commit();

                                $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                                Code Membre (Login) : <strong>".$code."</strong><br />
                                Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                                $sessionmembreasso->membre = $code;
                                $sessionmembreasso->codesecret = $codesecret;
								$this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
				   
				         }
						 
				  } catch(Exception $exc) {
					   $db->rollback();
                       $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                       $this->view->sexe = $request->getParam("sexe_membre");
                       $this->view->sitfam = $request->getParam("sitfam_membre");
                       $this->view->datnais = $request->getParam("date_nais_membre");
                       $this->view->nation = $request->getParam("nationalite_membre");
                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                       $this->view->formation = $request->getParam("formation");
                       $this->view->profession = $request->getParam("profession_membre");
                       $this->view->religion = $request->getParam("religion_membre");
                       $this->view->pere = $request->getParam("pere_membre");
                       $this->view->mere = $request->getParam("mere_membre");
                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                       $this->view->ville_membre = $request->getParam("ville_membre");
                       $this->view->bp = $request->getParam("bp_membre");
                       $this->view->email = $request->getParam("email_membre");
                       return;
                  } 
				   
			 }  else {
                 $sessionmembreasso->error = "Champs * obligatoire ...";
                 $this->view->sexe = $request->getParam("sexe_membre");
                 $this->view->sitfam = $request->getParam("sitfam_membre");
                 $this->view->datnais = $request->getParam("date_nais_membre");
                 $this->view->nation = $request->getParam("nationalite_membre");
                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                 $this->view->formation = $request->getParam("formation");
                 $this->view->profession = $request->getParam("profession_membre");
                 $this->view->religion = $request->getParam("religion_membre");
                 $this->view->pere = $request->getParam("pere_membre");
                 $this->view->mere = $request->getParam("mere_membre");
                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                 $this->view->ville_membre = $request->getParam("ville_membre");
                 $this->view->bp = $request->getParam("bp_membre");
                 $this->view->email = $request->getParam("email_membre");
              }

       }
   }
   
   
   
   
   

   public function enrolementsms2intamodifierAction() {
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
   
        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
        if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
          //&& isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
          && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
          && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
          && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
          //&& isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
          && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
          && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
          && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
          && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
          && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
          //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
          && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
          && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
          && isset($_POST['id_pays']) && $_POST['id_pays']!=""
          && isset($_POST['code_agence']) && $_POST['code_agence']!=""
          && isset($_POST['code_activite']) && $_POST['code_activite']!=""
          && isset($_POST['id_canton']) && $_POST['id_canton']!=""
        ) {

            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {

              $id_utilisateur_acnev = 1;
              $id_utilisateur_filiere = 2;
              $id_utilisateur_technopole = 3;

              $codesecret = Util_Utils::genererCodeSMS(8);


              $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
              $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


              /////////////////controle Code BAn
              if(count($bon_neutre) == 0) {
                $sessionmembreasso->error = "Code BAn incorrect ...";
                $db->rollback();
                //$this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                return;
              }

              /////////////////controle nom prenom
              $eupreinscription = new Application_Model_DbTable_EuMembre();
              $prenom_membre = $bon_neutre->bon_neutre_prenom;
	      $prenom_membre = str_replace("'", " ", $prenom_membre);
	      $tabprenom = explode(" ",$prenom_membre);
					
	      $nom_membre = $bon_neutre->bon_neutre_nom;
	      $nom_membre = str_replace("'", " ", $nom_membre);

              $select = $eupreinscription->select();
              $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

              //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
              foreach ($tabprenom as $value) {
                $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
              }

              $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
              $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
              $select->limit(1);
              $rowseupreinscription = $eupreinscription->fetchRow($select);
              if(count($rowseupreinscription) > 0) {
                $sessionmembreasso->error = $nom_membre." ".$prenom_membre." est déjà membre ...";
                $db->rollback();
                //$this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                return;
              }

              /////////////////controle email
              if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                $sessionmembreasso->error = "E-mail non valable ...";
                $db->rollback();
                //$this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                return;
              }

              /////////////////controle nom prenom
              $eusouscription = new Application_Model_DbTable_EuSouscription();
              $select = $eusouscription->select();
              $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
              $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
              $select->order(array("souscription_id ASC"));
              $select->limit(1);
              $rowseusouscription = $eusouscription->fetchRow($select);
              if(count($rowseusouscription) > 0) {
                $souscription_ok = 1;
                $souscription_first = $rowseusouscription->souscription_id;
              } else {
                $souscription_ok = 0;
              }


              if(count($bon_neutre) > 0) {
                 $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                 $mont = 5000;
                 $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                 $montant_cm = 5000;
				
			     //$cumulbon = trim($bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id));
				 /*
                 if($cumulbon >= 5000) {
                    $mont = 5000;
                    $montant_cm = 5000;
                    $bon_neutre_detail_somme = trim($bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id)); 
                 } 
		         else if($bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id) >= 70000) {
                     $mont = 70000;
                     $montant_cm = 70000;
                     $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                 }
				 */
		
		
	

                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < $montant_cm) {
                          $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                          $db->rollback();
                          //$this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                          return;
                        }

                /////////////////souscription KACM PP

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                //$souscription->setSouscription_id($compteur_souscription);
				
                $souscription->setSouscription_personne("PP");
                $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                $souscription->setSouscription_email($request->getParam("email_membre"));
                //$souscription->setSouscription_mobile($request->getParam("portable_membre"));
                $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                $souscription->setSouscription_type("BAn");
                $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                $souscription->setSouscription_montant($montant_cm);
                $souscription->setSouscription_nombre(1);
                $souscription->setSouscription_programme("KACM");
                $souscription->setSouscription_type_candidat(0);
                $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                $souscription->setCode_activite($request->getParam("code_activite"));
                $souscription->setId_metier($request->getParam("id_metier"));
                $souscription->setId_competence($request->getParam("id_competence"));
                $souscription->setSouscription_ville($request->getParam("ville_membre"));
                $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                if($souscription_ok == 1) {
                  $souscription->setSouscription_souscription($souscription_first);
                } else {
                  $souscription->setSouscription_souscription($compteur_souscription);
                }
                $souscription->setSouscription_ordre(NULL);
                $souscription->setSouscription_autonome(1);
                $souscription->setPublier(0);
                $souscription->setErreur(0);
                $souscription->setId_canton($request->getParam("id_canton"));
                $souscription_mapper->save($souscription);
				
				$compteur_souscription = $db->lastInsertId();
				
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_cm);
                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_cm);
                $bon_neutre2M->update($bon_neutre2);

                ///////////////////////////////////////////////////////////////////////////////////////
                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                //$mont = 5000;
                //$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                //$bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                
				if($bon_neutre_detail_somme < $mont) {
                    $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...".$bon_neutre_detail_somme;
                    $db->rollback();
                    //$this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                    return;
                } else  {
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail) {
                        $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                        $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                        $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

            
                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                          $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

                          if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                              $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                              $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                              $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                              foreach ($appro_detail as $appro) {
                                 $bnad = new Application_Model_EuBonNeutreApproDetail();
                                 $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                 $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                 if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                 } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                 }

                              }

                            }

                            $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                            $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                            $bon_neutre_detail2M->update($bon_neutre_detail2);



                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                         } else {
                            if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                              $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                              $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                              $appro_montant_solde = $mont;
                              foreach ($appro_detail as $appro) {
                                 $bnad = new Application_Model_EuBonNeutreApproDetail();
                                 $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                 $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                 if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                   $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                   $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                   $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                   $bnad_M->update($bnad);
                                 } else {
                                   $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                   $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                   $bnad_M->update($bnad);
                                   break;
                                 }

                                }

                              }

                              $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                              $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                              $bon_neutre_detail2M->update($bon_neutre_detail2);


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                              break;
                         }

                     }
                 }

                ///////////////////////////////////////////////////////////////////////////////////////
                //////validation acnev
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(1);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);

                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                $validation_quittance->setValidation_quittance_souscription($compteur_souscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(2);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($compteur_souscription);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(3);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($compteur_souscription);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


/*
                        //////////////////////////////////////////
                        if($sessionmembreasso->membreasso_id != 1) {
                           $membreasso = new Application_Model_EuMembreasso();
                           $m_membreasso = new Application_Model_EuMembreassoMapper();
                           $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

                           $association = new Application_Model_EuAssociation();
                           $m_association = new Application_Model_EuAssociationMapper();
                           $m_association->find($membreasso->membreasso_association, $association);
                           $code_agence = $association->code_agence;

                           if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
                              if($souscription->souscription_programme == "KACM") {
                                 $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
                              } else {
                                 $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
                              }

                            } else {
                              if($souscription->souscription_programme == "KACM") {
                                 $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
                              } else {
                                 $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
                              }
                            }

                            //////////////////////////////////////////

                            $partagea = new Application_Model_EuPartagea();
                            $partagea_mapper = new Application_Model_EuPartageaMapper();

                            $compteur_partagea = $partagea_mapper->findConuter() + 1;
                            //$partagea->setPartagea_id($compteur_partagea);
                            $partagea->setPartagea_association($membreasso->membreasso_association);
                            $partagea->setPartagea_souscription($souscription->souscription_id);
                            $partagea->setPartagea_montant($partagea_montant * 0.75);
                            $partagea->setPartagea_montant_utilise(0);
                            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
                            $partagea->setPartagea_montant_impot(0);
                            $partagea_mapper->save($partagea);

                            //////////////////////////////////////////

                            $partagem = new Application_Model_EuPartagem();
                            $partagem_mapper = new Application_Model_EuPartagemMapper();

                            $compteur_partagem = $partagem_mapper->findConuter() + 1;
                            $partagem->setPartagem_id($compteur_partagem);
                            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
                            $partagem->setPartagem_souscription($souscription->souscription_id);
                            $partagem->setPartagem_montant($partagea_montant * 0.25);
                            $partagem->setPartagem_montant_utilise(0);
                            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
                            $partagem->setPartagem_montant_impot(0);
                            $partagem_mapper->save($partagem);

                            //////////////////////////////////////////

                         }
*/
                         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                         // operation de transfert
                         $souscription = new Application_Model_EuSouscription();
                         $souscriptionM = new Application_Model_EuSouscriptionMapper();
                         $souscriptionM->find($compteur_souscription, $souscription);
                         $date = new Zend_Date();
                         $compte_map = new Application_Model_EuCompteMapper();
                         $compte      = new Application_Model_EuCompte();
                         $sms_money   = new Application_Model_EuSmsmoney();
                         $money_map   = new Application_Model_EuSmsmoneyMapper();

                         $det_sms   = new Application_Model_EuDetailSmsmoney();
                         $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                         $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                         $det_vtesms  = new Application_Model_EuDetailVentesms();

                         $mobile = $souscription->souscription_mobile;
                         //$nbre_compte = $souscription->souscription_nombre;
                         $fcaps = Util_Utils::getParametre('CAPS','valeur');

                         $mont_fs = Util_Utils::getParametre('FS','valeur');
                         $mont_fl = Util_Utils::getParametre('FL','valeur');
                         $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                         //$montant = $nbre_compte * $fcaps;
                         $membre_pbf = '0000000000000000001M';
                         $code_compte_pbf = "NN-TR-".$membre_pbf;
                         $ret = $compte_map->find($code_compte_pbf,$compte);

                         $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						 $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						 $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						 $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                         $souscription2 = new Application_Model_EuSouscription();
                         $souscription2M = new Application_Model_EuSouscriptionMapper();
                         $souscription2M->find($compteur_souscription, $souscription2);

                         $souscription2->setSouscription_autonome(1);
                         $souscription2->setSouscription_programme('KACM');
                         $souscription2M->update($souscription2);


                        if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                           // Mise à jour du compte de transfert
                           $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                           $compte_map->update($compte);
                        } else {
                           $db->rollback();
                           $sessionmembreasso->error = 'Le compte est introuvable ou le solde du compte insuffisant';
                           //$db->rollback();
                           //$this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);
                           return;
                        }

                         $codefs   = '';
                         $codefl   = '';
                         $codefkps = '';

                         // Traitement des produits FS
                         // insertion dans la table eu_smsmoney
                         $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                         // Traitement des produits FL
                         // insertion dans la table eu_smsmoney
                         $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                         // Traitement des produits FCPS
                         $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                         if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                //$nengfs = $money_map->findConuter() + 1;
                                //$sms_money->setNEng($nengfs)
                                $sms_money->setCode_Agence(null)
                                         ->setCreditAmount($mont_fs)
                                         ->setSentTo($mobile)
                                         ->setMotif('FS')
                                         ->setId_Utilisateur(null)
                                         ->setCurrencyCode('XOF')
                                         ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                         ->setFromAccount($code_compte_pbf)
                                         ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                         ->setCreditCode($codefs)
                                         ->setDestAccount(null)
                                         ->setIDDatetimeConsumed(0)
                                         ->setDestAccount_Consumed(null)
                                         ->setDatetimeConsumed(null)
                                         ->setNum_recu(null);
                                $money_map->save($sms_money);
								
								$nengfs = $db->lastInsertId();

                                $i = 0;
                                $reste = $mont_fs;
                                $nbre_lignesdetfs = count($lignesdetfs);
                                while($reste > 0 && $i < $nbre_lignesdetfs) {
                                       $lignedetfs = $lignesdetfs[$i];
                                       $id = $lignedetfs->getId_detail_smsmoney();
                                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                       if($reste >= $lignedetfs->getSolde_sms()) {
                                            //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                            $det_vtesms->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FS')
                                                       ->setCreditcode($codefs)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($lignedetfs->getSolde_sms())
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FS');
                                            $det_vte_sms->insert($det_vtesms->toArray());
											
											$id_detail_vtsms = $db->lastInsertId();
											
                                            $reste = $reste - $lignedetfs->getSolde_sms();
                                            $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                       ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                       ->setSolde_sms(0);
                                            $det_sms_m->update($lignedetfs);
                                        } else  {
                                            //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                            $det_vtesms->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FS')
                                                       ->setCreditcode($codefs)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FS');
                                            $det_vte_sms->insert($det_vtesms->toArray());
											
											$id_detail_vtsms = $db->lastInsertId();
											    
                                            $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                            $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                            $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                            $det_sms_m->update($lignedetfs);
                                            $reste = 0;
                                        }
                                        $i++;
                                    }

                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                        //$nengfl = $money_map->findConuter() + 1;
                                        //$sms_money->setNEng($nengfl)
                                        $sms_money->setCode_Agence(null)
                                                    ->setCreditAmount($mont_fl)
                                                    ->setSentTo($mobile)
                                                    ->setMotif('FL')
                                                    ->setId_Utilisateur(null)
                                                    ->setCurrencyCode('XOF')
                                                    ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setFromAccount($code_compte_pbf)
                                                    ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                    ->setCreditCode($codefl)
                                                    ->setDestAccount(null)
                                                    ->setIDDatetimeConsumed(0)
                                                    ->setDestAccount_Consumed(null)
                                                    ->setDatetimeConsumed(null)
                                                    ->setNum_recu(null);
                                        $money_map->save($sms_money);
										$nengfl = $db->lastInsertId();

                                            $j = 0;
                                            $reste = $mont_fl;
                                            $nbre_lignesdetfl = count($lignesdetfl);
                                            while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                $lignedetfl = $lignesdetfl[$j];
                                                $id = $lignedetfl->getId_detail_smsmoney();
                                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                if($reste >= $lignedetfl->getSolde_sms()) {
                                                    //Mise à jour  des lignes d'enrégistrement
                                                    $reste = $reste - $lignedetfl->getSolde_sms();
                                                    //insertion dans la table eu_detailventesms
                                                    //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    
													$det_vtesms->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('FL')
                                                             ->setCreditcode($codefl)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfl->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('FL');
                                                    $det_vte_sms->insert($det_vtesms->toArray());
													$id_detail_vtsms = $db->lastInsertId();
													
													
                                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                            ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                            ->setSolde_sms(0);
                                                    $det_sms_m->update($lignedetfl);
													
                                            } else  {
                                                //Mise à jour  des lignes d'enrégistrement
                                                //insertion dans la table eu_detailventesms
                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
												
                                                $det_vtesms->setId_detail_smsmoney($id)
                                                           ->setCode_membre_dist($membre_pbf)
                                                           ->setCode_membre(null)
                                                           ->setType_tansfert('FL')
                                                           ->setCreditcode($codefl)
                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                           ->setMont_vente($reste)
                                                           ->setId_utilisateur(null)
                                                           ->setCode_produit('FL');
                                                $det_vte_sms->insert($det_vtesms->toArray());
												$id_detail_vtsms = $db->lastInsertId();
												
                                                $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                $det_sms_m->update($lignedetfl);
                                                $reste = 0;
                                            }
                                            $j++;
                                        }

                                        $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                        //$nengfkps = $money_map->findConuter() + 1;
                                        //$sms_money->setNEng($nengfkps)
                                        $sms_money->setCode_Agence(null)
                                                  ->setCreditAmount($mont_kps)
                                                  ->setSentTo($mobile)
                                                  ->setMotif('FCPS')
                                                  ->setId_Utilisateur(null)
                                                  ->setCurrencyCode('XOF')
                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                  ->setFromAccount($code_compte_pbf)
                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                  ->setCreditCode($codefkps)
                                                  ->setDestAccount(null)
                                                  ->setIDDatetimeConsumed(0)
                                                  ->setDestAccount_Consumed(null)
                                                  ->setDatetimeConsumed(null)
                                                  ->setNum_recu(null);
                                        $money_map->save($sms_money);
										$nengfkps = $db->lastInsertId();
										

                                        $k = 0;
                                        $reste = $mont_kps;
                                        $nbre_lignesdetfkps = count($lignesdetfkps);
                                        while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                            $lignedetfkps = $lignesdetfkps[$k];
                                            $id = $lignedetfkps->getId_detail_smsmoney();
                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                            if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                //Mise à jour  des lignes d'enrégistrement
                                                //insertion dans la table eu_detailventesms
                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                $det_vtesms->setId_detail_smsmoney($id)
                                                           ->setCode_membre_dist($membre_pbf)
                                                           ->setCode_membre(null)
                                                           ->setType_tansfert('FCPS')
                                                           ->setCreditcode($codefl)
                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                           ->setMont_vente($lignedetfkps->getSolde_sms())
                                                           ->setId_utilisateur(null)
                                                           ->setCode_produit('FCPS');
                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                $reste = $reste - $lignedetfkps->getSolde_sms();
                                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                             ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                             ->setSolde_sms(0);
                                                $det_sms_m->update($lignedetfkps);
                                            } else  {
                                                //Mise à jour  des lignes d'enrégistrement
                                                //insertion dans la table eu_detailventesms
                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                $det_vtesms->setId_detail_smsmoney($id)
                                                         ->setCode_membre_dist($membre_pbf)
                                                         ->setCode_membre(null)
                                                         ->setType_tansfert('FCPS')
                                                         ->setCreditcode($codefl)
                                                         ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                         ->setMont_vente($reste)
                                                         ->setId_utilisateur(null)
                                                         ->setCode_produit('FCPS');
                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                $det_sms_m->update($lignedetfkps);
                                                $reste = 0;
                                            }
                                            $k++;
                                          }

                                        // insertion dans la table eu_code_activation
                                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                        $codeactivation = new Application_Model_EuCodeActivation();
                                        //$countcode = $m_codeactivation->findConuter() + 1;
                                        //$codeactivation->setId_code_activation($countcode)
										
                                        $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                        $codeactivation->setCode_membre(NULL);
                                        $codeactivation->setCode_fs($codefs);
                                        $codeactivation->setCode_fl($codefl);
                                        $codeactivation->setCode_fkps($codefkps);
                                        $codeactivation->setOrigine_code("ESMC");
                                        $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
										$codeactivation->setMontant_souscrit($montant_cm);
                                        $codeactivation->setSouscription_id($compteur_souscription);
                                        $m_codeactivation->save($codeactivation);

                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                    $code_fs = $codefs;
                    $code_fl = $codefl;
                    $code_fkps = $codefkps;


                    if($code_fs != "") {
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if($code == NULL) {
                            $code = $code_agence . '0000001' . 'P';
                        }
                        else {
                          $num_ordre = substr($code, 12, 7);
                          $num_ordre++;
                          $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                          $code = $code_agence . $num_ordre_bis . 'P';
                        }

                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        if($sms_fs == NULL) {
                          $db->rollback();
                          $sessionmembreasso->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                          //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                          //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                          $this->view->sexe = $request->getParam("sexe_membre");
                          $this->view->sitfam = $request->getParam("sitfam_membre");
                          $this->view->datnais = $request->getParam("date_nais_membre");
                          $this->view->nation = $request->getParam("nationalite_membre");
                          $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                          $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                          $this->view->formation = $request->getParam("formation");
                          $this->view->profession = $request->getParam("profession_membre");
                          $this->view->religion = $request->getParam("religion_membre");
                          $this->view->pere = $request->getParam("pere_membre");
                          $this->view->mere = $request->getParam("mere_membre");
                          $this->view->quartier_membre = $request->getParam("quartier_membre");
                          $this->view->ville_membre = $request->getParam("ville_membre");
                          $this->view->bp = $request->getParam("bp_membre");
                          //$this->view->tel = $request->getParam("tel_membre");
                          $this->view->email = $request->getParam("email_membre");
                          //$this->view->portable = $request->getParam("portable_membre");
                          return;
                        }

                        if($sms_fs->getMotif() != 'FS') {
                          $db->rollBack();
                          $sessionmembreasso->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                          //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                          //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                          $this->view->sexe = $request->getParam("sexe_membre");
                          $this->view->sitfam = $request->getParam("sitfam_membre");
                          $this->view->datnais = $request->getParam("date_nais_membre");
                          $this->view->nation = $request->getParam("nationalite_membre");
                          $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                          $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                          $this->view->formation = $request->getParam("formation");
                          $this->view->profession = $request->getParam("profession_membre");
                          $this->view->religion = $request->getParam("religion_membre");
                          $this->view->pere = $request->getParam("pere_membre");
                          $this->view->mere = $request->getParam("mere_membre");
                          $this->view->quartier_membre = $request->getParam("quartier_membre");
                          $this->view->ville_membre = $request->getParam("ville_membre");
                          $this->view->bp = $request->getParam("bp_membre");
                          //$this->view->tel = $request->getParam("tel_membre");
                          $this->view->email = $request->getParam("email_membre");
                          //$this->view->portable = $request->getParam("portable_membre");
                          return;
                        }

                        $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                        if ($date_nais >= $date_idd) {
                           $sessionmembreasso->error = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                           $db->rollback();
                           //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                           //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                           $this->view->sexe = $request->getParam("sexe_membre");
                           $this->view->sitfam = $request->getParam("sitfam_membre");
                           $this->view->datnais = $request->getParam("date_nais_membre");
                           $this->view->nation = $request->getParam("nationalite_membre");
                           $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                           $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                           $this->view->formation = $request->getParam("formation");
                           $this->view->profession = $request->getParam("profession_membre");
                           $this->view->religion = $request->getParam("religion_membre");
                           $this->view->pere = $request->getParam("pere_membre");
                           $this->view->mere = $request->getParam("mere_membre");
                           $this->view->quartier_membre = $request->getParam("quartier_membre");
                           $this->view->ville_membre = $request->getParam("ville_membre");
                           $this->view->bp = $request->getParam("bp_membre");
                           //$this->view->tel = $request->getParam("tel_membre");
                           $this->view->email = $request->getParam("email_membre");
                           //$this->view->portable = $request->getParam("portable_membre");
                           return;
                        }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            //$compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            //$preinscription->setId_preinscription($compteur_preinscription)
            $preinscription->setNom_membre($nom_membre)
                           ->setPrenom_membre($prenom_membre)
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           //->setTel_membre($request->getParam("tel_membre"))
                           ->setTel_membre(null)
                           ->setEmail_membre($request->getParam("email_membre"))
                           //->setPortable_membre($request->getParam("portable_membre"))
                           ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"));
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);
                $compteur_preinscription = $db->lastInsertId();

                ///////////////////////////validation acnev
                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);


                //////validation filere
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(2);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(3);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                ////////////////////////////////////////////


                $membre->setCode_membre($code)
                     ->setNom_membre($nom_membre)
                     ->setPrenom_membre($prenom_membre)
                     ->setSexe_membre($request->getParam("sexe_membre"))
                     ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                     ->setId_pays($request->getParam("nationalite_membre"))
                     ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                     ->setPere_membre($request->getParam("pere_membre"))
                     ->setMere_membre($request->getParam("mere_membre"))
                     ->setSitfam_membre($request->getParam("sitfam_membre"))
                     ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                     ->setProfession_membre($request->getParam("profession_membre"))
                     ->setFormation($request->getParam("formation"))
                     ->setId_religion_membre($request->getParam("religion_membre"))
                     ->setQuartier_membre($request->getParam("quartier_membre"))
                     ->setVille_membre($request->getParam("ville_membre"))
                     ->setBp_membre($request->getParam("bp_membre"))
                     ->setTel_membre(null)
                     ->setEmail_membre($request->getParam("email_membre"))
                     ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                     ->setId_utilisateur(NULL)
                     ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                     ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                     ->setCode_agence($code_agence)
                     ->setCodesecret(md5($codesecret))
                     ->setAuto_enroler('O')
                     ->setEtat_membre(null)
					 ->setDesactiver(2)
                     ->setId_canton($request->getParam("id_canton"));
                $mapper->save($membre);


                /////////////
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setCode_membre($code);
                $preinscriptionM->update($preinscription);


        
        
        
        
        

                // insertion dans la table eu_code_activation
                $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                $codeactivation = new Application_Model_EuCodeActivation();

                $m_dvente = new Application_Model_EuDepotVenteMapper();
                $dvente = new Application_Model_EuDepotVente();


                $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                if($findcode != NULL)  {
                   $findcode = $findcode[0];
                   //$id_souscription = $findcode->souscription_id;
                   //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                   //if($findsouscrip != FALSE) {
                   //}
                   $souscription_mapper->find($findcode->souscription_id,$souscription);
                   $ancien_code = $souscription->souscription_ancien_membre;
                   //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                   //$id_depot = $findsousdv->id_depot;
                   //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                   $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                   $codeactivation->setCode_membre($code);
                   $m_codeactivation->update($codeactivation);
                   //$dvente->setCode_membre($code);
                   //$m_dvente->update($dvente);
                }
                else {
                   $sessionmembreasso->error = "Les codes d'activation ne sont liés à aucune souscription !!!";
                   $db->rollback();
                   //$this->view->nom_membre = $_POST["nom_membre"];
                   //$this->view->prenom_membre = $_POST["prenom_membre"];
                   $this->view->sexe = $_POST["sexe_membre"];
                   $this->view->sitfam = $_POST["sitfam_membre"];
                   $this->view->datnais = $_POST["date_nais_membre"];
                   $this->view->nation = $_POST["nationalite_membre"];
                   $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                   $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                   $this->view->formation = $_POST["formation"];
                   $this->view->profession = $_POST["profession_membre"];
                   $this->view->religion = $_POST["religion_membre"];
                   $this->view->pere = $_POST["pere_membre"];
                   $this->view->mere = $_POST["mere_membre"];
                   $this->view->quartier_membre = $_POST["quartier_membre"];
                   $this->view->ville_membre = $_POST["ville_membre"];
                   $this->view->bp = $_POST["bp_membre"];
                   //$this->view->tel = $_POST["tel_membre"];
                   $this->view->email = $_POST["email_membre"];
                   //$this->view->portable = $_POST["portable_membre"];
                   return;
                 }

              $mem = new Application_Model_EuMembre();
              $mem_mapper = new Application_Model_EuMembreMapper();
              $findmem = $mem_mapper->find($code,$mem);

              if(($ancien_code == '') || ($ancien_code == NULL)) {
                $mem->setEtat_membre('N');
              } else {
                if(substr($ancien_code,-1,1) == 'M') {
                  $sessionmembreasso->error = "Ce membre n'est pas autorisé à effectuer cette opération !!!";
                  $db->rollback();
                  //$this->view->nom_membre = $_POST["nom_membre"];
                 //$this->view->prenom_membre = $_POST["prenom_membre"];
                 $this->view->sexe = $_POST["sexe_membre"];
                 $this->view->sitfam = $_POST["sitfam_membre"];
                 $this->view->datnais = $_POST["date_nais_membre"];
                 $this->view->nation = $_POST["nationalite_membre"];
                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                 $this->view->formation = $_POST["formation"];
                 $this->view->profession = $_POST["profession_membre"];
                 $this->view->religion = $_POST["religion_membre"];
                 $this->view->pere = $_POST["pere_membre"];
                 $this->view->mere = $_POST["mere_membre"];
                 $this->view->quartier_membre = $_POST["quartier_membre"];
                 $this->view->ville_membre = $_POST["ville_membre"];
                 $this->view->bp = $_POST["bp_membre"];
                 //$this->view->tel = $_POST["tel_membre"];
                 $this->view->email = $_POST["email_membre"];
                 //$this->view->portable = $_POST["portable_membre"];
                 return;
                }

                $mem->setEtat_membre('A');
                //Mise à jour de la table physique
                $p_mapper = new Application_Model_PhysiqueMapper();
                $p = new Application_Model_Physique();
                $rep = $p_mapper->find($ancien_code,$p);
                if ($rep == true) {
                   $p->setEtat_contrat(1)
                     ->setCode_membre($code);
                   $p_mapper->update($p);
                }
                // Mise à jour de la table eu_ancien_membre
                $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                $pmcnp = new Application_Model_EuAncienMembre();
                $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                if ($repmcnp == true) {
                   $pmcnp->setEtat_contrat(1)
                         ->setCode_membre($code);
                   $pmcnp_mapper->update($pmcnp);
                }
              }
              $mem_mapper->update($mem);
			  
			  
			  //for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
if($compagnie == 1) {
    $sessionmembreasso->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
    $db->rollback();
    return;	
} else  {
                //$date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteurte = $m_telephone->findConuter() + 1;

                    //$telephone->setId_telephone($compteurte);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}
			  

              $cb_mapper = new Application_Model_EuCompteBancaireMapper();
              $cb = new Application_Model_EuCompteBancaire();
              for($i = 0; $i < count($_POST['code_banque']); $i++) {
			    if($_POST['num_compte'][$i]!=""){
                 $cb_compteur = $cb_mapper->findConuter() + 1;
                 $cb->setCode_banque($_POST['code_banque'][$i])
                    ->setId_compte($cb_compteur)
                    ->setCode_membre($code)
                    ->setCode_membre_morale(NULL)
                    ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                 $cb_mapper->save($cb);
				} 
              }

			    $place = new Application_Model_EuOperation();
                $mapper_op = new Application_Model_EuOperationMapper();
			  
                $compteurfs = $mapper_op->findConuter() + 1;
                $lib_op = 'Auto-enrôlement';
                $type_op = 'AERL';
                //Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                
				$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                $place->setId_utilisateur(null);
                $place->setCode_membre($code);
                $place->setCode_membre_morale(null);
                $place->setMontant_op($fs);
                $place->setCode_produit('FS');
                $place->setLib_op($lib_op);
                $place->setType_op($type_op);
                $place->setCode_cat('TFS');
                $mapper_op->save($place);
			  
			    $tab_fs = new Application_Model_DbTable_EuFs();
                $fs_model = new Application_Model_EuFs();
                $fs_model->setCode_membre($code)
                         ->setCode_membre_morale(NULL)
                         ->setCode_fs('FS-' . $code)
                         ->setCreditcode($sms_fs->getCreditCode())
                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                         ->setId_utilisateur(NULL)
                         ->setMont_fs($fs);
                if(($ancien_code =='') || ($ancien_code == NULL)) {
                  $fs_model->setOrigine_fs('N');
                } else {
                  $fs_model->setOrigine_fs('A');
                }
                $tab_fs->insert($fs_model->toArray());

                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                $sms_mapper->update($sms_fs);

                $userin = new Application_Model_EuUtilisateur();
                $mapper = new Application_Model_EuUtilisateurMapper();
                //$id_user = $mapper->findConuter() + 1;
                //$userin->setId_utilisateur($id_user)
                $userin->setId_utilisateur_parent(NULL)
                       ->setPrenom_utilisateur($prenom_membre)
                       ->setNom_utilisateur($nom_membre)
                       ->setLogin($code)
                       ->setPwd(md5($codesecret))
                       ->setDescription(NULL)
                       ->setUlock(0)
                       ->setCh_pwd_flog(0)
                       ->setCode_groupe('personne_physique')
                       ->setCode_groupe_create('personne_physique')
                       ->setConnecte(0)
                       ->setCode_agence($code_agence)
                       ->setCode_secteur(NULL)
                       ->setCode_zone($code_zone)
                      //->setCode_gac_filiere(NULL)
                       ->setId_pays($id_pays)
                       ->setCode_acteur($code_acteur)
                       ->setCode_membre($code)
                       ->setId_canton($request->getParam("id_canton"));
                   $mapper->save($userin);

                   // Mise à jour de la table eu_contrat
                   $contrat = new Application_Model_EuContrat();
                   $mapper_contrat = new Application_Model_EuContratMapper();
                   //$id_contrat = $mapper->findConuter() + 1;
                   //$contrat->setId_contrat($id_contrat);
                   $contrat->setCode_membre($code);
                   $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                   $contrat->setNature_contrat('numeraire');
                   $contrat->setId_type_contrat(NULL);
                   $contrat->setId_type_creneau(NULL);
                   $contrat->setId_type_acteur(NULL);
                   $contrat->setId_pays(NULL);
                   $contrat->setId_utilisateur(NULL);
                   $contrat->setFiliere(NULL);
                   $mapper_contrat->save($contrat);
            } else {
                   $sessionmembreasso->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
              }
            }
            if($code_fl != "") {
                $sms_fl = $sms_mapper->findByCreditCode($code_fl);
              if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
              if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

              $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

               if(($ancien_code =='') || ($ancien_code == NULL)) {
                        $fl->setOrigine_fl('N');
               } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

              //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
							
                            $compteurfl = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_fl);
                            $place->setCode_produit('FL');
                            $place->setLib_op('Frais de licences');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
							
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

              for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                }  else {
                            $sessionmembreasso->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
              }


            if($code_fkps != "") {
                $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
              if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmembreasso->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
              if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmembreasso->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            //$id_demande = $carte->findConuter() + 1;
                            //$carte->setId_demande($id_demande)
                            $carte->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
              if(($ancien_code =='') || ($ancien_code == NULL)) {
                       $carte->setOrigine_fkps('N');
              } else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            $compteurcps = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            
							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_cps);
                            $place->setCode_produit('CPS');
                            $place->setLib_op('Frais de CPS');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
							
							$sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
            }
			
			
			// script de creation de TE de prestation
			/*
                 $eucompte = new Application_Model_EuCompte();
				 $m_compte = new Application_Model_EuCompteMapper();

                 $te   = new Application_Model_EuTegc();
				 $m_te = new Application_Model_EuTegcMapper();
				 $code_te = "";
				 $nom_tegc = "";				 
						
				 $nom_tegc = $bon_neutre->bon_neutre_nom." ".$bon_neutre->bon_neutre_prenom;

                 $code_zone = $request->getParam("code_zone");
			     $id_pays =   $request->getParam("id_pays");
			     $id_region = $request->getParam("id_region");
			     $id_prefecture =  $request->getParam("id_prefecture");
			     $id_canton = $request->getParam("id_canton");

                 $num_compte = 'NB-TPAGCP-'.$code;
				 $res = $m_compte->find($num_compte,$eucompte);
									
				 if(!$res) {
					$eucompte->setCode_cat('TPAGCP')
                             ->setCode_compte($num_compte)
			                 ->setCode_type_compte('NB')
                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                             ->setDesactiver(0)
                             ->setLib_compte('TPAGCP')
                             ->setSolde(0);
												 				 
                     $eucompte->setCode_membre($code)
                              ->setCode_membre_morale(NULL);
																				         
                     $m_compte->save($eucompte);
										
			         $code_te = $m_te->getLastTegcByMembre($code);
					 if($code_te == NULL) {
			            $code_te = 'TEGCP'.$code. '00001';         
			         } else {
			            $num_ordre = substr($code_te, -5);
                        $num_ordre++;
                        $code_te = 'TEGCP'.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			         }
										
										$te->setCode_tegc($code_te);
			                            $te->setId_filiere(NULL);
			                            $te->setMdv(12);
			                            $te->setTranche_payement(1);
                                        $te->setCode_membre_physique($code);										
			                            $te->setMontant(0);
			                            $te->setMontant_utilise(0);
			                            $te->setSolde_tegc(0);
			                            $te->setId_utilisateur(NULL);
			                            $te->setNom_tegc($nom_tegc);
			                            $te->setNom_produit("Prestation");
			                            $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					                    $te->setType_tegc("PRESTATAIRE");
										$te->setRecurrent_illimite(0);
										$te->setRecurrent_limite(0);
										$te->setNonrecurrent(1);
										$te->setPeriode1(0);
										$te->setPeriode2(0);
										$te->setPeriode3(0);
										$te->setFormel(0);
										$te->setRegime_tva(0);
										$te->setSpecial(1);
										$te->setOrdinaire(0);
										$te->setSubvention(0);
										
										$te->setCode_zone($code_zone);
				                        $te->setId_pays($id_pays);
				                        $te->setId_region($id_region);
				                        $te->setId_prefecture($id_prefecture);
				                        $te->setId_canton($id_canton);

                                        $m_te->save($te);

						}
						
						*/
			
			


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)){
                $bon_neutre2->setBon_neutre_code_membre($code);
                $bon_neutre2M->update($bon_neutre2);

                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2 = $bon_neutre_detail2M->fetchAllByCode($bon_neutre->bon_neutre_code);

                                if($bon_neutre_detail2->bon_neutre_appro_id > 0){
                                $bon_neutre_appro2 = new Application_Model_EuBonNeutreAppro();
                                $bon_neutre_appro2M = new Application_Model_EuBonNeutreApproMapper();
                                $bon_neutre_appro2M->find($bon_neutre_detail2->bon_neutre_appro_id, $bon_neutre_appro2);

                                $bon_neutre_appro2->setBon_neutre_appro_beneficiaire($code);
                                $bon_neutre_appro2M->update($bon_neutre_appro2);
                              }


                }



                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($montant_cm);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
              ///////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////

      if(isset($souscription->souscription_id) && $souscription->souscription_id > 0){

//////////////////////////////////////////////////////////
$id_souscription = $souscription->souscription_id;

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id_souscription, $souscription);




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1 && $sessionmembreasso->membreasso_id != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;


    if($souscription->souscription_montant > 0){

if($souscription->souscription_date <= '2018-01-31'){

        if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }

}else{

  if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }


}


    /*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
      $partagea_montant = floor(109);//$souscription->souscription_montant / 100 * 5
    }else{
      $partagea_montant = floor(109);//$souscription->souscription_montant / 100 * 5
    }*/

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_code_activation($m_codeactivation->findConuter());
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            //$partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_code_activation($m_codeactivation->findConuter());
            $partagem_mapper->save($partagem);

//////////////////////////////////////////
    }
}
}
              ///////////////////////////////////////////////////////////////////////////////////////



        $convention = new Application_Model_DbTable_EuConvention();
        $select2 = $convention->select();
        $select2->where("code_activation = ?", $_POST['code_BAn']);
        $select2->orwhere("(code_membre IS NULL");
        $select2->where("code_membre = '')");
        $select2->limit(1);

        if($convention_rows = $convention->fetchRow($select2)){
        $convention2 = new Application_Model_DbTable_EuConvention();
        $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
        }

            ///////////////////////////////////////////////////////////////////////////////////////

            $compteur = Util_Utils::findConuter() + 1;
            //Util_Utils::addSms2($compteur,intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
            
			Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
            
			$db->commit();

            $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
            Code Membre (Login) : <strong>".$code."</strong><br />
            Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
            $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;
            $this->_redirect('/integrateur/enrolementsms2int/paramban/'.$paramban);

          }
            }  catch(Exception $exc) {
				     $db->rollback();
                     $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                     //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                     //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                     $this->view->sexe = $request->getParam("sexe_membre");
                     $this->view->sitfam = $request->getParam("sitfam_membre");
                     $this->view->datnais = $request->getParam("date_nais_membre");
                     $this->view->nation = $request->getParam("nationalite_membre");
                     $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                     $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                     $this->view->formation = $request->getParam("formation");
                     $this->view->profession = $request->getParam("profession_membre");
                     $this->view->religion = $request->getParam("religion_membre");
                     $this->view->pere = $request->getParam("pere_membre");
                     $this->view->mere = $request->getParam("mere_membre");
                     $this->view->quartier_membre = $request->getParam("quartier_membre");
                     $this->view->ville_membre = $request->getParam("ville_membre");
                     $this->view->bp = $request->getParam("bp_membre");
                     //$this->view->tel = $request->getParam("tel_membre");
                     $this->view->email = $request->getParam("email_membre");
                     //$this->view->portable = $request->getParam("portable_membre");
                     return;
              }
        } else {
               $sessionmembreasso->error = "Champs * obligatoire ...";
               //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
               //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
               $this->view->sexe = $request->getParam("sexe_membre");
               $this->view->sitfam = $request->getParam("sitfam_membre");
               $this->view->datnais = $request->getParam("date_nais_membre");
               $this->view->nation = $request->getParam("nationalite_membre");
               $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
               $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
               $this->view->formation = $request->getParam("formation");
               $this->view->profession = $request->getParam("profession_membre");
               $this->view->religion = $request->getParam("religion_membre");
               $this->view->pere = $request->getParam("pere_membre");
               $this->view->mere = $request->getParam("mere_membre");
               $this->view->quartier_membre = $request->getParam("quartier_membre");
               $this->view->ville_membre = $request->getParam("ville_membre");
               $this->view->bp = $request->getParam("bp_membre");
               //$this->view->tel = $request->getParam("tel_membre");
               $this->view->email = $request->getParam("email_membre");
               //$this->view->portable = $request->getParam("portable_membre");
      }
    }
  }




    public  function addpostulatAction()  { 
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
	    $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
            $t_canton = new Application_Model_DbTable_EuCanton(); 
	  
		 
            $t_candidat = new Application_Model_DbTable_EuTypeCandidat();
            $select = $t_candidat->select();
	    $select->where("id_type_candidat in (?) ", array(1,2,3,4,5,8,9,10,11));
            $candidats = $t_candidat->fetchAll($select);
	    $zones = $t_zone->fetchAll();
	    $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
            //$candidats  = $t_candidat->fetchAll();
	  
		
        $this->view->candidats = $candidats;
	    $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
		
	    $request = $this->getRequest();
		if($request->isPost()) { 
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
                $membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
		        $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
		        
		        $date_id = Zend_Date::now();
				
		        $postulat = new Application_Model_EuPostulat();
                $postulat_mapper = new Application_Model_EuPostulatMapper();
			
		        $code_membre = $request->getParam("postulat_code_membre");
		        $id_type_candidat = $request->getParam("id_type_candidat");
		        $postulat_nom = $request->getParam("postulat_nom");  
		        $postulat_prenom = $request->getParam("postulat_prenom");
		        //$postulat_raison = $request->getParam("postulat_raison");
			
		        $postulat_mobile = $request->getParam("postulat_mobile");
		        $postulat_email = $request->getParam("postulat_email");
			
	            $code_zone  = $request->getParam("code_zone");
		        $id_pays = $request->getParam("id_pays");
	            $id_region = $request->getParam("id_region");
		        $id_prefecture = $request->getParam("id_prefecture");
		        $id_canton = $request->getParam("id_canton");
		        $code_postulat = "";

                if($code_membre != "") {
					if(strlen($code_membre) != 20) {
						$db->rollback();
                        $this->view->error = "Le numéro membre du postulant saisi  ".$code_membre."  est introuvable ...";
                        return;	
					} else if(substr($code_membre,19,1) == 'P')  {
                        $membre = new Application_Model_EuMembre();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        if(!$membre_mapper->find($code_membre,$membre)) {
						    $db->rollback();
                            $this->view->error = "Le numéro membre du postulant saisi  ".$code_membre."  est introuvable ...";
                            return;
                        }
					} else {
						$membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
						if(!$m_mapmoral->find($code_membre,$membremoral)) {
						    $db->rollback();
                            $this->view->error = "Le numéro membre du postulant saisi  ".$code_membre."  est introuvable ...";
                            return;
                        }
					}
					
					$depot = new Application_Model_EuDepotVente();
                    $depot_mapper = new Application_Model_EuDepotVenteMapper();
					$finddepot = $depot_mapper->fetchAllByMembre($code_membre);
					
					if($finddepot != NULL)  {
						$db->rollback();
                        $this->view->error = "Votre candidature est déjà prise en compte en tant que CMFH. Connectez-vous à votre espace personnel pour actualiser votre profil CMFH ...";
                        return;
					}
                }
                
                $db_postulat = new Application_Model_DbTable_EuPostulat();
                $select = $db_postulat->select();
	            $select->where("LOWER(REPLACE(nom_postulat, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$postulat_nom)));

				$tabprenom = explode(" ", $postulat_prenom);
				foreach($tabprenom as $value) {
	                $select->where("LOWER(REPLACE(prenom_postulat, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				}
				
				/* if($postulat_raison != "") {
				    $tabraison = explode(" ", $postulat_raison);
				    foreach($tabraison as $raison) {
	                    $select->where("LOWER(REPLACE(raison_postulat, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$raison))."%' ");
				    }
				} */

				$select->where("id_canton = ? ", $id_canton);
				$select->where("id_type_candidat = ? ", $id_type_candidat);
				$select->limit(1);
	            $rowspostulat = $db_postulat->fetchRow($select);


                if(count($rowspostulat) <= 0) {
                    do  {
	                    $code_postulat = strtoupper(Util_Utils::genererCodeSMS(6));
                        $postulat2_mapper = new Application_Model_EuPostulatMapper();
                        $postulat2 = $postulat2_mapper->fetchAllByCode($code_postulat);
                    } while(count($postulat2) > 0);
					
					$compteur_postulat = $postulat_mapper->findConuter() + 1;
				    $postulat->setId_postulat($compteur_postulat);
				    $postulat->setCode_membre($code_membre);
				    $postulat->setId_type_candidat($id_type_candidat);
				    $postulat->setDate_postulat($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				    $postulat->setNom_postulat($postulat_nom);
				    $postulat->setPrenom_postulat($postulat_prenom);
				    $postulat->setRaison_postulat("");
				    $postulat->setCode_zone($code_zone);
				    $postulat->setId_pays($id_pays);
				    $postulat->setId_region($id_region);
				    $postulat->setId_prefecture($id_prefecture);
				    $postulat->setId_canton($id_canton);
				    $postulat->setEmail_postulat($postulat_email);
				    $postulat->setMobile_postulat($postulat_mobile);
				    $postulat->setId_canton($id_canton);
				    $postulat->setTraiter(0);
				    $postulat->setCode_postulat($code_postulat);
					$postulat->setUtilisateur($sessionmembreasso->membreasso_id);
				    $postulat_mapper->save($postulat);
				
				    $db->commit();
                    $sessionmembreasso->errorlogin = "Opération bien effectuée. <br />
                    Vous venez d'ajouter un postulat. <br/>
                    Voici votre code postulat : ".$code_postulat." "."<br/>".
				    "Veuillez le conserver pour la suite des opérations";
				
				    $this->_redirect('/integrateur/addpostulat');

                }  else {
				   $sessionmembreasso->errorlogin = "Voici le code postulat : <strong>".$rowspostulat->code_postulat."</strong><br />";
				   $this->_redirect('/integrateur/addpostulat');
			    }				
				
			} catch(Exception $exc) {
		        $db->rollback();
		        $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                return;
		    }

		 
		}

    }
	
	
	
	public  function addactivationppAction()    {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
		
		$date_id = Zend_Date::now();
        $request = $this->getRequest();
		if($request->isPost()) {
			if(isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
		    && isset($_POST['code_postulat']) && $_POST['code_postulat']!=""
            && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
            && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
            && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
            && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
            && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
            && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
            && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!="")   {
			       
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$codesecret = Util_Utils::genererCodeSMS(8);
					
					$bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					
					$postulat_mapper = new Application_Model_EuPostulatMapper();
                    $postulat = $postulat_mapper->fetchAllByCode($request->getParam("code_postulat"));
					
					/////////////////controle Code BAn ///////////////////////////////////////////////////
					if(count($bon_neutre) == 0) {
						$db->rollback();
                        $sessionmembreasso->error = "Code BAn incorrect ...";
						$this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					/////////////////controle Code Postulat ///////////////////////////////////////////////////
					if(count($postulat) == 0) {
						$db->rollback();
                        $sessionmembreasso->error = "Code Postulat incorrect ...";
						$this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					if((($postulat->code_membre != "") || ($postulat->code_membre != NULL)) && (strlen($postulat->code_membre) == 20)) {
					    $db->rollback();
                        $sessionmembreasso->error = "Ce postulant dispose dejà d'un code membre";						
						$this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
					}
					
					///////////////// controle nom prenom //////////////////////////////////
                    $eupreinscription = new Application_Model_DbTable_EuMembre();
                    $select = $eupreinscription->select();
                    $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));

                    $tabprenom = explode("", $bon_neutre->bon_neutre_prenom);
                    foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                    }

                    $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                    $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                    $select->limit(1);
                    $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
                        $sessionmembreasso->error = "Vous êtes déjà membre ...";
                        $db->rollback();
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					///////////////// controle email ////////////////////////////////////////////////////////
                    if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))) {
                        $sessionmembreasso->error = "E-mail non valable ...";
                        $db->rollback();
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					/////////////////controle nom prenom
                    $eusouscription = new Application_Model_DbTable_EuSouscription();
                    $select = $eusouscription->select();
                    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                    $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                    $select->order(array("souscription_id ASC"));
                    $select->limit(1);
                    $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                        $souscription_ok = 1;
                        $souscription_first = $rowseusouscription->souscription_id;
                    } else {
                        $souscription_ok = 0;
                    }
					
					
		    if(count($bon_neutre) > 0) {
						
			$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			$mont = 70000;
			$bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
			$montant_cm = 70000;
			if(($bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id)) >= 5000) {
			      $mont = 5000;
			      $montant_cm = 5000;
			      $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);	
					
                         } else if($bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id) >= 70000) {
			      $mont = 70000;
			      $montant_cm = 70000;
			      $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
			 }

						
			/////////////////controle 
                        if($bon_neutre->bon_neutre_montant_solde < $montant_cm) {
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            return;
                        }
						
						
						/////////////////souscription KACM PP
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                        $compteur_souscription = $souscription_mapper->findConuter() + 1;
                        $souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne("PP");
                        $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                        $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                        $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                        $souscription->setSouscription_email($request->getParam("email_membre"));
                
				        $souscription->setSouscription_mobile(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0]);
                        $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                        $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                        $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                        $souscription->setSouscription_montant($montant_cm);
                        $souscription->setSouscription_nombre(1);
                        $souscription->setSouscription_programme("KACM");
                        $souscription->setSouscription_type_candidat(0);
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
                        $souscription->setSouscription_ville($request->getParam("ville_membre"));
                        $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                        if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
                        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
                        }
                        $souscription->setSouscription_ordre(NULL);
                        $souscription->setSouscription_autonome(1);
                        $souscription->setPublier(0);
                        $souscription->setErreur(0);
                        $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						
						//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        $bon_neutre2 = new Application_Model_EuBonNeutre();
                        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                        $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                        $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_cm);
                        $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_cm);
                        $bon_neutre2M->update($bon_neutre2);
						
						///////////////////////////////////////////////////////////////////////////////////////
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //$mont = Util_Utils::getParamEsmc(14);
                        //$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                        //$bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                        
						if($bon_neutre_detail_somme < $mont) {
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            return;
                        } else {
                            $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                            foreach($bon_neutre_detail as $detail) {
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                                if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                                    $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);



                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

							
                                } else {
                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $mont;
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                    break;
                                }

                            }
                        }
						
						///////////////////////////////////////////////////////////////////////////////////////
                        //////validation acnev
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(1);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);
						
						
						//////validation filere
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(2);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

                        //////validation technopole
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(3);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);
						
	
                        ////////////////////////////////////////////////////////////////////////////////////////////////////
						
						//operation de transfert
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        $date = new Zend_Date();
                        $compte_map = new Application_Model_EuCompteMapper();
                        $compte      = new Application_Model_EuCompte();
                        $sms_money   = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                        $mobile = $souscription->souscription_mobile;
                        //$nbre_compte = $souscription->souscription_nombre;
                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                        //$montant = $nbre_compte * $fcaps;
                        $membre_pbf = '0000000000000000001M';
                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                        $ret = $compte_map->find($code_compte_pbf,$compte);

                        $souscription2 = new Application_Model_EuSouscription();
                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                        $souscription2M->find($compteur_souscription, $souscription2);

                        $souscription2->setSouscription_autonome(1);
                        $souscription2->setSouscription_programme('KACM');
                        $souscription2M->update($souscription2);
						
						if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                           // Mise à jour du compte de transfert
                           $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                           $compte_map->update($compte);
                        } else {
                           $db->rollback();
                           $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte insuffisant';
                           $this->view->sexe = $request->getParam("sexe_membre");
                           $this->view->sitfam = $request->getParam("sitfam_membre");
                           $this->view->datnais = $request->getParam("date_nais_membre");
                           $this->view->nation = $request->getParam("nationalite_membre");
                           $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                           $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                           $this->view->formation = $request->getParam("formation");
                           $this->view->profession = $request->getParam("profession_membre");
                           $this->view->religion = $request->getParam("religion_membre");
                           $this->view->pere = $request->getParam("pere_membre");
                           $this->view->mere = $request->getParam("mere_membre");
                           $this->view->quartier_membre = $request->getParam("quartier_membre");
                           $this->view->ville_membre = $request->getParam("ville_membre");
                           $this->view->bp = $request->getParam("bp_membre");
                           $this->view->email = $request->getParam("email_membre");
                           return;
                        }
						
						$codefs   = '';
                        $codefl   = '';
                        $codefkps = '';

                        //Traitement des produits FS
                        //insertion dans la table eu_smsmoney
                        $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                        //Traitement des produits FL
                        //insertion dans la table eu_smsmoney
                        $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                        //Traitement des produits FCPS
                        $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
						
						
						if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
						    $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);
							
							$i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while($reste > 0 && $i < $nbre_lignesdetfs) {
                                $lignedetfs = $lignesdetfs[$i];
                                $id = $lignedetfs->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfs->getSolde_sms()) {
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                      ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FS')
                                                      ->setCreditcode($codefs)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfs->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfs->getSolde_sms();
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                               ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfs);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FS')
                                               ->setCreditcode($codefs)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfs);
                                    $reste = 0;
                                }
                                $i++;
                            }

                            $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfl = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfl)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fl)
                                      ->setSentTo($mobile)
                                      ->setMotif('FL')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefl)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $j = 0;
                            $reste = $mont_fl;
                            $nbre_lignesdetfl = count($lignesdetfl);
                            while($reste > 0 && $j < $nbre_lignesdetfl) {
                                $lignedetfl = $lignesdetfl[$j];
                                $id = $lignedetfl->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfl->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    $reste = $reste - $lignedetfl->getSolde_sms();
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfl->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfl);
									
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                    $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfl);
                                    $reste = 0;
                                }
                                $j++;
                            }

                            $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfkps = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfkps)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_kps)
                                      ->setSentTo($mobile)
                                      ->setMotif('FCPS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefkps)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                       ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $k = 0;
                            $reste = $mont_kps;
                            $nbre_lignesdetfkps = count($lignesdetfkps);
                            while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                $lignedetfkps = $lignesdetfkps[$k];
                                $id = $lignedetfkps->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfkps->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfkps->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfkps->getSolde_sms();
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                 ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfkps);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                    $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfkps);
                                    $reste = 0;
                                }
                                $k++;
                            }

                            // insertion dans la table eu_code_activation
                            $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                            $codeactivation = new Application_Model_EuCodeActivation();
                            $countcode = $m_codeactivation->findConuter() + 1;

                            $codeactivation->setId_code_activation($countcode)
                                           ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                            $codeactivation->setCode_membre(NULL);
                            $codeactivation->setCode_fs($codefs);
                            $codeactivation->setCode_fl($codefl);
                            $codeactivation->setCode_fkps($codefkps);
                            $codeactivation->setOrigine_code("ESMC");
                            $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                            $codeactivation->setSouscription_id($compteur_souscription);
                            $m_codeactivation->save($codeactivation);
							
							
							$smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                            $code_agence = $request->getParam("code_agence");
                            $code_zone = substr($request->getParam("code_agence"), 0, 3);
                            $id_pays = $request->getParam("id_pays");
                            $table = new Application_Model_DbTable_EuActeur();
                            $selection = $table->select();
                            $selection->where('code_membre like ?',$code_agence.'%');
                            $selection->where('type_acteur like ?','gac_surveillance');
                            $resultat = $table->fetchAll($selection);
                            $trouvacteursur = $resultat->current();
                            $code_acteur = $trouvacteursur->code_acteur;

                            $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $date_idd = clone $date_id;
                            $membre = new Application_Model_EuMembre();
                            $mapper = new Application_Model_EuMembreMapper();
                            $compte = new Application_Model_EuCompte();
                            $map_compte = new Application_Model_EuCompteMapper();
                            $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $code_activationM = new Application_Model_EuCodeActivationMapper();

                            $fs = Util_Utils::getParametre('FS','valeur');
                            $mont_fl = Util_Utils::getParametre('FL','valeur');
                            $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                            $ancien_code = '';
                            $tcartes = array();
                            $tscartes = array();


                            $code_fs = $codefs;
                            $code_fl = $codefl;
                            $code_fkps = $codefkps;


                    
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if($code == NULL) {
                                $code = $code_agence . '0000001' . 'P';
                            } else {
                                $num_ordre = substr($code, 12, 7);
                                $num_ordre++;
                                $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                                $code = $code_agence . $num_ordre_bis . 'P';
                            }
							
							
							$sms_fs = $sms_mapper->findByCreditCode($code_fs);
							
							$date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if($date_nais >= $date_idd) {
								$db->rollback();
                                $sessionmembreasso->error = "La date de naissance doit être antérieure à la date actuelle !!!";
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->email = $request->getParam("email_membre");
                                return;
                            }
							
							
							//////////////////////////////preinscription

                            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

                            $preinscription = new Application_Model_EuPreinscription();
                           //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

                            $preinscription->setId_preinscription($compteur_preinscription)
                           ->setNom_membre($bon_neutre->bon_neutre_nom)
                           ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           //->setTel_membre($request->getParam("tel_membre"))
						   ->setTel_membre(null)
                           ->setEmail_membre($request->getParam("email_membre"))
                           //->setPortable_membre($request->getParam("portable_membre"))
						   ->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"));
                            $preinscription->setPublier(1);

                            $preinsc_mapper->save($preinscription);


                ///////////////////////////validation acnev
                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);


                //////validation filere
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(2);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                  $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(3);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                        ////////////////////////////////////////////


                        $mem = new Application_Model_EuMembre();
                        $mem_mapper = new Application_Model_EuMembreMapper();
                        $findmem = $mem_mapper->find($code,$mem);
						
						$mem->setEtat_membre('N');
						$mem_mapper->update($mem);

                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;
				            if($_POST['code_banque'][$i] != "") {
                                $cb->setCode_banque($_POST['code_banque'][$i])
                                   ->setId_compte($cb_compteur)
                                   ->setCode_membre($code)
                                   ->setCode_membre_morale(NULL)
                                   ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                $cb_mapper->save($cb);
				            }
                        }

                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteurfs = $mapper_op->findConuter() + 1;
                        $lib_op = 'Auto-enrôlement';
                        $type_op = 'AERL';
                        Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
                       ->setCode_membre_morale(NULL)
                       ->setCode_fs('FS-' . $code)
                       ->setCreditcode($sms_fs->getCreditCode())
                       ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                       ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                       ->setId_utilisateur(NULL)
                       ->setMont_fs($fs);
                        $fs_model->setOrigine_fs('N');
                
                        $tab_fs->insert($fs_model->toArray());

                        $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                        $userin = new Application_Model_EuUtilisateur();
                        $mapper = new Application_Model_EuUtilisateurMapper();
                        $id_user = $mapper->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(NULL)
                               ->setPrenom_utilisateur($bon_neutre->bon_neutre_prenom)
                               ->setNom_utilisateur($bon_neutre->bon_neutre_nom)
                               ->setLogin($code)
                               ->setPwd(md5($codesecret))
                               ->setDescription(NULL)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
                               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(NULL)
                               ->setCode_zone($code_zone)
                               ->setId_pays($id_pays)
                               ->setCode_acteur($code_acteur)
                               ->setCode_membre($code)
                               ->setId_canton($request->getParam("id_canton"));
                        $mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper->findConuter() + 1;
                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(NULL);
                        $contrat->setId_type_creneau(NULL);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays(NULL);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere(NULL);
                        $mapper_contrat->save($contrat);
						
						$sms_fl = $sms_mapper->findByCreditCode($code_fl);
						$tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(NULL)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());
                        $fl->setOrigine_fl('N');
               
                        $tfl->insert($fl->toArray());

                        //Mise à jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }
                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);
						
						$tcartes[0]="TPAGCRPG";
                        $tcartes[1]="TCNCS";
                        $tcartes[2]="TPaNu";
                        $tcartes[3]="TPaR";
                        $tcartes[4]="TR";
                        $tcartes[5]="CAPA";

                        $tscartes[0]="TSRPG";
                        $tscartes[1]="TSCNCS";
                        $tscartes[2]="TSPaNu";
                        $tscartes[3]="TSPaR";
                        $tscartes[4]="TSCAPA";
						
						
						for($i = 0; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCS") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } else  {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }

                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                        }
						
						
						for($j = 0; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } else {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                        }
						
						$sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
						
						$carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($mont_cps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        $carte->setOrigine_fkps('N');
              
                        $t_carte->insert($carte->toArray());
                        $compteurcps = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                        $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                 ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
						
						
						
						$bon_neutre2 = new Application_Model_EuBonNeutre();
                        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                        $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                        if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)){
                            $bon_neutre2->setBon_neutre_code_membre($code);
                            $bon_neutre2M->update($bon_neutre2);
                        }

                        /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                        $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                        $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                        $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                        $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                        $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_utilise2->setBon_neutre_utilise_montant($montant_cm);
                        $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
							
                        //Mise a jour de eu_postulat
                        $postulat2 = new Application_Model_EuPostulat();
                        $postulat2M = new Application_Model_EuPostulatMapper();
                        $postulat2M->find($postulat->id_postulat,$postulat2);

                        if(($postulat2->code_membre == "" || $postulat2->code_membre == NULL)) {
                           $postulat2->setCode_membre($code);
                           $postulat2M->update($postulat2);
                        }


                        $convention = new Application_Model_DbTable_EuConvention();
                        $select2 = $convention->select();
                        $select2->where("code_activation = ?", $_POST['code_BAn']);
                        $select2->orwhere("(code_membre IS NULL");
                        $select2->where("code_membre = '')");
                        $select2->limit(1);

                        if($convention_rows = $convention->fetchRow($select2)){
                            $convention2 = new Application_Model_DbTable_EuConvention();
                            $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
                        }

                        //////////////////////////////////////////
            $partagea_montant = "";
            if($sessionmembreasso->membreasso_id != 1) {
                $membreasso = new Application_Model_EuMembreasso();
                            $m_membreasso = new Application_Model_EuMembreassoMapper();
                            $m_membreasso->find($sessionmembreasso->membreasso_id,$membreasso);
              
              $association = new Application_Model_EuAssociation();
                            $m_association = new Application_Model_EuAssociationMapper();
                            $m_association->find($membreasso->membreasso_association, $association);
                            $code_agence = $association->code_agence;
            
                if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
                              if($souscription->souscription_programme == "KACM") {
                                 $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
                              } else {
                                 $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
                              }

                            } else {
                              if($souscription->souscription_programme == "KACM") {
                                 $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
                              } else {
                                 $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
                              }
                            }
              
              /////////////////////////////////////////////////////////////////////////////////////
                            $partagea = new Application_Model_EuPartagea();
                            $partagea_mapper = new Application_Model_EuPartageaMapper();

                            $compteur_partagea = $partagea_mapper->findConuter() + 1;
                            //$partagea->setPartagea_id($compteur_partagea);
                            $partagea->setPartagea_association($membreasso->membreasso_association);
                            $partagea->setPartagea_souscription($souscription->souscription_id);
                            $partagea->setPartagea_montant($partagea_montant * 0.75);
                            $partagea->setPartagea_montant_utilise(0);
                            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
                            $partagea->setPartagea_montant_impot(0);
                            $partagea->setPartagea_code_activation($m_codeactivation->findConuter());
                            $partagea_mapper->save($partagea);

                            //////////////////////////////////////////

                            $partagem = new Application_Model_EuPartagem();
                            $partagem_mapper = new Application_Model_EuPartagemMapper();

                            $compteur_partagem = $partagem_mapper->findConuter() + 1;
                            //$partagem->setPartagem_id($compteur_partagem);
                            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
                            $partagem->setPartagem_souscription($souscription->souscription_id);
                            $partagem->setPartagem_montant($partagea_montant * 0.25);
                            $partagem->setPartagem_montant_utilise(0);
                            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
                            $partagem->setPartagem_montant_impot(0);
                            $partagem->setPartagem_code_activation($m_codeactivation->findConuter());
                            $partagem_mapper->save($partagem);

                            //////////////////////////////////////////
          
              }
                        ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmembreasso->membre = $code;
                        $sessionmembreasso->codesecret = $codesecret;
                        $this->_redirect('/integrateur/addactivationpp');
						
						
						
						
						
						} else {
							$db->rollback();
					        $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
					        $sessionmembreasso->error = "Le compte de transfert est introuvable ou le solde du compte insuffisant";
					        return;
							
						}
						
						
					
			        }
			
			    } catch(Exception $exc) {
                    $db->rollback();
					$this->view->sexe = $request->getParam("sexe_membre");
                    $this->view->sitfam = $request->getParam("sitfam_membre");
                    $this->view->datnais = $request->getParam("date_nais_membre");
                    $this->view->nation = $request->getParam("nationalite_membre");
                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                    $this->view->formation = $request->getParam("formation");
                    $this->view->profession = $request->getParam("profession_membre");
                    $this->view->religion = $request->getParam("religion_membre");
                    $this->view->pere = $request->getParam("pere_membre");
                    $this->view->mere = $request->getParam("mere_membre");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    $this->view->email = $request->getParam("email_membre");
					$sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
					return;
                }
	
		    } else  {
				$sessionmembreasso->error = "Champs * obligatoire ...";
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->email = $request->getParam("email_membre");
			}
	
	    }
	}
	
	
	
	public function addactivationpmAction()   {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
        $date_id = Zend_Date::now();
        $request = $this->getRequest();
		
		
		if($request->isPost()) {
			if(isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
                && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
                && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
                && isset($_POST['code_statut']) && $_POST['code_statut']!=""
                && isset($_POST['code_rep']) && $_POST['code_rep']!=""
                && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
                && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
                && isset($_POST['email_membre']) && $_POST['email_membre']!=""
                && isset($_POST['id_pays']) && $_POST['id_pays']!=""
                && isset($_POST['code_agence']) && $_POST['code_agence']!=""
                && isset($_POST['code_activite']) && $_POST['code_activite']!=""
                && isset($_POST['id_canton']) && $_POST['id_canton']!="")   {
			        
					$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
						
						$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
                    $codesecret = Util_Utils::genererCodeSMS(8);
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					
					$postulat_mapper = new Application_Model_EuPostulatMapper();
                    $postulat = $postulat_mapper->fetchAllByCode($request->getParam("code_postulat"));
					
					/////////////////controle Code BAn ///////////////////////////////////////////////////
					if(count($bon_neutre) == 0) {
						$db->rollback();
                        $sessionmembreasso->error = "Code BAn incorrect ...";
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
					
					/////////////////controle Code Postulat ///////////////////////////////////////////////////
					if(count($postulat) == 0) {
						$db->rollback();
                        $sessionmembreasso->error = "Code Postulat incorrect ...";
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
					
					if((($postulat->code_membre != "") || ($postulat->code_membre != NULL)) && (strlen($postulat->code_membre) == 20)) {
					    $db->rollback();
                        $sessionmembreasso->error = "Ce postulant dispose dejà d'un code membre";						
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
					}
					
					/////////////////controle raison sociale
                    $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                    $select = $eupreinscription->select();
                    $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                    $select->limit(1);
                    $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
						$db->rollback();
                        $sessionmembreasso->error = "Vous êtes déjà membre ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");    
                        return;
                    }
					
					/////////////////controle email
                    if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                        $db->rollback();
				        $sessionmembreasso->error = "E-mail non valable ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");   
                        return;
                    }

                    /////////////////controle raison sociale
                    $eusouscription = new Application_Model_DbTable_EuSouscription();
                    $select = $eusouscription->select();
                    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                    $select->order(array("souscription_id ASC"));
                    $select->limit(1);
                    $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                        $souscription_ok = 1;
                        $souscription_first = $rowseusouscription->souscription_id;
                    } else {
                        $souscription_ok = 0;
                    }
					
					
					///////////////// controle codemembre
                    if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                        $membre = new Application_Model_EuMembre();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        if(!$membre_mapper->find($_POST['code_rep'], $membre))  {
							$db->rollback();
                            $sessionmembreasso->error = "Le Code Membre est erroné ...";
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }
                    }
					
					
					if(count($bon_neutre) > 0)  {
					    
					    /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < Util_Utils::getParamEsmc(15)) {
							$db->rollback();
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }
						
						/////////////////souscription KACM PM
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                        $compteur_souscription = $souscription_mapper->findConuter() + 1;
                        $souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne("PM");
                        $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                        $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                        $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                        $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $souscription->setCode_statut($request->getParam("code_statut"));
                        $souscription->setSouscription_email($request->getParam("email_membre"));
                        $souscription->setSouscription_mobile(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0]);
                        $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                        $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                        $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                        $souscription->setSouscription_montant(Util_Utils::getParamEsmc(15));
                        $souscription->setSouscription_nombre(1);
                        $souscription->setSouscription_programme("KACM");
                        $souscription->setSouscription_type_candidat(0);
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
                        $souscription->setSouscription_ville($request->getParam("ville_membre"));
                        $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                        if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
                        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
                        }
                        $souscription->setSouscription_ordre(NULL);
                        $souscription->setSouscription_autonome(1);
                        $souscription->setPublier(0);
                        $souscription->setErreur(0);
                        $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        $bon_neutre2 = new Application_Model_EuBonNeutre();
                        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                        $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                        $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + Util_Utils::getParamEsmc(15));
                        $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - Util_Utils::getParamEsmc(15));
                        $bon_neutre2M->update($bon_neutre2);
					
					    ///////////////////////////////////////////////////////////////////////////////////////
                        //////////////////////////////////////////////////////////////////////////////////////
                        $mont = Util_Utils::getParamEsmc(15);
                        $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                        $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                        if($bon_neutre_detail_somme < $mont) {
							$db->rollback();
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
							
                        } else {
					        
                            $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                            foreach($bon_neutre_detail as $detail)  {
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);
                                if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                                    $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }

                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);
                                


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);
				
								} else {
                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $mont;
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }

                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);
				
                                    break;
                                }

                            }
              
				        }
						
						//////validation acnev
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(1);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

                        //////validation filere
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(2);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                        //////validation technopole
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(3);
                        $souscriptionM->update($souscription);


                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);
						
						


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						
						// operation de transfert
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        $date = new Zend_Date();
                        $compte_map = new Application_Model_EuCompteMapper();
                        $compte     = new Application_Model_EuCompte();
                        $sms_money  = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                        $mobile = $souscription->souscription_mobile;
                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                        //$montant = $nbre_compte * $fcaps;
                        $membre_pbf = '0000000000000000001M';
                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                        $ret = $compte_map->find($code_compte_pbf,$compte);

                        $souscription2 = new Application_Model_EuSouscription();
                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                        $souscription2M->find($compteur_souscription, $souscription2);

                        $souscription2->setSouscription_autonome(1);
                        $souscription2->setSouscription_programme('KACM');
                        $souscription2M->update($souscription2);
						
						
						if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                            // Mise à jour du compte de transfert
                            $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                            $compte_map->update($compte);
                        } else {
							$db->rollback();
                            $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte insuffisant';
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                                                  
                        }
						
						$codefs   = '';
                        $codefl   = '';
                        $codefkps = '';

                        // Traitement des produits FS
                        // insertion dans la table eu_smsmoney
                        $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                        // Traitement des produits FL
                        // insertion dans la table eu_smsmoney
                        $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                        // Traitement des produits FCPS
                        $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
						
						if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
						    $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);
							
							$i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while($reste > 0 && $i < $nbre_lignesdetfs) {
                                $lignedetfs = $lignesdetfs[$i];
                                $id = $lignedetfs->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfs->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FS')
                                               ->setCreditcode($codefs)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfs->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfs->getSolde_sms();
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                               ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfs);
									
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FS')
                                               ->setCreditcode($codefs)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfs);
                                    $reste = 0;
                                }
                                $i++;
                            }
							
							$codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfl = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfl)
                                       ->setCode_Agence(null)
                                       ->setCreditAmount($mont_fl)
                                       ->setSentTo($mobile)
                                       ->setMotif('FL')
                                       ->setId_Utilisateur(null)
                                       ->setCurrencyCode('XOF')
                                       ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                       ->setFromAccount($code_compte_pbf)
                                       ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                       ->setCreditCode($codefl)
                                       ->setDestAccount(null)
                                       ->setIDDatetimeConsumed(0)
                                       ->setDestAccount_Consumed(null)
                                       ->setDatetimeConsumed(null)
                                       ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $j = 0;
                            $reste = $mont_fl;
                            $nbre_lignesdetfl = count($lignesdetfl);
                            while($reste > 0 && $j < $nbre_lignesdetfl) {
                                $lignedetfl = $lignesdetfl[$j];
                                $id = $lignedetfl->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfl->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    $reste = $reste - $lignedetfl->getSolde_sms();
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfl->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfl);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                    $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfl);
                                    $reste = 0;
                                }
                                $j++;
                            }
							
							
							$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfkps = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfkps)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_kps)
                                      ->setSentTo($mobile)
                                      ->setMotif('FCPS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefkps)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $k = 0;
                            $reste = $mont_kps;
                            $nbre_lignesdetfkps = count($lignesdetfkps);
                            while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                $lignedetfkps = $lignesdetfkps[$k];
                                $id = $lignedetfkps->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfkps->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfkps->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfkps->getSolde_sms();
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                 ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfkps);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
											   ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                    $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfkps);
                                    $reste = 0;
                                }
                                $k++;
                            }
							
							// insertion dans la table eu_code_activation
                            $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                            $codeactivation = new Application_Model_EuCodeActivation();
                            $countcode = $m_codeactivation->findConuter() + 1;

                            $codeactivation->setId_code_activation($countcode)
                                           ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                            $codeactivation->setCode_membre(NULL);
                            $codeactivation->setCode_fs($codefs);
                            $codeactivation->setCode_fl($codefl);
                            $codeactivation->setCode_fkps($codefkps);
                            $codeactivation->setOrigine_code("ESMC");
                            $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                            $codeactivation->setSouscription_id($compteur_souscription);
                            $m_codeactivation->save($codeactivation);
							
							
							
							
							$utilisateur = NULL;
                            //$groupe = $user->code_groupe;
                            $code_agence = $request->getParam("code_agence");
                            $code_zone = substr($_POST['code_agence'], 0, 3);
                            $id_pays = $_POST['id_pays'];
                            $groupe = NULL;

                            $table = new Application_Model_DbTable_EuActeur();
                            $selection = $table->select();
                            $selection->where('code_membre like ?',$code_agence.'%');
                            $selection->where('type_acteur like ?','gac_surveillance');
                            $resultat = $table->fetchAll($selection);
                            $trouvacteursur = $resultat->current();
                            $code_acteur = $trouvacteursur->code_acteur;
                            $acteur      =  $code_acteur;

                            $fs = Util_Utils::getParametre('FS','valeur');
                            $mont_fl = Util_Utils::getParametre('FL','valeur');
                            $fcps = Util_Utils::getParametre('FKPS','valeur');

                            $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $date_idd = clone $date_id;

                            $code_fs = $codefs;
                            $code_fl = $codefl;
                            $code_fkps = $codefkps;
							
							$membre = new Application_Model_EuMembreMorale();
                            $mapper = new Application_Model_EuMembreMoraleMapper();
                            $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                            $mapper_op = new Application_Model_EuOperationMapper();
                            $compte = new Application_Model_EuCompte();
                            $map_compte = new Application_Model_EuCompteMapper();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $tcartes = array();
                            $tscartes = array();


    
                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if($code == NULL) {
                                $code = $code_agence . '0000001' . 'M';
                            } else {
                                $num_ordre = substr($code, 12, 7);
                                $num_ordre++;
                                $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                                $code = $code_agence . $num_ordre_bis . 'M';
                            }
							
							                             ///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($bon_neutre->bon_neutre_raison)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(null)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                 ->setCode_agence($code_agence)
                       ->setPublier(1)
                 ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/



//////validation acnev
                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                $preinscriptionmorale->setPublier(2);
                $preinscriptionmoraleM->update($preinscriptionmorale);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                $preinscriptionmorale->setPublier(3);
                $preinscriptionmoraleM->update($preinscriptionmorale);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
            $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($bon_neutre->bon_neutre_raison);
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(null);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0]);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




              /////////////
            $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
            $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
            $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

            $preinscriptionmorale->setCode_membre_morale($code);
            $preinscriptionmoraleM->update($preinscriptionmorale);
							
							for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
			   $compagnie = telephonecompagnie($_POST['code_telephonique'][$i], $_POST['numero_telephone'][$i]);
               $numero_telephone = intval($_POST['code_telephonique'][$i]).$_POST['numero_telephone'][$i];
			   
			   if($compagnie == 1)  {
                 $sessionmembreasso->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!";
                 $db->rollback();
                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                 $this->view->code_statut = $request->getParam("code_statut");
                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                 $this->view->site_web = $request->getParam("site_web");
                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                 $this->view->ville_membre = $request->getParam("ville_membre");
                 $this->view->bp = $request->getParam("bp_membre");
                 $this->view->email = $request->getParam("email_membre");
                 $this->view->id_pays = $request->getParam("id_pays");
                 $this->view->registre = $request->getParam("num_registre_membre");
                 return;		 
               } else {
				 $date_id = new Zend_Date(Zend_Date::ISO_8601);
				 $telephone = new Application_Model_EuTelephone();
				 $m_telephone = new Application_Model_EuTelephoneMapper();
							 
			     $compteur = $m_telephone->findConuter() + 1;
			     $telephone->setId_telephone($compteur);
				 $telephone->setNumero_telephone($numero_telephone);
			     $telephone->setCompagnie_telephone($compagnie);
				 $telephone->setCode_membre($code);
			     $m_telephone->save($telephone);			 
			    }
			}
			
			
			        $mem = new Application_Model_EuMembreMorale();
                    $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                    $findmem = $mem_mapper->find($code,$mem);
				    $mem->setEtat_membre('N');
				    $mem_mapper->update($mem);
					
					// eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

                //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);

            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
            for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }


            //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;

                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

            // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
               $fs_model->setOrigine_fs('N');
            
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);
						
						
						$sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

            $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

            
               $fl->setOrigine_fl('N');
            

                        $tfl->insert($fl->toArray());

            //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

            //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                        //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TSCNCSEI";
                        $tcartes[2]="TSGCI";
                        $tcartes[3]="TSIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TSPaR";
                        $tcartes[7]="TSFS";
                        $tcartes[8]="TSPN";
                        $tcartes[9]="TSIB";
                        $tcartes[10]="TSPaNu";
                        $tcartes[11]="TSIN";
                        $tcartes[12]="TSCAPA";
                        $tcartes[13]="TSMARGE";
                        //$tcartes[14]="TSRE";
            for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
						
						$sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
            
                        $carte->setOrigine_fkps('N');
            
                        $t_carte->insert($carte->toArray());

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
							
						

                            $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                $bon_neutre2->setBon_neutre_code_membre($code);
                $bon_neutre2M->update($bon_neutre2);
                }



                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant(Util_Utils::getParamEsmc(15));
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
				
				//Mise a jour de eu_postulat
                        $postulat2 = new Application_Model_EuPostulat();
                        $postulat2M = new Application_Model_EuPostulatMapper();
                        $postulat2M->find($postulat->id_postulat,$postulat2);

                        if(($postulat2->code_membre == "" || $postulat2->code_membre == NULL)) {
                           $postulat2->setCode_membre($code);
                           $postulat2M->update($postulat2);
                        }
				
				
				
				
                ///////////////////////////////////////////////////////////////////////////////////////						
							
				$convention = new Application_Model_DbTable_EuConvention();
        $select2 = $convention->select();
        $select2->where("code_activation = ?", $_POST['code_BAn']);
        $select2->orwhere("(code_membre IS NULL");
        $select2->where("code_membre = '')");
        $select2->limit(1);

        if($convention_rows = $convention->fetchRow($select2)){
        $convention2 = new Application_Model_DbTable_EuConvention();
        $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
        }



//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $souscription->souscription_montant = $recubancaire_mapper->findCumul($souscription->souscription_id);



    if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
        }else{
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
          }

    }else{

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
        }else{
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
          }

    }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea->setPartagea_code_activation($m_codeactivation->findConuter());
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            //$partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem->setPartagem_code_activation($m_codeactivation->findConuter());
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}






                            ///////////////////////////////////////////////////////////////////////////////////////

            $compteur = Util_Utils::findConuter() + 1;
            Util_Utils::addSms2($compteur,intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
            $db->commit();
            $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
            Code Membre (Login) : <strong>".$code."</strong><br />
            Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
            $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;
            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);			
							
							
						
						
						} else {
							$db->rollback();
                            $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte insuffisant';
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
						}	
						
						
					}	
						
					} catch(Exception $exc) {
					    $db->rollback();
				        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
				    }
			
			
		        }   else {
				    $sessionmembreasso->error = "Champs * obligatoire ...";
                    $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                    $this->view->code_statut = $request->getParam("code_statut");
                    $this->view->domaine_activite = $request->getParam("domaine_activite");
                    $this->view->site_web = $request->getParam("site_web");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    $this->view->email = $request->getParam("email_membre");
                    $this->view->id_pays = $request->getParam("id_pays");
                    $this->view->registre = $request->getParam("num_registre_membre");
			    }
		
	    }
	
	}
	
	
	
	
	public  function validerpostulatAction()   {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
        if($request->isPost())  {
		    $t_postulat = new Application_Model_DbTable_EuPostulat();
		    $code_postulat = $request->getParam("code_postulat");

            $postulat_mapper = new Application_Model_EuPostulatMapper();
            $postulat = $postulat_mapper->fetchAllByCode($code_postulat);
			
			if(count($postulat) > 0 ) {
			    if(($postulat->code_membre != "" || $postulat->code_membre != NULL) && strlen($postulat->code_membre) == 20) {
		            $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                    $select->setIntegrityCheck(false);
                    $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                    $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                    $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		            $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		            $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		            $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                    $select->where('eu_postulat.code_postulat like ?', trim($code_postulat));
				
                    $entries = $t_postulat->fetchAll($select);
                    $this->view->entries = $entries;
		            $this->view->code_postulat = $code_postulat;
				
			        } else {
				        $sessionmembreasso->errorlogin = "Le membre postulant ne dispose pas de compte marchand";
				        $this->view->code_postulat = $code_postulat;
			        }
		    } else  {
				$sessionmembreasso->errorlogin = "Ce code postulat est erroné";
				$this->view->code_postulat = $code_postulat;
			}
		}
		
	}
	
	
	
	
	public  function  souscrireintegrateurAction()   {
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	
	    $param = (int)$this->_request->getParam('id');
	    $this->view->id = $param;
	    $request = $this->getRequest();
		
		if($request->isPost())  {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1) {
					
				    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {	
					    
						$postulat   = new Application_Model_EuPostulat();			
		                $m_postulat = new Application_Model_EuPostulatMapper();
		                $m_postulat->find($param,$postulat);

                        $m_integrateur = new Application_Model_EuTypeIntegrateurMapper();
					    $integrateurs = $m_integrateur->fetchAll();
					
					    $membre = new Application_Model_EuMembre();
	                    $m_map  = new Application_Model_EuMembreMapper();
					    $membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                        $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					    $date_id = Zend_Date::now();
			  
			            $id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;
					
					    $bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

					    $membre_integrateur  = $request->getParam("integrateur_membre");
					    $code_membre_integrateur = '';
					    $type_candidat = "";
					
					    $integrateur_montant = $request->getParam("integrateur_montant");
					    $integrateur_nombre  = $request->getParam("integrateur_nombre");
					    $integrateur_type    = $request->getParam("integrateur_type");
					    $id_postulat    = $request->getParam("id_postulat");
					
					    $m_typeintegrateur->find($integrateur_type,$typeintegrateur);
						
						if($param !=  $id_postulat) {
					        $db->rollback();
					        $this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;
		                    $this->view->error = "L'identifiant du postulat est introuvable...Veuillez reprendre l'opération";
					        return;
					    }
						
						if($typeintegrateur->montant_param >  $integrateur_montant) {
					        $db->rollback();
					        $this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;
		                    $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;
					    }
						
						$type_candidat = $postulat->id_type_candidat;
						
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $findmembre = $m_map->find($membre_integrateur,$membre);
						    if($findmembre == false) {
						        $db->rollback();
							    $this->view->id = $param;
					            $this->view->postulat = $postulat;
                                $this->view->integrateurs = $integrateurs;
		                        $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					            return;
						    }
					    } else {
						    $findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
						    if($findmembre == false) {
						        $db->rollback();
							    $this->view->id = $param;
					            $this->view->postulat = $postulat;
                                $this->view->integrateurs = $integrateurs;
		                        $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					            return;
						    }
				        }
						
						$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
						if(count($bon_neutre) == 0) {
					        $db->rollback();
					        $this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;  
                            $this->view->error = "Votre Code BAn  incorrect ...";
                            return;
					    }
						
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
						    $bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						    $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
						    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						
						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
							
							if(($lignesdetbon == NULL) && ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) && ($cumulbon < $montant_souscription)) {
						        $db->rollback();
	                            $this->view->id = $param;
					            $this->view->postulat = $postulat;
                                $this->view->integrateurs = $integrateurs;
                                $this->view->error = "Montant restant du BAn est insuffisant ...";
                                return;
						    }
						
						    if(($code_membre_integrateur != NULL)  && ($membre_integrateur != $code_membre_integrateur)) {
						        $db->rollback();
	                            $this->view->id = $param;
					            $this->view->postulat = $postulat;
                                $this->view->integrateurs = $integrateurs;
                                $this->view->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                                return;
						    }
							
							$i = 0;
					        $reste = $montant_souscription;
					        $nbre_lignesdetbon = count($lignesdetbon);
						    while ($reste > 0 && $i < $nbre_lignesdetbon) {
                                $lignedetbon = $lignesdetbon[$i];
                                $id = $lignedetbon->getBon_neutre_detail_id();
						        $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								    if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();

                                       foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }

                                       }

									}
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);

						
						    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
							
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
                                } else {

                                    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                        }
                                    }
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);
						

						    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
							
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
						            $reste = 0;
                                }
                                $i++;
                            }
							
							$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						    $bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						    $bon_neutre2M->update($bon_neutre2);
						
						    /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
							
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							
							
							$m_depotvente = new Application_Model_EuDepotVenteMapper();
				            $depotvente = new Application_Model_EuDepotVente();
						    $finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
							
							
							$eusouscription = new Application_Model_DbTable_EuSouscription();
						    $select = $eusouscription->select();
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                            $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						    } else {
						        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						    }

						    $select->order(array("souscription_id ASC"));
	                        $select->limit(1);
	                        $rowseusouscription = $eusouscription->fetchRow($select);
		                    if(count($rowseusouscription) > 0) {
			                    $souscription_ok = 1;
			                    $souscription_first = $rowseusouscription->souscription_id;
			                } else {
			                    $souscription_ok = 0;
			                }
							
							
							$eusouscription = new Application_Model_DbTable_EuSouscription();
	                        $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
							
							if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL) {
						        $db->rollback();
					            $this->view->id = $param;
					            $this->view->postulat = $postulat;
                                $this->view->integrateurs = $integrateurs;
                                $this->view->error = "Login déjà existant ...";
						        return;
	                        }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL) {
						        $db->rollback();
					            $this->view->id = $param;
					            $this->view->postulat = $postulat;
                                $this->view->integrateurs = $integrateurs;
                                $this->view->error = "Mot de passe incorret ...";
						        return;
	                        }
							
							$date_id = Zend_Date::now();
						    $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();
							
							$compteur_souscription = $souscription_mapper->findConuter() + 1;
						    $souscription->setSouscription_id($compteur_souscription);
							
							if(substr($membre_integrateur,19,1) == 'P')  {
                                $souscription->setSouscription_nom($membre->nom_membre);
                                $souscription->setSouscription_prenom($membre->prenom_membre);
						        $souscription->setSouscription_mobile($membre->portable_membre);
						        $souscription->setSouscription_personne("PP");
						    } else {
						        $souscription->setSouscription_raison($membremoral->raison_sociale);
                                $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                                $souscription->setCode_statut($membremoral->code_statut);
						        $souscription->setSouscription_mobile($membremoral->portable_membre);
						        $souscription->setSouscription_personne("PM");
						    }
							
							$souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
							$souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                            $souscription->setSouscription_banque(NULL);

						    $souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                            $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                            $souscription->setSouscription_programme("CMFH");
                            $souscription->setSouscription_type_candidat($type_candidat);

                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $souscription->setSouscription_vignette(null);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));

						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $souscription->setSouscription_ville($membre->ville_membre);
                                $souscription->setSouscription_quartier($membre->quartier_membre);
						    } else {
                                $souscription->setSouscription_ville($membremoral->ville_membre);
                                $souscription->setSouscription_quartier($membremoral->quartier_membre);
                            }						

                            $souscription->setSouscription_email($postulat->email_postulat);
                            if($finddepot == NULL) {
                                $souscription->setSouscription_login($request->getParam("integrateur_login"));
                                $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						    } else {
                                $souscription->setSouscription_login(null);
                                $souscription->setSouscription_passe(null);
                            }

			                if($souscription_ok == 1)  {
                                $souscription->setSouscription_souscription($souscription_first);
				            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
					        }

							$id_canton = $postulat->id_canton;
							$id_prefecture = $postulat->id_prefecture;
							$id_region = $postulat->id_region;
							$id_pays = $postulat->id_pays;
							$code_zone = $postulat->code_zone;
							
						    $souscription->setSouscription_autonome(0);
			                $souscription->setPublier(0);
					        $souscription->setErreur(0);
					        $souscription->setId_canton($id_canton);
                            $souscription->setId_postulat($postulat->id_postulat);
                            $souscription_mapper->save($souscription);
							
							
							// //// Mise à jour postulat //////////////////////////////////////////
						    $postulat->setTraiter(1);
							$m_postulat->update($postulat);
						    //$postulat->setCode_membre($request->getParam("integrateur_membre"));
							
							
							///////////////////////////////////////////// validation acnev //////////////////////////////////
						    $souscription = new Application_Model_EuSouscription();
						    $souscriptionM = new Application_Model_EuSouscriptionMapper();
						    $souscriptionM->find($compteur_souscription, $souscription);

					        $souscription->setPublier(1);
						    $souscriptionM->update($souscription);

						    $validation_quittance = new Application_Model_EuValidationQuittance();
						    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						    $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $validation_quittance->setPublier(1);
						    $validation_quittance_mapper->save($validation_quittance);
						
						
						    ///////////////////////////////////////////// validation filiere //////////////////////////////////
						    $souscription = new Application_Model_EuSouscription();
						    $souscriptionM = new Application_Model_EuSouscriptionMapper();
						    $souscriptionM->find($compteur_souscription, $souscription);

						    $souscription->setPublier(2);
						    $souscriptionM->update($souscription);

						    $validation_quittance = new Application_Model_EuValidationQuittance();
						    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						    $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $validation_quittance->setPublier(1);
						    $validation_quittance_mapper->save($validation_quittance);

						    ///////////////////////////////////////////// validation technopole //////////////////////////////////

						    $souscription = new Application_Model_EuSouscription();
						    $souscriptionM = new Application_Model_EuSouscriptionMapper();
						    $souscriptionM->find($compteur_souscription, $souscription);

						    $souscription->setPublier(3);
						    $souscriptionM->update($souscription);


						    $validation_quittance = new Application_Model_EuValidationQuittance();
						    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						    $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $validation_quittance->setPublier(1);
						    $validation_quittance_mapper->save($validation_quittance);
						
						    $nombre_compte = $request->getParam("integrateur_nombre");
							if($nombre_compte >= 10)   {
						        include("Transfert.php");
		                        if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                            $chemin = "integrateurs";
		                            $file = $_FILES['integrateur_diplome']['name'];
		                            $file1='integrateur_diplome';
		                            $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                        } else { $integrateur_diplome = ""; }

						        if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                            $chemin = "integrateurs";
		                            $file = $_FILES['integrateur_document']['name'];
		                            $file1='integrateur_document';
		                            $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                        } else {$integrateur_document = "";}

						        $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                $a  = new Application_Model_EuIntegrateur();
                                $ma = new Application_Model_EuIntegrateurMapper();

                                $compteur = $ma->findConuter() + 1;
						        $a->setIntegrateur_id($compteur);
                                $a->setIntegrateur_type($request->getParam("integrateur_type"));
                                $a->setIntegrateur_souscription($compteur_souscription);

                                if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                    $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                    $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                    $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                                }

                                if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                    if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                        $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                    }
                                    if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                        $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                    }
								    $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                    $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                    $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                    $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                    $a->setIntegrateur_document($integrateur_document);
                                    $a->setIntegrateur_diplome($integrateur_diplome);
                                }

                                $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                                $a->setIntegrateur_membreasso(0);
                                $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			                    $a->setPublier(1);
								
								if(substr($membre_integrateur,19,1) == 'P')  {
                                    $a->setIntegrateurAdresse($membre->quartier_membre);
								} else {
									$a->setIntegrateurAdresse($membremoral->quartier_membre);
								}
                                $a->setIntegrateurCanton($id_canton);
                                $a->setIntegrateurVille(null);
						        $a->setCode_membre($request->getParam("integrateur_membre"));
                                $ma->save($a);


                                $integrateur  = new Application_Model_EuIntegrateur();
                                $integrateurM = new Application_Model_EuIntegrateurMapper();
                                $integrateurM->find($compteur,$integrateur);
							
							    $id_integrateur = $integrateur->integrateur_id;
						        $complement   = new Application_Model_EuComplementQuittance();
                                $m_complement = new Application_Model_EuComplementQuittanceMapper();

						        $cpte = $m_complement->findConuter() + 1;
						        $complement->setId_complement_quittance($cpte);
						        $complement->setIntegrateur_id($id_integrateur);
						        $complement->setSouscription_id($compteur_souscription);
						        $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						        $m_complement->save($complement);
							
							    $code_agence = '';
							
							    $date_id = Zend_Date::now();
                                $association = new Application_Model_EuAssociation();
                                $association_mapper = new Application_Model_EuAssociationMapper();

						        $login = "";
						        $password = "";

                                if($finddepot == NULL) {
							        $compteur_association = $association_mapper->findConuter() + 1;
                                    $association->setAssociation_id($compteur_association);
                                    $association->setAssociation_mobile($souscription->souscription_mobile);
								    if(substr($membre_integrateur,19,1) == 'P')  {
                                        $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								    } else {
                                        $association->setAssociation_nom($souscription->souscription_raison);
                                    }

                                    $association->setAssociation_numero($compteur_association."INT");
                                    $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                    $association->setAssociation_email($souscription->souscription_email);
                                    $association->setAssociation_recepisse(NULL);
                                    $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                    $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $association->setId_filiere(NULL);
                                    $association->setCode_type_acteur(NULL);
                                    $association->setCode_statut(NULL);
                                    $association->setCode_agence($code_agence);
                                    $association->setPublier(1);
                                    $association_mapper->save($association);
							    
								    $date_id = Zend_Date::now();

                                    $membreasso = new Application_Model_EuMembreasso();
                                    $membreasso_mapper = new Application_Model_EuMembreassoMapper();

							        if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								        $liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                        $login = "";
                                        while(strlen($login) != 8) {
                                            $login .= $liste[rand(0,61)];
                                        }
								        $password = $login.$login;
								    } else {
								        $login = $souscription->souscription_login;
								        $password = $souscription->souscription_passe;
								    }
								
								    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    $membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								    if(substr($membre_integrateur,19,1) == 'P')  {
                                        $membreasso->setMembreasso_nom($souscription->souscription_nom);
									    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								    } else {
                                        $membreasso->setMembreasso_nom($souscription->souscription_raison);
									    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                    }

                                    $membreasso->setMembreasso_association($compteur_association);
                                    $membreasso->setMembreasso_email($souscription->souscription_email);
                                    $membreasso->setMembreasso_login($login);
                                    $membreasso->setMembreasso_passe($password);
                                    $membreasso->setMembreasso_type(1);
                                    $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $membreasso->setPublier(1);
								    $membreasso->setSouscription_id($souscription->souscription_id);
							        $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                    $membreasso_mapper->save($membreasso);
									
								}
								
								
								// Transfert
						            $eusouscription = new Application_Model_EuSouscription();
		                            $souscriptionM = new Application_Model_EuSouscriptionMapper();

						            $date = new Zend_Date();
		                            $compte_map = new Application_Model_EuCompteMapper();
                                    $compte      = new Application_Model_EuCompte();
			                        $sms_money   = new Application_Model_EuSmsmoney();
                                    $money_map   = new Application_Model_EuSmsmoneyMapper();

			                        $det_sms   = new Application_Model_EuDetailSmsmoney();
			                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                        $det_vtesms  = new Application_Model_EuDetailVentesms();

						            // insertion dans la table eu_depot_vente
				                    $m_dvente = new Application_Model_EuDepotVenteMapper();
				                    $dvente = new Application_Model_EuDepotVente();

						            $membretierscode = new Application_Model_EuMembretierscode();
                                    $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

						            $fcaps = Util_Utils::getParametre('CAPS','valeur');

						            $membre_pbf = '0000000000000000001M';
	                                $code_compte_pbf = "NN-TR-".$membre_pbf;
			                        $ret = $compte_map->find($code_compte_pbf,$compte);

						            $souscriptionM->find($compteur_souscription,$eusouscription);
							
							        $mobile = $eusouscription->souscription_mobile;
						            $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
						            $nbre_compte = $eusouscription->souscription_nombre;
							        $montant = $nbre_compte * $fcaps;
							
							
							        $countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                    $dvente->setCode_membre($_POST['integrateur_membre']);
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($compteur_souscription);
				                    $m_dvente->save($dvente);
									
									
									 for($i = 0; $i < $nbre_compte; $i++) {
							            $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
							            $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
							            $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                        $membretierscode->setMembretierscode_membretiers(0);
                                        $membretierscode->setMembretierscode_code($membretierscode_code);
                                        $membretierscode->setMembretierscode_souscription($compteur_souscription);
                                        $membretierscode->setPublier(0);
                                        $membretierscode->setCode_membre(NULL);
							            $membretierscode->setAllocation_cmfh_id(NULL);
                                        $membretierscode_mapper->save($membretierscode);
						            }
							
							        // script de creation de TE de prestation
						            $eucompte = new Application_Model_EuCompte();
							        $m_compte = new Application_Model_EuCompteMapper();
									
                                    $te   = new Application_Model_EuTegc();
							        $m_te = new Application_Model_EuTegcMapper();
							
							        $prk = new Application_Model_EuPrk();
                                    $m_prk = new Application_Model_EuPrkMapper();
							
							        $code_te = "";
							        $nom_tegc = "";
									
						            $code_membre = $_POST['integrateur_membre'];
							        if(substr($code_membre,19,1)=='P') {
							            $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
							        } else {
							            $nom_tegc = $membremoral->raison_sociale;
							        }
							
							        $num_compte = 'NB-TPAGCP-'.$code_membre;
				                    $res = $m_compte->find($num_compte,$eucompte);
							
							        if(!$res) {
							            $eucompte->setCode_cat('TPAGCP')
                                                 ->setCode_compte($num_compte)
										         ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TPAGCP')
                                                 ->setSolde(0);
												 
								        if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
								        } else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
										
								        $code_te = $te_mapper->getLastTegcByMembre($code_membre);
								        if($code_te == NULL) {
			                                $code_te = 'TEGCP'.$code_membre. '00001';         
			                            } else {
			                                $num_ordre = substr($code_te, -5);
                                            $num_ordre++;
                                            $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                            }
										
								        $te->setCode_tegc($code_te);
			                            $te->setId_filiere(NULL);
			                            $te->setMdv(12);
			                            $te->setTranche_payement($tranche);
			                            $te->setCode_membre($code_membre);
			                            $te->setMontant(0);
			                            $te->setMontant_utilise(0);
			                            $te->setSolde_tegc(0);
			                            $te->setId_utilisateur(NULL);
			                            $te->setNom_tegc($nom_tegc);
			                            $te->setNom_produit("Prestation");
			                            $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					                    $te->setType_tegc("PRESTATAIRE");
								        $te->setRecurrent_illimite(0);
								        $te->setRecurrent_limite(0);
							            $te->setNonrecurrent(1);
								        $te->setPeriode1(0);
							            $te->setPeriode2(0);
								        $te->setPeriode3(0);
								        $te->setFormel(0);
								        $te->setRegime_tva(0);
								        $te->setSpecial(0);
								        $te->setOrdinaire(1);
								        $te->setSubvention(0);
										
								        $te->setCode_zone($code_zone);
				                        $te->setId_pays($id_pays);
				                        $te->setId_region($id_region);
				                        $te->setId_prefecture($id_prefecture);
				                        $te->setId_canton($id_canton);

                                        $m_te->save($te);
                                
								        $id_prk = $m_prk->findConuter() + 1;
					                    $prk->setId_prk($id_prk);
					                    $prk->setCode_tegc($code_te);
					                    $prk->setValeur(null);
					                    $m_prk->save($prk);

						            }
									
									
									$num_comptets = 'NB-TSGCP-'.$code_membre;
				                    $rests = $m_compte->find($num_comptets,$eucompte);
									
							        if(!$rests) {
							            $eucompte->setCode_cat('TSGCP')
                                                 ->setCode_compte($num_comptets)
									             ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TSGCP')
                                                 ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);		
                                    }
						            //fin script de creation TE
									
									//////////////////////////////////////////////////////////////////////

                                    $souscription = new Application_Model_EuSouscription();
                                    $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                    $souscriptionM->find($compteur_souscription,$souscription);
/*
									$partagea_montant = "";
                                    //////////////////////////////////////////
									if($sessionmembreasso->membreasso_id != 1) {
									    $membreasso = new Application_Model_EuMembreasso();
                                        $m_membreasso = new Application_Model_EuMembreassoMapper();
                                        $m_membreasso->find($sessionmembreasso->membreasso_id,$membreasso);
										
										
										$association = new Application_Model_EuAssociation();
                                        $m_association = new Application_Model_EuAssociationMapper();
                                        $m_association->find($membreasso->membreasso_association, $association);
                                        $code_agence = $association->code_agence;
										
										if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {

                                        if($souscription->souscription_programme == "KACM") {
                                            $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
                                        } else {
                                            $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
                                        }

                                        } else {
                                            if($souscription->souscription_programme == "KACM") {
                                                $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
                                            } else {
                                                $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
                                            }
                                        }
										
										
										//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////
                                								
							        }*/
									
									$db->commit();
						            if($finddepot == NULL) {
								        $sessionmembreasso->errorlogin = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
							        } else  {
								        $sessionmembreasso->errorlogin = "Opération bien effectuée ...";
						            }
							        $this->_redirect('/integrateur/validerpostulat');
							
							} else {
								
						        $db->rollback();
						        $this->view->id = $param;
					            $this->view->postulat = $postulat;
                                $this->view->integrateurs = $integrateurs;
						        $this->view->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 10 ...";
						        return;
								
							}
						
						
					    }
					
					
					} catch (Exception $exc) {
					    $db->rollback();
					    $this->view->id = $param;
					    $this->view->postulat = $postulat;
                        $this->view->integrateurs = $integrateurs;
				        $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        return;
			        }
					
				}
		
	    }   else {
			$id = $this->_request->getParam('id');
            $postulat   = new Application_Model_EuPostulat();			
		    $m_postulat = new Application_Model_EuPostulatMapper();
		    $m_postulat->find($id,$postulat);
	        $this->view->postulat = $postulat;
            $m_integrateur = new Application_Model_EuTypeIntegrateurMapper();
			$integrateurs = $m_integrateur->fetchAll();
		    $this->view->integrateurs = $integrateurs;
		}
	
	}



    public  function souscrireoffreurAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}	
		
	    $param = (int)$this->_request->getParam('id');
	    $this->view->id = $param;
        $postulat   = new Application_Model_EuPostulat();			
        $m_postulat = new Application_Model_EuPostulatMapper();
	    $m_postulat->find($param,$postulat);
        $offreurs = "";
	                        
        $m_offreur = new Application_Model_EuTypeOffreurProjetMapper();
		$offreurs = $m_offreur->fetchAll();
		
		$request = $this->getRequest();
        if($request->isPost())  {
		    if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			    && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			    && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			    && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)  {
					
					$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
			        try {
					    $id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;

						$membremorale = new Application_Model_EuMembreMorale();
	                    $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                        $compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();

			            $contrat = new Application_Model_EuContrat();
                        $map_contrat = new Application_Model_EuContratMapper();

						$m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

						$finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));

						$date_id = Zend_Date::now();

						$bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						
						$findmembre = $m_mapmorale->find($request->getParam("offreur_projet_membre"),$membremorale);
					    if($findmembre == false) {
					        $db->rollback();
	                        $this->view->id = $param;
					        $this->view->postulat = $postulat;
						    $this->view->offreurs = $offreurs;
					        $this->view->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					        return;
					    }
						$offreur_membre = $request->getParam("offreur_projet_membre");
						$offreur_code_membre = '';

						$souscription_nombre  = $request->getParam("souscription_nombre");
						$montant_souscription = $souscription_nombre * 2187.5;

                        $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
						if(count($bon_neutre) == 0) {
						  $db->rollback();
	                      $this->view->id = $param;
						  $this->view->postulat = $postulat;
						  $this->view->offreurs = $offreurs;
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					      $this->view->error = "Votre Code BAn  incorrect ...";
					      return;
						}
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
						
						    $bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;

					        $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);

						    if(($lignesdetbon == NULL) && ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) && ($cumulbon < $montant_souscription)) {
						       $db->rollback();
	                           $this->view->id = $param;
							   $this->view->postulat = $postulat;
						       $this->view->offreurs = $offreurs;
						       $this->view->code_membre = $request->getParam("offreur_projet_membre");
                               $this->view->error = "Montant restant du BAn est insuffisant ...";
                               return;
						    }
							
							if(($offreur_code_membre != NULL)  && ($offreur_membre != $offreur_code_membre)) {
						        $db->rollback();
	                            $this->view->id = $param;
							    $this->view->postulat = $postulat;
						        $this->view->offreurs = $offreurs;
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $this->view->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                                return;
						    }
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $montant_souscription;
					        $nbre_lignesdetbon = count($lignesdetbon);
                            while($reste > 0 && $i < $nbre_lignesdetbon) {
                                $lignedetbon = $lignesdetbon[$i];
                                $id = $lignedetbon->getBon_neutre_detail_id();
						        $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								    if($lignedetbon->getBon_neutre_appro_id() > 0) {
									  $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
                                      foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id, $bnad);
                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                       }
                                     }
								   }
								   //Mise à jour  des lignes d'enrégistrement
								   $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                       ->setBon_neutre_detail_montant_solde(0);
                                   $bon_neutre_detailM->update($lignedetbon);


						    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
                                 } else {
								    if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
									   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $reste;
									   foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);
                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
									   }
									}

                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);


						    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
                       $bon_neutre_utilise->setUsertable("membreasso");
                       $bon_neutre_utilise->setUser_id($sessionmembreasso->membreasso_id);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
						            $reste = 0;
                                 }
                                 $i++;
                            }
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						    $bon_neutre2->setBon_neutre_code_membre($offreur_membre);
						    $bon_neutre2M->update($bon_neutre2);

						    /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							
							
					        $eusouscription = new Application_Model_DbTable_EuSouscription();
						    $select = $eusouscription->select();

                            $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						    $select->order(array("souscription_id ASC"));
	                        $select->limit(1);
	                        $rowseusouscription = $eusouscription->fetchRow($select);
		                    if(count($rowseusouscription) > 0) {
			                    $souscription_ok = 1;
			                    $souscription_first = $rowseusouscription->souscription_id;
			                } else {
			                    $souscription_ok = 0;
			                }

                            $eusouscription = new Application_Model_DbTable_EuSouscription();
	                        $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));

                            if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						        $db->rollback();
					            $this->view->id = $param;
							    $this->view->postulat = $postulat;
						        $this->view->offreurs = $offreurs;
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
							    $this->view->error = "Login déjà existant ...";
							    return;
	                        }  else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL) {
						        $db->rollback();
					            $this->view->id = $param;
							    $this->view->postulat = $postulat;
						        $this->view->offreurs = $offreurs;
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $this->view->error = "Mot de passe incorret ...";
							    return;
	                        }
							
							$date_id = Zend_Date::now();
						    $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
						    $souscription->setSouscription_id($compteur_souscription);

						    $souscription->setSouscription_raison($membremorale->raison_sociale);
                            $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                            $souscription->setCode_statut($membremorale->code_statut);
						    $souscription->setSouscription_mobile($membremorale->portable_membre);

						    $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);

						    $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                            $souscription->setSouscription_banque(null);

						    $souscription->setSouscription_montant($montant_souscription);
                            $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                            $souscription->setSouscription_programme("CMFH");
                            $souscription->setSouscription_type_candidat($postulat->id_type_candidat);

						    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $souscription->setSouscription_vignette(null);

						    $souscription->setCode_activite(null);
                            $souscription->setId_metier(null);
                            $souscription->setId_competence(null);
						 
                            $souscription->setSouscription_ville($membremorale->ville_membre);

						    $souscription->setSouscription_quartier($membremorale->quartier_membre);

					        if($finddepot == NULL) {
                                $souscription->setSouscription_login($request->getParam("souscription_login"));
                                $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						    } else {
                                $souscription->setSouscription_login(null);
                                $souscription->setSouscription_passe(null);
                            }

						    if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
				            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
					        }

							$id_canton = $postulat->id_canton;
							$id_prefecture = $postulat->id_prefecture;
							$id_region = $postulat->id_region;
							$id_pays = $postulat->id_pays;
							$code_zone = $postulat->code_zone;
							
				            $souscription->setSouscription_autonome(0);
			                $souscription->setPublier(0);
					        $souscription->setErreur(0);
					        $souscription->setId_canton($id_canton);
                            $souscription->setId_postulat($postulat->id_postulat);
                            $souscription_mapper->save($souscription);
						
						    //Mise à jour postulat
						    $postulat->setTraiter(1);
						    $m_postulat->update($postulat);
							
							///////////////////////////////////////////// validation acnev //////////////////////////////////
				            $souscription = new Application_Model_EuSouscription();
				            $souscriptionM = new Application_Model_EuSouscriptionMapper();
				            $souscriptionM->find($compteur_souscription, $souscription);

					        $souscription->setPublier(1);
						    $souscriptionM->update($souscription);

						    $validation_quittance = new Application_Model_EuValidationQuittance();
						    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						    $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $validation_quittance->setPublier(1);
						    $validation_quittance_mapper->save($validation_quittance);


						    ///////////////////////////////////////////// validation filiere //////////////////////////////////
						    $souscription = new Application_Model_EuSouscription();
						    $souscriptionM = new Application_Model_EuSouscriptionMapper();
						    $souscriptionM->find($compteur_souscription, $souscription);

						    $souscription->setPublier(2);
						    $souscriptionM->update($souscription);

						    $validation_quittance = new Application_Model_EuValidationQuittance();
						    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						    $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $validation_quittance->setPublier(1);
						    $validation_quittance_mapper->save($validation_quittance);

						    ///////////////////////////////////////////// validation technopole //////////////////////////////////

						    $souscription = new Application_Model_EuSouscription();
						    $souscriptionM = new Application_Model_EuSouscriptionMapper();
						    $souscriptionM->find($compteur_souscription, $souscription);

						    $souscription->setPublier(3);
						    $souscriptionM->update($souscription);

						    $validation_quittance = new Application_Model_EuValidationQuittance();
						    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						    $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $validation_quittance->setPublier(1);
						    $validation_quittance_mapper->save($validation_quittance);
							 
							$nombre_compte = $request->getParam("souscription_nombre");
							if($nombre_compte >= 100)   {
						        $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                $a = new Application_Model_EuOffreurProjet();
                                $ma = new Application_Model_EuOffreurProjetMapper();

					            $compteur = $ma->findConuter() + 1;
					            $id_souscription = $compteur_souscription;

                                $a->setOffreur_projet_id($compteur);
                                $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                                $a->setOffreur_projet_souscription($id_souscription);
                                $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					            $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                                $a->setOffreur_projet_adresse($membremorale->quartier_membre);
                                $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
                                $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
					            if($_POST['offreur_projet_type'] >= 4) {
	                                $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                                }

					            $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                                $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                                $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                                $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                                $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                                $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                                $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                                $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);
                                $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                                $a->setOffreurProjetCanton($id_canton);
                                $a->setOffreurProjetVille(null);
			                    $a->setPublier(0);
                                $ma->save($a);


                                $id_offreur_projet = $offreur_projet->offreur_projet_id;
					            $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                                $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();

					            $cpte = $m_detailoffreur->findConuter() + 1;
					            $detailoffreur->setId_detail_offreur_projet($cpte);
					            $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					            $detailoffreur->setSouscription_id($id_souscription);
					            $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					            $m_detailoffreur->save($detailoffreur);

                                /////////////////////////////////////////////////////////////////////////////////////////
					            $code_agence = "";  

                                // Création du compte utilisateur intégrateur
                                $souscription = new Application_Model_EuSouscription();
                                $m_souscription = new Application_Model_EuSouscriptionMapper();
		                        $m_souscription->find($id_souscription,$souscription);

					            $date_id = Zend_Date::now();
                                $association = new Application_Model_EuAssociation();
                                $association_mapper = new Application_Model_EuAssociationMapper();

                                $login = "";
						        $password = "";	

                                 if($finddepot == NULL) {
                                $compteur_association = $association_mapper->findConuter() + 1;
                                $association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_raison);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);

							    $date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();

								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      $liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)];
                                  }
								    $password = $login.$login;
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }

										  $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                          $membreasso->setMembreasso_id($compteur_membreasso);
                                          $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                          $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                          $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                          $membreasso->setMembreasso_association($compteur_association);
                                          $membreasso->setMembreasso_email($souscription->souscription_email);
                                          $membreasso->setMembreasso_login($login);
                                          $membreasso->setMembreasso_passe($password);
                                          $membreasso->setMembreasso_type(1);
                                          $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                          $membreasso->setPublier(1);
								          $membreasso->setSouscription_id($souscription->souscription_id);
							              $membreasso->setIntegrateur_id(null);
                                          $membreasso_mapper->save($membreasso);
                                }
								
								$eusouscription = new Application_Model_EuSouscription();
		                        $souscriptionM = new Application_Model_EuSouscriptionMapper();

							    $date = new Zend_Date();
		                        $compte_map  = new Application_Model_EuCompteMapper();
                                $compte      = new Application_Model_EuCompte();
			                    $sms_money   = new Application_Model_EuSmsmoney();
                                $money_map   = new Application_Model_EuSmsmoneyMapper();

			                    $det_sms   = new Application_Model_EuDetailSmsmoney();
			                    $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                    $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                    $det_vtesms  = new Application_Model_EuDetailVentesms();

							    // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();

							    $membretierscode = new Application_Model_EuMembretierscode();
                                $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

							    $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                        $membre_pbf = '0000000000000000001M';
	                            $code_compte_pbf = "NN-TR-".$membre_pbf;
			                    $ret = $compte_map->find($code_compte_pbf,$compte);

							    $souscriptionM->find($id_souscription,$eusouscription);
						        $mobile = $eusouscription->souscription_mobile;
							    $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
							    $nbre_compte = $eusouscription->souscription_nombre;
							    $montant = $nbre_compte * $fcaps;
									   
							    $countdvente = $m_dvente->findConuter() + 1;
				                $dvente->setId_depot($countdvente)
					                   ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                $dvente->setCode_membre($_POST['offreur_projet_membre']);
			                    $dvente->setCode_produit('CAPS');
				                $dvente->setMont_depot($montant);
				                $dvente->setMont_vendu(0);
				                $dvente->setSolde_depot($montant);
				                $dvente->setId_utilisateur(null);
				                $dvente->setType_depot('AvecListe');
				                $dvente->setSouscription_id($id_souscription);
				                $m_dvente->save($dvente);

								for($i = 0; $i < $nbre_compte; $i++) {
								    $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
								    $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
									$membretierscode->setMembretierscode_id($compteur_membretierscode);
                                    $membretierscode->setMembretierscode_membretiers(0);
                                    $membretierscode->setMembretierscode_code($membretierscode_code);
                                    $membretierscode->setMembretierscode_souscription($id_souscription);
                                    $membretierscode->setPublier(0);
                                    $membretierscode->setCode_membre(NULL);
								    $membretierscode->setAllocation_cmfh_id(NULL);
                                    $membretierscode_mapper->save($membretierscode);
							    }
										   
								//script de creation de TE des vendeurs ou offreurs de projet
					            $prk = new Application_Model_EuPrk();
                                $m_prk = new Application_Model_EuPrkMapper();
							   	   
                                $te   = new Application_Model_EuTegc();
					            $m_te = new Application_Model_EuTegcMapper();
					            $code_te = "";
							   
					            $nom_tegc = $membremorale->raison_sociale;
						        $code = $_POST['offreur_projet_membre'];	   
						        $eutegc = new Application_Model_DbTable_EuTegc();
                                $select = $eutegc->select();
					            $select->where("code_membre like ? ", $code);
                                $rowseutegc = $eutegc->fetchAll($select);
							   
						        if(count($rowseutegc) <= 0)  {
							        $code_te = $m_te->getLastTegcByMembre($code);
						            if($code_te == NULL) {
			                            $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                        } else {
			                            $num_ordre = substr($code_te, -5);
                                        $num_ordre++;
                                        $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                        }
								  
						            $te->setCode_tegc($code_te);
			                        $te->setId_filiere($id_filiere);
			                        $te->setMdv(12);
			                        $te->setTranche_payement(1);
			                        $te->setCode_membre($code);
                                    $te->setCode_membre_physique(null);								  
			                        $te->setMontant(0);
			                        $te->setMontant_utilise(0);
			                        $te->setSolde_tegc(0);
			                        $te->setId_utilisateur(NULL);
			                        $te->setNom_tegc($nom_tegc);
			                        $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                        $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					                $te->setType_tegc("DISTRIBUTEUR");
						            $te->setRecurrent_illimite(0);
						            $te->setRecurrent_limite(0);
						            $te->setNonrecurrent(1);
						            $te->setPeriode1(0);
						            $te->setPeriode2(0);
							        $te->setPeriode3(0);
							        $te->setFormel(0);
						            $te->setRegime_tva(0);
						            $te->setSpecial(0);
						            $te->setOrdinaire(0);
							        $te->setSubvention(0);
										
							        $te->setCode_zone($code_zone);
				                    $te->setId_pays($id_pays);
				                    $te->setId_region($id_region);
				                    $te->setId_prefecture($id_prefecture);
				                    $te->setId_canton($id_canton);

                                    $m_te->save($te);

                                    $id_prk = $m_prk->findConuter() + 1;
					                $prk->setId_prk($id_prk);
					                $prk->setCode_tegc($code_te);
					                $prk->setValeur(null);
					                $m_prk->save($prk);
								   
					    }


                        $code_compte = 'NB-TPAGCP-'.$code;
				        $res = $map_compte->find($code_compte,$compte);
				
				        if(!$res) {
                            $compte->setCode_cat('TPAGCP')
                                   ->setCode_compte($code_compte)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TPAGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
				
				        $code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
							   
					    // Fin script de creation des TE vendeurs ou offreurs de projet 

                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

/*                        //////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1) {
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;




    if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
        }else{
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
          }

    }else{

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
        }else{
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
          }

    }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}*/





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////						
						
						
						
						
						    }  else {
							    $db->rollback();
	                            $this->view->id = $param;
								$this->view->offreurs = $offreurs;
							    $this->view->code_membre = $request->getParam("offreur_projet_membre");
							    $this->view->error = 'Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...';
						        return;
						    }
							
							if($finddepot == NULL) {
							   $db->commit();
                               $sessionmembreasso->errorlogin = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace intégrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
		                    } else {
							   $db->commit();
						       $sessionmembreasso->errorlogin = "Opération bien effectuée ...";
						    }
						    $this->_redirect('/integrateur/validerpostulat');
							
							
						
						}
					
					}  catch (Exception $exc) {
				        $db->rollback();
						$this->view->id = $param;
                        $this->view->postulat = $postulat;
				        $this->view->offreurs = $offreurs;				
                        $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        return;
                    }
					
				}  else {
					$this->view->error = "Veuillez renseigner les champs obligatoires (*)";
				}
		
		
        }  else {
		    $id = $this->_request->getParam('id');
            $postulat   = new Application_Model_EuPostulat();			
		    $m_postulat = new Application_Model_EuPostulatMapper();
		    $m_postulat->find($id,$postulat);
	        $this->view->postulat = $postulat;
   
            $m_offreur = new Application_Model_EuTypeOffreurProjetMapper();
		    $offreurs = $m_offreur->fetchAll();
		    $this->view->offreurs = $offreurs;
		}
    
	
	}
	
	   
    public  function listpostulantvalidesAction()  {
	    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

            $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
            $t_candidat = new Application_Model_DbTable_EuTypeCandidat();
		 
	    $zones = $t_zone->fetchAll();
            $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
            $candidats  = $t_candidat->fetchAll();

            $this->view->zones = $zones;
            $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
            $this->view->candidats = $candidats;
          
            $request = $this->getRequest();
            if($request->isPost())  {
            $type_candidat = $request->getParam("id_type_candidat");
            $code_zone = $request->getParam("code_zone");
            $id_pays = $request->getParam("id_pays");
            $id_region = $request->getParam("id_region");
            $id_prefecture = $request->getParam("id_prefecture");
            $id_canton = $request->getParam("id_canton");
			
	    $t_postulat = new Application_Model_DbTable_EuPostulat();
	    if(!empty($type_candidat) && empty($code_zone) && empty($id_pays) && empty($id_region) && empty($id_prefecture) && empty($id_canton))  {
		$select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		$select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		$select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		$select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
                $select->where('eu_postulat.traiter = ?', 1);
                $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		$this->view->id_type_candidat = $type_candidat;
				
            } elseif(!empty($type_candidat) && !empty($id_canton)) {
		$select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		$select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		$select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		$select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		$select->where('c.id_canton = ?', trim($id_canton));
                $select->where('eu_postulat.traiter = ?', 1);
		$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		
		$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		$this->view->id_type_candidat = $type_candidat;
				
	        } elseif(!empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
                        $select->where('eu_postulat.traiter = ?', 1);
			$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);	
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
						
	        }  elseif(!empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('r.id_region = ?', trim($id_region));
                        $select->where('eu_postulat.traiter = ?', 1);
			$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);	
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;	
				
	        } else if (!empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('p.id_pays = ?', trim($id_pays));
                        $select->where('eu_postulat.traiter = ?', 1);
			$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);	
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
				
	        } else if (!empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('z.code_zone = ?', trim($code_zone));
                        $select->where('eu_postulat.traiter = ?', 1);
                        $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
	        }  else if (empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('c.id_canton = ?', trim($id_canton));
                $select->where('eu_postulat.traiter = ?', 1);
                $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_canton = $id_canton;
				
	        } else if (empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                        $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
                        $select->where('eu_postulat.traiter = ?', 1);

		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_prefecture = $id_prefecture;
				
	        } else if (empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        $select->where('r.id_region = ?', trim($id_region));
                        $select->where('eu_postulat.traiter = ?', 1);
                        $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_region = $id_region;
		
	        } else if (empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                        $select->where('eu_postulat.traiter = ?', 1);
                        $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $select->where('p.id_pays = ?', trim($id_pays));
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_pays = $id_pays;
				
	        } else if (empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                        $select->where('eu_postulat.traiter = ?', 1);
                        $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $select->where('z.code_zone = ?', trim($code_zone));
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->code_zone = $code_zone;
			
	        }

            else {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.traiter = ?', 1);
                $select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
	        }
		
	}
		
    $this->view->tabletri = 1;			
		
    }
	
	public  function  listpostulantsAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}



            $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
        $t_candidat = new Application_Model_DbTable_EuTypeCandidat();
		 
	    $zones = $t_zone->fetchAll();
        $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
        $candidats  = $t_candidat->fetchAll();

        $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
        $this->view->candidats = $candidats;
          
        $request = $this->getRequest();
		if($request->isPost())  {
			$type_candidat = $request->getParam("id_type_candidat");
            $code_zone = $request->getParam("code_zone");
            $id_pays = $request->getParam("id_pays");
            $id_region = $request->getParam("id_region");
            $id_prefecture = $request->getParam("id_prefecture");
            $id_canton = $request->getParam("id_canton");
			
			$t_postulat = new Application_Model_DbTable_EuPostulat();
	        if(!empty($type_candidat) && empty($code_zone) && empty($id_pays) && empty($id_region) && empty($id_prefecture) && empty($id_canton))  {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
				
                
				$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->id_type_candidat = $type_candidat;
				
            } elseif(!empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('c.id_canton = ?', trim($id_canton));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
	        } elseif(!empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
						
	        }  elseif(!empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('r.id_region = ?', trim($id_region));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;	
				
	        } else if (!empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('p.id_pays = ?', trim($id_pays));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
	        } else if (!empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('z.code_zone = ?', trim($code_zone));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
	        }  else if (empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('c.id_canton = ?', trim($id_canton));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_canton = $id_canton;
				
	        } else if (empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_prefecture = $id_prefecture;
				
	        } else if (empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        $select->where('r.id_region = ?', trim($id_region));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_region = $id_region;
		
	        } else if (empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('p.id_pays = ?', trim($id_pays));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_pays = $id_pays;
				
	        } else if (empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('z.code_zone = ?', trim($code_zone));
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->code_zone = $code_zone;
	        }
            else {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
				$select->where('eu_postulat.utilisateur = ?', $sessionmembreasso->membreasso_id);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
	        }
		
	    }
        $this->view->tabletri = 1;
		
		
		
		
	}
	
	
	
	
	
	
	
	
	public  function inscriptioncapsAction()   {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	  
	    $t_canton = new Application_Model_DbTable_EuCanton();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
	  
	    $cantons = $t_canton->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
	   
	    $request = $this->getRequest();
	    if($request->isPost()) {
		if(isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
		    && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
		    && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
		    && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
		    && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
		    && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
		    && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
		    && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
		    && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
		    && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
		    && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
		    && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
		    && isset($_POST['id_pays']) && $_POST['id_pays']!="") {
			    
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
			    $membre  = new Application_Model_EuMembre();
	            $m_map   = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
			    $mstiersliste = new Application_Model_EuMstiersListecm();
		        $m_mstiersliste = new Application_Model_EuMstiersListecmMapper();
                $mstierslistecm_mapper = new Application_Model_EuMstiersListecmMapper();
			    $mstiers   = new Application_Model_EuMstiers();
		        $m_mstiers = new Application_Model_EuMstiersMapper();

                $dvente   = new Application_Model_EuDepotVente();
                $m_dvente = new Application_Model_EuDepotVenteMapper();

                $code_agence = "";
                //$code_agence = $request->getParam("code_agence");

                $association = new Application_Model_EuAssociation();
                $association_mapper = new Application_Model_EuAssociationMapper();
					
			    $membreasso = new Application_Model_EuMembreasso();
                $membreasso_mapper = new Application_Model_EuMembreassoMapper();
					
			    $membreasso_mapper->find($sessionmembreasso->membreasso_id,$membreasso);
			    $association_mapper->find($membreasso->membreasso_association,$association);
			
			    if(($membreasso->membreasso_association == 1)) {
				    $code_agence = "001001001001";
			    } else  {
                    $code_agence = $association->code_agence;
			    }
                       
                $code_membre_apporteur = NULL;
                $reste_caps = 0;
                $montant_caps = 0;
		        $code_zone = $request->getParam("code_zone");
                $type_inscription = $request->getParam("type_inscription");
			    $date_nais = new Zend_Date($request->getParam("date_nais_membre"));


                if($type_inscription == "AvecListe") {
			        $code_membre_apporteur = $request->getParam("code_membre_apporteur");
                                if(substr($code_membre_apporteur,19,1) == 'P')  {
					    $findmembre = $m_map->find($code_membre_apporteur,$membre);
					    if($findmembre == false) {
						   $db->rollback();
					       $this->view->nom_membre = $request->getParam("nom_membre");
                           $this->view->prenom_membre = $request->getParam("prenom_membre");
                           $this->view->sexe = $request->getParam("sexe_membre");
                           $this->view->sitfam = $request->getParam("sitfam_membre");
                           $this->view->datnais = $request->getParam("date_nais_membre");
                           $this->view->nation = $request->getParam("nationalite_membre");
                           $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                           $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                           $this->view->formation = $request->getParam("formation");
                           $this->view->profession = $request->getParam("profession_membre");
                           $this->view->religion = $request->getParam("religion_membre");
                           $this->view->pere = $request->getParam("pere_membre");
                           $this->view->mere = $request->getParam("mere_membre");
                           $this->view->quartier_membre = $request->getParam("quartier_membre");
                           $this->view->ville_membre = $request->getParam("ville_membre");
                           $this->view->bp = $request->getParam("bp_membre");
                           $this->view->email = $request->getParam("email_membre");
		                   $this->view->message = "Le numéro membre apporteur saisi  ".$code_membre_apporteur."  est introuvable ...";
					       return;
					    }
					} else {
						$findmembre = $m_mapmoral->find($code_membre_apporteur,$membremoral);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
		                    $this->view->message = "Le numéro membre apporteur saisi  ".$code_membre_apporteur."  est introuvable ...";
					        return;
						}
						
					}
                                
			        $reste_caps = $m_dvente->CumulResteCMFH($code_membre_apporteur);
			        $countcaps = $mstierslistecm_mapper->findcountbenef($code_membre_apporteur) + 1;
			        $montant_caps = $countcaps * 70000 ;
					
			        if($reste_caps < $montant_caps) {
				        $this->view->message = "Le souscripteur ne dispose pas de comptes marchands pour tiers  !!!";
                        $db->rollback();
                        $this->view->nom_membre = $request->getParam("nom_membre");
                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
				    }
					
			    }
					
			    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                $codesecret = "";
                while(strlen($codesecret) != 8) {
                    $codesecret .= $liste[rand(0,strlen($liste)-1)]; 
                }
					
			    ///////////////// controle nom prenom dans mstiers_listecm ////////////////////////////
			    $prenom_membre = $request->getParam("prenom_membre");
			    //$pos1 = stripos($prenom_membre, "'");
			    $prenom_membre = str_replace("'", " ", $prenom_membre);
				$tabprenom = explode(" ",$prenom_membre);
					
			    $nom_membre = $request->getParam("nom_membre");
			    //$pos2 = stripos($nom_membre, "'");
			    $nom_membre = str_replace("'", " ", $nom_membre);
					
				$euliste = new Application_Model_DbTable_EuMstiersListecm();
				$selection = $euliste->select();
				$selection->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));
					
                foreach($tabprenom as $value) {
	                $selection->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				}
					
				$selection->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	            $selection->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	            $selection->limit(1);
	            $rowseuliste = $euliste->fetchRow($selection);
			
			        
			
                if($code_agence == "" or  $code_agence == NULL) {
			        $this->view->message = "Votre guichet n'est lié à aucune agence !!!";
                    $db->rollback();
                    $this->view->nom_membre = $request->getParam("nom_membre");
                    $this->view->prenom_membre = $request->getParam("prenom_membre");
                    $this->view->sexe = $request->getParam("sexe_membre");
                    $this->view->sitfam = $request->getParam("sitfam_membre");
                    $this->view->datnais = $request->getParam("date_nais_membre");
                    $this->view->nation = $request->getParam("nationalite_membre");
                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                    $this->view->formation = $request->getParam("formation");
                    $this->view->profession = $request->getParam("profession_membre");
                    $this->view->religion = $request->getParam("religion_membre");
                    $this->view->pere = $request->getParam("pere_membre");
                    $this->view->mere = $request->getParam("mere_membre");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    $this->view->email = $request->getParam("email_membre");
                    return;
			    }
					
			    if(($membreasso->membreasso_association != 1) && ($association->guichet != 1))  {
						$this->view->message = "Vous n'etes pas autorisés à effectuer cette opération !!!";
                        $db->rollback();
                        $this->view->nom_membre = $request->getParam("nom_membre");
                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
			    }
					
					
		
			    if(count($rowseuliste) > 0) {
					   $this->view->message = "Vous êtes déjà inscrit !!!";
                       $db->rollback();
                       $this->view->nom_membre = $request->getParam("nom_membre");
                       $this->view->prenom_membre = $request->getParam("prenom_membre");
                       $this->view->sexe = $request->getParam("sexe_membre");
                       $this->view->sitfam = $request->getParam("sitfam_membre");
                       $this->view->datnais = $request->getParam("date_nais_membre");
                       $this->view->nation = $request->getParam("nationalite_membre");
                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                       $this->view->formation = $request->getParam("formation");
                       $this->view->profession = $request->getParam("profession_membre");
                       $this->view->religion = $request->getParam("religion_membre");
                       $this->view->pere = $request->getParam("pere_membre");
                       $this->view->mere = $request->getParam("mere_membre");
                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                       $this->view->ville_membre = $request->getParam("ville_membre");
                       $this->view->bp = $request->getParam("bp_membre");
                       $this->view->email = $request->getParam("email_membre");
                       return;
			    }
					
					
					///////////////// controle nom prenom dans membre ////////////////////////////////////
					$eupreinscription = new Application_Model_DbTable_EuMembre();
					$select = $eupreinscription->select();
					$select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

				    foreach($tabprenom as $value) {
	                  $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				    }

	                $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                $select->limit(1);
	                $rowseupreinscription = $eupreinscription->fetchRow($select);
					
					if(count($rowseupreinscription) > 0) {
					  $this->view->error = "Vous êtes déjà membre !!!";
                      $db->rollback();
                      $this->view->nom_membre = $request->getParam("nom_membre");
                      $this->view->prenom_membre = $request->getParam("prenom_membre");
                      $this->view->sexe = $request->getParam("sexe_membre");
                      $this->view->sitfam = $request->getParam("sitfam_membre");
                      $this->view->datnais = $request->getParam("date_nais_membre");
                      $this->view->nation = $request->getParam("nationalite_membre");
                      $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                      $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                      $this->view->formation = $request->getParam("formation");
                      $this->view->profession = $request->getParam("profession_membre");
                      $this->view->religion = $request->getParam("religion_membre");
                      $this->view->pere = $request->getParam("pere_membre");
                      $this->view->mere = $request->getParam("mere_membre");
                      $this->view->quartier_membre = $request->getParam("quartier_membre");
                      $this->view->ville_membre = $request->getParam("ville_membre");
                      $this->view->bp = $request->getParam("bp_membre");
                      $this->view->email = $request->getParam("email_membre");
                      return;
			        }
					
					//insertion dans la table eu_mstiers_listecm
                    $mstierslistecm_mapper = new Application_Model_EuMstiersListecmMapper();
                    //$compteur_mstiers = $mstierslistecm_mapper->findConuter() + 1;
					
					//$mstiersliste->setId_mstiers_listecm($compteur_mstiers)
					$mstiersliste->setCode_membre_apporteur($code_membre_apporteur)
						         ->setCode_membre_beneficiaire(NULL)
								 ->setNom_membre($nom_membre)
								 ->setPrenom_membre($prenom_membre)
								 ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
								 ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
						         ->setPere_membre($request->getParam("pere_membre"))
                                 ->setMere_membre($request->getParam("mere_membre"))
								 ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
								 ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
								 ->setBp_membre($request->getParam("bp_membre"))
								 ->setCodesecret($codesecret)
								 ->setEmail_membre($request->getParam("email_membre"))
								 ->setFormation($request->getParam("formation"))
                                 ->setProfession_membre($request->getParam("profession_membre"))
								 ->setQuartier_membre($request->getParam("quartier_membre"))
								 ->setSexe_membre($request->getParam("sexe_membre"))
								 ->setSitfam_membre($request->getParam("sitfam_membre"))
								 ->setVille_membre($request->getParam("ville_membre"))
								 ->setCode_zone($request->getParam("code_zone"))
								 ->setId_pays($request->getParam("nationalite_membre"))
								 ->setId_canton($request->getParam("id_canton"))
								 ->setId_religion_membre($request->getParam("religion_membre"))
								 ->setCode_agence($code_agence)
								 ->setDate_listecm($date_id->toString('yyyy-MM-dd HH:mm:ss'))
								 ->setCode_caps(null)
								 ->setUtilisateur($sessionmembreasso->membreasso_id)
								 ->setStatut(0)
                                 ->setDoublon(0)
								 ->setType_liste($type_inscription);
					$m_mstiersliste->save($mstiersliste);
					$compteur_mstiers = $db->lastInsertId();
					
					
					//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
						
						$compagnie = telephonecompagnie($_POST['code_telephonique'],$_POST['numero_telephone']);
                        $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
					
					    if($compagnie == 1)  {
                            $this->view->message = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            return;
							 
                        } else {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
				            $telephone = new Application_Model_EuTelephone();
				            $m_telephone = new Application_Model_EuTelephoneMapper();
							 
					        //$compteur = $m_telephone->findConuter() + 1;
					        //$telephone->setId_telephone($compteur);
					        $telephone->setNumero_telephone($numero_telephone);
					        $telephone->setCompagnie_telephone($compagnie);
					        $telephone->setCode_membre(null);
							$telephone->setId_mstiers_listecm($compteur_mstiers);
					        $m_telephone->save($telephone); 
						}
					//}
					
					$db->commit();
                    $sessionmembreasso->errorlogin = "Operation d'enrolement reussie pour ce membre";										
					$this->_redirect('/integrateur/inscriptioncaps');
			
			    } catch (Exception $exc) {
			        $db->rollback();
		            $error = "Erreur d'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->message = $error;
			        $this->view->nom_membre = $request->getParam("nom_membre");
                    $this->view->prenom_membre = $request->getParam("prenom_membre");
                    $this->view->sexe = $request->getParam("sexe_membre");
                    $this->view->sitfam = $request->getParam("sitfam_membre");
                    $this->view->datnais = $request->getParam("date_nais_membre");
                    $this->view->nation = $request->getParam("nationalite_membre");
                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                    $this->view->formation = $request->getParam("formation");
                    $this->view->profession = $request->getParam("profession_membre");
                    $this->view->religion = $request->getParam("religion_membre");
                    $this->view->pere = $request->getParam("pere_membre");
                    $this->view->mere = $request->getParam("mere_membre");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
			        $this->view->email = $request->getParam("email_membre");
		            return;
	            }
			
		    }  else {
			    $this->view->message = "Champs * obligatoire ...";
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->email = $request->getParam("email_membre");
			}
		
		}
	}


    public  function listinscriptionbcAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
	    if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$tabela = new Application_Model_DbTable_EuMstiersListebc();
		$select = $tabela->select();
		$select->where("utilisateur = ?", $sessionmembreasso->membreasso_id);
		$select->order('id_mstiers_listebc desc');   
		$entries = $tabela->fetchAll($select);   
		$this->view->entries = $entries;
		$this->view->tabletri = 1;
	}
	
	
	
	public  function listinscriptioncapsAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	        //$this->_helper->layout->disableLayout();
 	        $this->_helper->layout()->setLayout('layoutpublicesmcint');
	        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$tabela = new Application_Model_DbTable_EuMstiersListecm();
		$select = $tabela->select();
		$select->where("utilisateur = ?", $sessionmembreasso->membreasso_id);
		$select->order('id_mstiers_listecm desc');   
		$entries = $tabela->fetchAll($select);   
		$this->view->entries = $entries;
		$this->view->tabletri = 1;
	}


        
	public  function listinscriptioncapsdispoAction() {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	        //$this->_helper->layout->disableLayout();
 	        $this->_helper->layout()->setLayout('layoutpublicesmcint');
	        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$tabela = new Application_Model_DbTable_EuMstiersListecm();
		$select = $tabela->select();
		$select->where("utilisateur = ?", $sessionmembreasso->membreasso_id);
                $select->where("statut = ?", 1);
		$select->order('id_mstiers_listecm desc');   
		$entries = $tabela->fetchAll($select);   
		$this->view->entries = $entries;
		$this->view->tabletri = 1;
	}
	
	
	
	
	
    public function enrolementpmsms2intAction() {
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                $date_id = Zend_Date::now();

    $request = $this->getRequest ();
    if ($request->isPost ()) {
       if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
      && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
      //&& isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
      && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
      && isset($_POST['code_statut']) && $_POST['code_statut']!=""
      && isset($_POST['code_rep']) && $_POST['code_rep']!=""
      && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
      && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
      //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
      && isset($_POST['email_membre']) && $_POST['email_membre']!=""
      && isset($_POST['id_pays']) && $_POST['id_pays']!=""
      && isset($_POST['code_agence']) && $_POST['code_agence']!=""
        && isset($_POST['code_activite']) && $_POST['code_activite']!=""
        && isset($_POST['id_canton']) && $_POST['id_canton']!=""
        ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
            try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

          $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
          if(count($bon_neutre) == 0){
                            $sessionmembreasso->error = "Code BAn incorrect ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
          }

if($bon_neutre->bon_neutre_raison != ""){
                        /////////////////controle nom prenom
              $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                      $select = $eupreinscription->select();
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));

            /*$tabraison = explode("", $bon_neutre->bon_neutre_raison);
            foreach ($tabraison as $value) {
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
            }*/

                      $select->limit(1);
                      $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
                            $sessionmembreasso->error = $bon_neutre->bon_neutre_raison." est déjà membre ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
                  }
}else{
                            $sessionmembreasso->error = $bon_neutre->bon_neutre_raison."Erreur sur la raison sociale ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
}

            /////////////////controle email
            if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmembreasso->error = "E-mail non valable ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
            }

                        /////////////////controle nom prenom
              $eusouscription = new Application_Model_DbTable_EuSouscription();
                      $select = $eusouscription->select();
                      $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                      $select->order(array("souscription_id ASC"));
                      $select->limit(1);
                      $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                    $souscription_ok = 1;
                    $souscription_first = $rowseusouscription->souscription_id;
                  } else {
                    $souscription_ok = 0;
                  }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)){
                                //count($membre) == 0;
                            $sessionmembreasso->error = "Le Code Membre est erroné ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
                            }
                        }




          if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
            if($bon_neutre->bon_neutre_montant_solde < 70000) {
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
              }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
							
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                            $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(70000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                        if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
                        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
                        }
                        $souscription->setSouscription_ordre(NULL);
                        $souscription->setSouscription_autonome(1);
                        $souscription->setPublier(0);
                        $souscription->setErreur(0);
                        $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
							
					    $compteur_souscription = $db->lastInsertId();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 70000);
                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 70000);
                $bon_neutre2M->update($bon_neutre2);

              ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          $mont = 70000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
          if($bon_neutre_detail_somme < $mont){
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
            }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
          foreach ($bon_neutre_detail as $detail){
                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

            
            if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2M->update($bon_neutre_detail2);



                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                }else{


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $mont;
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                $bon_neutre_detail2M->update($bon_neutre_detail2);


                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                break;
                }

            }
              }

//////validation acnev
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(1);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(2);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                $souscription = new Application_Model_EuSouscription();
                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                $souscriptionM->find($compteur_souscription, $souscription);

                $souscription->setPublier(3);
                $souscriptionM->update($souscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $souscription->souscription_montant = $recubancaire_mapper->findCumul($souscription->souscription_id);



    if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
        }else{
      $partagea_montant = floor(($souscription->souscription_montant / 100 * 5));
          }

    }else{

      if($souscription->souscription_programme == "KACM"){
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
        }else{
      $partagea_montant = floor($souscription->souscription_montant / 100 * 5);
          }

    }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}
*/




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        // operation de transfert
                    $souscription = new Application_Model_EuSouscription();
                                    $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                    $date = new Zend_Date();
                                    $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                  $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                  $det_sms   = new Application_Model_EuDetailSmsmoney();
                                  $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                  $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                  $det_vtesms  = new Application_Model_EuDetailVentesms();

                                  $mobile = $souscription->souscription_mobile;
                                  //$nbre_compte = $souscription->souscription_nombre;
                                  $fcaps = Util_Utils::getParametre('CAPS','valeur');

                    $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                    //$montant = $nbre_compte * $fcaps;
                                    $membre_pbf = '0000000000000000001M';
                                      $code_compte_pbf = "NN-TR-".$membre_pbf;
                                  $ret = $compte_map->find($code_compte_pbf,$compte);

                                   $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						                $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						                $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						                $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                    $souscription2 = new Application_Model_EuSouscription();
                                    $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                     $souscription2->setSouscription_autonome(1);
                     $souscription2->setSouscription_programme('KACM');
                     $souscription2M->update($souscription2);


                          if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                  // Mise à jour du compte de transfert
                                                $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                  } else {
                                                  $db->rollback();
                                                  $sessionmembreasso->error = 'Le compte est introuvable ou le solde du compte insuffisant';
                            //$db->rollback();
                            //$this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);
                            return;
                                                  
                                              }

                          $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                          // Traitement des produits FS
                                            // insertion dans la table eu_smsmoney
                                            $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                            // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                            $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                            // Traitement des produits FCPS
                                            $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                          if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                //$nengfs = $money_map->findConuter() + 1;
                                //$sms_money->setNEng($nengfs)
                                $sms_money->setCode_Agence(null)
                                          ->setCreditAmount($mont_fs)
                                          ->setSentTo($mobile)
                                          ->setMotif('FS')
                                          ->setId_Utilisateur(null)
                                          ->setCurrencyCode('XOF')
                                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                          ->setFromAccount($code_compte_pbf)
                                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                          ->setCreditCode($codefs)
                                          ->setDestAccount(null)
                                          ->setIDDatetimeConsumed(0)
                                          ->setDestAccount_Consumed(null)
                                          ->setDatetimeConsumed(null)
                                          ->setNum_recu(null);
                                $money_map->save($sms_money);
                                $nengfs = $db->lastInsertId();								

                                $i = 0;
                                $reste = $mont_fs;
                                $nbre_lignesdetfs = count($lignesdetfs);
                                while($reste > 0 && $i < $nbre_lignesdetfs) {
                                    $lignedetfs = $lignesdetfs[$i];
                                    $id = $lignedetfs->getId_detail_smsmoney();
                                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                    if($reste >= $lignedetfs->getSolde_sms()) {
                                        //Mise à jour  des lignes d'enrégistrement
                                        //insertion dans la table eu_detailventesms
                                        //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                        //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
										
                                        $det_vtesms->setId_detail_smsmoney($id)
                                                   ->setCode_membre_dist($membre_pbf)
                                                   ->setCode_membre(null)
                                                   ->setType_tansfert('FS')
                                                   ->setCreditcode($codefs)
                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                  ->setMont_vente($lignedetfs->getSolde_sms())
                                                  ->setId_utilisateur(null)
                                                  ->setCode_produit('FS');
                                        $det_vte_sms->insert($det_vtesms->toArray());
																
                                        $reste = $reste - $lignedetfs->getSolde_sms();
                                        $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                   ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                   ->setSolde_sms(0);
                                        $det_sms_m->update($lignedetfs);
                                    } else  {
                                                  //Mise à jour  des lignes d'enrégistrement
                                  //insertion dans la table eu_detailventesms
                                                    //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
													
                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                            $det_vte_sms->insert($det_vtesms->toArray());
																
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                  $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                    $reste = 0;
                                                }
                                                $i++;
                                              }

                            $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                //$nengfl = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfl)
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                          $j = 0;
                                          $reste = $mont_fl;
                                          $nbre_lignesdetfl = count($lignesdetfl);
                                          while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                              $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                            if ($reste >= $lignedetfl->getSolde_sms()) {
                                                //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                              //insertion dans la table eu_detailventesms
                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                   ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                   ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                            } else  {
                                              //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
												
                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                $det_sms_m->update($lignedetfl);
                                                $reste = 0;
                                            }
                                            $j++;
                                          }

                          $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                            //$nengfkps = $money_map->findConuter() + 1;
                                            //$sms_money->setNEng($nengfkps)
                                                    $sms_money->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                          $k = 0;
                                          $reste = $mont_kps;
                                          $nbre_lignesdetfkps = count($lignesdetfkps);
                                          while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                              $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                            if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                    //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                              $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                     ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                     ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                            } else  {
                                              //Mise à jour  des lignes d'enrégistrement
                              //insertion dans la table eu_detailventesms
                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                    //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
													
                                                    $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                              $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                $reste = 0;
                                            }
                                            $k++;
                                          }

                                          // insertion dans la table eu_code_activation
                                            $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                            $codeactivation = new Application_Model_EuCodeActivation();
                                              //$countcode = $m_codeactivation->findConuter() + 1;

                                            //$codeactivation->setId_code_activation($countcode)
                                            $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                            $codeactivation->setCode_membre(NULL);
                                            $codeactivation->setCode_fs($codefs);
                                            $codeactivation->setCode_fl($codefl);
                                            $codeactivation->setCode_fkps($codefkps);
                                            $codeactivation->setOrigine_code("ESMC");
                                            $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
											$codeactivation->setMontant_souscrit(70000);
                                            $codeactivation->setSouscription_id($compteur_souscription);
                                            $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                $code_fs = $codefs;
                $code_fl = $codefl;
                $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

				$place = new Application_Model_EuOperation();
                $mapper_op = new Application_Model_EuOperationMapper();
				
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                if($code_fs !="") {
                    $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                    $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
//$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        //$preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                        $preinscriptionmorale->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($bon_neutre->bon_neutre_raison)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(null)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"));
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/
						
						$compteur_preinscriptionmorale = $db->lastInsertId();

                //////validation acnev
                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                $preinscriptionmorale->setPublier(2);
                $preinscriptionmoraleM->update($preinscriptionmorale);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                $preinscriptionmorale->setPublier(3);
                $preinscriptionmoraleM->update($preinscriptionmorale);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                ////////////////////////////////////////////

                    $compteur = $mapper_op->findConuter() + 1;
					
                    $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($bon_neutre->bon_neutre_raison);
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(null);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
						$membre->setDesactiver(2);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




              /////////////
            $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
            $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
            $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

            $preinscriptionmorale->setCode_membre_morale($code);
            $preinscriptionmoraleM->update($preinscriptionmorale);


        //for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
            $compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
            $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
         
            if($compagnie == 1)  {
                 $this->view->message = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!";
                 $db->rollback();
                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                 $this->view->code_statut = $request->getParam("code_statut");
                 //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                 $this->view->site_web = $request->getParam("site_web");
                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                 $this->view->ville_membre = $request->getParam("ville_membre");
                 $this->view->bp = $request->getParam("bp_membre");
                 //$this->view->tel = $request->getParam("tel_membre");
                 $this->view->email = $request->getParam("email_membre");
                 $this->view->id_pays = $request->getParam("id_pays");
                 //$this->view->portable = $request->getParam("portable_membre");
                 $this->view->registre = $request->getParam("num_registre_membre");
                 return;     
            } else {
         //$date_id = new Zend_Date(Zend_Date::ISO_8601);
         $telephone = new Application_Model_EuTelephone();
         $m_telephone = new Application_Model_EuTelephoneMapper();
               
           $compteurt = $m_telephone->findConuter() + 1;
           //$telephone->setId_telephone($compteurt);
         $telephone->setNumero_telephone($numero_telephone);
           $telephone->setCompagnie_telephone($compagnie);
         $telephone->setCode_membre($code);
           $m_telephone->save($telephone);       
          }
        //}
      

            // insertion dans la table eu_code_activation
                $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                $codeactivation = new Application_Model_EuCodeActivation();

                $m_dvente = new Application_Model_EuDepotVenteMapper();
                $dvente = new Application_Model_EuDepotVente();

                $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                if($findcode != NULL)  {
                      $findcode = $findcode[0];
                      $id_souscription = $findcode->souscription_id;
                      $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                      $ancien_code = $souscription->souscription_ancien_membre;
                      //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                      //$id_depot = $findsousdv->id_depot;
                      //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                      $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                      $codeactivation->setCode_membre($code);
                      $m_codeactivation->update($codeactivation);
                      //$dvente->setCode_membre($code);
                      //$m_dvente->update($dvente);

                 } else {
                      $this->view->message = "Erreur d'éxecution: Les codes d'activation ne sont liés à aucune quittance de souscription !!!";
                      $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            //$this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                  }

                  $mem = new Application_Model_EuMembreMorale();
                  $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                  $findmem = $mem_mapper->find($code,$mem);

                  if(($ancien_code =='') || ($ancien_code == NULL)) {
                      $mem->setEtat_membre('N');
                  } else {
                  if(substr($ancien_code,-1,1) == 'P') {
                      $this->view->message = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                   }
                   $mem->setEtat_membre('A');
                   //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

               // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
                $mem_mapper->update($mem);

                //eu_operation
                //Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

				$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                $place->setId_utilisateur(null);
                $place->setCode_membre(null);
                $place->setCode_membre_morale($code);
                $place->setMontant_op($fs);
                $place->setCode_produit('FS');
                $place->setLib_op('Auto-enrolement');
                $place->setType_op('AERL');
                $place->setCode_cat('TFS');
                $mapper_op->save($place);
				
                //insertion dans la table eu_representation
                $rep_mapper = new Application_Model_EuRepresentationMapper();
                $rep = new Application_Model_EuRepresentation();
                $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                $rep_mapper->save($rep);

                $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                $cb = new Application_Model_EuCompteBancaire();
			
                for($i = 0; $i < count($_POST['code_banque']); $i++) {
			            if($_POST['num_compte'][$i]!="") {
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
						}	
            }


            //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        //$id_user = $user_mapper->findConuter() + 1;

                        //$userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        //$contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
            if(($ancien_code =='') || ($ancien_code == NULL)) {
               $fs_model->setOrigine_fs('N');
            } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

              } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
          }





          if($code_fl !="") {

            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

            $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

            if(($ancien_code =='') || ($ancien_code == NULL)) {
               $fl->setOrigine_fl('N');
            } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

            //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        // Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($mont_fl);
                        $place->setCode_produit('FL');
                        $place->setLib_op('Frais de licences');
                        $place->setType_op(null);
                        $place->setCode_cat(null);
                        $mapper_op->save($place);
						
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

            //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                        //$tcartes[0]="TPAGCP";
                        $tscartes[1]="TSCNCSEI";
                        $tscartes[2]="TSGCI";
                        $tscartes[3]="TSIR";
                        $tscartes[4]="TSPaR";
                        $tscartes[5]="TSFS";
                        $tscartes[6]="TSPN";
                        $tscartes[7]="TSIB";
                        $tscartes[8]="TSPaNu";
                        $tscartes[9]="TSIN";
                        $tscartes[10]="TSCAPA";
                        $tscartes[11]="TSMARGE";
                        //$tcartes[14]="TSRE";
						
                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

          if($code_fkps !="") {
            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
            if(($ancien_code =='') || ($ancien_code == NULL)) {
               $carte->setOrigine_fkps('N');
            } else {
                           $carte->setOrigine_fkps('A');
            }
            $t_carte->insert($carte->toArray());

            $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                     ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
            $sms_mapper->update($sms_fkps);
						
						
			$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
            $place->setId_utilisateur(null);
            $place->setCode_membre(null);
            $place->setCode_membre_morale($code);
            $place->setMontant_op($fcps);
            $place->setCode_produit('CPS');
            $place->setLib_op('Frais de CPS');
            $place->setType_op(null);
            $place->setCode_cat(null);
            $mapper_op->save($place);					
						
        }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $bon_neutre2 = new Application_Model_EuBonNeutre();
                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                $bon_neutre2->setBon_neutre_code_membre($code);
                $bon_neutre2M->update($bon_neutre2);

                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2 = $bon_neutre_detail2M->fetchAllByCode($bon_neutre->bon_neutre_code);

                                if($bon_neutre_detail2->bon_neutre_appro_id > 0){
                                $bon_neutre_appro2 = new Application_Model_EuBonNeutreAppro();
                                $bon_neutre_appro2M = new Application_Model_EuBonNeutreApproMapper();
                                $bon_neutre_appro2M->find($bon_neutre_detail2->bon_neutre_appro_id, $bon_neutre_appro2);

                                $bon_neutre_appro2->setBon_neutre_appro_beneficiaire($code);
                                $bon_neutre_appro2M->update($bon_neutre_appro2);
                              }


                }



                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $bon_neutre_utilise2->setBon_neutre_utilise_montant(70000);
                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
              ///////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////

      if(isset($souscription->souscription_id) && $souscription->souscription_id > 0){
//////////////////////////////////////////////////////////
$id_souscription = $souscription->souscription_id;

        $souscription = new Application_Model_EuSouscription();
        $souscriptionM = new Application_Model_EuSouscriptionMapper();
        $souscriptionM->find($id_souscription, $souscription);




//////////////////////////////////////////
if($sessionmembreasso->membreasso_id != 1 && $sessionmembreasso->membreasso_id != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
    $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
    $m_association->find($membreasso->membreasso_association, $association);
    $code_agence = $association->code_agence;


    if($souscription->souscription_montant > 0){

if($souscription->souscription_date <= '2018-01-31'){

        if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }

}else{

  if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }


}


    /*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
      $partagea_montant = floor(109);//$souscription->souscription_montant / 100 * 5
    }else{
      $partagea_montant = floor(109);//$souscription->souscription_montant / 100 * 5
    }*/

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_code_activation($m_codeactivation->findConuter());
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            //$partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_code_activation($m_codeactivation->findConuter());
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}

      }

            }

              ///////////////////////////////////////////////////////////////////////////////////////



        $convention = new Application_Model_DbTable_EuConvention();
        $select2 = $convention->select();
        $select2->where("code_activation = ?", $_POST['code_BAn']);
        $select2->orwhere("(code_membre IS NULL");
        $select2->where("code_membre = '')");
        $select2->limit(1);

        if($convention_rows = $convention->fetchRow($select2)){
        $convention2 = new Application_Model_DbTable_EuConvention();
        $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
        }





                            ///////////////////////////////////////////////////////////////////////////////////////

            $compteur = Util_Utils::findConuter() + 1;
            Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
            $db->commit();
            $sessionmembreasso->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
            Code Membre (Login) : <strong>".$code."</strong><br />
            Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
            $sessionmembreasso->membre = $code;
            $sessionmembreasso->codesecret = $codesecret;
            $this->_redirect('/integrateur/enrolementpmsms2int/paramban/'.$paramban);

          }

          }
          }  catch(Exception $exc) {
                   $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   $db->rollback();
                   $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                   $this->view->code_statut = $request->getParam("code_statut");
                   //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                   $this->view->domaine_activite = $request->getParam("domaine_activite");
                   $this->view->site_web = $request->getParam("site_web");
                   $this->view->quartier_membre = $request->getParam("quartier_membre");
                   $this->view->ville_membre = $request->getParam("ville_membre");
                   $this->view->bp = $request->getParam("bp_membre");
                   //$this->view->tel = $request->getParam("tel_membre");
                   $this->view->email = $request->getParam("email_membre");
                   $this->view->id_pays = $request->getParam("id_pays");
                   //$this->view->portable = $request->getParam("portable_membre");
                   $this->view->registre = $request->getParam("num_registre_membre");
                   return;
             }
        } else {
            $sessionmembreasso->error = "Champs * obligatoire ...";
            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
            $this->view->code_statut = $request->getParam("code_statut");
            //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
            $this->view->domaine_activite = $request->getParam("domaine_activite");
            $this->view->site_web = $request->getParam("site_web");
            $this->view->quartier_membre = $request->getParam("quartier_membre");
            $this->view->ville_membre = $request->getParam("ville_membre");
            $this->view->bp = $request->getParam("bp_membre");
            //$this->view->tel = $request->getParam("tel_membre");
            $this->view->email = $request->getParam("email_membre");
            $this->view->id_pays = $request->getParam("id_pays");
            //$this->view->portable = $request->getParam("portable_membre");
            $this->view->registre = $request->getParam("num_registre_membre");
        }
    }
    }
	
	
	
	public  function rowrelevesalaireAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    $old_code_membre = $request->getParam("old_code_membre");
			$db_releve = new Application_Model_DbTable_EuReleve();
			$select_releve = $db_releve->select();
			$select_releve->where("releve_membre like ? ", $old_code_membre);
			$select_releve->where("releve_type like ? ", "CNCS");
			$select_releve->where("traiter is null");
			$select_releve->where("publier = ? ",1);
			$select_releve->limit(1);
			
			$entries = $db_releve->fetchAll($select_releve);
            $this->view->entries = $entries;
			$this->view->tabletri = 1;
		
		}
		
	}
	
	
	
	public  function  updaterelevesalaireAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		
		$releve = new Application_Model_EuReleve();
		$m_releve = new Application_Model_EuReleveMapper();
		
		if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				$membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				$code_membre = $request->getParam("code_membre");
				$id_releve = $request->getParam("id_releve");
                $findreleve = $m_releve->find($id_releve,$releve);
				$amembre = new Application_Model_EuAncienMembre();
	            $m_amembre = new Application_Model_EuAncienMembreMapper();
				$m_amembre->find($releve->releve_membre,$amembre);
				
				
				if(substr($code_membre,19,1) == 'P')  {
					$findmembre = $m_map->find($code_membre,$membre);
					if($findmembre == false) {
						$db->rollback();
						$this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre  saisi  ".$code_membre."  est introuvable ...";
					    return;
				    }
						
			    } else {
				    $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				    if($findmembre == false) {
						$db->rollback();
					    $this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre saisi  ".$code_membre."  est introuvable ...";
					    return;
					}
				}
				
                $releve->setNew_code_membre($code_membre);
				$releve->setUtilisateur($sessionmembreasso->membreasso_id);
				$releve->setTraiter(1);
                $m_releve->update($releve);

                $db->commit();
	            $sessionmembreasso->errorlogin = "Modification bien effectuee ...";
	            $this->_redirect('/integrateur/listrelevetraiter');				
					
            } catch(Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
			
		}  else {
		    $id = $this->_request->getParam('id');
	        $releve = new Application_Model_EuReleve();
	        $m_releve = new Application_Model_EuReleveMapper();
	        $membre = new Application_Model_EuAncienMembre();
	        $m_membre = new Application_Model_EuAncienMembreMapper();
	        $m_releve->find($id,$releve);
		    $m_membre->find($releve->releve_membre,$membre);
	        $this->view->releve = $releve;
	        $this->view->membre = $membre;
	    }
	}
	
	
	public  function rowrelevecreditAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		if($request->isPost()) {
		    $old_code_membre = $request->getParam("old_code_membre");
			$db_releve = new Application_Model_DbTable_EuReleve();
			$select_releve = $db_releve->select();
			$select_releve->where("releve_membre like ? ",$old_code_membre);
			$select_releve->where("releve_type like ? ","CNP");
			$select_releve->where("traiter is null");
			$select_releve->where("publier = ? ",1);
			$select_releve->limit(1);
			
			$entries = $db_releve->fetchAll($select_releve);
            $this->view->entries = $entries;
			$this->view->tabletri = 1;
		
		}
	}
	
	
	public  function  updaterelevecreditAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		
		$releve = new Application_Model_EuReleve();
		$m_releve = new Application_Model_EuReleveMapper();
		
		if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				$membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				$code_membre = $request->getParam("code_membre");
				$id_releve = $request->getParam("id_releve");
                $findreleve = $m_releve->find($id_releve,$releve);
				$amembre = new Application_Model_EuAncienMembre();
	            $m_amembre = new Application_Model_EuAncienMembreMapper();
				$m_amembre->find($releve->releve_membre,$amembre);
				
				
				if(substr($code_membre,19,1) == 'P')  {
					$findmembre = $m_map->find($code_membre,$membre);
					if($findmembre == false) {
						$db->rollback();
						$this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre  saisi  ".$code_membre."  est introuvable ...";
					    return;
				    }
						
			    } else {
				    $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				    if($findmembre == false) {
						$db->rollback();
					    $this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre saisi  ".$code_membre."  est introuvable ...";
					    return;
					}
				}
				
                $releve->setNew_code_membre($code_membre);
				$releve->setUtilisateur($sessionmembreasso->membreasso_id);
				$releve->setTraiter(1);
                $m_releve->update($releve);

                $db->commit();
	            $sessionmembreasso->errorlogin = "Modification bien effectuee ...";
	            $this->_redirect('/integrateur/listrelevetraiter');				
					
            } catch(Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
			
		}  else {
		    $id = $this->_request->getParam('id');
	        $releve = new Application_Model_EuReleve();
	        $m_releve = new Application_Model_EuReleveMapper();
	        $membre = new Application_Model_EuAncienMembre();
	        $m_membre = new Application_Model_EuAncienMembreMapper();
	        $m_releve->find($id,$releve);
		    $m_membre->find($releve->releve_membre,$membre);
	        $this->view->releve = $releve;
	        $this->view->membre = $membre;
	    }
		
	}
	
	
	public  function rowrelevegcpAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    $old_code_membre = $request->getParam("old_code_membre");
			$db_releve = new Application_Model_DbTable_EuReleve();
			$select_releve = $db_releve->select();
			$select_releve->where("releve_membre like ? ", $old_code_membre);
			$select_releve->where("releve_type like ? ","GCP");
			$select_releve->where("traiter is null");
			$select_releve->where("publier = ? ",1);
			$select_releve->limit(1);
			
			$entries = $db_releve->fetchAll($select_releve);
            $this->view->entries = $entries;
			$this->view->tabletri = 1;
		
		}
	}
	
	
	
	public  function  updaterelevegcpAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		
		$releve = new Application_Model_EuReleve();
		$m_releve = new Application_Model_EuReleveMapper();
		
		if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				$membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				$code_membre = $request->getParam("code_membre");
				$id_releve = $request->getParam("id_releve");
                $findreleve = $m_releve->find($id_releve,$releve);
				$amembre = new Application_Model_EuAncienMembre();
	            $m_amembre = new Application_Model_EuAncienMembreMapper();
				$m_amembre->find($releve->releve_membre,$amembre);
				
				
				if(substr($code_membre,19,1) == 'P')  {
					$findmembre = $m_map->find($code_membre,$membre);
					if($findmembre == false) {
						$db->rollback();
						$this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre  saisi  ".$code_membre."  est introuvable ...";
					    return;
				    }
						
			    } else {
				    $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				    if($findmembre == false) {
						$db->rollback();
					    $this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre saisi  ".$code_membre."  est introuvable ...";
					    return;
					}
				}
				
                $releve->setNew_code_membre($code_membre);
				$releve->setUtilisateur($sessionmembreasso->membreasso_id);
				$releve->setTraiter(1);
                $m_releve->update($releve);

                $db->commit();
	            $sessionmembreasso->errorlogin = "Modification bien effectuee ...";
	            $this->_redirect('/integrateur/listrelevetraiter');				
					
            } catch(Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
			
		}  else {
		    $id = $this->_request->getParam('id');
	        $releve = new Application_Model_EuReleve();
	        $m_releve = new Application_Model_EuReleveMapper();
	        $membre = new Application_Model_EuAncienMembre();
	        $m_membre = new Application_Model_EuAncienMembreMapper();
	        $m_releve->find($id,$releve);
		    $m_membre->find($releve->releve_membre,$membre);
	        $this->view->releve = $releve;
	        $this->view->membre = $membre;
	    }
		
	}
	
	
	
	public function recupnomAction() {

        $this->_helper->layout->disableLayout();
        $code_membre = $_GET['code_membre'];
	    if(substr($code_membre,19,1) == 'P') {
          $membre_db = new Application_Model_DbTable_EuMembre();
          $membre_find = $membre_db->find($code_membre);
          if(count($membre_find) == 1) {
            $result = $membre_find->current();
            $data = strtoupper($result->nom_membre) . ' ' . ucfirst($result->prenom_membre);
          } else {
             $data = '';
          }
		  
        } else {
		  $membre_db = new Application_Model_DbTable_EuMembreMorale();
          $membre_find = $membre_db->find($code_membre);
          if(count($membre_find) == 1) {
            $result = $membre_find->current();
            $data = strtoupper($result->raison_sociale) ;
          } else {
            $data = '';
          }
	    }
        $this->view->data = $data;
    }
	
	
	
	public  function rowrelevemf11000ppAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    $old_code_membre = $request->getParam("old_code_membre");
			$db_releve = new Application_Model_DbTable_EuReleve();
			$select_releve = $db_releve->select();
			$select_releve->where("releve_membre like ? ", $old_code_membre);
			$select_releve->where("releve_type like ? ", "MF11000");
			$select_releve->where("traiter is null");
			$select_releve->where("publier = ? ",1);
			$select_releve->limit(1);
			
			$entries = $db_releve->fetchAll($select_releve);
            $this->view->entries = $entries;
			$this->view->tabletri = 1;
		
		}
	}
	
	
	
	
	public  function  updaterelevemf11000ppAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		
		$releve = new Application_Model_EuReleve();
		$m_releve = new Application_Model_EuReleveMapper();
		
		if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				$membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				$code_membre = $request->getParam("code_membre");
				$id_releve = $request->getParam("id_releve");
                $findreleve = $m_releve->find($id_releve,$releve);
				$amembre = new Application_Model_EuMembreFondateur11000();
	            $m_amembre = new Application_Model_EuMembreFondateur11000Mapper();
				$m_amembre->find($releve->releve_membre,$amembre);
				
				
				if(substr($code_membre,19,1) == 'P')  {
					$findmembre = $m_map->find($code_membre,$membre);
					if($findmembre == false) {
						$db->rollback();
						$this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre  saisi  ".$code_membre."  est introuvable ...";
					    return;
				    }
						
			    } else {
				    $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				    if($findmembre == false) {
						$db->rollback();
					    $this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre saisi  ".$code_membre."  est introuvable ...";
					    return;
					}
				}
				
                $releve->setNew_code_membre($code_membre);
				$releve->setUtilisateur($sessionmembreasso->membreasso_id);
				$releve->setTraiter(1);
                $m_releve->update($releve);

                $db->commit();
	            $sessionmembreasso->errorlogin = "Modification bien effectuee ...";
	            $this->_redirect('/integrateur/listrelevetraiter');				
					
            } catch(Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
			
		}  else {
		    $id = $this->_request->getParam('id');
	        $releve = new Application_Model_EuReleve();
	        $m_releve = new Application_Model_EuReleveMapper();
	        $membre = new Application_Model_EuMembreFondateur11000();
	        $m_membre = new Application_Model_EuMembreFondateur11000Mapper();
	        $m_releve->find($id,$releve);
		    $m_membre->find($releve->releve_membre,$membre);
	        $this->view->releve = $releve;
	        $this->view->membre = $membre;
	    }
		
	}
	
	
	
	public  function rowrelevemf11000pmAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    $old_code_membre = $request->getParam("old_code_membre");
			$db_releve = new Application_Model_DbTable_EuReleve();
			$select_releve = $db_releve->select();
			$select_releve->where("releve_membre like ? ", $old_code_membre);
			$select_releve->where("releve_type like ? ","MF11000");
			$select_releve->where("traiter is null");
			$select_releve->where("publier = ? ",1);
			$select_releve->limit(1);
			
			$entries = $db_releve->fetchAll($select_releve);
            $this->view->entries = $entries;
			$this->view->tabletri = 1;
		
		}
	}
	
	
	
	public  function  updaterelevemf11000pmAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		
		$releve = new Application_Model_EuReleve();
		$m_releve = new Application_Model_EuReleveMapper();
		
		if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				$membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				$code_membre = $request->getParam("code_membre");
				$id_releve = $request->getParam("id_releve");
                $findreleve = $m_releve->find($id_releve,$releve);
				$amembre = new Application_Model_EuAncienMembre();
	            $m_amembre = new Application_Model_EuAncienMembreMapper();
				$m_amembre->find($releve->releve_membre,$amembre);
				
				
				if(substr($code_membre,19,1) == 'P')  {
					$findmembre = $m_map->find($code_membre,$membre);
					if($findmembre == false) {
						$db->rollback();
						$this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre  saisi  ".$code_membre."  est introuvable ...";
					    return;
				    }
						
			    } else {
				    $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				    if($findmembre == false) {
						$db->rollback();
					    $this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre saisi  ".$code_membre."  est introuvable ...";
					    return;
					}
				}
				
                $releve->setNew_code_membre($code_membre);
				$releve->setUtilisateur($sessionmembreasso->membreasso_id);
				$releve->setTraiter(1);
                $m_releve->update($releve);

                $db->commit();
	            $sessionmembreasso->errorlogin = "Modification bien effectuee ...";
	            $this->_redirect('/integrateur/listrelevetraiter');				
					
            } catch(Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
			
		}  else {
		    $id = $this->_request->getParam('id');
	        $releve = new Application_Model_EuReleve();
	        $m_releve = new Application_Model_EuReleveMapper();
	        $membre = new Application_Model_EuAncienMembre();
	        $m_membre = new Application_Model_EuAncienMembreMapper();
	        $m_releve->find($id,$releve);
		    $m_membre->find($releve->releve_membre,$membre);
	        $this->view->releve = $releve;
	        $this->view->membre = $membre;
	    }
		
	}
	
	
	
	public  function rowrelevemf107Action()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    $old_code_membre = $request->getParam("old_code_membre");
			$db_releve = new Application_Model_DbTable_EuReleve();
			$select_releve = $db_releve->select();
			$select_releve->where("releve_membre like ? ", $old_code_membre);
			$select_releve->where("releve_type like ? ", "MF107");
			$select_releve->where("traiter is null");
			$select_releve->where("publier = ? ",1);
			$select_releve->limit(1);
			
			$entries = $db_releve->fetchAll($select_releve);
            $this->view->entries = $entries;
			$this->view->tabletri = 1;
		}
		
	}
	
	
	
	public  function  updaterelevemf107Action()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$request = $this->getRequest();
		$releve = new Application_Model_EuReleve();
		$m_releve = new Application_Model_EuReleveMapper();
		
		if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				$membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				$code_membre = $request->getParam("code_membre");
				$id_releve = $request->getParam("id_releve");
                $findreleve = $m_releve->find($id_releve,$releve);
				$amembre = new Application_Model_EuAncienMembre();
	            $m_amembre = new Application_Model_EuAncienMembreMapper();
				$m_amembre->find($releve->releve_membre,$amembre);
				
				
				if(substr($code_membre,19,1) == 'P')  {
					$findmembre = $m_map->find($code_membre,$membre);
					if($findmembre == false) {
						$db->rollback();
						$this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre  saisi  ".$code_membre."  est introuvable ...";
					    return;
				    }
						
			    } else {
				    $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				    if($findmembre == false) {
						$db->rollback();
					    $this->view->releve = $releve;
	                    $this->view->membre = $amembre;
		                $this->view->error = "Le code membre saisi  ".$code_membre."  est introuvable ...";
					    return;
					}
				}
				
				
                $releve->setNew_code_membre($code_membre);
				$releve->setUtilisateur($sessionmembreasso->membreasso_id);
				$releve->setTraiter(1);
                $m_releve->update($releve);

                $db->commit();
	            $sessionmembreasso->errorlogin = "Modification bien effectuee ...";
	            $this->_redirect('/integrateur/listrelevetraiter');				
					
            } catch(Exception $exc) {				   
	            $db->rollback();
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                return;
            }
			
		}  else {
		    $id = $this->_request->getParam('id');
	        $releve = new Application_Model_EuReleve();
	        $m_releve = new Application_Model_EuReleveMapper();
	        $membre = new Application_Model_EuAncienMembre();
	        $m_membre = new Application_Model_EuAncienMembreMapper();
	        $m_releve->find($id,$releve);
		    $m_membre->find($releve->releve_membre,$membre);
	        $this->view->releve = $releve;
	        $this->view->membre = $membre;
	    }
		
	}
	
	
	public  function listrelevetraiterAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        $this->_helper->layout()->setLayout('layoutpublicesmcint');

        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$db_releve = new Application_Model_DbTable_EuReleve();
	    $select_releve = $db_releve->select();
		$select_releve->where('utilisateur = ?',$sessionmembreasso->membreasso_id);
			
	    $entries = $db_releve->fetchAll($select_releve);
        $this->view->entries = $entries;
	    $this->view->tabletri = 1;
		
	}
	
	
	
	
	
	
	
	
	





    public function listallocationcmfhAction() {
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $integrateurM = new Application_Model_EuIntegrateurMapper();
        $integrateur = $integrateurM->fetchAllByMembreasso2($sessionmembreasso->membreasso_id);

        if(isset($integrateur->code_membre)){
            $allocationcmfh = new Application_Model_EuAllocationCmfhMapper();
            $this->view->entries = $allocationcmfh->fetchAllByIntegrateur($integrateur->code_membre);
        }
        $this->view->tabletri = 1;

    }














    public function listactivationmAction()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $activation = new Application_Model_EuActivationMapper();
        $this->view->entries = $activation->fetchAllByMembreasso($sessionmembreasso->membreasso_id);

        $this->view->tabletri = 1;

    }




    public function listactivationm2Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $activation = new Application_Model_EuActivationMapper();
        $this->view->entries = $activation->fetchAllByAssociation($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;

    }








    public function listcodeactivationmAction()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $codeactivation = new Application_Model_EuCodeActivationMapper();
        $this->view->entries = $codeactivation->fetchAllByMembreasso($sessionmembreasso->membreasso_id);

        $this->view->tabletri = 1;

    }




    public function listcodeactivationm2Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $codeactivation = new Application_Model_EuCodeActivationMapper();
        $this->view->entries = $codeactivation->fetchAllByAssociation($sessionmembreasso->membreasso_association);

        $this->view->tabletri = 1;

    }








    public function listsouscriptionetat233Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->findSomme3($sessionmembreasso->membreasso_association, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
  }
  }
         $this->view->tabletri = 1;
    }


    public function listsouscriptionetat2233Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['periode']) && $_POST['periode']!="") {

list($debut, $fin) = explode("/", $_POST['periode']);

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->findSomme3($sessionmembreasso->membreasso_id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
  }
  } 
        $this->view->tabletri = 1;
    }




    public function listsouscriptionetat243Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

$periode = (string) $this->_request->getParam('periode');

  //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');

        $partagea = new Application_Model_EuPartageaMapper();
        $this->view->entries = $partagea->fetchAllByCommissionSouscription3($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
  }
        $this->view->tabletri = 1;
    }


    public function listsouscriptionetat2243Action()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

$periode = (string) $this->_request->getParam('periode');

  //if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($periode) && $periode!="") {

list($debut, $fin) = explode("_", $periode);
$id = (int) $this->_request->getParam('id');
//$debut = (string) $this->_request->getParam('debut');
//$fin = (string) $this->_request->getParam('fin');

        $partagem = new Application_Model_EuPartagemMapper();
        $this->view->entries = $partagem->fetchAllByCommissionSouscription3($id, $debut, $fin);

        $this->view->debut = $debut;
        $this->view->fin = $fin;
  }
        $this->view->tabletri = 1;
    }








public function commissionnoncalculerAction()
    {
ini_set('memory_limit', '512M');
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


$eusouscription = new Application_Model_DbTable_EuSouscription();
$select = $eusouscription->select();
$select->where("publier = 3");
$select->where("souscription_numero IS NOT NULL");
$select->where("souscription_numero != ''");
$select->where("souscription_membreasso NOT IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = 1)");
$select->where("souscription_id NOT IN (SELECT partagem_souscription FROM eu_partagem)");
$rowseusouscription = $eusouscription->fetchAll($select);

foreach ($rowseusouscription as $value) {
  
$eupartagem = new Application_Model_DbTable_EuPartagem();
$select = $eupartagem->select();
$select->where("partagem_souscription = ".$value->souscription_id."");
$rowseupartagem = $eupartagem->fetchAll($select);

if(count($rowseupartagem) == 0){

$partagem = new Application_Model_EuPartagem();
$partagem_mapper = new Application_Model_EuPartagemMapper();

$compteur_partagem = $partagem_mapper->findConuter() + 1;
//$partagem->setPartagem_id($compteur_partagem);
$partagem->setPartagem_membreasso($value->souscription_membreasso);
$partagem->setPartagem_souscription(0);//$value->souscription_id
$partagem->setPartagem_montant($value->souscription_montant * 0.05 * 0.25);
$partagem->setPartagem_montant_utilise(0);
$partagem->setPartagem_montant_solde($value->souscription_montant * 0.05 * 0.25);
$partagem_mapper->save($partagem);

}


$membreasso = new Application_Model_EuMembreasso();
$m_membreasso = new Application_Model_EuMembreassoMapper();
$m_membreasso->find($value->souscription_membreasso, $membreasso);
  
$eupartagea = new Application_Model_DbTable_EuPartagea();
$select = $eupartagea->select();
$select->where("partagea_souscription = ".$value->souscription_id."");
$rowseupartagea = $eupartagea->fetchAll($select);

if(count($rowseupartagea) == 0){

$partagea = new Application_Model_EuPartagea();
$partagea_mapper = new Application_Model_EuPartageaMapper();

$compteur_partagea = $partagea_mapper->findConuter() + 1;
//$partagea->setPartagea_id($compteur_partagea);
$partagea->setPartagea_association($membreasso->membreasso_association);
$partagea->setPartagea_souscription(0);//$value->souscription_id
$partagea->setPartagea_montant($value->souscription_montant * 0.05 * 0.75);
$partagea->setPartagea_montant_utilise(0);
$partagea->setPartagea_montant_solde($value->souscription_montant * 0.05 * 0.75);
$partagea_mapper->save($partagea);

}


}


echo "ok";




    }






public function commissionnoncalculertiersAction()
    {
ini_set('memory_limit', '512M');
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


$eusouscription = new Application_Model_DbTable_EuSouscription();
$select = $eusouscription->select();
$select->where("publier = 3");
$select->where("souscription_numero IS NOT NULL");
$select->where("souscription_numero != ''");
$select->where("souscription_membreasso NOT IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = 1)");
$select->where("souscription_id IN (SELECT membretierscode_souscription FROM eu_membretierscode)");
$rowseusouscription = $eusouscription->fetchAll($select);

foreach ($rowseusouscription as $value) {
  
$eupartagem = new Application_Model_DbTable_EuPartagem();
$select = $eupartagem->select();
$select->where("partagem_souscription = ".$value->souscription_id."");
$select->where("partagem_montant = 27");
$rowseupartagem = $eupartagem->fetchAll($select);


$eupartagea = new Application_Model_DbTable_EuPartagea();
$select = $eupartagea->select();
$select->where("partagea_souscription = ".$value->souscription_id."");
$select->where("partagea_montant = 82");
$rowseupartagea = $eupartagea->fetchAll($select);

  
$eumembretierscode = new Application_Model_DbTable_EuMembretierscode();
$select = $eumembretierscode->select();
$select->where("membretierscode_souscription = ".$value->souscription_id."");
$select->where("code_membre IS NOT NULL");
$rowseumembretierscode = $eumembretierscode->fetchAll($select);



for ($i=0; $i < (count($rowseumembretierscode) - count($rowseupartagem)); $i++) { 

$partagem = new Application_Model_EuPartagem();
$partagem_mapper = new Application_Model_EuPartagemMapper();

$compteur_partagem = $partagem_mapper->findConuter() + 1;
//$partagem->setPartagem_id($compteur_partagem);
$partagem->setPartagem_membreasso($value->souscription_membreasso);
$partagem->setPartagem_souscription(0);//$value->souscription_id
$partagem->setPartagem_montant(27);
$partagem->setPartagem_montant_utilise(0);
$partagem->setPartagem_montant_solde(27);
$partagem_mapper->save($partagem);

}


for ($i=0; $i < (count($rowseumembretierscode) - count($rowseupartagea)); $i++) { 

$membreasso = new Application_Model_EuMembreasso();
$m_membreasso = new Application_Model_EuMembreassoMapper();
$m_membreasso->find($value->souscription_membreasso, $membreasso);
  
$partagea = new Application_Model_EuPartagea();
$partagea_mapper = new Application_Model_EuPartageaMapper();

$compteur_partagea = $partagea_mapper->findConuter() + 1;
//$partagea->setPartagea_id($compteur_partagea);
$partagea->setPartagea_association($membreasso->membreasso_association);
$partagea->setPartagea_souscription(0);//$value->souscription_id
$partagea->setPartagea_montant(82);
$partagea->setPartagea_montant_utilise(0);
$partagea->setPartagea_montant_solde(82);
$partagea_mapper->save($partagea);

}




}


echo "ok2";




    }



















public function commissionnoncalculer2Action()
    {
ini_set('memory_limit', '512M');
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


$eusouscription = new Application_Model_DbTable_EuSouscription();
$select = $eusouscription->select();
$select->where("publier = 3");
$select->where("souscription_numero IS NOT NULL");
$select->where("souscription_numero != ''");
$select->where("souscription_membreasso NOT IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association <> 1)");
$select->where("souscription_id NOT IN (SELECT partagem_souscription FROM eu_partagem)");
$rowseusouscription = $eusouscription->fetchAll($select);

foreach ($rowseusouscription as $value) {
  
$eupartagem = new Application_Model_DbTable_EuPartagem();
$select = $eupartagem->select();
$select->where("partagem_souscription = ".$value->souscription_id."");
$rowseupartagem = $eupartagem->fetchAll($select);

if(count($rowseupartagem) == 0){

$partagem = new Application_Model_EuPartagem();
$partagem_mapper = new Application_Model_EuPartagemMapper();

$compteur_partagem = $partagem_mapper->findConuter() + 1;
//$partagem->setPartagem_id($compteur_partagem);
$partagem->setPartagem_membreasso($value->souscription_membreasso);
$partagem->setPartagem_souscription(0);//$value->souscription_id
$partagem->setPartagem_montant($value->souscription_montant * 0.05 * 0.25);
$partagem->setPartagem_montant_utilise(0);
$partagem->setPartagem_montant_solde($value->souscription_montant * 0.05 * 0.25);
$partagem_mapper->save($partagem);

}


$membreasso = new Application_Model_EuMembreasso();
$m_membreasso = new Application_Model_EuMembreassoMapper();
$m_membreasso->find($value->souscription_membreasso, $membreasso);
  
$eupartagea = new Application_Model_DbTable_EuPartagea();
$select = $eupartagea->select();
$select->where("partagea_souscription = ".$value->souscription_id."");
$rowseupartagea = $eupartagea->fetchAll($select);

if(count($rowseupartagea) == 0){

$partagea = new Application_Model_EuPartagea();
$partagea_mapper = new Application_Model_EuPartageaMapper();

$compteur_partagea = $partagea_mapper->findConuter() + 1;
//$partagea->setPartagea_id($compteur_partagea);
$partagea->setPartagea_association($membreasso->membreasso_association);
$partagea->setPartagea_souscription(0);//$value->souscription_id
$partagea->setPartagea_montant($value->souscription_montant * 0.05 * 0.75);
$partagea->setPartagea_montant_utilise(0);
$partagea->setPartagea_montant_solde($value->souscription_montant * 0.05 * 0.75);
$partagea_mapper->save($partagea);

}


}


echo "ok3";




    }






public function commissionnoncalculertiers2Action()
    {
ini_set('memory_limit', '512M');
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


$eusouscription = new Application_Model_DbTable_EuSouscription();
$select = $eusouscription->select();
$select->where("publier = 3");
$select->where("souscription_numero IS NOT NULL");
$select->where("souscription_numero != ''");
$select->where("souscription_membreasso NOT IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association <> 1)");
$select->where("souscription_id IN (SELECT membretierscode_souscription FROM eu_membretierscode)");
$rowseusouscription = $eusouscription->fetchAll($select);

foreach ($rowseusouscription as $value) {
  
$eupartagem = new Application_Model_DbTable_EuPartagem();
$select = $eupartagem->select();
$select->where("partagem_souscription = ".$value->souscription_id."");
$select->where("partagem_montant = 27");
$rowseupartagem = $eupartagem->fetchAll($select);


$eupartagea = new Application_Model_DbTable_EuPartagea();
$select = $eupartagea->select();
$select->where("partagea_souscription = ".$value->souscription_id."");
$select->where("partagea_montant = 82");
$rowseupartagea = $eupartagea->fetchAll($select);

  
$eumembretierscode = new Application_Model_DbTable_EuMembretierscode();
$select = $eumembretierscode->select();
$select->where("membretierscode_souscription = ".$value->souscription_id."");
$select->where("code_membre IS NOT NULL");
$rowseumembretierscode = $eumembretierscode->fetchAll($select);



for ($i=0; $i < (count($rowseumembretierscode) - count($rowseupartagem)); $i++) { 

$partagem = new Application_Model_EuPartagem();
$partagem_mapper = new Application_Model_EuPartagemMapper();

$compteur_partagem = $partagem_mapper->findConuter() + 1;
//$partagem->setPartagem_id($compteur_partagem);
$partagem->setPartagem_membreasso($value->souscription_membreasso);
$partagem->setPartagem_souscription(0);//$value->souscription_id
$partagem->setPartagem_montant(27);
$partagem->setPartagem_montant_utilise(0);
$partagem->setPartagem_montant_solde(27);
$partagem_mapper->save($partagem);

}


for ($i=0; $i < (count($rowseumembretierscode) - count($rowseupartagea)); $i++) { 

$membreasso = new Application_Model_EuMembreasso();
$m_membreasso = new Application_Model_EuMembreassoMapper();
$m_membreasso->find($value->souscription_membreasso, $membreasso);
  
$partagea = new Application_Model_EuPartagea();
$partagea_mapper = new Application_Model_EuPartageaMapper();

$compteur_partagea = $partagea_mapper->findConuter() + 1;
//$partagea->setPartagea_id($compteur_partagea);
$partagea->setPartagea_association($membreasso->membreasso_association);
$partagea->setPartagea_souscription(0);//$value->souscription_id
$partagea->setPartagea_montant(82);
$partagea->setPartagea_montant_utilise(0);
$partagea->setPartagea_montant_solde(82);
$partagea_mapper->save($partagea);

}




}


echo "ok4";




    }


     
	 
	 public  function addbanapproAction()  {
		 $sessionmembreasso = new Zend_Session_Namespace('membreasso');
         //$this->_helper->layout->disableLayout();
         $this->_helper->layout()->setLayout('layoutpublicesmcint');
         if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


         if($sessionmembreasso->appro != 1 && $sessionmembreasso->membreasso_type == 2) {
             $sessionmembreasso->error = "Vous n'etes pas autorisé à faire des approvisionnements. Merci.";
             return;
         }


         $request = $this->getRequest();
         if($request->isPost()) {		 
		     $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {
                 if(isset($_POST['bon_neutre_appro_beneficiaire']) && $_POST['bon_neutre_appro_beneficiaire']!="" 
				   && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") { 			      
				    
					$date_id = Zend_Date::now();
                    /*if($sessionmembreasso->guichet == 1) {
                        $association_code_membre = $sessionmembreasso->association_code_membre;
                    } else {
                        $association_code_membre = $sessionmembreasso->code_membre;
                    }*/

			        if($sessionmembreasso->guichet == 1) {
						  $association_code_membre = $sessionmembreasso->association_code_membre;
						  
						  /*
			              if($sessionmembreasso->appro == 1){
			                $association_code_membre = $sessionmembreasso->association_code_membre;
			              }else{
			                $association_code_membre = $sessionmembreasso->code_membre;
			              }
						  */
						  
			        } else {
			            $association_code_membre = $sessionmembreasso->code_membre;
			        }
					
					if($_POST['bon_neutre_appro_beneficiaire'] == $association_code_membre) {
                        $db->rollback();
                        $sessionmembreasso->error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                        return;
                    }
					
					/////////////////////////////////////controle code membre
                    if(strlen($_POST['bon_neutre_appro_beneficiaire']) != 20) {
                        $db->rollback();
                        $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                        return;
                    } else {
                       if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'P') {
                          $membre = new Application_Model_EuMembre();
                          $membre_mapper = new Application_Model_EuMembreMapper();
                          if(!($membre_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membre))) {
							   $db->rollback();
                               $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                               return;	
                          } 
                          $canton = $membre->id_canton;
                          $nom = $membre->nom_membre;
                          $prenom = $membre->prenom_membre;
                          $email = $membre->email_membre;
                          $mobile = $membre->portable_membre;
                          $raison = "";
                       } else if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'M') {
                          $membremorale = new Application_Model_EuMembreMorale();
                          $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                          if(!($membremorale_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membremorale))) {
                             $db->rollback();
                             $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                             return;    
						  } 
                          $canton = $membremorale->id_canton;
                          $nom = "";
                          $prenom = "";
                          $email = $membremorale->email_membre;
                          $mobile = $membremorale->portable_membre;
                          $raison = $membremorale->raison_sociale;
                        } else {
                          $db->rollback();
                          $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                          return;
                        }
					}
					
					if($request->getParam("bon_neutre_appro_montant") <= 0) {
                        $db->rollback();
                        $sessionmembreasso->error = "Le montant à allouer doit etre supérieur à 0...";
                        return;
                    }
					

					$ok_franchise_1 = 0;
					$ok_eli_anticipe_1 = 0;
					$ok_franchise_2 = 0;
					$ok_association_2 = 0;


                    $franchise = new Application_Model_EuFranchise();
                    $franchiseM = new Application_Model_EuFranchiseMapper();
                    $franchise2 = $franchiseM->fetchAllByMembreType($association_code_membre, "");
					if(count($franchise2) > 0) {
					   $ok_franchise_1 = 1;
					}
                    
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($association_code_membre);
                    if(count($bon_neutre2) > 0) {
                       $bon_neutre = new Application_Model_EuBonNeutre();
                       $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                       $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
                       $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                       $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutreDetailBanque($bon_neutre->bon_neutre_id, "ELI");
                       if($bon_neutre_detail_somme > 0) {
						  $ok_eli_anticipe_1 = 1;
                       }
                	}

                    $franchise1 = new Application_Model_EuFranchise();
                    $franchise1M = new Application_Model_EuFranchiseMapper();
                    $franchise12 = $franchise1M->fetchAllByMembreType($_POST['bon_neutre_appro_beneficiaire'], "");
					if(count($franchise12) > 0) {
					   $ok_franchise_2 = 1;
					}

                    $association1 = new Application_Model_EuAssociation();
                    $association1M = new Application_Model_EuAssociationMapper();
                    $association12 = $association1M->fetchAllByMembreGuichet($_POST['bon_neutre_appro_beneficiaire']);
					if(count($association12) > 0) {
					   $ok_association_2 = 1;
					}

                    
                    if($ok_franchise_1 == 1 && $ok_eli_anticipe_1 == 1 && $ok_franchise_2 == 1 && $ok_association_2 == 1) {
	                     $bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant") + ($request->getParam("bon_neutre_appro_montant") * Util_Utils::getParamEsmc(19) / 100);
                    } else {
	                     $bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant");	
                    }



					$bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($association_code_membre);
                    if(count($bon_neutre2) > 0)  {
						
					    /*
					    if($ok_eli_anticipe_1 == 1) {

						if($bon_neutre_appro_montant > $bon_neutre_detail_somme) {
                             $db->rollback();
                             $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             return;
                        }
						
					    } else {
						   $bon_neutre = new Application_Model_EuBonNeutre();
                           $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                           $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
						   if($bon_neutre_appro_montant > $bon_neutre->getBon_neutre_montant_solde()) {
                           $db->rollback();
                           $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                           return;
                        }
						}
					    */
					   
					    $bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                        $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
					    if($bon_neutre_appro_montant > $bon_neutre->getBon_neutre_montant_solde()) {
                           $db->rollback();
                           $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                           return;
                        }
						
					} else {
                        $db->rollback();
                        $sessionmembreasso->error = "Le membre apporteur ne dispose pas de BAn ...";
                        return;
                    }
					
					do {
                       $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                       $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                       $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                    } while(count($bon_neutre_detail2) > 0);
					
					
					$bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
                    $bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

                    $compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
                    $bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                    $bon_neutre_appro->setBon_neutre_appro_beneficiaire(strtoupper($request->getParam("bon_neutre_appro_beneficiaire")));
                    $bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $bon_neutre_appro->setBon_neutre_appro_montant($bon_neutre_appro_montant);
                    $bon_neutre_appro->setBon_neutre_appro_apporteur($association_code_membre);
                    $bon_neutre_appro_mapper->save($bon_neutre_appro);
					
					// Mise à jour du bon neutre apporteur
					$bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $bon_neutre_appro_montant);
                    $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $bon_neutre_appro_montant);
                    $bon_neutreM->update($bon_neutre);

                    $bon_neutre_id = $bon_neutre->bon_neutre_id;
					
					// Mise à jour du bon neutre utilise
					/*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                    $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                    $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                    $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                    $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                    $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                    $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                    $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_appro_montant);
                    $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
					
					
					if($sessionmembreasso->guichet == 1) {
                        $ban_appro_detail = new Application_Model_EuBanApproDetail();
                        $ban_appro_detail_mapper = new Application_Model_EuBanApproDetailMapper();

                        $compteur_ban_appro_detail = $ban_appro_detail_mapper->findConuter() + 1;
                        $ban_appro_detail->setBan_appro_detail_id($compteur_ban_appro_detail);
                        $ban_appro_detail->setAssociation_id($sessionmembreasso->membreasso_association);
                        $ban_appro_detail->setBan_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $ban_appro_detail->setBan_appro_detail_montant($bon_neutre_appro_montant);
                        $ban_appro_detail->setMembreasso_id($sessionmembreasso->membreasso_id);
                        $ban_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                        $ban_appro_detail_mapper->save($ban_appro_detail);

                    }
					
					
					// Mise à jour du bon neutre detail
					$mont = $bon_neutre_appro_montant;
					$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					
					foreach($bon_neutre_detail as $detail) {
					  $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                      $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                      $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                      if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL) {
                           $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                           $appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
                           $code_banque = $appro_detail->bon_neutre_appro_detail_banque;
                      } else {
                           $code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
                      }

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


                      if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                           $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

                           $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                           $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                           $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                           $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                           $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                           $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                           $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                           $bon_neutre_detail2M->update($bon_neutre_detail2);
                                
					// Mise à jour du bon neutre utilise
					$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                    $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                    $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                    $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                    $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                    $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                    $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                    $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                    $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                    $bon_neutre_utilise2M->save($bon_neutre_utilise2);
					
                       } else {

                           $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                           $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                           $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                           $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
                           $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                           $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                           $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                           $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                           $bon_neutre_detail2M->update($bon_neutre_detail2);


					// Mise à jour du bon neutre utilise
					$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                    $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                    $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                    $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                    $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                    $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                    $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                    $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                    $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                    $bon_neutre_utilise2M->save($bon_neutre_utilise2);
					
                           break;
                        }					  
					}
					
					
					// MISE à jour du bon neutre beneficiaire
					
					$bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
					
					if(count($bon_neutre3) > 0) {
                         $bon_neutre31 = new Application_Model_EuBonNeutre();
                         $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                         $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                         $bon_neutre31->setBon_neutre_code($code_BAn);
                         $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $bon_neutre_appro_montant);
                         $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $bon_neutre_appro_montant);
                         $bon_neutre31M->update($bon_neutre31);

                         $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                         $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                         $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                         $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                         $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                         $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                         $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                         $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                         $bon_neutre_detail->setId_canton($canton);
                         $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                         $bon_neutre_detail_mapper->save($bon_neutre_detail);
						
					}  else  {
                        $bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                        $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                        $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                        $bon_neutre->setBon_neutre_type("BAn");
                        $bon_neutre->setBon_neutre_code($code_BAn);
                        $bon_neutre->setBon_neutre_code_membre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
                        $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre->setBon_neutre_montant($bon_neutre_appro_montant);
                        $bon_neutre->setBon_neutre_montant_utilise(0);
                        $bon_neutre->setBon_neutre_montant_solde($bon_neutre_appro_montant);
                        $bon_neutre->setBon_neutre_nom($nom);
                        $bon_neutre->setBon_neutre_prenom($prenom);
                        $bon_neutre->setBon_neutre_raison($raison);
                        $bon_neutre->setBon_neutre_email($email);
                        $bon_neutre->setBon_neutre_mobile($mobile);
                        $bon_neutre_mapper->save($bon_neutre);

                        $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                        $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                        $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                        $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                        $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                        $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                        $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                        $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                        $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                        $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                        $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                        $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                        $bon_neutre_detail->setId_canton($canton);
                        $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                        $bon_neutre_detail_mapper->save($bon_neutre_detail);

                    }
					///////////////////////////////////////////////////////////////////////////////////////
                    $db->commit();
                    $sessionmembreasso->error = "Opération bien effectuée. <br />
                    Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
                    Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
					$sessionmembreasso->code_BAn = $code_BAn;
					$montantbanappromembreasso = $request->getParam("bon_neutre_appro_montant");

					$sessionmembreasso->membreassomontanbanappro = $montantbanappromembreasso;
					$sessionmembreasso->bon_neutre_detail_id = $compteur_bon_neutre_detail;

                    $sessionmembreasso->bon_neutre_appro_apporteur = "";
                    $sessionmembreasso->bon_neutre_appro_beneficiaire = "";
                    $sessionmembreasso->bon_neutre_appro_montant = "";
                    $sessionmembreasso->confirmation_envoi = "";

                    $this->_redirect('/integrateur/addbanappro');
                    return;
				  
				  } else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
			 } catch(Exception $exc) {
                 $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                 $db->rollback();
                 return;
             }
		 
		 }
		 
	 }








    public function addbanapprooldsAction() {
     $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');
      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL) {
                  $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
}

    $date_id = Zend_Date::now();

    $request = $this->getRequest ();
    if ($request->isPost ()) {

        if (isset($_POST['bon_neutre_appro_beneficiaire']) && $_POST['bon_neutre_appro_beneficiaire']!="" && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {

                $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
          try {
                $date_id = Zend_Date::now();

					/*if($sessionmembreasso->guichet == 1){
					$association_code_membre = $sessionmembreasso->association_code_membre;
					}else{
					$association_code_membre = $sessionmembreasso->code_membre;
					}*/


			        if($sessionmembreasso->guichet == 1) {
			              if($sessionmembreasso->appro == 1){
			                $association_code_membre = $sessionmembreasso->association_code_membre;
			              }else{
			                $association_code_membre = $sessionmembreasso->code_membre;
			              }
			        } else {
			            $association_code_membre = $sessionmembreasso->code_membre;
			        }
					

if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1){

if($_POST['bon_neutre_appro_beneficiaire'] == $association_code_membre) {
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
}
/////////////////////////////////////controle code membre
if(strlen($_POST['bon_neutre_appro_beneficiaire']) != 20) {
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
}else{
if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if($membre_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membre)){
                                }else{
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
                                }
                $canton = $membre->id_canton;
                $nom = $membre->nom_membre;
                $prenom = $membre->prenom_membre;
                $email = $membre->email_membre;
                $mobile = $membre->portable_membre;
                $raison = "";
    } else if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                if($membremorale_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membremorale)){
                                }else{
                                  $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
                                }
                $canton = $membremorale->id_canton;
                $nom = "";
                $prenom = "";
                $email = $membremorale->email_membre;
                $mobile = $membremorale->portable_membre;
                $raison = $membremorale->raison_sociale;
    }else{
      $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
    }
}


                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($association_code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/integrateur/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/integrateur/addbanappro');
  return;

}



        $sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
        if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre3($sessionmembreasso->code_membre)){
          $this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
          $sessionmembreasso->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;


$compteur = Util_Utils::findConuter() + 1; 
Util_Utils::addSms3Easys($compteur, $sessionmembreasso->portable_membre, $sms_connexion->sms_connexion_code_recu);        


$sessionmembreasso->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
$sessionmembreasso->bon_neutre_appro_apporteur = $association_code_membre;
$sessionmembreasso->bon_neutre_appro_beneficiaire = $_POST['bon_neutre_appro_beneficiaire'];
$sessionmembreasso->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];

                            $db->commit();


        }else {
          //$code_envoi = strtoupper(Util_Utils::genererCodeSMS(9));/
          do{
                              $code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
                              $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
                              $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
          }while(count($sms_connexion2) > 0);
          //$code_recu = strtoupper(Util_Utils::genererCodeSMS(9));/
          do{
                              $code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
                              $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
                              $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
          }while(count($sms_connexion2) > 0);

          $date_id = new Zend_Date(Zend_Date::ISO_8601);
          $sms_connexion1 = new Application_Model_EuSmsConnexion();
          $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

          $compteur = $sms_connexion1_mapper->findConuter() + 1;
          $sms_connexion1->setSms_connexion_id($compteur);
          $sms_connexion1->setSms_connexion_code_envoi($code_envoi);
          $sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");
          $sms_connexion1->setSms_connexion_code_membre($sessionmembreasso->code_membre);
          $sms_connexion1->setSms_connexion_utilise(0);
          $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
          $sms_connexion1_mapper->save($sms_connexion1);


$compteur = Util_Utils::findConuter() + 1; 
Util_Utils::addSms3Easys($compteur, $sessionmembreasso->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

          $this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
          $sessionmembreasso->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;


$sessionmembreasso->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...3";
$sessionmembreasso->bon_neutre_appro_apporteur = $association_code_membre;
$sessionmembreasso->bon_neutre_appro_beneficiaire = $_POST['bon_neutre_appro_beneficiaire'];
$sessionmembreasso->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];

                            $db->commit();

        }


}   else {
                            $db->rollback();
                                          $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/integrateur/addbanappro');
                            return;
}



}else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2){


if($_POST['bon_neutre_appro_beneficiaire'] == $association_code_membre) {
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
}
/////////////////////////////////////controle code membre
if(strlen($_POST['bon_neutre_appro_beneficiaire']) != 20) {
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
}else{
if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if($membre_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membre)){
                                }else{
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
                                }
                $canton = $membre->id_canton;
                $nom = $membre->nom_membre;
                $prenom = $membre->prenom_membre;
                $email = $membre->email_membre;
                $mobile = $membre->portable_membre;
                $raison = "";
    } else if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                if($membremorale_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membremorale)){
                                }else{
                                  $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
                                }
                $canton = $membremorale->id_canton;
                $nom = "";
                $prenom = "";
                $email = $membremorale->email_membre;
                $mobile = $membremorale->portable_membre;
                $raison = $membremorale->raison_sociale;
    }else{
      $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                                    //$this->_redirect('/integrateur/addbanappro');
                                    return;
    }
}


$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
$sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
if($sms_connexion->sms_connexion_code_envoi == $sessionmembreasso->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembreasso->code_membre){
//if(isset($_POST['code_recu']) && $_POST['code_recu'] == $sessionmembreasso->confirmation_envoi){
            $sms_connexion1 = new Application_Model_EuSmsConnexion();
            $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
            $sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

            $sms_connexion1->setSms_connexion_utilise(1);
            $sms_connexion1_mapper->update($sms_connexion1);

            $sessionmembreasso->confirmation_envoi = "";

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($association_code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/integrateur/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/integrateur/addbanappro');
  return;

}








                //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                do{
                                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                }while(count($bon_neutre_detail2) > 0);




$bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

$compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
$bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro->setBon_neutre_appro_beneficiaire(strtoupper($request->getParam("bon_neutre_appro_beneficiaire")));
$bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro->setBon_neutre_appro_montant($request->getParam("bon_neutre_appro_montant"));
$bon_neutre_appro->setBon_neutre_appro_apporteur($association_code_membre);
$bon_neutre_appro_mapper->save($bon_neutre_appro);





                                //$bon_neutre->setBon_neutre_code($code_BAn);
                                //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_appro_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/





if($sessionmembreasso->guichet == 1){

$ban_appro_detail = new Application_Model_EuBanApproDetail();
$ban_appro_detail_mapper = new Application_Model_EuBanApproDetailMapper();

$compteur_ban_appro_detail = $ban_appro_detail_mapper->findConuter() + 1;
$ban_appro_detail->setBan_appro_detail_id($compteur_ban_appro_detail);
$ban_appro_detail->setAssociation_id($sessionmembreasso->membreasso_association);
$ban_appro_detail->setBan_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$ban_appro_detail->setBan_appro_detail_montant($request->getParam("bon_neutre_appro_montant"));
$ban_appro_detail->setMembreasso_id($sessionmembreasso->membreasso_id);
$ban_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$ban_appro_detail_mapper->save($ban_appro_detail);

}

///////////////////////////////////////////////////////////////////////////

$mont = $request->getParam("bon_neutre_appro_montant");

                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL){
$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
$code_banque = $appro_detail->bon_neutre_appro_detail_banque;
}else{
$code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
}

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
$mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                

                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }


                        }
                            


///////////////////////////////////////////////////////////////////////////

                $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
                if(count($bon_neutre3) > 0){
                  $bon_neutre31 = new Application_Model_EuBonNeutre();
                                $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                                $bon_neutre31->setBon_neutre_code($code_BAn);
                                $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $request->getParam("bon_neutre_appro_montant"));
                  $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre31M->update($bon_neutre31);


                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                                $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                $bon_neutre_detail->setId_canton($canton);
                                $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                $bon_neutre_detail_mapper->save($bon_neutre_detail);


                  }else{

                                              $bon_neutre = new Application_Model_EuBonNeutre();
                                  $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                                  $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                                  $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre->setBon_neutre_type("BAn");
                                  $bon_neutre->setBon_neutre_code($code_BAn);
                                  $bon_neutre->setBon_neutre_code_membre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
                                  $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_montant_utilise(0);
                                  $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_nom($nom);
                                  $bon_neutre->setBon_neutre_prenom($prenom);
                                  $bon_neutre->setBon_neutre_raison($raison);
                                  $bon_neutre->setBon_neutre_email($email);
                                  $bon_neutre->setBon_neutre_mobile($mobile);
                                  $bon_neutre_mapper->save($bon_neutre);




                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                  $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                  $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                  $bon_neutre_detail->setId_canton($canton);
                                  $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                  $bon_neutre_detail_mapper->save($bon_neutre_detail);


                    }


                            ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembreasso->error = "Opération bien effectuée. <br />
Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                            $sessionmembreasso->code_BAn = $code_BAn;

$sessionmembreasso->bon_neutre_appro_apporteur = "";
$sessionmembreasso->bon_neutre_appro_beneficiaire = "";
$sessionmembreasso->bon_neutre_appro_montant = "";
$sessionmembreasso->confirmation_envoi = "";

                            $this->_redirect('/integrateur/addbanappro');
                            return;

}   else {
                            $db->rollback();
                                          $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/integrateur/addbanappro');
                            return;
}

}else{


$sessionmembreasso->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
$sessionmembreasso->bon_neutre_appro_apporteur = $association_code_membre;
$sessionmembreasso->bon_neutre_appro_beneficiaire = $_POST['bon_neutre_appro_beneficiaire'];
$sessionmembreasso->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];



}

}

                    }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        //$this->_redirect('/integrateur/addbanappro');
                        return;
                    }
                  }   else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
}
    }




    public function addbanapprooldAction() {
     $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');
      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL) {
                  $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
}

    $date_id = Zend_Date::now();

    $request = $this->getRequest ();
    if ($request->isPost ()) {

        if (isset($_POST['bon_neutre_appro_beneficiaire']) && $_POST['bon_neutre_appro_beneficiaire']!="" && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {

                $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
          try {
                $date_id = Zend_Date::now();

                //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                do{
                                  $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                }while(count($bon_neutre_detail2) > 0);

/////////////////////////////////////controle code membre
if(strlen($_POST['bon_neutre_appro_beneficiaire']) != 20) {
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                  $this->_redirect('/integrateur/addbanappro');
                  return;
}else{
if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membre);
                                if(count($membre) == 0){
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                  $this->_redirect('/integrateur/addbanappro');
                  return;
                }
                $canton = $membre->id_canton;
                $nom = $membre->nom_membre;
                $prenom = $membre->prenom_membre;
                $email = $membre->email_membre;
                $mobile = $membre->portable_membre;
                $raison = "";
  }

if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membremorale);
                                if(count($membremorale) == 0){
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                  $this->_redirect('/integrateur/addbanappro');
                  return;
                }
                $canton = $membremorale->id_canton;
                $nom = "";
                $prenom = "";
                $email = $membremorale->email_membre;
                $mobile = $membremorale->portable_membre;
                $raison = $membremorale->raison_sociale;
  }
}


                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembreasso->code_membre);
          if(count($bon_neutre2) > 0){

                $bon_neutre = new Application_Model_EuBonNeutre();
                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2_montant = $bon_neutre_detail2_mapper->getSumByBonNeutreBanque($bon_neutre2->bon_neutre_id);

if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/integrateur/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre_detail2_montant){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn issu de la banque...";
  $this->_redirect('/integrateur/addbanappro');
  return;

}


$bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

$compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
$bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro->setBon_neutre_appro_beneficiaire($request->getParam("bon_neutre_appro_beneficiaire"));
$bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro->setBon_neutre_appro_montant($request->getParam("bon_neutre_appro_montant"));
$bon_neutre_appro->setBon_neutre_appro_apporteur($sessionmembreasso->code_membre);
$bon_neutre_appro_mapper->save($bon_neutre_appro);





                //$bon_neutre->setBon_neutre_code($code_BAn);
                //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_appro_montant"));
                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_appro_montant"));
                $bon_neutreM->update($bon_neutre);

                $bon_neutre_id = $bon_neutre->bon_neutre_id;



                  /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                  $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                  $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                  $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                  $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                  $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_appro_montant"));
                  $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/

///////////////////////////////////////////////////////////////////////////

$mont = $request->getParam("bon_neutre_appro_montant");

                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreBanque($bon_neutre->bon_neutre_id);
          foreach ($bon_neutre_detail as $detail){
                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL){
$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
$code_banque = $appro_detail->bon_neutre_appro_detail_banque;
}else{
$code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
}

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


            if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
$mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2M->update($bon_neutre_detail2);
                

                  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                  $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                  $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                  $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                  $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                  $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                  $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                  $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                }else{

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                $bon_neutre_detail2M->update($bon_neutre_detail2);


                  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                  $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                  $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                  $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                  $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                  $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                  $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                  $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                  $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                break;
                }


            }
              


///////////////////////////////////////////////////////////////////////////

                $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre($_POST['bon_neutre_appro_beneficiaire']);
                if(count($bon_neutre3) > 0){
                  $bon_neutre31 = new Application_Model_EuBonNeutre();
                  $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                  $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                  $bon_neutre31->setBon_neutre_code($code_BAn);
                  $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $request->getParam("bon_neutre_appro_montant"));
                  $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_appro_montant"));
                  $bon_neutre31M->update($bon_neutre31);


                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                                $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                $bon_neutre_detail->setId_canton($canton);
                                $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                $bon_neutre_detail_mapper->save($bon_neutre_detail);


                  }else{

                                  $bon_neutre = new Application_Model_EuBonNeutre();
                                  $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                                  $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                                  $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre->setBon_neutre_type("BAn");
                                  $bon_neutre->setBon_neutre_code($code_BAn);
                                  $bon_neutre->setBon_neutre_code_membre($_POST['bon_neutre_appro_beneficiaire']);
                                  $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_montant_utilise(0);
                                  $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_nom($nom);
                                  $bon_neutre->setBon_neutre_prenom($prenom);
                                  $bon_neutre->setBon_neutre_raison($raison);
                                  $bon_neutre->setBon_neutre_email($email);
                                  $bon_neutre->setBon_neutre_mobile($mobile);
                                  $bon_neutre_mapper->save($bon_neutre);




                    $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                  $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                  $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                  $bon_neutre_detail->setId_canton($canton);
                                  $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                  $bon_neutre_detail_mapper->save($bon_neutre_detail);


                    }

              ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembreasso->error = "Opération bien effectuée. <br />
Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
              $sessionmembreasso->code_BAn = $code_BAn;

                            $this->_redirect('/integrateur/addbanappro');
                            return;

}   else {
                            $db->rollback();
                                          $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            $this->_redirect('/integrateur/addbanappro');
                            return;
}

                }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->_redirect('/integrateur/addbanappro');
                        return;
                    }
                  }   else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
}
  }








     public function listbanapproapporteurAction() {
      /* page espacepersonnel/listrecu - Liste des reçus */

    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');
      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

/*if ($sessionmembreasso->association_code_membre) {
      $banappro = new Application_Model_EuBonNeutreApproMapper();
      $this->view->entries = $banappro->fetchAllByApporteur($sessionmembreasso->association_code_membre);
}else{
      $banappro = new Application_Model_EuBonNeutreApproMapper();
      $this->view->entries = $banappro->fetchAllByApporteur($sessionmembreasso->code_membre);	
}*/


      $banapprodetail = new Application_Model_EuBanApproDetailMapper();
      $this->view->entries = $banapprodetail->fetchAllByMembreasso($sessionmembreasso->membreasso_id);


      $this->view->tabletri = 1;

      }







    public function editmembreassomembreAction()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

    //if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {

      $date_id = new Zend_Date(Zend_Date::ISO_8601);



/////////////////////////////////////controle code membre
if(strlen($_POST['code_membre']) != 20) {
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
}else{
if(substr($_POST['code_membre'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['code_membre'], $membre);
                                if(count($membre) == 0){
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
                }
                
  }

if(substr($_POST['code_membre'], -1, 1) == 'M'){
                                /*$membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['code_membre'], $membremorale);
                                if(count($membremorale) == 0){*/
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre Personne Physique ...";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
                //}
                
  }
}

      ////////////////////////////////////////////////////////

      $membreasso = new Application_Model_EuMembreasso();
      $m_membreasso = new Application_Model_EuMembreassoMapper();
      $m_membreasso->find($_POST['membreasso_id'], $membreasso);

      $membreasso->setCode_membre($_POST['code_membre']);
      $m_membreasso->update($membreasso);

      $sessionmembreasso->code_membre = $_POST['code_membre'];

      $sessionmembreasso->error = "Opération bien effectuée ...";

      $this->_redirect('/integrateur/login');

    } else {  $sessionmembreasso->error = "Champs * obligatoire ...";

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMembreasso();
        $ma = new Application_Model_EuMembreassoMapper();
    $ma->find($id, $a);
    $this->view->membreasso = $a;
            }
  }

  } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuMembreasso();
        $ma = new Application_Model_EuMembreassoMapper();
    $ma->find($id, $a);
    $this->view->membreasso = $a;
            }
  }

  }



    public function editassociationmembreAction()
    {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {

      $date_id = new Zend_Date(Zend_Date::ISO_8601);



/////////////////////////////////////controle code membre
if(strlen($_POST['code_membre']) != 20) {
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                  $this->_redirect('/integrateur/editassociationmembre');
                  return;
}else{
if(substr($_POST['code_membre'], -1, 1) == 'P'){
                                /*$membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['code_membre'], $membre);
                                if(count($membre) == 0){*/
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre Morale ...";
                  $this->_redirect('/integrateur/editassociationmembre');
                  return;
                //}
                
  }

if(substr($_POST['code_membre'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['code_membre'], $membremorale);
                                if(count($membremorale) == 0){
                  $db->rollback();
                                $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                  $this->_redirect('/integrateur/editassociationmembre');
                  return;
                }
                
  }
}

//////////////////////////////////







      $association = new Application_Model_EuAssociation();
      $m_association = new Application_Model_EuAssociationMapper();
      $m_association->find($_POST['association_id'], $association);

      $association->setCode_membre($_POST['code_membre']);
      $m_association->update($association);

$sessionmembreasso->association_code_membre = $_POST['code_membre'];

      $sessionmembreasso->error = "Opération bien effectuée ...";

    $this->_redirect('/integrateur');

    } else {  $sessionmembreasso->error = "Champs * obligatoire ...";

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAssociation();
        $ma = new Application_Model_EuAssociationMapper();
    $ma->find($id, $a);
    $this->view->association = $a;
            }
  }

  } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuAssociation();
        $ma = new Application_Model_EuAssociationMapper();
    $ma->find($id, $a);
    $this->view->association = $a;
            }
  }

  }







  
  public function adddemandeAction() {
     /* page pointage/addpointage - Ajout d'une pointage */
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
     
   $request = $this->getRequest();
   $date_id = new Zend_Date(Zend_Date::ISO_8601);
     
   if ($request->isPost())  {
      $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
        try {
          $periode = $request->getParam("periode");
      list($debut, $fin) = explode("/",$periode);
        
      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        
      $this->view->debut = $debut;
            $this->view->fin = $fin;

            $type_demande = "Activation";
        
if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL) {
                  $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
}
$code_membre_employe = $sessionmembreasso->code_membre;

$membreasso = new Application_Model_EuMembreasso();
$membreasso_mapper = new Application_Model_EuMembreassoMapper();
$membreasso2 = $membreasso_mapper->fetchAllByAssociation($sessionmembreasso->membreasso_association);
$code_membre_employeur = $membreasso2->code_membre;

if(!isset($code_membre_employeur) || $code_membre_employeur == "" || $code_membre_employeur == NULL) {
                  $sessionmembreasso->error = "Votre responsable n'est pas un integrateur... Demander lui de mettre à jour son Code Membre";
                  $this->_redirect('/integrateur/adddemande');
                  return;
}





$partagem2_mapper = new Application_Model_EuPartagemMapper();
$partagem2 = $partagem2_mapper->findSomme3($sessionmembreasso->membreasso_id, $debut, $fin);
$montant_commission = $partagem2[0][0];

if($sessionmembreasso->membreasso_type == 1){
$partagea2_mapper = new Application_Model_EuPartageaMapper();
$partagea2 = $partagea2_mapper->findSomme3($sessionmembreasso->membreasso_association, $debut, $fin);
$montant_commission += $partagea2[0][0];
}            

if((count($partagem2) > 0 || count($partagea2) > 0) && $montant_commission > 0){  
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();
$demande_paiement = $demande_paiement_mapper->fetchAllByQuizaine($code_membre_employeur, $debut, $fin_1, $type_demande); 
if (count($demande_paiement) > 0) {
                  $sessionmembreasso->error = "Vous avez déjà émit la demande de paiement de cette quinzaine ...";
                  $this->_redirect('/integrateur/adddemande');
                  return;
}else{

////////demande_paiement
$demande_paiement = new Application_Model_EuDemandePaiement();
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();

$compteur_demande_paiement = $demande_paiement_mapper->findConuter() + 1;
$demande_paiement->setId_demande_paiement($compteur_demande_paiement);
$demande_paiement->setMontant_demande_paiement($montant_commission);
$demande_paiement->setDate_demande_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$demande_paiement->setCode_membre_employeur($code_membre_employeur);
$demande_paiement->setPayer(0);
$demande_paiement->setDate_debut($debut);
$demande_paiement->setDate_fin($fin_1);
$demande_paiement->setType_demande($type_demande);
$demande_paiement_mapper->save($demande_paiement);


/////paiement
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($partagem2[0][0]);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employe);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement_mapper->save($paiement);

if($sessionmembreasso->membreasso_type == 1){
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($partagea2[0][0]);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employe);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement_mapper->save($paiement);
}

///////detail_paiement
$partagem_mapper = new Application_Model_EuPartagemMapper();
$partagem = $partagem_mapper->fetchAllByCommissionSouscription3($sessionmembreasso->membreasso_id, $debut, $fin);
foreach ($partagem as $row) {
      
$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($row->partagem_montant);
$detail_paiement->setBon_neutre_appro_id(NULL);
$detail_paiement->setSouscription_id($row->partagem_souscription);
$detail_paiement_mapper->save($detail_paiement);


$partagem3 = new Application_Model_EuPartagem();
$partagem3_mapper = new Application_Model_EuPartagemMapper();
$partagem3_mapper->find($row->partagem_id, $partagem3);
      
$partagem3->setPartagem_montant_utilise($partagem3->getPartagem_montant_utilise() + $row->partagem_montant);
$partagem3->setPartagem_montant_solde($partagem3->getPartagem_montant_solde() - $row->partagem_montant);
$partagem3->setPartagem_montant_impot(0);
$partagem3_mapper->update($partagem3);

}

if($sessionmembreasso->membreasso_type == 1){
$partagea_mapper = new Application_Model_EuPartageaMapper();
$partagea = $partagea_mapper->fetchAllByCommissionSouscription3($sessionmembreasso->membreasso_association, $debut, $fin);
foreach ($partagea as $row) {
      
$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($row->partagea_montant);
$detail_paiement->setBon_neutre_appro_id(NULL);
$detail_paiement->setSouscription_id($row->partagea_souscription);
$detail_paiement_mapper->save($detail_paiement);


$partagea3 = new Application_Model_EuPartagea();
$partagea3_mapper = new Application_Model_EuPartageaMapper();
$partagea3_mapper->find($row->partagea_id, $partagea3);
      
$partagea3->setPartagea_montant_utilise($partagea3->getPartagea_montant_utilise() + $row->partagea_montant);
$partagea3->setPartagea_montant_solde($partagea3->getPartagea_montant_solde() - $row->partagea_montant);
$partagea3->setPartagea_montant_impot(0);
$partagea3_mapper->update($partagea3);

}
}


        $db->commit();
        $sessionmembreasso->error = "Operation bien effectuee ...";
        //$this->view->montanttotal = $montanttotal;
        $this->_redirect('/integrateur/listdemande');
}
}     
        } catch (Exception $exc)  {
       $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             return;
      }
     
       }
  
  }






  
  public function adddemandebanAction() {
     /* page pointage/addpointage - Ajout d'une pointage */
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
     
   $request = $this->getRequest();
   $date_id = new Zend_Date(Zend_Date::ISO_8601);
     
   if ($request->isPost())  {
      $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
        try {
          $periode = $request->getParam("periode");
      list($debut, $fin) = explode("/",$periode);
        
      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        
      $this->view->debut = $debut;
            $this->view->fin = $fin;

            $type_demande = "BAn";
        
if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL) {
                  $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
}
$code_membre_employe = $sessionmembreasso->code_membre;

$membreasso = new Application_Model_EuMembreasso();
$membreasso_mapper = new Application_Model_EuMembreassoMapper();
$membreasso2 = $membreasso_mapper->fetchAllByAssociation($sessionmembreasso->membreasso_association);
$code_membre_employeur = $membreasso2->code_membre;

if(!isset($code_membre_employeur) || $code_membre_employeur == "" || $code_membre_employeur == NULL) {
                  $sessionmembreasso->error = "Votre responsable n'est pas un integrateur... Demander lui de mettre à jour son Code Membre";
                  $this->_redirect('/integrateur/adddemandeban');
                  return;
}




$code_membre_surveillance = "0010010010010000002M";
$code_compte_surveillance = "NN-TMARGE-0010010010010000002M";

$bon_neutre_appro2_mapper = new Application_Model_EuBonNeutreApproMapper();
$bon_neutre_appro2 = $bon_neutre_appro2_mapper->findSomme3($sessionmembreasso->code_membre, $debut, $fin);

$tauxcommission = Util_Utils::getParametre('tauxcommisionban', 'commission_BAn');

$montant_commission = $bon_neutre_appro2[0] * $tauxcommission / 100;

if((count($bon_neutre_appro2) > 0) && $montant_commission > 0){  
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();
$demande_paiement = $demande_paiement_mapper->fetchAllByQuizaine($code_membre_employeur, $debut, $fin_1, $type_demande); 
if (count($demande_paiement) > 0) {
                  $sessionmembreasso->error = "Vous avez déjà émit la demande de paiement de cette quinzaine ...";
                  $this->_redirect('/integrateur/adddemandeban');
                  return;
}else{

////////demande_paiement


$demande_paiement = new Application_Model_EuDemandePaiement();
$demande_paiement_mapper = new Application_Model_EuDemandePaiementMapper();

$compteur_demande_paiement = $demande_paiement_mapper->findConuter() + 1;
$demande_paiement->setId_demande_paiement($compteur_demande_paiement);
$demande_paiement->setMontant_demande_paiement($montant_commission);
$demande_paiement->setDate_demande_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$demande_paiement->setCode_membre_employeur($code_membre_employeur);
$demande_paiement->setPayer(0);
$demande_paiement->setDate_debut($debut);
$demande_paiement->setDate_fin($fin_1);
$demande_paiement->setType_demande($type_demande);
$demande_paiement_mapper->save($demande_paiement);


/////paiement
$paiement = new Application_Model_EuPaiement();
$paiement_mapper = new Application_Model_EuPaiementMapper();

$compteur_paiement = $paiement_mapper->findConuter() + 1;
$paiement->setId_paiement($compteur_paiement);
$paiement->setMontant_paiement($montant_commission);
$paiement->setDate_paiement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$paiement->setCode_membre_employe($code_membre_employe);
$paiement->setId_demande_paiement($compteur_demande_paiement);
$paiement_mapper->save($paiement);


///////detail_paiement
$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();
$bon_neutre_appro = $bon_neutre_appro_mapper->fetchAllByCommission3($sessionmembreasso->code_membre, $debut, $fin);
foreach ($bon_neutre_appro as $row) {




              ////////////////////////////////////////////////////////////////////////////
$tauxcommission = Util_Utils::getParametre('tauxcommisionban', 'commission_BAn');

$montantFraisExploitation = $row->bon_neutre_appro_montant * $tauxcommission / 100;

        //creation et utilisation de la source NN
                 $nn = new Application_Model_EuNn();
                 $t_nn = new Application_Model_DbTable_EuNn();
                 $count = $nn->findConuter() + 1;
                 $nn->setId_nn($count)
                    ->setDate_emission($date_id->toString('yyyy-MM-dd HH:mm:ss'))
                    ->setType_emission('Auto Int')
                    ->setMontant_emis($montantFraisExploitation)
                    ->setMontant_remb($montantFraisExploitation)
                    ->setSolde_nn(0.0)
                    ->setEmetteur_nn($code_membre_surveillance)
                    ->setCode_type_nn("NNMARGE")
                    ->setId_utilisateur($sessionmembreasso->membreasso_id);
                 $t_nn->insert($nn->toArray());
        
                    $compteNnMargeSurveillance = $code_compte_surveillance;
                  $compte = new Application_Model_EuCompte();
                  $compteM = new Application_Model_EuCompteMapper();
                  $compteM->find($compteNnMargeSurveillance, $compte);

                  $compte->setSolde($compte->getSolde() + $montantFraisExploitation);
                  $compteM->update($compte);



$mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;

        /*$place_op = new Application_Model_EuOperation();
                $place_op->setId_operation($compteur)
                        ->setDate_op($date_id->toString('yyyy-MM-dd'))
                        ->setMontant_op($montantFraisExploitation)
                        ->setCode_membre(NULL)
                        ->setCode_membre_morale($code_membre_surveillance)
                        ->setHeure_op($date_id->toString('HH:mm:ss'))
                        ->setCode_produit("NN")
                        ->setId_utilisateur($sessionmembreasso->membreasso_id)
                        ->setLib_op("CREATION DE COMMISSION APPROVISIONNEMENT BAn")
                        ->setCode_cat('BAn')
                        ->setType_op('BAn');*/
                //$mapper_op->save($place_op);

//Util_Utils::addOperation($compteur,NULL,$code_membre_surveillance,'BAn',$montantFraisExploitation,'NN',"CREATION DE COMMISSION APPROVISIONNEMENT BAn",'BAn',$date_id->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), $sessionmembreasso->membreasso_id);
                                
              ///////////////////////////////////////////////////////////////////////////////////////



$detail_paiement = new Application_Model_EuDetailPaiement();
$detail_paiement_mapper = new Application_Model_EuDetailPaiementMapper();

$compteur_detail_paiement = $detail_paiement_mapper->findConuter() + 1;
$detail_paiement->setId_detail_paiement($compteur_detail_paiement);
$detail_paiement->setId_paiement($compteur_paiement);
$detail_paiement->setId_pointage(NULL);
$detail_paiement->setMontant_paiement($montantFraisExploitation);
$detail_paiement->setBon_neutre_appro_id($row->bon_neutre_appro_id);
$detail_paiement->setSouscription_id(NULL);
$detail_paiement_mapper->save($detail_paiement);

}


        $db->commit();
        $sessionmembreasso->error = "Operation bien effectuee ...";
        //$this->view->montanttotal = $montanttotal;
        $this->_redirect('/integrateur/listdemande');
}
}     
        } catch (Exception $exc)  {
       $db->rollback();
             $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             return;
      }
     
       }
  
  }



  
  public function listdemandeAction() {
     /* page pointage/listdemande - liste des demandes de paiement */
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        
if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL) {
                  $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
}
     $demande = new Application_Model_EuDemandePaiementMapper();
     $this->view->entries = $demande->fetchAllByEmploye($sessionmembreasso->code_membre);

     $this->view->tabletri = 1;
  }
  
  
  public function detaildemandeAction() {
     /* page pointage/listdemande - liste des demandes de paiement */
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

   //$id = $this->_request->getParam('id');
     $m_paiement = new Application_Model_EuPaiementMapper();
     $this->view->entries = $m_paiement->fetchAllByEmploye($sessionmembreasso->code_membre);
     $this->view->tabletri = 1;
  }




  
  public function detaildemande2Action() {
     /* page pointage/listdemande - liste des demandes de paiement */
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

   //$id = $this->_request->getParam('id');
     $m_paiement = new Application_Model_EuPaiementMapper();
     $this->view->entries = $m_paiement->fetchAllByEmployeur($sessionmembreasso->association_code_membre);
     $this->view->tabletri = 1;
  }













public function commissionnoncalculertiers3Action()
    {
ini_set('memory_limit', '512M');
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

$id = $this->_request->getParam('id');
$membreasso = $this->_request->getParam('membreasso');
   
$eusouscription = new Application_Model_DbTable_EuSouscription();
$select = $eusouscription->select();
$select->where("publier = 3");
$select->where("souscription_membreasso = ".$membreasso."");
$rowseusouscription = $eusouscription->fetchAll($select);

foreach ($rowseusouscription as $value) {
  
$eupartagem = new Application_Model_DbTable_EuPartagem();
$select = $eupartagem->select();
$select->where("partagem_souscription = ".$value->souscription_id."");
$select->where("partagem_montant = 27");
$rowseupartagem = $eupartagem->fetchAll($select);


$eupartagea = new Application_Model_DbTable_EuPartagea();
$select = $eupartagea->select();
$select->where("partagea_souscription = ".$value->souscription_id."");
$select->where("partagea_montant = 82");
$rowseupartagea = $eupartagea->fetchAll($select);

  
$eumembretierscode = new Application_Model_DbTable_EuMembretierscode();
$select = $eumembretierscode->select();
$select->where("membretierscode_souscription = ".$value->souscription_id."");
$select->where("code_membre IS NOT NULL");
$rowseumembretierscode = $eumembretierscode->fetchAll($select);



for ($i=0; $i < (count($rowseumembretierscode) - count($rowseupartagem)); $i++) { 

$partagem = new Application_Model_EuPartagem();
$partagem_mapper = new Application_Model_EuPartagemMapper();

$compteur_partagem = $partagem_mapper->findConuter() + 1;
//$partagem->setPartagem_id($compteur_partagem);
$partagem->setPartagem_membreasso($membreasso);
$partagem->setPartagem_souscription(0);//$value->souscription_id
$partagem->setPartagem_montant(27);
$partagem->setPartagem_montant_utilise(0);
$partagem->setPartagem_montant_solde(27);
$partagem_mapper->save($partagem);

}


for ($i=0; $i < (count($rowseumembretierscode) - count($rowseupartagea)); $i++) { 

$membreasso1 = new Application_Model_EuMembreasso();
$m_membreasso1 = new Application_Model_EuMembreassoMapper();
$m_membreasso1->find($membreasso, $membreasso1);
  
$partagea = new Application_Model_EuPartagea();
$partagea_mapper = new Application_Model_EuPartageaMapper();

$compteur_partagea = $partagea_mapper->findConuter() + 1;
//$partagea->setPartagea_id($compteur_partagea);
$partagea->setPartagea_association($membreasso1->membreasso_association);
$partagea->setPartagea_souscription(0);//$value->souscription_id
$partagea->setPartagea_montant(82);
$partagea->setPartagea_montant_utilise(0);
$partagea->setPartagea_montant_solde(82);
$partagea_mapper->save($partagea);

}




}


echo "ok2";




    }





public function commissionnoncalculer3Action()
    {
ini_set('memory_limit', '512M');
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

  if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

$id = $this->_request->getParam('id');
$membreasso = $this->_request->getParam('membreasso');

$eusouscription = new Application_Model_DbTable_EuSouscription();
$select = $eusouscription->select();
$select->where("publier = 3");
$select->where("souscription_membreasso = ".$membreasso."");
$rowseusouscription = $eusouscription->fetchAll($select);

foreach ($rowseusouscription as $value) {
  
$eupartagem = new Application_Model_DbTable_EuPartagem();
$select = $eupartagem->select();
$select->where("partagem_souscription = ".$value->souscription_id."");
$rowseupartagem = $eupartagem->fetchAll($select);

if(count($rowseupartagem) == 0){

$partagem = new Application_Model_EuPartagem();
$partagem_mapper = new Application_Model_EuPartagemMapper();

$compteur_partagem = $partagem_mapper->findConuter() + 1;
//$partagem->setPartagem_id($compteur_partagem);
$partagem->setPartagem_membreasso($membreasso);
$partagem->setPartagem_souscription(0);//$value->souscription_id
$partagem->setPartagem_montant($value->souscription_montant * 0.05 * 0.25);
$partagem->setPartagem_montant_utilise(0);
$partagem->setPartagem_montant_solde($value->souscription_montant * 0.05 * 0.25);
$partagem_mapper->save($partagem);

}


$membreasso1 = new Application_Model_EuMembreasso();
$m_membreasso1 = new Application_Model_EuMembreassoMapper();
$m_membreasso1->find($membreasso, $membreasso1);
  
$eupartagea = new Application_Model_DbTable_EuPartagea();
$select = $eupartagea->select();
$select->where("partagea_souscription = ".$value->souscription_id."");
$rowseupartagea = $eupartagea->fetchAll($select);

if(count($rowseupartagea) == 0){

$partagea = new Application_Model_EuPartagea();
$partagea_mapper = new Application_Model_EuPartageaMapper();

$compteur_partagea = $partagea_mapper->findConuter() + 1;
//$partagea->setPartagea_id($compteur_partagea);
$partagea->setPartagea_association($membreasso1->membreasso_association);
$partagea->setPartagea_souscription(0);//$value->souscription_id
$partagea->setPartagea_montant($value->souscription_montant * 0.05 * 0.75);
$partagea->setPartagea_montant_utilise(0);
$partagea->setPartagea_montant_solde($value->souscription_montant * 0.05 * 0.75);
$partagea_mapper->save($partagea);

}


}


echo "ok";




    }






   public  function addbanapprocmAction()  {
	   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcint');
       if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

if($sessionmembreasso->appro != 1 && $sessionmembreasso->membreasso_type == 2) {
$sessionmembreasso->error = "Vous n'etes pas autorisé à faire des approvisionnements. Merci.";
return;
}

	   
	   if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL) {
           $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
           $this->_redirect('/integrateur/editmembreassomembre');
           return;
       }
	   
	   $t_zone = new Application_Model_DbTable_EuZone();
       $zones = $t_zone->fetchAll();
       $this->view->zones = $zones;
       $t_pays = new Application_Model_DbTable_EuPays();
       $pays = $t_pays->fetchAll();
       $this->view->pays = $pays;
       $t_region = new Application_Model_DbTable_EuRegion();
       $regions = $t_region->fetchAll();
       $this->view->regions = $regions;
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $prefectures = $t_prefecture->fetchAll();
       $this->view->prefectures = $prefectures;
       $t_canton = new Application_Model_DbTable_EuCanton();
       $cantons = $t_canton->fetchAll();
       $this->view->cantons = $cantons;


       $request = $this->getRequest();
	   if($request->isPost()) {
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				if(((isset($_POST['bon_neutre_nom']) && $_POST['bon_neutre_nom']!="" && isset($_POST['bon_neutre_prenom']) 
				  && $_POST['bon_neutre_prenom']!="" && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="") 
                  || (isset($_POST['bon_neutre_raison']) && $_POST['bon_neutre_raison']!="")) 
				  && isset($_POST['bon_neutre_mobile']) && $_POST['bon_neutre_mobile'] > 0 
				  && isset($_POST['bon_neutre_email']) && $_POST['bon_neutre_email']!="" 
				  && isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']!="" 
                  && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {
				
                      $date_id = Zend_Date::now();
				      if($sessionmembreasso->guichet == 1) {
                          $association_code_membre = $sessionmembreasso->association_code_membre;
                      } else {
                          $association_code_membre = $sessionmembreasso->code_membre;
                      }

					  
					  /////////////////controle nom prenom /////////////////////////////////////////////
                      if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PP") {
					       $eupreinscription = new Application_Model_DbTable_EuMembre();
                           $prenom_membre = $_POST['bon_neutre_prenom'];
                           $prenom_membre = str_replace("'", " ", $prenom_membre);
                           $tabprenom = explode(" ",$prenom_membre);
          
                           $nom_membre = $_POST['bon_neutre_nom'];
                           $nom_membre = str_replace("'", " ", $nom_membre);

                           $select = $eupreinscription->select();
                           $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

                           //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
                           foreach($tabprenom as $value) {
                              $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                           }
						   
						   $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                           $select->limit(1);
                           $rowseupreinscription = $eupreinscription->fetchRow($select);
                           if(count($rowseupreinscription) > 0) {
                               $sessionmembreasso->error = $_POST['bon_neutre_nom']." ".$_POST['bon_neutre_prenom']." est déjà membre ...";
                               $db->rollback();
                               return;
                           }
				        }
						
						///////////////// controle raison sociale ///////////////////
                        if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PM") {
                             $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                             $select = $eupreinscription->select();
                             $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['bon_neutre_raison'])));

                             $select->limit(1);
                             $rowseupreinscription = $eupreinscription->fetchRow($select);
                             if(count($rowseupreinscription) > 0) {
                                  $sessionmembreasso->error = $_POST['bon_neutre_raison']." est déjà membre ...";
                                  $db->rollback();
                                  return;
                             }
                          }
						  
						  $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                          $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($association_code_membre);
						  
						  if(count($bon_neutre2) == 0) {
							 $db->rollback();
                             $sessionmembreasso->error = "Le membre apporteur ne dispose pas de BAn ...";
                             return;  
						  }
						  
						  $bon_neutre = new Application_Model_EuBonNeutre();
                          $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                          $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
						  
						  if($request->getParam("bon_neutre_appro_montant") <= 0)  {
                               $db->rollback();
                               $sessionmembreasso->error = "Le montant à allouer doit etre supérieur à 0...";
                               return;
                          }

                          if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()) {
                              $db->rollback();
                              $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                              return;
                          }
						  
						  //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                          do {
                             $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                             $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                             $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                          } while(count($bon_neutre_detail2) > 0);
						  
						  $bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
                          $bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

                          $compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
                          $bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                          $bon_neutre_appro->setBon_neutre_appro_beneficiaire(NULL);
                          $bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_appro->setBon_neutre_appro_montant($request->getParam("bon_neutre_appro_montant"));
                          $bon_neutre_appro->setBon_neutre_appro_apporteur($association_code_membre);
                          $bon_neutre_appro_mapper->save($bon_neutre_appro);
						  
						  //$bon_neutre->setBon_neutre_code($code_BAn);
                          //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                          $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_appro_montant"));
                          $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_appro_montant"));
                          $bon_neutreM->update($bon_neutre);
						  
						  $bon_neutre_id = $bon_neutre->bon_neutre_id;
						  
						  /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                          $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                          $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                          $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                          $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                          $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                          $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                          $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_appro_montant"));
                          $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
						  
						  if($sessionmembreasso->guichet == 1)  {
                               $ban_appro_detail = new Application_Model_EuBanApproDetail();
                               $ban_appro_detail_mapper = new Application_Model_EuBanApproDetailMapper();

                               $compteur_ban_appro_detail = $ban_appro_detail_mapper->findConuter() + 1;
                               $ban_appro_detail->setBan_appro_detail_id($compteur_ban_appro_detail);
                               $ban_appro_detail->setAssociation_id($sessionmembreasso->membreasso_association);
                               $ban_appro_detail->setBan_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                               $ban_appro_detail->setBan_appro_detail_montant($request->getParam("bon_neutre_appro_montant"));
                               $ban_appro_detail->setMembreasso_id($sessionmembreasso->membreasso_id);
                               $ban_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                               $ban_appro_detail_mapper->save($ban_appro_detail);
                           }
						   
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
                           $mont = $request->getParam("bon_neutre_appro_montant");
						   $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                           $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						   foreach($bon_neutre_detail as $detail) {
							  $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                              $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                              $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                              if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL) {
                                  $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
                                  $code_banque = $appro_detail->bon_neutre_appro_detail_banque;
                              } else {
                                  $code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
                              }

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }

							  
							  if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                                    $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                    $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                                    $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                                    $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                    $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                                    $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);
                                
						  
						  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                          $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                          $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                          $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                          $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                          $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                          $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                          $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                          $bon_neutre_utilise2M->save($bon_neutre_utilise2);
						  
                                }  else {
                                    $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                                    $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                                    $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                    $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
                                    $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                                    $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);
                                
						  
						  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                          $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                          $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                          $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                          $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                          $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                          $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                          $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                          $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                          $bon_neutre_utilise2M->save($bon_neutre_utilise2);
						  
                                    break;
                                }
							  
						   }
						   
						   ///////////////////////////////////////////////////////////////////////////
                           $bon_neutre = new Application_Model_EuBonNeutre();
                           $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                           $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                           $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                           $bon_neutre->setBon_neutre_type("BAn");
                           $bon_neutre->setBon_neutre_code($code_BAn);
                           $bon_neutre->setBon_neutre_code_membre(NULL);
                           $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                           $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_appro_montant"));
                           $bon_neutre->setBon_neutre_montant_utilise(0);
                           $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_appro_montant"));
                           $bon_neutre->setBon_neutre_nom($_POST['bon_neutre_nom']);
                           $bon_neutre->setBon_neutre_prenom($_POST['bon_neutre_prenom']);
                           $bon_neutre->setBon_neutre_raison($_POST['bon_neutre_raison']);
                           $bon_neutre->setBon_neutre_email($_POST['bon_neutre_email']);
                           $bon_neutre->setBon_neutre_mobile($_POST['bon_neutre_mobile']);
                           $bon_neutre_mapper->save($bon_neutre);

                           $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                           $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                           $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                           $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                           $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                           $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                           $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                           $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                           $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                           $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                           $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                           $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                           $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                           $bon_neutre_detail->setId_canton($_POST['id_canton']);
                           $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                           $bon_neutre_detail_mapper->save($bon_neutre_detail);
								  	  
						   ///////////////////////////////////////////////////////////////////////////////////////

                           $db->commit();
                           $sessionmembreasso->error = "Opération bien effectuée. <br />
                           Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
						   Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
						   
						   $montantbanapprocm = $request->getParam("bon_neutre_appro_montant");
						   $sessionmembreasso->code_BAn = $code_BAn;
                           $sessionmembreasso->montantbanapprocm = $montantbanappro;
						   $sessionmembreasso->bon_neutre_detail_id = $compteur_bon_neutre_detail;
						   

                           $sessionmembreasso->bon_neutre_appro_apporteur = "";
                           $sessionmembreasso->bon_neutre_nom = "";
                           $sessionmembreasso->bon_neutre_prenom = "";
                           $sessionmembreasso->bon_neutre_raison = "";
                           $sessionmembreasso->bon_neutre_personne = "";
                           $sessionmembreasso->bon_neutre_mobile = "";
                           $sessionmembreasso->bon_neutre_email = "";
                           //$sessionmembreasso->id_canton = "";
                           $sessionmembreasso->bon_neutre_appro_montant = "";
                           $sessionmembreasso->confirmation_envoi = "";
                           $sessionmembreasso->date_nais_membre = "";

                           $this->_redirect('/integrateur/addbanapprocm');
						  
       	          }  else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
	   
	        } catch(Exception $exc) {
                $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                $db->rollback();
                return;
            }
	   }
	   
   }







    public function addbanapprocmoldsAction() {
      $sessionmembreasso = new Zend_Session_Namespace('membreasso');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcint');
      if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}


if(!isset($sessionmembreasso->code_membre) || $sessionmembreasso->code_membre == "" || $sessionmembreasso->code_membre == NULL) {
                  $sessionmembreasso->error = "Vous n'etes pas un integrateur... Veuillez mettre à jour votre <strong>Code Membre Personne Physique</strong>. Il n'est pas renseigné ou n'est pas correct.";
                  $this->_redirect('/integrateur/editmembreassomembre');
                  return;
}



        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if ((
  (isset($_POST['bon_neutre_nom']) && $_POST['bon_neutre_nom']!="" && isset($_POST['bon_neutre_prenom']) && $_POST['bon_neutre_prenom']!="" && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="") ||
  (isset($_POST['bon_neutre_raison']) && $_POST['bon_neutre_raison']!="")
  ) &&
  
  isset($_POST['bon_neutre_mobile']) && $_POST['bon_neutre_mobile']>0 &&
  isset($_POST['bon_neutre_email']) && $_POST['bon_neutre_email']!="" &&
  isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']!="" /*&&
  isset($_POST['id_canton']) && $_POST['id_canton']!=""*/

   && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();


if($sessionmembreasso->guichet == 1){
$association_code_membre = $sessionmembreasso->association_code_membre;
}else{
$association_code_membre = $sessionmembreasso->code_membre;
}


              /////////////////controle nom prenom
if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PP"){
              $eupreinscription = new Application_Model_DbTable_EuMembre();
              $prenom_membre = $_POST['bon_neutre_prenom'];
        $prenom_membre = str_replace("'", " ", $prenom_membre);
        $tabprenom = explode(" ",$prenom_membre);
          
        $nom_membre = $_POST['bon_neutre_nom'];
        $nom_membre = str_replace("'", " ", $nom_membre);

              $select = $eupreinscription->select();
              $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

              //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
              foreach ($tabprenom as $value) {
                $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
              }

              $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
              //$select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
              $select->limit(1);
              $rowseupreinscription = $eupreinscription->fetchRow($select);
              if(count($rowseupreinscription) > 0) {
                $sessionmembreasso->error = $_POST['bon_neutre_nom']." ".$_POST['bon_neutre_prenom']." est déjà membre ...";
                $db->rollback();
                //$this->_redirect('/integrateur/addbanapprocm');
                return;
              }
}


                        /////////////////controle raison sociale
if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PM"){
              $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                      $select = $eupreinscription->select();
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['bon_neutre_raison'])));

            /*$tabraison = explode("", $bon_neutre->bon_neutre_raison);
            foreach ($tabraison as $value) {
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
            }*/

                      $select->limit(1);
                      $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
                            $sessionmembreasso->error = $_POST['bon_neutre_raison']." est déjà membre ...";
                            $db->rollback();
                            //$this->_redirect('/integrateur/addbanapprocm');
                            return;
                  }
}



if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1){



                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($association_code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/integrateur/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/integrateur/addbanapprocm');
  return;

}



                $sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
                if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre3($sessionmembreasso->code_membre)){
                    $this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
                    $sessionmembreasso->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;


//$compteur = Util_Utils::findConuter() + 1; 
//Util_Utils::addSms3Easys($compteur, $sessionmembreasso->portable_membre, $sms_connexion->sms_connexion_code_recu);        


$sessionmembreasso->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
$sessionmembreasso->bon_neutre_appro_apporteur = $association_code_membre;
$sessionmembreasso->bon_neutre_nom = $_POST['bon_neutre_nom'];
$sessionmembreasso->bon_neutre_prenom = $_POST['bon_neutre_prenom'];
$sessionmembreasso->bon_neutre_raison = $_POST['bon_neutre_raison'];
$sessionmembreasso->bon_neutre_personne = $_POST['bon_neutre_personne'];
$sessionmembreasso->bon_neutre_mobile = $_POST['bon_neutre_mobile'];
$sessionmembreasso->bon_neutre_email = $_POST['bon_neutre_email'];
//$sessionmembreasso->id_canton = $_POST['id_canton'];
$sessionmembreasso->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];
$sessionmembreasso->date_nais_membre = $_POST['date_nais_membre'];

                            $db->commit();


                }else {
                    //$code_envoi = strtoupper(Util_Utils::genererCodeSMS(9));/
                    do{
                                            $code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
                                        $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
                                        $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
                    }while(count($sms_connexion2) > 0);
                    //$code_recu = strtoupper(Util_Utils::genererCodeSMS(9));/
                    do{
                                                            $code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
                                                            $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
                                                            $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
                    }while(count($sms_connexion2) > 0);

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $sms_connexion1 = new Application_Model_EuSmsConnexion();
                    $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

                    $compteur = $sms_connexion1_mapper->findConuter() + 1;
                    $sms_connexion1->setSms_connexion_id($compteur);
                    $sms_connexion1->setSms_connexion_code_envoi($code_envoi);
                    $sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");
                    $sms_connexion1->setSms_connexion_code_membre($sessionmembreasso->code_membre);
                    $sms_connexion1->setSms_connexion_utilise(0);
                    $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $sms_connexion1_mapper->save($sms_connexion1);


//$compteur = Util_Utils::findConuter() + 1; 
//Util_Utils::addSms3Easys($compteur, $sessionmembreasso->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

                    $this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
                    $sessionmembreasso->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;


$sessionmembreasso->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...3";
$sessionmembreasso->bon_neutre_appro_apporteur = $association_code_membre;
$sessionmembreasso->bon_neutre_nom = $_POST['bon_neutre_nom'];
$sessionmembreasso->bon_neutre_prenom = $_POST['bon_neutre_prenom'];
$sessionmembreasso->bon_neutre_raison = $_POST['bon_neutre_raison'];
$sessionmembreasso->bon_neutre_personne = $_POST['bon_neutre_personne'];
$sessionmembreasso->bon_neutre_mobile = $_POST['bon_neutre_mobile'];
$sessionmembreasso->bon_neutre_email = $_POST['bon_neutre_email'];
//$sessionmembreasso->id_canton = $_POST['id_canton'];
$sessionmembreasso->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];
$sessionmembreasso->date_nais_membre = $_POST['date_nais_membre'];

                            $db->commit();

                }


}   else {
                            $db->rollback();
                                          $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/integrateur/addbanapprocm');
                            return;
}



}else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2){




$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
$sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
if($sms_connexion->sms_connexion_code_envoi == $sessionmembreasso->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembreasso->code_membre){
//if(isset($_POST['code_recu']) && $_POST['code_recu'] == $sessionmembreasso->confirmation_envoi){
                        $sms_connexion1 = new Application_Model_EuSmsConnexion();
                        $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
                        $sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

                        $sms_connexion1->setSms_connexion_utilise(1);
                        $sms_connexion1_mapper->update($sms_connexion1);

                        $sessionmembreasso->confirmation_envoi = "";

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($association_code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/integrateur/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembreasso->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/integrateur/addbanapprocm');
  return;

}








                //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                do{
                                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                }while(count($bon_neutre_detail2) > 0);




$bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

$compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
$bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro->setBon_neutre_appro_beneficiaire(NULL);
$bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro->setBon_neutre_appro_montant($request->getParam("bon_neutre_appro_montant"));
$bon_neutre_appro->setBon_neutre_appro_apporteur($association_code_membre);
$bon_neutre_appro_mapper->save($bon_neutre_appro);





                                //$bon_neutre->setBon_neutre_code($code_BAn);
                                //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_appro_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/





if($sessionmembreasso->guichet == 1){

$ban_appro_detail = new Application_Model_EuBanApproDetail();
$ban_appro_detail_mapper = new Application_Model_EuBanApproDetailMapper();

$compteur_ban_appro_detail = $ban_appro_detail_mapper->findConuter() + 1;
$ban_appro_detail->setBan_appro_detail_id($compteur_ban_appro_detail);
$ban_appro_detail->setAssociation_id($sessionmembreasso->membreasso_association);
$ban_appro_detail->setBan_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$ban_appro_detail->setBan_appro_detail_montant($request->getParam("bon_neutre_appro_montant"));
$ban_appro_detail->setMembreasso_id($sessionmembreasso->membreasso_id);
$ban_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$ban_appro_detail_mapper->save($ban_appro_detail);

}

///////////////////////////////////////////////////////////////////////////

$mont = $request->getParam("bon_neutre_appro_montant");

                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL){
$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
$code_banque = $appro_detail->bon_neutre_appro_detail_banque;
}else{
$code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
}

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
$mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                       $bon_neutre_utilise2->setUsertable("membreasso");
                       $bon_neutre_utilise2->setUser_id($sessionmembreasso->membreasso_id);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }


                        }
                            


///////////////////////////////////////////////////////////////////////////

                

                                  $bon_neutre = new Application_Model_EuBonNeutre();
                                  $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                                  $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                                  $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre->setBon_neutre_type("BAn");
                                  $bon_neutre->setBon_neutre_code($code_BAn);
                                  $bon_neutre->setBon_neutre_code_membre(NULL);
                                  $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_montant_utilise(0);
                                  $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_nom($_POST['bon_neutre_nom']);
                                  $bon_neutre->setBon_neutre_prenom($_POST['bon_neutre_prenom']);
                                  $bon_neutre->setBon_neutre_raison($_POST['bon_neutre_raison']);
                                  $bon_neutre->setBon_neutre_email($_POST['bon_neutre_email']);
                                  $bon_neutre->setBon_neutre_mobile($_POST['bon_neutre_mobile']);
                                  $bon_neutre_mapper->save($bon_neutre);




                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                  $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                  $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                  $bon_neutre_detail->setId_canton($_POST['id_canton']);
                                  $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                  $bon_neutre_detail_mapper->save($bon_neutre_detail);


                    


                            ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembreasso->error = "Opération bien effectuée. <br />
Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                            $sessionmembreasso->code_BAn = $code_BAn;

$sessionmembreasso->bon_neutre_appro_apporteur = "";
$sessionmembreasso->bon_neutre_nom = "";
$sessionmembreasso->bon_neutre_prenom = "";
$sessionmembreasso->bon_neutre_raison = "";
$sessionmembreasso->bon_neutre_personne = "";
$sessionmembreasso->bon_neutre_mobile = "";
$sessionmembreasso->bon_neutre_email = "";
//$sessionmembreasso->id_canton = "";
$sessionmembreasso->bon_neutre_appro_montant = "";
$sessionmembreasso->confirmation_envoi = "";
$sessionmembreasso->date_nais_membre = "";

                            $this->_redirect('/integrateur/addbanapprocm');
                            return;

}   else {
                            $db->rollback();
                                          $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/integrateur/addbanapprocm');
                            return;
}

}else{


$sessionmembreasso->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
$sessionmembreasso->bon_neutre_appro_apporteur = $association_code_membre;
$sessionmembreasso->bon_neutre_nom = $_POST['bon_neutre_nom'];
$sessionmembreasso->bon_neutre_prenom = $_POST['bon_neutre_prenom'];
$sessionmembreasso->bon_neutre_raison = $_POST['bon_neutre_raison'];
$sessionmembreasso->bon_neutre_personne = $_POST['bon_neutre_personne'];
$sessionmembreasso->bon_neutre_mobile = $_POST['bon_neutre_mobile'];
$sessionmembreasso->bon_neutre_email = $_POST['bon_neutre_email'];
//$sessionmembreasso->id_canton = $_POST['id_canton'];
$sessionmembreasso->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];
$sessionmembreasso->date_nais_membre = $_POST['date_nais_membre'];



}

}

                    }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        //$this->_redirect('/integrateur/addbanapprocm');
                        return;
                    }
                  }   else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }
}
    }










     public function listbanapprodetailAction() {
      /* page espacepersonnel/listrecu - Liste des reçus */

    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');
      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

      $banapprodetail = new Application_Model_EuBanApproDetailMapper();
      $this->view->entries = $banapprodetail->fetchAllByAssociation($sessionmembreasso->membreasso_association);

      $this->view->tabletri = 1;

      }





    public function listactivationutilisateurAction() {
      $sessionmembreasso = new Zend_Session_Namespace('membreasso');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
          if(isset($_POST['periode']) && $_POST['periode']!="") {

             list($debut, $fin) = explode("/", $_POST['periode']);

             /*$partagem = new Application_Model_EuPartagemMapper();
             $this->view->entries = $partagem->findSomme3($sessionmembreasso->membreasso_id, $debut, $fin);*/

      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');

        

        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->where("membreasso_id = ? ", $sessionmembreasso->membreasso_id);
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $this->view->entries_activation = $activation_t->fetchAll($select);


        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->where("membreasso_id = ? ", $sessionmembreasso->membreasso_id);
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $this->view->entries_code_activation = $code_activation_t->fetchAll($select);/**/

        $partagem_t = new Application_Model_DbTable_EuPartagem();
        $select = $partagem_t->select();
        $select->where("partagem_membreasso = ? ", $sessionmembreasso->membreasso_id);
        $select->where("partagem_date >= '".$debut."' AND partagem_date <= '".$fin."'");
        //$this->view->entries_partagem = $partagem_t->fetchAll($select);

        /*$membre_doublon_t = new Application_Model_DbTable_EuMembreDoublon();
        $select = $membre_doublon_t->select();
        $select->where("membreasso_id = ? ", $sessionmembreasso->membreasso_id);
        $select->where("membre_doublon_date >= '".$debut."' AND membre_doublon_date <= '".$fin."'");
        $this->view->entries_membre_doublon = $membre_doublon_t->fetchAll($select);*/


             $this->view->debut = $debut;
             $this->view->fin = $fin;
          }
        } 
        $this->view->tabletri = 1;
    }




    public function listactivationintegrateurAction() {
      $sessionmembreasso = new Zend_Session_Namespace('membreasso');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
          if(isset($_POST['periode']) && $_POST['periode']!="") {

             list($debut, $fin) = explode("/", $_POST['periode']);

             /*$partagea = new Application_Model_EuPartageaMapper();
             $this->view->entries = $partagea->findSomme3($sessionmembreasso->membreasso_association, $debut, $fin);*/

      $debut = new Zend_Date($debut);
      $fin = new Zend_Date($fin);
      $fin_1 = new Zend_Date($fin);
      $fin->addDay(1);
        
      $debut = $debut->toString('yyyy-MM-dd');
      $fin   = $fin->toString('yyyy-MM-dd');
      $fin_1   = $fin_1->toString('yyyy-MM-dd');
        

        $activation_t = new Application_Model_DbTable_EuActivation();
        $select = $activation_t->select();
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ".$sessionmembreasso->membreasso_association.")");
        $select->where("date_activation >= '".$debut."' AND date_activation <= '".$fin."'");
        $this->view->entries_activation = $activation_t->fetchAll($select);


        $code_activation_t = new Application_Model_DbTable_EuCodeActivation();
        $select = $code_activation_t->select();
        $select->where("membreasso_id IN (SELECT membreasso_id FROM eu_membreasso WHERE membreasso_association = ".$sessionmembreasso->membreasso_association.")");
        $select->where("date_generer >= '".$debut."' AND date_generer <= '".$fin."'");
        $this->view->entries_code_activation = $code_activation_t->fetchAll($select);/**/

        $partagea_t = new Application_Model_DbTable_EuPartagea();
        $select = $partagea_t->select();
        $select->where("partagea_association = ? ", $sessionmembreasso->membreasso_association);
        $select->where("partagea_date >= '".$debut."' AND partagea_date <= '".$fin."'");
        //$this->view->entries_partagea = $partagea_t->fetchAll($select);

        /*$membre_doublon_t = new Application_Model_DbTable_EuMembreDoublon();
        $select = $membre_doublon_t->select();
        $select->where("membreasso_id = ? ", $sessionmembreasso->membreasso_id);
        $select->where("membre_doublon_date >= '".$debut."' AND membre_doublon_date <= '".$fin."'");
        $this->view->entries_membre_doublon = $membre_doublon_t->fetchAll($select);*/


             $this->view->debut = $debut;
             $this->view->fin = $fin;
          }
        } 
        $this->view->tabletri = 1;
    }



    public function listmembrefifoAction()   {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $membre_fifo = new Application_Model_EuMembreMapper();
        $this->view->entries = $membre_fifo->fetchAllByFIFO(1000, 0);

        $this->view->tabletri = 1;

    }
	
	
	public function listmembrefifotrierAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$db_membrefifo = new Application_Model_DbTable_EuMembreFifo();
	    $select = $db_membrefifo->select();
	    $select->where('valider = ?',1);	
		$entries = $db_membrefifo->fetchAll($select);
		
		$this->view->entries = $entries;
		
		$this->view->tabletri = 1;
	}
	
	
	public function listmembrefifodesactiverAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
		$db_membrefifo = new Application_Model_DbTable_EuMembreFifo();
	    $select = $db_membrefifo->select();
	    $select->where('desactiver = ?',1);	
		$entries = $db_membrefifo->fetchAll($select);
		
		$this->view->entries = $entries;
		
		$this->view->tabletri = 1;
	}
	
	
	public  function listmembrefifovaliderAction()  {
		
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmcint');

	    if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
		
                /*

		$db_mstierslistebc = new Application_Model_DbTable_EuMstiersListebc();
	        $select = $db_mstierslistebc->select();
	        $select->where('statut = ?',0);
                $select->where('type_liste like ?',"SansListe");		
		$entries = $db_mstierslistebc->fetchAll($select);

                */

                $db_membrefifo = new Application_Model_DbTable_EuMembreFifo();
	        $select = $db_membrefifo->select();
	        $select->where('valider = ?',2);	
		$entries = $db_membrefifo->fetchAll($select);

		$this->view->entries = $entries;
		$this->view->tabletri = 1;
    }
	
	
	
	public function desactiverfifoAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmcint');
		
		$request = $this->getRequest();
		if($request->isPost())  {
			$db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
			try  {
			     $membre = new Application_Model_EuMembre();
	             $m_membre = new Application_Model_EuMembreMapper();
				  
				 $membrefifo = new Application_Model_EuMembreFifo();
	             $m_membrefifo = new Application_Model_EuMembreFifoMapper();
				  
				 $code_membre = $request->getParam("code_membre");
                 $findmembre  = $m_membre->find($code_membre,$membre);				 
				 $motif = $request->getParam("motif");
				 
				 if($findmembre == false) {
					$db->rollback();
					$this->view->membre = $membre;
		            $this->view->error = "Le code membre   ".$code_membre."  est introuvable ...";
					return;
			     }
				 
				 $findbenef = $m_membrefifo->findByBeneficiaire($code_membre);
				 if($findbenef != false) {
					$db->rollback();
				    $this->view->membre = $membre;
					$this->view->error = "Impossible d'effectuer cette operation ...";
					return;
				 }
				 
				 $membrefifo->setCode_membre_benef($code_membre);
				 $membrefifo->setDesactiver(1);
				 $membrefifo->setMotif($motif);
				 $membrefifo->setSubstituer(0);
				 $membrefifo->setMotif_substitution(NULL);
				 $membrefifo->setUtilisateur($sessionmembreasso->membreasso_id);
				 $membrefifo->setValider(0);
				 $membrefifo->setCode_membre_substituer(NULL);
				 $m_membrefifo->save($membrefifo);
				 
				 $membre->setDesactiver(1);
				 $m_membre->update($membre);
				 
				 $db->commit();
	             $sessionmembreasso->error = "Operation bien effectuee ...";
	             $this->_redirect('/integrateur/listmembrefifo');
			  
			 } catch(Exception $exc) {				   
	             $db->rollback();
				 $this->view->membre = $membre;
                 $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                 return;
             }
			
		} else {
			$id = $this->_request->getParam('id');
			$membre = new Application_Model_EuMembre();
	        $m_membre = new Application_Model_EuMembreMapper();
			$m_membre->find($id,$membre);
	        $this->view->membre = $membre;
		}
		
	}
	
	
	
	
	public function substituerfifoAction()  {
	     $sessionmembreasso = new Zend_Session_Namespace('membreasso');
	     //$this->_helper->layout->disableLayout();
 	     $this->_helper->layout()->setLayout('layoutpublicesmcint');
		
		 $id = $this->_request->getParam('id');
		 $request = $this->getRequest();
		 if($request->isPost())  {
			 $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
			 try {
		         $membrebenef   = new Application_Model_EuMembre();
	             $m_membrebenef = new Application_Model_EuMembreMapper();
				 
				 $membresubstituer   = new Application_Model_EuMembre();
	             $m_membresubstituer = new Application_Model_EuMembreMapper();
				
		         $membrefifo   = new Application_Model_EuMembreFifo();
	             $m_membrefifo = new Application_Model_EuMembreFifoMapper();
				  
				 $code_membre_beneficiaire = $request->getParam("code_membre_beneficiaire");
				 $code_membre_substituer    = $request->getParam("code_membre_substituer");
				 $motif = $request->getParam("motif");
				 
				 $findmembresubstituer = $m_membresubstituer->find($code_membre_substituer,$membresubstituer);
				 $findmembrebenef = $m_membrebenef->find($code_membre_beneficiaire,$membrebenef);
				 
				 if($findmembresubstituer == false) {
					$db->rollback();
					$this->view->membresubstituer = $membresubstituer;
					$this->view->membrebenef = $membrebenef;
		            $this->view->error = "Le code membre du substitué  ".$code_membre_substituer."  est introuvable ...";
					return;
			     }
				 
				 if($findmembrebenef == false) {
					$db->rollback();
					$this->view->membresubstituer = $membresubstituer;
					$this->view->membrebenef = $membrebenef;
		            $this->view->error = "Le code membre du substitut  ".$code_membre_beneficiaire."  est introuvable ...";
					return;
			     }
				 
				 $findbenef = $m_membrefifo->findByBeneficiaire($code_membre_beneficiaire);
				 if($findbenef != false) {
					$db->rollback();
				    $this->view->membresubstituer = $membresubstituer;
					$this->view->membrebenef = $membrebenef;
					$this->view->error = "Impossible d'effectuer cette operation ...";
					return;
				 }
				 
				 $membrefifo->setCode_membre_benef($code_membre_beneficiaire);
				 $membrefifo->setDesactiver(0);
				 $membrefifo->setMotif_desactivation(NULL);
				 $membrefifo->setSubstituer(1);
				 $membrefifo->setMotif_substitution($motif);
				 $membrefifo->setUtilisateur($sessionmembreasso->membreasso_id);
				 $membrefifo->setValider(1);
				 $membrefifo->setCode_membre_substituer($code_membre_substituer);
				 $m_membrefifo->save($membrefifo); 

                 $db->commit();
	             $sessionmembreasso->error = "Operation bien effectuee ...";
	             $this->_redirect('/integrateur/listmembrefifo'); 
			 
			 } catch(Exception $exc) {				   
	             $db->rollback();
				 $this->view->membresubstituer = $membresubstituer;
			     $this->view->membrebenef = $membrebenef;
                 $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                 return;
             }
		
		 } else {
			$id = $this->_request->getParam('id');
			$membre = new Application_Model_EuMembre();
	        $m_membre = new Application_Model_EuMembreMapper();
			$m_membre->find($id,$membre);
	        $this->view->membresubstituer = $membre;
		}
		
	}
	
	
	

	
	public  function trierfifoAction()  {
		$sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');
		if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	
		$beneficiaire = $this->_request->getParam('id');
	    /*
		$membre = new Application_Model_EuMembre();
	    $m_membre = new Application_Model_EuMembreMapper();
			
	    $membrefifo = new Application_Model_EuMembreFifo();
	    $m_membrefifo = new Application_Model_EuMembreFifoMapper();
	    $findbenef = $m_membrefifo->findByBeneficiaire($beneficiaire);
        $findmembre  = $m_membre->find($beneficiaire,$membre);
				 
		$membrefifo->setCode_membre_benef($beneficiaire);
	    $membrefifo->setDesactiver(0);
		$membrefifo->setMotif(NULL);
	    $membrefifo->setSubstituer(0);
	    $membrefifo->setMotif_substitution(NULL);
		$membrefifo->setUtilisateur($sessionmembreasso->membreasso_id);
	    $membrefifo->setValider(1);
		$membrefifo->setCode_membre_substituer(NULL);
		$m_membrefifo->save($membrefifo);
		*/
				 	 	 
	    $this->_redirect('/integrateur/listmembrefifo');
		
	}
	
	
	public  function traiterfifoAction() {
	   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
           //$this->_helper->layout->disableLayout();
           $this->_helper->layout()->setLayout('layoutpublicesmcint');
	   if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}
	
	   $id_fifo = $this->_request->getParam('id');
		
	    $membre = new Application_Model_EuMembre();
	    $m_membre = new Application_Model_EuMembreMapper();
			
	    $membrefifo = new Application_Model_EuMembreFifo();
	    $m_membrefifo = new Application_Model_EuMembreFifoMapper();
		
	    $mstiersliste = new Application_Model_EuMstiersListebc();
	    $m_mstiersliste = new Application_Model_EuMstiersListebcMapper();
		
	    $findfifo  = $m_membrefifo->find($id_fifo,$membrefifo);
            $findmembre  = $m_membre->find($membrefifo->code_membre_benef,$membre);
		
	    $membre->setValider(1);
	    $m_membre->update($membre);
		
	    $membrefifo->setValider(2);
	    $m_membrefifo->update($membrefifo);
		
            /*
	    $mstiersliste->setCode_membre_apporteur(NULL)
				     ->setCode_membre_beneficiaire($membrefifo->code_membre_benef)
					 ->setType_souscription("CMIT")
				     ->setCode_bnp(null)
                        ->setType_liste("SansListe")
				     ->setUtilisateur($sessionmembreasso->membreasso_id)
				     ->setDate_listebc($membre->date_identification)
					 ->setStatut(0)
					 ->setBon_conso(0)
					 ->setFrais_solvabilite(0)
					 ->setPeripherique(0)
					 ->setConnectivite(0)
					 ->setAssurance(0)
					 ->setCompte_bancaire(0);
	     $m_mstiersliste->save($mstiersliste);

             */
		
	     $this->_redirect('/integrateur/listmembrefifovalider');
	}
	
	
	
	
	



    public function editmstierslistebcAction() {
        $sessionmembreasso = new Zend_Session_Namespace('membreasso');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcint');

        if(!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $code_membre = (string) $this->_request->getParam('code_membre');
        if(isset($code_membre) && $code_membre != "") {

          /*$membreasso = new Application_Model_EuMembreasso();
          $membreassoM = new Application_Model_EuMembreassoMapper();

          $membreasso->setPublier($this->_request->getParam('publier'));
          $membreassoM->update($membreasso);*/
        }

    $this->_redirect('/integrateur/listmembrefifo');
    }



    public function detailstachemembreassoAction() 
    {
        /* page administration/detailstache - Detail d'une tache */

    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

            $id = (int)$this->_request->getParam('id');
            if ($id > 0) {
        $tache = new Application_Model_EuTacheMembreasso();
        $tacheM = new Application_Model_EuTacheMembreassoMapper();
        $tacheM->find($id, $tache);
        $this->view->tache = $tache;

            }

    }





    public function addbantmoneyfloozAction()  {
    $sessionmembreasso = new Zend_Session_Namespace('membreasso');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmcint');

      if (!isset($sessionmembreasso->login)) {$this->_redirect('/integrateur/login');}

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if (isset($_POST['code_membre']) && $_POST['code_membre']!="" && isset($_POST['reference_tmoney']) && $_POST['reference_tmoney']!="") {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();
                            $date = Zend_Date::now();

////////////////////////////////////////////////////////////////////////////////

//$tab = file_get_contents("http://payme.gacsource.net/payMe/verifreference.php?reference_tmoney=".$_POST['reference_tmoney']."&");

$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "http://payme.gacsource.net/payMe/verifreference.php?reference_tmoney=".$_POST['reference_tmoney']."",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => array(
    "cache-control: no-cache"//,
    //"postman-token: aaf077e5-a019-7d87-5c72-95030c9baa5e"/
  ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  //echo "cURL Error #:" . $err;
//$sessionmembreasso->error = 1;
} else {

$obj = json_decode($response);
//echo $obj->status;

//$sessionmembreasso->error = $obj->status;

}

////////////////////////////////////////////////////////////////////////////////
                		$association1M = new Application_Model_EuAssociationMapper();
                            $association12 = $association1M->fetchAllByMembreGuichet($_POST['code_membre']);
                        if(count($association12) > 0) {
                        	$guichet = 1;
                        }else{
                        	$guichet = 0;
                        }
////////////////////////////////////////////////////////////////////////////////
								if($obj->status == 0) {
                                $db->rollback();
                                $sessionmembreasso->error = $obj->error;
                                $this->_redirect('/integrateur/addbantmoneyflooz');
                                return;
                                }

            $date_releve = substr($obj->datepaiement, 0, 10);
            $libelle = $obj->libelle." #".$request->getParam("code_membre");
            $numero = $obj->numero;
            $bon_neutre_numero = $obj->numero;
            $montant = $obj->montant;
            $bon_neutre_montant = $obj->montant;
            $code_banque = $obj->operateur;
            $bon_neutre_banque = $obj->operateur;
            $date_valeur = $date_releve;
            $bon_neutre_date_numero = $date_releve;
            $relbancaire = new Application_Model_EuRelevebancaire ();
            $m_releve = new Application_Model_EuRelevebancaireMapper ();
            $m_detReleve = new Application_Model_EuRelevebancairedetailMapper ();
            $releves = $m_releve->fetchAllByDateWari ($date->toString ( "yyyy-MM-dd" ), $code_banque);


if($obj->operateur == "TMONEY"){

$code_membre_operateur = "0000000000000000005M";
		$montant_flooz = 0;

}else if($obj->operateur == "FLOOZ"){

$code_membre_operateur = "0000000000000000004M";

/////////////////////////tarif flooz/////////////
        $tarif_M = new Application_Model_EuTarifMapper();
        $tarif = $tarif_M->fetchAllByMontantTarifMode($bon_neutre_montant, $obj->operateur);
        $montant_flooz = $tarif->montant_tarif;/**/

}


                $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {
                        
                //$date_depot = new Zend_Date ( Util_Utils::convertDate ( $date_releve ), Zend_Date::ISO_8601 );
                //$date_v = new Zend_Date ( Util_Utils::convertDate ( $date_valeur ), Zend_Date::ISO_8601 );
                $date_depot = $date_releve ;
                $date_v = $date_valeur ;
                if (count ( $releves ) >= 1) {
                    $releve = $releves;
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $releve->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                } else {
                    $lastId = $m_releve->findConuter ();
                    if (isset ( $lastId )) {
                        $lastId ++;
                    } else {
                        $lastId = 1;
                    }
                    $relbancaire->setRelevebancaire_id ( $lastId );
                    $relbancaire->setPublier ( 1 );
                    $relbancaire->setRelevebancaire_banque ( $code_banque );
                    $relbancaire->setRelevebancaire_date ( $date->toString ( "yyyy-MM-dd" ) );
                    $relbancaire->setRelevebancaire_utilisateur ( 0 );
                    $m_releve->save ( $relbancaire );
                    
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $relbancaire->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                }
                $relevebancairedetail_id = $lastDetId;
                //$db->commit ();
                //$sessionmembreasso->message = "Ajout d'utilisateur effectué avec succès!";
                //$this->_redirect ( "/integrateur/addreleve" );

////////////////////////////////////////////////////////////////////////////////
if(substr($request->getParam("code_membre"), -1) == "P"){

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($request->getParam("code_membre"), $membre2);

                                $bon_neutre_nom = $membre2->nom_membre;
                                $bon_neutre_prenom = $membre2->prenom_membre;
                                $bon_neutre_raison = "";
                                $bon_neutre_code_membre = $membre2->code_membre;
                                $bon_neutre_email = $membre2->email_membre;
                                $bon_neutre_mobile = $membre2->portable_membre;
                                $id_canton = $membre2->id_canton;

}else if(substr($request->getParam("code_membre"), -1) == "M"){

                                $membre_morale = new Application_Model_EuMembreMorale();
                                $membre_moraleM = new Application_Model_EuMembreMoraleMapper();
                                $membre_moraleM->find($request->getParam("code_membre"), $membre_morale);

   $representationM = new Application_Model_EuRepresentationMapper();
   $representation = $representationM->findbyrep($membre_morale->code_membre_morale);

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($representation->code_membre, $membre2);

                                $bon_neutre_nom = $membre2->nom_membre;
                                $bon_neutre_prenom = $membre2->prenom_membre;
                                $bon_neutre_raison = $membre_morale->raison_sociale;
                                $bon_neutre_code_membre = $membre_morale->code_membre_morale;
                                $bon_neutre_email = $membre_morale->email_membre;
                                $bon_neutre_mobile = $membre_morale->portable_membre;
                                $id_canton = $membre_morale->id_canton;

}


                        

//}




//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);

do{
                    $code_BAn2 = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn2);
}while(count($bon_neutre_detail2) > 0);

do{
                    $code_BAn3 = strtoupper(Util_Utils::genererCodeSMS(6));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn3);
}while(count($bon_neutre_detail2) > 0);


do{
                    $code_BAn4 = strtoupper(Util_Utils::genererCodeSMS(6));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn4);
}while(count($bon_neutre_detail2) > 0);

///////////////////////////////////calcul commission banque//////////////////////////////

if($guichet == 1){
$montant_commission_banque = floor($bon_neutre_montant * Util_Utils::getParamEsmc(19) / 100) + $montant_flooz;
}else{
$montant_commission_banque = 0 + $montant_flooz;
}
                                                        



/////////////////////////////////////controle code membre
if(isset($bon_neutre_code_membre) && $bon_neutre_code_membre!=""){
if(strlen($bon_neutre_code_membre) != 20) {
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    $this->_redirect('/integrateur/addbantmoneyflooz');
                                    return;
}else{
if(substr($bon_neutre_code_membre, -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($bon_neutre_code_membre, $membre);
                                if(count($membre) == 0){
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    $this->_redirect('/integrateur/addbantmoneyflooz');
                                    return;
                                }
                                if($bon_neutre_nom == "" || $bon_neutre_nom == NULL){
                                    $db->rollback();
                                    $sessionmembreasso->error = "Veuillez bien saisir le nom et prénom(s)";
                                    $this->_redirect('/integrateur/addbantmoneyflooz');
                                    return;
                                }
    }
if(substr($bon_neutre_code_membre, -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($bon_neutre_code_membre, $membremorale);
                                if(count($membremorale) == 0){
                                    $db->rollback();
                                    $sessionmembreasso->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    $this->_redirect('/integrateur/addbantmoneyflooz');
                                    return;
                                }
                                if($bon_neutre_raison == "" || $bon_neutre_raison == NULL){
                                    $db->rollback();
                                    $sessionmembreasso->error = "Veuillez bien saisir la raison sociale";
                                    $this->_redirect('/integrateur/addbantmoneyflooz');
                                    return;
                                }
    }
}

//////////////////////////////////////////////
                                $ban2M = new Application_Model_EuBanMapper();
                                //$ban2 = $ban2M->fetchAllOneMembre();
                                $ban_solde = $ban2M->getSumByBan($code_membre_operateur);
                                //if($ban2->solde >= $bon_neutre_montant){ 
                                	$montant_ban = ($bon_neutre_montant + $montant_commission_banque);
                                if($ban_solde >= $montant_ban){ 
                                $ban2 = $ban2M->fetchAllMembre0($code_membre_operateur);
                    foreach ($ban2 as $ban2_entry){

                                $ban = new Application_Model_EuBan();
                                $banM = new Application_Model_EuBanMapper();
                                $banM->find($ban2_entry->id_ban, $ban);

                        if($ban->getSolde() < $montant_ban){

                                $montant_ban = $montant_ban - $ban->getSolde();
                                
                                $ban->setMont_vendu($ban->getMont_vendu() + $ban->getSolde());
                                $ban->setSolde($ban->getSolde() - $ban->getSolde());
                                $banM->update($ban);

                                $ban_id = $ban->id_ban;

                            $ban_vendu = new Application_Model_EuBanVendu();
                            $ban_vendu_mapper = new Application_Model_EuBanVenduMapper();

                            $compteur_ban_vendu = $ban_vendu_mapper->findConuter() + 1;
                            $ban_vendu->setId_ban_vendu($compteur_ban_vendu);
                            $ban_vendu->setId_ban($ban_id);
                            $ban_vendu->setDate_ban_vendu($date_id->toString('yyyy-MM-dd'));
                            $ban_vendu->setCode_membre($bon_neutre_code_membre);
                            $ban_vendu->setMont_vendu($ban->getSolde());
                            $ban_vendu->setNumero_recu($bon_neutre_numero);
                            $ban_vendu->setId_user(0);
                            $ban_vendu_mapper->save($ban_vendu);

}else{
                                $ban->setMont_vendu($ban->getMont_vendu() + $montant_ban);
                                $ban->setSolde($ban->getSolde() - $montant_ban);
                                $banM->update($ban);

                                $ban_id = $ban->id_ban;

                            $ban_vendu = new Application_Model_EuBanVendu();
                            $ban_vendu_mapper = new Application_Model_EuBanVenduMapper();

                            $compteur_ban_vendu = $ban_vendu_mapper->findConuter() + 1;
                            $ban_vendu->setId_ban_vendu($compteur_ban_vendu);
                            $ban_vendu->setId_ban($ban_id);
                            $ban_vendu->setDate_ban_vendu($date_id->toString('yyyy-MM-dd'));
                            $ban_vendu->setCode_membre($bon_neutre_code_membre);
                            $ban_vendu->setMont_vendu($montant_ban);
                            $ban_vendu->setNumero_recu($bon_neutre_numero);
                            $ban_vendu->setId_user(0);
                            $ban_vendu_mapper->save($ban_vendu);
}

}
//////////////////////////////////////////////

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($bon_neutre_code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $bon_neutre_montant + $montant_commission_banque);
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $bon_neutre_montant + $montant_commission_banque);
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($bon_neutre_code_membre);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($bon_neutre_montant + $montant_commission_banque);
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($bon_neutre_montant + $montant_commission_banque);
                            $bon_neutre->setBon_neutre_nom($bon_neutre_nom);
                            $bon_neutre->setBon_neutre_prenom($bon_neutre_prenom);
                            $bon_neutre->setBon_neutre_raison($bon_neutre_raison);
                            $bon_neutre->setBon_neutre_email($bon_neutre_email);
                            $bon_neutre->setBon_neutre_mobile($bon_neutre_mobile);
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_montant);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_montant);
                            $bon_neutre_detail->setBon_neutre_detail_banque($bon_neutre_banque);
                            $bon_neutre_detail->setBon_neutre_detail_numero($bon_neutre_numero);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($bon_neutre_date_numero);
                            $bon_neutre_detail->setId_canton($id_canton);
							if($guichet == 1){
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            }else{
                            $bon_neutre_detail->setBon_neutre_detail_commission("SansCommission");
                            }
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);



/////////////////////////////commission esmc banque
                            if(($montant_commission_banque - $montant_flooz) > 0){
                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn2);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($montant_commission_banque - $montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_commission_banque - $montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_banque("CS-ESMC");
                            $bon_neutre_detail->setBon_neutre_detail_type("COM");
                            $bon_neutre_detail->setBon_neutre_detail_numero($code_BAn3);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($date_id->toString('yyyy-MM-dd'));
                            $bon_neutre_detail->setId_canton($id_canton);
							if($guichet == 1){
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            }else{
                            $bon_neutre_detail->setBon_neutre_detail_commission("SansCommission");
                            }
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);
                            }


                            if($montant_flooz > 0){
                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn2);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_banque("CS-ESMC");
                            $bon_neutre_detail->setBon_neutre_detail_type("COM");
                            $bon_neutre_detail->setBon_neutre_detail_numero($code_BAn4);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($date_id->toString('yyyy-MM-dd'));
                            $bon_neutre_detail->setId_canton($id_canton);
							if($guichet == 1){
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            }else{
                            $bon_neutre_detail->setBon_neutre_detail_commission("SansCommission");
                            }
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);
                            }


                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);
        
                            ///////////////////////////////////////////////////////////////////////////////////////


$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "http://payme.gacsource.net/payMe/verifreference.php?ID=".$obj->ID."&RecipientID=".$relevebancairedetail_id."",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => array(
    "cache-control: no-cache"//,
    //"postman-token: aaf077e5-a019-7d87-5c72-95030c9baa5e"/
  ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  //echo "cURL Error #:" . $err;
//$sessionmembreasso->error = 1;
} else {

$obj = json_decode($response);
//echo $obj->status;

//$sessionmembreasso->error = $obj->status;

}
                        

                            ///////////////////////////////////////////////////////////////////////////////////////




                            $db->commit();

                            $sessionmembreasso->code_BAn = $code_BAn;
                            $sessionmembreasso->membre_code = $bon_neutre->bon_neutre_code_membre;

                            $sessionmembreasso->error = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn) par TMONEY ou FLOOZ. <br />
<br />
";
if($sessionmembreasso->membre_code != "" && $sessionmembreasso->membre_code != NULL){
   $sessionmembreasso->error .= "Le code du Bon d'Achat neutre (BAn) se trouve dans le compte marchand du membre <strong>".$sessionmembreasso->membre_code."</strong><br />";
   $sessionmembreasso->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
} else {
    $sessionmembreasso->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}
    $sessionmembreasso->error .= "<strong>Veuillez bien noter votre code BAn. Il est très important. </strong>Le cas échéant, en cas de perte, reprenez l'opération.";


                            //$this->_redirect('/integrateur/addbantmoneyflooz');
                            //return;
}else{
                        $db->rollback();
                                    $sessionmembreasso->error = "Solde BAn Source inferieur au montant";
                                    $this->_redirect('/integrateur/addbantmoneyflooz');
                                    return;
}
    }
            }else{
                $this->view->message = "Relevé deja chargé ...";
            }

                    }  catch (Exception $exc) {
                        $sessionmembreasso->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->_redirect('/integrateur/addbantmoneyflooz');
                        return;
                    }


            }   else {  $sessionmembreasso->error = "Champs * obligatoire ..."; }


        }else{

$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "http://payme.gacsource.net/payMe/verifreference.php",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => array(
    "cache-control: no-cache"//,
    //"postman-token: aaf077e5-a019-7d87-5c72-95030c9baa5e"/
  ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  //echo "cURL Error #:" . $err;
//$sessionmembreasso->error = 1;
} else {

$obj = json_decode($response);
//echo $obj->status;

//$sessionmembreasso->error = $obj->status;

}
        }


    }
    




}
