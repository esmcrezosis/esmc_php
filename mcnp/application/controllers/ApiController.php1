<?php
class ApiController extends Zend_Controller_Action   {

	public function init() {
		 /* Initialize action controller here */
         //include("Url.php");
	}
	  
	  
	  
	public function listsouscriptionAction() {
	  $this->_helper->layout->disableLayout();
          $request = $this->getRequest(); 
          if($request->isPost ()) {
	          if($request->getParam("membreasso_id") != "") {		  
	            $souscription = new Application_Model_EuSouscriptionMapper();
                $entries = $souscription->fetchAllByMembreasso($request->getParam("membreasso_id"));
				 
				if(count($entries) > 0) {
				  $i = 0;
			      $souscripteur = "";
				  $validation = "";
			      foreach($entries as $entry) :
					 if($entry->souscription_personne == "PP") {
					   $souscripteur = $entry->souscription_nom." ".$entry->souscription_prenom;
					 } else {
					   $souscripteur = $entry->souscription_raison;
					 }
					  
					 if($entry->publier == 3) {
					   $validation = "Valider";
					 } else {
					   $validation = "Pas Valider";
					 }
					  
				     $data[$i] = array(
					   'type_list' => "SOUSCRIPTION",
				       'date'  =>  $entry->souscription_date,
				       'souscripteur' => $souscripteur,
                       'mobile' => $entry->souscription_mobile,			   
				       'type' => $entry->souscription_type,
				       'numero' => $entry->souscription_numero,
				       'date_versement'  => $entry->souscription_date_numero,
				       'programme' => $entry->souscription_programme,
				       'nombre' => $entry->souscription_nombre,
				       'montant' => $entry->souscription_montant,
					   'action' =>  $validation,
					   'integrateur' => "",
					   'utilisateur' => "",
					   'commission' => "",
					   'paye' => "",
					   'impot' => "",
					   'solde' => "",
					   'code_membre' => "",
					   'origine' => "",
					   'beneficiaire' => "",
					   'code' => "",
					   'montant_alloue' => "",
					   'montant_utilise' => "",
					   'montant_restant' => "",
					   'nombre_alloue' => "",
					   'nombre_utilise' => "",
					   'nombre_solde' => "",
					   'date_nais' => "",
					   'lieu_nais' => "",
					   'code_agence' => "",
					   'code_membre_apporteur' => "",
					   'code_membre_beneficiaire' => ""
                    );
				    $i++;
                    endforeach;
					
				} else {
					$data[0] = array(
					  'type_list' => "SOUSCRIPTION",
				      'date'  => "",
				      'souscripteur' => "",
                      'mobile' => "",			   
				      'type' => "",
				      'numero' => "",
				      'date_versement'  => "",
				      'programme' => "",
				      'nombre' => "",
				      'montant' => "",
					  'action' =>  "",
					  'integrateur' => "",
					  'utilisateur' => "",
					  'commission' => "",
					  'paye' => "",
					  'impot' => "",
					  'solde' => "",
					  'code_membre' => "",
					  'origine' => "",
					  'beneficiaire' => "",
					  'code' => "",
					  'montant_alloue' => "",
					  'montant_utilise' => "",
					  'montant_restant' => "",
					  'nombre_alloue' => "",
					  'nombre_utilise' => "",
					  'nombre_solde' => "",
					  'date_nais' => "",
					  'lieu_nais' => "",
					  'code_agence' => "",
					  'code_membre_apporteur' => "",
					  'code_membre_beneficiaire' => ""
                   );
				}
				$this->view->error = Zend_Json::encode($data);
	
              }
			  
		   }
        }

	
	
        public function listactivationspoursoiAction()   {
	      $this->_helper->layout->disableLayout();
          $request = $this->getRequest(); 
          if($request->isPost ()) {
	          if($request->getParam("membreasso_id") != "") {
                $codeactivation = new Application_Model_EuCodeActivationMapper();
                $entries = $codeactivation->fetchAllByMembreasso($request->getParam("membreasso_id"));			  
	             
				if(count($entries) > 0) {
				  $i = 0;
			      $souscripteur = "";
			      foreach($entries as $entry) :
					if(substr($entry->code_membre, -1) == "P") {
					  $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre, $membre);
					  $souscripteur = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre);
					} else {
					  $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre, $membremorale);
					  $souscripteur = htmlentities($membremorale->raison_sociale);
					}
					  
				    $data[$i] = array(
					  'type_list' => "SOI",
				      'date'  =>  datejourfr($entry->date_generer),
					  'code_membre' => $entry->code_membre,
				      'souscripteur' => $souscripteur,
                      'origine' => $entry->origine_code,
					  'mobile' => "",			   
				      'type' => "",
				      'numero' => "",
				      'date_versement'  => "",
				      'programme' => "",
				      'nombre' => "",
				      'montant' => "",
					  'action' =>  "",
					  'integrateur' => "",
					  'utilisateur' => "",
					  'commission' => "",
					  'paye' => "",
					  'impot' => "",
					  'solde' => "",
					  'beneficiaire' => "",
					  'code' => "",
					  'montant_alloue' => "",
					  'montant_utilise' => "",
					  'montant_restant' => "",
					  'nombre_alloue' => "",
					  'nombre_utilise' => "",
					  'nombre_solde' => "",
					  'date_nais' => "",
					  'lieu_nais' => "",
					  'code_agence' => "",
					  'code_membre_apporteur' => "",
					  'code_membre_beneficiaire' => ""    
                    );
				    $i++;
                    endforeach;
					
				 } else {
					$data[0] = array(
					  'type_list' => "SOI",
				      'date'  => "",
					  'code_membre' => "",
				      'souscripteur' => "",
                      'origine' => "",
					  'mobile' => "",			   
				      'type' => "",
				      'numero' => "",
				      'date_versement'  => "",
				      'programme' => "",
				      'nombre' => "",
				      'montant' => "",
					  'action' =>  "",
					  'integrateur' => "",
					  'utilisateur' => "",
					  'commission' => "",
					  'paye' => "",
					  'impot' => "",
					  'solde' => "",
					  'beneficiaire' => "",
					  'code' => "",
					  'montant_alloue' => "",
					  'montant_utilise' => "",
					  'montant_restant' => "",
					  'nombre_alloue' => "",
					  'nombre_utilise' => "",
					  'nombre_solde' => "",
					  'date_nais' => "",
					  'lieu_nais' => "",
					  'code_agence' => "",
					  'code_membre_apporteur' => "",
					  'code_membre_beneficiaire' => ""
					  
                    );
				 }
				 $this->view->error = Zend_Json::encode($data);
	
              } 
		   }
      }

	
      public function listactivationspourtiersAction() {
            $this->_helper->layout->disableLayout();
            $request = $this->getRequest();
		  
            if($request->isPost ()) {
	          if($request->getParam("membreasso_id") != "") {			  
				$activation = new Application_Model_EuActivationMapper();
                $entries = $activation->fetchAllByMembreasso($request->getParam("membreasso_id"));
				
				if(count($entries) > 0) {
				    $i = 0;
			        $beneficiaire = "";
			        foreach($entries as $entry) :
					  $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre, $membre);
					  $beneficiaire = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre);
					
				      $data[$i] = array(
					    'type_list' => "TIERS",
				        'date'  =>  datejourfr($entry->date_activation),
					    'code_membre' => $entry->code_membre,
				        'beneficiaire' => $beneficiaire,
                        'code' => $entry->code_activation,
						'souscripteur' => "",
                        'mobile' => "",			   
				        'type' => "",
				        'numero' => "",
				        'date_versement'  => "",
				        'programme' => "",
				        'nombre' => "",
				        'montant' => "",
					    'action' =>  "",
					    'integrateur' => "",
					    'utilisateur' => "",
					    'commission' => "",
					    'paye' => "",
					    'impot' => "",
					    'solde' => "",
						'origine' => "",
						'montant_alloue' => "",
					    'montant_utilise' => "",
					    'montant_restant' => "",
						'nombre_alloue' => "",
					    'nombre_utilise' => "",
					    'nombre_solde' => "",
					    'date_nais' => "",
					    'lieu_nais' => "",
					    'code_agence' => "",
					    'code_membre_apporteur' => "",
					    'code_membre_beneficiaire' => ""
                      );
				      $i++;
                      endforeach;
					
				}
                				
				else {
					$data[0] = array(
					  'type_list' => "TIERS",
				      'date'  => "",
					  'code_membre' => "",
				      'beneficiaire' => "",
                      'code' => "",
					  'souscripteur' => "",
                      'mobile' => "",			   
				      'type' => "",
				      'numero' => "",
				      'date_versement'  => "",
				      'programme' => "",
				      'nombre' => "",
				      'montant' => "",
					  'action' =>  "",
					  'integrateur' => "",
					  'utilisateur' => "",
					  'commission' => "",
					  'paye' => "",
					  'impot' => "",
					  'solde' => "",
				      'origine' => "",
					  'montant_alloue' => "",
					  'montant_utilise' => "",
					  'montant_restant' => "",
					  'nombre_alloue' => "",
					  'nombre_utilise' => "",
					  'nombre_solde' => "",
					  'date_nais' => "",
					  'lieu_nais' => "",
					  'code_agence' => "",
					  'code_membre_apporteur' => "",
					  'code_membre_beneficiaire' => ""
						
                    );
				}
				$this->view->error = Zend_Json::encode($data);
	
              } 
		   }
       }
	

       public function listcommissionsAction()   {
          $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
          if($request->isPost ()) {
            if($request->getParam("membreasso_id") != "" && $request->getParam("periode") != "") {
              $periode = $request->getParam("periode");
			  list($debut, $fin) = explode("/", $periode);
			  $partagem = new Application_Model_EuPartagemMapper();
              $entries = $partagem->findSomme3($request->getParam("membreasso_id"), $debut, $fin);
               
			  if(count($entries) > 0) {
			     $i = 0;
			     foreach($entries as $entry) :       
			        $membreasso = new Application_Model_EuMembreasso();
                    $membreassoM = new Application_Model_EuMembreassoMapper();
                    $membreassoM->find($entry[3], $membreasso);
	  
                    $association = new Application_Model_EuAssociation();
                    $associationM = new Application_Model_EuAssociationMapper();
                    $associationM->find($membreasso->membreasso_association, $association);
					
					$data[$i] = array(
					  'type_list' => "COMMISSION",
				      'integrateur'  => $association->association_nom ,
					  'utilisateur'  => $membreasso->membreasso_nom." ".$membreasso->membreasso_prenom ,
				      'commission'   => $entry[0],
                      'paye' =>  $entry[1],
					  'impot' => $entry[4] ,
					  'solde' => $entry[2],
					  'date'  => "",
				      'souscripteur' => "",
                      'mobile' => "",			   
				      'type' => "",
				      'numero' => "",
				      'date_versement'  => "",
				      'programme' => "",
				      'nombre' => "",
				      'montant' => "",
					  'action' =>  "",
					  'code_membre' => "",
					  'origine' => "",
					  'beneficiaire' => "",
					  'code' => "",
					  'montant_alloue' => "",
					  'montant_utilise' => "",
					  'montant_restant' => "",
					  'nombre_alloue' => "",
					  'nombre_utilise' => "",
					  'nombre_solde' => "",
					  'date_nais' => "",
					  'lieu_nais' => "",
					  'code_agence' => "",
					  'code_membre_apporteur' => "",
					  'code_membre_beneficiaire' => ""
                    );
				    $i++;
                 endforeach;			  
			  } else {
				 $data[0] = array(
				   'type_list' => "COMMISSION",
				   'integrateur'  => "" ,
				   'utilisateur'  => "" ,
				   'commission'   => "",
                   'paye' => "",
				   'impot' => "" ,
				   'solde' => "",
				   'date'  => "",
				   'souscripteur' => "",
                   'mobile' => "",			   
				   'type' => "",
				   'numero' => "",
				   'date_versement'  => "",
				   'programme' => "",
				   'nombre' => "",
				   'montant' => "",
				   'action' =>  "",
				   'code_membre' => "",
				   'origine' => "",
				   'beneficiaire' => "",
				   'code' => "",
				   'montant_alloue' => "",
				   'montant_utilise' => "",
				   'montant_restant' => "",
				   'nombre_alloue' => "",
				   'nombre_utilise' => "",
				   'nombre_solde' => "",
				   'date_nais' => "",
			       'lieu_nais' => "",
				   'code_agence' => "",
				   'code_membre_apporteur' => "",
				   'code_membre_beneficiaire' => ""
                 );
			  }
			 
              $this->view->error = Zend_Json::encode($data);               
			   
            }
			
          }
		 
	   }
	   
	   
	
       public function listcommissionsnoncalculeAction()  {
	      $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
	      if($request->isPost ()) {
	         if($request->getParam("membreasso_id") != "") {
			   $partagem = new Application_Model_EuPartagemMapper();
               $entries = $partagem->findSomme22($request->getParam("membreasso_id"));
               
			   if(count($entries) > 0) {
			      $i = 0;
			      foreach($entries as $entry) :       
			        $membreasso = new Application_Model_EuMembreasso();
                    $membreassoM = new Application_Model_EuMembreassoMapper();
                    $membreassoM->find($entry[3], $membreasso);
	  
                    $association = new Application_Model_EuAssociation();
                    $associationM = new Application_Model_EuAssociationMapper();
                    $associationM->find($membreasso->membreasso_association, $association);
					
					$data[$i] = array(
					    'type_list' => "COMMISSION1",
				        'integrateur'  => $association->association_nom ,
					    'utilisateur'  => $membreasso->membreasso_nom." ".$membreasso->membreasso_prenom ,
				        'commission'   => $entry[0],
                        'paye' =>  $entry[1],
						'impot' => $entry[4] ,
						'solde' => $entry[2],
						'date'  => "",
				        'souscripteur' => "",
                        'mobile' => "",			   
				        'type' => "",
				        'numero' => "",
				        'date_versement'  => "",
				        'programme' => "",
				        'nombre' => "",
				        'montant' => "",
				        'action' =>  "",
				        'code_membre' => "",
				        'origine' => "",
				        'beneficiaire' => "",
				        'code' => "",
				        'montant_alloue' => "",
				        'montant_utilise' => "",
				        'montant_restant' => "",
						'nombre_alloue' => "",
					    'nombre_utilise' => "",
					    'nombre_solde' => "",
					    'date_nais' => "",
					    'lieu_nais' => "",
					    'code_agence' => "",
					    'code_membre_apporteur' => "",
					    'code_membre_beneficiaire' => ""
                    );
				    $i++;
                 endforeach;
				 
			  } else {
				 $data[0] = array(
				   'type_list' => "COMMISSION1",
				   'integrateur'  => "" ,
				   'utilisateur'  => "" ,
				   'commission'   => "",
                   'paye' => "",
				   'impot' => "" ,
				   'solde' => "",
				   'date'  => "",
				   'souscripteur' => "",
                   'mobile' => "",			   
				   'type' => "",
				   'numero' => "",
				   'date_versement'  => "",
				   'programme' => "",
				   'nombre' => "",
				   'montant' => "",
				   'action' =>  "",
				   'code_membre' => "",
				   'origine' => "",
				   'beneficiaire' => "",
				   'code' => "",
				   'montant_alloue' => "",
				   'montant_utilise' => "",
				   'montant_restant' => "",
				   'nombre_alloue' => "",
				   'nombre_utilise' => "",
				   'nombre_solde' => "",
				   'date_nais' => "",
				   'lieu_nais' => "",
				   'code_agence' => "",
				   'code_membre_apporteur' => "",
				   'code_membre_beneficiaire' => ""
                 );
			  }
              $this->view->error = Zend_Json::encode($data);                
            }
	   
          }
       }

	   
	   
	   
	   
       public function listbanapprointegrateurAction() {
	      $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
	      if($request->isPost ()) {
		     if($request->getParam("code_membre") != "") {   
		        $banappro = new Application_Model_EuBonNeutreApproMapper();
                $entries = $banappro->fetchAllByApporteur($request->getParam("code_membre"));
				
				if(count($entries) > 0) {
				   $i = 0;
			       foreach($entries as $entry) :
				      if(substr($entry->bon_neutre_appro_beneficiaire, -1) == "P") {
                         $membreM = new Application_Model_EuMembreMapper();
                         $membre = new Application_Model_EuMembre();
                         $membreM->find($entry->bon_neutre_appro_beneficiaire, $membre);
                         $beneficiaire = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                      } else if (substr($entry->bon_neutre_appro_beneficiaire, -1) == "M") {
                         $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                         $membremorale = new Application_Model_EuMembreMorale();
                         $membremoraleM->find($entry->bon_neutre_appro_beneficiaire, $membremorale);
				         $beneficiaire = htmlentities($membremorale->raison_sociale); 
				      }

				      $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			          $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByAppro($entry->bon_neutre_appro_id);
				
				      $data[$i] = array(
					    'type_list' => "APPROVISIONNEMENT",
				        'date' => datejourfr($entry->bon_neutre_appro_date),
                        'code_membre' => $entry->bon_neutre_appro_beneficiaire,			   
				        'beneficiaire' => $beneficiaire,
				        'montant_alloue'  => $entry->bon_neutre_appro_montant,
				        'montant_utilise' => $bon_neutre_detail->bon_neutre_detail_montant_utilise,
				        'montant_restant' => $bon_neutre_detail->bon_neutre_detail_montant_solde,
						'souscripteur' => "",
                        'mobile' => "",			   
				        'type' => "",
				        'numero' => "",
				        'date_versement'  => "",
				        'programme' => "",
				        'nombre' => "",
				        'montant' => "",
					    'action' =>  "",
						'integrateur' => "",
					    'utilisateur' => "",
					    'commission' => "",
					    'paye' => "",
					    'impot' => "",
					    'solde' => "",
						'origine' => "",
						'code' => "",
						'nombre_alloue' => "",
					    'nombre_utilise' => "",
					    'nombre_solde' => "",
					    'date_nais' => "",
					    'lieu_nais' => "",
					    'code_agence' => "",
					    'code_membre_apporteur' => "",
					    'code_membre_beneficiaire' => ""
                      );
                      $i++;
                  endforeach;
				
				} else {
				   $data[0] = array(
				    'type_list' => "APPROVISIONNEMENT",
				    'date' => "",
				    'code_membre' => "",				
				    'beneficiaire'    => "",
				    'montant_alloue'  => "",
				    'montant_utilise' => "",
				    'montant_restant' => "",
					'souscripteur' => "",
                    'mobile' => "",			   
				    'type' => "",
				    'numero' => "",
				    'date_versement'  => "",
				    'programme' => "",
				    'nombre' => "",
				    'montant' => "",
					'action' =>  "",
				    'integrateur' => "",
					'utilisateur' => "",
					'commission' => "",
					'paye' => "",
					'impot' => "",
					'solde' => "",
				    'origine' => "",
				    'code' => "",
					'nombre_alloue' => "",
					'nombre_utilise' => "",
					'nombre_solde' => "",
					'date_nais' => "",
					'lieu_nais' => "",
					'code_agence' => "",
					'code_membre_apporteur' => "",
					'code_membre_beneficiaire' => ""
                  );
			    }
			    $this->view->error = Zend_Json::encode($data);
	        }
	   
          }     

       }


	   
	   
	   
       public function prestationemissiondedemandedepaiementdescommissionsdesactivationAction(){
          $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
	      if($request->isPost ()) {
	   
	   
          }
	   
       }

	   
	   
       public function prestationemissiondedemandepaiementdescommissionsdesapprovisionnementintegrateursbanAction() {
           $this->_helper->layout->disableLayout();
           $request = $this->getRequest();
	       if($request->isPost ()) {
	   
	   
           }
       }

       public function prestationlistedesdemandesdepaiementdescommissionsAction() {
	       $this->_helper->layout->disableLayout();
           $request = $this->getRequest();
	       if($request->isPost ()) {
	   
	   
           }

       } 

	   
	   
       public function inscriptionlistedesmembresinscritspourcomptemarchandpourtiersAction() {
          $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
	      if($request->isPost ()) {
	   
	   
          }
		  
       }

	   
	   
        public function inscriptionlistedesmembresinscritsbondeconsomationpourtiersAction() {
            $this->_helper->layout->disableLayout();
            $request = $this->getRequest();
	        if($request->isPost ()) {
	   
	   
            }
        }

	   
	   
	   
       public function listintegrateursAction()  {
          $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
	      if($request->isPost()) {
		      $integrateur = new Application_Model_EuIntegrateurMapper();
              $entries = $integrateur->fetchAllByAssociation($request->getParam("membreasso_association"));
	          if(count($entries) > 0) {
                $i = 0;
			    $souscripteur = "";
				
				foreach($entries as $entry) :
				    if(substr($entry->code_membre, -1) == "P") {
					  $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre, $membre);
					  $souscripteur = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre);
				    } else {
					  $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre, $membremorale);
					  $souscripteur = htmlentities($membremorale->raison_sociale);
					}
					
					$validation = "";
					$souscription = new Application_Model_EuSouscription();
                    $souscriptionM = new Application_Model_EuSouscriptionMapper();
                    $souscriptionM->find($entry->integrateur_souscription, $souscription);
					
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $typeintegrateurM = new Application_Model_EuTypeIntegrateurMapper();
                    $typeintegrateurM->find($entry->integrateur_type, $typeintegrateur);
					
					if($entry->publier == 1) {
					   $validation = "Valider";
					} else {
					   $validation = "Pas Valider";
					}
					$data[$i] = array(
					  'type_list' => "INTEGRATEUR",
				      'date'  =>  datefr($entry->integrateur_date),
				      'souscripteur' => $souscripteur,
                      'mobile' =>  $souscription->souscription_mobile,
					  'type'  =>   $typeintegrateur->libelle_type_integrateur,
					  'action' =>  $validation,
					  'numero' => "",
				      'date_versement'  => "",
				      'programme' => "",
				      'nombre' => "",
				      'montant' => "",
					  'integrateur' => "",
					  'utilisateur' => "",
					  'commission' => "",
					  'paye' => "",
					  'impot' => "",
					  'solde' => "",
					  'code_membre' => "",
					  'origine' => "",
					  'beneficiaire' => "",
					  'code' => "",
					  'montant_alloue' => "",
					  'montant_utilise' => "",
					  'montant_restant' => "",
                      'nombre_alloue' => "",
					  'nombre_utilise' => "",
					  'nombre_solde' => "",
					  'date_nais' => "",
					  'lieu_nais' => "",
					  'code_agence' => "",
					  'code_membre_apporteur' => "",
					  'code_membre_beneficiaire' => ""					  
                    );
				    $i++;
                endforeach;
				
              } else {
                 $data[0] = array(
				   'type_list' => "INTEGRATEUR",
				   'date'  =>  "",
				   'souscripteur' => "",
                   'mobile' =>  "",
				   'type'  =>   "",
				   'action' =>  "",
				   'numero' => "",
				   'date_versement'  => "",
				   'programme' => "",
				   'nombre' => "",
				   'montant' => "",
				   'integrateur' => "",
				   'utilisateur' => "",
				   'commission' => "",
				   'paye' => "",
				   'impot' => "",
				   'solde' => "",
				   'code_membre' => "",
				   'origine' => "",
				   'beneficiaire' => "",
				   'code' => "",
				   'montant_alloue' => "",
				   'montant_utilise' => "",
				   'montant_restant' => "",
				   'nombre_alloue' => "",
				   'nombre_utilise' => "",
				   'nombre_solde' => "",
				   'date_nais' => "",
				   'lieu_nais' => "",
				   'code_agence' => "",
				   'code_membre_apporteur' => "",
				   'code_membre_beneficiaire' => ""
                 );
             }
             $this->view->error = Zend_Json::encode($data);			 
          }
		  
       }

	   
       public function listoffreurprojetsAction()  {
          $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
	      if($request->isPost()) {
	        if($request->getParam("membreasso_association") != "")  {   
				$offreurprojet = new Application_Model_EuOffreurProjetMapper();
                $entries = $offreurprojet->fetchAllByAssociation($request->getParam("membreasso_association"));

                if(count($entries) > 0)  {			  
                    $i = 0;
			        $souscripteur = "";                       
                    foreach($entries as $entry) :
				      $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->offreur_projet_code_membre,$membremorale);
					  $souscripteur = htmlentities($membremorale->raison_sociale);
					  
					  $validation = "";
					  $souscription = new Application_Model_EuSouscription();
                      $souscriptionM = new Application_Model_EuSouscriptionMapper();
                      $souscriptionM->find($entry->offreur_projet_souscription, $souscription);
					  
					  $typeoffreur_projet = new Application_Model_EuTypeOffreurProjet();
                      $typeoffreur_projetM = new Application_Model_EuTypeOffreurProjetMapper();
                      $typeoffreur_projetM->find($entry->offreur_projet_type, $typeoffreur_projet);
				   
				      if($entry->publier == 1) {
					    $validation = "Valider";
					  } else {
					    $validation = "Pas Valider";
					  }
					  
					  $data[$i] = array(
					   'type_list' => "OFFREUR",
				       'date'  =>  datefr($entry->offreur_projet_date),
				       'souscripteur' => $souscripteur,
                       'mobile' =>  $souscription->souscription_mobile,
					   'type'  =>   $typeoffreur_projet->libelle_type_offreur_projet,
					   'action' =>  $validation,
					   'numero' => "",
				       'date_versement'  => "",
				       'programme' => "",
				       'nombre' => "",
				       'montant' => "",
				       'integrateur' => "",
				       'utilisateur' => "",
				       'commission' => "",
				       'paye' => "",
				       'impot' => "",
				       'solde' => "",
				       'code_membre' => "",
				       'origine' => "",
				       'beneficiaire' => "",
				       'code' => "",
				       'montant_alloue' => "",
				       'montant_utilise' => "",
				       'montant_restant' => "",
					   'nombre_alloue' => "",
					   'nombre_utilise' => "",
					   'nombre_solde' => "",
					   'date_nais' => "",
					   'lieu_nais' => "",
					   'code_agence' => "",
					   'code_membre_apporteur' => "",
					   'code_membre_beneficiaire' => ""
					);
				    $i++;
				endforeach; 
				 
              } else {
                $data[0] = array(
				    'type_list' => "OFFREUR",
				    'date'  =>  "",
				    'souscripteur' => "",
                    'mobile' =>  "",
					'type'  =>  "",
					'action' => "",
					'numero' => "",
				    'date_versement'  => "",
				    'programme' => "",
				    'nombre' => "",
				    'montant' => "",
				    'integrateur' => "",
				    'utilisateur' => "",
				    'commission' => "",
				    'paye' => "",
				    'impot' => "",
				    'solde' => "",
				    'code_membre' => "",
				    'origine' => "",
				    'beneficiaire' => "",
				    'code' => "",
				    'montant_alloue' => "",
				    'montant_utilise' => "",
				    'montant_restant' => "",
					'nombre_alloue' => "",
					'nombre_utilise' => "",
					'nombre_solde' => "",
					'date_nais' => "",
					'lieu_nais' => "",
					'code_agence' => "",
					'code_membre_apporteur' => "",
					'code_membre_beneficiaire' => ""
				);
			}
			$this->view->error = Zend_Json::encode($data);  
		    }
          }
       }
	   
	   
	   public function listallocationAction()  {
	      $this->_helper->layout->disableLayout();
          $request = $this->getRequest();
	      if($request->isPost()) {
	        if($request->getParam("membreasso_id") != "") {
			    $membreasso = new Application_Model_EuMembreasso();
                $membreassoM = new Application_Model_EuMembreassoMapper();
                $findasso = $membreassoM->find($request->getParam("membreasso_id"),$membreasso);
			   
                $allocationcmfh = new Application_Model_EuAllocationCmfhMapper();
                $entries = $allocationcmfh->fetchAllByIntegrateur($membreasso->code_membre);
			   
			    if(count($entries) > 0)  {
			     $cmfh = "";
				 $validation = "";
			     $i = 0;
				 foreach($entries as $entry) :
				    if(substr($entry->allocation_cmfh_code_membre_cmfh, -1) == "P") {
					  $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->allocation_cmfh_code_membre_cmfh,$membre);
					  $cmfh = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre);
				    } else {
					  $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->allocation_cmfh_code_membre_cmfh, $membremorale);
					  $cmfh = htmlentities($membremorale->raison_sociale);
					}
					
					if($entry->allocation_cmfh_actif == 1) {
					  $validation = "Activé";
					} else {
					  $validation = "Désactivé";
					}
					
					$data[$i] = array(
					  'type_list' => "ALLOCATION",
				      'date'  =>  datefr($entry->allocation_cmfh_date),
				      'souscripteur' => $cmfh,
                      'code' => $entry->allocation_cmfh_code,
					  'montant_utilise' => $entry->allocation_cmfh_montant_utilise,
					  'nombre_alloue' => $entry->allocation_cmfh_nombre,
					  'nombre_utilise' => $entry->allocation_cmfh_nombre_utilise,
                      'nombre_solde' => $entry->allocation_cmfh_nombre_solde,
                      'action'	=> 	$validation,
                      'mobile' =>  "",
					  'type'  =>  "",
					  'numero' => "",
				      'date_versement'  => "",
				      'programme' => "",
				      'nombre' => "",
				      'montant' => "",
				      'integrateur' => "",
				      'utilisateur' => "",
				      'commission' => "",
				      'paye' => "",
				      'impot' => "",
				      'solde' => "",
				      'code_membre' => "",
				      'origine' => "",
				      'beneficiaire' => "",
				      'montant_alloue' => "",
				      'montant_restant' => "",
					  'date_nais' => "",
					  'lieu_nais' => "",
					  'code_agence' => "",
					  'code_membre_apporteur' => "",
					  'code_membre_beneficiaire' => ""					  
                    );
				    $i++;
				 endforeach;
			              
			    } else  {
			      $data[0] = array(
				    'type_list' => "ALLOCATION",
				    'date'  => "",
				    'souscripteur' => "",
                    'code' => "",
					'montant_utilise' => "",
					'nombre_alloue' => "",
					'nombre_utilise' => "",
                    'nombre_solde' => "",
                    'action' => "",
                    'mobile' =>  "",
					'type'  =>  "",
					'numero' => "",
				    'date_versement'  => "",
				    'programme' => "",
				    'nombre' => "",
				    'montant' => "",
				    'integrateur' => "",
				    'utilisateur' => "",
				    'commission' => "",
				    'paye' => "",
				    'impot' => "",
				    'solde' => "",
				    'code_membre' => "",
				    'origine' => "",
				    'beneficiaire' => "",
				    'montant_alloue' => "",
				    'montant_restant' => "",
					'date_nais' => "",
					'lieu_nais' => "",
					'code_agence' => "",
					'code_membre_apporteur' => "",
					'code_membre_beneficiaire' => ""					
                  );
			  }
			  $this->view->error = Zend_Json::encode($data);
            }			 
	      
		  }
		  
	    }
	   
	   
	   
	    public function listinscriptioncmAction() {
	     $this->_helper->layout->disableLayout();
         $request = $this->getRequest();
	     if($request->isPost()) {
	       if($request->getParam("membreasso_id") != "")   {    
			 $tabela = new Application_Model_DbTable_EuMstiersListecm();
	         $select = $tabela->select();
	         $select->where('utilisateur =  ?', $request->getParam("membreasso_id"));
	         $select->order('date_listecm desc');
	   
	         $entries = $tabela->fetchAll($select);
			 if(count($entries) > 0)  {
               $beneficiaire = "";
			   $i = 0;
			   foreach($entries as $entry) :				     
			     $data[$i] = array(
				   'type_list' => "CM",
				   'date'  =>  datefr($entry->date_listecm),
				   'beneficiaire' => htmlentities($entry->nom_membre)." ".htmlentities($entry->prenom_membre),
                   'date_nais' => datefr($entry->date_nais_membre),
				   'lieu_nais' => $entry->lieu_nais_membre,
				   'code_agence' => $entry->code_agence,
				   'code_membre_apporteur' => $entry->code_membre_apporteur,
                   'code_membre_beneficiaire' => $entry->code_membre_beneficiaire,
				   'souscripteur' => "",
                   'mobile' =>  "",
				   'type'  =>  "",
				   'action' => "",
				   'numero' => "",
				   'date_versement'  => "",
				   'programme' => "",
				   'nombre' => "",
				   'montant' => "",
				   'integrateur' => "",
				   'utilisateur' => "",
				   'commission' => "",
				   'paye' => "",
				   'impot' => "",
				   'solde' => "",
				   'code_membre' => "",
				   'origine' => "",
				   'code' => "",
				   'montant_alloue' => "",
				   'montant_utilise' => "",
				   'montant_restant' => "",
				   'nombre_alloue' => "",
				   'nombre_utilise' => "",
				   'nombre_solde' => "" 
                 );
				 $i++;
				endforeach;
				
			 } else {
			     $data[0] = array(
				   'type_list' => "CM",
				   'date'  => "",
				   'beneficiaire' => "",
                   'date_nais' => "",
				   'lieu_nais' => "",
				   'code_agence' => "",
				   'code_membre_apporteur' => "",
                   'code_membre_beneficiaire' => "",
                   'souscripteur' => "",
                   'mobile' =>  "",
				   'type'  =>  "",
				   'action' => "",
				   'numero' => "",
				   'date_versement'  => "",
				   'programme' => "",
				   'nombre' => "",
				   'montant' => "",
				   'integrateur' => "",
				   'utilisateur' => "",
				   'commission' => "",
				   'paye' => "",
				   'impot' => "",
				   'solde' => "",
				   'code_membre' => "",
				   'origine' => "",
				   'code' => "",
				   'montant_alloue' => "",
				   'montant_utilise' => "",
				   'montant_restant' => "",
				   'nombre_alloue' => "",
				   'nombre_utilise' => "",
				   'nombre_solde' => ""				   
                 );
			 }
			 $this->view->error = Zend_Json::encode($data);
			    
		   }
	     }  
	    }
	   
	   
	    public function listinscriptionbcAction()   {
	     $this->_helper->layout->disableLayout();
         $request = $this->getRequest();
	     
		 $tabela = new Application_Model_DbTable_EuMstiersListebc();
	     $select = $tabela->select();
	     $select->order('date_listebc desc');
	     $entries = $tabela->fetchAll($select);
		 
		 if(count($entries) > 0)  {
		    $i = 0;
			foreach($entries as $entry) :				     
			  $data[$i] = array(
			    'type_list' => "BC",
				'date'  =>  datefr($entry->date_listebc),
				'type'  => $entry->type_souscription,
				'code_membre_apporteur' => $entry->code_membre_apporteur,
                'code_membre_beneficiaire' => $entry->code_membre_beneficiaire,
				'souscripteur' => "",
                'code' => "",
			    'montant_utilise' => "",
			    'nombre_alloue' => "",
			    'nombre_utilise' => "",
                'nombre_solde' => "",
                'action' => "",
                'mobile' =>  "",
			    'numero' => "",
				'date_versement'  => "",
				'programme' => "",
				'nombre' => "",
				'montant' => "",
				'integrateur' => "",
				'utilisateur' => "",
				'commission' => "",
				'paye' => "",
				'impot' => "",
				'solde' => "",
				'code_membre' => "",
				'origine' => "",
				'beneficiaire' => "",
				'montant_alloue' => "",
				'montant_restant' => "",
			    'date_nais' => "",
			    'lieu_nais' => "",
			    'code_agence' => ""				
              );
		      $i++;
			endforeach;  
		 } else {
		    $data[0] = array(
			  'type_list' => "BC",
			  'date'  => "",
			  'type'  => "",
			  'code_membre_apporteur' => "",
              'code_membre_beneficiaire' => "",
              'souscripteur' => "",
              'code' => "",
			  'montant_utilise' => "",
			  'nombre_alloue' => "",
			  'nombre_utilise' => "",
              'nombre_solde' => "",
              'action' => "",
              'mobile' =>  "",
			  'numero' => "",
		      'date_versement'  => "",
			  'programme' => "",
			  'nombre' => "",
			  'montant' => "",
			  'integrateur' => "",
			  'utilisateur' => "",
			  'commission' => "",
			  'paye' => "",
			  'impot' => "",
			  'solde' => "",
			  'code_membre' => "",
			  'origine' => "",
			  'beneficiaire' => "",
			  'montant_alloue' => "",
			  'montant_restant' => "",
			  'date_nais' => "",
			  'lieu_nais' => "",
			  'code_agence' => ""			  
            );
		 }
		 $this->view->error = Zend_Json::encode($data);
		 
	    }
	   
	   
          public  function verifcleAction()  {
	    $this->_helper->layout->disableLayout();
		$request = $this->getRequest();
        if($request->isPost())   {
		    $code_autorisation = $request->getParam("code_autorisation");
			if($code_autorisation != "") {
		        $allocationM = new Application_Model_EuAllocationCmfhMapper();
                if($membretiers = $allocationM->fetchAllByCode($code_autorisation)) {
					$this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' => "Clé d'autorisation valide"));
                } else {
				    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Code Erroné, reprenez"));
                }	
		    }
		    else {
			    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Aucun resultat"));
            }
		}
	}
	   
	   
	  
	   public  function listefilieresAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $data = array();
		 $datas['listefilieres'] = array();
		 $t_filiere = new Application_Model_DbTable_EuFiliere();
		 $select = $t_filiere->select();
		 $select->order('nom_filiere asc');
	     $select->from($t_filiere);
	     $filieres = $t_filiere->fetchAll($select);
	  
	     if(count($filieres) >= 1)  {
		   for($i = 0; $i < count($filieres); $i++) {
              $value = $filieres[$i];
			  $nom_filiere = $value->nom_filiere;
			  $reponse = ucfirst(htmlentities(utf8_decode($nom_filiere)));
			  $reponsetraiter = str_replace("?","e",$reponse);		   
              $data[$i] = array(
			    'id_filiere' => $value->id_filiere, 
				'libelle'    => $reponsetraiter
              );		   
		   }
		   //$datas['listefilieres'] = $data;
           $this->view->data = $data;
		   
		 }
	  
	  }
	  
	  
	  
	  
	  public function listefilieresoldAction()  {
	      $this->_helper->layout()->disableLayout();
		  $t_filiere = new Application_Model_DbTable_EuFiliere();
		  $data = array();
		  $select = $t_filiere->select();
		  $select->order('nom_filiere asc');
	      $select->from($t_filiere);
	      $filieres = $t_filiere->fetchAll($select);
		  
		  if (count($filieres) >= 1)  {
            for($i = 0; $i < count($filieres); $i++) {
               $value = $filieres[$i];
			   $nom_filiere = $value->nom_filiere;
			   $reponse = ucfirst(htmlentities(utf8_decode($nom_filiere)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$value->id_filiere] = $reponsetraiter;
            }
         } else {
            $data = '';
         }
         $this->view->data = $data;
	      
	  }
	  
	  
	  public  function  listevillesAction()  {
	     $this->_helper->layout()->disableLayout();
	     $t_ville = new Application_Model_DbTable_EuVille();
		 $data = array();
		
		 $select = $t_ville->select();
	     $select->order('lib_ville asc');
	     $select->from($t_ville);
	     $villes = $t_ville->fetchAll($select);
		 
		 if(count($villes) >= 1)  {
		   for($i = 0; $i < count($villes); $i++) {
             $value = $villes[$i];
			 $lib_ville = $value->lib_ville;
			 $reponse = ucfirst(htmlentities(utf8_decode($lib_ville)));
			 $reponsetraiter = str_replace("?","e",$reponse);
             $data[$i] = array(
			   'id_ville' => $value->id_ville, 
			   'nom'      => $reponsetraiter
             );
           } 
		 } else {
            $data = '';
         }
		 
		 //$datas['listezones'] = $data;
         $this->view->data = $data;
	  }
	  
	  
	  
	  public  function listecmfhAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $t_cmfh = new Application_Model_DbTable_EuTypeCandidat();
		 $data = array();
		 
		 $select = $t_cmfh->select();
	     $select->order('id_type_candidat asc');
	     $select->from($t_cmfh);
	     $candidats = $t_cmfh->fetchAll($select);
	  
	     if(count($candidats) >= 1)  {
		    for($i = 0; $i < count($candidats); $i++) {
               $value = $candidats[$i];
			   $libelle = $value->libelle_type_candidat;
			   $reponse = ucfirst(htmlentities(utf8_decode($libelle)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$i] = array(
			     'id_cmfh' => $value->id_type_candidat, 
			     'libelle' => $reponsetraiter,
				 'nombre'  => $value->option_type_candidat
               );
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  
	  
	  public  function listeintegrateursAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $t_integrateur = new Application_Model_DbTable_EuTypeIntegrateur();
		 $data = array();
		
		 $select = $t_integrateur->select();
		 $select->where('id_type_integrateur <>  ?', 23);
	     $select->order('id_type_integrateur asc');
	     $select->from($t_integrateur);
	     $integrateurs = $t_integrateur->fetchAll($select);
		 
		 if(count($integrateurs) >= 1)  {
		    for($i = 0; $i < count($integrateurs); $i++) {
               $value = $integrateurs[$i];
			   $libelle = $value->libelle_type_integrateur;
			   $reponse = ucfirst(htmlentities(utf8_decode($libelle)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$i] = array(
			     'id_type_integrateur' => $value->id_type_integrateur, 
			     'libelle' => $reponsetraiter
               );
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  }
	  
	  
	  public  function listeoffreursAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $t_op = new Application_Model_DbTable_EuTypeOffreurProjet();
		 $data = array();
		
		 $select = $t_op->select();
	     $select->order('id_type_offreur_projet asc');
	     $select->from($t_op);
	     $offreurs = $t_op->fetchAll($select);
		 
		 if(count($offreurs) >= 1)  {
		    for($i = 0; $i < count($offreurs); $i++) {
               $value = $offreurs[$i];
			   $libelle = $value->libelle_type_offreur_projet;
			   $reponse = ucfirst(htmlentities(utf8_decode($libelle)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$i] = array(
			     'id_type_offreur' => $value->id_type_offreur_projet, 
			     'libelle' => $reponsetraiter
               );
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  }
	  
	  
	  
	  
	  
	  
	  public  function  listezonesAction()  {
	     $this->_helper->layout()->disableLayout();
	     $t_zone = new Application_Model_DbTable_EuZone();
		 $data = array();
		 $datas['listezones'] = array();
		
		 $select = $t_zone->select();
	     $select->order('nom_zone asc');
	     $select->from($t_zone);
	     $zones = $t_zone->fetchAll($select);
		 
		 if(count($zones) >= 1)  {
		   for($i = 0; $i < count($zones); $i++) {
             $value = $zones[$i];
			 $nom_zone = $value->nom_zone;
			 $reponse = ucfirst(htmlentities(utf8_decode($nom_zone)));
			 $reponsetraiter = str_replace("?","e",$reponse);
             $data[$i] = array(
			   'code_zone' => $value->code_zone, 
			   'nom' => $reponsetraiter
             );
           } 
		 } else {
            $data = '';
         }
		 
		 //$datas['listezones'] = $data;
         $this->view->data = $data;
	  
	  }
	  
	  public  function listenationalitesAction()  {
	    $this->_helper->layout()->disableLayout(); 
        $t_pays = new Application_Model_DbTable_EuPays();		
        $data = array();
		
		$select = $t_pays->select();
	    $select->order('nationalite asc');
	    $select->from($t_pays);
	    $pays = $t_pays->fetchAll($select);
		 
		if(count($pays) >= 1)  {
          for($i = 0; $i < count($pays); $i++) {
             $value = $pays[$i];
			 $nationalite = $value->nationalite;
			 $reponse = ucfirst(htmlentities(utf8_decode($nationalite)));
			 $reponsetraiter = str_replace("?","e",$reponse);
             $data[$i] = array(
			   'id_nation' => $value->id_pays, 
			   'nationalite' => $reponsetraiter,
             );
          }
				
         } else {
            $data = '';
         }
		 
         $this->view->data = $data; 
		
	  }
	  
	  
	  
	  
	  public  function listepaysAction()  {
	    $this->_helper->layout()->disableLayout(); 
        $t_pays = new Application_Model_DbTable_EuPays();		
        $data = array();
		$datas['listepays'] = array();
		
		$select = $t_pays->select();
	    $select->order('libelle_pays asc');
	    $select->from($t_pays);
	    $pays = $t_pays->fetchAll($select);
		 
		if(count($pays) >= 1)  {
          for($i = 0; $i < count($pays); $i++) {
             $value = $pays[$i];
			 $libelle_pays = $value->libelle_pays;
			 $reponse = ucfirst(htmlentities(utf8_decode($libelle_pays)));
			 $reponsetraiter = str_replace("?","e",$reponse);
             $data[$i] = array(
			   'id_pays' => $value->id_pays, 
			   'libelle' => $reponsetraiter,
			   'code_zone' => $value->code_zone
             );
          }
				
         } else {
            $data = '';
         }
			
         //$datas['listepays'] = $data;
		 
         $this->view->data = $data; 
		
	  }
	  
	  
	  
	  
	  
	  public function listepaysoldAction()  {
	    $this->_helper->layout()->disableLayout(); 
		$request = $this->getRequest();
        $t_pays = new Application_Model_DbTable_EuPays();		
        $data = array();		
		if($request->isPost()) {
		  $code_zone = $request->getParam('code_zone');
		  $select = $t_pays->select();
		  $select->where('code_zone like  ?', $code_zone);
	      $select->order('libelle_pays asc');
	      $select->from($t_pays);
	      $pays = $t_pays->fetchAll($select);
		 
		 if (count($pays) >= 1)  {
            for($i = 0; $i < count($pays); $i++) {
               $value = $pays[$i];
			   $libelle_pays = $value->libelle_pays;
			   $reponse = ucfirst(htmlentities(utf8_decode($libelle_pays)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$value->id_pays] = $reponsetraiter;
            }
         } else {
            $data = '';
         }
         $this->view->data = $data;
		 
		} else {
		    $select = $t_pays->select();
	        $select->order('libelle_pays asc');
	        $select->from($t_pays);
	        $pays = $t_pays->fetchAll($select);
		 
		    if(count($pays) >= 1)  {
                for($i = 0; $i < count($pays); $i++) {
                    $value = $pays[$i];
			        $libelle_pays = $value->libelle_pays;
			        $reponse = ucfirst(htmlentities(utf8_decode($libelle_pays)));
			        $reponsetraiter = str_replace("?","e",$reponse);
                    $data[$value->id_pays] = $reponsetraiter;
                }
            } else {
                $data = '';
            }
            $this->view->data = $data;
		}
	  
	  }
	  
	  
	  
	  public  function  listeregionsAction()  {
	      $this->_helper->layout()->disableLayout();
		  
		  $request = $this->getRequest();
          $t_region = new Application_Model_DbTable_EuRegion();		  
          $data = array();
		  $datas['listeregions'] = array();
		  
		  $select = $t_region->select();
	      $select->order('nom_region asc');
	      $select->from($t_region);
	      $regions = $t_region->fetchAll($select);
		 
		  if(count($regions) >= 1)  {
            for($i = 0; $i < count($regions); $i++) {
               $value = $regions[$i];
			   $nom_region = $value->nom_region;
			   $reponse = ucfirst(htmlentities(utf8_decode($nom_region)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$i] = array(
			     'id_region' => $value->id_region, 
				 'libelle'   => $reponsetraiter,
				 'id_pays'   => $value->id_pays
               );
            }
           } else {
               $data = '';
           }
		   
           //$datas['listeregions'] = $data;
           $this->view->data = $data;
	  
	 }
	  
	  
	  
	  
	  public function listeregionsoldAction()  {
	      $this->_helper->layout()->disableLayout();
		  
		  $request = $this->getRequest();
          $t_region = new Application_Model_DbTable_EuRegion();		  
          $data = array();		
		  
		  if($request->isPost()) {
		     $id_pays = $request->getParam('id_pays');
		     $select = $t_region->select();
		     $select->where('id_pays =  ?', $id_pays);
	         $select->order('nom_region asc');
	         $select->from($t_region);
	         $regions = $t_region->fetchAll($select);
		 
		     if(count($regions) >= 1)  {
                for($i = 0; $i < count($regions); $i++) {
                   $value = $regions[$i];
			       $nom_region = $value->nom_region;
			       $reponse = ucfirst(htmlentities(utf8_decode($nom_region)));
			       $reponsetraiter = str_replace("?","e",$reponse);
                   $data[$value->id_region] = $reponsetraiter;
                }
             } else {
                $data = '';
             }
             $this->view->data = $data;
		 
		} else {
		    $select = $t_region->select();
	        $select->order('nom_region asc');
	        $select->from($t_region);
	        $regions = $t_region->fetchAll($select);
		 
		    if(count($regions) >= 1)  {
                for($i = 0; $i < count($regions); $i++) {
                    $value = $regions[$i];
			        $nom_region = $value->nom_region;
			        $reponse = ucfirst(htmlentities(utf8_decode($nom_region)));
			        $reponsetraiter = str_replace("?","e",$reponse);
                    $data[$value->id_region] = $reponsetraiter;
                }
            } else {
                $data = '';
            }
            $this->view->data = $data;
		}
	  
	  }
	  
	  
	  
	  public  function  listeprefecturesAction()  {
	      $this->_helper->layout()->disableLayout();
		  
		  $request = $this->getRequest(); 
		  $t_prefecture = new Application_Model_DbTable_EuPrefecture();
          $data = array();
          $datas['listeprefectures'] = array();		  
		  
		  $select = $t_prefecture->select();
	      $select->order('nom_prefecture asc');
	      $select->from($t_prefecture);
	      $prefectures = $t_prefecture->fetchAll($select);
		 
		  if(count($prefectures) >= 1)  {
              for($i = 0; $i < count($prefectures); $i++) {
                $value = $prefectures[$i];
			    $nom_prefecture = $value->nom_prefecture;
			    $reponse = ucfirst(htmlentities(utf8_decode($nom_prefecture)));
			    $reponsetraiter = str_replace("?","e",$reponse);
				$reponsetraiter = str_replace("&amp;eacute;","e",$reponsetraiter);
				$reponsetraiter = str_replace("&amp;rsquo;","'",$reponsetraiter);
				$reponsetraiter = str_replace("&amp;ndash;","-",$reponsetraiter);
				 
                $data[$i] = array(
			       'id_prefecture' => $value->id_prefecture, 
				   'libelle' => $reponsetraiter,
				   'id_region' => $value->id_region
                );
              }
          } else {
                $data = '';
          }
		  
          //$datas['listeprefectures'] = $data;
          $this->view->data = $data;
		
	  }
	  
	  
	  
	  
	  public function listeprefecturesoldAction()  {
	      $this->_helper->layout()->disableLayout();
		  
		  $request = $this->getRequest(); 
		  $t_prefecture = new Application_Model_DbTable_EuPrefecture();
          $data = array();		
		  
		  if($request->isPost()) {
		     $id_region = $request->getParam('id_region');
		     $select = $t_prefecture->select();
		     $select->where('id_region =  ?', $id_region);
	         $select->order('nom_prefecture asc');
	         $select->from($t_prefecture);
	         $prefectures = $t_prefecture->fetchAll($select);
		 
		     if(count($prefectures) >= 1)  {
                for($i = 0; $i < count($prefectures); $i++) {
                   $value = $prefectures[$i];
			       $nom_prefecture = $value->nom_prefecture;
			       $reponse = ucfirst(htmlentities(utf8_decode($nom_prefecture)));
			       $reponsetraiter = str_replace("?","e",$reponse);
                   $data[$value->id_prefecture] = $reponsetraiter;
                }
             } else {
                $data = '';
             }
             $this->view->data = $data;
		 
		} else {
		    $select = $t_prefecture->select();
	        $select->order('nom_prefecture asc');
	        $select->from($t_prefecture);
	        $prefectures = $t_prefecture->fetchAll($select);
		 
		    if(count($prefectures) >= 1)  {
              for($i = 0; $i < count($prefectures); $i++) {
                 $value = $prefectures[$i];
			     $nom_prefecture = $value->nom_prefecture;
			     $reponse = ucfirst(htmlentities(utf8_decode($nom_prefecture)));
			     $reponsetraiter = str_replace("?","e",$reponse);
                 $data[$value->id_prefecture] = $reponsetraiter;
              }
            } else {
                $data = '';
            }
            $this->view->data = $data;
		}
	  
	  }
	  
	  
	  
	  
	  
	  public  function  listecantonsAction()  {
	    $this->_helper->layout()->disableLayout();
		$request = $this->getRequest();
        $t_canton = new Application_Model_DbTable_EuCanton();		
        $data = array();		
		$datas['listecantons'] = array();
		
		$select = $t_canton->select();
	    $select->order('nom_canton asc');
	    $select->from($t_canton);
	    $cantons = $t_canton->fetchAll($select);
		
		if(count($cantons) >= 1)  {
            for($i = 0; $i < count($cantons); $i++) {
                $value = $cantons[$i];
			    $nom_canton = $value->nom_canton;
			    $reponse = $nom_canton;
			    $reponsetraiter = str_replace("&eacute;","e",$reponse);
                $reponsetraiter = str_replace("d&rsquo;","'",$reponsetraiter);
                $reponsetraiter = str_replace("&ndash;","-",$reponsetraiter);
                $reponsetraiter = str_replace("&egrave;","e",$reponsetraiter);				
		        $data[$i] = array(
			        'id_canton' => $value->id_canton, 
			        'libelle' => $reponsetraiter,
			        'id_prefecture' => $value->id_prefecture
                );	 
            }
        } else {
            $data = '';
        }
		 
	    //$datas['listecantons'] = $data;
        $this->view->data = $data;
	  
	}
	  
	  
	 public function listecantonsoldAction()  {
	    $this->_helper->layout()->disableLayout();
		$request = $this->getRequest();
        $t_canton = new Application_Model_DbTable_EuCanton();		
        $data = array();		
		
		if($request->isPost()) {
		   $id_prefecture = $request->getParam('id_prefecture');
		   $select = $t_canton->select();
		   $select->where('id_prefecture =  ?', $id_prefecture);
	       $select->order('nom_canton asc');
	       $select->from($t_canton);
	       $cantons = $t_canton->fetchAll($select);
		 
		   if(count($cantons) >= 1)  {
              for($i = 0; $i < count($cantons); $i++) {
                $value = $cantons[$i];
			    $nom_canton = $value->nom_canton;
			    $reponse = ucfirst(htmlentities(utf8_decode($nom_canton)));
			    $reponsetraiter = str_replace("?","e",$reponse);
                $data[$value->id_canton] = $reponsetraiter;
              }
           } else {
                $data = '';
           }
           $this->view->data = $data;
		 
		} else {
		    $select = $t_canton->select();
	        $select->order('nom_canton asc');
	        $select->from($t_canton);
	        $cantons = $t_canton->fetchAll($select);
		    if(count($cantons) >= 1)  {
              for($i = 0; $i < count($cantons); $i++) {
                 $value = $cantons[$i];
			     $nom_canton = $value->nom_canton;
			     $reponse = $nom_canton;
			     $reponsetraiter = str_replace("?","e",$reponse);
                 $data[$value->id_canton] = $reponsetraiter;
              }
            } else {
                $data = '';
            }
            $this->view->data = $data;
		}
		
	  }
	  
	  
	  
	  
	  
	  public  function listeactivitesAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $data = array();
		 $datas['listeactivites'] = array();
		 $t_activite = new Application_Model_DbTable_EuActivite();
		 $select = $t_activite->select();
		 $select->order('nom_activite asc');
	     $select->from($t_activite);
	     $activites = $t_activite->fetchAll($select);
	  
	     if(count($activites) >= 1)  {
		   for($i = 0; $i < count($activites); $i++) {
              $value = $activites[$i];
			  $nom_activite = $value->nom_activite;
			  $reponse = ucfirst(htmlentities(utf8_decode($nom_activite)));
			  $reponsetraiter = str_replace("?","e",$reponse);		   
              $data[$i] = array(
			    'code_activite' => $value->code_activite, 
				'nom'    => $reponsetraiter
              );		   
		   }
		   //$datas['listeactivites'] = $data;
           $this->view->data = $data;
		}
	  
	  }
	  
	  
	  
	  public  function  listemetiersAction()  {
	    $this->_helper->layout()->disableLayout();
		$request = $this->getRequest();
        $t_metier = new Application_Model_DbTable_EuMetier();		
        $data = array();		
		$datas['listemetiers'] = array();
		
		//if($request->isPost()) {
		   $code_activite = $request->getParam('code_activite');
		   $select = $t_metier->select();
		   //$select->where('code_activite =  ?', $code_activite);
	       $select->order('libelle_metier asc');
	       $select->from($t_metier);
	       $metiers = $t_metier->fetchAll($select);
		 
		   if(count($metiers) >= 1)  {
              for($i = 0; $i < count($metiers); $i++) {
                $value = $metiers[$i];
			    $libelle_metier = $value->libelle_metier;
				//$reponse = $libelle_metier;
			    $reponse = ucfirst(htmlentities(utf8_decode($libelle_metier)));
			    $reponsetraiter = str_replace("?","e",$reponse);
				$data[$i] = array(
			      'id_metier' => $value->id_metier, 
				  'libelle' => $reponsetraiter,
				  'code_activite' => $value->code_activite
                );
              }
           } else {
                $data = '';
           }
		   
           //$datas['listemetiers'] = $data;
           $this->view->data = $data;
		   
		//}
		
	 }


     public  function listecompetencesAction()  {
	     $this->_helper->layout()->disableLayout();
		 $data = array();
		 $datas['listecompetences'] = array();
		 $t_c = new Application_Model_DbTable_EuCompetence();
		 $request = $this->getRequest();
		 
		 //if($request->isPost()) {
		   $code_activite = $request->getParam('code_activite');
		   $select = $t_c->select();
		   //$select->where('code_activite =  ?', $code_activite);
		   $select->order('libelle_competence asc');
	       $select->from($t_c);
	       $competences = $t_c->fetchAll($select);
	  
	       if(count($competences) >= 1)  {
		     for($i = 0; $i < count($competences); $i++) {
                $value = $competences[$i];
			    $libelle_competence = $value->libelle_competence;
			    $reponse = ucfirst(htmlentities(utf8_decode($libelle_competence)));
			    $reponsetraiter = str_replace("?","e",$reponse);		   
                $data[$i] = array(
			     'id_competence' => $value->id_competence, 
				 'libelle'    => $reponsetraiter,
				 'code_activite' => $value->code_activite
                );		   
              }
		      //$datas['listecompetences'] = $data;
              $this->view->data = $data;
		   }
		 
		 //}
	  
	  }
     	 
	  
	  
	  
	  
	  
	  
	  
	  
	  public function produitsjAction() {
	     $this->_helper->layout()->disableLayout();
		 $tabela = new Application_Model_DbTable_EuBps();
		 $select = $tabela->select();
		 $produits = $tabela->fetchAll($select);
		 $data = array();
		 
		 if (count($produits) >= 1)  {
            for($i = 0; $i < count($produits); $i++) {
               $value = $produits[$i];
			   $designation = $value->designation;
			   $reponse = ucfirst(htmlentities(utf8_decode($designation)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$value->id_bps] = $reponsetraiter;
            }
         } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  
	  public  function produitsrAction()  {
		$this->_helper->layout()->disableLayout();
		$tabela = new Application_Model_DbTable_EuTypeCredit();
		$select = $tabela->select();
		$select->where('code_type_credit IN  (?)', array("IMM","AP","PFS","AG"));
	        $select->order('lib_type_credit asc');
	        $select->from($tabela);
	        $prks = $tabela->fetchAll($select);
		
                if(count($prks) >= 1)  {
                   for($i = 0; $i < count($prks); $i++) {
			$value = $prks[$i];
			$lib_type_credit = $value->lib_type_credit;
			$reponse = ucfirst(htmlentities(utf8_decode($lib_type_credit)));
			$reponsetraiter = str_replace("?","e",$reponse);				
		        $data[$i] = array(
			        'code_type_credit' => $value->code_type_credit, 
			        'libelle' => $reponsetraiter
                        );
		     }
		} else {
                    $data = '';
                }
		$this->view->data = $data;
		
	  }
	  
	  public function produitsoldrAction() {
	     $this->_helper->layout()->disableLayout();
		 $tabela = new Application_Model_DbTable_EuTypeCredit();
		 $select = $tabela->select();
		 $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS","AG"));
	     $select->order('lib_type_credit asc');
	     $select->from($tabela);
	     $prks = $tabela->fetchAll($select);
		 $data = array();
		 
		 if (count($prks) >= 1)  {
            for($i = 0; $i < count($prks); $i++) {
               $value = $prks[$i];
			   $lib_type_credit = $value->lib_type_credit;
			   $reponse = ucfirst(htmlentities(utf8_decode($lib_type_credit)));
			   $reponsetraiter = str_replace("?","e",$reponse);
               $data[$value->code_type_credit] = $reponsetraiter;
            }
         } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  
	  

          public  function produitsnrAction()  {
	    $this->_helper->layout()->disableLayout();
	    $tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
	    $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS","AG"));
	    $select->order('lib_type_credit asc');
	    $select->from($tabela);
	    $prks = $tabela->fetchAll($select);
		
            if(count($prks) >= 1)  {
                for($i = 0; $i < count($prks); $i++) {
		   $value = $prks[$i];
		   $lib_type_credit = $value->lib_type_credit;
		   $reponse = ucfirst(htmlentities(utf8_decode($lib_type_credit)));
		   $reponsetraiter = str_replace("?","e",$reponse);				
		   $data[$i] = array(
		     'code_type_credit' => $value->code_type_credit, 
		     'libelle' => $reponsetraiter
                   );
		}
	    } else {
                $data = '';
            }
	    $this->view->data = $data;
          }

	  
	  public function produitsnroldAction() {
	     $this->_helper->layout()->disableLayout();
		 $tabela = new Application_Model_DbTable_EuTypeCredit();
		 $select = $tabela->select();
		 $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	     $select->order('lib_type_credit asc');
	     $select->from($tabela);
	     $prks = $tabela->fetchAll($select);
		 $data = array();
		 
		 if (count($prks) >= 1)  {
            for($i = 0; $i < count($prks); $i++) {
               $value = $prks[$i];
			   $lib_type_credit = $value->lib_type_credit;
			   $reponse = ucfirst(htmlentities(utf8_decode($lib_type_credit)));
			   $reponsetraiter = str_replace("?","e",$reponse);
			   //$reponsetraiter = $reponse;
               $data[$value->code_type_credit] = $reponsetraiter;
            }
         } else {
            $data = '';
         }
         $this->view->data = $data;
	 }
	 
	 
	 public function formationsAction() {
	    $this->_helper->layout()->disableLayout();
	    $tabela = new Application_Model_DbTable_EuCycleFormation();
		$select = $tabela->select();
		$produits = $tabela->fetchAll($select);
		$data = array();
		
		 if(count($produits) >= 1)  {
            for($i = 0; $i < count($produits); $i++) {
               $value = $produits[$i];
			   $cycle = $value->nom_cycle_formation;
			   $reponse = ucfirst(htmlentities(utf8_decode($cycle)));
			   if(stripos($reponse,"a?")) {
			     $reponsetraiter = str_replace("a?","ai",$reponse);
			   } else {
			     $reponsetraiter = str_replace("?","e",$reponse);
			   }	   
			   $data[$value->id] = $reponsetraiter;   
            }
         } else {
            $data = '';
         }
         $this->view->data = $data;
	  }
	 
	 
	 
	 
	 
	 
	 public function calculermsbcnrAction() {
	    $this->_helper->layout()->disableLayout();
	    $request = $this->getRequest(); 
            $data = array();		
	    if($request->isPost()) {
		   $mont_bc = $request->getParam('mont_bc');
		   $code_produit = $request->getParam('code_produit');
		   
		   $typecredit = new Application_Model_EuTypeCredit();
                   $typecreditM = new Application_Model_EuTypeCreditMapper();
                   $typecreditM->find($code_produit,$typecredit);
		   
		   $prk = $typecredit->prk;
		   
		   $taux = Util_Utils::getParametre('taux','escompte');
	           $pck = Util_Utils::getParametre('pck','nr');
		
                   if($code_produit == "AG") {
                      $mont_msbcnr = floor(($mont_bc * $pck) / $prk);

                   } else {
		      $partie = (($mont_bc * 100) + ($taux * $mont_bc)) / 100;
	              $mont_msbcnr = floor(($partie * $pck) / $prk);
                   }
		   $data["resultat"] = "$mont_msbcnr";
		   $this->view->data = $data;
	    }
	 
	 }
	 
	 
	 
	 public function calculermbcnrAction() {
	     $this->_helper->layout()->disableLayout();
	     $request = $this->getRequest(); 
             $data = array();		 
             if($request->isPost())  {
		  $mont_msbcnr = $request->getParam('mont_msbcnr');
		  $code_produit = $request->getParam('code_produit');
			
		  $typecredit = new Application_Model_EuTypeCredit();
                  $typecreditM = new Application_Model_EuTypeCreditMapper();
                  $typecreditM->find($code_produit,$typecredit);
			
		  $prk = $typecredit->prk;
		 
		  $taux = Util_Utils::getParametre('taux','escompte');
	          $pck = Util_Utils::getParametre('pck','nr');
		
                  
                  if($code_produit == "AG") {
                      $mont_bc = floor(($mont_msbcnr * $prk) / $pck);
                  } else {
		      $diviser = (($pck * 100) + ($taux * $pck)) / 100;
	              $mont_bc = floor(($prk * $mont_msbcnr) / $diviser);
                  }
		  
                  $data["resultat"] = "$mont_bc";
		  $this->view->data = $data;
	      }
	  }
	  
	  
	  public function calculermsbcrAction()  {
	     $this->_helper->layout()->disableLayout();
	     $request = $this->getRequest(); 
             $data = array();		 
	     if($request->isPost()) {
		$mont_bc = $request->getParam('mont_bc');
	        $type_recurrent = $request->getParam('type_recurrent');
		$periode = $request->getParam('periode');
			
			/* $code_produit = $request->getParam('code_produit');
		$typecredit = new Application_Model_EuTypeCredit();
                $typecreditM = new Application_Model_EuTypeCreditMapper();
                $typecreditM->find($code_produit,$typecredit);
		$produit = $typecredit->type_produit;
			*/
			
		$mont_msbcr = "";
			
		$msbcripo = Util_Utils::getParametre('MSBCri','PO');
	        $msbcrips = Util_Utils::getParametre('MSBCri','PS');
	        $msbcrlpm = Util_Utils::getParametre('MSBCrl','PM');
	        $msbcrlpo = Util_Utils::getParametre('MSBCrl','PO');
	        $msbcrlps = Util_Utils::getParametre('MSBCrl','PS');
	  
	        //if($type_recurrent == "limite" && $periode == 22.4)  {
		//$mont_msbcr = floor($mont_bc * $msbcrlpm);
		//}else 

               if($type_recurrent == "limite") {
		    $mont_msbcr = floor($mont_bc * $msbcrlps);
	       }  else if($type_recurrent == "illimite") {
                    $mont_msbcr = floor($mont_bc * $msbcrips);
               } 
		    $data["resultat"] = "$mont_msbcr";
		    $this->view->data = $data;
	       }
	  
	  }
	  
	  
	  
	public  function calculermbcrAction() {
	    $this->_helper->layout()->disableLayout();
		$request = $this->getRequest(); 
        $data = array();		 
		if($request->isPost()) {
		    $mont_msbcr = $request->getParam('mont_msbcr');
	        $type_recurrent = $request->getParam('type_recurrent');
		    $periode = $request->getParam('periode');
			//$code_produit = $request->getParam('code_produit');
		    $typecredit = new Application_Model_EuTypeCredit();
            $typecreditM = new Application_Model_EuTypeCreditMapper();
            $typecreditM->find($code_produit,$typecredit);
		    $produit = $typecredit->type_produit;
		    $mont_bc = "";
		 
		    $msbcripo = Util_Utils::getParametre('MSBCri','PO');
	        $msbcrips = Util_Utils::getParametre('MSBCri','PS');
	        $msbcrlpm = Util_Utils::getParametre('MSBCrl','PM');
	        $msbcrlpo = Util_Utils::getParametre('MSBCrl','PO');
	        $msbcrlps = Util_Utils::getParametre('MSBCrl','PS');
		 
		    //if($type_recurrent == "limite" && $periode == 22.4)  {
		    //$mont_bc = floor($mont_msbcr / $msbcrlpm);
		    //}  else 

                   if($type_recurrent == "limite") {
		        $mont_bc = floor($mont_msbcr / $msbcrlps);
		   } else if($type_recurrent == "illimite") {
                        $mont_bc = floor($mont_msbcr / $msbcrips);
                   }			
			
			$data["resultat"] = "$mont_bc";
		    $this->view->data = $data;
		}
	}
	  
	  
	  
	public  function calculermsbcrjAction()  {
	     $this->_helper->layout()->disableLayout();
		 $request = $this->getRequest();
         $data = array();		 
		 if($request->isPost()) {
		   $mont_bc = $request->getParam('mont_bcj');
		   $id_bps = $request->getParam('id_bps');
		   $bps = new Application_Model_EuBps();
           $bpsM = new Application_Model_EuBpsMapper();
           $bpsM->find($id_bps,$bps);
		   $produit = $bps->valeur_parametre;
		   $periode = Util_Utils::getParametre('BCJ','periode');
		   $mont_msbcrj = floor(($mont_bc * $periode) / $produit);
		   $data["resultat"] = "$mont_msbcrj";
           $this->view->data = $data;   
	     } 
	}
	  
	  
	   
	public  function calculermbcrjAction()   {
	    $this->_helper->layout()->disableLayout();
		$request = $this->getRequest();
        $data = array();		 
		if($request->isPost()) {
		    $mont_msbcrj = $request->getParam('mont_msbcrj');
			$id_bps = $request->getParam('id_bps');
		    $bps = new Application_Model_EuBps();
            $bpsM = new Application_Model_EuBpsMapper();
            $bpsM->find($id_bps,$bps);
		    $produit = $bps->valeur_parametre;
            $periode = Util_Utils::getParametre('BCJ','periode');
            $mont_bc = floor(($mont_msbcrj * $produit) / $periode);
            $data["resultat"] = "$mont_bc";			
		    $this->view->data = $data;
	    }
	}
	  
	  
	  
	public  function calculermsbcnrpreAction()  {
	    $this->_helper->layout()->disableLayout();
		$request = $this->getRequest();  
		if($request->isPost()) {
	        $pck = Util_Utils::getParametre('pck','nr');
		    $mont_projet = $request->getParam('mont_projet');
	        $duree = $request->getParam('duree_projet');
		    $mont_msbcnrpre = "";
	        $mont_bc = "";
			
			if(($duree > 8) && ($duree <= 22.4)) {
              $mont_msbcnrpre = floor(($mont_projet * $pck) / $duree);    		     
              $mont_bc = floor(($mont_projet * 1) / $duree); 
		    } else {
		      $mont_msbcnrpre = "";
              $mont_bc = "";			
		    }
		    $data = array();
		    $data["resultat1"] = "$mont_msbcnrpre";
		    $data["resultat2"] = "$mont_bc";
		    $this->view->data = $data;
	    }
	}
	  
	  
	  
	public  function calculermbcnrpreAction()  {
	    $this->_helper->layout()->disableLayout();
		$request = $this->getRequest();  
		if($request->isPost()) {
		    $pck = Util_Utils::getParametre('pck','nr');
		    $mont_msbcnrpre = $request->getParam('mont_msbcnrpre');
	        $duree = $request->getParam('duree_projet');
		    $mont_projet = "";
	        $mont_bc = "";
            if(($duree > 8) && ($duree <= 22.4)) {
			   $mont_projet = floor(($mont_msbcnrpre * $duree) / $pck);
			   $mont_bc = floor(($mont_projet * 1) / $duree);
			} else {
			   $mont_projet = "";
	           $mont_bc = "";
			}
			$data = array();
		    $data["resultat1"] = "$mont_projet";
		    $data["resultat2"] = "$mont_bc";
		    $this->view->data = $data;
	    }
		 
	}
	  
	  
	public function calculermsbcmAction()  {
	    $this->_helper->layout()->disableLayout();
        $bnpmpo = Util_Utils::getParametre('BNPMPO','valeur');
	    $bnpmpofs = Util_Utils::getParametre('BNPMPOFS','valeur');
        $bnpmpsfs = Util_Utils::getParametre('BNPMPSFS','valeur');
        $bnpmps = Util_Utils::getParametre('BNPMPS','valeur');
		$tpanupm    = Util_Utils::getParametre('TPANU','PM');
	    $tpanupp    = Util_Utils::getParametre('TPANU','PP');
	    $pck = Util_Utils::getParametre('pck','r');

        $request = $this->getRequest();  
		if($request->isPost()) {
            $mont_bc = $request->getParam('mont_bc');
		    //$type_activation = $request->getParam('type_activation');
		    $type_souscripteur = $request->getParam('type_souscripteur');
			$nbre = $request->getParam('nbre');
			
		    $mont_msbcm = 0;
			$mont_gopi  = 0;
			$mont_opi   = 0;
			$mont_panu  = 0;
			
		    $typecredit = new Application_Model_EuTypeCredit();
            $typecreditM = new Application_Model_EuTypeCreditMapper();
			 
		    if($type_souscripteur == "PP")  {
			    $mont_msbcm = floor($mont_bc * $bnpmpsfs * $nbre);
	            $mont_panu = floor(($mont_msbcm * $tpanupp * 2) / 100);
	            $mont_gopi = floor($mont_msbcm + $mont_panu);
	            $mont_opi  = floor($mont_gopi / 22.4);
				
			} elseif($type_souscripteur == "PM") {
                $mont_msbcm = floor($mont_bc * $bnpmpsfs * $nbre);
	            $mont_panu = floor(($mont_msbcm * $tpanupm) / 100);
	            $mont_gopi = floor($mont_msbcm + $mont_panu);
	            $mont_opi  = floor($mont_gopi / 22.4);
				
			} 
			
			/*
			elseif($type_activation == "sansfs" && $type_souscripteur == "PP")  {
                $mont_msbcm = floor($mont_bc * $bnpmps * $nbre);
                $mont_panu = floor(($mont_msbcm * $tpanupp * 2) / 100);
	            $mont_gopi = floor($mont_msbcm + $mont_panu);
	            $mont_opi  = floor($mont_gopi / 22.4);				
	            
            } elseif($type_activation == "sansfs" && $type_souscripteur == "PM")  {
			    $mont_msbcm = floor($mont_bc * $bnpmps * $nbre);
                $mont_panu = floor(($mont_msbcm * $tpanupm) / 100);
	            $mont_gopi = floor($mont_msbcm + $mont_panu);
	            $mont_opi  = floor($mont_gopi / 22.4);
			}
			*/
			 
            $data = array();
		    $data["resultat1"] = "$mont_msbcm";
		    $data["resultat2"] = "$mont_gopi";
		    $data["resultat3"] = "$mont_opi";
		    $this->view->data = $data;

            //$this->view->data = Zend_Json::encode($data);           
			
        }
	  
	}
	  
	  
	  
	public function calculermbcmAction()  {
	    $this->_helper->layout()->disableLayout();
        $bnpmpo = Util_Utils::getParametre('BNPMPO','valeur');
	    $bnpmpofs = Util_Utils::getParametre('BNPMPOFS','valeur');
        $bnpmpsfs = Util_Utils::getParametre('BNPMPSFS','valeur');
        $bnpmps = Util_Utils::getParametre('BNPMPS','valeur');
	    $pck = Util_Utils::getParametre('pck','r');
		$tpanupm = Util_Utils::getParametre('TPANU','PM');
	    $tpanupp = Util_Utils::getParametre('TPANU','PP');
		 
		$nbre ="";
		$mont_gopi ="";
	    $mont_opi ="";
		$data = array();
		 
        $request = $this->getRequest();  
		if($request->isPost()) {		
		    $mont_msbcm = $request->getParam('mont_msbcm');
			$mont_bc = $request->getParam('mont_bc');
		    //$type_activation = $request->getParam('type_activation');
			$type_souscripteur = $request->getParam('type_souscripteur');
			
		    //$typecredit = new Application_Model_EuTypeCredit();
            //$typecreditM = new Application_Model_EuTypeCreditMapper();
            //$typecreditM->find($code_produit,$typecredit);
		    //$produit = $typecredit->type_produit;
		    
            if($type_souscripteur == "PP")  {
               $msbcm = floor($mont_bc * $bnpmpsfs);
	           $mont_panu = floor(($mont_msbcm * $tpanupp * 2) / 100);
			   $nbre  = floor($mont_msbcm / $msbcm);
	           $mont_gopi = floor($mont_msbcm + $mont_panu);
	           $mont_opi  = floor($mont_gopi / 22.4);
			   
            } elseif($type_souscripteur == "PM") {
               $msbcm = floor($mont_bc * $bnpmpsfs);
	           $mont_panu = floor(($mont_msbcm * $tpanupm) / 100);
			   $nbre  = floor($mont_msbcm / $msbcm);
	           $mont_gopi = floor($mont_msbcm + $mont_panu);
	           $mont_opi  = floor($mont_gopi / 22.4);
            
            } 
			
			
			/*
			else if($type_activation == "sansfs" && $type_souscripteur == "PP")  {
			   $msbcm = floor($mont_bc * $bnpmps);
		       $mont_panu = floor(($mont_msbcm * $tpanupp * 2) / 100);
			   $nbre  = floor($mont_msbcm / $msbcm);
	           $mont_gopi = floor($mont_msbcm + $mont_panu);
	           $mont_opi  = floor($mont_gopi / 22.4);
			
			} else if($type_activation == "sansfs" && $type_souscripteur == "PM")  {
			    $msbcm = floor($mont_bc * $bnpmps);
		        $mont_panu = floor(($mont_msbcm * $tpanupm) / 100);
			    $nbre  = floor($mont_msbcm / $msbcm);
	            $mont_gopi = floor($mont_msbcm + $mont_panu);
	            $mont_opi  = floor($mont_gopi / 22.4);	
				
			}
			
			
			if($type_activation == "avecfs" && $produit == "PO")  {
			
               $mont_bc = floor(($mont_msbcm / $bnpmpofs));
	           $mont_conso = ($mont_msbcm - 70000) / $pck;
		       $conus = $mont_bc;
	           $par = floor($mont_conso * 0.375);
	           $rconus = floor($mont_conso * 0.1875);
	           $panu = $mont_conso - $par - $conus - $rconus;
	           $mont_par  = floor(($par * 22.4 * 5.6) / 8.4);
	           $mont_panu = floor($panu * 22.4);
	           $mont_gopi = floor($mont_par + $mont_panu);
	           $mont_opi  = floor($mont_gopi / 22.4);  
            } else if($type_activation == "sansfs" && $produit == "PO")  {
			
			   $mont_bc = floor($mont_msbcm / $bnpmpo);
		       $mont_conso = floor($mont_msbcm / $pck);
		       $conus = $mont_bc;
	           $par = floor($mont_conso * 0.375);
	           $rconus = floor($mont_conso * 0.1875);
	           $panu = $mont_conso - $par - $conus - $rconus - 3125;
	           $mont_par  = floor(($par * 22.4 * 5.6) / 8.4);
	           $mont_panu = floor($panu * 22.4);
	           $mont_gopi = floor($mont_par + $mont_panu);
	           $mont_opi  = floor($mont_gopi / 22.4);   
			}
			*/
			
			
		    $data["resultat1"] = "$nbre";
		    $data["resultat2"] = "$mont_gopi";
			$data["resultat3"] = "$mont_opi";
		    $this->view->data = $data;
            //$this->view->data = Zend_Json::encode($data);			
		   
		}
	  
	}
	  
	  
	  
	  
	  
	public function calculermsbcnmAction()  {
	    $this->_helper->layout()->disableLayout();
		 
		$bnpnmpo   = Util_Utils::getParametre('BNPNMPO','valeur');
	    $bnpnmpofs = Util_Utils::getParametre('BNPNMPOFS','valeur');
        $bnpnmpsfs = Util_Utils::getParametre('BNPNMPSFS','valeur');
        $bnpnmps   = Util_Utils::getParametre('BNPNMPS','valeur');
	    $pck       = Util_Utils::getParametre('pck','r');
	     
		$data = array();
		$mont_msbcnm ="";
		$mont_gopi ="";
		$mont_opi="";
		 
		$request = $this->getRequest();  
		if($request->isPost()) {
		    $mont_bc = $request->getParam('mont_bc');
		    //$type_activation = $request->getParam('type_activation');
			$nbre = $request->getParam('nbre');
		      
			$mont_msbcnm = floor($mont_bc * $bnpnmpsfs * $nbre);
	        $mont_gopi   = $mont_msbcnm;
	        $mont_opi    = floor($mont_gopi / 22.4);
			
			//elseif($type_activation == "sansfs") {
			//$mont_msbcnm = floor($mont_bc * $bnpnmps * $nbre);
	        //$mont_gopi   = $mont_msbcnm;
	        //$mont_opi    = floor($mont_gopi / 22.4); 
			//}
			 
		    $data["resultat1"] = "$mont_msbcnm";
		    $data["resultat2"] = "$mont_gopi";
			$data["resultat3"] = "$mont_opi";
		    $this->view->data = $data;
			//$this->view->data = Zend_Json::encode($data);
		}
	  
	}
	
	
	
	  
	public function calculermbcnmAction()  {
	    $this->_helper->layout()->disableLayout();
		$bnpnmpo   = Util_Utils::getParametre('BNPNMPO','valeur');
	    $bnpnmpofs = Util_Utils::getParametre('BNPNMPOFS','valeur');
        $bnpnmpsfs = Util_Utils::getParametre('BNPNMPSFS','valeur');
        $bnpnmps   = Util_Utils::getParametre('BNPNMPS','valeur');
	    $pck       = Util_Utils::getParametre('pck','r');
		 
		$data = array();
		$nbre = "";
		$mont_opi = "";
		$mont_gopi = "";
		 
		$request = $this->getRequest();  
		if($request->isPost()) {  
		    $mont_msbcnm = $request->getParam('mont_msbcnm');
		    //$type_activation = $request->getParam('type_activation');
			$mont_bc = $request->getParam('mont_bc');
		    
		     
			$msbcnm = floor($mont_bc * $bnpnmpsfs);
			$nbre = floor($mont_msbcnm / $msbcnm);
	        $mont_gopi = $mont_msbcnm;
	        $mont_opi  = floor($mont_gopi / 22.4);
			  
			
			//else if($type_activation == "sansfs") {
            //$msbcnm = floor($mont_bc / $bnpnmps);
			//$nbre = floor($mont_msbcnm / $msbcnm);
	        //$mont_gopi   = $mont_msbcnm;
	        //$mont_opi    = floor($mont_gopi / 22.4);  
            //}
            
		    $data["resultat1"] = "$nbre";
		    $data["resultat2"] = "$mont_gopi";
		    $data["resultat3"] = "$mont_opi";
		    $this->view->data  = $data;
			//$this->view->data = Zend_Json::encode($data);
            			
		}
		 
	}
	  
	  
	public function calculernopiAction()   {
	    $this->_helper->layout()->disableLayout();
        $serie = Util_Utils::getParametre('prc','nr');

        $request = $this->getRequest();
        $data = array();		
		if($request->isPost()) {
          $mont_msbcnri = $request->getParam('msbcnr_i');
          $mont_msbcnrr = $request->getParam('msbcnr_r');
		  $nbre_opi = "";
           
          if($mont_msbcnri > $mont_msbcnrr) {
	        $nbre_opi = ceil(($mont_msbcnri / $mont_msbcnrr) * $serie); 
	      } else {
	        $nbre_opi = "Non disponible";
	      }		   
		  $data["resultat"] = "$nbre_opi";
		  $this->view->data = $data;

        } 
		 
	}
	

	
	  
	public function calculerpjAction()   {
	    $this->_helper->layout()->disableLayout();
		$taux = Util_Utils::getParametre('taux','escompte');
	    $pck = Util_Utils::getParametre('pck','nr');
	    $prk = Util_Utils::getParametre('OPI','prk');
	    $serie = Util_Utils::getParametre('prc','nr');
		$mont_gopi = "";
		$mont_opi  = "";
		$request = $this->getRequest();  
		if($request->isPost()) {
		    $mont_bl = $request->getParam('mont_bl');
            
            $diviser = (($pck * 100) + ($taux * $pck)) / 100;
            $mont_gopi = floor(($prk * $mont_bl) / $diviser); 
	        $mont_opi  = floor($mont_gopi / $serie);			
		
		    $data = array();
		    $data["resultat1"] = "$mont_gopi";
			$data["resultat2"] = "$mont_opi";
		    $this->view->data = $data;
	    }
	  
	}
	 


	 
	  
	public function calculerpbpsAction()  {
	    $this->_helper->layout()->disableLayout();
		 
		$taux = Util_Utils::getParametre('taux','escompte');
	    $pck = Util_Utils::getParametre('pck','nr');
	    $prk = Util_Utils::getParametre('OPI','prk');
	    $serie = Util_Utils::getParametre('prc','nr');
		$mont_gopi = "";
		$mont_opi  = "";
		$request = $this->getRequest();  
		if($request->isPost()) {
		    $mont_bl = $request->getParam('mont_bl'); 
            $diviser = (($pck * 100) + ($taux * $pck)) / 100;
            $mont_gopi = floor(($prk * $mont_bl) / $diviser); 
	        $mont_opi  = floor($mont_gopi / $serie);			
		    $data = array();
		    $data["resultat1"] = "$mont_gopi";
		    $data["resultat2"] = "$mont_opi";
		    $this->view->data = $data;
		}
	     
	}
	  
	  
	  
	  
    public function calculermsbcnrarAction()  {
        $this->_helper->layout()->disableLayout();
		$taux = Util_Utils::getParametre('taux','escompte');
	    $pck = Util_Utils::getParametre('pck','nr');
	    $prk = Util_Utils::getParametre('OPI','prk');
	    $serie = Util_Utils::getParametre('prc','nr');
		 
		$mont_gopi      = "";
		$mont_msbcnrar  = "";
		$data = array();
		
		$request = $this->getRequest();  
		if($request->isPost())  {
		  $mont_opi = $request->getParam('mont_opi');
          $diviser = (($pck * 100) + ($taux * $pck)) / 100;
          $mont_gopi = floor($mont_opi * $serie);
	      $mont_msbcnrar = ceil((($mont_opi * $diviser * $diviser * $serie)) / ($prk * $prk));		  
		
		  $data["resultat1"] = "$mont_gopi";
		  $data["resultat2"] = "$mont_msbcnrar";
		  $this->view->data = $data;
		}

    }	 
	 
	  
	  
	  
	public function calculeropiAction()  {
	    $this->_helper->layout()->disableLayout();
		$taux = Util_Utils::getParametre('taux','escompte');
	    $pck = Util_Utils::getParametre('pck','nr');
	    $prk = Util_Utils::getParametre('OPI','prk');
	    $serie = Util_Utils::getParametre('prc','nr');
		 
		$mont_gopi = "";
		$mont_opi  = "";
		 
		$request = $this->getRequest();  
		if($request->isPost())  {
		    $msbcnr = $request->getParam('msbcnr');
           	$diviser = (($pck * 100) + ($taux * $pck)) / 100;
	        $mont_bc = floor(($prk * $msbcnr) / $diviser);
		     
			$mont_gopi = floor(($prk * $mont_bc) / $diviser);
		    $mont_opi = floor($mont_gopi / $serie);	   
		 
		    $data = array();
		    $data["resultat1"] = "$mont_gopi";
		    $data["resultat2"] = "$mont_opi";
		    $this->view->data = $data;
		}
		 
	}
	 
	 
	public  function  calculermsbcfAction()  {
	    $this->_helper->layout()->disableLayout();
	    $request = $this->getRequest();  
		if($request->isPost())  {
		    $montant_formation = $request->getParam('montant_formation');
            $id_cycle = $request->getParam('id_cycle');
			
			$cycle = new Application_Model_EuCycleFormation();
            $cycleM = new Application_Model_EuCycleFormationMapper();
            $cycleM->find($id_cycle,$cycle);
			
	        $duree_annee = $cycle->duree_annee_formation;
	        $duree_cycle = $cycle->duree_cycle_formation;
	        $taux = $cycle->taux_cycle_formation;

            $montant_msbcf = floor(($montant_formation / ($duree_annee * $duree_cycle)) * $taux);
	        $montant_bc = floor(($montant_formation * 1) / ($duree_annee * $duree_cycle));		   
		
		    $data = array();
		    $data["resultat1"] = "$montant_msbcf";
		    $data["resultat2"] = "$montant_bc";
		    $this->view->data = $data;
	    
	    }
		
	}




    public function addsouscriptionbanAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        $this->_helper->layout()->disableLayout();

        $dbcv = new Application_Model_DbTable_EuConvention();
        $cv = new Application_Model_EuConvention();
        $mpcv = new Application_Model_EuConventionMapper();

        /*if(empty($_SESSION['information_convention'])){
            $this->_redirect('/ticketsupport/convention');
        }*/
    

        //$this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmc');

        //$paramban = (int)$this->_request->getParam('paramban');
        //$this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if (
  (
  ($request->getParam("bon_neutre_nom")!="" && 
  	$request->getParam("bon_neutre_prenom")!="") ||
  ($request->getParam("bon_neutre_raison")!="")
  ) &&
  
  $request->getParam("bon_neutre_mobile")>0 &&
  $request->getParam("bon_neutre_email")!="" &&
  $request->getParam("bon_neutre_personne")!="" &&
  $request->getParam("id_canton")!="" &&
  $request->getParam("bon_neutre_banque")!="" &&
  $request->getParam("bon_neutre_numero")!="" && 
  $request->getParam("bon_neutre_numero")!=NULL &&
  $request->getParam("bon_neutre_date_numero")!="" &&
  $request->getParam("bon_neutre_montant")!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();

                        /////////////////controle nom prenom
                        /*$eubon_neutre = new Application_Model_DbTable_EuBonNeutre();
                        $select = $eubon_neutre->select();
                        $select->where("LOWER(REPLACE(bon_neutre_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_nom"))));
                        $select->where("LOWER(REPLACE(bon_neutre_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_prenom"))));
                        $select->order(array("bon_neutre_id ASC"));
                        $select->limit(1);
                        $rowseubon_neutre = $eubon_neutre->fetchRow($select);
                        if(count($rowseubon_neutre) > 0) {
                          $bon_neutre_ok = 1;
                          $bon_neutre_first = $rowseubon_neutre->bon_neutre_id;
                        } else {
                          $bon_neutre_ok = 0;
                        }*/

                        /////////////////controle numero de banque
                        $eubon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
                        $select = $eubon_neutre_detail->select()
                                                ->where('bon_neutre_detail_banque = ?',$request->getParam("bon_neutre_banque"))
                                                ->where('bon_neutre_detail_numero = ?',$request->getParam("bon_neutre_numero"))
                                                ->where('bon_neutre_detail_date_numero = ?',$request->getParam("bon_neutre_date_numero"))
                                                ;
                        if ($rowseubon_neutre_detail = $eubon_neutre_detail->fetchRow($select)) {
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($rowseubon_neutre_detail->bon_neutre_id, $bon_neutre);

                                $code_BAn = $bon_neutre->bon_neutre_code;

                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Numéro de banque déjà utilisé ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                                
                        }else{


                        /////////////////controle email
                        if(!filter_var($request->getParam("bon_neutre_email"), FILTER_VALIDATE_EMAIL)){
                            $db->rollback();
                            //$this->view->error = Zend_Json::encode("E-mail non valable ...";
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "E-mail non valable ..."
                        	)
                        );  
                            //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                        }

                    //////////////////////////bon_neutre_code_ban
                    if($request->getParam("bon_neutre_code_ban")!=""){
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByCode($request->getParam("bon_neutre_code_ban"));
                    if(count($bon_neutre2) > 0){
                    }else{
                        $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Ancien Code BAn erroné ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                    }
                    }


                        /////////////////controle montant
                        if($request->getParam("bon_neutre_banque") == "BOA" || $request->getParam("bon_neutre_banque") == "UTB" || $request->getParam("bon_neutre_banque") == "BAT" || $request->getParam("bon_neutre_banque") == "ECOBANK" || $request->getParam("bon_neutre_banque") == "ORABANK"){

                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate2($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $request->getParam("bon_neutre_date_numero"));
                            if(count($relevebancairedetail) > 0) {
                                if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                $db->rollback();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                return;
                                }
                            }else{

                                if($request->getParam("bon_neutre_banque") == "BAT"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate6($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ORABANK"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                                }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                }
                            }
                        } else {

                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                        }





//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);


/////////////////////////////////////controle code membre
if($request->getParam("bon_neutre_code_membre")!=""){
if(strlen($request->getParam("bon_neutre_code_membre")) != 20) {
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
}else{
if(substr($request->getParam("bon_neutre_code_membre"), -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($request->getParam("bon_neutre_code_membre"), $membre);
                                if(count($membre) == 0){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
                                if($request->getParam("bon_neutre_nom") == "" || $request->getParam("bon_neutre_nom") == NULL){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez bien saisir le nom et prénom(s)"
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
    }
if(substr($request->getParam("bon_neutre_code_membre"), -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($request->getParam("bon_neutre_code_membre"), $membremorale);
                                if(count($membremorale) == 0){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
                                if($request->getParam("bon_neutre_raison") == "" || $request->getParam("bon_neutre_raison") == NULL){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez bien saisir la raison sociale"
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
    }
}


                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($request->getParam("bon_neutre_code_membre"));
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($request->getParam("bon_neutre_code_membre"));
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);

}else if($request->getParam("bon_neutre_code_ban")!=""){



                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByCode($request->getParam("bon_neutre_code_ban"));
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre(NULL);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


}else{


                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre(NULL);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);




                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


    }



                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($relevebancairedetail->relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);

                            ///////////////////////////////////////////////////////////////////////////////////////

         $convention_array = array(
           "civilite" => $_POST["civilite"], 
           "code_membre" => $_POST["code_membre"], 
           "code_activation" => $_POST["code_activation"], 
           "nom" => $_POST["nom"], 
           "demeure" => $_POST["demeure"], 
           "libelle_demeure" => $_POST["libelle_demeure"], 
           "quartier" => $_POST["quartier"], 
           "quartier_maison" => $_POST["quartier_maison"], 
           "boite_postale" => $_POST["boite_postale"], 
           "telephone" => $_POST["telephone"], 
           "type_validateur" => $_POST["type_validateur"], 
           "situation" => $_POST["situation"], 
           "libelle_situation" => $_POST["libelle_situation"], 
           "rue" => $_POST["rue"], 
           "type_maison" => $_POST["type_maison"], 
           "civilite_representant" => $_POST["civilite_representant"], 
           "nom_representant" => $_POST["nom_representant"], 
           "carte_operateur" => $_POST["carte_operateur"], 
           "numero_recipice" => $_POST["numero_recipice"], 
           "siege" => $_POST["siege"], 
           "matricule_rccm" => $_POST["matricule_rccm"], 
           "statut_convention" => $_POST["statut_convention"], 
           "date_convention" => $_POST["date_convention"], 
           "type_acteur" => $_POST["type_acteur"], 
           "transformateur" => $_POST["transformateur"], 
           "producteur" => $_POST["producteur"], 
           "vendeur" => $_POST["vendeur"], 
           "biens" => $_POST["biens"], 
           "produits" => $_POST["produits"], 
           "services" => $_POST["services"], 
           "fournisseur_specifique" => $_POST["fournisseur_specifique"], 
           "fournisseur_utilisateur" => $_POST["fournisseur_utilisateur"], 
           "fournisseur_externe" => $_POST["fournisseur_externe"]


         );


/**Enregistrement des données de la convention**/
if(!empty($convention_array)){
        if($dbcv->insert($convention_array)){
           $db_cv_select = $dbcv->select();
           $db_cv_select->from('eu_convention', array('MAX(id_convention) as count'));
           $cv_id = $dbcv->fetchAll($db_cv_select);
           $dbcv->update(array('code_activation' => $code_BAn),array('id_convention = ?' => $cv_id[0]['count']));
        }
}
                        }
                            $db->commit();

                            $sessionmcnp->code_BAn = $code_BAn;
                            $sessionmcnp->membre_code = $bon_neutre->bon_neutre_code_membre;

                            $success = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn). <br />
Utilisez ce BAn pour : <br />
- votre propre Activation Personne Physique et/ou Personne Morale <br />
- la souscription pour tiers (CMFH) de votre choix <br />
<br />
";
if($sessionmcnp->membre_code != "" && $sessionmcnp->membre_code != NULL){
    $success .= "Le code du Bon d'Achat neutre (BAn) se trouve dans le compte marchand du membre <strong>".$sessionmcnp->membre_code."</strong><br />";
    $success .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}else{
    $success .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}
    $success .= "<strong>Veuillez bien noter votre code BAn. Il est très important.</strong>Le cas échéant, en cas de perte, reprenez l'opération.";

$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => $code_BAn
                        	)
                        );  
      //$convention_array = [] ;

                            //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            
                            return;

                    }  catch (Exception $exc) {
                    	$message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                        return;
                    }


            }   else {  $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire ..."
                        	)
                        ); 
                         //return;
       }


        }


    }









    public function addsouscriptionbanpersoAction() {
        $sessionmembre = new Zend_Session_Namespace('membre');
        $this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmc');

        /*if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }*/


        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if (
  (
  ($request->getParam("bon_neutre_nom")!="" && 
  	$request->getParam("bon_neutre_prenom")!="") ||
  ($request->getParam("bon_neutre_raison")!="")
  ) &&
  $request->getParam("bon_neutre_mobile")!="" &&
  $request->getParam("bon_neutre_email")!="" &&
  $request->getParam("bon_neutre_personne")!="" &&
  $request->getParam("id_canton")!="" &&
  $request->getParam("bon_neutre_banque")!="" &&
  $request->getParam("bon_neutre_numero")!="" && 
  $request->getParam("bon_neutre_numero")!=NULL &&
  $request->getParam("bon_neutre_date_numero")!="" &&
  $request->getParam("bon_neutre_montant")!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();

                        /////////////////controle nom prenom
                        /*$eubon_neutre = new Application_Model_DbTable_EuBonNeutre();
                        $select = $eubon_neutre->select();
                        $select->where("LOWER(REPLACE(bon_neutre_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_nom"))));
                        $select->where("LOWER(REPLACE(bon_neutre_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_prenom"))));
                        $select->order(array("bon_neutre_id ASC"));
                        $select->limit(1);
                        $rowseubon_neutre = $eubon_neutre->fetchRow($select);
                        if(count($rowseubon_neutre) > 0) {
                          $bon_neutre_ok = 1;
                          $bon_neutre_first = $rowseubon_neutre->bon_neutre_id;
                        } else {
                          $bon_neutre_ok = 0;
                        }*/

                        /////////////////controle numero de banque
                        $eubon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
                        $select = $eubon_neutre_detail->select()
                                                ->where('bon_neutre_detail_banque = ?',$request->getParam("bon_neutre_banque"))
                                                ->where('bon_neutre_detail_numero = ?',$request->getParam("bon_neutre_numero"))
                                                ->where('bon_neutre_detail_date_numero = ?',$request->getParam("bon_neutre_date_numero"))
                                                ;
                        if ($rowseubon_neutre_detail = $eubon_neutre_detail->fetchRow($select)) {
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($rowseubon_neutre_detail->bon_neutre_id, $bon_neutre);

                                $code_BAn = $bon_neutre->bon_neutre_code;

                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Numéro de banque déjà utilisé ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            return;
                        }else{

                        /////////////////controle email
                        if(!filter_var($request->getParam("bon_neutre_email"), FILTER_VALIDATE_EMAIL)){
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "E-mail non valable ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            return;
                        }

                        /////////////////controle montant
                        if($request->getParam("bon_neutre_banque") == "BOA" || $request->getParam("bon_neutre_banque") == "UTB" || $request->getParam("bon_neutre_banque") == "BAT" || $request->getParam("bon_neutre_banque") == "ECOBANK" || $request->getParam("bon_neutre_banque") == "ORABANK"){

                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate2($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $request->getParam("bon_neutre_date_numero"));
                            if(count($relevebancairedetail) > 0) {
                                if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                $db->rollback();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                return;
                                }
                            }else{

                                if($request->getParam("bon_neutre_banque") == "BAT"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate6($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ORABANK"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                    }

                                }else{
                                        $db->rollback();
                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ..."
                        	)
                        );
                                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                }
                            }
                        } else {

                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                        }




//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);


/////////////////////////////////////controle code membre
if($request->getParam("bon_neutre_code_membre")!=""){
if(strlen($request->getParam("bon_neutre_code_membre")) != 20) {
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
}else{
if(substr($request->getParam("bon_neutre_code_membre"), -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($request->getParam("bon_neutre_code_membre"), $membre);
                                if(count($membre) == 0){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
                                if($request->getParam("bon_neutre_nom") == "" || $request->getParam("bon_neutre_nom") == NULL){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez bien saisir le nom et prénom(s)"
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
    }
if(substr($request->getParam("bon_neutre_code_membre"), -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($request->getParam("bon_neutre_code_membre"), $membremorale);
                                if(count($membremorale) == 0){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ..."
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
                                if($request->getParam("bon_neutre_raison") == "" || $request->getParam("bon_neutre_raison") == NULL){
                                    $db->rollback();
                                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez bien saisir la raison sociale"
                        	)
                        );
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
    }
}


                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($request->getParam("bon_neutre_code_membre"));
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($request->getParam("bon_neutre_code_membre"));
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);

}else{


                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($request->getParam("bon_neutre_code_membre"));
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);




                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


    }



                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($relevebancairedetail->relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);

                        }
                            ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembre->code_BAn = $code_BAn;
                            $success = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn). <br />
Utilisez ce BAn pour : <br />
- votre propre Activation Personne Physique et/ou Personne Morale <br />
- la souscription pour tiers (CMFH) de votre choix <br />
<br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
    $success .= "<strong>Veuillez bien noter votre code BAn. Il est très important.</strong>Le cas échéant, en cas de perte, reprenez l'opération.";

    $this->view->error .= Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => $code_BAn
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            return;

                    }  catch (Exception $exc) {
                    	$message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                        //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                        return;
                    }


            }   else {  $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire ..."
                        	)
                        ); }


        }


    }












   public function enrolementsms2Action() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        $this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmc');

        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
            if ($request->getParam("code_BAn")!=""
              //&& $request->getParam("nom_membre")!=""
              && $request->getParam("sexe_membre")!=""
              && $request->getParam("nationalite_membre")!=""
              && $request->getParam("sitfam_membre")!=""
              //&& $request->getParam("prenom_membre")!=""
              && $request->getParam("date_nais_membre")!=""
              && $request->getParam("lieu_nais_membre")!=""
              && $request->getParam("nbr_enf_membre")!=""
              && $request->getParam("quartier_membre")!=""
              && $request->getParam("ville_membre")!=""
              //&& $request->getParam("portable_membre")!=""
              && $request->getParam("profession_membre")!=""
              && $request->getParam("religion_membre")!=""
              && $request->getParam("id_pays")!=""
              && $request->getParam("code_agence")!=""
              && $request->getParam("code_activite")!=""
              && $request->getParam("id_canton")!=""
              ) {


                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
                    if(count($bon_neutre) == 0) {
                       $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Code BAn incorrect ..."
                        	)
                        );
                       $db->rollback();
                       //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                       return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",addslashes($bon_neutre->bon_neutre_nom))));

                        $tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
                        foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",addslashes($value)))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Vous êtes déjà membre ..."
                        	)
                        );
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle email
                        if($request->getParam("email_membre") != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "E-mail non valable ..."
                        	)
                        );
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }





                    if(count($bon_neutre) > 0) {

                       /////////////////controle nom prenom
                       if($bon_neutre->bon_neutre_montant_solde < 5000) {
                          $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant restant du BAn est insuffisant ..."
                        	)
                        );
                          $db->rollback();
                          //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                          return;
                       }

                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(5000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 5000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 5000);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 5000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant restant du BAn est insuffisant ..."
                        	)
                        );
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

                if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                   $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                   foreach ($appro_detail as $appro) {
                      $bnad = new Application_Model_EuBonNeutreApproDetail();
                      $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                      $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id, $bnad);

                      if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                         $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                         $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                         $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                         $bnad_M->update($bnad);
                      } else {
                         $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                         $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                         $bnad_M->update($bnad);
                         break;
                      }

                    }

                 }

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2M->update($bon_neutre_detail2);
               } else {
                 if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                     $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                     $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                     $appro_montant_solde = $mont;
                     foreach ($appro_detail as $appro) {
                       $bnad = new Application_Model_EuBonNeutreApproDetail();
                       $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                       $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                       if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                          $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                          $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                          $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                          $bnad_M->update($bnad);
                       } else {
                          $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                          $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                          $bnad_M->update($bnad);
                          break;
                       }

                      }

                      }

                      $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                      $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                      $bon_neutre_detail2M->update($bon_neutre_detail2);
                      break;
                 }

                        }
                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant'
                        	)
                        );
                            //$db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                                                        //return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("ESMC");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;


                        if($code_fs != "") {
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            if ($sms_fs == NULL) {
                                $db->rollback();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => 'Le code FS [' . $code_fs . ']  est  invalide !!!'
                        	)
                        );
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation"
                        	)
                        );
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if ($date_nais >= $date_idd) {
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!"
                        	)
                        );
                                $db->rollback();
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            $preinscription->setId_preinscription($compteur_preinscription)
                           ->setNom_membre($bon_neutre->bon_neutre_nom)
                           ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre(NULL)
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"))
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"))
                           ;
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);


///////////////////////////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(2);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(3);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


                            $membre->setCode_membre($code)
                                   ->setNom_membre($bon_neutre->bon_neutre_nom)
                                   ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre(NULL)
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"))
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null)
                                   ->setId_canton($request->getParam("id_canton"));
                            $mapper->save($membre);


                                /////////////
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setCode_membre($code);
                                $preinscriptionM->update($preinscription);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();


                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            //$id_souscription = $findcode->souscription_id;
                            //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                            //if($findsouscrip != FALSE) {
                            //}
                            $souscription_mapper->find($findcode->souscription_id,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
                        }
                        else {
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Les codes d'activation ne sont liés à aucune souscription !!!"
                        	)
                        );
                            $db->rollback();
                            //$this->view->nom_membre = $_POST["nom_membre"];
                            //$this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            //$this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            //$this->view->portable = $_POST["portable_membre"];
                            return;
                        }

                            $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
                            $findmem = $mem_mapper->find($code,$mem);

                            if(($ancien_code == '') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                            } else {
                              if(substr($ancien_code,-1,1) == 'M') {
                                 $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Ce membre n'est pas autorisé à effectuer cette opération !!!"
                        	)
                        );
                                 $db->rollback();
                                 //$this->view->nom_membre = $_POST["nom_membre"];
                                 //$this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 //$this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 //$this->view->portable = $_POST["portable_membre"];
                                 return;
                            }

                            $mem->setEtat_membre('A');
                            //Mise à jour de la table physique
                            $p_mapper = new Application_Model_PhysiqueMapper();
                            $p = new Application_Model_Physique();
                            $rep = $p_mapper->find($ancien_code,$p);
                            if ($rep == true) {
                                $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                $p_mapper->update($p);
                            }
                            
                            // Mise à jour de la table eu_ancien_membre
                            $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                            $pmcnp = new Application_Model_EuAncienMembre();
                            $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                            if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                            }
                            }
                            $mem_mapper->update($mem);



//for($i = 0; $i < count($request->getParam("numero_telephone")); $i++) {
$compagnie = telephonecompagnie($request->getParam("code_telephonique"), $request->getParam("numero_telephone"));
$numero_telephone = intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone");
if($compagnie == 1) {
    $db->rollback();
    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct."
                        	)
                        );
    return; 
} else {
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            //for($i = 0; $i < count($request->getParam("code_banque")); $i++) {
                                if($request->getParam("code_banque") != "") {
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($request->getParam("code_banque"))
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($request->getParam("num_compte"));
                                    $cb_mapper->save($cb);
                                }   
                            //}

                            $mapper_op = new Application_Model_EuOperationMapper();
                            $compteurfs = $mapper_op->findConuter() + 1;
                            $lib_op = 'Auto-enrôlement';
                            $type_op = 'AERL';
                            Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                            $tab_fs = new Application_Model_DbTable_EuFs();
                            $fs_model = new Application_Model_EuFs();
                            $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fs_model->setOrigine_fs('N');
                            } else {
                                $fs_model->setOrigine_fs('A');
                            }
                            $tab_fs->insert($fs_model->toArray());

                            $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fs);

                            $userin = new Application_Model_EuUtilisateur();
                            $mapper = new Application_Model_EuUtilisateurMapper();
                            $id_user = $mapper->findConuter() + 1;
                            $userin->setId_utilisateur($id_user)
                                   ->setId_utilisateur_parent(NULL)
                                   ->setPrenom_utilisateur($bon_neutre->bon_neutre_prenom)
                                   ->setNom_utilisateur($bon_neutre->bon_neutre_nom)
                                   ->setLogin($code)
                                   ->setPwd(md5($codesecret))
                                   ->setDescription(NULL)
                                   ->setUlock(0)
                                   ->setCh_pwd_flog(0)
                                   ->setCode_groupe('personne_physique')
                                   ->setCode_groupe_create('personne_physique')
                                   ->setConnecte(0)
                                   ->setCode_agence($code_agence)
                                   ->setCode_secteur(NULL)
                                   ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                   ->setId_pays($id_pays)
                                   ->setCode_acteur($code_acteur)
                                   ->setCode_membre($code)
                                   ->setId_canton($request->getParam("id_canton"));
                            $mapper->save($userin);

                            // Mise à jour de la table eu_contrat
                            $contrat = new Application_Model_EuContrat();
                            $mapper_contrat = new Application_Model_EuContratMapper();
                            $id_contrat = $mapper->findConuter() + 1;
                            $contrat->setId_contrat($id_contrat);
                            $contrat->setCode_membre($code);
                            $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                            $contrat->setNature_contrat('numeraire');
                            $contrat->setId_type_contrat(NULL);
                            $contrat->setId_type_creneau(NULL);
                            $contrat->setId_type_acteur(NULL);
                            $contrat->setId_pays(NULL);
                            $contrat->setId_utilisateur(NULL);
                            $contrat->setFiliere(NULL);
                            $mapper_contrat->save($contrat);
                            
                        } else {
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Le code FS est inexistant !!!"
                        	)
                        );
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
                        
                        }
                        if($code_fl != "") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            if ($sms_fl == NULL) {
                                $db->rollback();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => 'Le code FL [' . $code_fl . ']  est  invalide !!!'
                        	)
                        );
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation"
                        	)
                        );
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fl->setOrigine_fl('N');
                            } else {
                                $fl->setOrigine_fl('A');
                            }
                            $tfl->insert($fl->toArray());

                            //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

                            for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                        }  else {
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Le code FL est inexistant !!!"
                        	)
                        );
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }


                        if($code_fkps != "") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            if ($sms_fkps == NULL) {
                                $db->rollback();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!'
                        	)
                        );
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation"
                        	)
                        );
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $carte->setOrigine_fkps('N');
                            } else {
                              $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            $compteurcps = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
                        }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(5000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);
              ///////////////////////////////////////////////////////////////////////////////////////



        $convention = new Application_Model_DbTable_EuConvention();
        $select2 = $convention->select();
        $select2->where("code_activation = ?", $request->getParam("code_BAn"));
        $select2->orwhere("(code_membre IS NULL");
        $select2->where("code_membre = '')");
        $select2->limit(1);

        if($convention_rows = $convention->fetchRow($select2)){
        $convention2 = new Application_Model_DbTable_EuConvention();
        $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
        }





                            ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur, intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"),"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>",
	                        	'code_membre' => $code, 
	                        	'code_secret' => $codesecret, 
	                        	'certificat' => Util_Utils::genererPdfCertificatPP($code) 
                        	)
                        );
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                            //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);

                    }
                    }  catch (Exception $exc) {
                        $db->rollback();
                        $message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                        //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                       //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                       $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
            } else {
                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire ..."
                        	)
                        );
                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
            }
        }
    }











   public function enrolementpmsms2Action() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');


        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if ($request->getParam("code_BAn")!=""
            && $request->getParam("code_type_acteur")!=""
            //&& $request->getParam("raison_sociale")!=""
            && $request->getParam("num_registre_membre")!=""
            && $request->getParam("code_statut")!=""
            && $request->getParam("code_rep")!=""
            && $request->getParam("quartier_membre")!=""
            && $request->getParam("ville_membre")!=""
            //&& $request->getParam("portable_membre")!=""
            && $request->getParam("email_membre")!=""
            && $request->getParam("id_pays")!=""
            && $request->getParam("code_agence")!=""
            && $request->getParam("code_activite")!=""
            && $request->getParam("id_canton")!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                    /////////////////controle Code BAn
                    if(count($bon_neutre) == 0){
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Code BAn incorrect ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));

                        /*$tabraison = explode(" ", $bon_neutre->bon_neutre_raison);
                        foreach ($tabraison as $value) {
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }*/

                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Vous êtes déjà membre ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle email
                        if($request->getParam("email_membre") != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "E-mail non valable ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }


                        /////////////////controle codemembre
                        if($request->getParam("code_rep") != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($request->getParam("code_rep"), $membre)){
                                //count($membre) == 0;
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                            }
                        }




                    if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < 70000){
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant restant du BAn est insuffisant ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                            }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(70000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 70000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 70000);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 70000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Montant restant du BAn est insuffisant ..."
                        	)
                        );
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);
/*
                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                }else{
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                break;
                                }

                        }*/


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                }else{


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $mont;
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                break;
                                }

                        }
                            




                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant'
                        	)
                        );
                            //$db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                                                        //return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("ESMC");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($request->getParam("code_agence"), 0, 3);
                $id_pays = $request->getParam("id_pays");
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                    if($code_fs !="") {
                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($bon_neutre->bon_neutre_raison)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(NULL)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"))
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


//////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(2);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(3);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($bon_neutre->bon_neutre_raison);
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(NULL);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"));
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




                        /////////////
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                        $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                        $preinscriptionmorale->setCode_membre_morale($code);
                        $preinscriptionmoraleM->update($preinscriptionmorale);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();

                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            $id_souscription = $findcode->souscription_id;
                            $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

                        } else {
                            $db->rollback();
                            $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!"
                        	)
                        );
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            //$this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }

                        $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                        $findmem = $mem_mapper->find($code,$mem);

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                        } else {
                              if(substr($ancien_code,-1,1) == 'P') {
                                 $db->rollback();
                                 $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!"
                        	)
                        );
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                              }
                              $mem->setEtat_membre('A');
                              //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

                             // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
                         $mem_mapper->update($mem);




                        // eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

                        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($request->getParam("code_rep"))
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);



//for($i = 0; $i < count($request->getParam("numero_telephone")); $i++) {
$compagnie = telephonecompagnie($request->getParam("code_telephonique"), $request->getParam("numero_telephone"));
$numero_telephone = intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone");
if($compagnie == 1){
    $db->rollback();
    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct."
                        	)
                        );
    return; 
}else{
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteurt = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteurt);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        //for($i = 0; $i < count($request->getParam("code_banque")); $i++) {
                            if($request->getParam("code_banque") != "") {
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($request->getParam("code_banque"))
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($request->getParam("num_compte"));
                            $cb_mapper->save($cb);
                            }
                        //}


                        //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($request->getParam("code_rep"),$membrein);
                        $id_user = $user_mapper->findConuter() + 1;

                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($request->getParam("id_pays"));
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                        } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                    } else {
                        $db->rollback();
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Le code FS est inexistant !!!"
	                        	)
                        	);
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }





                    if($code_fl !="") {

                        $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fl->setOrigine_fl('N');
                        } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

                        //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

                                    //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }

                        //$tcartes[0]="TPAGCP";
                        $tscartes[1]="TSCNCSEI";
                        $tscartes[2]="TSGCI";
                        $tscartes[3]="TSIR";
                        $tscartes[4]="TSPaR";
                        $tscartes[5]="TSFS";
                        $tscartes[6]="TSPN";
                        $tscartes[7]="TSIB";
                        $tscartes[8]="TSPaNu";
                        $tscartes[9]="TSIN";
                        $tscartes[10]="TSCAPA";
                        $tscartes[11]="TSMARGE";
                        //$tcartes[14]="TSRE";

                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $db->rollback();
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur d'éxecution: Le code FL est inexistant !!!"
	                        	)
                        	);
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $carte->setOrigine_fkps('N');
                        } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
                    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(70000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);
              ///////////////////////////////////////////////////////////////////////////////////////



        $convention = new Application_Model_DbTable_EuConvention();
        $select2 = $convention->select();
        $select2->where("code_activation = ?", $request->getParam("code_BAn"));
        $select2->orwhere("(code_membre IS NULL");
        $select2->where("code_membre = '')");
        $select2->limit(1);

        if($convention_rows = $convention->fetchRow($select2)){
        $convention2 = new Application_Model_DbTable_EuConvention();
        $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
        }





                            ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur, intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone")[0],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>",
	                        	'code_membre' => $code, 
	                        	'code_secret' => $codesecret, 
	                        	'certificat' => Util_Utils::genererPdfCertificatPP($code)
                        	)
                        );
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);

                    }

                    }
                    }  catch (Exception $exc) {
                    	$message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
            } else {
                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire ..."
                        	)
                        );
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
            }
        }
    }
	
	
	


    
	public function  addpostulatAction()  {
		$sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->disableLayout();
		
		$request = $this->getRequest();
        if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
		        $membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
		        $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
		        
		        $date_id = Zend_Date::now();
				
		        $postulat = new Application_Model_EuPostulat();
                $postulat_mapper = new Application_Model_EuPostulatMapper();
			
		        $code_membre = $request->getParam("postulat_code_membre");
		        $id_type_candidat = $request->getParam("id_type_candidat");
		        $postulat_nom = $request->getParam("postulat_nom");  
		        $postulat_prenom = $request->getParam("postulat_prenom");
		        $postulat_raison = $request->getParam("postulat_raison");
			
		        $postulat_mobile = $request->getParam("postulat_mobile");
		        $postulat_email = $request->getParam("postulat_email");
			
	            $code_zone  = $request->getParam("code_zone");
		        $id_pays = $request->getParam("id_pays");
	            $id_region = $request->getParam("id_region");
		        $id_prefecture = $request->getParam("id_prefecture");
		        $id_canton = $request->getParam("id_canton");
		        $code_postulat = "";

                $db_postulat = new Application_Model_DbTable_EuPostulat();
				
				
				$select = $db_postulat->select();
	            $select->where("LOWER(REPLACE(nom_postulat, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$postulat_nom)));

				$tabprenom = explode(" ", $postulat_prenom);
				foreach($tabprenom as $value) {
	              $select->where("LOWER(REPLACE(prenom_postulat, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				}
				
				if($postulat_raison != "") {
				    $tabraison = explode(" ", $postulat_raison);
				    foreach($tabraison as $raison) {
	                    $select->where("LOWER(REPLACE(raison_postulat, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$raison))."%' ");
				    }
				}
				$select->where("id_canton = ? ", $id_canton);
				$select->where("id_type_candidat = ? ", $id_type_candidat);
				$select->limit(1);
	            $rowspostulat = $db_postulat->fetchRow($select);
				
				if(count($rowspostulat) <= 0) {
				    if(($code_membre != "") && (substr($code_membre,19,1) == 'P'))  {
			            $findmembre = $m_map->find($code_membre,$membre);
			            if($findmembre == false) {
			                $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du postulant saisi ".$code_membre."  est introuvable ..."));							
			                return;
			            }
		            } elseif(($code_membre != "") && (substr($code_membre,19,1) == 'M'))  {
			            $findmembre = $m_map->find($code_membre,$membre);
			            if($findmembre == false) {
			                $db->rollback();	
		                    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du postulant saisi ".$code_membre."  est introuvable ..."));							
			                return;
		                }	
		            }
                     
					do  {
	                    $code_postulat = strtoupper(Util_Utils::genererCodeSMS(6));
                        $postulat2_mapper = new Application_Model_EuPostulatMapper();
                        $postulat2 = $postulat2_mapper->fetchAllByCode($code_postulat);
                    } while(count($postulat2) > 0);
				
				    $compteur_postulat = $postulat_mapper->findConuter() + 1;
				    $postulat->setId_postulat($compteur_postulat);
				    $postulat->setCode_membre($code_membre);
				    $postulat->setId_type_candidat($id_type_candidat);
				    $postulat->setDate_postulat($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				    $postulat->setNom_postulat($postulat_nom);
				    $postulat->setPrenom_postulat($postulat_prenom);
				    $postulat->setRaison_postulat($postulat_raison);
				    $postulat->setCode_zone($code_zone);
				    $postulat->setId_pays($id_pays);
				    $postulat->setId_region($id_region);
				    $postulat->setId_prefecture($id_prefecture);
				    $postulat->setId_canton($id_canton);
				    $postulat->setEmail_postulat($postulat_email);
				    $postulat->setMobile_postulat($postulat_mobile);
				    $postulat->setId_canton($id_canton);
				    $postulat->setTraiter(0);
				    $postulat->setCode_postulat($code_postulat);
				    $postulat_mapper->save($postulat);
				
				    $db->commit();
					$this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => 
					"Operation bien effectuee. Vous venez d'ajouter un postulat.Voici votre code postulat : ".$code_postulat.
					" Veuillez le conserver pour la suite des opérations"));
				} else {
					$this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Voici le code postulat : ".$rowspostulat->code_postulat));
				}
		
		    } catch (Exception $exc) {
				$db->rollback();
                $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                return;					
			}
			
		}
	
		
	}


        public  function validerpostulatAction()  {
		$this->_helper->layout->disableLayout();
                $request = $this->getRequest();
	        if($request->isPost())   {
		    $t_postulat = new Application_Model_DbTable_EuPostulat();
		    $code_postulat = $request->getParam("code_postulat");		
		    $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                    $select->setIntegrityCheck(false);
                    $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                    $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                    $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		    $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		    $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		    $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                    $select->where('eu_postulat.code_postulat like ?', trim($code_postulat));	
                    $entries = $t_postulat->fetchAll($select);	
			
		    if(count($entries) > 0) {
		          $i = 0;
			  foreach($entries as $entry) :
			      $data[$i] = array(
                                 'id_type_candidat' =>  $entry->id_type_candidat,
				 'cmfh' =>  $entry->libelle_type_candidat,
				 'date_postulat' => datejourfr($entry->date_postulat),
				 'nom_postulat' => $entry->raison_postulat." ".$entry->nom_postulat." ".$entry->prenom_postulat,
			         'mobile_postulat' => $entry->mobile_postulat,
			         'zone' => $entry->nom_zone,
				 'pays' => $entry->libelle_pays,
			         'region' => $entry->nom_region,
				 'prefecture' => $entry->nom_prefecture,
				 'canton' => $entry->nom_canton,
				 'id_postulat' => $entry->id_postulat ,
                                 'id_type_offreur_projet' => "",
				 'libelle_type_offreur_projet' => "",
				 'id_type_integrateur' => "",
				 'libelle_type_integrateur' => "",
				 'nbre_compte' => "",
				 'montant' =>  "" 
                               );
			       $i++;
                           endforeach;
			} else {
			    $data[0] = array(
                               'id_type_candidat' =>  "",
			       'cmfh' =>  "",
			       'date_postulat' => "",
			       'nom_postulat' => "",
			       'mobile_postulat' => "",
			       'zone' => "",
			       'pays' => "",
			       'region' => "",
			       'prefecture' => "",
			       'canton' => "",
			       'id_postulat' => "",
                               'id_type_offreur_projet' => "",
			       'libelle_type_offreur_projet' => "",
			       'id_type_integrateur' => "",
			       'libelle_type_integrateur' => "",
			       'nbre_compte' => "",
			       'montant' =>  ""
                            );
			}
			$this->view->error = Zend_Json::encode($data);
		}	
	}

       
      



    public function listtypeoffreurAction()  {
		$this->_helper->layout->disableLayout();
		$request = $this->getRequest();
		
	    if($request->isPost()) {
		    $type = $request->getParam("offreur_projet_type");
		    if($type != '') {
                $t_offreur = new Application_Model_DbTable_EuTypeOffreurProjet();
                $result = $t_offreur->find($type);
                $data = array();
                if(count($result) > 0) {
					$data[0] = array(
					    'id_type_offreur_projet' => "",
				        'libelle_type_offreur_projet' => "",
						'id_type_integrateur' => "",
				        'libelle_type_integrateur' => "",
						'cmfh' =>  "",
				        'date_postulat' => "",
				        'nom_postulat' => "",
				        'mobile_postulat' => "",
				        'zone' => "",
				        'pays' => "",
				        'region' => "",
				        'prefecture' => "",
				        'canton' => "",
				        'id_postulat' => "",
				        'nbre_compte' => floor($result->current()->montant_param/2187.5),
				        'montant' => $result->current()->montant_param
                    );
                } else {
                    $data[0] = array(
					    'id_type_offreur_projet' => "",
				        'libelle_type_offreur_projet' => "",
					    'id_type_integrateur' => "",
				        'libelle_type_integrateur' => "",
						'nbre_compte' => "",
				        'montant' =>  "",
						'cmfh' =>  "",
				        'date_postulat' => "",
				        'nom_postulat' => "",
				        'mobile_postulat' => "",
				        'zone' => "",
				        'pays' => "",
				        'region' => "",
				        'prefecture' => "",
				        'canton' => "",
				        'id_postulat' => ""
				        
                    );
                }
            }
        
		} else {
			$t_offreur = new Application_Model_DbTable_EuTypeOffreurProjet();
			$select = $t_offreur->select();
	        $select->order('libelle_type_offreur_projet asc');
	        $select->from($t_offreur);
	        $results = $t_offreur->fetchAll($select);
			
			if(count($results) > 0) {
                $i = 0;
			    foreach($results as $entry) :
			        $data[$i] = array(
					    'id_type_offreur_projet' => $entry->id_type_offreur_projet,
				        'libelle_type_offreur_projet' => $entry->libelle_type_offreur_projet,
						'id_type_integrateur' => "" ,
				        'libelle_type_integrateur' => "" ,
						'cmfh' =>  "",
				        'date_postulat' => "",
				        'nom_postulat' => "",
				        'mobile_postulat' => "",
				        'zone' => "",
				        'pays' => "",
				        'region' => "",
				        'prefecture' => "",
				        'canton' => "",
				        'id_postulat' => "",
				        'nbre_compte' => floor($entry->montant_param/2187.5),
				        'montant' => $entry->montant_param
                    );
			        $i++;
                    endforeach;
			} else {
			    $data[0] = array(
				    'id_type_offreur_projet' => "",
				    'libelle_type_offreur_projet' => "",
					'id_type_integrateur' => "",
				    'libelle_type_integrateur' => "",
					'cmfh' =>  "",
				    'date_postulat' => "",
				    'nom_postulat' => "",
				    'mobile_postulat' => "",
				    'zone' => "",
				    'pays' => "",
				    'region' => "",
				    'prefecture' => "",
				    'canton' => "",
				    'id_postulat' => "",
				    'nbre_compte' => "",
				    'montant' =>  ""
                );
			}					
			
		}
		$this->view->error = Zend_Json::encode($data);
		
    }
	
	
	

	
	public function listtypeintegrateurAction()  {
            $this->_helper->layout->disableLayout();
	    $request = $this->getRequest();
		
	    if($request->isPost()) {
		$type = $request->getParam("integrateur_type");
		if($type != '') {
                $t_integrateur = new Application_Model_DbTable_EuTypeIntegrateur();
                $result = $t_integrateur->find($type);
                $data = array();
                if(count($result) > 0) {
					$data[0] = array(
					    'id_type_offreur_projet' => "",
				        'libelle_type_offreur_projet' => "",
					    'id_type_integrateur' => "",
				        'libelle_type_integrateur' => "",
						'cmfh' =>  "",
				        'date_postulat' => "",
				        'nom_postulat' => "",
				        'mobile_postulat' => "",
				        'zone' => "",
				        'pays' => "",
				        'region' => "",
				        'prefecture' => "",
				        'canton' => "",
				        'id_postulat' => "",
				        'nbre_compte' => floor($result->current()->montant_param/2187.5),
				        'montant' => $result->current()->montant_param
                    );
                } else {
                    $data[0] = array(
					    'id_type_candidat' => "",
			            'cmfh' =>  "",
				        'date_postulat' => "",
				        'nom_postulat' => "",
				        'mobile_postulat' => "",
				        'zone' => "",
				        'pays' => "",
				        'region' => "",
				        'prefecture' => "",
				        'canton' => "",
				        'id_postulat' => "",
					    'id_type_offreur_projet' => "",
				        'libelle_type_offreur_projet' => "",
					    'id_type_integrateur' => "",
				        'libelle_type_integrateur' => "",
				        'nbre_compte' => "",
				        'montant' =>  ""
                    );
                }
            }
        
		} else {
			$t_integrateur = new Application_Model_DbTable_EuTypeIntegrateur();
			$select = $t_integrateur->select();
	        $select->order('libelle_type_integrateur asc');
	        $select->from($t_integrateur);
	        $results = $t_integrateur->fetchAll($select);
			
			if(count($results) > 0) {
                $i = 0;
			    foreach($results as $entry) :
			        $data[$i] = array(
					    'id_type_candidat' => "",
			            'cmfh' =>  "",
				        'date_postulat' => "",
				        'nom_postulat' => "",
				        'mobile_postulat' => "",
				        'zone' => "",
				        'pays' => "",
				        'region' => "",
				        'prefecture' => "",
				        'canton' => "",
				        'id_postulat' => "",
					'id_type_offreur_projet' => "",
				        'libelle_type_offreur_projet' => "",
					'id_type_integrateur' =>  $entry->id_type_integrateur,
				        'libelle_type_integrateur' =>  $entry->libelle_type_integrateur,
				        'nbre_compte' => floor($entry->montant_param/2187.5),
				        'montant' => $entry->montant_param
                    );
			        $i++;
                    endforeach;
			} else {
			    $data[0] = array(
				    'id_type_candidat' => "",
			        'cmfh' =>  "",
				    'date_postulat' => "",
				    'nom_postulat' => "",
				    'mobile_postulat' => "",
				    'zone' => "",
				    'pays' => "",
				    'region' => "",
				    'prefecture' => "",
				    'canton' => "",
				    'id_postulat' => "",
				    'id_type_offreur_projet' => "",
				    'libelle_type_offreur_projet' => "",
				    'id_type_integrateur' => "",
				    'libelle_type_integrateur' => "",
				    'nbre_compte' => "",
				    'montant' =>  ""
                );
			}					
			
		}
		$this->view->error = Zend_Json::encode($data);
		
    }







        


        public  function listpostulantsAction()   {
		$this->_helper->layout->disableLayout();
                $request = $this->getRequest();
		if($request->isPost())   {
			$type_candidat = $request->getParam("id_type_candidat");
            $code_zone = $request->getParam("code_zone");
            $id_pays = $request->getParam("id_pays");
            $id_region = $request->getParam("id_region");
            $id_prefecture = $request->getParam("id_prefecture");
            $id_canton = $request->getParam("id_canton");
			$entries = array();
			$t_postulat = new Application_Model_DbTable_EuPostulat();
			if(!empty($type_candidat) && empty($code_zone) && empty($id_pays) && empty($id_region) && empty($id_prefecture) && empty($id_canton))  {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
				
				$entries = $t_postulat->fetchAll($select);
				
            }   elseif(!empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('c.id_canton = ?', trim($id_canton));
				
		        $entries = $t_postulat->fetchAll($select);
				
	        } elseif(!empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
				
		        $entries = $t_postulat->fetchAll($select);
						
	        }  elseif(!empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('r.id_region = ?', trim($id_region));
				
		        $entries = $t_postulat->fetchAll($select);
				
	        } else if (!empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('p.id_pays = ?', trim($id_pays));
				
		        $entries = $t_postulat->fetchAll($select);
				
	        } else if (!empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('z.code_zone = ?', trim($code_zone));
				
		        $entries = $t_postulat->fetchAll($select);
				
	        }  else if (empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('c.id_canton = ?', trim($id_canton));
		        $entries = $t_postulat->fetchAll($select);
				
	        } else if (empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
		        $entries = $t_postulat->fetchAll($select);
				
	        } else if (empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        $select->where('r.id_region = ?', trim($id_region));
		        $entries = $t_postulat->fetchAll($select);
		
	        } else if (empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('p.id_pays = ?', trim($id_pays));
		        $entries = $t_postulat->fetchAll($select);
				
	        } else if (empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('z.code_zone = ?', trim($code_zone));
		        $entries = $t_postulat->fetchAll($select);
			
	        }
            else {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        $entries = $t_postulat->fetchAll($select);
	        }
			
			
			if(count($entries) > 0) {
		        $i = 0;
			    foreach($entries as $entry) :
			        $data[$i] = array(
					    'id_type_candidat' => "",
				        'cmfh' =>  $entry->libelle_type_candidat,
				        'date_postulat' => datejourfr($entry->date_postulat),
				        'nom_postulat' => $entry->raison_postulat." ".$entry->nom_postulat." ".$entry->prenom_postulat,
			            'mobile_postulat' => $entry->mobile_postulat,
			            'zone' => $entry->nom_zone,
				        'pays' => $entry->libelle_pays,
			            'region' => $entry->nom_region,
				        'prefecture' => $entry->nom_prefecture,
				        'canton' => $entry->nom_canton,
				        'id_postulat' => "",
                                        'id_type_offreur_projet' => "",
				    'libelle_type_offreur_projet' => "",
				    'id_type_integrateur' => "",
				    'libelle_type_integrateur' => "",
				    'nbre_compte' => "",
				    'montant' =>  ""  
                    );
	            $i++;
                    endforeach;
			} else  {
			    $data[0] = array(
				   'id_type_candidat' => "",
			           'cmfh' =>  "",
				   'date_postulat' => "",
				   'nom_postulat' => "",
				   'mobile_postulat' => "",
				   'zone' => "",
				   'pays' => "",
				   'region' => "",
				   'prefecture' => "",
				   'canton' => "",
				   'id_postulat' => "",
                   'id_type_offreur_projet' => "",
				   'libelle_type_offreur_projet' => "",
				   'id_type_integrateur' => "",
				   'libelle_type_integrateur' => "",
				   'nbre_compte' => "",
				   'montant' =>  ""
                );
			}
			$this->view->error = Zend_Json::encode($data);
		}
		
	}

    public  function listcmfhAction()     {
	        $this->_helper->layout->disableLayout();
            $request = $this->getRequest();
	        if($request->isPost()) {
	            $type = $request->getParam("id_type_candidat");
                $code_zone = $request->getParam("code_zone");
                $id_pays = $request->getParam("id_pays");
                $id_region = $request->getParam("id_region");
                $id_prefecture = $request->getParam("id_prefecture");
                $id_canton = $request->getParam("id_canton");
			
	            $t_souscription = new Application_Model_DbTable_EuSouscription();
	            $select = $t_souscription->select();
	            $select->distinct();
                $select->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison','souscription_type_candidat','id_canton','souscription_mobile'));
                $select->where('publier = ?',3);
                $select->where('souscription_programme like ?','CMFH');			
	            $entries = $t_souscription->fetchAll($select);
				
			    //$data[] = array();
	            if(count($entries) > 0) {
		            $i = 0;
		            foreach($entries as $entry) :
					    $type_candidat = new Application_Model_EuTypeCandidat();
	                    $m_type_candidat = new Application_Model_EuTypeCandidatMapper();
						
						$canton = new Application_Model_EuCanton();
	                    $m_canton = new Application_Model_EuCantonMapper();
		
		                $prefecture = new Application_Model_EuPrefecture();
	                    $m_prefecture = new Application_Model_EuPrefectureMapper();
		
		                $region = new Application_Model_EuRegion();
	                    $m_region = new Application_Model_EuRegionMapper();
		
		                $pays = new Application_Model_EuPays();
	                    $m_pays = new Application_Model_EuPaysMapper();
		
		                $zone = new Application_Model_EuZone();
	                    $m_zone = new Application_Model_EuZoneMapper();
						
						$canton = new Application_Model_EuCanton();
	                    $m_canton = new Application_Model_EuCantonMapper();
		
		                $prefecture = new Application_Model_EuPrefecture();
	                    $m_prefecture = new Application_Model_EuPrefectureMapper();
		
		                $region = new Application_Model_EuRegion();
	                    $m_region = new Application_Model_EuRegionMapper();
		
		                $pays = new Application_Model_EuPays();
	                    $m_pays = new Application_Model_EuPaysMapper();
		
		                $zone = new Application_Model_EuZone();
	                    $m_zone = new Application_Model_EuZoneMapper();
						
						$nom = "";
		                $cellulaire = "";
		
		                $trouve = false;
		
		                $nom = $entry->souscription_raison." ".$entry->souscription_nom." ".$entry->souscription_prenom;
		                $cellulaire = $entry->souscription_mobile;
						
						if(!empty($type) && empty($code_zone) && empty($id_pays) && empty($id_region) && empty($id_prefecture) && empty($id_canton)) {
		                    if($entry->souscription_type_candidat == $type) {
			                    $trouve = true;
			                }
		                } elseif(!empty($type) && !empty($id_canton)) {
			                if($entry->souscription_type_candidat == $type  &&  $entry->id_canton == $id_canton) {
			                    $trouve = true;
			                }
		                } elseif(!empty($type) && !empty($id_prefecture)) {
			                if($entry->souscription_type_candidat == $type  &&  $prefecture->id_prefecture == $id_prefecture) {
			                    $trouve = true;
			                }
		                }  elseif(!empty($type) && !empty($id_region)) {
			                if($entry->souscription_type_candidat == $type  &&  $region->id_region == $id_region) {
			                    $trouve = true;
			                }
		                }  elseif(!empty($type) && !empty($id_pays))  {
			                if($entry->souscription_type_candidat == $type  &&  $pays->id_pays == $id_pays) {
			                    $trouve = true;
			                }	
		                } elseif(!empty($type) && !empty($code_zone))  {
			                if($entry->souscription_type_candidat == $type  &&  $zone->code_zone == $code_zone) {
			                    $trouve = true;
			                }
		                }   else if(empty($type) && !empty($id_canton))  {
                            if($entry->id_canton == $id_canton) {
			                    $trouve = true;
			                }
                        } else if (empty($type) && !empty($id_prefecture)) {
                            if($prefecture->id_prefecture == $id_prefecture) {
			                    $trouve = true;
			                }
                        } else if (empty($type) && !empty($id_region)) {
                            if($region->id_region == $id_region) {
			                    $trouve = true;
			                }	
                        } else if (empty($type) && !empty($id_pays)) {
                            if($pays->id_pays == $id_pays) {
			                    $trouve = true;
			                }
                        } else if (empty($type) && !empty($code_zone)) {
		                    if($zone->code_zone == $code_zone) {
			                    $trouve = true;
			                }
	                    } else {
			                $trouve = true;
		                }
						
					    if($trouve) {
		                    $data[$i] = array(
					            'id_type_candidat' => "",
				                'cmfh' =>  $type_candidat->libelle_type_candidat,
				                'date_postulat' => "",
				                'nom_postulat' => $nom,
			                    'mobile_postulat' => $cellulaire,
			                    'zone' => $zone->nom_zone,
				                'pays' => $pays->libelle_pays,
			                    'region' => $region->nom_region,
				                'prefecture' => $prefecture->nom_prefecture,
				                'canton' => $canton->nom_canton,
				                'id_postulat' => "", 
                                'id_type_offreur_projet' => "",
				                'libelle_type_offreur_projet' => "",
				                'id_type_integrateur' => "",
				                'libelle_type_integrateur' => "",
				                'nbre_compte' => "",
				                'montant' =>  "" 
                            );
						}
			            $i++;
                        endforeach;	
		        }  else  {
			        $data[0] = array(
				        'id_type_candidat' => "",
			            'cmfh' =>  "",
				        'date_postulat' => "",
				        'nom_postulat' => "",
				        'mobile_postulat' => "",
				        'zone' => "",
				        'pays' => "",
				        'region' => "",
				        'prefecture' => "",
				        'canton' => "",
				        'id_postulat' => "",
                        'id_type_offreur_projet' => "",
				        'libelle_type_offreur_projet' => "",
				        'id_type_integrateur' => "",
				        'libelle_type_integrateur' => "",
				        'nbre_compte' => "",
				        'montant' =>  ""
                    );
			}
			$this->view->data = $data;
	    }
    }

    
    
	public function souscrireintegrateurAction()    {
        $this->_helper->layout()->disableLayout();
        $request = $this->getRequest();
		
        if($request->isPost())  { 
            if($request->getParam("integrateur_type") != "" 
		        && $request->getParam("code_activite") != ""  
		        && $request->getParam("integrateur_montant") != "")  {
              
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();		  
                try {
                    $id_postulat    = $request->getParam("id_postulat");					
                    $postulat   = new Application_Model_EuPostulat();			
		            $m_postulat = new Application_Model_EuPostulatMapper();
		            $m_postulat->find($id_postulat,$postulat);

                    $m_integrateur = new Application_Model_EuTypeIntegrateurMapper();
					$integrateurs = $m_integrateur->fetchAll();					
					
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$date_id = Zend_Date::now();
			  
			        $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

					$param = $request->getParam("integrateur_type");
					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';
					$type_candidat = "";
					
					$integrateur_montant = $request->getParam("integrateur_montant");
					$integrateur_nombre  = $request->getParam("integrateur_nombre");
					$integrateur_type    = $request->getParam("integrateur_type");
					
					$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
					$montant_souscription = $integrateur_nombre * 2187.5;
					
					if($typeintegrateur->montant_param <  $integrateur_montant) {
				        $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription ne doit pas etre inferieur au montant predefini ..."));
					    return;
				    }
					
					$type_candidat = $postulat->id_type_candidat;
					
					if(substr($membre_integrateur,19,1) == 'P')  {					 
                        $findmembre = $m_map->find($membre_integrateur,$membre);   
                        if($findmembre == false) {
					      $db->rollback();
					      $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ..."));
					      return;
				        }
                    } else {
				        $findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
				        if($findmembre == false) {
					       $db->rollback();
					       $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ..."));
					       return;    
				        }
			        }
					
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
					    $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre Code BAn est  incorrect ..."));
				        return;
					}
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
						$bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) && ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) && ($cumulbon < $montant_souscription)) {
						    $db->rollback();
					        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ..."));
					        return;
						}
						
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du CMFH doit être celui du bon neutre ..."));
					        return;
						}
						
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					$i = 0;
					$reste = $integrateur_montant;
					$nbre_lignesdetbon = count($lignesdetbon);
                    while($reste > 0 && $i < $nbre_lignesdetbon) {
                        $lignedetbon = $lignesdetbon[$i];
                        $id = $lignedetbon->getBon_neutre_detail_id();
						$finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							 $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
						     if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								 $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                 $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                 $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
								 foreach($appro_detail as $appro) {
								   $bnad = new Application_Model_EuBonNeutreApproDetail();
                                   $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                   if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                     $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                     $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                     $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                     $bnad_M->update($bnad);
                                   } else {
                                     $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                     $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                     $bnad_M->update($bnad);
                                     break;
                                   }	 
                                  }
								  
							  }
							  //Mise à jour  des lignes d'enrégistrement
							  $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                  ->setBon_neutre_detail_montant_solde(0);
                              $bon_neutre_detailM->update($lignedetbon);
								 
                            } else {
							  if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                  $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                  $appro_montant_solde = $reste;
                                  foreach($appro_detail as $appro) {
                                     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                     $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                     $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                     if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                       $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                       $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                       $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                       $bnad_M->update($bnad);
                                     } else {
                                       $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                       $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                       $bnad_M->update($bnad);
                                       break;
                                     }
                                  }								   
                               }
							   
                               //Mise à jour  des lignes d'enrégistrement
							   $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						       $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                               $bon_neutre_detailM->update($lignedetbon);
						       $reste = 0;
                            }							   
                            $i++;
                        }
						
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						$bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						$bon_neutre2M->update($bon_neutre2);

						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
							
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
						
						$m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();
						$finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                       $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}

						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }

						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Login déjà existant ..."));
						   return;
	                    } else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL) {
						   $db->rollback();
						   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Mot de passe incorret ..."));
					       return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);

						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso(1);
						
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                        $souscription->setSouscription_banque(NULL);

						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($type_candidat);

                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);

						
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $souscription->setSouscription_ville($membre->ville_membre);
                            $souscription->setSouscription_quartier($membre->quartier_membre);
						} else {
                            $souscription->setSouscription_ville($membremoral->ville_membre);
                            $souscription->setSouscription_quartier($membremoral->quartier_membre);
                        }						

                        $souscription->setSouscription_email($postulat->email_postulat);
                        if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }

			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }

						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($postulat->id_canton);
                        $souscription->setId_postulat($postulat->id_postulat);
                        $souscription_mapper->save($souscription);
						
						
						
						// //// Mise à jour postulat //////////////////////////////////////////
						$postulat->setTraiter(1);
						$postulat->setCode_membre($request->getParam("integrateur_membre"));
						$m_postulat->update($postulat);
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(2);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

						///////////////////////////////////////////// validation technopole //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(3);
						$souscriptionM->update($souscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						$nombre_compte = $request->getParam("integrateur_nombre");
						
						    include("Transfert.php");
		                    if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                        $chemin = "integrateurs";
		                        $file = $_FILES['integrateur_diplome']['name'];
		                        $file1='integrateur_diplome';
		                        $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                    } else { $integrateur_diplome = ""; }

						    if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                        $chemin = "integrateurs";
		                        $file = $_FILES['integrateur_document']['name'];
		                        $file1='integrateur_document';
		                        $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                    } else {$integrateur_document = "";}

						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $a  = new Application_Model_EuIntegrateur();
                            $ma = new Application_Model_EuIntegrateurMapper();

                            $compteur = $ma->findConuter() + 1;
						    $a->setIntegrateur_id($compteur);
                            $a->setIntegrateur_type($request->getParam("integrateur_type"));
                            $a->setIntegrateur_souscription($compteur_souscription);

                            if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                            }

                            if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                }
                                if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                }
								$a->setIntegrateur_education($request->getParam("integrateur_education"));
                                $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                $a->setIntegrateur_document($integrateur_document);
                                $a->setIntegrateur_diplome($integrateur_diplome);
                            }

                            $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                            $a->setIntegrateur_membreasso(0);
                            $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			                $a->setPublier(1);
                            $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                            $a->setIntegrateurCanton($request->getParam("id_canton"));
                            $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						    $a->setCode_membre($request->getParam("integrateur_membre"));
                            $ma->save($a);
							
							
							$integrateur  = new Application_Model_EuIntegrateur();
                            $integrateurM = new Application_Model_EuIntegrateurMapper();
                            $integrateurM->find($compteur,$integrateur);
							
							$id_integrateur = $integrateur->integrateur_id;
						    $complement   = new Application_Model_EuComplementQuittance();
                            $m_complement = new Application_Model_EuComplementQuittanceMapper();

						    $cpte = $m_complement->findConuter() + 1;
						    $complement->setId_complement_quittance($cpte);
						    $complement->setIntegrateur_id($id_integrateur);
						    $complement->setSouscription_id($compteur_souscription);
						    $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						    $m_complement->save($complement);
							
							$code_agence = '';
							
							$date_id = Zend_Date::now();
                            $association = new Application_Model_EuAssociation();
                            $association_mapper = new Application_Model_EuAssociationMapper();

						    $login = "";
						    $password = "";

							if($finddepot == NULL) {
							    $compteur_association = $association_mapper->findConuter() + 1;
                                $association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
								if(substr($membre_integrateur,19,1) == 'P')  {
                                    $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								} else {
                                    $association->setAssociation_nom($souscription->souscription_raison);
                                }

                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);
							    
								$date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();

							    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								    $liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                    $login = "";
                                    while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)];
                                    }
								    $password = $login.$login;
								} else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
								}
								
								$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								if(substr($membre_integrateur,19,1) == 'P')  {
                                    $membreasso->setMembreasso_nom($souscription->souscription_nom);
									$membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								} else {
                                    $membreasso->setMembreasso_nom($souscription->souscription_raison);
									$membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                }

                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                $membreasso_mapper->save($membreasso);
								
							}
							
							// Transfert
						    $eusouscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();

						    $date = new Zend_Date();
		                    $compte_map = new Application_Model_EuCompteMapper();
                            $compte      = new Application_Model_EuCompte();
			                $sms_money   = new Application_Model_EuSmsmoney();
                            $money_map   = new Application_Model_EuSmsmoneyMapper();

			                $det_sms   = new Application_Model_EuDetailSmsmoney();
			                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                $det_vtesms  = new Application_Model_EuDetailVentesms();

						    // insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();

						    $membretierscode = new Application_Model_EuMembretierscode();
                            $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

						    $fcaps = Util_Utils::getParametre('CAPS','valeur');

						    $membre_pbf = '0000000000000000001M';
	                        $code_compte_pbf = "NN-TR-".$membre_pbf;
			                $ret = $compte_map->find($code_compte_pbf,$compte);

						    $souscriptionM->find($compteur_souscription,$eusouscription);
							
							$mobile = $eusouscription->souscription_mobile;
						    $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
						    $nbre_compte = $eusouscription->souscription_nombre;
							$montant = $nbre_compte * $fcaps;
							
							
							$countdvente = $m_dvente->findConuter() + 1;
				            $dvente->setId_depot($countdvente)
					               ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				            $dvente->setCode_membre($_POST['integrateur_membre']);
			                $dvente->setCode_produit('CAPS');
				            $dvente->setMont_depot($montant);
				            $dvente->setMont_vendu(0);
				            $dvente->setSolde_depot($montant);
				            $dvente->setId_utilisateur(null);
				            $dvente->setType_depot('AvecListe');
				            $dvente->setSouscription_id($compteur_souscription);
				            $m_dvente->save($dvente);


						    for($i = 0; $i < $nbre_compte; $i++) {
							    $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
							    $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
							    $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                $membretierscode->setMembretierscode_membretiers(0);
                                $membretierscode->setMembretierscode_code($membretierscode_code);
                                $membretierscode->setMembretierscode_souscription($compteur_souscription);
                                $membretierscode->setPublier(0);
                                $membretierscode->setCode_membre(NULL);
							    $membretierscode->setAllocation_cmfh_id(NULL);
                                $membretierscode_mapper->save($membretierscode);
						    }
							
							// script de creation de TE de prestation
						    $eucompte = new Application_Model_EuCompte();
							$m_compte = new Application_Model_EuCompteMapper();
									
                            $te   = new Application_Model_EuTegc();
							$m_te = new Application_Model_EuTegcMapper();
							
							$prk = new Application_Model_EuPrk();
                            $m_prk = new Application_Model_EuPrkMapper();
							
							$code_te = "";
							$nom_tegc = "";
									
						    $code_membre = $_POST['integrateur_membre'];
							if(substr($code_membre,19,1)=='P') {
							    $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
							} else {
							    $nom_tegc = $membremoral->raison_sociale;
							}
							
							$num_compte = 'NB-TPAGCP-'.$code_membre;
				            $res = $m_compte->find($num_compte,$eucompte);
							
							if(!$res) {
							    $eucompte->setCode_cat('TPAGCP')
                                         ->setCode_compte($num_compte)
										 ->setCode_type_compte('NB')
                                         ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte('TPAGCP')
                                         ->setSolde(0);
												 
								if(substr($code_membre,19,1)=='P') {		 
                                    $eucompte->setCode_membre($code_membre)
                                             ->setCode_membre_morale(NULL);
								} else  {
                                    $eucompte->setCode_membre(NULL)
                                             ->setCode_membre_morale($code_membre);
                                }										         
                                $m_compte->save($eucompte);
										
								$code_te = $te_mapper->getLastTegcByMembre($code_membre);
								if ($code_te == NULL) {
			                        $code_te = 'TEGCP'.$code_membre. '00001';         
			                    } else {
			                        $num_ordre = substr($code_te, -5);
                                    $num_ordre++;
                                    $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                    }
										
								$te->setCode_tegc($code_te);
			                    $te->setId_filiere(NULL);
			                    $te->setMdv(12);
			                    $te->setTranche_payement($tranche);
			                    $te->setCode_membre($code_membre);
			                    $te->setMontant(0);
			                    $te->setMontant_utilise(0);
			                    $te->setSolde_tegc(0);
			                    $te->setId_utilisateur(NULL);
			                    $te->setNom_tegc($nom_tegc);
			                    $te->setNom_produit("Prestation");
			                    $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					            $te->setType_tegc("PRESTATAIRE");
								$te->setRecurrent_illimite(0);
								$te->setRecurrent_limite(0);
							    $te->setNonrecurrent(1);
								$te->setPeriode1(0);
							    $te->setPeriode2(0);
								$te->setPeriode3(0);
								$te->setFormel(0);
								$te->setRegime_tva(0);
								$te->setSpecial(0);
								$te->setOrdinaire(1);
								$te->setSubvention(0);
										
								$te->setCode_zone($postulat->code_zone);
				                $te->setId_pays($postulat->id_pays);
				                $te->setId_region($postulat->id_region);
				                $te->setId_prefecture($postulat->id_prefecture);
				                $te->setId_canton($postulat->id_canton);

                                $m_te->save($te);
                                
								$id_prk = $m_prk->findConuter() + 1;
					            $prk->setId_prk($id_prk);
					            $prk->setCode_tegc($code_te);
					            $prk->setValeur(null);
					            $m_prk->save($prk);

						    }
							
							$num_comptets = 'NB-TSGCP-'.$code_membre;
				            $rests = $m_compte->find($num_comptets,$eucompte);
									
							if(!$rests) {
							    $eucompte->setCode_cat('TSGCP')
                                         ->setCode_compte($num_comptets)
									     ->setCode_type_compte('NB')
                                         ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte('TSGCP')
                                         ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                $m_compte->save($eucompte);		
                            }
						    //fin script de creation TE
							
							$db->commit();
						    if($finddepot == NULL) {
								$this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password));
							} else  {
								$this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee"));
						    }
						
					    } else {
						    $db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 10 ..."));
						    return;
						}
					
					
		
		        } catch (Exception $exc) {
				    $db->rollback();
                    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système". $exc)); 
                    return;					
			    }
			}   else {
				$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));	
			}
		
		}
		
	}


        
    public function souscrireoffreurAction()    {
		$this->_helper->layout()->disableLayout();           
        $request = $this->getRequest();
        if($request->isPost())  {
			if($request->getParam("offreur_projet_type") != "" 
		    && $request->getParam("offreur_projet_membre") != ""  
		    && $request->getParam("offreur_projet_produit") != ""
			&& $request->getParam("offreur_projet_nom_entrepot") != ""  
		    && $request->getParam("offreur_projet_adresse_entrepot") != ""
			&& $request->getParam("offreur_projet_attestation") != "")  {
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
			    try {
                	$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$id_postulat = $request->getParam("id_postulat");					
                    $postulat   = new Application_Model_EuPostulat();			
		            $m_postulat = new Application_Model_EuPostulatMapper();
		            $m_postulat->find($id_postulat,$postulat);

					$membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));

				    $date_id = Zend_Date::now();

					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();			

                	$findmembre = $m_mapmorale->find($request->getParam("offreur_projet_membre"),$membremorale);
                    if($findmembre == false) {					
		              $db->rollback();
                      $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...")); 
                      return;
		            }
					
					$offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';

					$souscription_nombre  = $request->getParam("souscription_nombre");
					$montant_souscription = $souscription_nombre * 2187.5;

                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					    $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre Code BAn  incorrect ...")); 
                        return;
					}
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						$offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;

					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) && ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) && ($cumulbon < $montant_souscription)) {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ...")); 
                            return;
					    }
						
						if(($offreur_code_membre != NULL)  && ($offreur_membre != $offreur_code_membre)) {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du CMFH  doit être celui du bon neutre ...")); 
                            return;	
						}
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$i = 0;
					    $reste = $montant_souscription;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($lignedetbon->getBon_neutre_appro_id() > 0) {
									$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id, $bnad);
                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                       }
                                    }
								}
								//Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);

                            } else  {
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
									$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
									foreach($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);
                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
									}
								}

                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);
						            $reste = 0;
                            }
                            $i++;
                        }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
						$bon_neutre2M->update($bon_neutre2);

						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($offreur_membre,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
						
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			               $souscription_ok = 1;
			               $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }

                        $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Login déjà existant ...")); 
                            return;
						} else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL) {
					        $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Mot de passe incorret ...")); 
                            return;
					    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                        $compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);

						$souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
						$souscription->setSouscription_mobile($membremorale->portable_membre);

						$souscription->setSouscription_membreasso(1);

						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                        $souscription->setSouscription_banque(null);

						$souscription->setSouscription_montant($montant_souscription);
                        $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($postulat->id_type_candidat);

						$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);

						$souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
						 
                        $souscription->setSouscription_ville($membremorale->ville_membre);

						$souscription->setSouscription_quartier($membremorale->quartier_membre);

					    if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }

						if($souscription_ok == 1) {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }

				        $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($postulat->id_canton);
                        $souscription->setId_postulat($postulat->id_postulat);
                        $souscription_mapper->save($souscription);
						
						
						//Mise à jour postulat
						$id_canton = $postulat->id_canton;
						$postulat->setTraiter(1);
						$m_postulat->update($postulat);
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
				        $souscription = new Application_Model_EuSouscription();
				        $souscriptionM = new Application_Model_EuSouscriptionMapper();
				        $souscriptionM->find($compteur_souscription, $souscription);

					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(2);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

						///////////////////////////////////////////// validation technopole //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
					    $nombre_compte = $request->getParam("souscription_nombre");
						if($nombre_compte >= 100) {
							$date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $a = new Application_Model_EuOffreurProjet();
                            $ma = new Application_Model_EuOffreurProjetMapper();

					        $compteur = $ma->findConuter() + 1;
					        $id_souscription = $compteur_souscription;
							
							$a->setOffreur_projet_id($compteur);
                            $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                            $a->setOffreur_projet_souscription($id_souscription);
                            $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					        $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                            $a->setOffreur_projet_adresse($request->getParam("offreur_projet_adresse"));
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
                            $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
					        if($request->getParam("offreur_projet_type") >= 4) {
	                            $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                            }

					        $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                            $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                            $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                            $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                            $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                            $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                            $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                            $a->setOffreur_projet_membreasso(0);
                            $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                            $a->setOffreurProjetCanton($id_canton);
                            $a->setOffreurProjetVille(null);
			                $a->setPublier(0);
                            $ma->save($a);
							  
							$id_offreur_projet = $offreur_projet->offreur_projet_id;
					        $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                            $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();

					        $cpte = $m_detailoffreur->findConuter() + 1;
					        $detailoffreur->setId_detail_offreur_projet($cpte);
					        $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					        $detailoffreur->setSouscription_id($id_souscription);
					        $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					        $m_detailoffreur->save($detailoffreur);
							
							/////////////////////////////////////////////////////////////////////////////////////////
					        $code_agence = "";
							  
							// Création du compte utilisateur intégrateur
                            $souscription = new Application_Model_EuSouscription();
                            $m_souscription = new Application_Model_EuSouscriptionMapper();
		                    $m_souscription->find($id_souscription,$souscription);

					        $date_id = Zend_Date::now();
                            $association = new Application_Model_EuAssociation();
                            $association_mapper = new Application_Model_EuAssociationMapper();

                            $login = "";
						    $password = "";
							  
							if($finddepot == NULL) {
                                $compteur_association = $association_mapper->findConuter() + 1;
                                $association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_raison);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);

							    $date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();

								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							        $liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                    $login = "";
                                    while(strlen($login) != 8) {
                                        $login .= $liste[rand(0,61)];
                                    }
								    $password = $login.$login;
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }

								$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id(null);
                                $membreasso_mapper->save($membreasso);
                            }
							
							$eusouscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();

							$date = new Zend_Date();
		                    $compte_map  = new Application_Model_EuCompteMapper();
                            $compte      = new Application_Model_EuCompte();
			                $sms_money   = new Application_Model_EuSmsmoney();
                            $money_map   = new Application_Model_EuSmsmoneyMapper();

			                $det_sms   = new Application_Model_EuDetailSmsmoney();
			                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                $det_vtesms  = new Application_Model_EuDetailVentesms();

							// insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();

							$membretierscode = new Application_Model_EuMembretierscode();
                            $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

							$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                    //$membre_pbf = '0000000000000000001M';
	                        //$code_compte_pbf = "NN-TR-".$membre_pbf;
			                //$ret = $compte_map->find($code_compte_pbf,$compte);

							$souscriptionM->find($id_souscription,$eusouscription);
						    $mobile = $eusouscription->souscription_mobile;
							$codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
							$nbre_compte = $eusouscription->souscription_nombre;
							$montant = $nbre_compte * $fcaps;
									   
							$countdvente = $m_dvente->findConuter() + 1;
				            $dvente->setId_depot($countdvente)
					               ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				            $dvente->setCode_membre($request->getParam("offreur_projet_membre"));
			                $dvente->setCode_produit('CAPS');
				            $dvente->setMont_depot($montant);
				            $dvente->setMont_vendu(0);
				            $dvente->setSolde_depot($montant);
				            $dvente->setId_utilisateur(null);
				            $dvente->setType_depot('AvecListe');
				            $dvente->setSouscription_id($id_souscription);
				            $m_dvente->save($dvente);
							
							for($i = 0; $i < $nbre_compte; $i++) {
								$membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
								$compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
							    $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                $membretierscode->setMembretierscode_membretiers(0);
                                $membretierscode->setMembretierscode_code($membretierscode_code);
                                $membretierscode->setMembretierscode_souscription($id_souscription);
                                $membretierscode->setPublier(0);
                                $membretierscode->setCode_membre(NULL);
								$membretierscode->setAllocation_cmfh_id(NULL);
                                $membretierscode_mapper->save($membretierscode);
							}
							
							//script de creation de TE des vendeurs ou offreurs de projet
					        $prk = new Application_Model_EuPrk();
                            $m_prk = new Application_Model_EuPrkMapper();
							   	   
                            $te = new Application_Model_EuTegc();
					        $m_te = new Application_Model_EuTegcMapper();
					        $code_te = "";
							   
					        $nom_tegc = $membremorale->raison_sociale;
							$id_filiere = $request->getParam("offreur_projet_filiere");
						    $code = $request->getParam("offreur_projet_membre");	   
						    $eutegc = new Application_Model_DbTable_EuTegc();
                            $select = $eutegc->select();
					        $select->where("code_membre like ? ", $code);
                            $rowseutegc = $eutegc->fetchAll($select);
							
							if(count($rowseutegc) <= 0)  {
							    $code_te = $m_te->getLastTegcByMembre($code);
						        if($code_te == NULL) {
			                        $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                    } else {
			                            $num_ordre = substr($code_te, -5);
                                        $num_ordre++;
                                        $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                    }
								  
						        $te->setCode_tegc($code_te);
			                    $te->setId_filiere($id_filiere);
			                    $te->setMdv(12);
			                    $te->setTranche_payement(1);
			                    $te->setCode_membre($code);
                                $te->setCode_membre_physique(null);								  
			                    $te->setMontant(0);
			                    $te->setMontant_utilise(0);
			                    $te->setSolde_tegc(0);
			                    $te->setId_utilisateur(NULL);
			                    $te->setNom_tegc($nom_tegc);
			                    $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                    $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					            $te->setType_tegc("DISTRIBUTEUR");
						        $te->setRecurrent_illimite(0);
						        $te->setRecurrent_limite(0);
						        $te->setNonrecurrent(1);
						        $te->setPeriode1(0);
						        $te->setPeriode2(0);
							    $te->setPeriode3(0);
							    $te->setFormel(0);
						        $te->setRegime_tva(0);
						        $te->setSpecial(0);
						        $te->setOrdinaire(0);
							    $te->setSubvention(0);
										
							    $te->setCode_zone($code_zone);
				                $te->setId_pays($id_pays);
				                $te->setId_region($id_region);
				                $te->setId_prefecture($id_prefecture);
				                $te->setId_canton($id_canton);

                                $m_te->save($te);

                                $id_prk = $m_prk->findConuter() + 1;
					            $prk->setId_prk($id_prk);
					            $prk->setCode_tegc($code_te);
					            $prk->setValeur(null);
					            $m_prk->save($prk);
								   
					        }
							
							$code_compte = 'NB-TPAGCP-'.$code;
				            $res = $compte_map->find($code_compte,$compte);
				
				            if(!$res) {
                                $compte->setCode_cat('TPAGCP')
                                   ->setCode_compte($code_compte)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TPAGCP')
                                   ->setSolde(0);
                                $compte_map->save($compte); 
                            }
				
				            $code_comptets = 'NB-TSGCP-'.$code;
				            $rests = $map_compte->find($code_comptets,$compte);
				
				            if(!$rests) {
                                $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                                $compte_map->save($compte); 
                            }   
					        // Fin script de creation des TE vendeurs ou offreurs de projet
						
						
						} else {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...")); 
                            return;
						}
						
						if($finddepot == NULL) {
						    $db->commit();
						    $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password));
						} else {
							$db->commit();
							$this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee"));	
						}
						
					}
					
		        } catch(Exception $exc) {
				    $db->rollback();
                    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                    return;					
			    }
			
			}  else {
				$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));	
			}
		
		
		}
		
	
	
	
	}



       
	public  function  inscriptioncapsAction()  {
		$this->_helper->layout()->disableLayout();
		$request = $this->getRequest();
	    if($request->isPost()) {
		    if($request->getParam("nom_membre") != "" 
		        && $request->getParam("sexe_membre") != ""
                && $request->getParam("nationalite_membre") != ""
                && $request->getParam("sitfam_membre") != ""
                && $request->getParam("prenom_membre") != ""
                && $request->getParam("date_nais_membre") != ""
                && $request->getParam("lieu_nais_membre") != ""
                && $request->getParam("nbr_enf_membre") != ""
                && $request->getParam("quartier_membre") != ""
                && $request->getParam("ville_membre") != ""
                && $request->getParam("profession_membre") != ""
                && $request->getParam("religion_membre") != ""
                && $request->getParam("id_pays") != ""				
		        && $request->getParam("code_agence") != "")  {
					
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {
                    $membre  = new Application_Model_EuMembre();
	                $m_map   = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$mstiersliste = new Application_Model_EuMstiersListecm();
		            $m_mstiersliste = new Application_Model_EuMstiersListecmMapper();
					$mstiers   = new Application_Model_EuMstiers();
		            $m_mstiers = new Application_Model_EuMstiersMapper();

                    $code_agence = $request->getParam("code_agence");
				    $code_zone = $request->getParam("code_zone");
					$date_nais = new Zend_Date($request->getParam("date_nais_membre"));
					
					$date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;

                    $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                    $codesecret = "";
                    while(strlen($codesecret) != 8) {
                       $codesecret .= $liste[rand(0,strlen($liste)-1)]; 
                    }
					
					///////////////// controle nom prenom dans mstiers_listecm ////////////////////////////
					$prenom_membre = $request->getParam("prenom_membre");
					//$pos1 = stripos($prenom_membre, "'");
					$prenom_membre = str_replace("'", " ", $prenom_membre);
					$tabprenom = explode(" ",$prenom_membre);
					
					$nom_membre = $request->getParam("nom_membre");
					//$pos2 = stripos($nom_membre, "'");
					$nom_membre = str_replace("'", " ", $nom_membre);
					
					$euliste = new Application_Model_DbTable_EuMstiersListecm();
					$selection = $euliste->select();
					$selection->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));
					
                    foreach($tabprenom as $value) {
	                  $selection->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				    }
					
					$selection->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                $selection->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                $selection->limit(1);
	                $rowseuliste = $euliste->fetchRow($selection);
					
					if(count($rowseuliste) > 0) {
					    $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Vous êtes déjà inscrit !!!")); 
                        return;
					}
					
					///////////////// controle nom prenom dans membre ////////////////////////////////////
					$eupreinscription = new Application_Model_DbTable_EuMembre();
					$select = $eupreinscription->select();
					$select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

				    foreach($tabprenom as $value) {
	                  $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				    }

	                $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                $select->limit(1);
	                $rowseupreinscription = $eupreinscription->fetchRow($select);
					
					if(count($rowseupreinscription) > 0) {
					    $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Vous êtes déjà membre !!!")); 
                        return;
                    }
					
					//insertion dans la table eu_mstiers_listecm
                    $mstierslistecm_mapper = new Application_Model_EuMstiersListecmMapper();
                    $compteur_mstiers = $mstierslistecm_mapper->findConuter() + 1;
					
					$mstiersliste->setId_mstiers_listecm($compteur_mstiers)
					             ->setCode_membre_apporteur(null)
								 ->setCode_membre_beneficiaire(NULL)
								 ->setNom_membre($nom_membre)
								 ->setPrenom_membre($prenom_membre)
								 ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
								 ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
								 ->setPere_membre($request->getParam("pere_membre"))
                                 ->setMere_membre($request->getParam("mere_membre"))
								 ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
								 //->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
								 ->setPortable_membre(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"))
								 ->setBp_membre($request->getParam("bp_membre"))
								 ->setCodesecret($codesecret)
								 ->setEmail_membre($request->getParam("email_membre"))
								 ->setFormation($request->getParam("formation"))
								 ->setQuartier_membre($request->getParam("quartier_membre"))
								 ->setSexe_membre($request->getParam("sexe_membre"))
								 ->setSitfam_membre($request->getParam("sitfam_membre"))
								 ->setVille_membre($request->getParam("ville_membre"))
								 ->setCode_zone($request->getParam("code_zone"))
								 ->setId_pays($request->getParam("nationalite_membre"))
								 ->setId_canton($request->getParam("id_canton"))
								 ->setId_religion_membre($request->getParam("religion_membre"))
								 ->setCode_agence($code_agence)
								 ->setDate_listecm($date_id->toString('yyyy-MM-dd HH:mm:ss'))
								 ->setCode_caps(null)
								 ->setUtilisateur(null)
								 ->setStatut(0)
								 ->setType_liste("SansListe");
					$m_mstiersliste->save($mstiersliste);
					
					
					//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
						
					$compagnie = telephonecompagnie($request->getParam("code_telephonique"),$request->getParam("numero_telephone"));
                    $numero_telephone = intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone");
					
					if($compagnie == 1)  {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!"));
                        return; 
                    } else {
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
				        $telephone = new Application_Model_EuTelephone();
				        $m_telephone = new Application_Model_EuTelephoneMapper();
							 
					    $compteur = $m_telephone->findConuter() + 1;
					    $telephone->setId_telephone($compteur);
					    $telephone->setNumero_telephone($numero_telephone);
					    $telephone->setCompagnie_telephone($compagnie);
					    $telephone->setCode_membre(null);
					    $telephone->setId_mstiers_listecm($compteur_mstiers);
					    $m_telephone->save($telephone); 
				    }
					//}
					
					$db->commit();
					$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Operation d'enrolement reussie pour ce membre"));										

                } catch (Exception $exc) {				
		            $db->rollback();
                    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                    return;
			    }
			
		    } else {
				$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));	
			}
		
	
	    }
	
	}


        
	public  function addacteurAction()  {
		$this->_helper->layout->disableLayout();
		$request = $this->getRequest();
		if($request->isPost()) {
		    if($request->getParam("offreur_projet_type") !="" 
			&& $request->getParam("offreur_projet_membre") !=""
			&& $request->getParam("offreur_projet_attestation") == 1)   {
				
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {	
					$param = (int) $this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
					
					$offreur_type = $request->getParam("offreur_projet_type");
					$typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($offreur_type,$typeoffreur);
					
					$m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));
					
					$date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
					
					$souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						  $mont_msbcm = $mont_bc * $bnpmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						  $mont_msbcm = $mont_bc * $bnpnmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						}   						
					}
					
					$findmembre = $m_mapmorale->find($request->getParam("offreur_projet_membre"),$membremorale);
				    if($findmembre == false)  {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numero du membre offreur de projet ou de Biens,Produits et Service est introuvable ...")); 
					    return;
				    }
					
					$findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
				    if($findmembre == false) {
						$db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro du membre souscripteur est introuvable ...")); 
					    return;
				    }
					
					if($membremorale->desactiver == 1) {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' =>"Ce souscripteur dont le code membre que voici  ".$request->getParam("offreur_projet_membre")."  n'est pas autorisé à effectuer cette opération ..."));
					    return;
					}
					
					if($typeoffreur->montant_param > $souscription_montant) {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription ne doit pas etre inferieur au montant predefini ...")); 
					    return;     
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
				       $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm));
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps)); 
					   return;
				    }
				   
				    $offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre Code BAn est incorrect ..."));
					    return;     
				    }
					
					if(($bon_neutre->bon_neutre_montant_solde < $souscription_montant)) {
					    $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ...")); 
                        return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
					        $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ...")); 
                            return;
					    }
						
						if((trim($offreur_membre) != trim($offreur_code_membre))) {
						    $db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du souscripteur doit être celui du bon neutre ...")); 
                            return;   
					    }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
						while($reste > 0 && $i < $nbre_lignesdetbon) {
						    $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
					            $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                    foreach($appro_detail as $appro) {
							            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
										 
                                    }
									   
							    }
						  
						        //Mise à jour  des lignes d'enrégistrement
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
					
					        }  else {
						        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
						    }
					        $i++;
					    }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					    $bon_neutre2M->update($bon_neutre2);
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);

                        $eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Login déjà existant ..."));
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Mot de passe incorret ..."));
						    return;
	                    }
						
						$date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						$souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $membreasso_id = $request->getParam("membreasso_id");
						if($membreasso_id != 1) {
						    $souscription->setSouscription_membreasso($membreasso_id);
					    } else {
							$souscription->setSouscription_membreasso(1);
						}
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat(6);
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
					    $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
						
					    $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
						// --- Faire la demande de configuration ----///////
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					    if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
						
						
						//--- Début de l'opération de mise sur chaine ---
						$code = $request->getParam("offreur_projet_membre");
					    $code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						
						if($request->getParam("offreur_projet_filiere") != "") {
					        $id_filiere = $_POST['offreur_projet_filiere'];
						}
						
						$code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
						
						if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
						    if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						      $id_type_acteur = 1;
						    }
							
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						      $id_type_acteur = 3;
						    }
							
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
							
							
							// Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
							
							if($param == 2) {
                                $c_acteur->setType_acteur("PBF");
							} else {
								$c_acteur->setType_acteur(NULL);
							}
                    
                            $c_acteur->setCode_gac_chaine(NULL);
                            $t_acteur->insert($c_acteur->toArray());
							
							// Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
							
							if(($trouveuser) &&  ($param == 1)) {
							    if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                } 
                                elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                } 
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                }
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							if(($trouveuser) &&  ($param == 2)) {
							    if($id_type_acteur == 3) {
                                    $userin->setCode_groupe('pbf_detaillant');
                                    $userin->setCode_gac_filiere('pbf_detaillant');
                                    $userin->setCode_groupe_create('pbf_detaillant');
                                } 
                                 elseif($id_type_acteur == 2 ) {
                                    $userin->setCode_groupe('pbf_semi_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_semi_grossiste');
                                }  
                                elseif($id_type_acteur == 1 ) {
                                    $userin->setCode_groupe('pbf_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							
							// Mise à jour de la table eu_membre_morale
				            $membremorale->setId_filiere($id_filiere);
				            $m_mapmorale->update($membremorale);
							
							
							// Mise à jour de la table eu_contrat
				            $findcontrat = $map_contrat->findByMembre($code);
				            $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				            $contrat->setId_type_creneau($id_type_creneau);
				            $contrat->setId_type_acteur($id_type_acteur);
				            $map_contrat->update($contrat);
					
					    }
						
						//--- Fin de l'opération de mise sur chaine ---
						
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
						
						$a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                        $a->setOffreur_projet_adresse($membremorale->quartier_membre);
						if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
                        $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
						
					    if($offreur_type >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
						if(isset($_POST['offreur_projet_nom_entrepot'])) {
                          $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                          $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
						} else {
						  $a->setOffreur_projet_nom_entrepot(null);
                          $a->setOffreur_projet_adresse_entrepot(null);
						}
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso(0);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($request->getParam("id_canton"));
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    $a->setOffreurProjetFournisseur(null);
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
						
						
						/////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
						
						//Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";

                        if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }
						
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						//$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						$mstiers->setType_souscription($type_souscription);
						
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("USER");
                        $m_mstiers->save($mstiers);
						$id_mstiers = $db->lastInsertId();
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;
                        $m_te = new Application_Model_EuTegcMapper();
                        $te = new Application_Model_EuTegc();						
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc  = $request->getParam("code_te");   
						} else {
						    $code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
						    $code_tegc = $code_te;
						}
						
						$code_banque = "";
						$referencepaie = "";
						$montant = 0;
						
						
						if($type_souscription != "BPS") {
						    $code_banque = $request->getParam("code_banque");
						    $referencepaie   = $request->getParam("num_compte");
						    $montant = $souscription_montant;
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
								$db->commit();
						        $this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' =>  $response->message));
								return;
						    } else {
							    $db->rollback();
							    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' =>  $response->message));
								return;
						    }
						}  else  {
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($souscription_montant);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password));
						    } else {
							    $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee"));
							}
							return;
						}
						
					}
				
				} catch(Exception $exc) {
			        $db->rollback();
			        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                    return;
		        }
		    }
		}
	}
        
	
	
	public  function  addintegrationAction()   {
		$this->_helper->layout()->disableLayout();
	    $m_souscription = new Application_Model_EuSouscriptionMapper();           
        $request = $this->getRequest();
		if($request->isPost())  {
			if($request->getParam("integrateur_type") != "" 
		    && $request->getParam("code_activite") != ""  
		    && $request->getParam("integrateur_montant") != "" && $request->getParam("integrateur_montant") > 0
			&& $request->getParam('integrateur_attestation') != "" && $request->getParam('integrateur_attestation') == 1)  {
		
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();		  
                try {
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
                    $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
						
				    $ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
					$param = (int) $this->_request->getParam('param_int');
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
						
				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';   
					$integrateur_montant = $request->getParam("integrateur_montant");
					$integrateur_type = $request->getParam("integrateur_type");
					$statut = $request->getParam("liste");
					$programme = $request->getParam("programme");
					$multiple = "";
					$mont_msbcm = "";
					$type_souscription = "";
					$bps_demande = "";
					$delai = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps  = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
						
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");		
					} else if($programme == "BC") {
					    $type_souscription = $request->getParam("type_souscription_bc");	
					}
						
					if(substr($membre_integrateur,19,1) == 'P')  {					 
                        $findmembre = $m_map->find($membre_integrateur,$membre);   
                        if($findmembre == false) {
					        $db->rollback();
					        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ..."));
					        return;
				        }
						if($membre->desactiver == 1) {
							$db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Ce souscripteur dont le code membre que voici  ".$membre_integrateur." n'est pas autorisé à effectuer cette opération ..."));
					        return;
						}
						
                    } else {
				        $findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
				        if($findmembre == false) {
					       $db->rollback();
					       $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ..."));
					       return;    
				        }
						if($membremoral->desactiver == 1) {
							$db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Ce souscripteur dont le code membre que voici  ".$membre_integrateur." n'est pas autorisé à effectuer cette opération ..."));
					        return;
						}
			        }
					
					if($typeintegrateur->montant_param > $integrateur_montant) {
				        $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription ne doit pas etre inferieur au montant predefini ..."));
					    return;
				    }
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $integrateur_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						}   						
					}
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				        $db->rollback();
				        $this->view->error =  Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps)); 
					    return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				        $db->rollback();
				        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du montant de souscription au bon de consommation prédéfini  ".$mont_msbcm)); 
					    return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'P' &&  ($integrateur_type == 21  || $integrateur_type == 24 ))  {
						$db->rollback();
		                $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Seuls les personnes morales sont autorisées à effectuer cette opération ...."));
					    return;
					}
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
                        $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre Code BAn est  incorrect ..."));
				        return;
                    }
				  
				    if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
				        $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0",'message' => "Montant restant du BAn est insuffisant ..."));
					    return;
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
					        $db->rollback();
					        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ..."));
					        return;
					    }
						
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du souscripteur doit être celui du bon neutre ..."));
					        return;
						}
						
						
						$i = 0;
					    $reste = $integrateur_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
						while($reste > 0 && $i < $nbre_lignesdetbon) {
						    $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        } 
                                    }
								  
								}
								//Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
								 
                            } else  {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
							   
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
                            }							   
                            $i++;
						}
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
							
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						$bon_neutre2M->update($bon_neutre2);
						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
					    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

                        $m_mstiers = new Application_Model_EuMstiersMapper();
				        $mstiers = new Application_Model_EuMstiers();
							 
							 
						$finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					    $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
							$db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Login déjà existant ..."));
					        return;
					    } else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
							$db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Mot de passe incorret ..."));
					        return;
						}
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						  $souscription->setSouscription_ville($membre->ville_membre);
                          $souscription->setSouscription_quartier($membre->quartier_membre);
                          $souscription->setSouscription_email($membre->email_membre);
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						  $souscription->setSouscription_ville($membremoral->ville_membre);
                          $souscription->setSouscription_quartier($membremoral->quartier_membre);
                          $souscription->setSouscription_email($membremoral->email_membre);
						}
						
						$membreasso_id = $request->getParam("membreasso_id");
						if($membreasso_id != 1) {
						    $souscription->setSouscription_membreasso($membreasso_id);
					    } else {
							$souscription->setSouscription_membreasso(1);
						}
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
						
						if($request->getParam("integrateur_type_candidat") !="") {
                           $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                        } else {
                           $souscription->setSouscription_type_candidat(NULL);
                        }
						
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();
						
						$cmfh = new Application_Model_EuCmfh();
                        $cmfh_mapper = new Application_Model_EuCmfhMapper();
					
			            if($request->getParam("integrateur_type_candidat") !="")  {
				            $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($request->getParam("integrateur_membre"),$request->getParam("integrateur_type_candidat"));
				            if($findrowscmfh == false)  {
					            $compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					            $cmfh->setId_cmfh($compteur_cmfh);
				                $cmfh->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				                $cmfh->setId_type_candidat($request->getParam("integrateur_type_candidat"));
					            $cmfh->setCode_membre($request->getParam("integrateur_membre"));
                                $cmfh->setCode_zone_create($request->getParam("code_zone"));
                                $cmfh->setId_pays($request->getParam("id_pays"));
                                $cmfh->setId_region($request->getParam("id_region"));
                                $cmfh->setId_prefecture($request->getParam("id_prefecture"));
                                $cmfh->setId_canton($request->getParam("id_canton"));
					            $cmfh_mapper->save($cmfh);
			                }
			            }
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						      
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						
						$a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						
						if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22)  {
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						   
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso(0);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        $a->setIntegrateurCanton($request->getParam("id_canton"));
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("integrateur_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);

                        // Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";
						
						if($finddepot == NULL && $findmstiers == NULL) {
							//$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
							} else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            $membreasso->setMembreasso_id($compteur_membreasso);
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
						
						// insertion dans les tables eu_mstiers
						$id_souscription = $compteur_souscription;
                        //$id_mstiers = $m_mstiers->findConuter() + 1;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("integrateur_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
								  
                        //$mstiers->setId_mstiers($id_mstiers);
						$mstiers->setCode_membre($code_integrateur);
						$mstiers->setMontant_souscris($montant_souscris);
						$mstiers->setMontant_utilise(0);
						$mstiers->setMontant_restant($montant_souscris);
						$mstiers->setType_souscription($type_souscription);  
							  
					    $mstiers->setId_souscription($id_souscription);
					    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setType_mstiers($programme);
						$mstiers->setStatut_mstiers($statut);
							   
					    if($param == 4) {
							$mstiers->setType_souscripteur("ODD");
						} elseif($param == 5)  {
						    $mstiers->setType_souscripteur("USER");  								  
					    } else {
							$mstiers->setType_souscripteur("CMFH");
						}
                        $m_mstiers->save($mstiers);
                        $id_mstiers = $db->lastInsertId();						
							   
                        //script de creation de TE de prestation
						$eucompte = new Application_Model_EuCompte();
						$m_compte = new Application_Model_EuCompteMapper();
									
						$prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
									
                        $te = new Application_Model_EuTegc();
						$m_te = new Application_Model_EuTegcMapper();
						$code_te = "";
						$code_tegc = "";
						$nom_tegc = "";
						
						$code_membre = $request->getParam("integrateur_membre");
						
						if(substr($code_membre,19,1)=='P') {
						    $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						} else {
							$nom_tegc = $membremoral->raison_sociale;
					    }
									
						$code_zone     = $request->getParam("code_zone");
			            $id_pays       = $request->getParam("id_pays");
			            $id_region     = $request->getParam("id_region");
			            $id_prefecture = $request->getParam("id_prefecture");
			            $id_canton     = $request->getParam("id_canton");
									
						$num_compte = 'NB-TPAGCP-'.$code_membre;
				        $res = $m_compte->find($num_compte,$eucompte);
						
						$num_comptets = 'NB-TSGCP-'.$code_membre;
				        $rests = $m_compte->find($num_comptets,$eucompte);
						
						if(!$rests) {
						    $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                   $eucompte->setCode_membre($code_membre)
                                            ->setCode_membre_morale(NULL);
							} else  {
                                   $eucompte->setCode_membre(NULL)
                                            ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);
									
                        }
						
						
						// fin script de creation TE 
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						} else {
							
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
							$code_tegc = $code_te;
						}
						
						$code_banque = "";
                        $referencepaie = "";
						
						if($type_souscription != "BPS")   {
							$type_bnp = "";
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
							$type_bnp = $type_souscription;
							
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							    $url,
							    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
                                $db->commit();
								$this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => $response->message));
							} else {
							    $db->rollback();
								$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => $response->message)); 
                                return;
							}
							curl_close($url);
					    }   else {
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($request->getParam("integrateur_montant"));
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(NULL);
							$bpssouscription->setAllouer(0);
                            $m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
					            $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password));
					        } else {
					            $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee"));
					        }
                            return;
						}
					}
		
		        } catch(Exception $exc) {
				    $db->rollback();
                    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                    return;					
			    }
		    } else {
                $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));
            }
		}
	}
	
	
	
	
	public  function  addintegrateurAction()  {
	    $this->_helper->layout()->disableLayout();
	    $m_souscription = new Application_Model_EuSouscriptionMapper();           
            $request = $this->getRequest();
		
		if($request->isPost())  {
		    if($request->getParam("integrateur_type") != "" 
		    && $request->getParam("code_activite") != ""  
		    && $request->getParam("integrateur_montant") != "")  {
		         
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();		  
                try { 
                    $membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
			        $membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
				    $ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
				  
                    $param = $request->getParam("integrateur_type");
                    $date_id = Zend_Date::now();
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$multiple = "";
					$mont_msbcm = "";
					$type_souscription = "";

                    $m_typeintegrateur->find($param,$typeintegrateur);				  
			      
                    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
				    $membre_integrateur  = $request->getParam("integrateur_membre");
				    $code_membre_integrateur = '';   
				    $integrateur_montant = $request->getParam("integrateur_montant");
				    $statut = $request->getParam("liste");
                    $programme = $request->getParam("programme");
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $integrateur_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						}   						
					}
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");		
					} else if($programme == "BC") {
					    $type_souscription = $request->getParam("type_souscription_bc");	
					}
					
					if(substr($membre_integrateur,19,1) == 'P')  {					 
                        $findmembre = $m_map->find($membre_integrateur,$membre);   
                        if($findmembre == false) {
					      $db->rollback();
					      $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ..."));
					      return;
				        }
                    } else {
				        $findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
				        if($findmembre == false) {
					       $db->rollback();
					       $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ..."));
					       return;    
				        }
			        }
					
					if($typeintegrateur->montant_param > $integrateur_montant) {
				        $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription ne doit pas etre inferieur au montant predefini ..."));
					    return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
				       $this->view->error =  Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps)); 
					   return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
				       $this->view->error =  Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du montant de souscription au bon de consommation prédéfini  ".$mont_msbcm)); 
					   return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'M' &&  ($param == 1  || $param == 3 ||  $param == 5 ||  $param == 7))  {
						$db->rollback();
		                $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Seuls les membres personnes physiques sont autorises a effectuer cette operation ..."));
					    return;
					}
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
                        $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre Code BAn est  incorrect ..."));
				        return;
                    }
				  
				    if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
				        $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0",'message' => "Montant restant du BAn est insuffisant ..."));
					    return;
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
					    
						$bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
					        $db->rollback();
					        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ..."));
					        return;
					    }
						
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du souscripteur doit être celui du bon neutre ..."));
					        return;
						}
						
						$i = 0;
					    $reste = $integrateur_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
						while($reste > 0 && $i < $nbre_lignesdetbon) {
						    $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        } 
                                    }
								  
								}
								//Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
								 
                            } else  {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
							   
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
                            }							   
                            $i++;
						}
						
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						$bon_neutre2M->update($bon_neutre2);
						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
					    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

                        $m_mstiers = new Application_Model_EuMstiersMapper();
				        $mstiers = new Application_Model_EuMstiers();
							 
							 
						$finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					    $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						 
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
							$db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Login déjà existant ..."));
					        return;
					    } else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
							$db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Mot de passe incorret ..."));
					        return;
						}
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						  $souscription->setSouscription_ville($membre->ville_membre);
                          $souscription->setSouscription_quartier($membre->quartier_membre);
                          $souscription->setSouscription_email($membre->email_membre);
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						  $souscription->setSouscription_ville($membremoral->ville_membre);
                          $souscription->setSouscription_quartier($membremoral->quartier_membre);
                          $souscription->setSouscription_email($membremoral->email_membre);
						}
						
						$membreasso_id = $request->getParam("membreasso_id");
						if($membreasso_id != 1) {
						    $souscription->setSouscription_membreasso($membreasso_id);
					    } else {
							$souscription->setSouscription_membreasso(1);
						}
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						      
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						
						$a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						
						if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                            if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso($sessionmembreasso->membreasso_id);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        
                        $a->setIntegrateurCanton($request->getParam("id_canton"));
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("integrateur_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);
						
						//Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";
						
						if($finddepot == NULL && $findmstiers == NULL) {
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
							} else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            $membreasso->setMembreasso_id($compteur_membreasso);
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
						
						// insertion dans les tables eu_mstiers
						$id_souscription = $compteur_souscription;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("integrateur_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
								  
						$mstiers->setCode_membre($code_integrateur);
						$mstiers->setMontant_souscris($montant_souscris);
						$mstiers->setMontant_utilise(0);
						$mstiers->setMontant_restant($montant_souscris);
						$mstiers->setType_souscription($type_souscription);  
							  
					    $mstiers->setId_souscription($id_souscription);
					    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setType_mstiers($programme);
						$mstiers->setStatut_mstiers($statut);
							   
					    if($param == 21 || $param == 24) {
							$mstiers->setType_souscripteur("ODD");
						} else {
						    $mstiers->setType_souscripteur("CMFH");        								  
					    }
                        $m_mstiers->save($mstiers);
                        $id_mstiers = $db->lastInsertId();
						
						//script de creation de TE de prestation
						$eucompte = new Application_Model_EuCompte();
						$m_compte = new Application_Model_EuCompteMapper();
									
						$prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
									
                        $te = new Application_Model_EuTegc();
						$m_te = new Application_Model_EuTegcMapper();
						$code_te = "";
						$code_tegc = "";
						$nom_tegc = "";
									
						$code_membre = $request->getParam("integrateur_membre");
							   
						if(substr($code_membre,19,1)=='P') {
						    $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						} else {
							$nom_tegc = $membremoral->raison_sociale;
					    }
									
						$code_zone     = $request->getParam("code_zone");
			            $id_pays       = $request->getParam("id_pays");
			            $id_region     = $request->getParam("id_region");
			            $id_prefecture = $request->getParam("id_prefecture");
			            $id_canton     = $request->getParam("id_canton");
									
						$num_compte = 'NB-TPAGCP-'.$code_membre;
				        $res = $m_compte->find($num_compte,$eucompte);
						
						$num_comptets = 'NB-TSGCP-'.$code_membre;
				        $rests = $m_compte->find($num_comptets,$eucompte);
									
						if(!$rests) {
						    $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                $eucompte->setCode_membre($code_membre)
                                         ->setCode_membre_morale(NULL);
							} else  {
                                $eucompte->setCode_membre(NULL)
                                         ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);
									
                        }
						
						//fin script de creation TE 
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						} else {
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
							$code_tegc = $code_te;
						}
						
						$code_banque = "";
                        $referencepaie = "";
						
						if($type_souscription != "BPS")   {
						    $type_bnp = "";
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
							$type_bnp = $type_souscription;
							
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
							$resultjson = array();
							curl_setopt_array(
							    $url,
							    array(
                                CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 30000000,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "POST",
								CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
								$db->commit();
								$this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => $response->message));
							} else  {
								$db->rollback();
								$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => $response->message)); 
                                return;
							}
						} else {
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($request->getParam("integrateur_montant"));
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(NULL);
							$bpssouscription->setAllouer(0);
                            $m_bpssouscription->save($bpssouscription);
							
							$db->commit();
					        if($finddepot == NULL && $findmstiers == NULL) {
					            $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password));
					        } else {
					            $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee"));
					        }
                                                return;
						}
						
                    }
				 
		        } catch(Exception $exc) {
				    $db->rollback();
                    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                    return;					
			    }
		    } else {
                $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));
            }
		}
		
	}



    public  function addoffreurprojetAction()  {
		$this->_helper->layout->disableLayout();
		
		$request = $this->getRequest();
		if($request->isPost()) {
		    if($request->getParam("offreur_projet_membre") != "" && $request->getParam("offreur_projet_produit") != ""
		    && $request->getParam("offreur_projet_nom_entrepot") != "" && $request->getParam("offreur_projet_adresse_entrepot") != ""
		    && $request->getParam("offreur_projet_attestation") != "")   {
		        
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {
				    $param = $request->getParam("offreur_projet_type");
                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

		            $membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

		            $m_depotvente = new Application_Model_EuDepotVenteMapper();
		            $depotvente = new Application_Model_EuDepotVente();
				   
                    $m_ville = new Application_Model_EuVilleMapper();
		            $ville = new Application_Model_EuVille();

		            $typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($param,$typeoffreur);
				   
			        $m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
							 
			        $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre")); 
					
					$date_id = Zend_Date::now();
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
				   
			        $souscription_montant = $request->getParam("souscription_montant");
			        $statut = $request->getParam("liste");
			        $programme = $request->getParam("programme");
					
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPS','valeur');
					$bnpnmps  = Util_Utils::getParametre('BNPNMPS','valeur');
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $souscription_montant/$mont_msbcm;							
						}   						
					}
					
					
					$findmembre = $m_mapmorale->find($request->getParam("offreur_projet_membre"),$membremorale);
				    if($findmembre == false)  {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numero du membre offreur de projet ou de Biens,Produits et Service est introuvable ...")); 
					    return;
				    }
					
					$souscription_type_candidat= $request->getParam("souscription_type_candidat");
				    if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					   $db->rollback();
					   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...")); 
					   return;
				    }
					
					if($typeoffreur->montant_param > $souscription_montant) {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps)); 
					    return;     
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
				       $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription ne doit pas etre inferieur au montant predefini ..."));
				       return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm));
				       return;
				    }
				   
				    $offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					    $db->rollback();
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre Code BAn est incorrect ..."));
					    return;     
				    }

                    if(($bon_neutre->bon_neutre_montant_solde < $souscription_montant)) {
					    $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ...")); 
                        return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2); 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
					        $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ...")); 
                            return;
					    }
						
						if((trim($offreur_membre) != trim($offreur_code_membre))) {
						    $db->rollback();
						    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du souscripteur doit être celui du bon neutre ...")); 
                            return;   
					    }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
						while($reste > 0 && $i < $nbre_lignesdetbon) {
						    $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
					            $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                    foreach($appro_detail as $appro) {
							            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
										 
                                    }
									   
							    }
						  
						        //Mise à jour  des lignes d'enrégistrement
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
					
					        }  else {
						        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
						    }
					        $i++;
					    }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    $bon_neutre2M->update($bon_neutre2);
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Login déjà existant ..."));
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
                            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Mot de passe incorret ..."));
						    return;
	                    }
						
						$date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						$souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $membreasso_id = $request->getParam("membreasso_id");
						if($membreasso_id != 1) {
						    $souscription->setSouscription_membreasso($membreasso_id);
					    } else {
							$souscription->setSouscription_membreasso(1);
						}
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
					    $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
					   
					    //$m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                        //$souscription->setSouscription_ville($ville->lib_ville);
						
					    $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						// --- Faire la demande de configuration ----///////
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
						
						if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
						
						//--- Début de l'opération de mise sur chaine ---
					    $code = $_POST['offreur_projet_membre'];
					    $code_zone = $request->getParam("code_zone");
					    $id_filiere = "";
					    if(isset($_POST['offreur_projet_filiere'])) {
					        $id_filiere = $_POST['offreur_projet_filiere'];
					    }
					    $code_agence = substr($code,0,12);
				        $table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur  =  $code_acteur;
					   
					   
					    //script de creation de TE des vendeurs ou offreurs de projet
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
							   	   
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
					    $code_te = "";
						$code_tegc = "";
							   
					    $nom_tegc = $membremorale->raison_sociale;
							   
						$eutegc = new Application_Model_DbTable_EuTegc();
                        $select = $eutegc->select();
					    $select->where("code_membre like ? ", $code);
                        $rowseutegc = $eutegc->fetchAll($select);
						
						$code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						//Fin script de creation des TE vendeurs ou offreurs de projet
						
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
                                    
                        //$a->setOffreur_projet_id($compteur);
                        $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                        $a->setOffreur_projet_adresse($request->getParam("offreur_projet_quartier"));
					    if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
					   
                        $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					    if($param >= 4) {
	                      $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                        $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                        $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso($sessionmembreasso->membreasso_id);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($request->getParam("id_canton"));
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    if(isset($_POST['type_fournisseur'])) {
					        $a->setOffreurProjetFournisseur($request->getParam("type_fournisseur"));
						} else {
							$a->setOffreurProjetFournisseur(null);
						}
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
							  
							  
					    ////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
					   
					   
					    /////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    // Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";
							  
					    if($finddepot == NULL  &&  $findmstiers == NULL) {
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }
						
						$code_ban = $request->getParam("code_BAn");
						
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						$mstiers->setType_souscription($type_souscription);
						
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("CMFH");
                        $m_mstiers->save($mstiers);
						$id_mstiers = $db->lastInsertId();
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;
						$montant = $souscription_montant;
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						  $code_tegc   = $request->getParam("code_te");   
						} else {
						    $code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
						    $code_tegc = $code_te;
						}
						
						$code_banque = "";
						$referencepaie = "";
						
						if($type_souscription != "BPS")  {
						    $code_banque = $request->getParam("code_banque");
						    $referencepaie   = $request->getParam("num_compte");
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 30000000,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "POST",
								CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
							
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
							    $db->commit();
							    $this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' =>  $response->message));
								return;
						    } else {
							    $db->rollback();
							    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' =>  $response->message));
								return;
						    }
							
						}  else  {
							
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($souscription_montant);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
					            $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password));
					        } else {
					            $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee"));
					        }
                                                return;
						}
						
					}
				
				} catch (Exception $exc) {
			        $db->rollback();
			        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                    return;
		        }
		
	        }  else {
			   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));
		    }	
		}
	}



        public function inscriptionbcAction() {
		$this->_helper->layout->disableLayout();
		$request = $this->getRequest();
		
		$request = $this->getRequest();
	    if($request->isPost()) {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
                $mstiersliste = new Application_Model_EuMstiersListebc();
		        $m_mstiersliste = new Application_Model_EuMstiersListebcMapper();
			    $mstiers   = new Application_Model_EuMstiers();
                $m_mstiers = new Application_Model_EuMstiersMapper();
                $membre  = new Application_Model_EuMembre();
	            $m_map   = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                    $mstierslistebc_mapper = new Application_Model_EuMstiersListebcMapper();
			 
			    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
			 
			    $apporteur = NULL;
			    $type_souscription = $request->getParam("type_souscription");
			    $beneficiaire = $request->getParam("code_membre_beneficiaire");
                $membreasso_id = $request->getParam("membreasso_id");

                $mont_bc = 30000;
				$mont_msbcm = 0;
                $bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
                $bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
				
				$apporteur = $request->getParam("code_membre_apporteur");
				if(substr($apporteur,19,1) == 'P') {
				    $findmembre = $m_map->find($apporteur,$membre);
				    if($findmembre == false) {
						$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du souscripteur saisi  ".$apporteur."  est introuvable ..."));
                        $db->rollback();
                        return;      
			        }
			    } else {
			        $findmembre = $m_mapmoral->find($apporteur,$membremoral);
				    if($findmembre == false) {
					    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numéro membre du souscripteur saisi  ".$apporteur."  est introuvable ..."));
                        $db->rollback();
					    return;
				    }	 
			    }
				
				$cumulsolde = $m_mstiers->findcumulbc($apporteur,$type_souscription);
				if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
				    $mont_msbcm = $mont_bc * $bnpmps;							
                } else {
				    $mont_msbcm = $mont_bc * $bnpnmps;							
                }
					
				$count = $mstierslistebc_mapper->findcountbenef($apporteur) + 1;
				$mont_msbcm = $count * $mont_msbcm;
				
				if($cumulsolde < $mont_msbcm) {
					$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le souscripteur apporteur ne dispose pas de bon de consommation pour tiers ..."));
                    $db->rollback();
                    return;
				}
				
				$findbeneficiaire = $m_map->find($beneficiaire,$membre);
			    if($findbeneficiaire == false) {
					$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du beneficiaire saisi  ".$beneficiaire."  est introuvable ..."));
                    $db->rollback();
                    return;      
			    }
				
				
                //$compteur_mstiers = $mstierslistebc_mapper->findConuter() + 1;	
			    //$mstiersliste->setId_mstiers_listebc($compteur_mstiers)
				
			    $mstiersliste->setCode_membre_apporteur($apporteur)
						     ->setCode_membre_beneficiaire($beneficiaire)
						     ->setType_souscription($type_souscription)
							 ->setType_liste("AvecListe")
							 ->setUtilisateur($membreasso_id)
						     ->setDate_listebc($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
							 ->setStatut(0);
			    $m_mstiersliste->save($mstiersliste);
			    $db->commit();
                $this->view->error = Zend_Json::encode(array('resultat' =>"1",'message' => "Operation bien effectuee"));
                return;				
				
			} catch(Exception $exc) {
		        $db->rollback();
			    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système"));
				return;
		    }
		
		}
		
	}
	

    
	
	
	
	public  function addsouscriptionbcAction() {
	   /* page api/addoffreurprojet - Ajout d'un offreurprojet */
	   $sessionmcnp = new Zend_Session_Namespace('mcnp');
	   $this->_helper->layout->disableLayout();
	
	   $date_id = Zend_Date::now();
	   $request = $this->getRequest();
           if($request->isPost()) {
	      if($request->getParam("code_membre") != "" && $request->getParam("montant_souscription") != ""
		&& $request->getParam("montant_souscription") > 0 
		&& $request->getParam("msbc_attestation") == 1)   {
	            
		$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
				     
                    $membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
		    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
		    $eucompte = new Application_Model_EuCompte();
		    $m_compte = new Application_Model_EuCompteMapper();
				
		    $date_id = Zend_Date::now();
		    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
								
		    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
				
		    $code_membre  = $request->getParam("code_membre");
		    $montant_souscription  = $request->getParam("montant_souscription");
		    $code_te  = $request->getParam("code_te");
		    $type_souscription  = $request->getParam("type_souscription");
		    $code_banque  = $request->getParam("code_banque");
		    $num_compte  = $request->getParam("num_compte");
		    $statut  = $request->getParam("liste");
				
		    $num_compte = 'NB-TPAGCP-'.$code_membre;
		    $res = $m_compte->find($num_compte,$eucompte);

                    if(substr($code_membre,19,1) == 'P')  {
				       $findmembre = $m_map->find($code_membre,$membre);
				       if($findmembre == false) {
					      $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numero membre du souscripteur saisi  ".$code_membre."  est introuvable ..."));
					      return;
				       }
			        } else {
				       $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				       if($findmembre == false) {
					     $db->rollback();
		                 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le numero membre du souscripteur saisi  ".$code_membre."  est introuvable ..."));
					     return;
				       }
			        }
					
					if(!$res) {
				      $db->rollback();
		              $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Ce membre ne dispose pas de terminal d'Echange (TE) ..."));
				      return;
				    }
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
				       $db->rollback();
                       $this->view->error =  Zend_Json::encode(array('resultat' => "0", 'message' => "Votre Code BAn est incorrect ..."));
                       return; 
			         }
				
				     if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
				       $db->rollback();
					   $this->view->error =  Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ..."));
                       return; 
			         }
					 
					 $bon_neutre2 = new Application_Model_EuBonNeutre();
				     $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
				     $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
				     $code_membre_souscripteur = $bon_neutre2->bon_neutre_code_membre;
					   
				     $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
				     $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
			         $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
			         $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					 
					 if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
				        $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Montant restant du BAn est insuffisant ..."));
                        return; 
				     }
				
				     if($code_membre != $code_membre_souscripteur) {
				        $db->rollback();
                        $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du souscripteur doit être celui du bon neutre ..."));
                        return;   
				     }
					 
					 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
				     $i = 0;
			         $reste = $montant_souscription;
			         $nbre_lignesdetbon = count($lignesdetbon);
				     while($reste > 0 && $i < $nbre_lignesdetbon) {
                        $lignedetbon = $lignesdetbon[$i];
                        $id = $lignedetbon->getBon_neutre_detail_id();
				        $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
					    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						     $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
						     if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();	  
								foreach($appro_detail as $appro) {
								   $bnad = new Application_Model_EuBonNeutreApproDetail();
                                   $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                   if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                      $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                      $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                      $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                      $bnad_M->update($bnad);
                                   } else {
                                      $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                      $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                      $bnad_M->update($bnad);
                                      break;
                                   }
										 
                                 }
								  
						     }
						     //Mise à jour  des lignes d'enrégistrement
						     $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                 ->setBon_neutre_detail_montant_solde(0);
                             $bon_neutre_detailM->update($lignedetbon);
								 
                         } else {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                  }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);
						          $reste = 0;
                           }							   
                           $i++;
                       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
				       $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
				       $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
				       $bon_neutre2M->update($bon_neutre2);
						  
				       $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
				       $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
				       $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
				       $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
				       $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
				       if(substr($code_membre,19,1) == 'P')  {
				          $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
				       } else {
				          $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
				       }
				  
				       $bon_neutre_utilise->setBon_neutre_utilise_libelle("BNP");
				       $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				       $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
				       $bon_neutre_utiliseM->save($bon_neutre_utilise);
				  
				       $m_mstiers = new Application_Model_EuMstiersMapper();
				       $mstiers = new Application_Model_EuMstiers();
				  
				       $eusouscription = new Application_Model_DbTable_EuSouscription();
				       $select = $eusouscription->select();
				       if(substr($code_membre,19,1) == 'P')  {
					   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                                   $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
				       } else {
					   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
				       }
						
				       $select->order(array("souscription_id ASC"));
	                               $select->limit(1);
	                               $rowseusouscription = $eusouscription->fetchRow($select);
		                       if(count($rowseusouscription) > 0) {
			                  $souscription_ok = 1;
			                  $souscription_first = $rowseusouscription->souscription_id;
			               } else {
			                  $souscription_ok = 0;
			               }
				  
				       $date_id = Zend_Date::now();
				       $souscription = new Application_Model_EuSouscription();
                       $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
				       $compteur_souscription = $souscription_mapper->findConuter() + 1;
				       $souscription->setSouscription_id($compteur_souscription);
				  
				       if(substr($code_membre,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
				          $souscription->setSouscription_mobile($membre->portable_membre);
				          $souscription->setSouscription_personne("PP");
					      $souscription->setSouscription_quartier($membre->quartier_membre);     
                          $souscription->setSouscription_email($membre->email_membre);
				       } else {
					      $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
					      $souscription->setSouscription_mobile($membremoral->portable_membre);
					      $souscription->setSouscription_personne("PM");
					      $souscription->setSouscription_quartier($membremoral->quartier_membre);     
                          $souscription->setSouscription_email($membremoral->email_membre);
				       }
				  
				       $souscription->setSouscription_membreasso(1);	
				       $souscription->setSouscription_type("BAn");
                       $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                       $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);      
                       $souscription->setSouscription_banque(null);	
				       $souscription->setSouscription_montant($request->getParam("montant_souscription"));
                       $souscription->setSouscription_nombre(NULL);
                       $souscription->setSouscription_programme("BNP");
                       $souscription->setSouscription_type_candidat(NULL);
				       $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                       $souscription->setSouscription_vignette(null);
                       $souscription->setCode_activite(null);
                       $souscription->setId_metier(null);
                       $souscription->setId_competence(null);		      
                       $souscription->setSouscription_login(null);
                       $souscription->setSouscription_passe(null);
                        						          
			           if($souscription_ok == 1)  {
                          $souscription->setSouscription_souscription($souscription_first);
				       } else {
                          $souscription->setSouscription_souscription($compteur_souscription);
				       }	
				       $souscription->setSouscription_autonome(0);
			           $souscription->setPublier(0);
				       $souscription->setErreur(0);
				       $souscription->setId_canton($request->getParam("id_canton"));
                       $souscription_mapper->save($souscription);
				  
				       ///////////////////////////////////////////// validation acnev //////////////////////////////////	
				       $souscription = new Application_Model_EuSouscription();
				       $souscriptionM = new Application_Model_EuSouscriptionMapper();
				       $souscriptionM->find($compteur_souscription,$souscription);
								
				       $souscription->setPublier(1);
				       $souscriptionM->update($souscription);
						
				       $validation_quittance = new Application_Model_EuValidationQuittance();
				       $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				       $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				       $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				       $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
				       $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				       $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				       $validation_quittance->setPublier(1);
				       $validation_quittance_mapper->save($validation_quittance);
						
						
				      ///////////////////////////////////////////// validation filiere //////////////////////////////////
				      $souscription = new Application_Model_EuSouscription();
				      $souscriptionM = new Application_Model_EuSouscriptionMapper();
				      $souscriptionM->find($compteur_souscription, $souscription);
								
				      $souscription->setPublier(2);
				      $souscriptionM->update($souscription);
						
				      $validation_quittance = new Application_Model_EuValidationQuittance();
				      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
				      $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $validation_quittance->setPublier(1);
				      $validation_quittance_mapper->save($validation_quittance);
						
				      ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
				      $souscription = new Application_Model_EuSouscription();
				      $souscriptionM = new Application_Model_EuSouscriptionMapper();
				      $souscriptionM->find($compteur_souscription, $souscription);
								
				      $souscription->setPublier(3);
				      $souscriptionM->update($souscription);

				      $validation_quittance = new Application_Model_EuValidationQuittance();
				      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
				      $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $validation_quittance->setPublier(1);
				      $validation_quittance_mapper->save($validation_quittance);
					  
					  
					  //insertion dans les tables eu_mstiers
				      $id_souscription = $compteur_souscription;
                      $montant_bc = "";			  
				      $code_ban = $request->getParam("code_BAn");
				   
                      if($type_souscription == "CMIT") {
                         $id_mstiers = $m_mstiers->findConuter() + 1;				   
                         $mstiers->setId_mstiers($id_mstiers);
				         $mstiers->setCode_membre($code_membre);
				         $mstiers->setMontant_souscris($montant_souscription);
				         $mstiers->setMontant_utilise(0);
				         $mstiers->setMontant_restant($montant_souscription);
				         $mstiers->setType_souscription("CMIT");
				         $mstiers->setId_souscription($id_souscription);
				         $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				         $mstiers->setBon_neutre_code($code_ban);
					     $mstiers->setStatut_mstiers($statut);
                         $m_mstiers->save($mstiers);
					  
                       } else if($type_souscription == "CAPU") {
                         $id_mstiers = $m_mstiers->findConuter() + 1;				   
                         $mstiers->setId_mstiers($id_mstiers);
				         $mstiers->setCode_membre($code_membre);
				         $mstiers->setMontant_souscris($montant_souscription);
				         $mstiers->setMontant_utilise(0);
				         $mstiers->setMontant_restant($montant_souscription);
				         $mstiers->setType_souscription("CAPU");
				         $mstiers->setId_souscription($id_souscription);
				         $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				         $mstiers->setBon_neutre_code($code_ban);
					     $mstiers->setStatut_mstiers($statut);
                         $m_mstiers->save($mstiers);
					  
                      }  elseif($type_souscription == "CAIPC") {
                         $id_mstiers = $m_mstiers->findConuter() + 1;				   
                         $mstiers->setId_mstiers($id_mstiers);
				         $mstiers->setCode_membre($code_membre);
				         $mstiers->setMontant_souscris($montant_souscription);
				         $mstiers->setMontant_utilise(0);
				         $mstiers->setMontant_restant($montant_souscription);
				         $mstiers->setType_souscription("CAIPC");
				         $mstiers->setId_souscription($id_souscription);
				         $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				         $mstiers->setBon_neutre_code($code_ban);
					     $mstiers->setStatut_mstiers($statut);
                         $m_mstiers->save($mstiers);
					 
                      } 

                      $code  = $request->getParam("code_membre");
				      $montant  = $request->getParam("montant_souscription");
				      $code_tegc  = $request->getParam("code_te");
				      $type_bnp  = $request->getParam("type_souscription");
				      $code_banque  = $request->getParam("code_banque");
				      $referencepaie  = $request->getParam("num_compte");
                      $souscription_id = $id_souscription;
                      $typeOpi = "BNP";				   
				   
				      $url = curl_init();
					  curl_setopt_array(
					  $url,
					  array(
						CURLOPT_PORT => "9001",
                        CURLOPT_URL => "http://10.10.20.7:9001/jmcnpApi/souscriptionOpi/emission",
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => "",
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 30,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => "POST",
					    CURLOPT_POSTFIELDS => "{
						   \n\t\"codeMembre\":\"$code\",
							\n\t\"modePaiement\":\"$code_banque\",
							 \n\t\"referencePaiement\":\"$referencepaie\",
							  \n\t\"montant\":\"$montant\",
							   \n\t\"codeTegc\":\"$code_tegc\",
						        \n\t\"typeOpi\":\"$typeOpi\",
							     \n\t\"souscriptionId\":\"$souscription_id\",
							      \n\t\"typeBnp\":\"$type_bnp\"
						}",
						CURLOPT_HTTPHEADER => array(
                           "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                           "content-type: application/json",
                         ),
					));
							
					$response = json_decode(curl_exec($url));
					$error = curl_error($url);
						
					if(($error === '')  && ($response->{'resultat'} == 0)) {
					  $db->commit();
					  $this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' => "Operation bien effectuee ...")); 
				      return;
					} else {
					  $db->rollback();
					  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Echec Operation ... :  ".$error));
					  return;
					}
					curl_close($url);
				
				} catch (Exception $exc) {
			       $db->rollback();
				   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
                   return;
				}
	
	      } else {
		      $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));
		  }
		   
	   }
	
	}
	
	
   
   
   
    public  function addbanapproAction()  {
       $sessionmembre = new Zend_Session_Namespace('membre');
       $this->_helper->layout->disableLayout();
       
	   $date_id = Zend_Date::now();

	   $request = $this->getRequest ();
	   if($request->isPost()) {
         if($request->getParam("bon_neutre_appro_beneficiaire") != "" && $request->getParam("bon_neutre_appro_montant") != ""
		   && $request->getParam("code_membre") != "") {
			
           $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
			   do {
                  $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                  $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                  $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);	
               }  while(count($bon_neutre_detail2) > 0);

			   $beneficiaire = $request->getParam("bon_neutre_appro_beneficiaire");
			   $montant = $request->getParam("bon_neutre_appro_montant");
			   $code_membre = $request->getParam("code_membre");
			   
               /////////////////////////////////////controle code membre
               if(strlen($beneficiaire) != 20) {
                  $db->rollback();
				  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le Code Membre est errone. Verifiez bien le nombre de caracteres du Code Membre. Merci..."));
                  return;
			   } else {
                 
				 if(substr($beneficiaire, -1, 1) == 'P') {
				   $membre = new Application_Model_EuMembre();
                   $membre_mapper = new Application_Model_EuMembreMapper();
                   $membre_mapper->find($beneficiaire,$membre);
				   if(count($membre) == 0) {
				      $db->rollback();
				      $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le Code Membre est errone. Veuillez bien saisir le Code Membre PP ..."));
                      return;
				   }
				   $canton = $membre->id_canton;
                   $nom = $membre->nom_membre;
                   $prenom = $membre->prenom_membre;
                   $email = $membre->email_membre;
                   $mobile = $membre->portable_membre; 
				   $raison = "";
				 }

                 if(substr($beneficiaire, -1, 1) == 'M') {
                    $membremorale = new Application_Model_EuMembreMorale();
                    $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                    $membremorale_mapper->find($beneficiaire,$membremorale);
                    if(count($membremorale) == 0) {
					   $db->rollback();
				       $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ..."));
                       return;   					
					}
					
					$canton = $membremorale->id_canton;
                    $nom = "";
                    $prenom = "";
                    $email = $membremorale->email_membre;
                    $mobile = $membremorale->portable_membre;
                    $raison = $membremorale->raison_sociale;
                 }				    
               }
			   
			   $code_membre = $request->getParam("code_membre");
			   $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
               $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($code_membre);
			   if(count($bon_neutre2) > 0) {
			      $bon_neutre = new Application_Model_EuBonNeutre();
				  $bon_neutreM = new Application_Model_EuBonNeutreMapper();
				  $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
				  
				  if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()) {
				     $db->rollback();
			         $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le montant à allouer est supérieur au solde de votre BAn...")); 
                     return;  
				  }
				  
				  $bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
                  $bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();
				  
				  $compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
                  $bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                  $bon_neutre_appro->setBon_neutre_appro_beneficiaire($request->getParam("bon_neutre_appro_beneficiaire"));
                  $bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $bon_neutre_appro->setBon_neutre_appro_montant($request->getParam("bon_neutre_appro_montant"));
                  $bon_neutre_appro->setBon_neutre_appro_apporteur($code_membre);
                  $bon_neutre_appro_mapper->save($bon_neutre_appro);
				  
				  $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_appro_montant"));
				  $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_appro_montant"));
				  $bon_neutreM->update($bon_neutre);
				  
				  $bon_neutre_id = $bon_neutre->bon_neutre_id;
				  
				  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
  				  $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();
				  
				  $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
				  $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
  				  $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
  				  $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($beneficiaire, -1, 1));
  				  $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($beneficiaire, -1, 1));
  				  $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
  				  $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_appro_montant"));
  				  $bon_neutre_utilise2M->save($bon_neutre_utilise2);
				  
				  
				  $mont = $request->getParam("bon_neutre_appro_montant");
                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
				  $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
				  
				  foreach($bon_neutre_detail as $detail) {
				    $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
					$bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
					$bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);
				  
				    if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL) {
					   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                       $appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
                       $code_banque = $appro_detail->bon_neutre_appro_detail_banque;
					} else {
                       $code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
                    }
					
					if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont)  {
					   $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

                       $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                       $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
					   
					   $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                       $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque);
                       $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);
					   
					   
					   $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
					   $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
					   $bon_neutre_detail2M->update($bon_neutre_detail2);
					
					}  else {
					   $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                       $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                       $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                       $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
                       $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque);
                       $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);
					   
					   $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
					   $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
					   $bon_neutre_detail2M->update($bon_neutre_detail2);
					   break;
					}
				  }
				  
				  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				  
				  $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                  $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre($beneficiaire);
				  if(count($bon_neutre3) > 0) {
				     $bon_neutre31 = new Application_Model_EuBonNeutre();
  					 $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
  					 $bon_neutre31M->find($bon_neutre3->bon_neutre_id,$bon_neutre31);
					 
					 $bon_neutre31->setBon_neutre_code($code_BAn);
  					 $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $request->getParam("bon_neutre_appro_montant"));
                     $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_appro_montant"));
  					 $bon_neutre31M->update($bon_neutre31);
				  
				     $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                     $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                     $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                     $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                     $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                     $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                     $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                     $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                     $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                     $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                     $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                     $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                     $bon_neutre_detail->setId_canton($canton);
                     $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                     $bon_neutre_detail_mapper->save($bon_neutre_detail);
					 
				  } else {
				     $bon_neutre = new Application_Model_EuBonNeutre();
                     $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
				  
				     $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                     $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                     $bon_neutre->setBon_neutre_type("BAn");
                     $bon_neutre->setBon_neutre_code($code_BAn);
                     $bon_neutre->setBon_neutre_code_membre($beneficiaire);
                     $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_appro_montant"));
                     $bon_neutre->setBon_neutre_montant_utilise(0);
                     $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_appro_montant"));
                     $bon_neutre->setBon_neutre_nom($nom);
                     $bon_neutre->setBon_neutre_prenom($prenom);
                     $bon_neutre->setBon_neutre_raison($raison);
                     $bon_neutre->setBon_neutre_email($email);
                     $bon_neutre->setBon_neutre_mobile($mobile);
                     $bon_neutre_mapper->save($bon_neutre);
					 
					 $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                     $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
					 
					 $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                     $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                     $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                     $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                     $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                     $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                     $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                     $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                     $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                     $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                     $bon_neutre_detail->setId_canton($canton);
                     $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                     $bon_neutre_detail_mapper->save($bon_neutre_detail);
					 
				  }
				  
				  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  $db->commit();
				  $this->view->error = Zend_Json::encode(array('resultat' => "1", 
				  'message' => "Operation bien effectuee. <br/> Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn).<br/>
                  Voici le code du Bon d'Achat neutre (BAn) : <strong> ".$code_BAn."</strong>"));
                  return;

               } else {
                  $db->rollback();
			      $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le Membre apporteur ne dispose pas de BAn...")); 
                  return;
               }			   
			
           } catch (Exception $exc) {
		      $db->rollback();
			  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur système")); 
              return;
		   }

         } else {
			$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez saisir les champs obligatoires"));
		 }
       }
   }
   
   
   
   public  function listbanapproapporteurAction()    {
      $this->_helper->layout->disableLayout();
      $request = $this->getRequest();
	  if($request->isPost ()) {
	    if($request->getParam("code_membre") != "") {
		   $banappro = new Application_Model_EuBonNeutreApproMapper();
  		   $entries = $banappro->fetchAllByApporteur($request->getParam("code_membre"));

           $datas['BAn'] = array();
           if(count($entries) > 0) {
	          $i = 0;
			  foreach($entries as $entry) :
				if(substr($entry->bon_neutre_appro_beneficiaire, -1) == "P") {
                   $membreM = new Application_Model_EuMembreMapper();
                   $membre = new Application_Model_EuMembre();
                   $membreM->find($entry->bon_neutre_appro_beneficiaire, $membre);
                   $beneficiaire = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                } else if (substr($entry->bon_neutre_appro_beneficiaire, -1) == "M") {
                   $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                   $membremorale = new Application_Model_EuMembreMorale();
                   $membremoraleM->find($entry->bon_neutre_appro_beneficiaire, $membremorale);
				   $beneficiaire = htmlentities($membremorale->raison_sociale); 
				}

				$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByAppro($entry->bon_neutre_appro_id);
                				
                $data[$i] = array(
				     'id_bon'  =>  $entry->bon_neutre_appro_id."_ban",
				     'type' => "ban_apporteur",
				     'date' => datejourfr($entry->bon_neutre_appro_date),
                     'code_membre' => $entry->bon_neutre_appro_beneficiaire,			   
				     'apporteur' => "",
				     'beneficiaire' => $beneficiaire,
				     'montant_alloue'  => $entry->bon_neutre_appro_montant,
				     'code_ban' => "",
				     'montant_utilise' => $bon_neutre_detail->bon_neutre_detail_montant_utilise,
				     'montant_restant' => $bon_neutre_detail->bon_neutre_detail_montant_solde
                );
                $i++;
              endforeach;
			  
			  
           } else {
			  $data[0] = array(
			    'id_bon' => "",
				'type' => "ban_apporteur",
				'date' => "",
				'code_membre' => "",
                'apporteur' => "",				
				'beneficiaire'    => "",
				'montant_alloue'  => "",
				'code_ban' => "",
				'montant_utilise' => "",
				'montant_restant' => ""
              );
           }		   
		   //$datas['BAn'] = $data;
           $this->view->error = Zend_Json::encode($data);
		}
	  
	  }  
   
   }
   
   
   public  function listbanapprobeneficiaireAction()  {
       $sessionmembre = new Zend_Session_Namespace('membre');
       $this->_helper->layout->disableLayout();
	   
	   $request = $this->getRequest();
	   if($request->isPost ()) {
	     if($request->getParam("code_membre") != "") {
		   $banappro = new Application_Model_EuBonNeutreApproMapper();
           $entries = $banappro->fetchAllByBeneficiaire($request->getParam("code_membre"));    
		  
		   $datas['BAn'] = array();
           if(count($entries) > 0) {
	          $i = 0;
			  foreach($entries as $entry) :
				if(substr($entry->bon_neutre_appro_apporteur, -1) == "P") {
                   $membreM = new Application_Model_EuMembreMapper();
                   $membre = new Application_Model_EuMembre();
                   $membreM->find($entry->bon_neutre_appro_apporteur, $membre);
                   $apporteur = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                } else if (substr($entry->bon_neutre_appro_apporteur, -1) == "M") {
                   $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                   $membremorale = new Application_Model_EuMembreMorale();
                   $membremoraleM->find($entry->bon_neutre_appro_apporteur, $membremorale);
				   $apporteur = htmlentities($membremorale->raison_sociale); 
				}
				$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByAppro($entry->bon_neutre_appro_id);
				$dateban = new Zend_Date($entry->bon_neutre_appro_date);
                				
                $data[$i] = array(
				   'id_bon'  => $entry->bon_neutre_appro_id."_ban",
				   'type' => "ban_beneficiaire",
				   'date' => $dateban->toString('dd/MM/yyyy'),
                   'code_membre'  => $entry->bon_neutre_appro_apporteur,				   
				   'apporteur'    => $apporteur,
				   'beneficiaire' => "",
				   'montant_alloue'  => $entry->bon_neutre_appro_montant,
				   'code_ban' => $bon_neutre_detail->bon_neutre_detail_code,
				   'montant_utilise' => $bon_neutre_detail->bon_neutre_detail_montant_utilise,
				   'montant_restant' => $bon_neutre_detail->bon_neutre_detail_montant_solde
                );
                $i++;
              endforeach;
			  //$datas['BAn'] = $data;
                 
		   } else {
	          $data[0] = array(
			    'id_bon' => "",
				'type' => "ban_beneficiaire",
			    'date' => "",
                'code_membre'  => "",				
				'apporteur' => "",
				'beneficiaire' => "",
				'montant_alloue' => "",
				'code_ban' => "",
				'montant_utilise' => "",
				'montant_restant' => ""
              );
           }
           $this->view->error = Zend_Json::encode($data);		     
		 }
		  
	   }	  
   
   }
   
   
   
   
   
   
   
   
   
   
   
   
   public  function  addbcapproAction()  {
       $sessionmembre = new Zend_Session_Namespace('membre');
       $this->_helper->layout->disableLayout();
   
       $date_id = Zend_Date::now();
	   $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	   $periode = Util_Utils::getParametre('periode','valeur');
       $date_fin->addDay($periode);
	   
	   $request = $this->getRequest();
	   if($request->isPost()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
	      try {
	          $compte = new Application_Model_EuCompte();
			  $compte_mapper =  new Application_Model_EuCompteMapper();
			  
			  $cnp = new Application_Model_EuCnp();
			  $cnp_mapper = new Application_Model_EuCnpMapper();
			  
			  $cc_mapper =  new Application_Model_EuCompteCreditMapper();
			  $cc = new Application_Model_EuCompteCredit();
			 
			  $place = new Application_Model_EuOperation();
			  $place_mapper = new Application_Model_EuOperationMapper();
			 
			  $capa = new Application_Model_EuCapa();
			  $capa_mapper = new Application_Model_EuCapaMapper();
			 
			  $membre = new Application_Model_EuMembre();
			  $membre_mapper =  new Application_Model_EuMembreMapper();
			 
			  $membremorale = new Application_Model_EuMembreMorale();
			  $membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
			 
			  $approvisionnement = new Application_Model_EuApprovisionnement();
			  $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			  $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			  $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			 
			  $tcnp = new Application_Model_DbTable_EuCnpEntree();
			  
			  $apporteur = $request->getParam("code_membre");
			  $beneficiaire = $request->getParam("code_benef");
			  $montant = $request->getParam("montant_bc");
			  $cat_produit = $request->getParam("cat_produit");
			  
			  $type_ressource  = "";
			  $type_ressource1 = "";
			  $code_cat  = "";
			  $code_cat1 = "";
			  $produit = "";
			  $produit1 = "";
			  $cat_echange = "";
			  $id_canton = $request->getParam("id_canton");
			  
			  if(substr($apporteur,-1,1) == 'P')  {
			    if($cat_produit == "nr") {
				   $produit = "RPGnr";
				}
				if($cat_produit == "r") {
				   $produit = "RPGr";
				}
			    $type_ressource = "NB";
			    $code_cat = "TPAGCRPG";
			    $cat_echange = "RPG";
				
			 } else {
			   if($cat_produit == "nr") {
				 $produit = "Inr";
			   }
			   if($cat_produit == "r") {
				 $produit = "Ir";
			   }
			   $type_ressource = "NB";
			   $code_cat = "TPAGCI";
			   $cat_echange = "I";
			 }
			 
			 $retour = false;
			 if(strlen($beneficiaire) != 20) {
			    $db->rollback();
				$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le Code Membre est errone. Verifiez bien le nombre de caracteres du Code Membre. Merci..."));
			    return;
			 }
			 
			 if(substr($beneficiaire,-1,1) == 'P') {
			   $retour = $membre_mapper->find($beneficiaire,$membre);
			 } else {
			   $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
			 }
			 
			 if(!$retour) {
                $db->rollback();
			    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du beneficiaire est inexistant ..."));
                return;
             }
			 
			 if($beneficiaire == $apporteur) {
               $db->rollback();
               $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Vous ne pouvez pas approvisionner les bon de consommation a vous meme ..."));
               return;
             }
			 
			 if(substr($beneficiaire,-1,1) == 'P')  {
			   $type_ressource1 = "NB";
			   $code_cat1 = "TPAGCRPG";
			 } else {
			   $type_ressource1 = "NB";
			   $code_cat1 = "TPAGCI";
			 }
			 
			 $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			 $code_compte_beneficiaire = $type_ressource1."-".$code_cat1."-".$beneficiaire;
			 
			 $t_produit = new Application_Model_DbTable_EuCompteCredit();
             $select = $t_produit->select();
             $select->from($t_produit, array('sum(montant_credit) as somme'));
             $select->where('code_membre = ?', $apporteur);
             $select->where('code_compte like ?', $code_compte_apporteur);
			 
			 if($cat_produit != "") {
               $select->where('code_produit like ?', $produit);
			 }
			 
			 $result = $t_produit->fetchAll($select);
             $row = $result->current();
			 $somme = $row['somme'];
			 if($somme == null) {
			    $somme = 0;
			 }
			 
			 $ret = $compte_mapper->find($code_compte_apporteur,$compte);
			 
			 if($compte->getSolde() < $montant) {
			   $db->rollback();
			   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le solde de votre compte de bon de consommation est insuffisant pour effectuer cet approvisionnement ..."));
               return;				
			 }
			 
			 if($somme < $montant) {
               $db->rollback();
			   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre bon de consommation de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ..."));
               return;
             }
			 
			 // insertion dans la table eu_operation
			 $compteur = $place_mapper->findConuter() + 1;
			 $place->setId_operation($compteur)
			       ->setDate_op($date_id->toString('yyyy-MM-dd'))
                   ->setHeure_op($date_id->toString('HH:mm:ss'))
                   ->setId_utilisateur(null)
                   ->setMontant_op($montant)
                   ->setCode_produit($produit)
                   ->setLib_op("Approvisionnement du BC")
                   ->setType_op('APPRO')
                   ->setCode_cat($code_cat1);
				   
			  if(substr($beneficiaire,-1,1) == 'P') {	 
                $place->setCode_membre($beneficiaire);
			  } else {
                $place->setCode_membre_morale($beneficiaire);
              }	   
				   
              $place_mapper->save($place);
			  
			  $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
			  $compte->setSolde($compte->getSolde() + $montant);
              $compte_mapper->update($compte);
			  
			  $cpte_origine = new Application_Model_EuCompte();
			  $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
			  $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
              $compte_mapper->update($cpte_origine);
			  
			  //Enrégistrement dans la table eu_approvisionnement
			  $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  $approvisionnement->setId_approvisionnement($count_appro);
			  $approvisionnement->setCode_membre_apporteur($apporteur);
			  $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			  $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			  $approvisionnement->setType_approvisionnement("APPRO_BC");
			  $approvisionnement->setMontant_approvisionnement($montant);
			  $approvisionnement->setId_canton($id_canton);
			  $approvisionnement_mapper->save($approvisionnement);
			 
			  $credits = $cc_mapper->fetchAllCreditByCompte($apporteur,$code_compte_apporteur,$produit);
			  if($credits != NULL) {
			     $j = 0;
                 $reste = $montant;
                 $nbre_credit = count($credits);
				 while($reste > 0 && $j < $nbre_credit)  {
				     $credit = $credits[$j];
                     $id = $credit->getId_credit();
				     $source_credit = $credit->getSource();
                     if($reste > $credit->getMontant_credit()) {
                       //Enrégistrement dans la table eu_detail_approvisionnement
					   $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					   $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					   $detailapprovisionnement->setId_approvisionnement($count_appro);
				       $detailapprovisionnement->setId_credit($id);
					   $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					   $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
					   $detailapprovisionnement_mapper->save($detailapprovisionnement);
					   
					   //Enregistrement dans la table eu_compte_credit du bénéficiaire
					   if(substr($beneficiaire,-1,1) == 'P')  {
					     if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						   $produit1 = "RPGnr";
						 } else {
						   $produit1 = "RPGr";
						 }
					   } else {
					     if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						   $produit1 = "Inr";
						 } else {
						   $produit1 = "Ir";
						 }
					   }
					   
					   $maxcc = $cc_mapper->findConuter() + 1;
					   $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					   $cc->setId_credit($maxcc)
						  ->setCode_produit($produit1)
                          ->setMontant_place($montant)
						  ->setDatedeb($credit->getDatedeb())
						  ->setDatefin($credit->getDatefin())
                          ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                          ->setSource($source)
                          ->setCode_compte($code_compte_beneficiaire)
                          ->setId_operation($compteur)
                          ->setBnp($credit->getBnp())
                          ->setCode_type_credit($credit->getCode_type_credit())
                          ->setPrk($credit->getPrk())
                          ->setCompte_source($code_compte_apporteur)
                          ->setMontant_credit($credit->getMontant_credit())
                          ->setRenouveller($credit->getRenouveller())
                          ->setDomicilier($credit->getDomicilier())
                          ->setAffecter($credit->getAffecter())
                          ->setKrr($credit->getKrr())
						  ->setType_produit($credit->getType_produit())
						  ->setCode_bnp($credit->getCode_bnp())
						  ->setNbre_renouvel($credit->getNbre_renouvel())
						  ->setType_recurrent($credit->getType_recurrent())
						  ->setDuree($credit->getDuree())
						  ->setId_bps($credit->getId_bps())
                          ->setCode_membre($beneficiaire);
                       $cc_mapper->save($cc);
					   
					   //Enregistrement dans la table eu_cnp du beneficiaire
					     $maxcnp = $cnp_mapper->findConuter() + 1;
					     $cnp->setId_cnp($maxcnp)
						     ->setId_credit($maxcc)
                             ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                             ->setMont_debit($credit->getMontant_credit())
                             ->setMont_credit(0)
                             ->setSolde_cnp($credit->getMontant_credit())
                             ->setType_cnp($produit1)
                             ->setSource_credit($source)
                             ->setCode_capa(null)
                             ->setTransfert_gcp(0)
						     ->setId_gcp(null)
                             ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit1);
                          $cnp_mapper->save($cnp);
					   
					   
					   
					   //Mise à jour de la table eu_cnp apporteur
						$cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
						if($cnp_credit != null) {
					        $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                            //Mise à jour du cnp
                            $cnp->setMont_credit($cnp->getMont_credit() + $credit->getMontant_credit())
                                ->setSolde_cnp($cnp->getSolde_cnp() - $credit->getMontant_credit());
                            $cnp_mapper->update($cnp);
					       
						    $ecnp = new Application_Model_EuCnpEntree();
						    $select_cnpe = $tcnp->select();
                            $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                            $result_cnpe = $tcnp->fetchAll($select_cnpe);
                            $row_cnpe = $result_cnpe->current();
										
                            $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					             ->setId_cnp($cnp->getId_cnp())
                                 ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                 ->setMont_cnp_entree($credit->getMontant_credit())
                                 ->setType_cnp_entree($credit->getCode_produit());
                            $tcnp->insert($ecnp->toArray());
							
					    } else {
						  $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit));
                          return;
						}
						
						//Mise à jour du compte crédit apporteur
                        $reste = $reste - $credit->getMontant_credit();
                        $credit->setMontant_credit(0);
                        $cc_mapper->update($credit);
						
                     } else {
                        //Enrégistrement dans la table eu_detail_approvisionnement
					    $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					    $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					    $detailapprovisionnement->setId_approvisionnement($count_appro);
				        $detailapprovisionnement->setId_credit($id);
					    $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					    $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					    $detailapprovisionnement_mapper->save($detailapprovisionnement);
				   
                        //Enregistrement dans la table eu_compte_credit du bénéficiaire
					    if(substr($beneficiaire,-1,1) == 'P')  {
					       if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						      $produit1 = "RPGnr";
						   } else {
						      $produit1 = "RPGr";
						   }
					    } else {
					       if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						      $produit1 = "Inr";
						   } else {
						      $produit1 = "Ir";
						   }
					    }
						
						$maxcc = $cc_mapper->findConuter() + 1;
					    $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					    $cc->setId_credit($maxcc)
						   ->setCode_produit($produit1)
                           ->setMontant_place($montant)
                           ->setDatedeb($credit->getDatedeb())
                           ->setDatefin($credit->getDatefin())
                           ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                           ->setSource($source)
                           ->setCode_compte($code_compte_beneficiaire)
                           ->setId_operation($compteur)
                           ->setBnp($credit->getBnp())
                           ->setCode_type_credit($credit->getCode_type_credit())
                           ->setPrk($credit->getPrk())
                           ->setCompte_source($code_compte_apporteur)
                           ->setMontant_credit($reste)
                           ->setRenouveller($credit->getRenouveller())
                           ->setDomicilier($credit->getDomicilier())
                           ->setAffecter($credit->getAffecter())
                           ->setKrr($credit->getKrr())
						   ->setType_produit($credit->getType_produit())
						   ->setCode_bnp($credit->getCode_bnp())
						   ->setNbre_renouvel($credit->getNbre_renouvel())
						   ->setType_recurrent($credit->getType_recurrent())
						   ->setDuree($credit->getDuree())
						   ->setId_bps($credit->getId_bps())
                           ->setCode_membre($beneficiaire);
                         $cc_mapper->save($cc);
					   
					     //Enregistrement dans la table eu_cnp du beneficiaire
					     $maxcnp = $cnp_mapper->findConuter() + 1;
					     $cnp->setId_cnp($maxcnp)
						     ->setId_credit($maxcc)
                             ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                             ->setMont_debit($reste)
                             ->setMont_credit(0)
                             ->setSolde_cnp($reste)
                             ->setType_cnp($produit1)
                             ->setSource_credit($source)
                             ->setCode_capa(null)
                             ->setTransfert_gcp(0)
						     ->setId_gcp(null)
                             ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit1);
                          $cnp_mapper->save($cnp);
						  
						//Mise à jour de la table eu_cnp apporteur
						$cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
						if($cnp_credit != NULL) {
					       $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                           //Mise à jour du cnp
                           $cnp->setMont_credit($cnp->getMont_credit() + $reste)
                               ->setSolde_cnp($cnp->getSolde_cnp() - $reste);
                           $cnp_mapper->update($cnp);
					       
						   $ecnp = new Application_Model_EuCnpEntree();
						   $select_cnpe = $tcnp->select();
                           $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                           $result_cnpe = $tcnp->fetchAll($select_cnpe);
                           $row_cnpe = $result_cnpe->current();
										
                           $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					            ->setId_cnp($cnp->getId_cnp())
                                ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                ->setMont_cnp_entree($reste)
                                ->setType_cnp_entree($credit->getCode_produit());
                           $tcnp->insert($ecnp->toArray());
						   
					    } else {
						  $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit));
                          return;
						}					  
                        //Mise à jour du compte crédit apporteur
                        $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                        $cc_mapper->update($credit);
					    $reste = 0;
                     }
                     $j++;					 
				 }
			  
			  } else {
                 $db->rollback();
				 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Il n'y a pas de bon de consommation correspondant à ce compte " . $produit));
                 return;
			  }
			  
			  $db->commit();              
			  $this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' => "Operation  bien  effectuee ..."));  
			  return;
	   
	      } catch (Exception $exc) {
			$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur systeme ..."));
            $db->rollback();
            return;
         }
	   
	   }
   
   }
   
   
   public function listbcapproapporteurAction() {
      $this->_helper->layout->disableLayout();
	  $request = $this->getRequest();
	  if($request->isPost()) {
	     if($request->getParam("code_membre") != "") {
		     $bcappro = new Application_Model_EuApprovisionnementMapper();
  		     $entries = $bcappro->fetchAllByApporteur($request->getParam("code_membre"));
			 
			 $datas['BC'] = array();
			 if(count($entries) > 0) { 
			    $i = 0;
			    foreach($entries as $entry) :
				   if(substr($entry->code_membre_beneficiaire, -1) == "P") {
                      $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre_beneficiaire, $membre);
                      $beneficiaire = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                   } else if (substr($entry->code_membre_beneficiaire, -1) == "M") {
                      $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre_beneficiaire, $membremorale);
				      $beneficiaire = htmlentities($membremorale->raison_sociale); 
				   }
				   
				   $data[$i] = array(
				     'id_bon' => $entry->id_approvisionnement."_bc",
					 'type' => "bc_apporteur",
				     'date' => datejourfr($entry->date_approvisionnement),
                     'code_membre' => $entry->code_membre_beneficiaire,
                     'apporteur' => "",					 
				     'beneficiaire'   => $beneficiaire,
				     'montant_alloue' => $entry->montant_approvisionnement,
					 'code_ban'  => "",
					 'montant_utilise' => "",
					 'montant_restant' => ""
                   );
				   $i++;
                   endforeach;
				   //$datas['BC'] = $data;
                   //$this->view->error = $data;
				
		     } else {
			    $data[0] = array(
				  'id_bon' => "",
				  'type' => "bc_apporteur",
				  'date' => "",
                  'code_membre' => "",
                  'apporteur'  =>  "",				  
				  'beneficiaire'   => "",
				  'montant_alloue' => "",
				  'code_ban' => "",
				  'montant_utilise' => "",
				  'montant_restant' => ""
                );
			 }
             $this->view->error = $data; 
		 }
      }
   }
   
   
   public function listbcapprobeneficiaireAction()  {
        $sessionmembre = new Zend_Session_Namespace('membre');
        $this->_helper->layout->disableLayout();
		$request = $this->getRequest();
	    if($request->isPost()) {
	       if($request->getParam("code_membre") != "") {
		       $bcappro = new Application_Model_EuApprovisionnementMapper();
               $entries = $bcappro->fetchAllByBeneficiaire($request->getParam("code_membre"));
			   
			   $datas['BC'] = array();
			   if(count($entries) > 0)   { 
			      $i = 0;
				  foreach($entries as $entry) :
                   if(substr($entry->code_membre_apporteur, -1) == "P") {
                      $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre_apporteur, $membre);
                      $apporteur = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                   } else if (substr($entry->code_membre_apporteur, -1) == "M") {
                      $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre_apporteur, $membremorale);
				      $apporteur = htmlentities($membremorale->raison_sociale); 
				   }
                  
                   $data[$i] = array(
				    'id_bon'  => $entry->id_approvisionnement."_bc",
					'type' => "bc_beneficiaire",
				    'date' => datejourfr($entry->date_approvisionnement),
                    'code_membre' => $entry->code_membre_apporteur,				   
				    'apporteur'   => $apporteur,
					'beneficiaire' => "",
				    'montant_alloue' => $entry->montant_approvisionnement,
					'code_ban' => "",
					'montant_utilise' => "",
					'montant_restant' => ""
                   );				  
				  
				  $i++;
                  endforeach;				  
			   } else {
			      $data[0] = array(
				    'id_bon' => "",
					'type' => "bc_beneficiaire",
				    'date' => "",
                    'code_membre_apporteur' => "",				   
				    'apporteur' => "",
					'beneficiaire' => "",
				    'montant_alloue' => "",
					'code_ban' => "",
					'montant_utilise' => "",
					'montant_restant' => ""
                  );
			   }
			   //$datas['BC'] = $data;
               $this->view->error = $data;
		   }
		   
		}  
   
   }
   
   
   
   public function addblapproAction()   {
        $this->_helper->layout->disableLayout();
		$request = $this->getRequest();
	    if($request->isPost()) {
	       $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
		       $echange   = new Application_Model_EuEchange();
			   $m_echange = new Application_Model_EuEchangeMapper();
			   
			   $credit_conso   = new Application_Model_EuCreditConsommer();
			   $m_credit_conso = new Application_Model_EuCreditConsommerMapper();
			   
               $compte   = new Application_Model_EuCompte();
			   $m_compte = new Application_Model_EuCompteMapper();
			   
			   $approvisionnement = new Application_Model_EuApprovisionnement();
			   $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			   $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			   $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			   
			   $operation   = new Application_Model_EuOperation();
			   $m_operation = new Application_Model_EuOperationMapper();
			   
			   $bon   = new Application_Model_EuBon();
			   $m_bon = new Application_Model_EuBonMapper();
			   
			   $cnp   = new Application_Model_EuCnp();
			   $m_cnp = new Application_Model_EuCnpMapper();
			   
			   
			   $tcnp = new Application_Model_DbTable_EuCnpEntree();
			   
			   $gcp   = new Application_Model_EuGcp();
			   $m_gcp = new Application_Model_EuGcpMapper();
			   
			   $tegc   = new Application_Model_EuTegc();
			   $m_tegc = new Application_Model_EuTegcMapper();
			   
			   $cc   = new Application_Model_EuCompteCredit();
			   $m_cc = new Application_Model_EuCompteCreditMapper();
			   
			   $ccts   = new Application_Model_EuCompteCreditTs();
			   $m_ccts = new Application_Model_EuCompteCreditTsMapper();
			   
			   $smc   = new Application_Model_EuSmc();
			   $m_smc = new Application_Model_EuSmcMapper();
			   
			   $membre = new Application_Model_EuMembre();
	           $m_membre  = new Application_Model_EuMembreMapper();
			   $membremorale = new Application_Model_EuMembreMorale();
	           $m_membremorale  = new Application_Model_EuMembreMoraleMapper();    
		   
		       $vendeur = $request->getParam("code_membre");
			   $beneficiaire = $request->getParam("code_benef");
			   $code_tegc  = $request->getParam("code_tegc");
			   $code_tegcbenef  = $request->getParam("code_tegcbenef");
			   $montant = $request->getParam("montant_bl");
			   $id_canton = $request->getParam("id_canton");
			   $code_produit = "";
			   $compte_bc = "";
			   $comptets_bc = "";
			   
			   $date_all = new Zend_Date(Zend_Date::ISO_8601);
               $date_alloc = clone $date_all;
			   $date_debut = new Zend_Date(Zend_Date::ISO_8601);
               $date_deb = clone $date_debut;
			   
			   $date_fin = $date_deb;
			   $date_fin->addDay(30);
			   
			   $compte_gcp_vendeur = 'NB-TPAGCP-'.$vendeur;
			   $compte_gcp_beneficiaire = 'NB-TPAGCP-'.$beneficiaire;

               if(substr($vendeur,19,1) == "P") {
			     $compte_bc =  "NB-TPAGCRPG-".$vendeur;
			     $comptets_bc =  "NB-TSRPG-".$vendeur;
                 $code_produit = "RPGnr";				 
               } else {
                 $comptets_bc =  "NB-TSGCI-".$vendeur;
				 $compte_bc =  "NB-TPAGCI-".$vendeur;
				 $code_produit = "Inr";
               }
			   
			   if(substr($beneficiaire,19,1) == 'P')  {
				   $findmembre = $m_membre->find($beneficiaire,$membre);
				   if($findmembre == false) {
				     $db->rollback();
					 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du beneficiaire  ".$beneficiaire."  est introuvable ..."));
					 return;
				   } 						 
			   } else {
				   $findmembre = $m_membremorale->find($beneficiaire,$membremorale);
				   if($findmembre == false) {
					 $db->rollback();
					 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du beneficiaire  ".$beneficiaire."  est introuvable ..."));
					 return;
				   }		
			   }
			   
			   if($code_tegc == $code_tegcbenef) {
			      $db->rollback();
				  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Impossible de faire l'approvisionnement a vous-meme ..."));
				  return;
			   }
			   
			   $res = $m_compte->find($compte_gcp_vendeur,$compte);
			   $rep = $m_tegc->find($code_tegc,$tegc);
			   
			   
			   if(($compte->getSolde() < $montant) ||  ($tegc->getSolde_tegc() < $montant)) {
			     $db->rollback();
				 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le solde du Terminal d'Echange du membre apporteur est insuffisant pour effectuer cette operation ..."));
				 return;       
			   }
			   
			   //Enregistrement dans la table eu_echange
               $count_ech = $m_echange->findConuter() + 1;
			   
			   $echange->setId_echange($count_ech);
			   if(substr($vendeur,19,1) == "P") {
			     $echange->setCode_membre($vendeur);
				 $echange->setCode_membre_morale(Null);
			   } else {
			     $echange->setCode_membre_morale($vendeur);
				 $echange->setCode_membre(Null);
			   }
			   
			   $echange->setMontant($montant)
			           ->setDate_echange($date_alloc->toString('yyyy-MM-dd'))
					   ->setId_utilisateur(Null)
					   ->setType_echange('NB/NB')
					   ->setCat_echange('GCP')
					   ->setAgio(0)
                       ->setCompenser(0)
                       ->setCode_produit($code_produit)
                       ->setMontant_echange($montant)
                       ->setCode_compte_obt($compte_bc);
			    $m_echange->save($echange);
				
				// Mise à jour du compte gcp vendeur ou prestataire
				$compte->setSolde($compte->getSolde() - $montant);
                $m_compte->update($compte);

				// Mise à jour du Terminal d'Echange vendeur ou prestataire
				$tegc->setMontant_utilise($tegc->getMontant_utilise() + $montant);
				$tegc->setSolde_tegc($tegc->getSolde_tegc() - $montant);
				$m_tegc->update($tegc);
				
				//Enrégistrement dans la table eu_approvisionnement
				$count_appro = $approvisionnement_mapper->findConuter() + 1;
				$approvisionnement->setId_approvisionnement($count_appro);
			    $approvisionnement->setCode_membre_apporteur($vendeur);
			    $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			    $approvisionnement->setDate_approvisionnement($date_alloc->toString('yyyy-MM-dd HH:mm:ss'));
			    $approvisionnement->setType_approvisionnement("APPRO_BL");
			    $approvisionnement->setMontant_approvisionnement($montant);
				$approvisionnement->setId_canton($id_canton);
			    $approvisionnement_mapper->save($approvisionnement);
				
				//Mise à jour des GCP Vendeur ou Prestataire
				$gcps = $m_gcp->findGcpByTegcp($code_tegc);
				$reste = $montant;
				if(count($gcps) > 0) {
				   $j = 0;
                   while($reste > 0 && $j < count($gcps)) {
                        $rowgcp = $gcps[$j];
                        if($rowgcp->getReste() < $reste) {
                          $reste = $reste - $rowgcp->getReste();						 
                          //Mise à jour des GCP
                          $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $rowgcp->getReste());
                          $rowgcp->setReste(0);
                          $m_gcp->update($rowgcp);

                          //Enrégistrement dans la table eu_detail_approvisionnement
					      $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					      $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					      $detailapprovisionnement->setId_approvisionnement($count_appro);
				          $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
					      $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
					      $detailapprovisionnement->setMontant_detail_approvisionnement($rowgcp->getReste());
					      $detailapprovisionnement_mapper->save($detailapprovisionnement);
                          $j = $j + 1;
						  
                   		} else {
                          // Mise à jour des GCP
						  $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $reste);
                          $rowgcp->setReste($rowgcp->getReste() - $reste);
                          $m_gcp->update($rowgcp);
						  
						  //Enrégistrement dans la table eu_detail_approvisionnement
					      $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					      $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					      $detailapprovisionnement->setId_approvisionnement($count_appro);
				          $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
					      $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
					      $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					      $detailapprovisionnement_mapper->save($detailapprovisionnement);
						  
                          $reste = 0;
                          $j = $j + 1;							
                        }						 
				     }
				}
				
				//Enrégistrement dans la table eu_operation
				  $countop = $m_operation->findConuter() + 1;
				  $operation->setId_operation($countop)
				            ->setDate_op($date_alloc->toString('yyyy-MM-dd'))
                            ->setHeure_op($date_alloc->toString('hh:mm:ss'))
                            ->setId_utilisateur(Null)
							->setMontant_op($montant)
                            ->setCode_produit('GCP')
                            ->setLib_op('APPROVISIONNEMENT DU GCP')
                            ->setType_op('APPROVISIONNEMENT')
                            ->setCode_cat('TPAGCP');
                   if(substr($vendeur,19,1) == "P") {
                     $operation->setCode_membre($vendeur);
                   } else {
                     $operation->setCode_membre_morale($vendeur);
                   }
                   $m_operation->save($operation);
				   
				   // Enregistrement dans la table eu_compte_credit
                   $maxcc = $m_cc->findConuter() + 1;
                   $source = $vendeur.$date_alloc->toString('yyyyMMddHHmmss');
                   $cc->setId_credit($maxcc)
                      ->setCode_produit($code_produit)
                      ->setMontant_place($montant)
                      ->setDatedeb($date_deb->toString('yyyy-MM-dd'))
                      ->setDatefin($date_fin->toString('yyyy-MM-dd'))
                      ->setDate_octroi($date_alloc->toString('yyyy-MM-dd'))
                      ->setSource($source)
                      ->setCode_compte($compte_bc)
                      ->setId_operation($countop)
                      ->setBnp(0)
                      ->setCode_type_credit(NULL)
                      ->setPrk(8)
                      ->setCompte_source($compte_gcp_vendeur)
                      ->setMontant_credit(0)
                      ->setRenouveller('N')
                      ->setDomicilier(0)
                      ->setAffecter(0)
                      ->setKrr('N')
                      ->setCode_membre($vendeur);
                    $m_cc->save($cc);

                      //Enregistrement dans la table eu_cnp
					  $maxcnp = $m_cnp->findConuter() + 1;
					  $cnp->setId_cnp($maxcnp)
						  ->setId_credit($maxcc)
                          ->setDate_cnp($date_alloc->toString('yyyy-MM-dd'))
                          ->setMont_debit($montant)
                          ->setMont_credit($montant)
                          ->setSolde_cnp(0)
                          ->setType_cnp($code_produit)
                          ->setSource_credit($source)
                          ->setCode_capa(null)
                          ->setTransfert_gcp(0)
						  ->setId_gcp(null)
                          ->setOrigine_cnp('FG'.$code_produit);
                       $m_cnp->save($cnp);

					   // Enrégistrement dans la table eu_cnp_entree
					   $ecnp = new Application_Model_EuCnpEntree();
					   $select_cnpe = $tcnp->select();
                       $select_cnpe->from($tcnp,array('MAX(id_cnp_entree) as count'));
                       $result_cnpe = $tcnp->fetchAll($select_cnpe);
                       $row_cnpe = $result_cnpe->current();
								
					   $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
						    ->setId_cnp($maxcnp)
                            ->setDate_entree($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setMont_cnp_entree($montant)
                            ->setType_cnp_entree('GCP');
                       $tcnp->insert($ecnp->toArray());
					   
					   //Enrégistrement dans la table eu_smc
                        $maxsmc = $m_smc->findConuter() + 1;
						$smc->setId_smc($maxsmc)
						    ->setDate_smc($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setMontant($montant)
                            ->setEntree(0)
                            ->setSortie(0)
                            ->setSolde(0)
							->setId_credit($maxcc)
                            ->setSource_credit($source)
                            ->setMontant_solde($montant)
                               ->setOrigine_smc(0);
                            $smc->setType_smc('CNCSnr');
                            $smc->setCode_smcipn(null);
							$smc->setCode_smcipnp(null);
                            $smc->setCode_capa(null);
							$smc->setCode_domicilier(null);
							$m_smc->save($smc);
							
						    // Enrégistrement dans la table eu_gcp du bénéficiaire
						    $maxgcp = $m_gcp->findConuter() + 1;
							$gcp->setId_gcp($maxgcp)
							    ->setId_credit($maxcc)
								->setCode_tegc($code_tegcbenef)
								->setSource($source)
								->setDate_conso($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
								->setCode_membre($beneficiaire)
                                ->setCode_cat("TPAGCP")
                                ->setMont_gcp($montant)
                                ->setMont_preleve(0)
                                ->setReste($montant)
								->setBon_id(NULL)
								->setType_gcp(NULL);
                             $m_gcp->save($gcp);
							 
							// Enrégistrement dans la table eu_cnp pour le gcp
							$maxcnpgcp = $m_cnp->findConuter() + 1;
							$sourcegcp = $beneficiaire.$date_alloc->toString('yyyyMMddHHmmss');
					        $cnp->setId_cnp($maxcnpgcp)
						        ->setId_credit(NULL)
                                 ->setDate_cnp($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                                 ->setMont_debit($montant)
                                 ->setMont_credit(0)
                                 ->setSolde_cnp($montant)
                                 ->setType_cnp($code_produit)
                                 ->setSource_credit($sourcegcp)
                                 ->setCode_capa(null)
                                 ->setTransfert_gcp(0)
						         ->setId_gcp($maxgcp)
                                 ->setOrigine_cnp($code_produit);
                            $m_cnp->save($cnp);
							
						    // Enrégistrement dans la table eu_credit_consommer
                            $maxconso = $m_credit_conso->findConuter() + 1;
                            $credit_conso->setId_consommation($maxconso)
                                         ->setId_operation($countop)
                                         ->setCode_produit($code_produit)
                                         ->setCode_compte($comptets_bc)
                                         ->setCode_membre_dist($beneficiaire)
                                         ->setMont_consommation($montant)
                                         ->setDate_consommation($date_alloc->toString('yyyy-MM-dd'))
                                         ->setHeure_consommation($date_alloc->toString('HH:mm:ss'))
										 ->setId_credit(NULL)
										 ->setBon_id(NULL);
							if(substr($vendeur,19,1) == "P") {			 
							  $credit_conso->setCode_membre($vendeur);			 
							} else {
							  $credit_conso->setCode_membre_morale($vendeur);
							}
							$m_credit_conso->save($credit_conso);
							
							$res1 = $m_compte->find($compte_gcp_beneficiaire,$compte);
			                $rep1 = $m_tegc->find($code_tegcbenef,$tegc);
							
							//Mise à jour du compte gcp bénéficiaire
				            $compte->setSolde($compte->getSolde() + $montant);
                            $m_compte->update($compte);

				            //Mise à jour du Terminal d'Echange bénéficiaire
				            $tegc->setMontant($tegc->getMontant() + $montant);
				            $tegc->setSolde_tegc($tegc->getSolde_tegc() + $montant);
							$m_tegc->update($tegc);
				
				            $db->commit();
							$this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' => "Operation  bien  effectuee ..."));
				            return;	       
		   
		   } catch(Exception $exc) {
               //$this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
			   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur Systeme ..."));
               $db->rollback();
               return;
           }
		   
		 }   
   
   
   }
   
   
   
   public  function listblapproapporteurAction()  {
       $this->_helper->layout->disableLayout();
	   $request = $this->getRequest();
	   if($request->isPost()) {
	       if($request->getParam("code_membre") != "") {
		      $blappro = new Application_Model_EuApprovisionnementMapper();
  		      $entries = $blappro->fetchAllByApporteurBL($request->getParam("code_membre"));			
		    
			  $datas['BL'] = array();
              if(count($entries) > 0) {
			     $i = 0;
			     foreach($entries as $entry) :
                   if(substr($entry->code_membre_beneficiaire, -1) == "P") {
                      $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre_beneficiaire, $membre);
                      $beneficiaire = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                    } else if (substr($entry->code_membre_beneficiaire, -1) == "M") {
                      $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre_beneficiaire, $membremorale);
				      $beneficiaire = htmlentities($membremorale->raison_sociale); 
			        }
				 
				    $data[$i] = array(
					   'id_bon'  => $entry->id_approvisionnement."_bl",
					   'type' => "bl_apporteur",
				       'date' => datejourfr($entry->date_approvisionnement),
                       'code_membre_beneficiaire' => $entry->code_membre_beneficiaire,
                       'apporteur'  =>  "",					   
				       'beneficiaire'   => $beneficiaire,
				       'montant_alloue' => $entry->montant_approvisionnement,
					   'code_ban'  => "",
					   'montant_utilise' => "",
					   'montant_restant' => ""
				    );
				    $i++;
				    endforeach;
					//$datas['BL'] = $data;
                    
					
              } else {
			      $data[0] = array(
				    'id_bon' => "",
					'type' => "bl_apporteur",
				    'date' => "",
                    'code_membre_beneficiaire' => "",
                    'apporteur' => "",					
				    'beneficiaire'   => "",
				    'montant_alloue' => "",
					'code_ban' => "",
				    'montant_utilise' => "",
				    'montant_restant' => ""
				  );  
              }
              $this->view->error = $data;			   
	       }
       }
   }
   
   
   
   public  function listblapprobeneficiaireAction()  {
       $this->_helper->layout->disableLayout();
       $request = $this->getRequest();
	    if($request->isPost()) {
	       if($request->getParam("code_membre") != "") {
		       $blappro = new Application_Model_EuApprovisionnementMapper();
               $entries = $blappro->fetchAllByBeneficiaireBL($request->getParam("code_membre"));
			   
			   $datas['BL'] = array();
			   if(count($entries) > 0)   { 
			     $i = 0;
				 foreach($entries as $entry) :
                   if(substr($entry->code_membre_apporteur, -1) == "P") {
                      $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre_apporteur, $membre);
                      $apporteur = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                   } else if (substr($entry->code_membre_apporteur, -1) == "M") {
                      $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre_apporteur, $membremorale);
				      $apporteur = htmlentities($membremorale->raison_sociale); 
				   }
                  
                   $data[$i] = array(
				     'id_bon'  =>  $entry->id_approvisionnement.'bl',
					 'type' => "bl_beneficiaire",
				     'date' => datejourfr($entry->date_approvisionnement),
                     'code_membre_apporteur' => $entry->code_membre_apporteur,				   
				     'apporteur'   => $apporteur,
					 'beneficiaire' => "",
				     'montant_alloue' => $entry->montant_approvisionnement,
					 'code_ban' => "",
					 'montant_utilise' => "",
					 'montant_restant' => ""
                   );				  
				   $i++;
                   endforeach;
				   
			   } else {
			       $data[0] = array(
				     'id_bon' => "",
					 'type' => "bl_beneficiaire",
				     'date' => "",
                     'code_membre_apporteur' => "",				   
				     'apporteur'   => "",
					 'beneficiaire' => "",
				     'montant_alloue' => "",
					 'code_ban' => "",
					 'montant_utilise' => "",
					 'montant_restant' => ""
                   );
			   }
			   //$datas['BL'] = $data;
               $this->view->error = $data;
		   }
		   
		}
   
   }
   
   
   
   public  function  addbsapproAction()  {
      $this->_helper->layout->disableLayout();
	  
	  $date_id = Zend_Date::now();
	  $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	  $periode = Util_Utils::getParametre('periode','valeur');
      $date_fin->addDay($periode);
	   
	  $request = $this->getRequest ();
	  if($request->isPost ()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
          try {
		      $compte = new Application_Model_EuCompte();
			  $compte_mapper =  new Application_Model_EuCompteMapper();
			 
			  $cc_mapper =  new Application_Model_EuCompteCreditMapper();
			  $cc = new Application_Model_EuCompteCredit();
			 
			  $place = new Application_Model_EuOperation();
			  $place_mapper = new Application_Model_EuOperationMapper();
			 
			  $membre = new Application_Model_EuMembre();
			  $membre_mapper =  new Application_Model_EuMembreMapper();
			 
			  $approvisionnement = new Application_Model_EuApprovisionnement();
			  $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			  $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			  $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			 
			  $apporteur = $request->getParam("code_membre");
			  $beneficiaire = $request->getParam("code_benef");
			  $montant = $request->getParam("montant_bs");
			  $type_compte = $request->getParam("type_compte");
			  $id_canton = $request->getParam("id_canton");
			  
			  $type_ressource = "NR";
			  if($type_compte == "TCNCS") {
			     $code_cat = "TCNCS";
			  }
              
              if($type_compte == "TPN") {
                 $code_cat = "TPN";
              }              
			  
			  $produit = "CNCSnr";
			   
			  $retour = false;
			  if(strlen($beneficiaire) != 20) {
			     $db->rollback();
				 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le Code Membre est errone. Verifiez bien le nombre de caracteres du Code Membre. Merci..."));
			     return;
			  }
			  
			  $retour = $membre_mapper->find($beneficiaire,$membre);
			  if (!$retour) {
                 $db->rollback();
				 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du membre beneficiaire est inexistant ......"));
                 return;
              }
			 
			  if($beneficiaire == $apporteur) {
                $db->rollback();
				$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Vous ne pouvez pas approvisionner les bon de salaire à vous même"));
                return;
              }
			  
			  $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			  $code_compte_beneficiaire = $type_ressource."-".$code_cat."-".$beneficiaire;
			  
			  $t_produit = new Application_Model_DbTable_EuCompteCredit();
              $select = $t_produit->select();
              $select->from($t_produit, array('sum(montant_credit) as somme'));
              $select->where('code_membre = ?', $apporteur);
              $select->where('code_compte like ?', $code_compte_apporteur);
			 
              $result = $t_produit->fetchAll($select);
              $row = $result->current();
			  $somme = $row['somme'];
			  if($somme == null) {
			    $somme = 0;
			  }
			  
			  $ret = $compte_mapper->find($code_compte_apporteur,$compte);
              
              if($compte->getSolde() < $montant) {
			    $db->rollback();
				$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le solde de votre compte de bon de salaire est insuffisant pour effectuer cet approvisionnement ..."));
                return;				
			  }

              if($somme < $montant) {
                 $db->rollback();
				 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre bon de salaire de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ..."));
                 return;
              }

              // insertion dans la table eu_operation
			  $compteur = $place_mapper->findConuter() + 1;
			  $place->setId_operation($compteur)
			       ->setDate_op($date_id->toString('yyyy-MM-dd'))
                   ->setHeure_op($date_id->toString('HH:mm:ss'))
                   ->setId_utilisateur(null)
                   ->setMontant_op($montant)
                   ->setCode_produit($produit)
                   ->setLib_op("Approvisionnement du ".$produit)
                   ->setType_op('APPRO_BS')
                   ->setCode_cat($code_cat);
				   
			   if(substr($beneficiaire,-1,1) == 'P') {	 
                  $place->setCode_membre($beneficiaire);
			   } else {
                  $place->setCode_membre_morale($beneficiaire);
               }
				   
               $place_mapper->save($place);
			   
			   $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
			   $compte->setSolde($compte->getSolde() + $montant);
               $compte_mapper->update($compte);
						
			   $cpte_origine = new Application_Model_EuCompte();
			   $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
			   $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
               $compte_mapper->update($cpte_origine);

               //Enrégistrement dans la table eu_approvisionnement
			   $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			   $approvisionnement->setId_approvisionnement($count_appro);
			   $approvisionnement->setCode_membre_apporteur($apporteur);
			   $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			   $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			   $approvisionnement->setType_approvisionnement("APPRO_BS");
			   $approvisionnement->setMontant_approvisionnement($montant);
			   $approvisionnement->setId_canton($id_canton);
			   $approvisionnement_mapper->save($approvisionnement);
			   
			   $credits = $cc_mapper->findByCompte($code_compte_apporteur);
			   if($credits != false) {
			      $j = 0;
                  $reste = $montant;
                  $nbre_credit = count($credits);  
			      while($reste > 0 && $j < $nbre_credit)  {
				    $credit = $credits[$j];
					$id = $credit->getId_credit();
				    if($reste > $credit->getMontant_credit()) {
					  //Enrégistrement dans la table eu_detail_approvisionnement
					  $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					  $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					  $detailapprovisionnement->setId_approvisionnement($count_appro);
				      $detailapprovisionnement->setId_credit($id);
					  $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					  $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
					  $detailapprovisionnement_mapper->save($detailapprovisionnement); 
					 
					  //Enregistrement dans la table eu_compte_credit du bénéficiaire
					  $maxcc = $cc_mapper->findConuter() + 1;
					  $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					  $cc->setId_credit($maxcc)
					     ->setCode_produit($credit->getCode_produit())
                         ->setMontant_place($montant)
						 ->setDatedeb($credit->getDatedeb())
						 ->setDatefin($credit->getDatefin())
                         ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
						 ->setSource($source)
                         ->setCode_compte($code_compte_beneficiaire)
                         ->setId_operation($compteur)
                         ->setBnp($credit->getBnp())
                         ->setCode_type_credit($credit->getCode_type_credit())
                         ->setPrk($credit->getPrk())
                         ->setCompte_source($code_compte_apporteur)
                         ->setMontant_credit($credit->getMontant_credit())
                         ->setRenouveller($credit->getRenouveller())
                         ->setDomicilier($credit->getDomicilier())
                         ->setAffecter($credit->getAffecter())
                         ->setKrr($credit->getKrr())
						 ->setType_produit($credit->getType_produit())
						 ->setCode_bnp($credit->getCode_bnp())
						 ->setNbre_renouvel($credit->getNbre_renouvel())
						 ->setType_recurrent($credit->getType_recurrent())
						 ->setDuree($credit->getDuree())
						 ->setId_bps($credit->getId_bps())
                         ->setCode_membre($beneficiaire);
                       $cc_mapper->save($cc);
					   
					   //Mise à jour du compte crédit cncs apporteur
                       $reste = $reste - $credit->getMontant_credit();
                       $credit->setMontant_credit(0);
                       $cc_mapper->update($credit);
					 
				    } else {
					   //Enrégistrement dans la table eu_detail_approvisionnement
					   $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					   $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					   $detailapprovisionnement->setId_approvisionnement($count_appro);
				       $detailapprovisionnement->setId_credit($id);
					   $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					   $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					   $detailapprovisionnement_mapper->save($detailapprovisionnement);	
					   
					   //Enregistrement dans la table eu_compte_credit du bénéficiaire
					   $maxcc = $cc_mapper->findConuter() + 1;
					   $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					   
					   $cc->setId_credit($maxcc)
                          ->setCode_produit($credit->getCode_produit())
                          ->setMontant_place($montant)
						  ->setDatedeb($credit->getDatedeb())
						  ->setDatefin($credit->getDatefin())
                          ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                          ->setSource($source)
                          ->setCode_compte($code_compte_beneficiaire)
                          ->setId_operation($compteur)
                          ->setBnp($credit->getBnp())
                          ->setCode_type_credit($credit->getCode_type_credit())
                          ->setPrk($credit->getPrk())
                          ->setCompte_source($code_compte_apporteur)
                          ->setMontant_credit($reste)
                          ->setRenouveller($credit->getRenouveller())
                          ->setDomicilier($credit->getDomicilier())
                          ->setAffecter($credit->getAffecter())
                          ->setKrr($credit->getKrr())
						  ->setType_produit($credit->getType_produit())
						  ->setCode_bnp($credit->getCode_bnp())
						  ->setNbre_renouvel($credit->getNbre_renouvel())
						  ->setType_recurrent($credit->getType_recurrent())
						  ->setDuree($credit->getDuree())
						  ->setId_bps($credit->getId_bps())
                          ->setCode_membre($beneficiaire);
                       $cc_mapper->save($cc);

                       //Mise à jour du compte crédit apporteur
                       $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                       $cc_mapper->update($credit);
					   $reste = 0;
					
					}
				    $j++;
				  }
			   
			   } else {
			     $db->rollback();
				 $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Il n'y a pas de bon de salaire correspondant à ce compte " . $produit));
                 return;   
			   }
               			   
			   $db->commit();
               $this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' => "Operation bien effectuee ..."));
               return;
		  
		  } catch (Exception $exc) {
		    $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur Systeme !!!"));
            $db->rollback();
            return;
         }
		  
	   }
   
   
   }
   
   
   
   
   public function listbsapproapporteurAction()  {
       $this->_helper->layout->disableLayout();
	   $request = $this->getRequest();
	   if($request->isPost()) {
	       if($request->getParam("code_membre") != "") {
		      $bsappro = new Application_Model_EuApprovisionnementMapper();
  		      $entries = $bsappro->fetchAllByApporteurBS($request->getParam("code_membre"));

              $datas['BS'] = array();
              if(count($entries) > 0) {
			     $i = 0;
			     foreach($entries as $entry) :
                   if(substr($entry->code_membre_beneficiaire, -1) == "P") {
                      $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre_beneficiaire, $membre);
                      $beneficiaire = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                    } else if (substr($entry->code_membre_beneficiaire, -1) == "M") {
                      $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre_beneficiaire, $membremorale);
				      $beneficiaire = htmlentities($membremorale->raison_sociale); 
			        }
				 
				    $data[$i] = array(
					   'id_bon'  => $entry->id_approvisionnement."_bs",
					   'type' => "bs_apporteur",
				       'date' => datejourfr($entry->date_approvisionnement),
                       'code_membre_beneficiaire' => $entry->code_membre_beneficiaire,
                       'apporteur'  => "",					   
				       'beneficiaire'   => $beneficiaire,
				       'montant_alloue' => $entry->montant_approvisionnement,
					   'code_ban' => "",
					   'montant_utilise' => "",
					   'montant_restant' => ""
				    );
				    $i++;
				    endforeach;
					//$datas['BS'] = $data;
              } else {
					$data[0] = array(
					  'id_bon'  =>  "",
					  'type' => "bs_apporteur",
				      'date' => "",
                      'code_membre_beneficiaire' => "",
                      'apporteur' => "",					  
				      'beneficiaire'   => "",
				      'montant_alloue' => "",
					  'code_ban' => "",
					  'montant_utilise' => "",
					  'montant_restant' => ""
				    );
              }			  
		  
		      $this->view->error = $data;
           }
	   } 
   
   }
   
   
   public function listbsapprobeneficiaireAction()  {
      $this->_helper->layout->disableLayout();
	  $request = $this->getRequest();
	  if($request->isPost()) {
	    if($request->getParam("code_membre") != "") {
	      $bsappro = new Application_Model_EuApprovisionnementMapper();
          $entries = $bsappro->fetchAllByBeneficiaireBS($request->getParam("code_membre"));  
		  $datas['BS'] = array();
		  if(count($entries) > 0)   { 
			 $i = 0;
			 foreach($entries as $entry) :
               if(substr($entry->code_membre_apporteur, -1) == "P") {
                  $membreM = new Application_Model_EuMembreMapper();
                  $membre = new Application_Model_EuMembre();
                  $membreM->find($entry->code_membre_apporteur, $membre);
                  $apporteur = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                } else if (substr($entry->code_membre_apporteur, -1) == "M") {
                  $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                  $membremorale = new Application_Model_EuMembreMorale();
                  $membremoraleM->find($entry->code_membre_apporteur, $membremorale);
				  $apporteur = htmlentities($membremorale->raison_sociale); 
				}
                  
                $data[$i] = array(
				  'id_bon' => $entry->id_approvisionnement."_bs",
				  'type' => "bs_beneficiaire",
				  'date' => datejourfr($entry->date_approvisionnement),
                  'code_membre_apporteur' => $entry->code_membre_apporteur,				   
				  'apporteur'   => $apporteur,
				  'beneficiaire' => "",
				  'montant_alloue' => $entry->montant_approvisionnement,
				  'code_ban'  => "",
				  'montant_utilise' => "",
				  'montant_restant' => ""
                );				  
				$i++;
               endforeach;				  
			} else {
			   $data[0] = array(
			    'id_bon' => "",
				'type' => "bs_beneficiaire",
				'date' => "",
                'code_membre_apporteur' => "",				   
				'apporteur'   => "",
				'beneficiaire' => "",
				'montant_alloue' => "",
				'code_ban'  => "",
				'montant_utilise' => "",
				'montant_restant' => ""
               );
			
			}
			//$datas['BS'] = $data;
            $this->view->error = $data;  
	      }
      }			
   }
   
   
   
   public function addintapproAction()  {
      $this->_helper->layout->disableLayout();
	  
	  $date_id = Zend_Date::now();
	  $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	  $periode = Util_Utils::getParametre('periode','valeur');
      $date_fin->addDay($periode);
	  $request = $this->getRequest();
	  
	  if($request->isPost())  {
        $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
        try {
            $compte = new Application_Model_EuCompte();
			$compte_mapper =  new Application_Model_EuCompteMapper();
				
			$capa = new Application_Model_EuCapa();
			$capa_mapper =  new Application_Model_EuCapaMapper();
			 
			$place = new Application_Model_EuOperation();
			$place_mapper = new Application_Model_EuOperationMapper();
			 
			$cnp = new Application_Model_EuCnp();
			$cnp_mapper = new Application_Model_EuCnpMapper();
			 
			$cc_mapper =  new Application_Model_EuCompteCreditMapper();
			$cc = new Application_Model_EuCompteCredit();
			    
			$membre = new Application_Model_EuMembre();
			$membre_mapper =  new Application_Model_EuMembreMapper();
			  
			$membremorale = new Application_Model_EuMembreMorale();
			$membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
			 
			$approvisionnement = new Application_Model_EuApprovisionnement();
			$approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			$detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			$detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
				
		    $tcnp = new Application_Model_DbTable_EuCnpEntree();
			 
			$type_ressource = "";
			$code_cat = "";
			$code_cat1 = "";
		    $produit = "";
				
			$apporteur = $sessionmembre->code_membre;
			$beneficiaire = $request->getParam("code_benef");
			$montant = $request->getParam("montant_bai");
			$cat_compte = $request->getParam("cat_compte");
			$id_canton = $request->getParam("id_canton");

            if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
			   $type_ressource = "NN";
			   $code_cat = "CAPA";
			   $code_cat1 = "CAPA";
               $cumul = $capa_mapper->CumulBAiByMembre($apporteur,$cat_compte);				  
			} elseif($cat_compte == "BC") {
			   $type_ressource = "NB";
			   $code_cat = "TFS";
			   $code_cat1 = "TFS";
			   $produit = "FS";
		    }
			
			
			$retour = false;
			if(strlen($beneficiaire) != 20) {
			  $db->rollback();
			  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le Code Membre est errone. Verifiez bien le nombre de caracteres du Code Membre. Merci..."));
			  return;
			}
			  
			if(substr($beneficiaire,-1,1) == 'P') {
			  $retour = $membre_mapper->find($beneficiaire,$membre);
			} else {
			  $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
			}
			  
			if(!$retour)  {
              $db->rollback();
              $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le code membre du  beneficiaire est inexistant ..."));
              return;
            }
			  
			if($beneficiaire == $apporteur) {
              $db->rollback();
              $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Vous ne pouvez pas approvisionner les bons d'achat interne à vous meme ..."));
              return;
            }
            
            $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			$code_compte_beneficiaire = $type_ressource."-".$code_cat1."-".$beneficiaire;
				
		    $ret = $compte_mapper->find($code_compte_apporteur,$compte);
				
			if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" 
			   || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
				   
				   if($cumul < $montant) {
				      $db->rollback();
					  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le cumul des montants de votre compte de bon d'achat interne est insuffisant ..."));
                      return;
				   }	   
		     }
			 
			 if($compte->getSolde() == 0) {
			   $db->rollback();
               $this->view->error = "Le solde de votre compte de bon d'achat interne est egale a 0 ...";
               return;				
			 }
					
			 if($compte->getSolde() < $montant) {
			   $db->rollback();
			   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le solde de votre compte de bon d'achat interne est insuffisant pour effectuer cet approvisionnement ..."));
               return;				
			 }
				
			 if(!$ret) {
			   $compte->setSolde($compte->getSolde() - $montant);
               $compte_mapper->update($compte);
			 }
			 
			 $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
			 if(!$result) {
                  $compte->setCode_cat($code_cat1)
                         ->setCode_compte($code_compte_beneficiaire)
						 ->setCode_type_compte($type_ressource)
                         ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                         ->setDesactiver(0)
                         ->setLib_compte($code_cat1)
                         ->setSolde($montant);
						 
				  if(substr($beneficiaire,-1,1) == 'M') {	 
                    $compte->setCode_membre(NULL);
                    $compte->setCode_membre_morale($code);
				  } else {
				    $compte->setCode_membre($code);
                    $compte->setCode_membre_morale(null);
				  }                    
                  $compte_mapper->save($compte);
				  
                } else {
			       $compte->setSolde($compte->getSolde() + $montant);
                   $compte_mapper->update($compte);
				}
				
				//Enrégistrement dans la table eu_approvisionnement
			    $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			    $approvisionnement->setId_approvisionnement($count_appro);
			    $approvisionnement->setCode_membre_apporteur($apporteur);
			    $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			    $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			    $approvisionnement->setType_approvisionnement("APPRO_BAI");
			    $approvisionnement->setMontant_approvisionnement($montant);
				$approvisionnement->setId_canton($id_canton);
			    $approvisionnement_mapper->save($approvisionnement);

                if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" 
				  || $cat_compte == "RPG" || $cat_compte == "I")  {
				  $creditcapas = $capa_mapper->fetchAllBAiByMembre($apporteur,$cat_compte);
				  if($creditcapas != NULL) {
				     $j = 0;
                     $reste = $montant;
                     $nbre_capa = count($creditcapas);
					 while($reste > 0 && $j < $nbre_capa)  {
				        $creditcapa = $creditcapas[$j];
                        $id = $creditcapa->getCode_capa();
                        if($reste > $creditcapa->getMontant_solde()) {
						   //Enrégistrement dans la table eu_detail_approvisionnement
			               $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
			               $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
				           $detailapprovisionnement->setId_approvisionnement($count_appro);
				           $detailapprovisionnement->setId_credit(null);
						   $detailapprovisionnement->setCode_capa($id);
				           $detailapprovisionnement->setCode_compte($code_compte_apporteur);
			               $detailapprovisionnement->setMontant_detail_approvisionnement($creditcapa->getMontant_solde());
				           $detailapprovisionnement_mapper->save($detailapprovisionnement);
						   
						   //Mise à jour du compte crédit apporteur
                           $reste = $reste - $creditcapa->getMontant_solde();
						   $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $creditcapa->getMontant_solde());
                           $creditcapa->setMontant_solde(0);
                           $capa_mapper->update($creditcapa);
						   
						   
						} else {
						   //Enrégistrement dans la table eu_detail_approvisionnement
			               $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
			               $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
				           $detailapprovisionnement->setId_approvisionnement($count_appro);
				           $detailapprovisionnement->setId_credit(null);
						   $detailapprovisionnement->setCode_capa($id);
				           $detailapprovisionnement->setCode_compte($code_compte_apporteur);
			               $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
				           $detailapprovisionnement_mapper->save($detailapprovisionnement);
						
						   //Mise à jour du compte crédit apporteur
						   $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $reste);
                           $creditcapa->setMontant_solde($creditcapa->getMontant_solde() - $reste);
                           $capa_mapper->update($credit);
					       $reste = 0;
						}
					    $j++;  
				     }
					 
					 //Creation du capa du beneficiaire
					 $code_capa = 'CAPA' .$date_id->toString('yyyyMMddHHmmss');
					 $capa->setCode_capa($code_capa)
                          ->setCode_compte($code_compte_beneficiaire)
                          ->setDate_capa($date_id->toString('yyyy-MM-dd'))
                          ->setHeure_capa($date_id->toString('HH:mm:ss'))
                          ->setCode_membre($beneficiaire)
                          ->setMontant_capa($montant)
                          ->setMontant_utiliser(0)
                          ->setMontant_solde($montant)
                          ->setId_operation(null)
                          ->setType_capa($cat_compte)
                          ->setEtat_capa('Actif')
			              ->setCode_produit($cat_compte)
                          ->setOrigine_capa("BAI");
                      $capa_mapper->save($capa); 
				  }
				  
				}  elseif($cat_compte == "BC") {
				    $t_produit = new Application_Model_DbTable_EuCompteCredit();
                    $select = $t_produit->select();
                    $select->from($t_produit, array('sum(montant_credit) as somme'));
                    $select->where('code_membre = ?', $apporteur);
                    $select->where('code_compte like ?', $code_compte_apporteur);
			 
                    $result = $t_produit->fetchAll($select);
                    $row = $result->current();
			        $somme = $row['somme'];
			        if($somme == null) {
			          $somme = 0;
			        }
					
					if($somme < $montant) {
                      $db->rollback();
                      $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Votre bon de consommation de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ..."));
					  return;
                    }
					
					$credits = $cc_mapper->fetchAllCreditByCompte($apporteur,$code_compte_apporteur,$produit);
				    if($credits != NULL) {
					   $j = 0;
                       $reste = $montant;
                       $nbre_credit = count($credits);
					   while($reste > 0 && $j < $nbre_credit)  {
					      $credit = $credits[$j];
                          $id = $credit->getId_credit();
				          $source_credit = $credit->getSource();
                          if($reste > $credit->getMontant_credit()) {
						     //Enrégistrement dans la table eu_detail_approvisionnement
					         $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					         $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					         $detailapprovisionnement->setId_approvisionnement($count_appro);
				             $detailapprovisionnement->setId_credit($id);
					         $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					         $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
					         $detailapprovisionnement_mapper->save($detailapprovisionnement);
						  
						  
						     $maxcc = $cc_mapper->findConuter() + 1;
					         $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					         $cc->setId_credit($maxcc)
						        ->setCode_produit($produit)
                                ->setMontant_place($montant)
						        ->setDatedeb($credit->getDatedeb())
						        ->setDatefin($credit->getDatefin())
                                ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                ->setSource($source)
                                ->setCode_compte($code_compte_beneficiaire)
                                ->setId_operation($compteur)
                                ->setBnp($credit->getBnp())
                                ->setCode_type_credit($credit->getCode_type_credit())
                                ->setPrk($credit->getPrk())
                                ->setCompte_source($code_compte_apporteur)
                                ->setMontant_credit($credit->getMontant_credit())
                                ->setRenouveller($credit->getRenouveller())
                                ->setDomicilier($credit->getDomicilier())
                                ->setAffecter($credit->getAffecter())
                                ->setKrr($credit->getKrr())
						        ->setType_produit($credit->getType_produit())
						        ->setCode_bnp($credit->getCode_bnp())
						        ->setNbre_renouvel($credit->getNbre_renouvel())
						        ->setType_recurrent($credit->getType_recurrent())
						        ->setDuree($credit->getDuree())
						        ->setId_bps($credit->getId_bps())
                                ->setCode_membre($beneficiaire);
                            $cc_mapper->save($cc);
							
							//Enregistrement dans la table eu_cnp du beneficiaire
					        $maxcnp = $cnp_mapper->findConuter() + 1;
					        $cnp->setId_cnp($maxcnp)
						        ->setId_credit($maxcc)
                                ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                ->setMont_debit($credit->getMontant_credit())
                                ->setMont_credit(0)
                                ->setSolde_cnp($credit->getMontant_credit())
                                ->setType_cnp($produit)
                                ->setSource_credit($source)
                                ->setCode_capa(null)
                                ->setTransfert_gcp(0)
						        ->setId_gcp(null)
                                ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit);
                             $cnp_mapper->save($cnp);
							
							//Mise à jour de la table eu_cnp apporteur
						    $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
						    if($cnp_credit != null) {
					           $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                               //Mise à jour du cnp
                               $cnp->setMont_credit($cnp->getMont_credit() + $credit->getMontant_credit())
                                   ->setSolde_cnp($cnp->getSolde_cnp() - $credit->getMontant_credit());
                               $cnp_mapper->update($cnp);
					       
						       $ecnp = new Application_Model_EuCnpEntree();
						       $select_cnpe = $tcnp->select();
                               $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                               $result_cnpe = $tcnp->fetchAll($select_cnpe);
                               $row_cnpe = $result_cnpe->current();
										
                               $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					                ->setId_cnp($cnp->getId_cnp())
                                    ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                    ->setMont_cnp_entree($credit->getMontant_credit())
                                    ->setType_cnp_entree($credit->getCode_produit());
                               $tcnp->insert($ecnp->toArray());
					         } else  {
						       $db->rollback();
							   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit));
				               return;
						     }
						
					         //Mise à jour du compte crédit apporteur
                             $reste = $reste - $credit->getMontant_credit();
                             $credit->setMontant_credit(0);
                             $cc_mapper->update($credit);
						  
						  } else {
						     //Enrégistrement dans la table eu_detail_approvisionnement
					         $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					         $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					         $detailapprovisionnement->setId_approvisionnement($count_appro);
				             $detailapprovisionnement->setId_credit($id);
					         $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					         $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					         $detailapprovisionnement_mapper->save($detailapprovisionnement);

                             $maxcc = $cc_mapper->findConuter() + 1;
					         $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					         $cc->setId_credit($maxcc)
						        ->setCode_produit($produit1)
                                ->setMontant_place($montant)
                                ->setDatedeb($credit->getDatedeb())
                                ->setDatefin($credit->getDatefin())
                                ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                ->setSource($source)
                                ->setCode_compte($code_compte_beneficiaire)
                                ->setId_operation($compteur)
                                ->setBnp($credit->getBnp())
                                ->setCode_type_credit($credit->getCode_type_credit())
                                ->setPrk($credit->getPrk())
                                ->setCompte_source($code_compte_apporteur)
                                ->setMontant_credit($reste)
                                ->setRenouveller($credit->getRenouveller())
                                ->setDomicilier($credit->getDomicilier())
                                ->setAffecter($credit->getAffecter())
                                ->setKrr($credit->getKrr())
						        ->setType_produit($credit->getType_produit())
						        ->setCode_bnp($credit->getCode_bnp())
						        ->setNbre_renouvel($credit->getNbre_renouvel())
						        ->setType_recurrent($credit->getType_recurrent())
						        ->setDuree($credit->getDuree())
						        ->setId_bps($credit->getId_bps())
                                ->setCode_membre($beneficiaire);
                            $cc_mapper->save($cc);

                            //Enregistrement dans la table eu_cnp du beneficiaire
					        $maxcnp = $cnp_mapper->findConuter() + 1;
					        $cnp->setId_cnp($maxcnp)
						        ->setId_credit($maxcc)
                                ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                ->setMont_debit($reste)
                                ->setMont_credit(0)
                                ->setSolde_cnp($reste)
                                ->setType_cnp($produit1)
                                ->setSource_credit($source)
                                ->setCode_capa(null)
                                ->setTransfert_gcp(0)
						        ->setId_gcp(null)
                                ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit);
                             $cnp_mapper->save($cnp);

                             //Mise à jour de la table eu_cnp apporteur
						     $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);							 
						     if($cnp_credit != NULL) { 
                                $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                                //Mise a jour du cnp
                                $cnp->setMont_credit($cnp->getMont_credit() + $reste)
                                    ->setSolde_cnp($cnp->getSolde_cnp() - $reste);
                                $cnp_mapper->update($cnp);
					       
						        $ecnp = new Application_Model_EuCnpEntree();
						        $select_cnpe = $tcnp->select();
                                $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                                $result_cnpe = $tcnp->fetchAll($select_cnpe);
                                $row_cnpe = $result_cnpe->current();
										
                                $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					                 ->setId_cnp($cnp->getId_cnp())
                                     ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                     ->setMont_cnp_entree($reste)
                                     ->setType_cnp_entree($credit->getCode_produit());
                                $tcnp->insert($ecnp->toArray());								
							 
							 } else {
						       $db->rollback();
							   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit));
				               return;
						     }
							 //Mise à jour du compte crédit apporteur
                             $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                             $cc_mapper->update($credit);
					         $reste = 0;
						  }
					      $j++;
					   }
					
					} else {
					   $db->rollback();
					   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Il n'y a pas de bon de consommation correspondant à ce compte " . $produit));
                       return;
					}
				
				}
				
				$db->commit();
                $this->view->error = Zend_Json::encode(array('resultat' => "1", 'message' => "Operation bien effectuee ..."));
                return;

        } catch (Exception $exc) {
		   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur Systeme !!!"));
           $db->rollback();
           return;
        }		 
   
      }
   
   }
   
   
   
   
   public  function  listintapproapporteurAction()  {
      $this->_helper->layout->disableLayout();
	  $request = $this->getRequest();
	  if($request->isPost()) {
	     if($request->getParam("code_membre") != "") {
		    $baiappro = new Application_Model_EuApprovisionnementMapper();
            $entries = $baiappro->fetchAllByApporteurBAI($request->getParam("code_membre"));
		
		    $datas['BAi'] = array();
            if(count($entries) > 0) {
			   $i = 0;
			   foreach($entries as $entry) :
                   if(substr($entry->code_membre_beneficiaire, -1) == "P") {
                      $membreM = new Application_Model_EuMembreMapper();
                      $membre = new Application_Model_EuMembre();
                      $membreM->find($entry->code_membre_beneficiaire, $membre);
                      $beneficiaire = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                    } else if (substr($entry->code_membre_beneficiaire, -1) == "M") {
                      $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                      $membremorale = new Application_Model_EuMembreMorale();
                      $membremoraleM->find($entry->code_membre_beneficiaire, $membremorale);
				      $beneficiaire = htmlentities($membremorale->raison_sociale); 
			        }
				 
				    $data[$i] = array(
					   'id_bon'  =>  $entry->id_approvisionnement."_int",
					   'type' => "int_apporteur",
				       'date' => datejourfr($entry->date_approvisionnement),
                       'code_membre_beneficiaire' => $entry->code_membre_beneficiaire,
                       'apporteur' => "",					   
				       'beneficiaire'   => $beneficiaire,
				       'montant_alloue' => $entry->montant_approvisionnement,
					   'code_ban' => "",
				       'montant_utilise' => "",
				       'montant_restant' => ""
				    );
				    $i++;
				    endforeach;
					//$datas['BAi'] = $data;
              } else {
			        $data[0] = array(
					   'id_bon'  => "",
					   'type' => "int_apporteur",
				       'date' => "",
                       'code_membre_beneficiaire' => "",
                       'apporteur' => "",					   
				       'beneficiaire'   => "",
				       'montant_alloue' => "",
					   'code_ban' => '',
				       'montant_utilise' => "",
				       'montant_restant' => ""
				    );
			  }
			  $this->view->error = $data;
			 
		  }
		
	  }
   
   }
   
   
   
   
   public  function  listintapprobeneficiaireAction()  {
      $this->_helper->layout->disableLayout();
	  $request = $this->getRequest();
	  if($request->isPost()) {
	    if($request->getParam("code_membre") != "") {
		     $baiappro = new Application_Model_EuApprovisionnementMapper();
             $entries = $baiappro->fetchAllByBeneficiaireBAI($request->getParam("code_membre")); 

             $datas['BAi'] = array();
		     if(count($entries) > 0) { 
			   $i = 0;
			   foreach($entries as $entry) :
                  if(substr($entry->code_membre_apporteur, -1) == "P") {
                     $membreM = new Application_Model_EuMembreMapper();
                     $membre = new Application_Model_EuMembre();
                     $membreM->find($entry->code_membre_apporteur, $membre);
                     $apporteur = htmlentities($membre->nom_membre)." ".htmlentities($membre->prenom_membre); 
                  } else if (substr($entry->code_membre_apporteur, -1) == "M") {
                     $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                     $membremorale = new Application_Model_EuMembreMorale();
                     $membremoraleM->find($entry->code_membre_apporteur, $membremorale);
				     $apporteur = htmlentities($membremorale->raison_sociale); 
				  }
                  
                  $data[$i] = array(
				    'id_bon'   => $entry->id_approvisionnement."_int",
					'type' => "int_beneficiaire",
				    'date' => datejourfr($entry->date_approvisionnement),
                    'code_membre_apporteur' => $entry->code_membre_apporteur,				   
				    'apporteur'   => $apporteur,
					'beneficiaire' => "",
				    'montant_alloue' => $entry->montant_approvisionnement,
					'code_ban'  => "",
				    'montant_utilise' => "",
				    'montant_restant' => ""
                  );				  
				  $i++;
                endforeach;
                //$datas['BS'] = $data;
                				
			} else {
			    $data[0] = array(
				  'id_bon' =>  "",
				  'type' => "int_beneficiaire",
				  'date' => "",
                  'code_membre_apporteur' => "",				   
				  'apporteur'   => "",
				  'beneficiaire' => "",
				  'montant_alloue' => "",
				  'code_ban'  => "",
				  'montant_utilise' => "",
				  'montant_restant' => ""
                );
            }
            $this->view->error = $data;
        }
		 
	  }	 
   }
   
   
   public function recupnomAction()  {
      $this->_helper->layout->disableLayout();
      $request = $this->getRequest();
	  if($request->isPost()) {
	     if($request->getParam("code_membre") != "") {
		    $code_membre = $request->getParam("code_membre");
            if(substr($code_membre,19,1) == 'P') {
               $membre_db = new Application_Model_DbTable_EuMembre();
               $membre_find = $membre_db->find($code_membre);
               if(count($membre_find) == 1) {
                  $result = $membre_find->current();
                  $data[0] = strtoupper($result->nom_membre) . ' ' . ucfirst($result->prenom_membre);
               } else {
                  $data = '';
               }
		  
            } else {
		       $membre_db = new Application_Model_DbTable_EuMembreMorale();
               $membre_find = $membre_db->find($code_membre);
               if(count($membre_find) == 1) {
                  $result = $membre_find->current();
                  $data[0] = strtoupper($result->raison_sociale) ;
               } else {
                  $data = '';
               }
	        }
            $this->view->data = $data;			
		 
		 }
		 
	   }
   
   
   }
   
   
   
   public function listteapporteurAction()  {
      $this->_helper->layout->disableLayout();
      $request = $this->getRequest();
	  if($request->isPost()) {
	    if($request->getParam("code_membre") != "") {
		    $code_membre = $request->getParam("code_membre");
	        $tabela = new Application_Model_DbTable_EuTegc();
		    $select = $tabela->select();
			if(substr($code_membre,19,1) == "M") {
	           $select->where('code_membre like ?',$code_membre);
	        } else {
               $select->where('code_membre_physique like ?',$code_membre);
            }
	        $select->order('nom_tegc asc');
	        $select->from($tabela);
	        $entries = $tabela->fetchAll($select);
		    $data = array();
		 
		    if(count($entries) >= 1)  {
	           $i = 0;
			   foreach($entries as $entry) :
                 $data[$i] = array(
				    'code_tegc' => $entry->code_tegc,
				    'nom_tegc' => $entry->nom_tegc
                 );				  
				$i++;
                endforeach;
   
            } else {
			   $data[0] = array(
				 'code_tegc' => "",
				 'nom_tegc' => ""
               );
			}
			$this->view->data = $data;
		}
		 
      }
   }
   
   
   
   
   public function listtebeneficiaireAction()  {
      $this->_helper->layout->disableLayout();
      $request = $this->getRequest();
	  if($request->isPost()) {
	    if($request->getParam("code_membre") != "") {
		    $code_membre = $request->getParam("code_membre");
	        $tabela = new Application_Model_DbTable_EuTegc();
		    $select = $tabela->select();
			if(substr($code_membre,19,1) == "M") {
	           $select->where('code_membre like ?',$code_membre);
	        } else {
               $select->where('code_membre_physique like ?',$code_membre);
            }
	        $select->order('nom_tegc asc');
	        $select->from($tabela);
	        $entries = $tabela->fetchAll($select);
		    $data = array();
		 
		    if(count($entries) >= 1)  {
	           $i = 0;
			   foreach($entries as $entry) :
                 $data[$i] = array(
				   'code_tegc' => $entry->code_tegc,
				   'nom_tegc' => $entry->nom_tegc
                 );				  
				$i++;
                endforeach;
   
            } else {
			   $data[0] = array(
				 'code_tegc' => "",
				 'nom_tegc' => ""
               );
			}
			$this->view->data = $data;
		}
   
   
      }
   }
   
   
  
    public  function  listeagencesAction()  {
		$this->_helper->layout()->disableLayout();
		$request = $this->getRequest();
        $tagence = new Application_Model_DbTable_EuAgence();

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();
					
		$membreasso = new Application_Model_EuMembreasso();
        $membreasso_mapper = new Application_Model_EuMembreassoMapper();
        		
		if($request->isPost()) {
			$membreasso_id = $request->getParam('membreasso_id');
			$membreasso_mapper->find($membreasso_id,$membreasso);
	        $association_mapper->find($membreasso->membreasso_association,$association);
		    if($association->guichet == 1) {
                $code_agence = $association->code_agence;
            } else {
                $code_agence = "001001001001";
            }
			
			$select = $tagence->select();
	        $select->where('code_agence like ? ',$code_agence);
            $agences = $tagence->fetchAll($select);
			
			if(count($agences) >= 1)  {
                for($i = 0; $i < count($agences); $i++) {
                    $value = $agences[$i];
			        $libelle_agence = $value->libelle_agence;
			        $reponse = $libelle_agence;
			        $reponsetraiter = str_replace("&eacute;","e",$reponse);
                    $reponsetraiter = str_replace("d&rsquo;","'",$reponsetraiter);
                    $reponsetraiter = str_replace("&ndash;","-",$reponsetraiter);
                    $reponsetraiter = str_replace("&egrave;","e",$reponsetraiter);				
		            $data[$i] = array(
			          'code_agence' => $value->code_agence, 
			          'libelle' => $reponsetraiter
                    );	 
                }
            } else {
                $data = '';
            }
			$this->view->data = $data;
		}
		
	}

  
   
    public  function activationcapsAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
	    if($request->isPost()) {
         if($request->getParam("nom_membre") != "" && $request->getParam("prenom_membre") != ""
		    && $request->getParam("sexe_membre") != "" && $request->getParam("nationalite_membre") != ""
			&& $request->getParam("membreasso_id") != "" && $request->getParam("membreasso_id") != ""
		    && $request->getParam("sitfam_membre") != "" && $request->getParam("date_nais_membre") != ""
		    && $request->getParam("lieu_nais_membre") != "" && $request->getParam("nbr_enf_membre") != ""
		    && $request->getParam("quartier_membre") != "" && $request->getParam("ville_membre") != ""
		    && $request->getParam("profession_membre") != "" && $request->getParam("religion_membre") != ""
		    && $request->getParam("id_pays") != "" && $request->getParam("code_agence") != "") {
   
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
			       $mont_caps = Util_Utils::getParametre('CAPS','valeur');
                   $fs = Util_Utils::getParametre('FS','valeur');
                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                   $fkps = Util_Utils::getParametre('FKPS','valeur');

                   $id_utilisateur_acnev = 1;
                   $id_utilisateur_filiere = 2;
                   $id_utilisateur_technopole = 3;

                   $place = new Application_Model_EuOperation();
                   $mapper = new Application_Model_EuOperationMapper();
                   $membre   = new Application_Model_EuMembre();
                   $m_map    = new Application_Model_EuMembreMapper();
                   $membremoral = new Application_Model_EuMembreMorale();
                   $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                   $m_caps   = new Application_Model_EuCapsMapper();
                   $caps     = new Application_Model_EuCaps();
                   $dvente   = new Application_Model_EuDepotVente();
                   $m_dvente = new Application_Model_EuDepotVenteMapper();

                   $activation   = new Application_Model_EuActivation();
                   $m_activation = new Application_Model_EuActivationMapper();
                   $membretiers = new Application_Model_EuMembretierscode();
                   $m_membretiers = new Application_Model_EuMembretierscodeMapper();

                   $allocation = new Application_Model_EuAllocationCmfh();
                   $m_allocation = new Application_Model_EuAllocationCmfhMapper();

                   $souscription = new Application_Model_EuSouscription();
                   $souscription_mapper = new Application_Model_EuSouscriptionMapper();
               
                   $compte_map = new Application_Model_EuCompteMapper();
                   $compte  = new Application_Model_EuCompte();
                   $sms_money = new Application_Model_EuSmsmoney();
                   $money_map = new Application_Model_EuSmsmoneyMapper();
      
                   $det_sms   = new Application_Model_EuDetailSmsmoney();
                   $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
      
                   $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                   $det_vtesms  = new Application_Model_EuDetailVentesms();
               
                   $telephone = new Application_Model_EuTelephone();
                   $m_telephone = new Application_Model_EuTelephoneMapper();

                   $date = new Zend_Date(Zend_Date::ISO_8601);

                   $code_agence = $request->getParam("code_agence");
                   $code_autorisation = $request->getParam("code_autorisation");
                   $type_activation = $request->getParam("type_activation");
                   $code_zone = $request->getParam("code_zone");
		   $codesecret =  Util_Utils::genererCodeSMS(8);
		   $membreasso_id = $request->getParam("membreasso_id");

                   $type_bnp  = 'CAPS';
                   $type_caps = 'CAPSFLFCPS';
                   $code_activation  = '';
                   $id_membretiers  = '';
                   $id_allocation   = '';
                   $id_depot = '';
                   $souscription_id = '';
                   $apporteur = '';
                   $reste_allocation = '';

                   $table = new Application_Model_DbTable_EuActeur();
                   $selection = $table->select();
                   $selection->where('code_membre like ?',$code_agence.'%');
                   $selection->where('type_acteur like ?','gac_surveillance');
                   $resultat = $table->fetchAll($selection);
                   $trouvacteursur = $resultat->current();
                   $code_acteur = $trouvacteursur->code_acteur;
                   $acteur =  $code_acteur;
                   $reste = $mont_caps;
				   
				    if($type_activation == "SansListe")  {
				      $i = 0;
                      $lignesallocation = $m_allocation->fetchAllAllocation();
				      if($lignesallocation != false) {
					      $nbre_lignesallocation = count($lignesallocation);
                          $solde_depot = 0;
						  while($solde_depot <= 0 && $i < $nbre_lignesallocation) {
						      $ligneallocation = $lignesallocation[$i];
                              $id_allocation = $ligneallocation->getAllocation_cmfh_id();
                              $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
                              $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
                              $trouvesdvente = $m_dvente->findbycmfh($apporteur);
						      if($trouvesdvente != NULL && $reste_allocation > 0) {
                                 $trouvedvente = $trouvesdvente[0];
                                 $solde_depot = $trouvedvente->getSolde_depot();
                                 $findalloc = $m_allocation->find($id_allocation,$allocation);
                                 $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
                                 $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
                                 $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                                 $m_allocation->update($allocation);
                              }
						      $i++;
						  }
					 
					  }  else {
					      $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Pas de comptes marchands pour tiers disponible ..."));
						  return;
					  }
				   
				    }  else  {
				        $ligneallocation = $m_allocation->findByCode($code_autorisation);
				        if($ligneallocation != NULL) {
					       $id_allocation = $ligneallocation->getAllocation_cmfh_id();
                           $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
                           $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
                           $findalloc = $m_allocation->find($id_allocation,$allocation);
                           if($reste_allocation == 0) {
						      $db->rollback();
                              $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Cette clé d'autorisation octroyée au CMFH ne dispose pas de comptes marchands pour tiers ..."));
					          return;
						   }
						   
						   $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
                           $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
                           $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                           $m_allocation->update($allocation);
					   
					   } else {
					      $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Cette clé d'autorisation est mal renseignée ou n'est pas active.Veuillez verifier votre saisie ..."));
					      return;
					   }
				   
				   }
				   
				   $lignesdvente = $m_dvente->findbycmfh($apporteur);
                   $nbre_lignesdvente = count($lignesdvente);
                   $reste = $mont_caps;
				   
				   if($lignesdvente != NULL) {
				       $lignedvente = $lignesdvente[0];
                       $id_depot = $lignedvente->getId_depot();
                       $souscription_id = $lignedvente->getSouscription_id();
                       $finddepotvente = $m_dvente->find($id_depot,$dvente);
                       $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
                       $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                       $m_dvente->update($lignedvente);
                       $findCodesBySous = $m_membretiers->findBySouscription($souscription_id);   
				       if($findCodesBySous != NULL)  {
					      $findCodeBySous = $findCodesBySous[0];
                          $id_membretiers = $findCodeBySous->getMembretierscode_id();
                          $code_activation = $findCodeBySous->getMembretierscode_code();
					   } else {
					      $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ...."));
						  return;
					   }
					   
				    } else {
				      $db->rollback();
					  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ..."));
				      return;
				    }
				   
				    $count = $mapper->findConuter() + 1;
                    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;

                    //$place->setId_operation($count)
                    $place->setDate_op($date->toString('yyyy-MM-dd'))
                          ->setHeure_op($date->toString('HH:mm:ss'))
                          ->setId_utilisateur(null);

                    if(substr($apporteur,19,1)=='P') {
                        $place->setCode_membre($apporteur)
                           ->setCode_membre_morale(null);
                    } else  {
                        $place->setCode_membre(null)
                           ->setCode_membre_morale($apporteur);
                    }

                    $place->setMontant_op($mont_caps)
                         ->setCode_produit('CAPS')
                         ->setLib_op('Enrolement')
                         ->setType_op($type_bnp)
                         ->setCode_cat('TCAPS');
                    $mapper->save($place);
					$count = $db->lastInsertId();
				   
				    $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
				    $code = $m_map->getLastCodeMembreByAgence($code_agence);
                    if($code == null) {
                      $code = $code_agence . '0000001' . 'P';
                    } else {
                      $num_ordre = substr($code, 12, 7);
                      $num_ordre++;
                      $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                      $code = $code_agence . $num_ordre_bis . 'P';
                    }
				   
				    $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
				   
				    if($date_nais >= $date_idd) {
				        $db->rollback();
			            $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "La date de naissance doit etre antérieure à la date actuelle !!!"));
				        return;
				    }
				   
				   /////////////////controle nom prenom
                   $eupreinscription = new Application_Model_DbTable_EuMembre();
                   $select = $eupreinscription->select();
                   $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));

                   $tabprenom = explode(" ",$request->getParam("prenom_membre"));
                   foreach($tabprenom as $value) {
                     $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                   }
                   $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
                   $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                   $select->limit(1);
                   $rowseupreinscription = $eupreinscription->fetchRow($select);
				   
				    if(count($rowseupreinscription) > 0) {
				      $db->rollback();
			          $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Vous êtes déjà membre !!!"));
				      return;
				    }
				   
				    $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                    //$compteur_preinscription = $preinsc_mapper->findConuter() + 1;

                    $preinscription = new Application_Model_EuPreinscription();
                    $mapper_preins = new Application_Model_EuPreinscriptionMapper();

                    //$preinscription->setId_preinscription($compteur_preinscription)
                    $preinscription->setNom_membre($request->getParam("nom_membre"))
                                   ->setCode_agence($code_agence)
                                   ->setPrenom_membre($request->getParam("prenom_membre"))
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("id_pays"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre(null)
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"))
                                   ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                   ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_membre(null)
                                   ->setCode_fs(null)
                                   ->setCode_fl(null)
                                   ->setCode_fkps(null)
                                   ->setId_canton($request->getParam("id_canton"));
                    $preinscription->setPublier(1);
                    $mapper_preins->save($preinscription);
				    $compteur_preinscription = $db->lastInsertId();
					  
					  ////// validation acnev ///////////////////////////////////////
                      $validation_quittance = new Application_Model_EuValidationQuittance();
                      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                      $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $validation_quittance->setPublier(1);
                      $validation_quittance_mapper->save($validation_quittance);


                      ////// validation filere ///////////////////////////////////
                      $preinscription = new Application_Model_EuPreinscription();
                      $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                      $preinscriptionM->find($compteur_preinscription, $preinscription);

                      $preinscription->setPublier(2);
                      $preinscriptionM->update($preinscription);

                      $validation_quittance = new Application_Model_EuValidationQuittance();
                      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                      $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $validation_quittance->setPublier(1);
                      $validation_quittance_mapper->save($validation_quittance);

                      ////// validation technopole ///////////////////////////////////////////////////////////////
                      $preinscription = new Application_Model_EuPreinscription();
                      $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                      $preinscriptionM->find($compteur_preinscription, $preinscription);

                      $preinscription->setPublier(3);
                      $preinscriptionM->update($preinscription);


                      $validation_quittance = new Application_Model_EuValidationQuittance();
                      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                      $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $validation_quittance->setPublier(1);
                      $validation_quittance_mapper->save($validation_quittance);
					  
					  
					  //insertion dans la table eu_membre
                      $membre->setCode_membre($code)
                             ->setNom_membre($request->getParam("nom_membre"))
                             ->setPrenom_membre($request->getParam("prenom_membre"))
                             ->setSexe_membre($request->getParam("sexe_membre"))
                             ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                             ->setId_pays($request->getParam("nationalite_membre"))
                             ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                             ->setPere_membre($request->getParam("pere_membre"))
                             ->setMere_membre($request->getParam("mere_membre"))
                             ->setSitfam_membre($request->getParam("sitfam_membre"))
                             ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                             ->setProfession_membre($request->getParam("profession_membre"))
                             ->setFormation($request->getParam("formation"))
                             ->setId_religion_membre($request->getParam("religion_membre"))
                             ->setQuartier_membre($request->getParam("quartier_membre"))
                             ->setVille_membre($request->getParam("ville_membre"))
                             ->setBp_membre($request->getParam("bp_membre"))
                             ->setTel_membre(null)
                             ->setEmail_membre($request->getParam("email_membre"))
                             ->setPortable_membre(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"))
                             ->setId_utilisateur(null)
                             ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                             ->setDate_identification($date_idd->toString('yyyy-MM-dd'))
                             ->setCode_agence($code_agence)
                             ->setId_maison(null)
                             ->setCodesecret(md5($request->getParam("codesecret")))
                             ->setEtat_membre('N')
                             ->setCode_gac($acteur)
                             ->setAuto_enroler('N')
                             ->setId_canton($request->getParam("id_canton"));
                        $m_map->save($membre);
						 
						////////////////////////////////////////////////////////////////////////////////
                         $preinscription = new Application_Model_EuPreinscription();
                         $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                         $preinscriptionM->find($compteur_preinscription, $preinscription);

                         $preinscription->setCode_membre($code);
                         $preinscriptionM->update($preinscription);

                         $findmembretiers = $m_membretiers->find($id_membretiers,$membretiers);
                         if($findmembretiers) {
                            $membretiers->setCode_membre($code)
                                        ->setPublier(1)
                                        ->setAllocation_cmfh_id($id_allocation);
                            $m_membretiers->update($membretiers);
                         }
						 
						 // insertion dans la table eu_activation
                         //$id_activation = $m_activation->findConuter() + 1;
                         //$activation->setId_activation($id_activation)
						 
                        $activation->setId_depot($id_depot)
                                    ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
                                    ->setCode_activation($code_activation)
                                    ->setCode_membre($code)
                                    ->setMembreasso_id($membreasso_id);
                        $m_activation->save($activation);
						  
						for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
						    $compagnie = telephonecompagnie($request->getParam("code_telephonique"),$request->getParam("numero_telephone"));
                            $numero_telephone = intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone");
						    if($compagnie == 1)  {
							   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez bien saisir le numero de telephone, le nombre de chiffre n'est pas correct. !!!"));
							   $db->rollback();
							   return;
							} else {
                               $date_id = new Zend_Date(Zend_Date::ISO_8601);
                               $telephone = new Application_Model_EuTelephone();
                               $m_telephone = new Application_Model_EuTelephoneMapper();
               
                               //$compteur = $m_telephone->findConuter() + 1;
                               //$telephone->setId_telephone($compteur);
							   
                               $telephone->setNumero_telephone($numero_telephone);
                               $telephone->setCompagnie_telephone($compagnie);
                               $telephone->setCode_membre($code);
                               $m_telephone->save($telephone);
                            }
						}
						 
						 $findsmsmoney = $money_map->findBySouscription($souscription_id);
                         $souscription_mapper->find($souscription_id,$souscription);
                         $montcaps = Util_Utils::getParametre('CAPS','valeur');
                         $membre_pbf = '0000000000000000001M';
                         $code_compte_pbf = "NN-TR-".$membre_pbf;
                         $ret = $compte_map->find($code_compte_pbf,$compte);
            
                         $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
                         $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
            
                         if($findsmsmoney == NULL && $souscription->souscription_type == 'BAn') {
						    if($lignesdetfcaps != null) {
							    //$nengfcaps = $money_map->findConuter() + 1;
                                //$sms_money->setNEng($nengfcaps)
								
                                $sms_money->setCode_Agence(null)
                                             ->setCreditAmount($montcaps)
                                             ->setSentTo($souscription->souscription_mobile)
                                             ->setMotif('CAPS')
                                             ->setId_Utilisateur(null)
                                             ->setCurrencyCode('XOF')
                                             ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                             ->setFromAccount($code_compte_pbf)
                                             ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                             ->setCreditCode($code_activation)
                                             ->setDestAccount(null)
                                             ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                             ->setDestAccount_Consumed($souscription_id)
                                             ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                             ->setNum_recu(null);
                                $money_map->save($sms_money);
									
									// Mise à jour du compte de transfert
                                    if($ret && ($cumulfcaps >= $montcaps)) {
                                       // Mise à jour du compte de transfert
                                       $compte->setSolde($compte->getSolde() - $montcaps);
                                       $compte_map->update($compte);    
                                    } else {
									   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant"));
							           $db->rollback();
							           return;
									}
									
									$l = 0;
                                    $reste = $montcaps;
                                    $nbre_lignesdetfcaps = count($lignesdetfcaps);
							        while($reste > 0 && $l < $nbre_lignesdetfcaps) {
									    $lignedetfcaps = $lignesdetfcaps[$l];
                                        $id = $lignedetfcaps->getId_detail_smsmoney();
                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
									    if($reste >= $lignedetfcaps->getSolde_sms()) {
                                            //Mise à jour  des lignes d'enrégistrement
                                            $reste = $reste - $lignedetfcaps->getSolde_sms();
                                            //insertion dans la table eu_detailventesms
                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
											
                                            $det_vtesms->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('CAPS')
                                                     ->setCreditcode($code_activation)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('CAPS');
                                            $det_vte_sms->insert($det_vtesms->toArray());
                              
                                            $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
                                                          ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
                                                          ->setSolde_sms(0);
                                            $det_sms_m->update($lignedetfcaps);
                         
                                        } else {
                                            //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
											
                                            $det_vtesms->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('CAPS')
                                                       ->setCreditcode($code_activation)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('CAPS');
                                             $det_vte_sms->insert($det_vtesms->toArray());
                              
                                             $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
                                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
                                             $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                             $det_sms_m->update($lignedetfcaps);
                                             $reste = 0;
                                          }
									   $l++;
									}
							 } else   {
							    $db->rollback();
								$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le solde du compte de transfert est vide"));
							    return;
							 }
						 
						 }
						 
						 $userin = new Application_Model_EuUtilisateur();
                         $mapper_user = new Application_Model_EuUtilisateurMapper();

                        //insertion dans la table eu_utilisateur
                        //$id_user = $mapper_user->findConuter() + 1;
                        //$userin->setId_utilisateur($id_user)
						
                        $userin->setId_utilisateur_parent(null)
                                ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                ->setNom_utilisateur($request->getParam("nom_membre"))
                                ->setLogin($code)
                                ->setPwd(md5($request->getParam("codesecret")))
                                ->setDescription(null)
                                ->setUlock(0)
                                ->setCh_pwd_flog(0)
                                ->setCode_groupe('personne_physique')
                                ->setCode_groupe_create('personne_physique')
                                ->setConnecte(0)
                                ->setCode_agence($code_agence)
                                ->setCode_secteur(null)
                                ->setCode_zone($code_zone)
                               //->setCode_gac_filiere(null)
                                ->setId_pays($request->getParam("id_pays"))
                                ->setId_canton($request->getParam("id_canton"))
                                ->setCode_acteur($acteur)
                                ->setCode_membre($code);
                            $mapper_user->save($userin);

                            //Mise à jour de la table eu_contrat
                            $contrat = new Application_Model_EuContrat();
                            $mapper_contrat = new Application_Model_EuContratMapper();
                            //$id_contrat = $mapper_contrat->findConuter() + 1;
                            //$contrat->setId_contrat($id_contrat);
                            $contrat->setCode_membre($code);
                            $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                            $contrat->setNature_contrat('numeraire');
                            $contrat->setId_type_contrat(null);
                            $contrat->setId_type_creneau(null);
                            $contrat->setId_type_acteur(null);
                            $contrat->setId_pays(null);
                            $contrat->setId_utilisateur(null);
                            $contrat->setFiliere(null);
                            $mapper_contrat->save($contrat);
							
							
							//insertion dans la table eu_compte_bancaire
                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
			                    if($_POST['code_banque'][$i] != "") {
                                  $cb_compteur = $cb_mapper->findConuter() + 1;
                                  $cb->setCode_banque($_POST['code_banque'][$i])
                                     ->setId_compte($cb_compteur)
                                     ->setCode_membre($code)
                                     ->setCode_membre_morale(NULL)
                                     ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                  $cb_mapper->save($cb);
						        }	
                             }
							 
							 // insertion dans eu_fs
                             $tab_fs = new Application_Model_DbTable_EuFs();
                             $fs_model = new Application_Model_EuFs();
                            $fs_model->setCode_membre($code)
                                      ->setCode_membre_morale(null)
                                      ->setCode_fs('FS-' . $code)
                                      ->setCreditcode($code_activation)
                                      ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                      ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                      ->setId_utilisateur(null)
                                      ->setMont_fs($fs)
                                      ->setOrigine_fs('N');
                            $tab_fs->insert($fs_model->toArray());
							  
							  
							//insertion des frais d'identification dans la table operation
                            $mapper_op = new Application_Model_EuOperationMapper();
                            $compteur = $mapper_op->findConuter() + 1;
                            $lib_op = 'Enrolement';
                            $type_op = 'ERL';
							
                            //Util_Utils::addOperation($compteur,$code,null,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'),null);

							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($fs);
                            $place->setCode_produit('FS');
                            $place->setLib_op($lib_op);
                            $place->setType_op($type_op);
                            $place->setCode_cat('TFS');
                            $mapper_op->save($place);
							
							
                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $compte = new Application_Model_EuCompte();
                            $map_compte = new Application_Model_EuCompteMapper();

                            $id_caps = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
                            $caps->setCode_caps($id_caps)
                                 ->setCode_membre_benef($code)
                                 ->setMont_caps($mont_caps)
                                 ->setMont_fs(0)
                                 ->setPeriode(0)
                                 ->setId_operation($count)
                                 ->setRembourser('N')
                                 ->setId_credit(null)
                                 ->setIndexer(1)
                                 ->setType_caps($type_caps)
                                 ->setCode_type_bnp($type_bnp)
                                 ->setFs_utiliser(1)
                                 ->setFl_utiliser(1)
                                 ->setCps_utiliser(1)
                                 ->setMont_panu_fs(0)
                                 ->setReconst_fs(0)
                                 ->setPanu(0)
                                 ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                                 ->setId_utilisateur(null);

                            if(substr($apporteur,19,1)=='P') {
                                $caps->setCode_membre_app($apporteur)
                                     ->setCode_membre_morale_app(null);
                            } else  {
                                $caps->setCode_membre_app(null)
                                     ->setCode_membre_morale_app($apporteur);
                            }
                            $m_caps->save($caps);

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $mapper_op = new Application_Model_EuOperationMapper();
                            $compteur = $mapper_op->findConuter() + 1;

                            // insertion dans la table eu_operation
                            //Util_Utils::addOperation($compteur,$code,null,null,$mont_fl,null,'Frais de licences','FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_fl);
                            $place->setCode_produit('FL');
                            $place->setLib_op('Frais de licences');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
							
							
                            // insertion dans la table eu_fl
                            $fl->setCode_fl("FL-".$code)
                                ->setCode_membre($code)
                                ->setCode_membre_morale(null)
                                ->setMont_fl($mont_fl)
                                ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                                ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                                ->setId_utilisateur(null)
                                ->setCreditcode($code_activation)
                                ->setOrigine_fl('N');
                            $tfl->insert($fl->toArray());
							  
							  $tcartes[0]="TPAGCRPG";
            $tcartes[1]="TCNCS";
            $tcartes[2]="TPaNu";
            $tcartes[3]="TPaR";
            $tcartes[4]="TR";
            $tcartes[5]="CAPA";

            $tscartes[0]="TSRPG";
            $tscartes[1]="TSCNCS";
            $tscartes[2]="TSPaNu";
            $tscartes[3]="TSPaR";
            $tscartes[4]="TSCAPA";

            for($i = 0; $i < count($tcartes); $i++) {
               if($tcartes[$i] == "TCNCS") {
                 $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                 $type_carte = 'NR';
                 $res = $map_compte->find($code_compte,$compte);
               } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                 $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                 $type_carte = 'NN';
                 $res = $map_compte->find($code_compte,$compte);
               } else {
                 $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                 $type_carte = 'NB';
                 $res = $map_compte->find($code_compte,$compte);
               }
			   
               if(!$res) {
                 //insertion dans la table eu_compte
                 $compte->setCode_cat($tcartes[$i])
                        ->setCode_compte($code_compte)
                        ->setCode_membre($code)
                        ->setCode_membre_morale(null)
                        ->setCode_type_compte($type_carte)
                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                        ->setDesactiver(0)
                        ->setLib_compte($tcartes[$i])
                        ->setSolde(0);
                  $map_compte->save($compte);

               }
            }

            for($j = 0; $j < count($tscartes); $j++) {
              if($tscartes[$j] == "TSCNCS") {
                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NR';
                $res = $map_compte->find($code_comptets,$compte);
              } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NN';
                $res = $map_compte->find($code_comptets,$compte);
              } else  {
                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NB';
                $res = $map_compte->find($code_comptets,$compte);
              }

                if(!$res) {
                    //insertion dans la table eu_compte
                    $compte->setCode_cat($tscartes[$j])
                           ->setCode_compte($code_comptets)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(null)
                           ->setCode_type_compte($type_carte)
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte($tscartes[$j])
                           ->setSolde(0);
                      $map_compte->save($compte);

                  }
            }
			
			//Mise e jour du compte general fgfn
            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
            $cg_fgfn = new Application_Model_EuCompteGeneral();
            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
            if($result3) {
              $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
              $cg_mapper->update($cg_fgfn);
            } else {
              $cg_fgfn->setCode_compte('FL')
                      ->setIntitule('Frais de licence')
                      ->setService('E')
                      ->setCode_type_compte('NN')
                      ->setSolde($mont_fl);
               $cg_mapper->save($cg_fgfn);
            }

            //insertion dans la table eu_carte
            //$id_demande = $carte->findConuter() + 1;
            //$carte->setId_demande($id_demande)
            $carte->setCode_cat(null)
                  ->setCode_membre($code)
                  ->setMont_carte($fkps)
                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                  ->setLivrer(0)
                  ->setCode_Compte(null)
                  ->setImprimer(0)
                  ->setCardPrintedDate('')
                  ->setCardPrintedIDDate(0)
                  ->setId_utilisateur(null);
            $t_carte->insert($carte->toArray());
			 
			$mapper_op = new Application_Model_EuOperationMapper();
            $countop = $mapper_op->findConuter() + 1;
            //Util_Utils::addOperation($countop,$code,null,null,$fkps,null,'Frais de CPS','CPS',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

			$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
            $place->setId_utilisateur(null);
            $place->setCode_membre($code);
            $place->setCode_membre_morale(null);
            $place->setMontant_op($fkps);
            $place->setCode_produit('CPS');
            $place->setLib_op('Frais de CPS');
            $place->setType_op(null);
            $place->setCode_cat(null);
            $mapper_op->save($place);
			 
			 
			 
			 
			if($membreasso_id != 1) {
        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
        $m_souscription->find($souscription_id, $souscription);
        
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $m_membreasso->find($membreasso_id, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($membreasso->membreasso_association, $association);
        $code_agence = $association->code_agence;

if($souscription->souscription_date <= '2018-01-31'){

        if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }

}else{

  if($association->guichet == 1){
        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(480);
           } else {
             $partagea_montant = floor(480);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(480);
             } else {
               $partagea_montant = floor(480);
             }
        }

  }else{

        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
           if($souscription->souscription_programme == "KACM") {
              $partagea_montant = floor(109);
           } else {
             $partagea_montant = floor(109);
           }

        } else {
             if($souscription->souscription_programme == "KACM") {
               $partagea_montant = floor(109);
             } else {
               $partagea_montant = floor(109);
             }
        }

  }


}


//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            //$partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($souscription->souscription_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea->setPartagea_activation($m_activation->findConuter());
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            //$partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($souscription->souscription_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem->setPartagem_activation($m_activation->findConuter());
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}
			 
            $compt1 = Util_Utils::findConuter() + 1;
            Util_Utils::addSms2new(intval($request->getParam("code_telephonique")).$request->getParam("numero_telephone"),"Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);
            $this->view->error = Zend_Json::encode(
             	array(
             		'resultat' => "1", 
             		'message' => "Ouverture de compte marchand bien effectuee ...<br /><br />
             		Code Membre (Login) : <strong>".$code."</strong><br /> 
             		Code Secret (Mot de passe) : <strong>".$codesecret."</strong>",
	                        	'code_membre' => $code, 
	                        	'code_secret' => $codesecret, 
	                        	'certificat' => Util_Utils::genererPdfCertificatPP($code) 
             	)
            );
			$db->commit();
			return;	   
		  } catch (Exception $exc) {
			  $db->rollback();
			  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur Systeme !!!"));
			  return;
	      }
        }
	  
       }
    }



   
   
   public  function activationcapsprisAction() {
      $this->_helper->layout->disableLayout();
      $request = $this->getRequest();
	  if($request->isPost()) {
         if($request->getParam("nom_membre") != "" && $request->getParam("prenom_membre") != ""
		    && $request->getParam("sexe_membre") != "" && $request->getParam("nationalite_membre") != ""
		    && $request->getParam("sitfam_membre") != "" && $request->getParam("date_nais_membre") != ""
		    && $request->getParam("lieu_nais_membre") != "" && $request->getParam("nbr_enf_membre") != ""
		    && $request->getParam("quartier_membre") != "" && $request->getParam("ville_membre") != ""
		    && $request->getParam("profession_membre") != "" && $request->getParam("religion_membre") != ""
		    && $request->getParam("id_pays") != "" && $request->getParam("code_agence") != "") {
   
               $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction();
               try {
			       $mont_caps = Util_Utils::getParametre('CAPS','valeur');
                   $fs = Util_Utils::getParametre('FS','valeur');
                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                   $fkps = Util_Utils::getParametre('FKPS','valeur');

                   $id_utilisateur_acnev = 1;
                   $id_utilisateur_filiere = 2;
                   $id_utilisateur_technopole = 3;

                   $place = new Application_Model_EuOperation();
                   $mapper = new Application_Model_EuOperationMapper();
                   $membre   = new Application_Model_EuMembre();
                   $m_map    = new Application_Model_EuMembreMapper();
                   $membremoral = new Application_Model_EuMembreMorale();
                   $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                   $m_caps   = new Application_Model_EuCapsMapper();
                   $caps     = new Application_Model_EuCaps();
                   $dvente   = new Application_Model_EuDepotVente();
                   $m_dvente = new Application_Model_EuDepotVenteMapper();

                   $activation   = new Application_Model_EuActivation();
                   $m_activation = new Application_Model_EuActivationMapper();
                   $membretiers = new Application_Model_EuMembretierscode();
                   $m_membretiers = new Application_Model_EuMembretierscodeMapper();

                   $allocation = new Application_Model_EuAllocationCmfh();
                   $m_allocation = new Application_Model_EuAllocationCmfhMapper();

                   $souscription = new Application_Model_EuSouscription();
                   $souscription_mapper = new Application_Model_EuSouscriptionMapper();
               
                   $compte_map = new Application_Model_EuCompteMapper();
                   $compte  = new Application_Model_EuCompte();
                   $sms_money = new Application_Model_EuSmsmoney();
                   $money_map = new Application_Model_EuSmsmoneyMapper();
      
                   $det_sms   = new Application_Model_EuDetailSmsmoney();
                   $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
      
                   $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                   $det_vtesms  = new Application_Model_EuDetailVentesms();
               
                   $telephone = new Application_Model_EuTelephone();
                   $m_telephone = new Application_Model_EuTelephoneMapper();

                   $date = new Zend_Date(Zend_Date::ISO_8601);

                   $code_agence = $request->getParam("code_agence");
                   $code_autorisation = $request->getParam("code_autorisation");
                   $type_activation = $request->getParam("type_activation");
                   $code_zone = $request->getParam("code_zone");
				   $codesecret = $request->getParam("codesecret");

                   $type_bnp  = 'CAPS';
                   $type_caps = 'CAPSFLFCPS';
                   $code_activation  = '';
                   $id_membretiers  = '';
                   $id_allocation   = '';
                   $id_depot = '';
                   $souscription_id = '';
                   $apporteur = '';
                   $reste_allocation = '';

                   $table = new Application_Model_DbTable_EuActeur();
                   $selection = $table->select();
                   $selection->where('code_membre like ?',$code_agence.'%');
                   $selection->where('type_acteur like ?','gac_surveillance');
                   $resultat = $table->fetchAll($selection);
                   $trouvacteursur = $resultat->current();
                   $code_acteur = $trouvacteursur->code_acteur;
                   $acteur =  $code_acteur;
                   $reste = $mont_caps;
				   
				   if($type_activation == "SansListe")  {
				      $i = 0;
                      $lignesallocation = $m_allocation->fetchAllAllocation();
				      if($lignesallocation != false) {
					      $nbre_lignesallocation = count($lignesallocation);
                          $solde_depot = 0;
						  while($solde_depot <= 0 && $i < $nbre_lignesallocation) {
						      $ligneallocation = $lignesallocation[$i];
                              $id_allocation = $ligneallocation->getAllocation_cmfh_id();
                              $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
                              $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
                              $trouvesdvente = $m_dvente->findbycmfh($apporteur);
						      if($trouvesdvente != NULL && $reste_allocation > 0) {
                                 $trouvedvente = $trouvesdvente[0];
                                 $solde_depot = $trouvedvente->getSolde_depot();
                                 $findalloc = $m_allocation->find($id_allocation,$allocation);
                                 $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
                                 $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
                                 $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                                 $m_allocation->update($allocation);
                              }
						      $i++;
						  }
					 
					  }  else {
					      $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Pas de comptes marchands pour tiers disponible ..."));
						  return;
					  }
				   
				   }  else  {
				       $ligneallocation = $m_allocation->findByCode($code_autorisation);
				       if($ligneallocation != NULL) {
					       $id_allocation = $ligneallocation->getAllocation_cmfh_id();
                           $reste_allocation = $ligneallocation->getAllocation_cmfh_nombre_solde();
                           $apporteur = $ligneallocation->getAllocation_cmfh_code_membre_cmfh();
                           $findalloc = $m_allocation->find($id_allocation,$allocation);
                           if($reste_allocation == 0) {
						      $db->rollback();
                              $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Cette clé d'autorisation octroyée au CMFH ne dispose pas de comptes marchands pour tiers ..."));
					          return;
						   }
						   
						   $allocation->setAllocation_cmfh_montant_utilise($allocation->getAllocation_cmfh_montant_utilise() + $reste);
                           $allocation->setAllocation_cmfh_nombre_utilise($allocation->getAllocation_cmfh_nombre_utilise() + 1);
                           $allocation->setAllocation_cmfh_nombre_solde($allocation->getAllocation_cmfh_nombre_solde() - 1);
                           $m_allocation->update($allocation);
					   
					   } else {
					      $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Cette clé d'autorisation est mal renseignée ou n'est pas active.Veuillez verifier votre saisie ..."));
					      return;
					   }
				   
				   }
				   
				   $lignesdvente = $m_dvente->findbycmfh($apporteur);
                   $nbre_lignesdvente = count($lignesdvente);
                   $reste = $mont_caps;
				   
				   if($lignesdvente != NULL) {
				       $lignedvente = $lignesdvente[0];
                       $id_depot = $lignedvente->getId_depot();
                       $souscription_id = $lignedvente->getSouscription_id();
                       $finddepotvente = $m_dvente->find($id_depot,$dvente);
                       $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
                       $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                       $m_dvente->update($lignedvente);
                       $findCodesBySous = $m_membretiers->findBySouscription($souscription_id);   
				       if($findCodesBySous != NULL)  {
					      $findCodeBySous = $findCodesBySous[0];
                          $id_membretiers = $findCodeBySous->getMembretierscode_id();
                          $code_activation = $findCodeBySous->getMembretierscode_code();
					   } else {
					      $db->rollback();
						  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ...."));
						  return;
					   }
					   
				   } else {
				      $db->rollback();
					  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le  membre CMFH ne dispose pas de comptes marchands pour tiers ..."));
				      return;
				   }
				   
				   $count = $mapper->findConuter() + 1;
                   $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                   $date_deb = clone $date_fin;

                   $place->setId_operation($count)
                         ->setDate_op($date->toString('yyyy-MM-dd'))
                         ->setHeure_op($date->toString('HH:mm:ss'))
                         ->setId_utilisateur(null);

                   if(substr($apporteur,19,1)=='P') {
                     $place->setCode_membre($apporteur)
                           ->setCode_membre_morale(null);
                   } else  {
                     $place->setCode_membre(null)
                           ->setCode_membre_morale($apporteur);
                   }

                   $place->setMontant_op($mont_caps)
                         ->setCode_produit('CAPS')
                         ->setLib_op('Enrolement')
                         ->setType_op($type_bnp)
                         ->setCode_cat('TCAPS');
                   $mapper->save($place);
				   
				   $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
				   $code = $m_map->getLastCodeMembreByAgence($code_agence);
                   if($code == null) {
                      $code = $code_agence . '0000001' . 'P';
                   } else {
                      $num_ordre = substr($code, 12, 7);
                      $num_ordre++;
                      $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                      $code = $code_agence . $num_ordre_bis . 'P';
                   }
				   
				   $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                   $date_idd = clone $date_id;
				   
				   if($date_nais >= $date_idd) {
				     $db->rollback();
			         $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "La date de naissance doit etre antérieure à la date actuelle !!!"));
				     return;
				   }
				   
				   /////////////////controle nom prenom
                   $eupreinscription = new Application_Model_DbTable_EuMembre();
                   $select = $eupreinscription->select();
                   $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));

                   $tabprenom = explode(" ",$request->getParam("prenom_membre"));
                   foreach($tabprenom as $value) {
                     $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                   }
                   $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
                   $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                   $select->limit(1);
                   $rowseupreinscription = $eupreinscription->fetchRow($select);
				   
				   if(count($rowseupreinscription) > 0) {
				      $db->rollback();
			          $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Vous êtes déjà membre !!!"));
				      return;
				   }
				   
				   $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                   $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

                   $preinscription = new Application_Model_EuPreinscription();
                   $mapper = new Application_Model_EuPreinscriptionMapper();

                   $preinscription->setId_preinscription($compteur_preinscription)
                                  ->setNom_membre($request->getParam("nom_membre"))
                                  ->setCode_agence($code_agence)
                                  ->setPrenom_membre($request->getParam("prenom_membre"))
                                  ->setSexe_membre($request->getParam("sexe_membre"))
                                  ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                  ->setId_pays($request->getParam("id_pays"))
                                  ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                  ->setPere_membre($request->getParam("pere_membre"))
                                  ->setMere_membre($request->getParam("mere_membre"))
                                  ->setSitfam_membre($request->getParam("sitfam_membre"))
                                  ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                  ->setProfession_membre($request->getParam("profession_membre"))
                                  ->setFormation($request->getParam("formation"))
                                  ->setId_religion_membre($request->getParam("religion_membre"))
                                  ->setQuartier_membre($request->getParam("quartier_membre"))
                                  ->setVille_membre($request->getParam("ville_membre"))
                                  ->setBp_membre($request->getParam("bp_membre"))
                                  ->setTel_membre(null)
                                  ->setEmail_membre($request->getParam("email_membre"))
                                  ->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
                                  ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                  ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                  ->setCode_membre(null)
                                  ->setCode_fs(null)
                                  ->setCode_fl(null)
                                  ->setCode_fkps(null)
                                  ->setId_canton($request->getParam("id_canton"));
                      $preinscription->setPublier(1);

                      $mapper->save($preinscription);
					  
					  ////// validation acnev ///////////////////////////////////////
                      $validation_quittance = new Application_Model_EuValidationQuittance();
                      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                      $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $validation_quittance->setPublier(1);
                      $validation_quittance_mapper->save($validation_quittance);


                      ////// validation filere ///////////////////////////////////
                      $preinscription = new Application_Model_EuPreinscription();
                      $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                      $preinscriptionM->find($compteur_preinscription, $preinscription);

                      $preinscription->setPublier(2);
                      $preinscriptionM->update($preinscription);

                      $validation_quittance = new Application_Model_EuValidationQuittance();
                      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                      $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $validation_quittance->setPublier(1);
                      $validation_quittance_mapper->save($validation_quittance);

                      ////// validation technopole ///////////////////////////////////////////////////////////////
                      $preinscription = new Application_Model_EuPreinscription();
                      $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                      $preinscriptionM->find($compteur_preinscription, $preinscription);

                      $preinscription->setPublier(3);
                      $preinscriptionM->update($preinscription);


                      $validation_quittance = new Application_Model_EuValidationQuittance();
                      $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                      $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                      $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                      $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                      $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                      $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $validation_quittance->setPublier(1);
                      $validation_quittance_mapper->save($validation_quittance);
					  
					  
					  //insertion dans la table eu_membre
                      $membre->setCode_membre($code)
                             ->setNom_membre($request->getParam("nom_membre"))
                             ->setPrenom_membre($request->getParam("prenom_membre"))
                             ->setSexe_membre($request->getParam("sexe_membre"))
                             ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                             ->setId_pays($request->getParam("nationalite_membre"))
                             ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                             ->setPere_membre($request->getParam("pere_membre"))
                             ->setMere_membre($request->getParam("mere_membre"))
                             ->setSitfam_membre($request->getParam("sitfam_membre"))
                             ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                             ->setProfession_membre($request->getParam("profession_membre"))
                             ->setFormation($request->getParam("formation"))
                             ->setId_religion_membre($request->getParam("religion_membre"))
                             ->setQuartier_membre($request->getParam("quartier_membre"))
                             ->setVille_membre($request->getParam("ville_membre"))
                             ->setBp_membre($request->getParam("bp_membre"))
                             ->setTel_membre(null)
                             ->setEmail_membre($request->getParam("email_membre"))
                             ->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
                             ->setId_utilisateur(null)
                             ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                             ->setDate_identification($date_idd->toString('yyyy-MM-dd'))
                             ->setCode_agence($code_agence)
                             ->setId_maison(null)
                             ->setCodesecret(md5($request->getParam("codesecret")))
                             ->setEtat_membre('N')
                             ->setCode_gac($acteur)
                             ->setAuto_enroler('N')
                             ->setId_canton($request->getParam("id_canton"));
                         $m_map->save($membre);
						 
						 ////////////////////////////////////////////////////////////////////////////////
                         $preinscription = new Application_Model_EuPreinscription();
                         $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                         $preinscriptionM->find($compteur_preinscription, $preinscription);

                         $preinscription->setCode_membre($code);
                         $preinscriptionM->update($preinscription);

                         $findmembretiers = $m_membretiers->find($id_membretiers,$membretiers);
                         if($findmembretiers) {
                            $membretiers->setCode_membre($code)
                                        ->setPublier(1)
                                        ->setAllocation_cmfh_id($id_allocation);
                            $m_membretiers->update($membretiers);
                         }
						 
						 // insertion dans la table eu_activation
                         $id_activation = $m_activation->findConuter() + 1;
                         $activation->setId_activation($id_activation)
                                    ->setId_depot($id_depot)
                                    ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
                                    ->setCode_activation($code_activation)
                                    ->setCode_membre($code)
                                    ->setMembreasso_id($sessionmembreasso->membreasso_id);
                         $m_activation->save($activation);
						  
						 for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
						    $compagnie = telephonecompagnie($_POST['code_telephonique'][$i], $_POST['numero_telephone'][$i]);
                            $numero_telephone = intval($_POST['code_telephonique'][$i]).$_POST['numero_telephone'][$i];
						    if($compagnie == 1)  {
							   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Veuillez bien saisir le numero de telephone, le nombre de chiffre n'est pas correct. !!!"));
							   $db->rollback();
							   return;
							} else {
                               $date_id = new Zend_Date(Zend_Date::ISO_8601);
                               $telephone = new Application_Model_EuTelephone();
                               $m_telephone = new Application_Model_EuTelephoneMapper();
               
                               $compteur = $m_telephone->findConuter() + 1;
                               $telephone->setId_telephone($compteur);
                               $telephone->setNumero_telephone($numero_telephone);
                               $telephone->setCompagnie_telephone($compagnie);
                               $telephone->setCode_membre($code);
                               $m_telephone->save($telephone);
                            }
						 }
						 
						 $findsmsmoney = $money_map->findBySouscription($souscription_id);
                         $souscription_mapper->find($souscription_id,$souscription);
                         $montcaps = Util_Utils::getParametre('CAPS','valeur');
                         $membre_pbf = '0000000000000000001M';
                         $code_compte_pbf = "NN-TR-".$membre_pbf;
                         $ret = $compte_map->find($code_compte_pbf,$compte);
            
                         $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
                         $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
            
                         if($findsmsmoney == NULL && $souscription->souscription_type == 'BAn') {
						     if($lignesdetfcaps != null) {
							      $nengfcaps = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfcaps)
                                             ->setCode_Agence(null)
                                             ->setCreditAmount($montcaps)
                                             ->setSentTo($souscription->souscription_mobile)
                                             ->setMotif('CAPS')
                                             ->setId_Utilisateur(null)
                                             ->setCurrencyCode('XOF')
                                             ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                             ->setFromAccount($code_compte_pbf)
                                             ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                             ->setCreditCode($code_activation)
                                             ->setDestAccount(null)
                                             ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                             ->setDestAccount_Consumed($souscription_id)
                                             ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                             ->setNum_recu(null);
                                    $money_map->save($sms_money);
									
									// Mise à jour du compte de transfert
                                    if($ret && ($cumulfcaps >= $montcaps)) {
                                       // Mise à jour du compte de transfert
                                       $compte->setSolde($compte->getSolde() - $montcaps);
                                       $compte_map->update($compte);    
                                    } else {
									   $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant"));
							           $db->rollback();
							           return;
									}
									
									$l = 0;
                                    $reste = $montcaps;
                                    $nbre_lignesdetfcaps = count($lignesdetfcaps);
							        while($reste > 0 && $l < $nbre_lignesdetfcaps) {
									   $lignedetfcaps = $lignesdetfcaps[$l];
                                       $id = $lignedetfcaps->getId_detail_smsmoney();
                                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
									   if($reste >= $lignedetfcaps->getSolde_sms()) {
                                          //Mise à jour  des lignes d'enrégistrement
                                          $reste = $reste - $lignedetfcaps->getSolde_sms();
                                          //insertion dans la table eu_detailventesms
                                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                     ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('CAPS')
                                                     ->setCreditcode($code_activation)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('CAPS');
                                            $det_vte_sms->insert($det_vtesms->toArray());
                              
                                            $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
                                                          ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
                                                          ->setSolde_sms(0);
                                            $det_sms_m->update($lignedetfcaps);
                         
                                         } else {
                                            //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('CAPS')
                                                       ->setCreditcode($code_activation)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('CAPS');
                                             $det_vte_sms->insert($det_vtesms->toArray());
                              
                                             $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
                                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
                                             $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                             $det_sms_m->update($lignedetfcaps);
                                             $reste = 0;
                                          }
									   $l++;
									}
							 } else   {
							    $db->rollback();
								$this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Le solde du compte de transfert est vide"));
							    return;
							 }
						 
						 }
						 
						 $userin = new Application_Model_EuUtilisateur();
                         $mapper_user = new Application_Model_EuUtilisateurMapper();

                         //insertion dans la table eu_utilisateur
                         $id_user = $mapper_user->findConuter() + 1;
                         $userin->setId_utilisateur($id_user)
                                ->setId_utilisateur_parent(null)
                                ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                ->setNom_utilisateur($request->getParam("nom_membre"))
                                ->setLogin($code)
                                ->setPwd(md5($request->getParam("codesecret")))
                                ->setDescription(null)
                                ->setUlock(0)
                                ->setCh_pwd_flog(0)
                                ->setCode_groupe('personne_physique')
                                ->setCode_groupe_create('personne_physique')
                                ->setConnecte(0)
                                ->setCode_agence($code_agence)
                                ->setCode_secteur(null)
                                ->setCode_zone($code_zone)
                               //->setCode_gac_filiere(null)
                                ->setId_pays($request->getParam("id_pays"))
                                ->setId_canton($request->getParam("id_canton"))
                                ->setCode_acteur($acteur)
                                ->setCode_membre($code);
                            $mapper_user->save($userin);

                            //Mise à jour de la table eu_contrat
                            $contrat = new Application_Model_EuContrat();
                            $mapper_contrat = new Application_Model_EuContratMapper();
                            $id_contrat = $mapper_contrat->findConuter() + 1;
                            $contrat->setId_contrat($id_contrat);
                            $contrat->setCode_membre($code);
                            $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                            $contrat->setNature_contrat('numeraire');
                            $contrat->setId_type_contrat(null);
                            $contrat->setId_type_creneau(null);
                            $contrat->setId_type_acteur(null);
                            $contrat->setId_pays(null);
                            $contrat->setId_utilisateur(null);
                            $contrat->setFiliere(null);
                            $mapper_contrat->save($contrat);
							
							
							//insertion dans la table eu_compte_bancaire
                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
			                    if($_POST['code_banque'][$i] != "") {
                                  $cb_compteur = $cb_mapper->findConuter() + 1;
                                  $cb->setCode_banque($_POST['code_banque'][$i])
                                     ->setId_compte($cb_compteur)
                                     ->setCode_membre($code)
                                     ->setCode_membre_morale(NULL)
                                     ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                  $cb_mapper->save($cb);
						        }	
                             }
							 
							 // insertion dans eu_fs
                             $tab_fs = new Application_Model_DbTable_EuFs();
                             $fs_model = new Application_Model_EuFs();
                             $fs_model->setCode_membre($code)
                                      ->setCode_membre_morale(null)
                                      ->setCode_fs('FS-' . $code)
                                      ->setCreditcode($code_activation)
                                      ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                      ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                      ->setId_utilisateur(null)
                                      ->setMont_fs($fs)
                                      ->setOrigine_fs('N');
                              $tab_fs->insert($fs_model->toArray());
							  
							  
							  //insertion des frais d'identification dans la table operation
                              $mapper_op = new Application_Model_EuOperationMapper();
                              $compteur = $mapper_op->findConuter() + 1;
                              $lib_op = 'Enrôlement';
                              $type_op = 'ERL';
                              Util_Utils::addOperation($compteur,$code,null,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'),null);

                              $carte = new Application_Model_EuCartes();
                              $t_carte = new Application_Model_DbTable_EuCartes();
                              $compte = new Application_Model_EuCompte();
                              $map_compte = new Application_Model_EuCompteMapper();

                              $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
                              $caps->setCode_caps($id)
                                   ->setCode_membre_benef($code)
                                   ->setMont_caps($mont_caps)
                                   ->setMont_fs(0)
                                   ->setPeriode(0)
                                   ->setId_operation($count)
                                   ->setRembourser('N')
                                   ->setId_credit(null)
                                   ->setIndexer(1)
                                   ->setType_caps($type_caps)
                                   ->setCode_type_bnp($type_bnp)
                                   ->setFs_utiliser(1)
                                   ->setFl_utiliser(1)
                                   ->setCps_utiliser(1)
                                   ->setMont_panu_fs(0)
                                   ->setReconst_fs(0)
                                   ->setPanu(0)
                                   ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                                   ->setId_utilisateur(null);

                             if(substr($apporteur,19,1)=='P') {
                                $caps->setCode_membre_app($apporteur)
                                     ->setCode_membre_morale_app(null);
                             } else  {
                                $caps->setCode_membre_app(null)
                                     ->setCode_membre_morale_app($apporteur);
                             }
                             $m_caps->save($caps);

                             $tfl = new Application_Model_DbTable_EuFl();
                             $fl = new Application_Model_EuFl();
                             $mapper_op = new Application_Model_EuOperationMapper();
                             $compteur = $mapper_op->findConuter() + 1;

                             // insertion dans la table eu_operation
                             Util_Utils::addOperation($compteur,$code,null,null,$mont_fl,null,'Frais de licences','FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

                             // insertion dans la table eu_fl
                             $fl->setCode_fl("FL-".$code)
                                ->setCode_membre($code)
                                ->setCode_membre_morale(null)
                                ->setMont_fl($mont_fl)
                                ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                                ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                                ->setId_utilisateur(null)
                                ->setCreditcode($code_activation)
                                ->setOrigine_fl('N');
                              $tfl->insert($fl->toArray());
							  
							  $tcartes[0]="TPAGCRPG";
            $tcartes[1]="TCNCS";
            $tcartes[2]="TPaNu";
            $tcartes[3]="TPaR";
            $tcartes[4]="TR";
            $tcartes[5]="CAPA";

            $tscartes[0]="TSRPG";
            $tscartes[1]="TSCNCS";
            $tscartes[2]="TSPaNu";
            $tscartes[3]="TSPaR";
            $tscartes[4]="TSCAPA";

            for($i = 0; $i < count($tcartes); $i++) {
               if($tcartes[$i] == "TCNCS") {
                 $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                 $type_carte = 'NR';
                 $res = $map_compte->find($code_compte,$compte);
               } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                 $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                 $type_carte = 'NN';
                 $res = $map_compte->find($code_compte,$compte);
               } else {
                 $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                 $type_carte = 'NB';
                 $res = $map_compte->find($code_compte,$compte);
               }
			   
               if(!$res) {
                 //insertion dans la table eu_compte
                 $compte->setCode_cat($tcartes[$i])
                        ->setCode_compte($code_compte)
                        ->setCode_membre($code)
                        ->setCode_membre_morale(null)
                        ->setCode_type_compte($type_carte)
                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                        ->setDesactiver(0)
                        ->setLib_compte($tcartes[$i])
                        ->setSolde(0);
                  $map_compte->save($compte);

               }
            }

            for($j = 0; $j < count($tscartes); $j++) {
              if($tscartes[$j] == "TSCNCS") {
                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NR';
                $res = $map_compte->find($code_comptets,$compte);
              } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NN';
                $res = $map_compte->find($code_comptets,$compte);
              } else  {
                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                $type_carte = 'NB';
                $res = $map_compte->find($code_comptets,$compte);
              }

                if(!$res) {
                    //insertion dans la table eu_compte
                    $compte->setCode_cat($tscartes[$j])
                           ->setCode_compte($code_comptets)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(null)
                           ->setCode_type_compte($type_carte)
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte($tscartes[$j])
                           ->setSolde(0);
                      $map_compte->save($compte);

                  }
            }
			
			//Mise e jour du compte general fgfn
            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
            $cg_fgfn = new Application_Model_EuCompteGeneral();
            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
            if($result3) {
              $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
              $cg_mapper->update($cg_fgfn);
            } else {
              $cg_fgfn->setCode_compte('FL')
                      ->setIntitule('Frais de licence')
                      ->setService('E')
                      ->setCode_type_compte('NN')
                      ->setSolde($mont_fl);
               $cg_mapper->save($cg_fgfn);
            }

            //insertion dans la table eu_carte
            $id_demande = $carte->findConuter() + 1;
            $carte->setId_demande($id_demande)
                  ->setCode_cat(null)
                  ->setCode_membre($code)
                  ->setMont_carte($fkps)
                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                  ->setLivrer(0)
                  ->setCode_Compte(null)
                  ->setImprimer(0)
                  ->setCardPrintedDate('')
                  ->setCardPrintedIDDate(0)
                  ->setId_utilisateur(null);
             $t_carte->insert($carte->toArray());
			 
			 $mapper_op = new Application_Model_EuOperationMapper();
             $countop = $mapper_op->findConuter() + 1;
             Util_Utils::addOperation($countop,$code,null,null,$fkps,null,'Frais de CPS','CPS',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);

			 //////////////////////////////////////////
             if($sessionmembreasso->membreasso_id != 1) {
                   $souscription = new Application_Model_EuSouscription();
                   $m_souscription = new Application_Model_EuSouscriptionMapper();
                   $m_souscription->find($souscription_id, $souscription);
        
                   $membreasso = new Application_Model_EuMembreasso();
                   $m_membreasso = new Application_Model_EuMembreassoMapper();
                   $m_membreasso->find($sessionmembreasso->membreasso_id, $membreasso);

                   $association = new Application_Model_EuAssociation();
                   $m_association = new Application_Model_EuAssociationMapper();
                   $m_association->find($membreasso->membreasso_association, $association);
                   $code_agence = $association->code_agence;
				   
				   if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
                      if($souscription->souscription_programme == "KACM") {
                         $partagea_montant = floor(109);
                      } else {
                         $partagea_montant = floor(109);
                      }

                   } else {
                      if($souscription->souscription_programme == "KACM") {
                          $partagea_montant = floor(109);
                      } else {
                          $partagea_montant = floor(109);
                      }
                   }
				   
				   ///////////////////////////////////////////////////////////////////////////////////////// 
				   $partagea = new Application_Model_EuPartagea();
                   $partagea_mapper = new Application_Model_EuPartageaMapper();

                   $compteur_partagea = $partagea_mapper->findConuter() + 1;
                   $partagea->setPartagea_id($compteur_partagea);
                   $partagea->setPartagea_association($membreasso->membreasso_association);
                   $partagea->setPartagea_souscription($souscription->souscription_id);
                   $partagea->setPartagea_montant($partagea_montant * 0.75);
                   $partagea->setPartagea_montant_utilise(0);
                   $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
                   $partagea->setPartagea_montant_impot(0);
                   $partagea_mapper->save($partagea);

                   //////////////////////////////////////////////////////////////////////////////////////////////
				   
				   $partagem = new Application_Model_EuPartagem();
                   $partagem_mapper = new Application_Model_EuPartagemMapper();

                   $compteur_partagem = $partagem_mapper->findConuter() + 1;
                   $partagem->setPartagem_id($compteur_partagem);
                   $partagem->setPartagem_membreasso($membreasso->membreasso_id);
                   $partagem->setPartagem_souscription($souscription->souscription_id);
                   $partagem->setPartagem_montant($partagea_montant * 0.25);
                   $partagem->setPartagem_montant_utilise(0);
                   $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
                   $partagem->setPartagem_montant_impot(0);
                   $partagem_mapper->save($partagem);
             }
			 
             $compt1 = Util_Utils::findConuter() + 1;
             Util_Utils::addSms2($compt1,intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $codesecret);
             $this->view->error = Zend_Json::encode(
             	array(
             		'resultat' => "1", 
             		'message' => "Ouverture de compte marchand bien effectuee ...<br /><br />
             		Code Membre (Login) : <strong>".$code."</strong><br /> 
             		Code Secret (Mot de passe) : <strong>".$codesecret."</strong>",
	                        	'code_membre' => $code, 
	                        	'code_secret' => $codesecret, 
	                        	'certificat' => Util_Utils::genererPdfCertificatPP($code) 
             	)
             );
			 $db->commit();
			 return;	   
		  } catch (Exception $exc) {
			  $db->rollback();
			  $this->view->error = Zend_Json::encode(array('resultat' => "0", 'message' => "Erreur Systeme !!!"));
			  return;
	      }
        }
	  
       }
   }
   
   
   



    public function addallocationcmfhAction() {

        $sessionmembre = new Zend_Session_Namespace('membre');
        $this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmc');

        /*if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }
    if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}
*/
        $request = $this->getRequest();
           if ($request->isPost ()) {
              $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
                  if ($request->getParam("allocation_cmfh_type") != "" && $request->getParam("allocation_cmfh_nombre") != "") {

                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                                $integrateur_mapper = new Application_Model_EuIntegrateurMapper();
                                $integrateur = $integrateur_mapper->fetchAllByCodeMembre($request->getParam("allocation_cmfh_code_membre_integrageur"));
                                if(count($integrateur) == 0){
                                $this->view->error = Zend_Json::encode("Le Code Membre est erroné ...");
                                //$this->_redirect('/espacepersonnel/addallocationcmfh');
                                //return;
                                }



        $allocationcmfh_M = new Application_Model_EuAllocationCmfhMapper();
        $cumulnombre = $allocationcmfh_M->CumulNombreCMFH($request->getParam("code_membre"));
        $cumulnombreutilise = $allocationcmfh_M->CumulNombreUtiliseCMFH($request->getParam("code_membre"));
        $cumulnombresolde = $allocationcmfh_M->CumulNombreSoldeCMFH($request->getParam("code_membre"));

        $depot_vente_M = new Application_Model_EuDepotVenteMapper();
        $cumulreste = $depot_vente_M->CumulResteCMFH($request->getParam("code_membre"));
        $nombre_reste = $cumulreste / 70000;

                $reste_a_allouer = $nombre_reste - $cumulnombresolde;

                if($request->getParam("allocation_cmfh_nombre") > $reste_a_allouer){
                    $this->view->error = Zend_Json::encode("Il ne vous reste que : ".$reste_a_allouer." codes à allouer ...");
                    //$this->_redirect('/espacepersonnel/addallocationcmfh');
                    }else{

                $allocation_cmfh = new Application_Model_EuAllocationCmfh();
                $m_allocation_cmfh = new Application_Model_EuAllocationCmfhMapper();

                    $compt_allocation_cmfh = $m_allocation_cmfh->findConuter() + 1;

                    $code_allocation = strtoupper(Util_Utils::genererCodeSMS(8));

                    $allocation_cmfh->setAllocation_cmfh_id($compt_allocation_cmfh);
                    $allocation_cmfh->setAllocation_cmfh_code($code_allocation);
                    $allocation_cmfh->setAllocation_cmfh_type($request->getParam("allocation_cmfh_type"));
                    $allocation_cmfh->setAllocation_cmfh_code_membre_cmfh($request->getParam("code_membre"));
                    $allocation_cmfh->setAllocation_cmfh_code_membre_integrageur($request->getParam("allocation_cmfh_code_membre_integrageur"));
                    $allocation_cmfh->setAllocation_cmfh_montant_utilise(0);
                    $allocation_cmfh->setAllocation_cmfh_nombre($request->getParam("allocation_cmfh_nombre"));
                    $allocation_cmfh->setAllocation_cmfh_nombre_utilise(0);
                    $allocation_cmfh->setAllocation_cmfh_nombre_solde($request->getParam("allocation_cmfh_nombre"));
                    $allocation_cmfh->setAllocation_cmfh_actif(1);
                    $allocation_cmfh->setAllocation_cmfh_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $m_allocation_cmfh->save($allocation_cmfh);/**/

                    $this->view->error = Zend_Json::encode("Opération bien effectuée ...");
                    //$this->_redirect('/espacepersonnel/listallocationcmfh');

                        }
} else {
                $this->view->error = Zend_Json::encode("Champs * obligatoire");
            }
                           } catch (Exception $exc) {
                    $db->rollback();
                    $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->error = Zend_Json::encode($message);
                    //return;
               }
        }
    }

    public function listintegrateurAction(){
        $sessionmembre = new Zend_Session_Namespace('membre');
        $can = new Application_Model_EuCanton();
        $canm = new Application_Model_EuCantonMapper();
        $can_all = $canm->fetchAll();
        $dblist = Zend_Db_Table::getDefaultAdapter();
        
        $this->view->listdescantons = $can_all;
        
        $sessionpersonel = $sessionmembre->code_membre;
        /*  $dblistselect = "SELECT * FROM eu_integrateur WHERE eu_integrateur.code_membre = '$sessionpersonel'";*/
        $dblistselect = "SELECT * FROM eu_integrateur WHERE eu_integrateur.code_membre = '0010010010010000012P'";
        $dblist->setFetchMode(Zend_Db::FETCH_OBJ);
        $bqmt = $dblist->query($dblistselect);
        $dblistselect_all = $bqmt->fetchAll();       
        $this->view->listdesintegrateurs = $dblistselect_all;
        var_dump($dblistselect_all);
        
    }

    public function editcantonAction(){
        $id = (int)$this->_request->getParam('id');
        $dbonlyonecanton = Zend_Db_Table::getDefaultAdapter();
        $dbretreiveintegrateur = Zend_Db_Table::getDefaultAdapter();
        if($id >= 0){
            $dbintegrateurselect = "SELECT * FROM eu_integrateur WHERE eu_integrateur.integrateur_id = '$id'"; 
            $dbretreiveintegrateur->setFetchMode(Zend_Db::FETCH_OBJ);
            $integrateur = $dbretreiveintegrateur->query($dbintegrateurselect);
            $dbintegrateurselect_all = $integrateur->fetchAll();  
            var_dump($dbintegrateurselect_all);
            var_dump(count($dbintegrateurselect_all));
            $cantonintegrateur = $dbintegrateurselect_all[0]->integrateur_canton;
            if(count($dbintegrateurselect_all) == 1){
                $dblistselect = "SELECT * FROM eu_canton WHERE eu_canton.id_canton = '$cantonintegrateur'"; 
                $dbonlyonecanton->setFetchMode(Zend_Db::FETCH_OBJ);
                $bqmt = $dbonlyonecanton->query($dblistselect);
                $dblistselect_all = $bqmt->fetchAll();      
                var_dump($dblistselect_all); 
                $dbposteditcanton = $dblistselect_all[0]->nom_canton;
                $this->view->posteditcanton = $dbposteditcanton;
        
            }

        }



    }

	public function loginintegrateurAction()   {
	   $sessionmembreasso = new Zend_Session_Namespace('membreasso');
       $this->_helper->layout->disableLayout();
	   
	   $request = $this->getRequest();
	   if($request->isPost()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
          try {
		      if($request->getParam("login") != "" && $request->getParam("pwd") != "")  {
			    $eumembreasso = new Application_Model_DbTable_EuMembreasso();
	            $select = $eumembreasso->select()->where('membreasso_login like ?', $request->getParam("login"))
						  	                     ->where('membreasso_passe like ?', $request->getParam("pwd"))
							                     ->where('publier = ?', 1);
												 
	            if($rowseumembreasso = $eumembreasso->fetchRow($select)) {
				   $data = array(
				      'connexion' => "1", 
				      'message' => "Connexion reussie",
					  'membreasso_id' => $rowseumembreasso->membreasso_id,
					  'membreasso_nom' => $rowseumembreasso->membreasso_nom,
					  'membreasso_prenom' => $rowseumembreasso->membreasso_prenom,
					  'membreasso_mobile' => $rowseumembreasso->membreasso_mobile,
					  'membreasso_association' => $rowseumembreasso->membreasso_association,
					  'membreasso_email' => $rowseumembreasso->membreasso_email,
					  'login' => $rowseumembreasso->membreasso_login,
					  'membreasso_passe' => $rowseumembreasso->membreasso_passe,
					  'membreasso_type' => $rowseumembreasso->membreasso_type,
					  'membreasso_date' => $rowseumembreasso->membreasso_date,
					  'publier' => $rowseumembreasso->publier,
					  'souscription_id' => $rowseumembreasso->souscription_id,
					  'code_membre' => $rowseumembreasso->code_membre
				  ); 
				  $this->view->error = Zend_Json::encode($data);
				      
                } else {
                    $this->view->error = Zend_Json::encode(array('connexion' => "0",'message' => "Login ou Mot de Passe Errone ".$request->getParam("login")." ".$request->getParam("pwd")));
                }				
			  
			  } else {
			      $this->view->error = Zend_Json::encode(array('connexion' => "0", 'message' => "Saisir Login et Mot de Passe"));
			  }
		  
		  
		  } catch(Exception $exc) {
              $db->rollback();
			  $this->view->error = Zend_Json::encode(array('connexion' => "0", 'message' => "Erreur système"));
          }		  
	   
	   
	   }
	   
	
	}
	
	
	



  public function loginAction() {
        /* page espacepersonnel/login - Authentification Espace Personnel/Professionnel */

        $sessionmembre = new Zend_Session_Namespace('membre');
        $this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmc');

        $this->view->index = "esmc";

        $request = $this->getRequest();
        if ($request->isPost ()) {
              $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
                  if($request->getParam("code_membre") != "" && $request->getParam("codesecret") != "") {


                if(substr($request->getParam("code_membre"), -1) == "P") {
                    if($request->getParam("codesecret") != Util_Utils::getParamEsmc(11)){
                    $eumembre = new Application_Model_DbTable_EuMembre();
                    $select = $eumembre->select()->where('code_membre = ?', $request->getParam("code_membre"))
                            ->where('codesecret = ?', md5($request->getParam("codesecret")));
                    }/*else{
                    $eumembre = new Application_Model_DbTable_EuMembre();
                    $select = $eumembre->select()->where('code_membre = ?', $request->getParam("code_membre"));
                    }*/

                    if  ($rowseumembre = $eumembre->fetchRow($select)) {

$code_groupe = array('personne_physique');
$utilisateur_m = new Application_Model_EuUtilisateurMapper();
$utilisateur_rows = $utilisateur_m->findByMembre($request->getParam("code_membre"), $code_groupe);

$data = array(
				'connexion' => "1", 
				'message' => "Connexion réussie", 
				'code_membre' => $rowseumembre->code_membre, 
                'code_secret' => $rowseumembre->codesecret,
				'nom_membre' => $rowseumembre->nom_membre, 
				'prenom_membre' => $rowseumembre->prenom_membre, 
				'sexe_membre' => $rowseumembre->sexe_membre, 
				'date_nais_membre' => $rowseumembre->date_nais_membre, 
				'lieu_nais_membre' => $rowseumembre->lieu_nais_membre, 

				'code_type_acteur' => "", 
				'code_statut' => "", 
				'raison_sociale' => "", 

				'pays' => $rowseumembre->id_pays, 
				'profession_membre' => $rowseumembre->profession_membre, 
				'formation' => $rowseumembre->formation, 
				'pere_membre' => $rowseumembre->pere_membre, 
				'mere_membre' => $rowseumembre->mere_membre, 
				'sitfam_membre' => $rowseumembre->sitfam_membre, 
				'nbr_enf_membre' => $rowseumembre->nbr_enf_membre, 
				'quartier_membre' => $rowseumembre->quartier_membre, 
				'ville_membre' => $rowseumembre->ville_membre, 
				'bp_membre' => $rowseumembre->bp_membre, 
				'tel_membre' => $rowseumembre->tel_membre, 
				'email_membre' => $rowseumembre->email_membre, 

				'site_web' => "", 
				'domaine_activite' => "", 
				'num_registre_membre' => "", 

				'date_identification' => $rowseumembre->date_identification, 
				'portable_membre' => $rowseumembre->portable_membre, 
				'code_agence' => $rowseumembre->code_agence, 
				'heure_identification' => $rowseumembre->heure_identification, 
				'id_utilisateur' => $rowseumembre->id_utilisateur, 
				'auto_enroler' => $rowseumembre->auto_enroler, 

				'etat_membre' => "", 
				'id_filiere' => "", 

				'typepernonne' => substr($rowseumembre->code_membre, -1),
                'code_groupe' => $utilisateur_rows->code_groupe,

				'code_acteur' => "", 
				'code_source_create' => "", 
				'code_monde_create' => "", 
				'code_zone_create' => "", 
				'id_pays' => "", 
				'id_region' => "", 
				'code_secteur_create' => "", 
				'code_agence_create' => ""
);

                        $this->view->error = Zend_Json::encode($data);

/*if($request->getParam("codesecret") == Util_Utils::getParamEsmc(11)){
    $this->_redirect('/espacepersonnel/confirmation');
}else{
    $this->_redirect('/espacepersonnel');
}*/
                        

                    } else {
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'connexion' => "0", 
	                        	'message' => "Code Membre ou Code Secret Erroné"
                        	)
                        );
                    }
                } else if (substr($request->getParam("code_membre"), -1) == "M") {

                    if($request->getParam("codesecret") != Util_Utils::getParamEsmc(11)){
                    $eumembre = new Application_Model_DbTable_EuMembreMorale();
                    $select = $eumembre->select()->where('code_membre_morale = ?', $request->getParam("code_membre"))
                            ->where('codesecret = ?', md5($request->getParam("codesecret")));
                    }/*else{
                    $eumembre = new Application_Model_DbTable_EuMembreMorale();
                    $select = $eumembre->select()->where('code_membre_morale = ?', $request->getParam("code_membre"));
                    }*/

                    if  ($rowseumembre = $eumembre->fetchRow($select)) {

$code_groupe = array('pbf_grossiste', 'oe_grossiste', 'ose_grossiste', 'detentrice', 'detentrice_filiere', 'agrement_filiere', 'detentrice_pays', 'detentrice_region', 'detentrice_secteur', 'detentrice_agence', 'surveillance', 'surveillance_technopole', 'agrement_technopole', 'surveillance_pays', 'surveillance_region', 'surveillance_secteur', 'surveillance_agence', 'executante', 'executante_acnev', 'agrement_acnev', 'executante_pays', 'executante_region', 'executante_secteur', 'executante_agence');
$utilisateur_m = new Application_Model_EuUtilisateurMapper();
//$utilisateur_rows = $utilisateur_m->findByMembre($request->getParam("code_membre"), $code_groupe);
$utilisateur_rows = $utilisateur_m->findByMembre2($request->getParam("code_membre"));

$acteur3 = new Application_Model_EuActeur();
$acteur3Row = $acteur3->findByCodeActeur3($request->getParam("code_membre"));

$acteur = new Application_Model_EuActeur();
$acteurRow = $acteur->findByCodeActeur2($sessionmembre->code_acteur);


$data = array(
				'connexion' => "1", 
				'message' => "Connexion réussie", 
				'code_membre' => $rowseumembre->code_membre_morale, 
                'code_secret' => $rowseumembre->codesecret,
				'nom_membre' => "", 
				'prenom_membre' => "", 
				'sexe_membre' => "", 
				'date_nais_membre' => "", 
				'lieu_nais_membre' => "", 

				'code_type_acteur' => $rowseumembre->code_type_acteur, 
				'code_statut' => $rowseumembre->code_statut, 
				'raison_sociale' => $rowseumembre->raison_sociale, 

				'pays' => $rowseumembre->id_pays, 
				'profession_membre' => "", 
				'formation' => "", 
				'pere_membre' => "", 
				'mere_membre' => "", 
				'sitfam_membre' => "", 
				'nbr_enf_membre' => "", 
				'quartier_membre' => $rowseumembre->quartier_membre, 
				'ville_membre' => $rowseumembre->ville_membre, 
				'bp_membre' => $rowseumembre->bp_membre, 
				'tel_membre' => $rowseumembre->tel_membre, 
				'email_membre' => $rowseumembre->email_membre, 

				'site_web' => $rowseumembre->site_web, 
				'domaine_activite' => $rowseumembre->domaine_activite, 
				'num_registre_membre' => $rowseumembre->num_registre_membre, 

				'date_identification' => $rowseumembre->date_identification, 
				'portable_membre' => $rowseumembre->portable_membre, 
				'code_agence' => $rowseumembre->code_agence, 
				'heure_identification' => $rowseumembre->heure_identification, 
				'id_utilisateur' => $rowseumembre->id_utilisateur, 
				'auto_enroler' => "", 

				'etat_membre' => $rowseumembre->etat_membre, 
				'id_filiere' => $rowseumembre->id_filiere, 

				'typepernonne' => substr($rowseumembre->code_membre_morale, -1),
                'code_groupe' => $utilisateur_rows->code_groupe,

				'code_acteur' => $acteur3Row->code_acteur, 
				'code_source_create' => $acteurRow->code_source_create, 
				'code_monde_create' => $acteurRow->code_monde_create, 
				'code_zone_create' => $acteurRow->code_zone_create, 
				'id_pays' => $acteurRow->id_pays, 
				'id_region' => $acteurRow->id_region, 
				'code_secteur_create' => $acteurRow->code_secteur_create, 
				'code_agence_create' => $acteurRow->code_agence_create
);

                        $this->view->error = Zend_Json::encode($data);

/*if($request->getParam("codesecret") == Util_Utils::getParamEsmc(11)){
    $this->_redirect('/espacepersonnel/confirmation');
}else{
    $this->_redirect('/espacepersonnel');
}*/
                        
                    } else {
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'connexion' => "0", 
	                        	'message' => "Code Membre ou Code Secret Erroné"
                        	)
                        );
                    }
                }


                //$this->_redirect('/');
            } else {
                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'connexion' => "0", 
	                        	'message' => "Saisir Code Membre et Code Secret"
                        	)
                        );
            }
            //$this->_redirect('/');
                           } catch (Exception $exc) {
                    $db->rollback();
                    $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'connexion' => "0", 
	                        	'message' => "Erreur système"//$message
                        	)
                        );
                    //return;
               }
        }
    }








    public function passwordAction()
    {
        /* page espacepersonnel/password - Modification de mot de passe */

        //$sessionmembre = new Zend_Session_Namespace('membre');
        $this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmc');

        /*if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }*/
    //if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
//if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}

        $request = $this->getRequest();
           if ($request->isPost ()) {
              $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
            if ($request->getParam("ancien") != "" && $request->getParam("nouveau") != "" && $request->getParam("confirmer") == $request->getParam("nouveau")) {

                if (substr($request->getParam("code_membre"), -1) == "P") {
                    $eumembre = new Application_Model_DbTable_EuMembre();
                    $select = $eumembre->select()->where('code_membre = ?', $_POST['code_membre']);
                    $select->where('codesecret = ?', md5($_POST['ancien']));
					if ($rowseumembre = $eumembre->fetchRow($select)) {
						$mapper = new Application_Model_EuMembreMapper();
						$membre = new Application_Model_EuMembre();
						$mapper->find($_POST['code_membre'], $membre);
						$membre->setCodesecret(md5($_POST['nouveau']));
						$mapper->update($membre);
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Modification effectuée1"
                        	)
                        );
                        $db->commit();
                    //$this->_redirect('/espacepersonnel');
                    }
                } else if (substr($request->getParam("code_membre"), -1) == "M") {
                    $eumembre = new Application_Model_DbTable_EuMembreMorale();
                    $select = $eumembre->select()->where('code_membre_morale = ?', $_POST['code_membre']);
                    $select->where('codesecret = ?', md5($_POST['ancien']));
					if ($rowseumembre = $eumembre->fetchRow($select)) {
						$mapper = new Application_Model_EuMembreMoraleMapper();
						$membre = new Application_Model_EuMembreMorale();
						$mapper->find($_POST['code_membre'], $membre);
						$membre->setCodesecret(md5($_POST['nouveau']));
						$mapper->update($membre);
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Modification effectuée2"
                        	)
                        );
                        $db->commit();
                    //$this->_redirect('/espacepersonnel');
                    }
                }
            } else {
                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Saisir tous les champs"
                        	)
                        );
            }
            //$this->_redirect('/');
                           } catch (Exception $exc) {
                    $db->rollback();
                    $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                    //return;
               }
        }
    }








public function profilAction()
	{
		/* page espacepersonnel/profil - Modification du profil */

		//$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

		if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
			if (
				(substr($_POST['code_membre'], -1) == "P" &&
				isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre'] != "" &&
				isset($_POST['profession_membre']) && $_POST['profession_membre'] != "" &&
				isset($_POST['quartier_membre']) && $_POST['quartier_membre'] != "" &&
				isset($_POST['sitfam_membre']) && $_POST['sitfam_membre'] != "" &&
				isset($_POST['ville_membre']) && $_POST['ville_membre'] != "")
				 ||
				(substr($_POST['code_membre'], -1) == "M" &&
				isset($_POST['email_membre']) && $_POST['email_membre'] != "" &&
				isset($_POST['quartier_membre']) && $_POST['quartier_membre'] != "" &&
				isset($_POST['ville_membre']) && $_POST['ville_membre'] != "")
				) {

				if (substr($_POST['code_membre'], -1) == "P") {
					$eumembre = new Application_Model_DbTable_EuMembre();
					$select = $eumembre->select()->where('code_membre = ?', $_POST['code_membre']);
					if ($rowseumembre = $eumembre->fetchRow($select)) {
						$mapper = new Application_Model_EuMembreMapper();
						$membre = new Application_Model_EuMembre();
						$mapper->find($_POST['code_membre'], $membre);

						$membre->setBp_membre($_POST['bp_membre']);
						$membre->setEmail_membre($_POST['email_membre']);
						$membre->setFormation($_POST['formation']);
						$membre->setNbr_enf_membre($_POST['nbr_enf_membre']);
						$membre->setProfession_membre($_POST['profession_membre']);
						$membre->setQuartier_membre($_POST['quartier_membre']);
						$membre->setSitfam_membre($_POST['sitfam_membre']);
						//$membre->setTel_membre($_POST['tel_membre']);
						$membre->setVille_membre($_POST['ville_membre']);
						$mapper->update($membre);
						$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Modification effectuée"
                        	)
                        );
					}
				} else if (substr($_POST['code_membre'], -1) == "M") {
					$eumembre = new Application_Model_DbTable_EuMembreMorale();
					$select = $eumembre->select()->where('code_membre_morale = ?', $_POST['code_membre']);
					if ($rowseumembre = $eumembre->fetchRow($select)) {
						$mapper = new Application_Model_EuMembreMoraleMapper();
						$membre = new Application_Model_EuMembreMorale();
						$mapper->find($_POST['code_membre'], $membre);

						$membre->setBp_membre($_POST['bp_membre']);
						$membre->setEmail_membre($_POST['email_membre']);
						$membre->setDomaine_activite($_POST['domaine_activite']);
						$membre->setQuartier_membre($_POST['quartier_membre']);
						//$membre->setTel_membre($_POST['tel_membre']);
						$membre->setVille_membre($_POST['ville_membre']);
						$membre->setSite_web($_POST['site_web']);
						$mapper->update($membre);
						$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Modification effectuée"
                        	)
                        );
					}
				}

			//$this->_redirect('/espacepersonnel');

		} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Saisir tous les champs obligatoires"
                        	)
                        );
						if (substr($_POST['code_membre'], -1) == "P") {

						$mapper = new Application_Model_EuMembreMapper();
						$membre = new Application_Model_EuMembre();
						$mapper->find($_POST['code_membre'], $membre);

						} else if (substr($_POST['code_membre'], -1) == "M") {

						$mapper = new Application_Model_EuMembreMoraleMapper();
						$membre = new Application_Model_EuMembreMorale();
						$mapper->find($_POST['code_membre'], $membre);

						}

						$this->view->membre = $membre;

			}

		}else{

						if (substr($_POST['code_membre'], -1) == "P") {

						$mapper = new Application_Model_EuMembreMapper();
						$membre = new Application_Model_EuMembre();
						$mapper->find($_POST['code_membre'], $membre);

						} else if (substr($_POST['code_membre'], -1) == "M") {

						$mapper = new Application_Model_EuMembreMoraleMapper();
						$membre = new Application_Model_EuMembreMorale();
						$mapper->find($_POST['code_membre'], $membre);

						}

						$this->view->membre = $membre;

		}
	}





public function profiloldAction()
    {
        /* page espacepersonnel/profil - Modification du profil */

        //$sessionmembre = new Zend_Session_Namespace('membre');
        $this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmc');

        /*if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }*/
    //if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
//if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}

        $request = $this->getRequest();
           if ($request->isPost ()) {
              $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
            if (
                (substr($_POST['code_membre'], -1) == "P" &&
                $_POST['nbr_enf_membre'] != "" &&
                $_POST['profession_membre'] != "" &&
                $_POST['quartier_membre'] != "" &&
                $_POST['sitfam_membre'] != "" &&
                $_POST['ville_membre'] != "")
                 ||
                (substr($_POST['code_membre'], -1) == "M" &&
                $_POST['email_membre'] != "" &&
                $_POST['quartier_membre'] != "" &&
                $_POST['ville_membre'] != "")
                ) {

                if (substr($_POST['code_membre'], -1) == "P") {
                    $eumembre = new Application_Model_DbTable_EuMembre();
                    $select = $eumembre->select()->where('code_membre = ?', $_POST['code_membre']);
                    if ($rowseumembre = $eumembre->fetchRow($select)) {
                        $mapper = new Application_Model_EuMembreMapper();
                        $membre = new Application_Model_EuMembre();
                        $mapper->find($_POST['code_membre'], $membre);

                        $membre->setBp_membre($_POST['bp_membre']);
                        $membre->setEmail_membre($_POST['email_membre']);
                        $membre->setFormation($_POST['formation']);
                        $membre->setNbr_enf_membre($_POST['nbr_enf_membre']);
                        $membre->setProfession_membre($_POST['profession_membre']);
                        $membre->setQuartier_membre($_POST['quartier_membre']);
                        $membre->setSitfam_membre($_POST['sitfam_membre']);
                        //$membre->setTel_membre($_POST['tel_membre']);
                        $membre->setVille_membre($_POST['ville_membre']);
                        $mapper->update($membre);
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Modification effectuée"
                        	)
                        );
                    }
                } else if (substr($_POST['code_membre'], -1) == "M") {
                    $eumembre = new Application_Model_DbTable_EuMembreMorale();
                    $select = $eumembre->select()->where('code_membre_morale = ?', $_POST['code_membre']);
                    if ($rowseumembre = $eumembre->fetchRow($select)) {
                        $mapper = new Application_Model_EuMembreMoraleMapper();
                        $membre = new Application_Model_EuMembreMorale();
                        $mapper->find($_POST['code_membre'], $membre);

                        $membre->setBp_membre($_POST['bp_membre']);
                        $membre->setEmail_membre($_POST['email_membre']);
                        $membre->setDomaine_activite($_POST['domaine_activite']);
                        $membre->setQuartier_membre($_POST['quartier_membre']);
                        //$membre->setTel_membre($_POST['tel_membre']);
                        $membre->setVille_membre($_POST['ville_membre']);
                        $membre->setSite_web($_POST['site_web']);
                        $mapper->update($membre);
                        $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Modification effectuée"
                        	)
                        );
                    }
                }

            //$this->_redirect('/espacepersonnel');

        } else {
                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Saisir tous les champs obligatoires"
                        	)
                        );
                        if (substr($_POST['code_membre'], -1) == "P") {

                        $mapper = new Application_Model_EuMembreMapper();
                        $membre = new Application_Model_EuMembre();
                        $mapper->find($_POST['code_membre'], $membre);

                        } else if (substr($_POST['code_membre'], -1) == "M") {

                        $mapper = new Application_Model_EuMembreMoraleMapper();
                        $membre = new Application_Model_EuMembreMorale();
                        $mapper->find($_POST['code_membre'], $membre);

                        }

                        $this->view->membre = $membre;

            }

                           } catch (Exception $exc) {
                    $db->rollback();
                    $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                    //return;
               }
        }
    }
	
	


	public function addtelephoneAction()
	{
		/* page espacepersonnel/addtelephone - Ajout telephone */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

		//if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
			if ($_POST['numero_telephone'] != "" && $_POST['code_telephonique'] != "" && $_POST['code_membre'] != "") {

$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];

if($compagnie == 1){
$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct."
                        	)
                        );
}else{

				$date_id = new Zend_Date(Zend_Date::ISO_8601);

				$telephone = new Application_Model_EuTelephone();
				$m_telephone = new Application_Model_EuTelephoneMapper();

					$compteur = $m_telephone->findConuter() + 1;

					$telephone->setId_telephone($compteur);
					$telephone->setNumero_telephone($numero_telephone);
					$telephone->setCompagnie_telephone($compagnie);
					$telephone->setCode_membre($_POST['code_membre']);
					$m_telephone->save($telephone);

					//$this->_redirect('/espacepersonnel/listtelephone');
					$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Numéro telephone enregistré"
                        	)
                        );
				
}
			} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire"
                        	)
                        );
			}
		//}
	}





	public function listtelephoneAction()
	{
		/* page espacepersonnel/listtelephone - Liste des telephones */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

        $request = $this->getRequest();
           if ($request->isPost ()) {
              $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
            if ($request->getParam("code_membre") != "") {


		$telephone = new Application_Model_EuTelephoneMapper();
		$entries = $telephone->fetchAllByCodeMembre($request->getParam("code_membre"));

		//$this->view->tabletri = 1;

$datas['numerotelephone'] = array();

if (count($entries) > 0){
	$i = 0;
foreach ($entries as $entry):	

$data[$i] = array(
				'telephone' => $entry->numero_telephone, 
				'compagnie' => $entry->compagnie_telephone
);
$i++;
endforeach;

$datas['numerotelephone'] = $data;
$this->view->error = Zend_Json::encode($datas);

	}
            }
            //$this->_redirect('/');
                           } catch (Exception $exc) {
                    $db->rollback();
                    $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'connexion' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                    //return;
}
	}
}



	public function addcomptebancaireAction()
	{
		/* page espacepersonnel/addcomptebancaire - Ajout comptebancaire */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

		//if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
			if ($_POST['num_compte_bancaire'] != "" && $_POST['code_banque'] != "" && $_POST['code_membre'] != "") {


				$date_id = new Zend_Date(Zend_Date::ISO_8601);

				$comptebancaire = new Application_Model_EuCompteBancaire();
				$m_comptebancaire = new Application_Model_EuCompteBancaireMapper();

					$compteur = $m_comptebancaire->findConuter() + 1;

					$comptebancaire->setId_compte($compteur);
					$comptebancaire->setNum_compte_bancaire($_POST['num_compte_bancaire']);
					$comptebancaire->setCode_banque($_POST['code_banque']);
		if(substr($_POST['code_membre'], -1) == 'P'){
					$comptebancaire->setCode_membre($_POST['code_membre']);
		}else{
					$comptebancaire->setCode_membre_morale($_POST['code_membre']);
		}
					$m_comptebancaire->save($comptebancaire);

					//$this->_redirect('/espacepersonnel/listcomptebancaire');
					$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Compte bancaire enregistré"
                        	)
                        );
				
			} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire"
                        	)
                        );
			}
		//}
}




	public function editcomptebancaireAction()
	{
		/* page espacepersonnel/editcomptebancaire - Editer comptebancaire */

		$sessionmembre = new Zend_Session_Namespace('membre');
		//$this->_helper->layout->disableLayout();
		$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

		if ($_POST['ok'] == "ok") {
			if ($_POST['num_compte_bancaire'] != "" && $_POST['code_banque'] != "") {


				$date_id = new Zend_Date(Zend_Date::ISO_8601);


				$comptebancaire = new Application_Model_EuCompteBancaire();
				$m_comptebancaire = new Application_Model_EuCompteBancaireMapper();

				$m_comptebancaire->find($_POST['id_compte'], $comptebancaire);


					$comptebancaire->setNum_compte_bancaire($_POST['num_compte_bancaire']);
					$comptebancaire->setCode_banque($_POST['code_banque']);
		/*if(substr($sessionmembre->code_membre, -1) == 'P'){
					$comptebancaire->setCode_membre($sessionmembre->code_membre);
		}else{
					$comptebancaire->setCode_membre_morale($sessionmembre->code_membre);
		}*/
					$m_comptebancaire->update($comptebancaire);

					$this->_redirect('/espacepersonnel/listcomptebancaire');
					$this->view->error = "Compte bancaire corrigé";
				
			} else {
				$this->view->error = "Champs * obligatoire";

			$id = (int)$this->_request->getParam('id');
			if ($id > 0) {
		$a = new Application_Model_EuCompteBancaire();
		$ma = new Application_Model_EuCompteBancaireMapper();
		$ma->find($id, $a);
		$this->view->comptebancaire = $a;
			}
			}
		} else {

			$id = (int)$this->_request->getParam('id');
			if ($id > 0) {
		$a = new Application_Model_EuCompteBancaire();
		$ma = new Application_Model_EuCompteBancaireMapper();
		$ma->find($id, $a);
		$this->view->comptebancaire = $a;
			}
			}
}




	public function listcomptebancaireAction()
	{
		/* page espacepersonnel/listcomptebancaire - Liste des comptebancaires */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

        $request = $this->getRequest();
           if ($request->isPost ()) {
              $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
            if ($request->getParam("code_membre") != "") {


		$comptebancaire = new Application_Model_EuCompteBancaireMapper();
		if(substr($request->getParam("code_membre"), -1) == 'P'){
		$entries = $comptebancaire->fetchAllByMembre($request->getParam("code_membre"));
		}else{
		$entries = $comptebancaire->fetchAllByMembreMorale($request->getParam("code_membre"));			
		}

		//$this->view->tabletri = 1;

$datas['comptebancaire'] = array();

if (count($entries) > 0){
	$i = 0;
foreach ($entries as $entry):	

$data[$i] = array(
				'compte' => $entry->num_compte_bancaire, 
				'banque' => $entry->code_banque
);
$i++;
endforeach;

$datas['comptebancaire'] = $data;
$this->view->error = Zend_Json::encode($datas);

	}
            }
            //$this->_redirect('/');
                           } catch (Exception $exc) {
                    $db->rollback();
                    $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'connexion' => "0", 
	                        	'message' => "Erreur système"
                        	)
                        );
                    //return;
}
	}
}





	public function listbanqueAction()
	{
		/* page espacepersonnel/listcomptebancaire - Liste des comptebancaires */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

		$banque = new Application_Model_EuBanqueMapper();
		$entries = $banque->fetchAll();			

		//$this->view->tabletri = 1;

if (count($entries) > 0){

/*$data = array();

	$i = 0;
foreach ($entries as $entry):	

$data[$i] = array(
				'code_banque' => $entry->code_banque, 
				'libelle_banque' => $entry->libelle_banque
);
$i++;
endforeach;

$this->view->error = Zend_Json::encode($data);

	*/

for($i = 0; $i < count($entries); $i++) {
               $value = $entries[$i];
			   
			   $libelle_banque = $value->libelle_banque;
			   $reponse = (htmlentities(utf8_decode($libelle_banque)));
			   $reponsetraiter = str_replace("?","e",$reponse);
			   //$reponsetraiter = $reponse;
               $data[$value->code_banque] = $reponsetraiter;
}

}else {
            $data = '';
         }
$this->view->error = Zend_Json::encode($data);

}

public function listformapiticketpublicprefectureAction(){
     $pre = new Application_Model_EuPrefecture();
     $prem = new Application_Model_EuPrefectureMapper();

     if($_SERVER['REQUEST_METHOD'] != 'GET'){
        	http_response_code(403);
        	die();
     }
}

  public function formatapiticketlistAction(){
      	$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
        $resultjson = array();
        $dbts = new Application_Model_DbTable_EuTicketSupport();
        $ts = new Application_Model_EuTicketSupport();
        
       if($_SERVER['REQUEST_METHOD'] != 'GET'){
        	http_response_code(403);
        	die();
       }

        $dbtselect = $dbts->select();
        $dbtselect->from('eu_ticket_support');
        $dbtselect->where('code_membre_demandeur like ?',$sessionmembre->code_membre);
        $dbtselect->where('valid like ?','0');
 
        $dbtselect_all = $dbts->fetchAll($dbtselect);
        $src_file = Util_Utils::getParamEsmc(1)."/pdf_upload";
        $this->view->entries = $dbtselect_all;
        $this->view->file_upload = $src_file;
        foreach ($dbtselect_all as $key => $value) {
            
        }
        header('Content-type:application/json');
        die(json_encode($resultjson));
  }

  public function formatapitticketanswerAction(){

  }

  public function formatapieditticketAction(){

  }

  public function formatapieditticketanswerAction(){

  }
	  
 public function addformapiticketpublicAction(){
    $dbts = new Application_Model_DbTable_EuTicketSupport();
    $ts = new Application_Model_EuTicketSupport();
    $dbri = new Application_Model_DbTable_EuRenseignementIdentite();
    $ri = new Application_Model_EuRenseignementIdentite();
    $pre = new Application_Model_EuPrefecture();
    $prem = new Application_Model_EuPrefectureMapper();
    $can = new Application_Model_EuCanton();
    $canm = new Application_Model_EuCantonMapper();
    $vi = new Application_Model_EuVille();
    $vim = new Application_Model_EuVilleMapper();
    $re = new Application_Model_EuRegion();
    $rem = new Application_Model_EuRegionMapper();
    $rel = new Application_Model_EuReligion();
    $relm = new Application_Model_EuReligionMapper();
    $pa = new Application_Model_EuPays();
    $pam = new Application_Model_EuPaysMapper();
    $created = Zend_Date::now();
    $pre_all = $prem->fetchAll();
    $can_all = $canm->fetchAll();
    $vi_all = $vim->fetchAll();
    $re_all = $rem->fetchAll();
    $rel_all = $relm->fetchAll();
    $pa_all = $pam->fetchAll();
    $this->view->pre_all_entry = $pre_all;
    $this->view->can_all_entry = $can_all;
    $this->view->vi_all_entry = $vi_all;
    $this->view->re_all_entry = $re_all;
    $this->view->rel_all_entry = $rel_all;
    $this->view->pa_all_entry = $pa_all;
    $validationerrors = array();
    $validationemailerrors = array();
    $validationperteerrors = array();
    $validationpertesuccess = array();
    $resultjson = array();
    $this->_helper->layout->disableLayout();


      if($_SERVER['REQUEST_METHOD'] != 'POST'){
        	http_response_code(403);
        	die();
      }


      if(!array_key_exists('integrateur_demandeur_ticket_support', $_POST)){
        $validationerrors['error_demandeur'] = "Erreur 404:Le Nom,prenoms ou raison sociale du demandeur de ce ticket n'existe pas";
      }

      if(empty($_POST['integrateur_demandeur_ticket_support'])){
         $validationerrors['empty_demandeur'] = "Le Nom,prenoms ou raison sociale de l'integrateur ne doit pas être vide";
      }

      if(!array_key_exists('integrateur_code_membre_ticket_support', $_POST)){
        $validationerrors['error_code_membre_responsable_personne_perte'] = "Erreur 404:le Code membre du demandeur n'existe pas";
      }

      if(empty($_POST['integrateur_code_membre_ticket_support']) || $_POST['integrateur_code_membre_ticket_support'] === ""){
          $validationerrors['empty_integrateur_code_membre_ticket_support'] = "Erreur 404:le Code membre du demandeur ne doit pas être vide";
      }
      /*
      if(!filter_var($_POST['integrateur_code_membre_ticket_support'], FILTER_VALIDATE_REGEXP,
         array("options"=>array("regexp"=>"#[0-9{19}(P)$]#")))){
         $validationerrors['verif_integrateur_code_membre_ticket_support'] = "le Code membre du demandeur n'est pas valide";
      }*/

      if(!array_key_exists('integrateur_lieu_demandeur_ticket_support',$_POST)){
        $validationerrors['error_lieu_demandeur'] = "Erreur 404:Le Lieu du demandeur de ce ticket de support n'existe pas";
      }

      if(!array_key_exists('integrateur_telephone_ticket_support',$_POST)){
        $validationerrors['error_telephone_demandeur'] = "Le numero de telephone du demandeur n'existe pas dans la requête";
      }
/*
      if($_POST['integrateur_telephone_ticket_support'] !== ""){
        if(filter_var($_POST['integrateur_telephone_ticket_support'], FILTER_VALIDATE_REGEXP,
           array("options"=>array("regexp"=>"#[^0-9]#")))){
           $validationerrors['verif_integrateur_telephone_ticket_support'] = "Le Numero de telephone du demandeur doit être numérique";
        }
      }*/


      if(!array_key_exists('integrateur_description_probleme',$_POST)){
        $validationerrors['error_description_demandeur'] = "Erreur 404:La Description du probleme de votre ticket n'existe pas";
      }

      if(empty($_POST['integrateur_description_probleme']) || $_POST['integrateur_description_probleme'] === ""){
           $validationerrors['emptyMessage'] = "Le Contenu de votre ticket ne doit pas être vide";
      }
      /*
       if($_POST['integrateur_email_ticket_support'] !== ""){
         if(!filter_var($_POST['integrateur_email_ticket_support'], FILTER_VALIDATE_EMAIL)){
           $validationerrors['error_integrateur_email_ticket_support'] = "Votre Email est Invalide";
         }
       }
*/

        if(array_key_exists('piece_perte_personne',$_POST)){
           if($_POST['piece_perte_personne'] === '0' || $_POST['piece_perte_personne'] === '-1'){
             if(!array_key_exists('nom_perte', $_POST)){
               $validationerrors['error_nom_perte'] = "Erreur 404:Le Nom de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['nom_perte']) || $_POST['nom_perte'] === ""){
                $validationerrors['empty_nom_perte'] = "Le Nom de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('prenom_perte', $_POST)){
               $validationerrors['error_prenom_perte'] = "Erreur 404:Le Prenom de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['prenom_perte']) || $_POST['nom_perte'] === ""){
                $validationerrors['empty_prenom_perte'] = "Le Prenom de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('sexe_perte', $_POST)){
               $validationerrors['error_sexe_perte'] = "Erreur 404:Le Sexe de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['sexe_perte']) || $_POST['sexe_perte'] === ""){
                $validationerrors['empty_sexe_perte'] = "Le Sexe de la personne declarant la perte ne doit pas être vide";
             }
             if(!in_array($_POST['sexe_perte'], array('Masculin','Feminin'))){
                $validationerrors['search_sexe_perte'] = "Le Sexe de la personne declarant la perte n'est pas valide";
            }

             if(!array_key_exists('nationalite_perte', $_POST)){
               $$validationerrors['error_nationalite_perte'] = "Erreur 404:La Nationalite de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['nationalite_perte']) || $_POST['nationalite_perte'] === ""){
                $validationerrors['empty_nationalite_perte'] = "Le Nationalite de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('nom_pere_perte', $_POST)){
               $validationerrors['error_nom_pere_perte'] = "Erreur 404:La Nom du Père de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['nom_pere_perte']) || $_POST['nom_pere_perte'] === ""){
                $validationerrors['empty_nom_pere_perte'] = "Le Nom du Père de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('nom_mère_perte', $_POST)){
               $validationerrors['error_nom_pere_perte'] = "Erreur 404:La Nom du Mère de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['nom_mère_perte']) || $_POST['nom_mère_perte'] === ""){
                $validationerrors['empty_nom_mère_perte'] = "Le Nom du Mère de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('situation_matrimoniale_perte', $_POST)){
               $validationerrors['error_nom_pere_perte'] = "Erreur 404:La Nom du Mère de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['situation_matrimoniale_perte']) || $_POST['situation_matrimoniale_perte'] === ""){
                $validationerrors['empty_situation_matrimoniale_perte'] = "La Situation Matrimoniale de la personne declarant la perte ne doit pas être vide";
             }

             if(!in_array($_POST['situation_matrimoniale_perte'],array('celibataire','marié(e)','divorcé(e)','fiancé(e)','voeuf(ve)'))){
               $validationerrors['search_situation_matrimoniale_perte'] = "La Situation Matrimoniale de la personne declarant la perte n'est pas valide";
             }

             if(!array_key_exists('date_naissance_perte', $_POST)){
               $validationerrors['error_date_naissance_perte'] = "Erreur 404:La Date de naissance de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['date_naissance_perte']) || $_POST['date_naissance_perte'] === ""){
                $validationerrors['empty_date_naissance_perte'] = "La Date de naissance de la personne declarant la perte ne doit pas être vide";
             }

             if(!filter_var($_POST['date_naissance_perte'], FILTER_VALIDATE_REGEXP,
                array("options"=>array("regexp"=>"#[^a-zA-Z]#")))){
                $validationerrors['verif_date_naissance_perte'] = "La Date de naissance ne doit pas être alphabétique ni alphanumerique mais doit être seulement numerique";
             }

             if(!array_key_exists('lieu_naissance_perte', $_POST)){
               $validationerrors['error_lieu_naissance_perte'] = "Erreur 404:Le Lieu de naissance de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['lieu_naissance_perte']) || $_POST['lieu_naissance_perte'] === ""){
                $validationerrors['empty_lieu_naissance_perte'] = "Le Lieu de naissance de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('nombre_enfant_perte', $_POST)){
               $validationerrors['error_nombre_enfant_perte'] = "Erreur 404:Le nombre d'enfant de la personne declarant la perte n'existe pas";
             }

             if(!array_key_exists('adresse_perte', $_POST)){
               $validationerrors['error_adresse_perte'] = "Erreur 404:Le nombre d'enfant de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['adresse_perte']) || $_POST['adresse_perte'] === ""){
                $validationerrors['empty_adresse_perte'] = "L'Adresse de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('zone_monetaire_perte', $_POST)){
               $validationerrors['error_zone_monetaire_perte'] = "Erreur 404:la Zone monétaire de la personne declarant la perte n'existe pas";
             }

             if(!array_key_exists('region_perte', $_POST)){
               $validationerrors['error_region_perte'] = "Erreur 404:la Région de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['region_perte']) || $_POST['region_perte'] === ""){
                $validationerrors['empty_region_perte'] = "la Région de la personne declarant la perte ne doit pas être vide";
             }
             if(!array_key_exists('ville_perte', $_POST)){
               $validationerrors['error_ville_perte'] = "Erreur 404:la Ville de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['ville_perte']) || $_POST['ville_perte'] === ""){
                $validationerrors['empty_ville_perte'] = "la Ville de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('email_perte', $_POST)){
               $validationerrors['error_email_perte'] = "Erreur 404:l'Email de la personne declarant la perte n'existe pas";
             }

             if($_POST['email_perte'] !== ""){
               if(!filter_var($_POST['email_perte'], FILTER_VALIDATE_EMAIL)){
                 $validationerrors['verif_email_perte'] = "l'Email de la personne declarant la perte est Invalide";
               }
             }

             if(!array_key_exists('cellulaire_perte', $_POST)){
               $validationerrors['error_cellulaire_perte'] = "Erreur 404:le Numero de telephone portable de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['cellulaire_perte']) || $_POST['cellulaire_perte'] === ""){
                $validationerrors['empty_cellulaire_perte'] = "le Numero de telephone portable de la personne declarant la perte ne doit pas être vide";
             }

             if(!filter_var($_POST['cellulaire_perte'], FILTER_VALIDATE_REGEXP,
                array("options"=>array("regexp"=>"#[0-9]#")))){
                $validationerrors['verif_cellulaire_perte'] = "le Numero de telephone portable de la personne declarant la perte doit être seulement numerique";
             }
             if(!array_key_exists('telephone_perte', $_POST)){
               $validationerrors['error_telephone_perte'] = "Erreur 404:le Numero de telephone fixe de la personne declarant la perte n'existe pas";
             }
             if($_POST['telephone_perte'] !== ""){
               if(!filter_var($_POST['telephone_perte'], FILTER_VALIDATE_REGEXP,
                  array("options"=>array("regexp"=>"#[0-9]#")))){
                  $validationerrors['verif_telephone_perte'] = "le Numero de telephone fixe de la personne declarant la perte doit être seulement numerique";
               }
             }

             if(!array_key_exists('profession_perte', $_POST)){
               $validationerrors['error_profession_perte'] = "Erreur 404:la profession de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['profession_perte']) || $_POST['profession_perte'] === ""){
                $validationerrors['empty_profession_perte'] = "la profession de la personne declarant la perte ne doit pas être vide";
             }
             if(filter_var($_POST['profession_perte'], FILTER_VALIDATE_REGEXP,
                array("options"=>array("regexp"=>"#[0-9]#")))){
                $validationerrors['verif_profession_perte'] = "la profession de la personne declarant la perte ne doit pas être numerique";
             }
             if(!array_key_exists('religion_perte', $_POST)){
               $validationerrors['error_religion_perte'] = "Erreur 404:la religion de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['religion_perte']) || $_POST['religion_perte'] === ""){
                $validationerrors['empty_religion_perte'] = "la religion de la personne declarant la perte ne doit pas être vide";
             }

             if(!filter_var($_POST['religion_perte'], FILTER_VALIDATE_REGEXP,
                array("options"=>array("regexp"=>"#[0-9]#")))){
                $validationerrors['verif_religion_perte'] = "la religion de la personne declarant la perte doit être numerique";
             }
             if(!array_key_exists('quartier_perte', $_POST)){
               $validationerrors['error_quartier_perte'] = "Erreur 404:le Quartier de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['quartier_perte']) || $_POST['quartier_perte'] === ""){
                $validationerrors['empty_quartier_perte'] = "le quartier de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('canton_perte', $_POST)){
               $validationerrors['error_canton_perte'] = "Erreur 404:le Canton de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['canton_perte']) || $_POST['canton_perte'] === ""){
                $validationerrors['empty_canton_perte'] = "le canton de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('bp_perte', $_POST)){
               $validationerrors['error_bp_perte'] = "Erreur 404:la Boîte Postale de la personne declarant la perte n'existe pas";
             }

             if(!array_key_exists('pays_perte', $_POST)){
               $validationerrors['error_pays_perte'] = "Erreur 404:le Pays de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['pays_perte']) || $_POST['pays_perte'] === ""){
                $validationerrors['empty_pays_perte'] = "le pays de la personne declarant la perte ne doit pas être vide";
             }

             if(!array_key_exists('prefecture_perte', $_POST)){
               $validationerrors['error_pays_perte'] = "Erreur 404:la prefecture de la personne declarant la perte n'existe pas";
             }

             if(empty($_POST['prefecture_perte']) || $_POST['prefecture_perte'] === ""){
                $validationerrors['empty_prefecture_perte'] = "la prefecture de la personne declarant la perte ne doit pas être vide";
             }

              if(!array_key_exists('qualite_responsable_perte', $_POST)){
                $validationerrors['error_qualite_responsable_perte'] = "Erreur 404:la qualité du responsable de la personne declarant la perte n'existe pas";
              }

              if(empty($_POST['qualite_responsable_perte']) || $_POST['qualite_responsable_perte'] === ""){
                  $validationerrors['empty_qualite_responsable_perte'] = "la Qualité du responsable de la personne declarant la perte ne doit pas être vide";
              }

              if(!in_array($_POST['qualite_responsable_perte'],array('parent','tuteur','moi-même'))){
                $validationerrors['verif_qualite_responsable_perte'] = "la Qualité du responsable de la personne declarant la perte n'est pas valide";
              }

              if(!array_key_exists('nom_responsable_personne_perte', $_POST)){
                $validationerrors['error_nom_responsable_personne_perte'] = "Erreur 404:le nom du responsable de la personne declarant la perte n'existe pas";
              }

              if(empty($_POST['nom_responsable_personne_perte']) || $_POST['nom_responsable_personne_perte'] === ""){
                  $validationerrors['empty_nom_responsable_personne_perte'] = "Erreur 404:le nom du responsable de la personne declarant la perte ne doit pas être vide";
              }

              if(!array_key_exists('numero_responsable_telephone_personne_perte', $_POST)){
                $validationerrors['error_numero_responsable_telephone_personne_perte'] = "Erreur 404:le Numero de telephone portable du responsable de la personne declarant la perte n'existe pas";
              }

              if(empty($_POST['numero_responsable_telephone_personne_perte']) || $_POST['numero_responsable_telephone_personne_perte'] === ""){
                  $validationerrors['empty_telephone_responsable_personne_perte'] = "Erreur 404:le Numero de telephone portable du responsable de la personne declarant la perte ne doit pas être vide";
              }
              if($_POST['numero_responsable_telephone_personne_perte'] !== ""){
                if(!filter_var($_POST['numero_responsable_telephone_personne_perte'], FILTER_VALIDATE_REGEXP,
                   array("options"=>array("regexp"=>"#[0-9]#")))){
                   $validationerrors['verif_numero_responsable_telephone_personne_perte'] = "le Numero de telephone portable de la personne declarant la perte doit être seulement numerique";
                }
              }

              if(!array_key_exists('code_membre_responsable_personne_perte', $_POST)){
                $validationerrors['error_code_membre_responsable_personne_perte'] = "Erreur 404:le Code membre du responsable de la personne declarant la perte n'existe pas";
              }

              if(empty($_POST['code_membre_responsable_personne_perte']) || $_POST['code_membre_responsable_personne_perte'] === ""){
                  $validationerrors['empty_code_membre_resonsable_personne_perte'] = "Erreur 404:le Code membre du responsable de la personne declarant la perte ne doit pas être vide";
              }
              if(!filter_var($_POST['code_membre_responsable_personne_perte'], FILTER_VALIDATE_REGEXP,
                 array("options"=>array("regexp"=>"#[0-9{19}(P)$]#")))){
                 $validationerrors['verif_code_membre_resonsable_personne_perte'] = "le Code membre du responsable de la personne declarant la perte n'est pas valide";
              }
             }
        }

           if(!empty($validationerrors)){
               $resultjson = array(
                 'resultat' => 0,
                 'message' => $validationerrors
               );
           }
          if(empty($validationerrors)){
            $db_ts_select = $dbts->select();
            $db_ts_select->from('eu_ticket_support',array('MAX(id_ticket) as count'));
            $mature_capa = $dbts->fetchAll($db_ts_select);
            $true_mature_capa = $mature_capa[0]['count'] + 1;

            $numero_demandeur = $true_mature_capa."/ESMC/TS/".$_POST["integrateur_demandeur_ticket_support"];
            $true_ri_find = 0;
            if(array_key_exists('piece_perte_personne',$_POST)){
            if($_POST['piece_perte_personne'] === '0' || $_POST['piece_perte_personne'] === '-1'){
              $db_ri_select = $dbri->select();
              $db_ri_select->from('eu_renseignement_identite',array('MAX(id) as count'));
              $ri_find = $dbri->fetchAll($db_ri_select);
              $true_ri_find = $ri_find[0]['count'] + 1;
                 $ri = array(
                   'id'=>$true_ri_find,
                   'nom'=>$_POST['nom_perte'],
                   'prenoms'=>$_POST["prenom_perte"],
                   'sexe'=>$_POST['sexe_perte'],
                   'ville'=>$_POST['ville_perte'],
                   'nationalite'=>$_POST['nationalite_perte'],
                   'email'=>$_POST['email_perte'],
                   'pere'=>$_POST['nom_pere_perte'],
                   'mere'=>$_POST['nom_mère_perte'],
                   'cellulaire'=>$_POST['cellulaire_perte'],
                   'telephone'=>$_POST['telephone_perte'],
                   'matrimonial'=>$_POST['situation_matrimoniale_perte'],
                   'profession'=>$_POST['profession_perte'],
                   'date_naissance'=>$_POST['date_naissance_perte'],
                   'religion'=>$_POST['religion_perte'],
                   'lieu_naissance'=>$_POST['lieu_naissance_perte'],
                   'quartier'=>$_POST['quartier_perte'],
                   'nbre_enfant'=>$_POST['nombre_enfant_perte'],
                   'cantons'=>$_POST['canton_perte'],
                   'addresse'=>$_POST['adresse_perte'],
                   'bp'=>$_POST['bp_perte'],
                   'monetaire'=>$_POST['zone_monetaire_perte'],
                   'pays'=>$_POST['pays_perte'],
                   'region'=>$_POST['region_perte'],
                   'prefecture'=>$_POST['prefecture_perte'],
                   'perdu'=>$_POST['piece_perte_personne'],
                   'qualite_responsable'=>$_POST['qualite_responsable_perte'],
                   'nom_responsable'=>$_POST['nom_responsable_personne_perte'],
                   'telephone_responsable'=>$_POST['numero_responsable_telephone_personne_perte'],
                   'code_membre_responsable'=>$_POST['code_membre_responsable_personne_perte'],
                   'created'=>$created->toString('yyyy-MM-dd HH:mm:ss'));
                  $dbri->insert($ri);
              }
          }


		
        include("Transfert.php");
        $upload_file = "";
		if(isset($_FILES['file_name']['name']) && $_FILES['file_name']['name']!=""){
		$chemin	= "../../webfiles/pdf_upload/";
		$file = $_FILES['file_name']['name'];
        $file1='file_name';
        $upload_file = "true";        
		$file_name = transfert($chemin,$file1);
		}else{
			$file_name = "";
		}


          $ts = array(
             'id_ticket'=>$true_mature_capa,
             'renseignement_id'=>$true_ri_find,
             'numero_demandeur'=>$numero_demandeur,
             'telephone'=>$_POST["integrateur_telephone_ticket_support"],
             'email'=>$_POST['integrateur_email_ticket_support'],
             'lieu'=>$_POST['integrateur_lieu_demandeur_ticket_support'],
             'addresse_integrateur'=>$_POST['integrateur_addresse'],
             'code_membre_demandeur'=>$_POST['integrateur_code_membre_ticket_support'],
             'description'=>$_POST['integrateur_description_probleme'],
             'file_name'=>$file_name,
             'created'=>$created->toString('yyyy-MM-dd HH:mm:ss'));
          $dbts->insert($ts);
          
         $resultjson = array(
          'resultat' => 1,
          'message' => "Votre ticket de support a été parfaitement enregistré."
         );
        }

        header('Content-type:application/json');
        die(json_encode($resultjson));
  }	  


   public function listingticketbycodemembreAction(){
      $dbts = new Application_Model_DbTable_EuTicketSupport();
      $ts = new Application_Model_EuTicketSupport();
      $dbasts = new Application_Model_DbTable_EuAssociationTicketComite();
      $asts = new Application_Model_EuAssociationTicketComite();
      $validationerrors = array();
      $validationemailerrors = array();
      $validationperteerrors = array();
      $validationpertesuccess = array();
      $resultjson = array();
      $link_files = array();
      $response_all = "";
      $statut_out_all = "";
      $statut_put_all = "";
      $response_download_file = "";
      
      $this->_helper->layout->disableLayout();
      $days = array(
       "1"=>"1","2"=>"2","3"=>"3","4"=>"4","5"=>"5","6"=>"6","7"=>"7","8"=>"8","9"=>"9","10"=>"10","11"=>"11","12"=>"12","13"=>"13","14"=>"14","15"=>"15","16"=>"16","17"=>"17","18"=>"18","19"=>"19","20"=>"20","21"=>"21","22"=>"22","23"=>"23","24"=>"24","25"=>"25","26"=>"26","27"=>"27","28"=>"28","29"=>"29","30"=>"30","31"=>"31");
      $years = array("2016"=>"2016","2017"=>"2017","2018"=>"2018","2019"=>"2019","2020"=>"2020","2021"=>"2021","2022"=>"2022","2023"=>"2023","2024"=>"2024","2025"=>"2025","2026"=>"2026","2027"=>"2027","2028"=>"2028","2029"=>"2029","2030"=>"2030","2031"=>"2031","2032"=>"2032","2033"=>"2033","2034"=>"2034","2035"=>"2035","2036"=>"2036","2037"=>"2037","2038"=>"2038","2039"=>"2039","2040"=>"2040");

      $months = array('01'=>'Janvier','02'=>'Fevrier','03'=>'Mars','04'=>'Avril','05'=>'Mai','06'=>'Juin','07'=>'Juillet','08'=>'Aout','09'=>'Septembre','10'=>'Octobre','11'=>'Novembre','12'=>'Decembre');

/* 
      if($_SERVER['REQUEST_METHOD'] != 'POST'){
        	http_response_code(403);
        	die();
      }
*/
$demandeur = $_POST['code_membre_demandeur'];
      $dbtselect = $dbts->select();
      $dbtselect->from('eu_ticket_support');
      $dbtselect->where('code_membre_demandeur like ?', $demandeur);
      $dbtselect->where('valid = 0 OR valid = 5 OR valid = 6');
      $dbtselect_all = $dbts->fetchAll($dbtselect);
      foreach ($dbtselect_all as $key => $value) {
          		$true_month = "";
				$true_archive_month = "";
				$true_archivage_date = "";
                $link_files = array();
				$ex_date = explode('-',$value->created);
				$ex_archive_date = explode('-',$value->date_validation);
                $id_ticket_support = $value->id_ticket;
      $dbastselect = $dbasts->select();
                     $dbastselect->from('eu_association_ticket_comite');
                     $dbastselect->where('id_ticket like ?', $id_ticket_support);
      $dbastselect_all = $dbasts->fetchAll($dbastselect);
      if(count($dbastselect_all) > 0){
         $response_all = $dbastselect_all[0]['observation'];
         $statut_out_all = $dbastselect_all[0]['statut'];
            if($dbastselect_all[0]['file_observation'] != ""){
                $file_response = $dbastselect_all[0]['file_observation'];
                $response_download_file = "http://webfiles.gacsource.net/pdf_ticket_traite_upload/".$file_response;
            }else{
                $response_download_file = "";
            }
      }else{
          $response_all = "";
          $statut_out_all = "";
      }

      if($value->valid == "0"){
          $statut_put_ticket = "emission";
      }else{
          $statut_put_ticket = "réponse";
      }
      
				foreach ($months as $ky => $vad) {
				  if($ex_archive_date[1] == $ky){
							$true_archive_month = $vad;
				  }
				  if($ex_date[1] == $ky){
							$true_month = $vad;
				   }
				}
			$next_ex_date = explode(' ', $ex_date[2]);
			$next_ex_archivage_date = explode(' ', $ex_archive_date[2]);
			$true_date = $next_ex_date[0]." ".$true_month." ".$ex_date[0]." à ".$next_ex_date[1];
			$true_archivage_date = $next_ex_archivage_date[0]." ".$true_archive_month." ".$ex_archive_date[0]." à ".$next_ex_archivage_date[1];
    

            if($value->file_name === "true"){
               $new_code_file = str_replace('/','_',$value->numero_demandeur);
               $true_new_code_file = str_replace('TS','FILES',$new_code_file);
               $src_file = "../../webfiles/pdf_upload/".$true_new_code_file;
               if($folder = opendir($src_file)){
                   while (false !== ($files = readdir($folder))) {
                       if($files != "." && $files != ".." && $files != "index.php"){
                            $ex_files = explode('.',$files);
                            if(in_array($ex_files[1], array('jpg','jpeg','png'))){
                               $link_files[] = "http://webfiles.gacsource.net/pdf_upload/".$true_new_code_file."/".$files;
                            }
                       }
                   }
               }
            }

            if($value->renseignement_id > 0){

            }

          $resultjson[] = array(
              'numero_demandeur'=>$value->numero_demandeur,
              'description'=>$value->description,
              'reponse_ticket'=>$response_all,
              'statut_reponse_ticket'=>$statut_out_all,
              'statut_ticket'=>$statut_put_all,
              'file_download_ticket'=>$response_download_file,
              'code_membre_demandeur'=>$value->code_membre_demandeur,
              'valid'=>$value->valid,
              'visa_one'=>$value->visa_one,
              'visa_two'=>$value->visa_two,
              'avis_one'=>$value->avis_one,
              'avis_two'=>$value->avis_two,
              'email'=>$value->email,
              'telephone'=>$value->telephone,              
              'date_emission_ticket'=> $true_date,
              'lieu'=>$value->lieu,
              'date_traitement_ticket'=>$true_archivage_date,
              'link_downloadfiles_ticket'=>$link_files
          );
      }
        header('Content-type:application/json');
        die(json_encode($resultjson));
   }

   public function listingticketresponsebycodemembreAction(){
      $dbts = new Application_Model_DbTable_EuTicketSupport();
      $ts = new Application_Model_EuTicketSupport();
      $dbasts = new Application_Model_DbTable_EuAssociationTicketComite();
      $asts = new Application_Model_EuAssociationTicketComite();
      $validationerrors = array();
      $validationemailerrors = array();
      $validationperteerrors = array();
      $validationpertesuccess = array();
      $resultjson = array();
      $link_files = array();
      $this->_helper->layout->disableLayout();
      $days = array(
       "1"=>"1","2"=>"2","3"=>"3","4"=>"4","5"=>"5","6"=>"6","7"=>"7","8"=>"8","9"=>"9","10"=>"10","11"=>"11","12"=>"12","13"=>"13","14"=>"14","15"=>"15","16"=>"16","17"=>"17","18"=>"18","19"=>"19","20"=>"20","21"=>"21","22"=>"22","23"=>"23","24"=>"24","25"=>"25","26"=>"26","27"=>"27","28"=>"28","29"=>"29","30"=>"30","31"=>"31");
      $years = array("2016"=>"2016","2017"=>"2017","2018"=>"2018","2019"=>"2019","2020"=>"2020","2021"=>"2021","2022"=>"2022","2023"=>"2023","2024"=>"2024","2025"=>"2025","2026"=>"2026","2027"=>"2027","2028"=>"2028","2029"=>"2029","2030"=>"2030","2031"=>"2031","2032"=>"2032","2033"=>"2033","2034"=>"2034","2035"=>"2035","2036"=>"2036","2037"=>"2037","2038"=>"2038","2039"=>"2039","2040"=>"2040");

      $months = array('01'=>'Janvier','02'=>'Fevrier','03'=>'Mars','04'=>'Avril','05'=>'Mai','06'=>'Juin','07'=>'Juillet','08'=>'Aout','09'=>'Septembre','10'=>'Octobre','11'=>'Novembre','12'=>'Decembre');

/*
      if($_SERVER['REQUEST_METHOD'] != 'POST'){
        	http_response_code(403);
        	die();
      }*/
      $dbtselect = $dbts->select();
      $dbtselect->from('eu_ticket_support');
      $dbtselect->where('code_membre_demandeur like ?',$_POST['code_membre_demandeur']);
      $dbtselect->where('valid = 5 OR valid = 6');
      $dbtselect_all = $dbts->fetchAll($dbtselect);
      foreach ($dbtselect_all as $key => $value) {
          		$true_month = "";
				$true_archive_month = "";
				$true_archivage_date = "";
                $link_files = array();
				$ex_date = explode('-',$value->created);
				$ex_archive_date = explode('-',$value->date_validation);

				foreach ($months as $ky => $vad) {
				  if($ex_archive_date[1] == $ky){
							$true_archive_month = $vad;
				  }
				  if($ex_date[1] == $ky){
							$true_month = $vad;
				   }
				}
			$next_ex_date = explode(' ', $ex_date[2]);
			$next_ex_archivage_date = explode(' ', $ex_archive_date[2]);
			$true_date = $next_ex_date[0]." ".$true_month." ".$ex_date[0]." à ".$next_ex_date[1];
			$true_archivage_date = $next_ex_archivage_date[0]." ".$true_archive_month." ".$ex_archive_date[0]." à ".$next_ex_archivage_date[1];
    

            if($value->file_name === "true"){
               $new_code_file = str_replace('/','_',$value->numero_demandeur);
               $true_new_code_file = str_replace('TS','FILES',$new_code_file);
               $src_file = "../../webfiles/pdf_upload/".$true_new_code_file;
               if($folder = opendir($src_file)){
                   while (false !== ($files = readdir($folder))) {
                       if($files != "." && $files != ".." && $files != "index.php"){
                            $ex_files = explode('.',$files);
                            if(in_array($ex_files[1], array('jpg','jpeg','png'))){
                               $link_files[] = "http://webfiles.gacsource.net/pdf_upload/".$true_new_code_file."/".$files;
                            }
                       }
                   }
               }
            }
            $filename = $value->file_name;
            if($value->file_name != "" && $value->file_name != "true"){
                 $link_files = "http://webfiles.gacsource.net/pdf_upload/".$filename;
            }

            if($value->renseignement_id > 0){

            }
          $resultjson[] = array(
              'numero_demandeur'=>$value->numero_demandeur,
              'description'=>$value->description,
              'code_membre_demandeur'=>$value->code_membre_demandeur,
              'visa_one'=>$value->visa_one,
              'visa_two'=>$value->visa_two,
              'avis_one'=>$value->avis_one,
              'avis_two'=>$value->avis_two,
              'email'=>$value->email,
              'telephone'=>$value->telephone,              
              'date_emission_ticket'=> $true_date,
              'lieu'=>$value->lieu,
              'date_traitement_ticket'=>$true_archivage_date,
              'link_downloadfiles_emission_ticket'=>$link_files
          );
      }
        header('Content-type:application/json');
        die(json_encode($resultjson));
   }

   public function uploadticketAction(){
      $dbts = new Application_Model_DbTable_EuTicketSupport();
      $ts = new Application_Model_EuTicketSupport();
      $created = Zend_Date::now();
      $validationerrors = array();
      $validationemailerrors = array();
      $validationperteerrors = array();
      $validationpertesuccess = array();
      $resultjson = array();
      
      $this->_helper->layout->disableLayout();

      if($_SERVER['REQUEST_METHOD'] != 'POST'){
        	http_response_code(403);
        	die();
      }
    print_r($_FILES);           
            $files = $_FILES['ticket_multiple_upload_file'];
                        
            foreach ($files as $key => $value) {
                $fi = $_FILES['ticket_multiple_upload_file']["name"];

              if(!array_key_exists('name',$files)){
               $validationerrors['errors_file_name'] = "Le n  fichiers n'existe pas";
              }
              if(!array_key_exists('type',$files)){
                  $validationerrors['errors_file_type'] = "Le typfichiers n'existe pas";
              }

              if(!array_key_exists('tmp_name',$files)){
                $validationerrors['errors_file_tmp_name'] = "Le Chemin des fichiers n'existe pas";
              }

              if(!array_key_exists('size',$files)){
                $validationerrors['errors_size'] = "La taille des Fichiers n'existe pas";
              }
              if($files['name'] === "" || empty($files['name'])){
                $validationerrors['empty_file_name'] = "Le nom des fichiers ne doit pas être vide";
              }
              if($files['type'] === "" || empty($files['type'])){
                $validationerrors['empty_file_type'] = "Le type des fichiers ne doit pas être vide";
              }
              if($files['tmp_name'] === "" || empty($files['tmp_name'])){
                $validationerrors['empty_file_tmp_name'] = "Le Chemin des fichiers ne doit pas être vide";
              }
              if($files['size'] === "" || empty($files['size'])){
                $validationerrors['empty_file_size'] = "La taille des fichiers ne doit pas être vide";
              }
             }
              $total_files = count($_FILES['ticket_multiple_upload_file']['name']);
              for($i=0; $i<$total_files; $i++) {
              $extension = strtolower(pathinfo($_FILES['ticket_multiple_upload_file']['name'][$i],PATHINFO_EXTENSION));
                 if(!in_array($extension,array('pdf','jpg','png','jpeg')) || !in_array($_FILES['ticket_multiple_upload_file']['type'][$i], array("application/pdf","image/jpg","image/jpeg","image/png"))){
                    $validationerrors['extensions'] = "Ce type de fichier n'est pas autorisé";
                 }
              }
           
           if(!empty($validationerrors)){
               $resultjson = array(
                 'resultat' => 0,
                 'message' => $validationerrors
               );
           }       

           if(empty($validationerrors)){
              $db_ts_select = $dbts->select();
              $db_ts_select->from('eu_ticket_support',array('MAX(id_ticket) as count'));
              $mature_capa = $dbts->fetchAll($db_ts_select);
              $true_mature_capa = $mature_capa[0]['count'];
              $true_ri_find = 0;
                $ts = array('file_name'=>"true");
                $dir_files = $true_mature_capa."_ESMC_FILES_".$_POST["integrateur_demandeur_ticket_support"];
                $src_file = "../../webfiles/pdf_upload/$dir_files";
                mkdir($src_file,0777);
                $total_files = count($_FILES['ticket_multiple_upload_file']['name']);
                for($i=0; $i<$total_files; $i++) {
                  $tmpFilePath = $_FILES['ticket_multiple_upload_file']['tmp_name'][$i];
                  if ($tmpFilePath != ""){
                   $file_ticket = explode('.',$_FILES['ticket_multiple_upload_file']['name'][$i]);
                   $true_file_ticket = $file_ticket[1];
                   $true_name_ticket = $true_mature_capa."_$i".".".$file_ticket[1];
                   $newFilePath = "../../webfiles/pdf_upload"."/".$dir_files."/".$true_name_ticket;
                   move_uploaded_file($tmpFilePath, $newFilePath);
                  }
                }
              if($dbts->update($ts,array('id_ticket = ?'=>$true_mature_capa))){
                 $resultjson = array(
                  'resultat' => 1,
                  'message' => "La pièce jointe au ticket de support a été parfaitement enregistré."
                );
              }
           }
        header('Content-type:application/json');
        die(json_encode($resultjson));
   }

	public function verifcodebanAction()
	{
		/* page espacepersonnel/addcomptebancaire - Ajout comptebancaire */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

if ($_POST['code_BAn']!="") {
	$bon_neutreM = new Application_Model_EuBonNeutreMapper();
if($bon_neutre = $bon_neutreM->fetchAllByCode($_POST['code_BAn'])){

				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => $bon_neutre->bon_neutre_montant_solde
                        	)
                        );
} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Code Erroné, reprenez"
                        	)
                        );
}
} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Aucun resultat"
                        	)
                        );
}
}







	public function recherchecodebanAction()
	{
		/* page espacepersonnel/addcomptebancaire - Ajout comptebancaire */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

if ($_POST['code_membre']!="") {
	$bon_neutreM = new Application_Model_EuBonNeutreMapper();
if($bon_neutre = $bon_neutreM->fetchAllByMembre($_POST['code_membre'])){

				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1",  
	                        	'message' => "Code BAn trouvé",
	                        	'code_BAn' => $bon_neutre->bon_neutre_code, 
	                        	'montant' => $bon_neutre->bon_neutre_montant, 
	                        	'utilise' => $bon_neutre->bon_neutre_montant_utilise, 
	                        	'solde' => $bon_neutre->bon_neutre_montant_solde

                        	)
                        );
} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Code Membre Erroné, reprenez"
                        	)
                        );
}
} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Aucun resultat"
                        	)
                        );
}
}



	public function recherchebonAction()
	{
		/* page espacepersonnel/addcomptebancaire - Ajout comptebancaire */

		$sessionmembre = new Zend_Session_Namespace('membre');
		$this->_helper->layout->disableLayout();
		//$this->_helper->layout()->setLayout('layoutpublicesmc');

		/*if (!isset($sessionmembre->code_membre)) {
			$this->_redirect('/');
		}
	if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}*/

if ($_POST['code_membre']!="") {
	$bonM = new Application_Model_EuBonMapper();
if($bon = $bonM->fetchAllByMembre($_POST['code_membre'], $_POST['bontype'])){

	     if(count($bon) >= 1)  {
		    for($i = 0; $i < count($bon); $i++) {
               $value = $bon[$i];

               $data[$i] = array(
	                        	'resultat' => "1",  
	                        	'message' => "Code ".$_POST['bontype']." trouvé",
	                        	'code_bon' => $value->bon_numero, 
	                        	'montant' => $value->bon_montant, 
	                        	'distributeur' => $value->bon_code_membre_distributeur, 
	                        	'date' => $value->bon_date
              );		   
		   }
           $this->view->error = Zend_Json::encode($data);
		   }
} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Code Membre Erroné, reprenez"
                        	)
                        );
}
} else {
				$this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Aucun resultat"
                        	)
                        );
}
}


	  
	   public  function listfiliereAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $data = array();
		 $datas['listefilieres'] = array();
		 $t_filiere = new Application_Model_DbTable_EuFiliere();
		 $select = $t_filiere->select();
		 $select->order('nom_filiere asc');
	     $select->from($t_filiere);
	     $filieres = $t_filiere->fetchAll($select);
	  
	     if(count($filieres) >= 1)  {
		   for($i = 0; $i < count($filieres); $i++) {
              $value = $filieres[$i];
			  $nom_filiere = $value->nom_filiere;
			  $reponse = ucfirst(htmlentities(utf8_decode($nom_filiere)));
			  $reponsetraiter = str_replace("?","e",$reponse);		   
              $data[$i] = array(
			    'id_filiere' => $value->id_filiere, 
				'libelle'    => $reponsetraiter
              );		   
		   }
		   //$datas['listefilieres'] = $data;
           $this->view->data = $data;
		   
		 }
	  
	  }
	  



	  
	  public  function listfournisseurbpsAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $data = array();
        $acteurcreneau = new Application_Model_EuActeurCreneauMapper();
        $acteurcreneaus = $acteurcreneau->fetchAllActeur();
		 	  
	     if(count($acteurcreneaus) >= 1)  {
		    for($i = 0; $i < count($acteurcreneaus); $i++) {
               $value = $acteurcreneaus[$i];

			   $nom_acteur = $value->nom_acteur;
			   $reponse_nom_acteur = ucfirst(htmlentities(utf8_decode($nom_acteur)));
			   $reponsetraiter_nom_acteur = str_replace("?","e",$reponse_nom_acteur);

               $data[$i] = array(
			     'code_acteur' => $value->code_acteur, 
			     'nom_acteur' => $reponsetraiter_nom_acteur, 
			     'code_membre' => $value->code_membre, 
			     'id_type_acteur' => $value->id_type_acteur, 
			     'code_membre_gestionnaire' => $value->code_membre_gestionnaire, 
			     'date_creation' => $value->date_creation, 
			     'id_utilisateur' => $value->id_utilisateur, 
			     'groupe' => $value->groupe, 
			     'code_creneau' => $value->code_creneau, 
			     'code_gac_filiere' => $value->code_gac_filiere, 
			     'id_filiere' => $value->id_filiere, 
			     'focus' => $value->focus
               );
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  




	  
	  public  function listarticlefournisseurAction()  {
	     $this->_helper->layout()->disableLayout();
		 
if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
		 $data = array();
        $article_stockes = new Application_Model_EuArticleStockesMapper();
        $article_stockess = $article_stockes->fetchAllByVendeur($_POST['code_membre']);
		 	  
	     if(count($article_stockess) >= 1)  {
		    for($i = 0; $i < count($article_stockess); $i++) {
               $value = $article_stockess[$i];

			   $designation = $value->designation;
			   $reponse_designation = ucfirst((utf8_decode($designation)));
			   $reponsetraiter_designation = str_replace("?","e",$reponse_designation);


			   $tegc = new Application_Model_EuTegc();
        $tegcM = new Application_Model_EuTegcMapper();
        $tegcM->find($value->categorie, $tegc);
//($entry->lib_type_credit);
			   $reponse_nom_tegc = ucfirst(htmlentities(utf8_decode($tegc->nom_tegc)));
			   $reponsetraiter_nom_tegc = str_replace("?","e",$reponse_nom_tegc);


	$tauxescompte = Util_Utils::getParametre('taux','escompte');
      $pck = Util_Utils::getParametre('pck','nr');
      $prkM = new Application_Model_EuPrkMapper();
      $prks = $prkM->fetchByTegc($value->categorie);
      $prks0 = $prks[0];
      $prk = $prks0->valeur;
      $mont_bc = $value->prix;
      $partie = (($mont_bc * 100) + ($tauxescompte * $mont_bc))/100;
      $mont_msbcnr = floor(($partie * $pck) / $prk); 


               $data[$i] = array(
            'id_article_stockes' => $value->id_article_stockes,
            'code_barre' => $value->code_barre,
            'reference' => $value->reference,
            'designation' => $reponsetraiter_designation,
            'prix' => $mont_msbcnr,
            'prix_normal' => $value->prix,
            'date_enregistrement' => $value->date_enregistrement,
            'publier' => $value->publier,
            'vendu' => $value->vendu,
            'categorie' => $value->categorie,
            'nom_tegc' => $reponsetraiter_nom_tegc,
            'type' => $value->type,
            'imageArticle' => $value->imageArticle,
            'code_membre_morale' => $value->code_membre_morale,
            'remise' => $value->remise
               );
            } 
		 } else {
            //$data = '';
         }
         $this->view->data = $data;
	  
} else {
				$this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Aucun resultat"
                        );
}
	  }
	  








  public function panierAction()
  {
    /* page espacepersonnel/panier - Achat en ligne */

    //$sessionpanier = new Zend_Session_Namespace('panier');
    //$sessionmembre = new Zend_Session_Namespace('membre');
    $this->_helper->layout->disableLayout();
    //$this->_helper->layout()->setLayout('layoutesmc');

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

    //if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
      if (isset($_POST['code_membre_acheteur']) && $_POST['code_membre_acheteur'] != "" && isset($_POST['id_prefecture']) && $_POST['id_prefecture'] != "" && isset($_POST['quartier_acheteur']) && $_POST['quartier_acheteur'] != "" && isset($_POST['ville_acheteur']) && $_POST['ville_acheteur'] != "" && isset($_POST['tel_acheteur']) && $_POST['tel_acheteur'] != "" && isset($_POST['mode_livraison']) && $_POST['mode_livraison'] != "") {


        $date_id = new Zend_Date(Zend_Date::ISO_8601);

//$code_confirmation = strtoupper(Util_Utils::genererCodeSMS(10));
/*do{
                    $code_confirmation = strtoupper(Util_Utils::genererCodeSMS(10));
                    $commande2_mapper = new Application_Model_EuCommandeMapper();
                    $commande2 = $commande2_mapper->fetchAllByCodeConfirmation($code_confirmation);
}while(count($commande2) > 0);*/

/*$date_commande = $date_id->toString('yyyy-MM-dd HH:mm:ss');

        $commande = new Application_Model_EuCommande();
        $m_commande = new Application_Model_EuCommandeMapper();

          $compt_commande = $m_commande->findConuter() + 1;

          $commande->setCode_commande($compt_commande);
          $commande->setDate_commande($date_commande);
          $commande->setMontant_commande($_POST['montant']);
          $commande->setCode_membre_acheteur($_POST['code_membre_acheteur']);
          $commande->setCode_membre_vendeur($_POST['code_membre_vendeur']);
          $commande->setCode_membre_livreur(NULL);
          $commande->setCode_membre_transitaire(NULL);
          $commande->setCode_membre_transporteur(NULL);
          $commande->setQuartier_acheteur($_POST['quartier_acheteur']);
          $commande->setVille_acheteur($_POST['ville_acheteur']);
          $commande->setTel_acheteur($_POST['tel_acheteur']);
          $commande->setAdresse_livraison($_POST['adresse_livraison']);
          $commande->setCode_confirmation($code_confirmation);
          $commande->setCode_livraison(NULL);
          $commande->setExecuter(0);
          $commande->setLivrer(0);
          $commande->setFrais_livraison(0);
          $commande->setFrais_transit(0);
          $commande->setFrais_transport(0);
          $commande->setDate_livraison(NULL);
          $commande->setCode_zone($_POST['code_zone']);
          $commande->setId_pays($_POST['id_pays']);
          $commande->setId_region($_POST['id_region']);
          $commande->setId_prefecture($_POST['id_prefecture']);
          $commande->setMode_livraison($_POST['mode_livraison']);
          $commande->setType_recurrent($_POST['type_recurrent']);
          $commande->setPeriode_recurrent($_POST['periode_recurrent']);
          $commande->setType_bon($_POST['type_bon']);
          $commande->setMontant_livraison($_POST['montant_livraison']);
          $m_commande->save($commande);*/

$montant = 0;
$montant_msbcnr = 0;

for($i = 0; $i < count($_POST['produit']); $i++){
if($_POST['produit'][$i] > 0){

        $article_stockes = new Application_Model_EuArticleStockes();
        $article_stockes_Mapper = new Application_Model_EuArticleStockesMapper();
        $article_stockes_Mapper->find($_POST['produit'][$i], $article_stockes);


        /*$detailcommande = new Application_Model_EuDetailCommande();
        $m_detailcommande = new Application_Model_EuDetailCommandeMapper();

          $compt_detailcommande = $m_detailcommande->findConuter() + 1;

          $detailcommande->setId_detail_commande($compt_detailcommande);
          $detailcommande->setCode_commande($compt_commande);
          $detailcommande->setQte($_POST['qte'][$i]);
          $detailcommande->setPrix_unitaire($produit[$i][3]);
          $detailcommande->setReference($produit[$i][1]);
          $detailcommande->setDesignation($produit[$i][2]);
          $detailcommande->setLivrer(0);
          $detailcommande->setRemise($produit[$i][7]);
          $detailcommande->setPrepayer(1);
          $detailcommande->setCode_barre($produit[$i][0]);
          $m_detailcommande->save($detailcommande);*/


$montant += $article_stockes->prix * $_POST['qte'][$i];

	$tauxescompte = Util_Utils::getParametre('taux','escompte');
      $pck = Util_Utils::getParametre('pck','nr');
      $prkM = new Application_Model_EuPrkMapper();
      $prks = $prkM->fetchByTegc($article_stockes->categorie);
      $prks0 = $prks[0];
      $prk = $prks0->valeur;
      $mont_bc = $montant;
      $partie = (($mont_bc * 100) + ($tauxescompte * $mont_bc))/100;
      $mont_msbcnr = floor(($partie * $pck) / $prk); 
$montant_msbcnr += ($mont_msbcnr);

}
}

/*$code_envoi = "Vous venez de lancer une commande. Veuillez confirmer avec ce code : " . $code_confirmation . ". ESMC";
          $date_id = new Zend_Date(Zend_Date::ISO_8601);
          $sms_connexion1 = new Application_Model_EuSmsConnexion();
          $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

          $compteur = $sms_connexion1_mapper->findConuter() + 1;
          $sms_connexion1->setSms_connexion_id($compteur);
          $sms_connexion1->setSms_connexion_code_envoi($code_confirmation);
          $sms_connexion1->setSms_connexion_code_recu($code_envoi);
          $sms_connexion1->setSms_connexion_code_membre($_POST['code_membre_acheteur']);
          $sms_connexion1->setSms_connexion_utilise(0);
          $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
          $sms_connexion1_mapper->save($sms_connexion1);


        $errorlogin = "Commande bien effectuée. Veuillez confirmer avec le code de confirmation que vous allez recevoir par SMS ...";
        $compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms3Easys($compteur, $_POST['tel_acheteur'], $code_envoi);

        $this->_redirect('/boutiqueligne/panierconfirme');
*/

if($_POST['mode_livraison'] == 1){
$ttarif_livraison = new Application_Model_DbTable_EuTarifLivraison();
        $select = $ttarif_livraison->select();
        $select->where('code_membre LIKE ?', $_POST['code_membre_vendeur']);
        $select->where('id_prefecture = ?', $_POST['id_prefecture']);
        $results = $ttarif_livraison->fetchRow($select);
$montant_tarif_livraison = $results->montant_tarif_livraison;
}else{
$montant_tarif_livraison = 0;	
}



				$this->view->data = array(
	                        	'resultat' => "1", 
	                        	'message' => "Montant total des articles et montant de la livraison",
	                        	'montant_article' => $montant, 
	                        	'montant_msbcnr' => $montant_msbcnr, 
	                        	'montant_livraison' => $montant_tarif_livraison, 

                        );


       } else {
				$this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Aucun resultat"
                        );
      }

  }








  public function paniercommandeAction()
  {
    /* page espacepersonnel/panier - Achat en ligne */

    //$sessionpanier = new Zend_Session_Namespace('panier');
    //$sessionmembre = new Zend_Session_Namespace('membre');
    $this->_helper->layout->disableLayout();
    //$this->_helper->layout()->setLayout('layoutesmc');

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

    //if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
      if (isset($_POST['code_membre_acheteur']) && $_POST['code_membre_acheteur'] != "" && isset($_POST['id_prefecture']) && $_POST['id_prefecture'] != "" && isset($_POST['quartier_acheteur']) && $_POST['quartier_acheteur'] != "" && isset($_POST['ville_acheteur']) && $_POST['ville_acheteur'] != "" && isset($_POST['tel_acheteur']) && $_POST['tel_acheteur'] != "" && isset($_POST['mode_livraison']) && $_POST['mode_livraison'] != "") {


        $date_id = new Zend_Date(Zend_Date::ISO_8601);

//$code_confirmation = strtoupper(Util_Utils::genererCodeSMS(10));
do{
                    $code_confirmation = strtoupper(Util_Utils::genererCodeSMS(10));
                    $commande2_mapper = new Application_Model_EuCommandeMapper();
                    $commande2 = $commande2_mapper->fetchAllByCodeConfirmation($code_confirmation);
}while(count($commande2) > 0);/**/

$date_commande = $date_id->toString('yyyy-MM-dd HH:mm:ss');

        $commande = new Application_Model_EuCommande();
        $m_commande = new Application_Model_EuCommandeMapper();

          $compt_commande = $m_commande->findConuter() + 1;

          $commande->setCode_commande($compt_commande);
          $commande->setDate_commande($date_commande);
          $commande->setMontant_commande($_POST['montant_article']);
          $commande->setCode_membre_acheteur($_POST['code_membre_acheteur']);
          $commande->setCode_membre_vendeur($_POST['code_membre_vendeur']);
          $commande->setCode_membre_livreur(NULL);
          $commande->setCode_membre_transitaire(NULL);
          $commande->setCode_membre_transporteur(NULL);
          $commande->setQuartier_acheteur($_POST['quartier_acheteur']);
          $commande->setVille_acheteur($_POST['ville_acheteur']);
          $commande->setTel_acheteur($_POST['tel_acheteur']);
          $commande->setAdresse_livraison($_POST['adresse_livraison']);
          $commande->setCode_confirmation($code_confirmation);
          $commande->setCode_livraison(NULL);
          $commande->setExecuter(0);
          $commande->setLivrer(0);
          $commande->setFrais_livraison(0);
          $commande->setFrais_transit(0);
          $commande->setFrais_transport(0);
          $commande->setDate_livraison(NULL);
          $commande->setCode_zone($_POST['code_zone']);
          $commande->setId_pays($_POST['id_pays']);
          $commande->setId_region($_POST['id_region']);
          $commande->setId_prefecture($_POST['id_prefecture']);
          $commande->setMode_livraison($_POST['mode_livraison']);
          $commande->setType_recurrent($_POST['type_recurrent']);
          $commande->setPeriode_recurrent($_POST['periode_recurrent']);
          $commande->setType_bon($_POST['type_bon']);
          $commande->setMontant_livraison($_POST['montant_livraison']);
          $m_commande->save($commande);/**/

$montant = 0;

for($i = 0; $i < count($_POST['produit']); $i++){
if($_POST['produit'][$i] > 0){

        $article_stockes = new Application_Model_EuArticleStockes();
        $article_stockes_Mapper = new Application_Model_EuArticleStockesMapper();
        $article_stockes_Mapper->find($_POST['produit'][$i], $article_stockes);

        $detailcommande = new Application_Model_EuDetailCommande();
        $m_detailcommande = new Application_Model_EuDetailCommandeMapper();

          $compt_detailcommande = $m_detailcommande->findConuter() + 1;

          $detailcommande->setId_detail_commande($compt_detailcommande);
          $detailcommande->setCode_commande($compt_commande);
          $detailcommande->setQte($_POST['qte'][$i]);
          $detailcommande->setPrix_unitaire($article_stockes->prix);
          $detailcommande->setReference($article_stockes->reference);
          $detailcommande->setDesignation($article_stockes->designation);
          $detailcommande->setLivrer(0);
          $detailcommande->setRemise($article_stockes->remise);
          $detailcommande->setPrepayer(1);
          $detailcommande->setCode_barre($article_stockes->code_barre);
          $m_detailcommande->save($detailcommande);/**/


$montant += $article_stockes->prix * $_POST['qte'][$i];
}
}

$code_envoi = "Vous venez de lancer une commande. Veuillez confirmer avec ce code : " . $code_confirmation . ". ESMC";
          $date_id = new Zend_Date(Zend_Date::ISO_8601);
          $sms_connexion1 = new Application_Model_EuSmsConnexion();
          $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

          $compteur = $sms_connexion1_mapper->findConuter() + 1;
          $sms_connexion1->setSms_connexion_id($compteur);
          $sms_connexion1->setSms_connexion_code_envoi($code_confirmation);
          $sms_connexion1->setSms_connexion_code_recu($code_envoi);
          $sms_connexion1->setSms_connexion_code_membre($_POST['code_membre_acheteur']);
          $sms_connexion1->setSms_connexion_utilise(0);
          $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
          $sms_connexion1_mapper->save($sms_connexion1);


        $errorlogin = "Commande bien effectuée. Veuillez confirmer avec le code de confirmation que vous allez recevoir par SMS ...";
        $compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms3Easys($compteur, $_POST['tel_acheteur'], $code_envoi);

/*        $this->_redirect('/boutiqueligne/panierconfirme');
*/

/*if($_POST['mode_livraison'] == 1){
$ttarif_livraison = new Application_Model_DbTable_EuTarifLivraison();
        $select = $ttarif_livraison->select();
        $select->where('code_membre LIKE ?', $_POST['code_membre_vendeur']);
        $select->where('id_prefecture = ?', $_POST['id_prefecture']);
        $results = $ttarif_livraison->fetchRow($select);
$montant_tarif_livraison = $results->montant_tarif_livraison;
}else{
$montant_tarif_livraison = 0;	
}*/

				$this->view->data = array(
	                        	'resultat' => "1", 
	                        	'message' => $errorlogin 

                        );


       } else {
				$this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Aucun resultat"
                        );
      }

  }







  public function panierconfirmeAction()
  {
    //$sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$sessionpanier = new Zend_Session_Namespace('panier');
    $this->_helper->layout->disableLayout();
    //$this->_helper->layout()->setLayout('layoutesmc');

    //if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
      if (isset($_POST['code_confirmation']) && $_POST['code_confirmation'] != "") {

        $commande3_mapper = new Application_Model_EuCommandeMapper();
        $commande3 = $commande3_mapper->fetchAllByCodeConfirmation($_POST['code_confirmation']);
if(count($commande3) > 0){

        $commande = new Application_Model_EuCommande();
        $m_commande = new Application_Model_EuCommandeMapper();
        $m_commande->find($commande3->code_commande, $commande);


if($commande->executer == 0){

/////////////////////////////////////////////////////////////////////////////////////
        //$m_tegc = new Application_Model_EuTegcMapper();
        //$code_tegc = $m_tegc->findCodeMembreCodeTegc($commande->code_membre_vendeur);

        $m_utilisateur = new Application_Model_EuUtilisateurMapper();
        $id_utilisateur = $m_utilisateur->findByMembre2($commande->code_membre_acheteur);

        $m_detail_commande = new Application_Model_EuDetailCommandeMapper();
        $detail_commande = $m_detail_commande->fetchAllByCommande($commande->code_commande);
        $detail = array();
        $i = 0;
foreach ($detail_commande as $value) {

        $m_article_stockes = new Application_Model_EuArticleStockesMapper();
        $article = $m_article_stockes->fectchByCodebarre($value->code_barre);

$detail[$i] = array(
        'codeBarre' => $value->code_barre, 
        'codeMembreAcheteur' => $commande->code_membre_acheteur, 
        'reference' => $value->reference,
        'designation' => $value->designation,
        'codeTegc' => $article->categorie,
        'quantite' => $value->qte,
        'prix' => ($article->prix - $value->remise),
);
$i++;
}




$codeCommande = $commande->code_commande;
$codeConfirmation = $commande->code_confirmation;      
$codeTegc = $detail[0]['codeTegc'];
$idUtilisateur = $id_utilisateur->id_utilisateur;
$numeroTelephone = $commande->tel_acheteur;
$ListArticleVendus = Zend_Json::encode($detail);


$curl = curl_init();

curl_setopt_array($curl, array(
  //CURLOPT_PORT => "9001",10.10.20.21:9001
  CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/boutiqueEnLigne/executerVenteBoutikEnLigne",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS => "{\r\n\t\"codeCommande\" : \"$codeCommande\",\r\n\t\"codeConfirmation\" : \"$codeConfirmation\",      \r\n\t\"codeTegc\" : \"$codeTegc\",\r\n\t\"idUtilisateur\" : $idUtilisateur,\r\n\t\"numeroTelephone\" : \"$numeroTelephone\",\r\n\t\"listArticleVendus\" : $ListArticleVendus\r\n}",
  CURLOPT_HTTPHEADER => array(
    //"authorization: Basic bWFub3U6a2F0YWJhbGU=",
    "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
    //"cache-control: no-cache",
    "content-type: application/json",
    //"postman-token: 21fa2d22-a997-b59a-a5da-8a6c4e2c09fb"
  ),
));



$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  $errorlogin = "cURL Error #:" . $err;
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
        return;
} else {
  $reponses = json_decode($response);
//echo "{\r\n\t\"codeCommande\" : \"$codeCommande\",\r\n\t\"codeConfirmation\" : \"$codeConfirmation\",      \r\n\t\"codeTegc\" : \"$codeTegc\",\r\n\t\"idUtilisateur\" : $idUtilisateur,\r\n\t\"numeroTelephone\" : \"$numeroTelephone\",\r\n\t\"listArticleVendus\" : $ListArticleVendus\r\n}";
  //echo "<br><br>";
if($reponses->resultat == 1){
        $errorlogin = $reponses->message;
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
}else{
  //echo $reponses->resultat;
  //echo $reponses->message;
        $errorlogin = $reponses->message;
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
        return;
}/**/
}
/*



if ($err) {
          $resultjson = array('cURL Error #:' => $err);          
        } else {
             $resultjson = array($response);            
        }
*/
            //header('Content-type:application/json');
           ///die(json_encode($response));















if($reponses->resultat == 1){

/////////////////////////////////////////////////////////////////////////////////////

//$code_livraison = strtoupper(Util_Utils::genererCodeSMS(10));
do{
                    $code_livraison = strtoupper(Util_Utils::genererCodeSMS(10));
                    $commande2_mapper = new Application_Model_EuCommandeMapper();
                    $commande2 = $commande2_mapper->fetchAllByCodeLivraison($code_livraison);
}while(count($commande2) > 0);

$code_envoi = "Vous venez de confirmer votre commande. Voici le code de livraison : " . $code_livraison . ". ESMC";
          $date_id = new Zend_Date(Zend_Date::ISO_8601);
          $sms_connexion1 = new Application_Model_EuSmsConnexion();
          $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

          $compteur = $sms_connexion1_mapper->findConuter() + 1;
          $sms_connexion1->setSms_connexion_id($compteur);
          $sms_connexion1->setSms_connexion_code_envoi($code_livraison);
          $sms_connexion1->setSms_connexion_code_recu($code_envoi);
          $sms_connexion1->setSms_connexion_code_membre($commande->code_membre_acheteur);
          $sms_connexion1->setSms_connexion_utilise(0);
          $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
          $sms_connexion1_mapper->save($sms_connexion1);


          $commande->setCode_livraison($code_livraison);
          $commande->setExecuter(1);
          $m_commande->update($commande);


          $sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
          $sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_confirmation']);
          
            $sms_connexion1 = new Application_Model_EuSmsConnexion();
            $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
            $sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

            $sms_connexion1->setSms_connexion_utilise(1);
            $sms_connexion1_mapper->update($sms_connexion1);


        Zend_Session::namespaceUnset('panier');

        $compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms3Easys($compteur, $commande->tel_acheteur, $code_envoi);
        
        //$errorlogin = $reponses->message;
        $errorlogin = "Opération de commande bien confirmée ...";
        $this->view->data = array(
	                        	'resultat' => "1", 
	                        	'message' => $errorlogin 

                        );
}

      } else{
        $errorlogin = "Comfirmation déjà effectuée ...";
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
      } 

      }else{
        $errorlogin = "Code de confirmation erronné ...";
        //var_dump($commande2);
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
      }


       } else {
        $errorlogin = "Les champs * sont obligatoires";
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
      }



  }



  public function panierconfirmeoldAction()
  {
    //$sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$sessionpanier = new Zend_Session_Namespace('panier');
    $this->_helper->layout->disableLayout();
    //$this->_helper->layout()->setLayout('layoutesmc');

    //if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
      if (isset($_POST['code_confirmation']) && $_POST['code_confirmation'] != "") {

        $commande3_mapper = new Application_Model_EuCommandeMapper();
        $commande3 = $commande3_mapper->fetchAllByCodeConfirmation($_POST['code_confirmation']);
if(count($commande3) > 0){

        $commande = new Application_Model_EuCommande();
        $m_commande = new Application_Model_EuCommandeMapper();
        $m_commande->find($commande3->code_commande, $commande);


if($commande->executer == 0){

/////////////////////////////////////////////////////////////////////////////////////
        $m_tegc = new Application_Model_EuTegcMapper();
        $code_tegc = $m_tegc->findCodeMembreCodeTegc($commande->code_membre_vendeur);

        $m_utilisateur = new Application_Model_EuUtilisateurMapper();
        $id_utilisateur = $m_utilisateur->findByMembre2($commande->code_membre_acheteur);

        $m_detail_commande = new Application_Model_EuDetailCommandeMapper();
        $detail_commande = $m_detail_commande->fetchAllByCommande($commande->code_commande);
        $detail = array();
        $i = 0;
foreach ($detail_commande as $value) {

        $m_article_stockes = new Application_Model_EuArticleStockesMapper();
        $article = $m_article_stockes->fectchByCodebarre($value->code_barre);

$detail[$i] = array(
        'codeBarre' => $value->code_barre, 
        'codeMembreAcheteur' => $commande->code_membre_acheteur, 
        'reference' => $value->reference,
        'designation' => $value->designation,
        'codeTypeCredit' => $article->categorie,
        'quantite' => $value->qte,
        'prix' => ($article->prix - $value->remise),
);
$i++;
}




$codeCommande = $commande->code_commande;
$codeConfirmation = $commande->code_confirmation;      
$codeTegc = $code_tegc;
$idUtilisateur = $id_utilisateur;
$numeroTelephone = $commande->tel_acheteur;
$ListArticleVendus = Zend_Json::encode($detail);


$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_PORT => "9001",
  CURLOPT_URL => "http://10.10.20.7:9001/jmcnpApi/boutiqueEnLigne/executerVenteBoutikEnLigne",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS => "{\r\n\t\"codeCommande\" : \"$codeCommande\"\r\n\t\"codeConfirmation\" : \"$codeConfirmation\"      \r\n\t\"codeTegc\" : \"$codeTegc\"\r\n\t\"idUtilisateur\" : \"$idUtilisateur\"\r\n\t\"numeroTelephone\" : \"$numeroTelephone\"\r\n\t\"ListArticleVendus\" : \"$ListArticleVendus\"\r\n}",
  CURLOPT_HTTPHEADER => array(
    "authorization: Basic bWFub3U6a2F0YWJhbGU=",
    //"cache-control: no-cache",
    "content-type: application/json",
    //"postman-token: 21fa2d22-a997-b59a-a5da-8a6c4e2c09fb"
  ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

/*if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}
*/



if ($err) {
          $resultjson = array('cURL Error #:' => $err);          
        } else {
             $resultjson = array($response);            
        }

            header('Content-type:application/json');
           die(json_encode($resultjson));
















/////////////////////////////////////////////////////////////////////////////////////

//$code_livraison = strtoupper(Util_Utils::genererCodeSMS(10));
do{
                    $code_livraison = strtoupper(Util_Utils::genererCodeSMS(10));
                    $commande2_mapper = new Application_Model_EuCommandeMapper();
                    $commande2 = $commande2_mapper->fetchAllByCodeLivraison($code_livraison);
}while(count($commande2) > 0);

$code_envoi = "Vous venez de confirmer votre commande. Voici le code de livraison : " . $code_livraison . ". ESMC";
          $date_id = new Zend_Date(Zend_Date::ISO_8601);
          $sms_connexion1 = new Application_Model_EuSmsConnexion();
          $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

          $compteur = $sms_connexion1_mapper->findConuter() + 1;
          $sms_connexion1->setSms_connexion_id($compteur);
          $sms_connexion1->setSms_connexion_code_envoi($code_livraison);
          $sms_connexion1->setSms_connexion_code_recu($code_envoi);
          $sms_connexion1->setSms_connexion_code_membre($commande->code_membre_acheteur);
          $sms_connexion1->setSms_connexion_utilise(0);
          $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
          $sms_connexion1_mapper->save($sms_connexion1);


          $commande->setCode_livraison($code_livraison);
          $commande->setExecuter(1);
          $m_commande->update($commande);


          $sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
          $sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_confirmation']);
          
            $sms_connexion1 = new Application_Model_EuSmsConnexion();
            $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
            $sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

            $sms_connexion1->setSms_connexion_utilise(1);
            $sms_connexion1_mapper->update($sms_connexion1);


        Zend_Session::namespaceUnset('panier');

        $compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms3Easys($compteur, $commande->tel_acheteur, $code_envoi);
        
        $errorlogin = "Opération de commande bien confirmée ...";
        $this->view->data = array(
	                        	'resultat' => "1", 
	                        	'message' => $errorlogin 

                        );


      } else{
        $errorlogin = "Comfirmation déjà effectuée ...";
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
      } 

      }else{
        $errorlogin = "Code de confirmation erronné ...";
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
        //var_dump($commande2);
      }


       } else {
        $errorlogin = "Les champs * sont obligatoires";
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $errorlogin 

                        );
      }
//} 



  }


	  
	  public  function listcommuniqueAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $t_communique = new Application_Model_DbTable_EuCommunique();
		 $data = array();
		 
		 $select = $t_communique->select();
	     $select->where("statut = ? ", 1);
        $select->order(array("date_creation DESC"));
        $communiques = $t_communique->fetchAll($select);
	  
	     if(count($communiques) >= 1)  {
		    for($i = 0; $i < count($communiques); $i++) {
               $value = $communiques[$i];
			   //$libelle = $value->titre;
			   //$reponse = ucfirst(htmlentities(utf8_decode($libelle)));
			   //$reponsetraiter = str_replace("?","e",$reponse);
               $data[$i] = array(
			     'id_communique' => $value->id_communique, 
			     'titre' => htmlentities(($value->titre)), 
			     'resume' => htmlentities(($value->resume)), 
			     'description' => $value->description, 
			     'vignette' => $value->vignette, 
			     'liendirect' => $value->liendirect, 
			     'date_creation'  => $value->date_creation
               );
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  
	  







    public function addfichierAction() {
	     $this->_helper->layout()->disableLayout();
		
	       if (isset($_POST['titre']) && $_POST['titre']!="") {
		
		include("Transfert.php");
		if(isset($_FILES['fichier']['name']) && $_FILES['fichier']['name']!=""){
		$chemin	= "fichiers2";
		$file = $_FILES['fichier']['name'];
		$file1='fichier';
		$fichier = $chemin."/".transfert($chemin,$file1);

        $this->view->data = array(
	                        	'resultat' => "1", 
	                        	'message' => $fichier 
                        );

		} else {

        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => NULL
                        );
		}
			
			
		} else {          
			$this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "NULL" 
                        );
  } 
		
    }




  public function addprojetindexAction() {
    /* page projet/addprojet - Ajout d'une projet */
  //$sessionmcnp = new Zend_Session_Namespace('mcnp');

  $this->_helper->layout->disableLayout();
  //$this->_helper->layout()->setLayout('layoutpublicesmc');


      $t_zone = new Application_Model_DbTable_EuZone();
            $zones = $t_zone->fetchAll();
            $this->view->zones = $zones;
            $t_pays = new Application_Model_DbTable_EuPays();
            $pays = $t_pays->fetchAll();
            $this->view->pays = $pays;
            $t_region = new Application_Model_DbTable_EuRegion();
            $regions = $t_region->fetchAll();
            $this->view->regions = $regions;
            $t_prefecture = new Application_Model_DbTable_EuPrefecture();
            $prefectures = $t_prefecture->fetchAll();
            $this->view->prefectures = $prefectures;
            $t_canton = new Application_Model_DbTable_EuCanton();
            $cantons = $t_canton->fetchAll();
            $this->view->cantons = $cantons;


    //if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
      if (isset($_POST['projet_code_membre']) && $_POST['projet_code_membre'] != "" && isset($_POST['projet_libelle']) && $_POST['projet_libelle'] != "" && isset($_POST['projet_description']) && $_POST['projet_description'] != "" && isset($_POST['projet_montant']) && $_POST['projet_montant'] != "" && isset($_POST['code_zone']) && $_POST['code_zone'] != "" && isset($_POST['id_pays']) && $_POST['id_pays'] != "" && isset($_POST['id_region']) && $_POST['id_region'] != "" && isset($_POST['id_prefecture']) && $_POST['id_prefecture'] != "" && isset($_POST['id_canton']) && $_POST['id_canton'] != "") {
         
		 $request = $this->getRequest();
		 if ($request->isPost ())  {
		     $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {


/////////////////////////////////////controle code membre
if(isset($_POST['projet_code_membre']) && $_POST['projet_code_membre']!=""){
if(strlen($_POST['projet_code_membre']) != 20) {
                  $db->rollback();
                                $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci..." 
                        );
                  //$this->_redirect('/projet/addprojetindex');
                  return;
}else{
if(substr($_POST['projet_code_membre'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['projet_code_membre'], $membre);
                                if(count($membre) == 0){
                  $db->rollback();
                                $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ..." 
                        );
                  //$this->_redirect('/projet/addprojetindex');
                  return;
                }
  }else if(substr($_POST['projet_code_membre'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['projet_code_membre'], $membremorale);
                                if(count($membremorale) == 0){
                  $db->rollback();
                                $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ..." 
                        );
                  //$this->_redirect('/projet/addprojetindex');
                  return;
                }
  }
}


                 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                 $projet = new Application_Model_EuProjet();
                 $m_projet = new Application_Model_EuProjetMapper();

                 $projet_id = $m_projet->findConuter() + 1;

                 $projet->setProjet_id($projet_id);
                 $projet->setProjet_libelle($_POST['projet_libelle']);
                 //$projet->setProjet_type($_POST['projet_type']);
                 $projet->setProjet_code_membre($_POST['projet_code_membre']);
                 $projet->setProjet_description($_POST['projet_description']);
                 //$projet->setProjet_centrale($_POST['projet_centrale']);
                 $projet->setProjet_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                 $projet->setProjet_montant($_POST['projet_montant']);
                 $projet->setProjet_stockage($_POST['projet_stockage']);
                 //$projet->setProjet_montant_final($_POST['projet_montant_final']);
                 //$projet->setProjet_observation($_POST['projet_observation']);
                 //$projet->setProjet_utilisateur($_POST['projet_utilisateur']);
                 $projet->setCode_zone($_POST['code_zone']);
                 $projet->setId_pays($_POST['id_pays']);
                 $projet->setId_region($_POST['id_region']);
                 $projet->setId_prefecture($_POST['id_prefecture']);
                 $projet->setId_canton($_POST['id_canton']);
                 $projet->setPublier(1);
                 $m_projet->save($projet);

////////////////////////////////////////////////////////////////////////////////
            include("Transfert.php");
          $detail_projet_fichier = array();

          for($i = 0; $i < count($_POST['detail_projet_libelle']); $i++){
        $detail_projet = new Application_Model_EuDetailProjet();
        $m_detail_projet = new Application_Model_EuDetailProjetMapper();
      
            $compteur_detail_projet = $m_detail_projet->findConuter() + 1;
            $detail_projet->setDetail_projet_id($compteur_detail_projet);
            $detail_projet->setProjet_id($projet_id);
            $detail_projet->setDetail_projet_libelle($_POST['detail_projet_libelle'][$i]);

           if(isset($_FILES["detail_projet_fichier"][$i]["name"]) && $_FILES["detail_projet_fichier"][$i]["name"] != "") {
                  $chemin  = "projets";
                  $file    = $_FILES["detail_projet_fichier"][$i]["name"];
                  $file1   = "detail_projet_fichier".$i;
                  $detail_projet_fichier[$i] = $chemin."/".transfert($chemin,$file1);
               } else { $detail_projet_fichier[$i] = ""; }

            $detail_projet->setDetail_projet_fichier($detail_projet_fichier[$i]);
            $detail_projet->setEtat(1);
            $m_detail_projet->save($detail_projet);
                    }

////////////////////////////////////////////////////////////////////////////////

				 $db->commit();
			     $this->view->data = array(
	                        	'resultat' => "1", 
	                        	'message' => "Operation bien effectuee ..." 
                        );
                 //$this->_redirect('/projet/addprojetindex');
}else{
           $db->rollback();
           $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez renseigner le Code Membre ..." 
                        );

}				 
			  } catch (Exception $exc) {				   
			     $db->rollback();
                 $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $exc->getMessage() . ' : ' . $exc->getTraceAsString() 
                        ); 
                 return;
		      }	 
			   
		  }   
			   
      } else {
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire" 
                        );
      }
    //}
  }





  public function addtravailleurindexAction() {
    /* page travailleur/addtravailleur - Ajout d'une travailleur */
  //$sessionmcnp = new Zend_Session_Namespace('mcnp');

  $this->_helper->layout->disableLayout();
  //$this->_helper->layout()->setLayout('layoutpublicesmc');


      $t_zone = new Application_Model_DbTable_EuZone();
            $zones = $t_zone->fetchAll();
            $this->view->zones = $zones;
            $t_pays = new Application_Model_DbTable_EuPays();
            $pays = $t_pays->fetchAll();
            $this->view->pays = $pays;
            $t_region = new Application_Model_DbTable_EuRegion();
            $regions = $t_region->fetchAll();
            $this->view->regions = $regions;
            $t_prefecture = new Application_Model_DbTable_EuPrefecture();
            $prefectures = $t_prefecture->fetchAll();
            $this->view->prefectures = $prefectures;
            $t_canton = new Application_Model_DbTable_EuCanton();
            $cantons = $t_canton->fetchAll();
            $this->view->cantons = $cantons;


    //if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
      if (isset($_POST['travailleur_code_membre']) && $_POST['travailleur_code_membre'] != "" && isset($_POST['travailleur_libelle']) && $_POST['travailleur_libelle'] != "" && isset($_POST['travailleur_experience']) && $_POST['travailleur_experience'] != "" && isset($_POST['travailleur_education']) && $_POST['travailleur_education'] != "" && isset($_POST['code_zone']) && $_POST['code_zone'] != "" && isset($_POST['id_pays']) && $_POST['id_pays'] != "" && isset($_POST['id_region']) && $_POST['id_region'] != "" && isset($_POST['id_prefecture']) && $_POST['id_prefecture'] != "" && isset($_POST['id_canton']) && $_POST['id_canton'] != "") {
         
		 $request = $this->getRequest();
		 if ($request->isPost ())  {
		     $db = Zend_Db_Table::getDefaultAdapter();
             $db->beginTransaction();
             try {


/////////////////////////////////////controle code membre
if(isset($_POST['travailleur_code_membre']) && $_POST['travailleur_code_membre']!=""){
if(strlen($_POST['travailleur_code_membre']) != 20) {
                  $db->rollback();
                                $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci..." 
                        );
                  //$this->_redirect('/travailleur/addtravailleurindex');
                  return;
}else{
if(substr($_POST['travailleur_code_membre'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['travailleur_code_membre'], $membre);
                                if(count($membre) == 0){
                  $db->rollback();
                                $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ..." 
                        );
                  //$this->_redirect('/travailleur/addtravailleurindex');
                  return;
                }
  }else if(substr($_POST['travailleur_code_membre'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['travailleur_code_membre'], $membremorale);
                                if(count($membremorale) == 0){
                  $db->rollback();
                                $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ..." 
                        );
                  //$this->_redirect('/travailleur/addtravailleurindex');
                  return;
                }
  }
}


                 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                 $travailleur = new Application_Model_EuTravailleur();
                 $m_travailleur = new Application_Model_EuTravailleurMapper();

                 $travailleur_id = $m_travailleur->findConuter() + 1;

                 $travailleur->setTravailleur_id($travailleur_id);
                 $travailleur->setTravailleur_libelle($_POST['travailleur_libelle']);
                 $travailleur->setTravailleur_type($_POST['travailleur_type']);
                 $travailleur->setTravailleur_code_membre($_POST['travailleur_code_membre']);
                 $travailleur->setTravailleur_experience($_POST['travailleur_experience']);
                 $travailleur->setTravailleur_niveau($_POST['travailleur_niveau']);
                 $travailleur->setTravailleur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                 $travailleur->setTravailleur_education($_POST['travailleur_education']);
                 $travailleur->setTravailleur_formation($_POST['travailleur_formation']);
                 $travailleur->setTravailleur_adresse($_POST['travailleur_adresse']);
                 //$travailleur->setTravailleur_observation($_POST['travailleur_observation']);
                 //$travailleur->setTravailleur_utilisateur($_POST['travailleur_utilisateur']);
                 $travailleur->setCode_zone($_POST['code_zone']);
                 $travailleur->setId_pays($_POST['id_pays']);
                 $travailleur->setId_region($_POST['id_region']);
                 $travailleur->setId_prefecture($_POST['id_prefecture']);
                 $travailleur->setId_canton($_POST['id_canton']);
                 $travailleur->setPublier(1);
                 $m_travailleur->save($travailleur);

////////////////////////////////////////////////////////////////////////////////
            include("Transfert.php");
          $detail_travailleur_fichier = array();

          for($i = 0; $i < count($_POST['detail_travailleur_libelle']); $i++){
        $detail_travailleur = new Application_Model_EuDetailTravailleur();
        $m_detail_travailleur = new Application_Model_EuDetailTravailleurMapper();
      
            $compteur_detail_travailleur = $m_detail_travailleur->findConuter() + 1;
            $detail_travailleur->setDetail_travailleur_id($compteur_detail_travailleur);
            $detail_travailleur->setTravailleur_id($travailleur_id);
            $detail_travailleur->setDetail_travailleur_libelle($_POST['detail_travailleur_libelle'][$i]);

           if(isset($_FILES["detail_travailleur_fichier"][$i]["name"]) && $_FILES["detail_travailleur_fichier"][$i]["name"] != "") {
                  $chemin  = "travailleurs";
                  $file    = $_FILES["detail_travailleur_fichier"][$i]["name"];
                  $file1   = "detail_travailleur_fichier".$i;
                  $detail_travailleur_fichier[$i] = $chemin."/".transfert($chemin,$file1);
               } else { $detail_travailleur_fichier[$i] = ""; }

            $detail_travailleur->setDetail_travailleur_fichier($detail_travailleur_fichier[$i]);
            $detail_travailleur->setEtat(1);
            $m_detail_travailleur->save($detail_travailleur);
                    }

////////////////////////////////////////////////////////////////////////////////

				 $db->commit();
			     $this->view->data = array(
	                        	'resultat' => "1", 
	                        	'message' => "Operation bien effectuee ..." 
                        );
                 //$this->_redirect('/travailleur/addtravailleurindex');
}else{
           $db->rollback();
           $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Veuillez renseigner le Code Membre ..." 
                        );

}				 
			  } catch (Exception $exc) {				   
			     $db->rollback();
                 $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => $exc->getMessage() . ' : ' . $exc->getTraceAsString() 
                        ); 
                 return;
		      }	 
			   
		  }   
			   
      } else {
        $this->view->data = array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire" 
                        );
      }
    //}
  }




	  
	  public  function listprojetAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $data = array();
		 
    $projet_m = new Application_Model_EuProjetMapper();
    $projets = $projet_m->fetchAllByMembre($_POST['code_membre']);
       //$projets = $t_projet->fetchAll($select);
	  
	     if(count($projets)>0){
	     	$i = 1;
		    foreach ($projets as $entry) {
               $data[$i] = array(
            'projet_id' => $entry->getProjet_id(),
            'projet_libelle' => $entry->getProjet_libelle(),
            'projet_type' => $entry->getProjet_type(),
            'projet_description' => $entry->getProjet_description(),
	        'projet_code_membre' => $entry->getProjet_code_membre(),
            'projet_date' => $entry->getProjet_date(),
            'projet_centrale' => $entry->getProjet_centrale(),
            'projet_montant' => $entry->getProjet_montant(),
            'projet_stockage' => $entry->getProjet_stockage(),
            'projet_montant_final' => $entry->getProjet_montant_final(),
            'projet_observation' => $entry->getProjet_observation(),
            'projet_utilisateur' => $entry->getProjet_utilisateur(),
            'code_zone' => $entry->getCode_zone(),
            'id_pays' => $entry->getId_pays(),
            'id_region' => $entry->getId_region(),
            'id_prefecture' => $entry->getId_prefecture(),
            'id_canton' => $entry->getId_canton(),
            'publier' => $entry->getPublier()
               );
               $i++;
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  
	  



	  
	  public  function listtravailleurAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $data = array();
		 
    $travailleur_m = new Application_Model_EuTravailleurMapper();
    $travailleurs = $travailleur_m->fetchAllByMembre($_POST['code_membre']);
       //$travailleurs = $t_travailleur->fetchAll($select);
	  
	     if(count($travailleurs)>0){
	     	$i = 1;
		    foreach ($travailleurs as $entry) {
               $data[$i] = array(
            'travailleur_id' => $entry->getTravailleur_id(),
            'travailleur_libelle' => $entry->getTravailleur_libelle(),
            'travailleur_type' => $entry->getTravailleur_type(),
            'travailleur_experience' => $entry->getTravailleur_experience(),
	        'travailleur_code_membre' => $entry->getTravailleur_code_membre(),
            'travailleur_date' => $entry->getTravailleur_date(),
            'travailleur_niveau' => $entry->getTravailleur_niveau(),
            'travailleur_education' => $entry->getTravailleur_education(),
            'travailleur_formation' => $entry->getTravailleur_formation(),
            'travailleur_adresse' => $entry->getTravailleur_adresse(),
            'travailleur_observation' => $entry->getTravailleur_observation(),
            'travailleur_utilisateur' => $entry->getTravailleur_utilisateur(),
            'code_zone' => $entry->getCode_zone(),
            'id_pays' => $entry->getId_pays(),
            'id_region' => $entry->getId_region(),
            'id_prefecture' => $entry->getId_prefecture(),
            'id_canton' => $entry->getId_canton(),
            'publier' => $entry->getPublier()
               );
               $i++;
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  





	  
	  public  function listcontratlivraisonAction()  {
	     $this->_helper->layout()->disableLayout();
		 
		 $data = array();
		 
    $contratlivraison_m = new Application_Model_EuContratLivraisonIrrevocableMapper();
    $contratlivraisons = $contratlivraison_m->fetchAllByCodeMembre($_POST['code_membre']);
       //$contratlivraisons = $t_contratlivraison->fetchAll($select);
	  
	     if(count($contratlivraisons)>0){
	     	$i = 1;
		    foreach ($contratlivraisons as $entry) {
               $data[$i] = array(
            'id_contrat' => $entry->getId_contrat(),
            'code_membre' => $entry->getCode_membre(),
            'type_validateur' => $entry->getType_validateur(),
            'civilite' => $entry->getCivilite(),
            'type_maison' => $entry->getType_maison(),
            'nom' => $entry->getNom(),
            'situation' => $entry->getSituation(),
            'libelle_situation' => $entry->getLibelle_situation(),
            'quartier_maison' => $entry->getQuartier_maison(),
            'rue' => $entry->getRue(),
            'numero_recipice' => $entry->getNumero_recipice(),
            'matricule_rccm' => $entry->getMatricule_rccm(),
            'siege' => $entry->getSiege(),
            'civilite_representant' => $entry->getCivilite_representant(),
            'nom_representant' => $entry->getNom_representant(),
            'demeure' => $entry->getDemeure(),
            'libelle_demeure' => $entry->getLibelle_demeure(),
            'quartier' => $entry->getQuartier(),
            'boite_postale' => $entry->getBoite_postale(),
            'telephone' => $entry->getTelephone(),
            'carte_operateur' => $entry->getCarte_operateur(),
            'numero_contrat' => strtoupper(Util_Utils::genererCodeSMS(8)),
            'periode_garde' => $entry->getPeriode_garde(),
            'chargement_produit' => $entry->getChargement_produit(),
            'date_contrat' => $date_id->toString('yyyy-MM-dd HH:mm:ss'),
            'statut' => 0
               );
               $i++;
            } 
		 } else {
            $data = '';
         }
         $this->view->data = $data;
	  
	  }
	  
	  




    public function addcontratlivraisonAction()
    {
        /* page contratlivraison/addcontrat - Ajout contrat */

        //$sessionmembre = new Zend_Session_Namespace('membre');
        $this->_helper->layout->disableLayout();
        //$this->_helper->layout()->setLayout('layoutpublicesmcperso');

        /*if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }
    if (!isset($sessionmembre->code_membre)) {$this->_redirect('/');}
if($sessionmembre->confirmation_envoi != ""){$this->_redirect('/espacepersonnel/confirmation');}
*/
        //if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
            if (isset($_POST['type_validateur']) && $_POST['type_validateur'] != "" && isset($_POST['libelle_produit']) && $_POST['libelle_produit'] != "" && isset($_POST['montant_produits']) && $_POST['montant_produits'] != "" && isset($_POST['periode_garde']) && $_POST['periode_garde'] != "" && isset($_POST['chargement_produit']) && $_POST['chargement_produit'] != "") {

                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $contrat = new Application_Model_EuContratLivraisonIrrevocable();
                $m_contrat = new Application_Model_EuContratLivraisonIrrevocableMapper();

            
            $compteur_id_contrat = $m_contrat->findConuter() + 1;

                    $contrat->setId_contrat($compteur_id_contrat);
                    $contrat->setCode_membre($_POST['code_membre']);
                    $contrat->setType_validateur($_POST['type_validateur']);
if($_POST['type_validateur'] == "personne_physique") {
                    $contrat->setCivilite($_POST['civilite']);
                    $contrat->setNom($_POST['nom']);
                    $contrat->setDemeure($_POST['demeure']);
                    $contrat->setLibelle_demeure($_POST['libelle_demeure']);
                    $contrat->setQuartier($_POST['quartier']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
}else if($_POST['type_validateur'] == "etablissement") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setSituation($_POST['situation']);
                    $contrat->setLibelle_situation($_POST['libelle_situation']);
                    $contrat->setRue($_POST['rue']);
                    $contrat->setCivilite_representant($_POST['civilite_representant']);
                    $contrat->setNom_representant($_POST['nom_representant']);
                    $contrat->setQuartier($_POST['quartier']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
                    $contrat->setCarte_operateur($_POST['carte_operateur']);
}else if($_POST['type_validateur'] == "maison") {
                    $contrat->setType_maison($_POST['type_maison']);
                    $contrat->setNom($_POST['nom']);
                    $contrat->setSituation($_POST['situation']);
                    $contrat->setLibelle_situation($_POST['libelle_situation']);
                    $contrat->setQuartier_maison($_POST['quartier_maison']);
                    $contrat->setRue($_POST['rue']);
                    $contrat->setCivilite_representant($_POST['civilite_representant']);
                    $contrat->setNom_representant($_POST['nom_representant']);
                    $contrat->setDemeure($_POST['demeure']);
                    $contrat->setLibelle_demeure($_POST['libelle_demeure']);
                    $contrat->setQuartier($_POST['quartier']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
}else if($_POST['type_validateur'] == "collectivite") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setCivilite_representant($_POST['civilite_representant']);
                    $contrat->setNom_representant($_POST['nom_representant']);
                    $contrat->setDemeure($_POST['demeure']);
                    $contrat->setLibelle_demeure($_POST['libelle_demeure']);
                    $contrat->setQuartier($_POST['quartier']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
}else if($_POST['type_validateur'] == "association") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "ong") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "groupement") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "cooperative") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "union") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "federation") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "confederation") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "reseau") {
                    $contrat->setNom($_POST['nom']);
}else if($_POST['type_validateur'] == "faitiere") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setNumero_recipice($_POST['numero_recipice']);
                    $contrat->setSiege($_POST['siege']);
                    $contrat->setCivilite_representant($_POST['civilite_representant']);
                    $contrat->setNom_representant($_POST['nom_representant']);
}else if($_POST['type_validateur'] == "confession_religieuse") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setCivilite_representant($_POST['civilite_representant']);
                    $contrat->setNom_representant($_POST['nom_representant']);
                    $contrat->setDemeure($_POST['demeure']);
                    $contrat->setLibelle_demeure($_POST['libelle_demeure']);
                    $contrat->setQuartier($_POST['quartier']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
}else if($_POST['type_validateur'] == "ets_public_administratif") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
}else if($_POST['type_validateur'] == "ets_public_industriel_commercial") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
}else if($_POST['type_validateur'] == "organisation_internationale") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
}else if($_POST['type_validateur'] == "societe") {
                    $contrat->setNom($_POST['nom']);
                    $contrat->setMatricule_rccm($_POST['matricule_rccm']);
                    $contrat->setSiege($_POST['siege']);
                    $contrat->setCivilite_representant($_POST['civilite_representant']);
                    $contrat->setNom_representant($_POST['nom_representant']);
}
                    /*$contrat->setCivilite($_POST['civilite']);
                    $contrat->setType_maison($_POST['type_maison']);
                    $contrat->setNom($_POST['nom']);
                    $contrat->setSituation($_POST['situation']);
                    $contrat->setLibelle_situation($_POST['libelle_situation']);
                    $contrat->setQuartier_maison($_POST['quartier_maison']);
                    $contrat->setRue($_POST['rue']);
                    $contrat->setNumero_recipice($_POST['numero_recipice']);
                    $contrat->setMatricule_rccm($_POST['matricule_rccm']);
                    $contrat->setSiege($_POST['siege']);
                    $contrat->setCivilite_representant($_POST['civilite_representant']);
                    $contrat->setNom_representant($_POST['nom_representant']);
                    $contrat->setDemeure($_POST['demeure']);
                    $contrat->setLibelle_demeure($_POST['libelle_demeure']);
                    $contrat->setQuartier($_POST['quartier']);
                    $contrat->setBoite_postale($_POST['boite_postale']);
                    $contrat->setTelephone($_POST['telephone']);
                    $contrat->setCarte_operateur($_POST['carte_operateur']);*/

                    $contrat->setNumero_contrat(strtoupper(Util_Utils::genererCodeSMS(8)));
                    $contrat->setPeriode_garde($_POST['periode_garde']);
                    $contrat->setChargement_produit($_POST['chargement_produit']);
                    $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $contrat->setStatut(0);
                    $m_contrat->save($contrat);





                    for ($i = 0; $i < sizeof($_POST['libelle_produit']); $i++) {
                        $detail_contrat = new Application_Model_EuDetailContratLivraisonIrrevocable();
                        $m_detail_contrat = new Application_Model_EuDetailContratLivraisonIrrevocableMapper();

                        $compt_detail_contrat = $m_detail_contrat->findConuter() + 1;

                        $m_contrat = new Application_Model_EuContratLivraisonIrrevocableMapper();
                        $compt_contrat = $m_contrat->findConuter();

                        $detail_contrat->setId_detail_contrat($compt_detail_contrat);
                        $detail_contrat->setId_contrat($compt_contrat);
                        $detail_contrat->setLibelle_produit($_POST['libelle_produit'][$i]);
                        $detail_contrat->setMontant_produit($_POST['montant_produit'][$i]);
                        $detail_contrat->setPrix_unitaire($_POST['montant_produit'][$i]);
                        $detail_contrat->setQuantite(1);
                        $detail_contrat->setStatut(1);
                        $m_detail_contrat->save($detail_contrat);
                    }




                    //$this->_redirect('/contratlivraison/listcontrat');
                    //$this->view->error = "Contrat enregistré";
                    $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "1", 
	                        	'message' => "Contrat enregistré ..."
                        	)
                        );
            } else {
                //$this->view->error = "Champs * obligatoire";
                $this->view->error = Zend_Json::encode(
                        	array(
	                        	'resultat' => "0", 
	                        	'message' => "Champs * obligatoire ..."
                        	)
                        );
            }
        //}
    }





}
