<?php
class IndexController extends Zend_Controller_Action  {

    public function init() {
        /* Initialize action controller here */
        //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
        $codesecret = "";
        while(strlen($codesecret) != 8) {
          $codesecret .= $liste[rand(0,strlen($liste)-1)]; 
        }
        $this->view->codesecret = $codesecret;
    }
    
    
    public function interfaceutilisateuresmcAction(){

        
    }
	

    public function listdesagracteursAction() {

    }

    public function conventionachatksuAction () {


    }
	
	public  function ajoutcmpoursoiAction() {
		$this->_helper->layout()->setLayout('layoutpublicesmc');
		$sessionmcnp = new Zend_Session_Namespace('mcnp');
		
		$db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
			 $t_codea = new Application_Model_DbTable_EuCodeActivation();
			 $select = $t_codea->select();
			 $select->where("montant_souscrit is null");
			 //$select->where("origine_code is null");
			 $select->where('origine_code like ?','ESMC');
			 $select->where('code_membre like ?','%M');
			 $select->order('id_code_activation desc');
			 $select->limit(1000);
			 //$results = $t_codea->fetchRow($select);
			 $results = $t_codea->fetchAll($select);
			 if(count($results) > 0) {
				 /*
				 $souscription = new Application_Model_EuSouscription();
                 $souscription_mapper = new Application_Model_EuSouscriptionMapper();
				 $findsous = $souscription_mapper->find(6021,$souscription);
				 
				 $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                 $codeactivation = new Application_Model_EuCodeActivation();
				 $findcodea = $m_codeactivation->find(5990,$codeactivation);
				 $codeactivation->setOrigine_code("ESMC");
				 $codeactivation->setMontant_souscrit(5000);
				 $m_codeactivation->update($codeactivation);
				 */
				 
			     for($i = 0; $i < count($results); $i++) {
					 $value = $results[$i];
					 $membre = new Application_Model_EuMembre();
                     $membre_mapper = new Application_Model_EuMembreMapper();
					 $findmembre = $membre_mapper->find($value->code_membre,$membre);
			 
			         $souscription = new Application_Model_EuSouscription();
                     $souscription_mapper = new Application_Model_EuSouscriptionMapper();
					 $findsous = $souscription_mapper->find($value->souscription_id,$souscription);
					 
					 $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                     $codeactivation = new Application_Model_EuCodeActivation();
					 $findcodea = $m_codeactivation->find($value->id_code_activation,$codeactivation);
			 
		             if($membre->etat_membre == "N")  {
						 if($souscription->souscription_type == "BAn" && $souscription->souscription_programme == "KACM") {
							$codeactivation->setOrigine_code("ESMC");
							$codeactivation->setMontant_souscrit($souscription->souscription_montant);
                            $m_codeactivation->update($codeactivation);							
						 } else if($souscription->souscription_programme == "CMFH") {
							$codeactivation->setOrigine_code("ESMC");
						    $codeactivation->setMontant_souscrit(5000);
							$m_codeactivation->update($codeactivation);
						 } else if($souscription->souscription_programme == "KACM")  {
							$codeactivation->setOrigine_code("ESMC");
							$codeactivation->setMontant_souscrit(5000);
							$m_codeactivation->update($codeactivation);
						 }
					 }
			     }
				 
		         $db->commit();
			     $sessionmcnp->error = "Operation bien effectuee";
				 //$sessionmcnp->error = count($results);
				 return;
			     //$this->_redirect('/index/ajoutcmpoursoi');
		     }
		
		} catch(Exception $exc) {
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();  
            return;
        }
		
	}
	
	
	
	
	
	
	public  function ajoutcmpoursoioldAction()  {
		$this->_helper->layout()->setLayout('layoutpublicesmc');
		$sessionmcnp = new Zend_Session_Namespace('mcnp');
		
		$db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
	    try {
		    $tabela = new Application_Model_DbTable_EuMembre();
			$t_codea = new Application_Model_DbTable_EuCodeActivation();
			$select = $tabela->select();
			$select->where("empreinte2 is not null");
			$select->where('etat_membre like ?','N');
			$results = $tabela->fetchAll($select);
			if(count($results) > 0) {
			  for($i = 0; $i < count($results); $i++) {
			      $value = $results[$i];
                  $souscription = new Application_Model_EuSouscription();
                  $souscription_mapper = new Application_Model_EuSouscriptionMapper();
				  
				  $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                  $codeactivation = new Application_Model_EuCodeActivation();
				  
				  $m_smsmoney = new Application_Model_EuSmsmoneyMapper();
                  $smsmoney = new Application_Model_EuSmsmoney();

				  $compteur_souscription = $souscription_mapper->findConuter() + 1;
				  
                  $souscription->setSouscription_personne("PP");
                  $souscription->setSouscription_nom($value->nom_membre);
                  $souscription->setSouscription_prenom($value->prenom_membre);
                  $souscription->setSouscription_raison(NULL);
                  $souscription->setSouscription_email($value->prenom_membre);
                  $souscription->setSouscription_mobile($value->portable_membre);
                  $souscription->setSouscription_membreasso(1);
                  $souscription->setSouscription_type("SMS");
                  $souscription->setSouscription_numero("");
                  $souscription->setSouscription_date_numero("");
                  $souscription->setSouscription_banque("");
                  $souscription->setSouscription_montant(5000);
                  $souscription->setSouscription_nombre(1);
                  $souscription->setSouscription_programme("KACM");
                  $souscription->setSouscription_type_candidat(0);
                  $souscription->setSouscription_date($value->date_identification);
                  $souscription->setCode_activite("");
                  $souscription->setId_metier("");
                  $souscription->setId_competence("");
                  $souscription->setSouscription_ville($value->ville_membre);
                  $souscription->setSouscription_quartier($value->quartier_membre);
                  $souscription->setSouscription_souscription($compteur_souscription);
                  
                  $souscription->setSouscription_ordre(NULL);
                  $souscription->setSouscription_autonome(1);
                  $souscription->setPublier(3);
                  $souscription->setErreur(0);
                  $souscription->setId_canton($value->id_canton);
                  $souscription_mapper->save($souscription);
				
				  $compteur_souscription = $db->lastInsertId();
				  
				  $selection = $t_codea->select();
                  $selection->where('code_membre = ?',$value->code_membre);
                  $resultat = $t_codea->fetchAll($selection);
				  
				  $smsfs = $m_smsmoney->findlinedestaccount("NB-TFS-".$value->code_membre);
				  $smsfl = $m_smsmoney->findlinedestaccount("FL-".$value->code_membre);
				  $smscps = $m_smsmoney->findlinedestaccount("CPS".$value->code_membre);
				  
				  if(count($resultat) == 0) {
					  $codefs   = $smsfs->creditcode;
					  $codefl   = $smsfl->creditcode;
					  $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				      $codeactivation->setDate_generer($value->date_identification);
                      $codeactivation->setCode_membre($value->code_membre);
                      $codeactivation->setCode_fs($codefs);
                      $codeactivation->setCode_fl($codefl);
                      $codeactivation->setCode_fkps($codefkps);
                      $codeactivation->setOrigine_code("ESMC");
                      $codeactivation->setMembreasso_id(1);
	                  $codeactivation->setMontant_souscrit(5000);
                      $codeactivation->setSouscription_id($compteur_souscription);
                      $m_codeactivation->save($codeactivation);
				  }
			  }
			  $db->commit();
			  $sessionmcnp->error = "Opération bien effectuée";
			  $this->_redirect('/index/ajoutcmpoursoi');
			}
		} catch(Exception $exc) {
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();  
            return;
        }
	}


    public function ajoutcmfhAction()    {
		$this->_helper->layout()->setLayout('layoutpublicesmc');
		$sessionmcnp = new Zend_Session_Namespace('mcnp');
		
		$db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
	    try {
			$canton = new Application_Model_EuCanton();
	        $m_canton = new Application_Model_EuCantonMapper();
		
		    $prefecture = new Application_Model_EuPrefecture();
	        $m_prefecture = new Application_Model_EuPrefectureMapper();

		    $region = new Application_Model_EuRegion();
	        $m_region = new Application_Model_EuRegionMapper();
		
		    $pays = new Application_Model_EuPays();
	        $m_pays = new Application_Model_EuPaysMapper();
		
		    $zone = new Application_Model_EuZone();
	        $m_zone = new Application_Model_EuZoneMapper();
			
			$tabela = new Application_Model_DbTable_EuDepotVente();
			$select = $tabela->select()->setIntegrityCheck(false);
            $select->from($tabela);
		    $select->join('eu_souscription', 'eu_souscription.souscription_id = eu_depot_vente.souscription_id');
			$select->where('(eu_depot_vente.code_membre <> ?',"");
	        $select->where('eu_depot_vente.code_membre is not null)');
			$select->where('(eu_souscription.souscription_type_candidat <> ?',6);
	        $select->where('eu_souscription.souscription_type_candidat <> ?)',7);
            $select->order('eu_depot_vente.date_depot asc');
			$results = $tabela->fetchAll($select);
			if(count($results) > 0) {
			    for($i = 0; $i < count($results); $i++) {
		            $value = $results[$i];
					$id_canton = $value->id_canton;
					$id_prefecture = null;
					$id_region = null;
					$id_pays = null;
					$code_zone = null;
					$cmfh = new Application_Model_EuCmfh();
                    $cmfh_mapper = new Application_Model_EuCmfhMapper();
					
					if($id_canton !="" && $id_canton != NULL) {
						$findcanton = $m_canton->find($entry->id_canton,$canton);
		                $findprefecture = $m_prefecture->find($canton->id_prefecture,$prefecture);
		                $findregion = $m_region->find($prefecture->id_region,$region);
		                $findpays = $m_pays->find($region->id_pays,$pays);
		                $findzone = $m_zone->find($pays->code_zone,$zone);
						if($value->souscription_type_candidat !="" && $value->souscription_type_candidat != NULL) {
						    $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($value->code_membre,$value->souscription_type_candidat);
							if($findrowscmfh == false)  {
							    $compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					            $cmfh->setId_cmfh($compteur_cmfh);
				                $cmfh->setDate_creation($value->date_depot);
				                $cmfh->setId_type_candidat($value->souscription_type_candidat);
					            $cmfh->setCode_membre($value->code_membre);
                                $cmfh->setCode_zone_create($zone->code_zone);
                                $cmfh->setId_pays($pays->id_pays);
                                $cmfh->setId_region($region->id_region);
                                $cmfh->setId_prefecture($prefecture->id_prefecture);
                                $cmfh->setId_canton($id_canton);
					            $cmfh_mapper->save($cmfh);
							}
						}
					} else {
						if($value->souscription_type_candidat !="" && $value->souscription_type_candidat != NULL) {
						    $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($value->code_membre,$value->souscription_type_candidat);
							if($findrowscmfh == false)  {
							    $compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					            $cmfh->setId_cmfh($compteur_cmfh);
				                $cmfh->setDate_creation($value->date_depot);
				                $cmfh->setId_type_candidat($value->souscription_type_candidat);
					            $cmfh->setCode_membre($value->code_membre);
                                $cmfh->setCode_zone_create($code_zone);
                                $cmfh->setId_pays($id_pays);
                                $cmfh->setId_region($id_region);
                                $cmfh->setId_prefecture($id_prefecture);
                                $cmfh->setId_canton($id_canton);
					            $cmfh_mapper->save($cmfh);
							}
						}
					}
				
				}
                                $db->commit();
		    }
		} catch(Exception $exc) {
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();  
            return;
        }
		
	}
	
	
	public function updategroupeAction()  {
		$this->_helper->layout()->setLayout('layoutpublicesmc');
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
			$model_groupe = new Application_Model_EuUserGroup();
			$mapper_groupe = new Application_Model_EuUserGroupMapper();
			
			$model_user = new Application_Model_EuUtilisateur();
			$mapper_user = new Application_Model_EuUtilisateurMapper();
			
			$date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;
			
			$model_division = new Application_Model_EuDivisionGac();
			$mapper_division = new Application_Model_EuDivisionGacMapper();
			
			$model_liaison = new Application_Model_EuLiaisonCompte();
			$mapper_liaison = new Application_Model_EuLiaisonCompteMapper();
			
			$model_complement = new Application_Model_EuComplementQuittance();
			$mapper_complement = new Application_Model_EuComplementQuittanceMapper();
			
			$model_conf = new Application_Model_EuConfirmation();
			$mapper_conf = new Application_Model_EuConfirmationMapper();
			
			$model = new Application_Model_EuBonNeutre();
			$mapper = new Application_Model_EuBonNeutreMapper();
			
			$id_conf = 2461;
			//$tabela = new Application_Model_DbTable_EuConfirmation();
			$trouve = $mapper->find($id_conf,$model);
            $model->setBon_neutre_nom("AKOUETE");
			$model->setBon_neutre_prenom("KANYI  ENYONAM");
			$mapper->update($model);
			
			/*
			$code_gac = "G0010007";
			$code_membre_technopole = "0000000000000000028M";
			$code_membre_filiere    = "0000000000000000029M";
			$code_membre_acnev      = "0000000000000000030M";
			
			$code_membre_administrateur = "0000000000000000027M";
			$code_membre_animateur = "0010010010010000295M";
			
			// Technopole
			   $model_division->setCode_gac($code_gac);
			   $model_division->setCode_membre($code_membre_technopole);
			   $model_division->setType_division("ADMINISTRATION");
			   $model_division->setLibelle_division("TECHNOPOLE");
			   $model_division->setNom_division("TECHNOPOLE ADMINISTRATRICE EXECUTANTE REMEDD TOGO");
			   $mapper_division->save($model_division);
			   
			   $model_division->setCode_gac($code_gac);
			   $model_division->setCode_membre(NULL);
			   $model_division->setType_division("ANIMATION");
			   $model_division->setLibelle_division("TECHNOPOLE");
			   $model_division->setNom_division("TECHNOPOLE ANIMATRICE EXECUTANTE REMEDD TOGO");
			   $mapper_division->save($model_division);
			   
			// FILIERE
			   $model_division->setCode_gac($code_gac);
			   $model_division->setCode_membre($code_membre_filiere);
			   $model_division->setType_division("ADMINISTRATION");
			   $model_division->setLibelle_division("FILIERE");
			   $model_division->setNom_division("FILIERE ADMINISTRATRICE EXECUTANTE REMEDD TOGO");
			   $mapper_division->save($model_division);
			   
			   $model_division->setCode_gac($code_gac);
			   $model_division->setCode_membre(NULL);
			   $model_division->setType_division("ANIMATION");
			   $model_division->setLibelle_division("FILIERE");
			   $model_division->setNom_division("FILIERE ANIMATRICE EXECUTANTE REMEDD TOGO");
			   $mapper_division->save($model_division);
			
			
			// ACNEV
			   $model_division->setCode_gac($code_gac);
			   $model_division->setCode_membre($code_membre_acnev);
			   $model_division->setType_division("ADMINISTRATION");
			   $model_division->setLibelle_division("ACNEV");
			   $model_division->setNom_division("ACNEV ADMINISTRATRICE EXECUTANTE REMEDD TOGO");
			   $mapper_division->save($model_division);
			   
			   $model_division->setCode_gac($code_gac);
			   $model_division->setCode_membre(NULL);
			   $model_division->setType_division("ANIMATION");
			   $model_division->setLibelle_division("ACNEV");
			   $model_division->setNom_division("ACNEV ANIMATRICE EXECUTANTE REMEDD TOGO");
			   $mapper_division->save($model_division);
			
			// LIAISON COMPTE
			   $model_liaison->setCode_membre_admin($code_membre_administrateur);
			   $model_liaison->setCode_membre_anim($code_membre_animateur);
			   $model_liaison->setDate_liaison($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
			   $mapper_liaison->save($model_liaison);
			*/
			
			/*
			$code_groupe = "agrement_technopole";
			$trouvergroupe = $mapper_groupe->find($code_groupe,$model_groupe);
			$groupe = "agrement_technopole";
			$libelle = "S-CM AGREMENT TECHNOPOLE";
            $model_groupe->setCode_groupe($groupe);
			$model_groupe->setLibelle_groupe($libelle);
			$mapper_groupe->update($model_groupe);
			
			$code_groupe = "agrement_filiere";
			$trouvergroupe = $mapper_groupe->find($code_groupe,$model_groupe);
			$groupe = "agrement_filiere";
			$libelle = "S-CM AGREMENT FILIERE";
            $model_groupe->setCode_groupe($groupe);
			$model_groupe->setLibelle_groupe($libelle);
			$mapper_groupe->update($model_groupe);
			
			$code_groupe = "agrement_acnev";
			$trouvergroupe = $mapper_groupe->find($code_groupe,$model_groupe);
			$groupe = "agrement_acnev";
			$libelle = "S-CM AGREMENT ACNEV";
            $model_groupe->setCode_groupe($groupe);
			$model_groupe->setLibelle_groupe($libelle);
			$mapper_groupe->update($model_groupe);
			*/
			
			/*
			$groupe = "parametrage_te";
			$libelle = "Paramétrage des TE";
            $model_groupe->setCode_groupe($groupe);
			$model_groupe->setLibelle_groupe($libelle);
			$mapper_groupe->save($model_groupe);
			*/
			
			$db->commit();
			$sessionmcnp->error = "Mise à jour bien effectuee";	
			return;
			
		} catch(Exception $exc)  {
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();  
            return;
        }
	}
	
	
	public function updateacteurAction() {
		$this->_helper->layout()->setLayout('layoutpublicesmc');
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
		    $table = new Application_Model_DbTable_EuActeur();
			$model_acteur = new Application_Model_EuActeur();
			$mapper_acteur = new Application_Model_EuActeurMapper();
			
			$select = $table->select();
			$select->where('code_activite IN (?)',array("ACNEV","FILIERE","TECHNOPOLE"));
			$select->where('type_acteur like ?','DSMS');
			//$select->where("type_acteur is null");
			$results = $table->fetchAll($select);
			if(count($results) > 0) {
			    for($i = 0; $i < count($results); $i++) {
				   $value = $results[$i]; 
                   $trouveracteur = $mapper_acteur->find($value->id_acteur,$model_acteur);
                   $model_acteur->setCode_activite($value->type_acteur);
				   $model_acteur->setType_acteur($value->code_activite);
				   $mapper_acteur->update($model_acteur);
		        }
				$db->commit();
			    $sessionmcnp->error = "Mise à jour bien effectuee";
				//$sessionmcnp->error = count($results);
				return;
		    }
			
		} catch(Exception $exc) {
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();  
            return;
        }
		
	}
	
	
	
	public function insertacteurAction()  {
		$this->_helper->layout()->setLayout('layoutpublicesmc');
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
		    $nom_gac = "REMEDD TOGO";
			$code_membre = "0010010010010003543P";
			
			$type_gac = "GAC_EXECUTANTE";
			$appartenance = "PAYS";
            $code_agence = "001001001001";
			
			//$login = $request->getParam("gac_login");
			//$pwd = $request->getParam("gac_passe");
			//$confirme = $request->getParam("confirme");
			  
			$code_zone = "001";
			$id_pays = 1;
			$id_region = 1;
			$id_prefecture = 1;
			$id_canton = 1;
            $groupe = NULL;
			 
			$date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;

            $membre = new Application_Model_EuMembre();
	        $m_map  = new Application_Model_EuMembreMapper();
			
			$findmembre = $m_map->find($code_membre,$membre);
			 
			$representation = new Application_Model_EuRepresentation();
	        $m_representation  = new Application_Model_EuRepresentationMapper();

            $membremorale    = new Application_Model_EuMembreMorale();
	        $m_membremorale  = new Application_Model_EuMembreMoraleMapper();
			
			$gac_mapper = new Application_Model_EuGacMapper();
            $gac = new Application_Model_EuGac();
			
			//insertion dans la table eu_acteur
		    $t_acteur = new Application_Model_DbTable_EuActeur();
            $c_acteur = new Application_Model_EuActeur();
			$tetedivisiontechno = "TECHNOPOLE";
			$tetedivisionfiliere = "FILIERE";
			$tetedivisionacnev = "ACNEV";
			$code_admin = "000000000000";
			
			
			
			$code_gac = "";
			
			// GAC
			  $code_admin = "000000000000";
			  $code_membre_gac = $m_membremorale->getLastCodeMembreAdmin();
              if($code_membre_gac == NULL) {
                 $code_membre_gac = $code_admin . '0000001' . 'M';
              } else {
                 $num_ordre = substr($code_membre_gac, 12, 7);
                 $num_ordre++;
                 $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                 $code_membre_gac = $code_admin . $num_ordre_bis . 'M';
              }
			  
			  $membremorale->setId_filiere(null);
              $membremorale->setCode_membre_morale($code_membre_gac);
			  if($type_gac == "GAC_DETENTRICE" || $type_gac == "GAC_EXECUTANTE") {
                 $membremorale->setCode_type_acteur("OE");
                 $membremorale->setCode_statut("SARL");
			  } else {
				 $membremorale->setCode_type_acteur("OSE");
                 $membremorale->setCode_statut("association"); 
			  }
              $membremorale->setRaison_sociale($nom_gac);
              $membremorale->setId_pays($id_pays);
              $membremorale->setNum_registre_membre("000000000000");
              $membremorale->setDomaine_activite("PRESTATION");
              $membremorale->setSite_web(null);
              $membremorale->setQuartier_membre($membre->quartier_membre);
              $membremorale->setVille_membre($membre->ville_membre);
              $membremorale->setBp_membre(null);
              $membremorale->setTel_membre(null);
              $membremorale->setEmail_membre("");
              $membremorale->setPortable_membre($membre->portable_membre);
              $membremorale->setId_utilisateur(NULL);
              $membremorale->setHeure_identification($date_idd->toString('HH:mm:ss'));
              $membremorale->setDate_identification($date_idd->toString('yyyy-MM-dd'));
              $membremorale->setCode_agence(null);
              $membremorale->setCodesecret(md5("123456"));
              $membremorale->setAuto_enroler('O');
              $membremorale->setEtat_membre("N");
              $membremorale->setType_fournisseur(NULL);
			  $membremorale->setDesactiver(2);
			  $membremorale->setId_canton($id_canton);
              $m_membremorale->save($membremorale);
			  
			  $representation->setCode_membre_morale($code_membre_gac)
                             ->setCode_membre($code_membre)
                             ->setTitre("Representant")
                             ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur($sessionutilisateur->id_utilisateur)
                             ->setEtat('inside');
              $m_representation->save($representation);
			  
			  //insertion dans la table eu_gac
			  $code_recup = $gac_mapper->getLastGacByZone($code_zone);
              if($code_recup == null) {
                 $code_gac = 'G' . $code_zone . '0001';
              } else {
                 $num_ordre = substr($code_recup, -4);
                 $num_ordre++;
                 $code_gac = 'G' . $code_zone . str_pad($num_ordre,4,0,STR_PAD_LEFT);
              }
			
			  $gac->setCode_gac($code_gac);
              $gac->setCode_membre($code_membre_gac);
              $gac->setNom_gac($nom_gac);
              $gac->setCode_type_gac($type_gac);
              $gac->setCode_zone($code_zone);
              $gac->setCode_membre_gestionnaire($code_membre);
              $gac->setDate_creation($date_idd->toString('yyyy-MM-dd'));
              $gac->setId_utilisateur(null);
			  $gac->setType_gac($appartenance);
			  $gac->setZone($code_zone);
			  $gac->setId_pays($id_pays);
			  $gac->setId_region($id_region);
			  $gac->setId_prefecture($id_prefecture);
			  $gac->setId_canton($id_canton);
              $gac->setGroupe('GAC');
			  $gac->setCode_secteur(null);
			  $gac->setCode_agence($code_agence);
              $gac->setCode_gac_create(null);
              $gac->setCode_gac_chaine(NULL);
              $gac_mapper->save($gac);
			  
			  //insertion dans la table eu_acteur
			  $t_acteur = new Application_Model_DbTable_EuActeur();
              $c_acteur = new Application_Model_EuActeur();
			  
			  $count = $c_acteur->findConuter() + 1;
			  $c_acteur->setId_acteur($count)
                       ->setCode_acteur($code_gac)
			           ->setCode_division(NULL)
                       ->setCode_membre($code_membre_gac)
                       ->setType_acteur($type_gac)
                       ->setId_utilisateur($user->id_utilisateur)
                       ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
					 
			  if($appartenance == 'SOURCE') {
			     $c_acteur->setCode_activite('SOURCE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			   } else if($appartenance == 'MONDE') {
			     $c_acteur->setCode_activite('MONDE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			   } else if($appartenance == 'ZONE') {
			     $c_acteur->setCode_activite('ZONE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			  }  else if($appartenance == 'PAYS') {
			     $c_acteur->setCode_activite('PAYS');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			  } else if($appartenance == 'REGION') {
			     $c_acteur->setCode_activite('REGION');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			  } else if($appartenance == 'PREFECTURE') {
			     $c_acteur->setCode_activite('PREFECTURE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
						  
			  } else if($appartenance == 'CANTON')   { 
				$c_acteur->setCode_activite('CANTON');
				$c_acteur->setCode_source_create('SOURCE');
				$c_acteur->setCode_monde_create('MONDE');
				$c_acteur->setCode_zone_create($code_zone);
				$c_acteur->setId_pays($id_pays);
				$c_acteur->setId_region($id_region);
				$c_acteur->setId_prefecture($id_prefecture);
				$c_acteur->setId_canton($id_canton);
				$c_acteur->setCode_secteur_create(NULL);
				$c_acteur->setCode_agence_create(NULL);
			  }
						  
			  $c_acteur->setCode_gac_chaine(null);
			  $t_acteur->insert($c_acteur->toArray());
			
			
			
			  
			// TECHNOPOLE
			  
			  $code = $m_membremorale->getLastCodeMembreAdmin();
              if($code == NULL) {
                 $code = $code_admin . '0000001' . 'M';
              } else {
                 $num_ordre = substr($code, 12, 7);
                 $num_ordre++;
                 $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                 $code = $code_admin . $num_ordre_bis . 'M';
              }
			  
			  $membremorale->setId_filiere(null);
              $membremorale->setCode_membre_morale($code);
              if($type_gac == "GAC_DETENTRICE" || $type_gac == "GAC_EXECUTANTE") {
                 $membremorale->setCode_type_acteur("OE");
                 $membremorale->setCode_statut("SARL");
			  } else {
				 $membremorale->setCode_type_acteur("OSE");
                 $membremorale->setCode_statut("association"); 
			  }
              $membremorale->setRaison_sociale($tetedivisiontechno." ".$appartenance);
              $membremorale->setId_pays($id_pays);
              $membremorale->setNum_registre_membre("00000000000");
              $membremorale->setDomaine_activite("PRESTATION");
              $membremorale->setSite_web(null);
              $membremorale->setQuartier_membre($membre->quartier_membre);
              $membremorale->setVille_membre($membre->ville_membre);
              $membremorale->setBp_membre(null);
              $membremorale->setTel_membre(null);
              $membremorale->setEmail_membre($membre->email_membre);
              $membremorale->setPortable_membre($membre->portable_membre);
              $membremorale->setId_utilisateur(NULL);
              $membremorale->setHeure_identification($date_idd->toString('HH:mm:ss'));
              $membremorale->setDate_identification($date_idd->toString('yyyy-MM-dd'));
              $membremorale->setCode_agence(null);
              $membremorale->setCodesecret(md5("123456"));
              $membremorale->setAuto_enroler('O');
              $membremorale->setEtat_membre("N");
              $membremorale->setType_fournisseur(NULL);
			  $membremorale->setDesactiver(2);
			  $membremorale->setId_canton($id_canton);
              $m_membremorale->save($membremorale);
			  
			  
			  $representation->setCode_membre_morale($code)
                             ->setCode_membre($code_membre)
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
              $m_representation->save($representation);
			  
			  $count = $c_acteur->findConuter() + 1;
			  $c_acteur->setId_acteur($count)
                       ->setCode_acteur($code_gac)
			           ->setCode_division(NULL)
                       ->setCode_membre($code)
                       ->setType_acteur($tetedivisiontechno)
                       ->setId_utilisateur($user->id_utilisateur)
                       ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
					 
			  if($appartenance == 'SOURCE') {
			     $c_acteur->setCode_activite('SOURCE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			   } else if($appartenance == 'MONDE') {
			     $c_acteur->setCode_activite('MONDE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			   } else if($appartenance == 'ZONE') {
			     $c_acteur->setCode_activite('ZONE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			  }  else if($appartenance == 'PAYS') {
			     $c_acteur->setCode_activite('PAYS');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			  } else if($appartenance == 'REGION') {
			     $c_acteur->setCode_activite('REGION');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			  } else if($appartenance == 'PREFECTURE') {
			     $c_acteur->setCode_activite('PREFECTURE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
						  
			  } else if($appartenance == 'CANTON')   { 
				$c_acteur->setCode_activite('CANTON');
				$c_acteur->setCode_source_create('SOURCE');
				$c_acteur->setCode_monde_create('MONDE');
				$c_acteur->setCode_zone_create($code_zone);
				$c_acteur->setId_pays($id_pays);
				$c_acteur->setId_region($id_region);
				$c_acteur->setId_prefecture($id_prefecture);
				$c_acteur->setId_canton($id_canton);
				$c_acteur->setCode_secteur_create(NULL);
				$c_acteur->setCode_agence_create(NULL);
			  }
						  
			  $c_acteur->setCode_gac_chaine(null);
			  $t_acteur->insert($c_acteur->toArray());
			  
			  
			  
			  
			  // FILIERE
			  
			  $code = $m_membremorale->getLastCodeMembreAdmin();
              if($code == NULL) {
                 $code = $code_admin . '0000001' . 'M';
              } else {
                 $num_ordre = substr($code, 12, 7);
                 $num_ordre++;
                 $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                 $code = $code_admin . $num_ordre_bis . 'M';
              }
			  
			  $membremorale->setId_filiere(null);
              $membremorale->setCode_membre_morale($code);
              if($type_gac == "GAC_DETENTRICE" || $type_gac == "GAC_EXECUTANTE") {
                 $membremorale->setCode_type_acteur("OE");
                 $membremorale->setCode_statut("SARL");
			  } else {
				 $membremorale->setCode_type_acteur("OSE");
                 $membremorale->setCode_statut("association"); 
			  }
              $membremorale->setRaison_sociale($tetedivisionfiliere." ".$appartenance);
              $membremorale->setId_pays($id_pays);
              $membremorale->setNum_registre_membre("0000000000");
              $membremorale->setDomaine_activite("PRESTATION");
              $membremorale->setSite_web(null);
              $membremorale->setQuartier_membre($membre->quartier_membre);
              $membremorale->setVille_membre($membre->ville_membre);
              $membremorale->setBp_membre(null);
              $membremorale->setTel_membre(null);
              $membremorale->setEmail_membre($membre->email_membre);
              $membremorale->setPortable_membre($membre->portable_membre);
              $membremorale->setId_utilisateur(NULL);
              $membremorale->setHeure_identification($date_idd->toString('HH:mm:ss'));
              $membremorale->setDate_identification($date_idd->toString('yyyy-MM-dd'));
              $membremorale->setCode_agence(null);
              $membremorale->setCodesecret(md5("123456"));
              $membremorale->setAuto_enroler('O');
              $membremorale->setEtat_membre("N");
              $membremorale->setType_fournisseur(NULL);
			  $membremorale->setDesactiver(2);
			  $membremorale->setId_canton($id_canton);
              $m_membremorale->save($membremorale);
			  
			  
			  $representation->setCode_membre_morale($code)
                             ->setCode_membre($code_membre)
                             ->setTitre("Representant")
                             ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur(NULL)
                             ->setEtat('inside');
              $m_representation->save($representation);
			  
			  $count = $c_acteur->findConuter() + 1;
			  $c_acteur->setId_acteur($count)
                       ->setCode_acteur($code_gac)
			           ->setCode_division(NULL)
                       ->setCode_membre($code)
                       ->setType_acteur($tetedivisionfiliere)
                       ->setId_utilisateur($user->id_utilisateur)
                       ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
					 
			  if($appartenance == 'SOURCE') {
			     $c_acteur->setCode_activite('SOURCE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			   } else if($appartenance == 'MONDE') {
			     $c_acteur->setCode_activite('MONDE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			   } else if($appartenance == 'ZONE') {
			     $c_acteur->setCode_activite('ZONE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			   }  else if($appartenance == 'PAYS') {
			     $c_acteur->setCode_activite('PAYS');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			  } else if($appartenance == 'REGION') {
			     $c_acteur->setCode_activite('REGION');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			  } else if($appartenance == 'PREFECTURE') {
			     $c_acteur->setCode_activite('PREFECTURE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
						  
			  } else if($appartenance == 'CANTON')   { 
				$c_acteur->setCode_activite('CANTON');
				$c_acteur->setCode_source_create('SOURCE');
				$c_acteur->setCode_monde_create('MONDE');
				$c_acteur->setCode_zone_create($code_zone);
				$c_acteur->setId_pays($id_pays);
				$c_acteur->setId_region($id_region);
				$c_acteur->setId_prefecture($id_prefecture);
				$c_acteur->setId_canton($id_canton);
				$c_acteur->setCode_secteur_create(NULL);
				$c_acteur->setCode_agence_create(NULL);
			  }
						  
			  $c_acteur->setCode_gac_chaine(null);
			  $t_acteur->insert($c_acteur->toArray());
			  
			  
			  // ACNEV
			  
			  $code = $m_membremorale->getLastCodeMembreAdmin();
              if($code == NULL) {
                 $code = $code_admin . '0000001' . 'M';
              } else {
                 $num_ordre = substr($code, 12, 7);
                 $num_ordre++;
                 $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                 $code = $code_admin . $num_ordre_bis . 'M';
              }
			  
			  $membremorale->setId_filiere(null);
              $membremorale->setCode_membre_morale($code);
              if($type_gac == "GAC_DETENTRICE" || $type_gac == "GAC_EXECUTANTE") {
                 $membremorale->setCode_type_acteur("OE");
                 $membremorale->setCode_statut("SARL");
			  } else {
				 $membremorale->setCode_type_acteur("OSE");
                 $membremorale->setCode_statut("association"); 
			  }
              $membremorale->setRaison_sociale($tetedivisionacnev." ".$appartenance);
              $membremorale->setId_pays($id_pays);
              $membremorale->setNum_registre_membre("00000000000");
              $membremorale->setDomaine_activite("PRESTATION");
              $membremorale->setSite_web(null);
              $membremorale->setQuartier_membre($membre->quartier_membre);
              $membremorale->setVille_membre($membre->ville_membre);
              $membremorale->setBp_membre(null);
              $membremorale->setTel_membre(null);
              $membremorale->setEmail_membre($membre->email_membre);
              $membremorale->setPortable_membre($membre->portable_membre);
              $membremorale->setId_utilisateur(NULL);
              $membremorale->setHeure_identification($date_idd->toString('HH:mm:ss'));
              $membremorale->setDate_identification($date_idd->toString('yyyy-MM-dd'));
              $membremorale->setCode_agence(null);
              $membremorale->setCodesecret(md5("123456"));
              $membremorale->setAuto_enroler('O');
              $membremorale->setEtat_membre("N");
              $membremorale->setType_fournisseur(NULL);
			  $membremorale->setDesactiver(2);
			  $membremorale->setId_canton($id_canton);
              $m_membremorale->save($membremorale);
			  
			  
			  $representation->setCode_membre_morale($code)
                             ->setCode_membre($code_membre)
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
              $m_representation->save($representation);
			  
			  $count = $c_acteur->findConuter() + 1;
			  $c_acteur->setId_acteur($count)
                       ->setCode_acteur($code_gac)
			           ->setCode_division(NULL)
                       ->setCode_membre($code)
                       ->setType_acteur($tetedivisionacnev)
                       ->setId_utilisateur($user->id_utilisateur)
                       ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
					 
			  if($appartenance == 'SOURCE') {
			     $c_acteur->setCode_activite('SOURCE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			   } else if($appartenance == 'MONDE') {
			     $c_acteur->setCode_activite('MONDE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			   } else if($appartenance == 'ZONE') {
			     $c_acteur->setCode_activite('ZONE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			  }  else if($appartenance == 'PAYS') {
			     $c_acteur->setCode_activite('PAYS');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
							 
			  } else if($appartenance == 'REGION') {
			     $c_acteur->setCode_activite('REGION');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
			   
			  } else if($appartenance == 'PREFECTURE') {
			     $c_acteur->setCode_activite('PREFECTURE');
			     $c_acteur->setCode_source_create('SOURCE');
			     $c_acteur->setCode_monde_create('MONDE');
			     $c_acteur->setCode_zone_create($code_zone);
			     $c_acteur->setId_pays($id_pays);
			     $c_acteur->setId_region($id_region);
			     $c_acteur->setId_prefecture($id_prefecture);
			     $c_acteur->setId_canton($id_canton);
			     $c_acteur->setCode_secteur_create(NULL);
			     $c_acteur->setCode_agence_create(NULL);
						  
			  } else if($appartenance == 'CANTON')   { 
				$c_acteur->setCode_activite('CANTON');
				$c_acteur->setCode_source_create('SOURCE');
				$c_acteur->setCode_monde_create('MONDE');
				$c_acteur->setCode_zone_create($code_zone);
				$c_acteur->setId_pays($id_pays);
				$c_acteur->setId_region($id_region);
				$c_acteur->setId_prefecture($id_prefecture);
				$c_acteur->setId_canton($id_canton);
				$c_acteur->setCode_secteur_create(NULL);
				$c_acteur->setCode_agence_create(NULL);
			  }
						  
			  $c_acteur->setCode_gac_chaine(null);
			  $t_acteur->insert($c_acteur->toArray());
			  
			  $db->commit();
			  $sessionmcnp->error = "Operation bien effectuee ...";
		
		} catch(Exception $exc) {
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();  
            return;
        }
		
		
	}
	
	
	
	
	public function insertacteurOLDAction()  {
	  $this->_helper->layout()->setLayout('layoutpublicesmc');
	  $sessionmcnp = new Zend_Session_Namespace('mcnp');
		
	  $db = Zend_Db_Table::getDefaultAdapter();
      $db->beginTransaction();
	  try {
		  $code_membre_gac = $this->_request->getParam('code_membre_gac');
		  $code_membre = $this->_request->getParam('code_membre');
		  
		  $representation = new Application_Model_EuRepresentation();
	      $m_representation  = new Application_Model_EuRepresentationMapper();

          $membremorale    = new Application_Model_EuMembreMorale();
	      $m_membremorale  = new Application_Model_EuMembreMoraleMapper();
		  
		  $gac_mapper = new Application_Model_EuGacMapper();
          $gac = new Application_Model_EuGac();
		  
		  //insertion dans la table eu_acteur
		  $t_acteur = new Application_Model_DbTable_EuActeur();
          $c_acteur = new Application_Model_EuActeur();
		  
		  $date_id = new Zend_Date(Zend_Date::ISO_8601);
          $date_idd = clone $date_id;
		  
		  $appartenance = "SOURCE";
		  $findmembre = $m_membremorale->find($code_membre_gac,$membremorale);
		  $findgac =  $gac_mapper->findgacsource($code_membre_gac);
		  $code_gac = $findgac[0]->code_gac;
		  
		  //insertion dans la table eu_acteur
		  $t_acteur = new Application_Model_DbTable_EuActeur();
          $c_acteur = new Application_Model_EuActeur();
		  $tetedivisiontechno = "TECHNOPOLE";
		  $tetedivisionfiliere = "FILIERE";
		  $tetedivisionacnev = "ACNEV";
		  $code_admin = "000000000000";
		  
		  // TECHNOPOLE
			  
			  $code = $m_membremorale->getLastCodeMembreAdmin();
              if($code == NULL) {
                 $code = $code_admin . '0000001' . 'M';
              } else {
                 $num_ordre = substr($code, 12, 7);
                 $num_ordre++;
                 $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                 $code = $code_admin . $num_ordre_bis . 'M';
              }
			  
			  $membremorale->setId_filiere(null);
              $membremorale->setCode_membre_morale($code);
              $membremorale->setCode_type_acteur($membremorale->code_type_acteur);
              $membremorale->setCode_statut($membremorale->code_statut);
              $membremorale->setRaison_sociale($tetedivisiontechno." ".$appartenance);
              $membremorale->setId_pays($membremorale->id_pays);
              $membremorale->setNum_registre_membre($membremorale->num_registre_membre);
              $membremorale->setDomaine_activite("PRESTATION");
              $membremorale->setSite_web($membremorale->site_web);
              $membremorale->setQuartier_membre($membremorale->quartier_membre);
              $membremorale->setVille_membre($membremorale->ville_membre);
              $membremorale->setBp_membre($membremorale->bp_membre);
              $membremorale->setTel_membre(null);
              $membremorale->setEmail_membre($membremorale->email_membre);
              $membremorale->setPortable_membre($membremorale->portable_membre);
              $membremorale->setId_utilisateur(NULL);
              $membremorale->setHeure_identification($date_idd->toString('HH:mm:ss'));
              $membremorale->setDate_identification($date_idd->toString('yyyy-MM-dd'));
              $membremorale->setCode_agence($code_admin);
              $membremorale->setCodesecret(md5("123456"));
              $membremorale->setAuto_enroler('O');
              $membremorale->setEtat_membre("N");
              $membremorale->setType_fournisseur(NULL);
			  $membremorale->setDesactiver(2);
			  $membremorale->setId_canton($membremorale->id_canton);
              $m_membremorale->save($membremorale);
			  
			  
			  $representation->setCode_membre_morale($code)
                             ->setCode_membre($code_membre)
                             ->setTitre("Representant")
                             ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur(NULL)
                             ->setEtat('inside');
              $m_representation->save($representation);
			  
			  $count = $c_acteur->findConuter() + 1;
			  $c_acteur->setId_acteur($count)
                       ->setCode_acteur($code_gac)
			           ->setCode_division(NULL)
                       ->setCode_membre($code)
                       ->setType_acteur($tetedivisiontechno)
                       ->setId_utilisateur($user->id_utilisateur)
                       ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
			  $c_acteur->setCode_activite('SOURCE');
			  $c_acteur->setCode_source_create('SOURCE');
			  $c_acteur->setCode_monde_create('MONDE');
			  $c_acteur->setCode_zone_create($code_zone);
			  $c_acteur->setId_pays(null);
			  $c_acteur->setId_region(null);
			  $c_acteur->setId_prefecture(null);
			  $c_acteur->setId_canton(null);
			  $c_acteur->setCode_secteur_create(NULL);
			  $c_acteur->setCode_agence_create(NULL);
			  
			  $c_acteur->setCode_gac_chaine(null);
			  $t_acteur->insert($c_acteur->toArray());
			  
			  
			  // FILIERE
			  
			  $code = $m_membremorale->getLastCodeMembreAdmin();
              if($code == NULL) {
                 $code = $code_admin . '0000001' . 'M';
              } else {
                 $num_ordre = substr($code, 12, 7);
                 $num_ordre++;
                 $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                 $code = $code_admin . $num_ordre_bis . 'M';
              }
			  
			  $membremorale->setId_filiere(null);
              $membremorale->setCode_membre_morale($code);
              $membremorale->setCode_type_acteur($membremorale->code_type_acteur);
              $membremorale->setCode_statut($membremorale->code_statut);
              $membremorale->setRaison_sociale($tetedivisionfiliere." ".$appartenance);
              $membremorale->setId_pays($membremorale->id_pays);
              $membremorale->setNum_registre_membre($membremorale->num_registre_membre);
              $membremorale->setDomaine_activite("PRESTATION");
              $membremorale->setSite_web($membremorale->site_web);
              $membremorale->setQuartier_membre($membremorale->quartier_membre);
              $membremorale->setVille_membre($membremorale->ville_membre);
              $membremorale->setBp_membre($membremorale->bp_membre);
              $membremorale->setTel_membre(null);
              $membremorale->setEmail_membre($membremorale->email_membre);
              $membremorale->setPortable_membre($membremorale->portable_membre);
              $membremorale->setId_utilisateur(NULL);
              $membremorale->setHeure_identification($date_idd->toString('HH:mm:ss'));
              $membremorale->setDate_identification($date_idd->toString('yyyy-MM-dd'));
              $membremorale->setCode_agence($code_admin);
              $membremorale->setCodesecret(md5("123456"));
              $membremorale->setAuto_enroler('O');
              $membremorale->setEtat_membre("N");
              $membremorale->setType_fournisseur(NULL);
			  $membremorale->setDesactiver(2);
			  $membremorale->setId_canton($membremorale->id_canton);
              $m_membremorale->save($membremorale);
			  
			  
			  $representation->setCode_membre_morale($code)
                             ->setCode_membre($code_membre)
                             ->setTitre("Representant")
                             ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur(NULL)
                             ->setEtat('inside');
              $m_representation->save($representation);
			  
			  $count = $c_acteur->findConuter() + 1;
			  $c_acteur->setId_acteur($count)
                       ->setCode_acteur($code_gac)
			           ->setCode_division(NULL)
                       ->setCode_membre($code)
                       ->setType_acteur($tetedivisionfiliere)
                       ->setId_utilisateur($user->id_utilisateur)
                       ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
			  $c_acteur->setCode_activite('SOURCE');
			  $c_acteur->setCode_source_create('SOURCE');
			  $c_acteur->setCode_monde_create('MONDE');
			  $c_acteur->setCode_zone_create($code_zone);
			  $c_acteur->setId_pays(null);
			  $c_acteur->setId_region(null);
			  $c_acteur->setId_prefecture(null);
			  $c_acteur->setId_canton(null);
			  $c_acteur->setCode_secteur_create(NULL);
			  $c_acteur->setCode_agence_create(NULL);
			  
			  $c_acteur->setCode_gac_chaine(null);
			  $t_acteur->insert($c_acteur->toArray());
			  
			  
			  // ACNEV
			  
			  $code = $m_membremorale->getLastCodeMembreAdmin();
              if($code == NULL) {
                 $code = $code_admin . '0000001' . 'M';
              } else {
                 $num_ordre = substr($code, 12, 7);
                 $num_ordre++;
                 $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                 $code = $code_admin . $num_ordre_bis . 'M';
              }
			  
			  $membremorale->setId_filiere(null);
              $membremorale->setCode_membre_morale($code);
              $membremorale->setCode_type_acteur($membremorale->code_type_acteur);
              $membremorale->setCode_statut($membremorale->code_statut);
              $membremorale->setRaison_sociale($tetedivisionacnev." ".$appartenance);
              $membremorale->setId_pays($request->getParam("id_pays"));
              $membremorale->setNum_registre_membre($membremorale->num_registre_membre);
              $membremorale->setDomaine_activite("PRESTATION");
              $membremorale->setSite_web($membremorale->site_web);
              $membremorale->setQuartier_membre($membremorale->quartier_membre);
              $membremorale->setVille_membre($membremorale->ville_membre);
              $membremorale->setBp_membre($membremorale->bp_membre);
              $membremorale->setTel_membre(null);
              $membremorale->setEmail_membre($membremorale->email_membre);
              $membremorale->setPortable_membre($membremorale->portable_membre);
              $membremorale->setId_utilisateur(NULL);
              $membremorale->setHeure_identification($date_idd->toString('HH:mm:ss'));
              $membremorale->setDate_identification($date_idd->toString('yyyy-MM-dd'));
              $membremorale->setCode_agence($code_admin);
              $membremorale->setCodesecret(md5("123456"));
              $membremorale->setAuto_enroler('O');
              $membremorale->setEtat_membre("N");
              $membremorale->setType_fournisseur(NULL);
			  $membremorale->setDesactiver(2);
			  $membremorale->setId_canton($membremorale->id_canton);
              $m_membremorale->save($membremorale);
			  
			  
			  $representation->setCode_membre_morale($code)
                             ->setCode_membre($code_membre)
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
              $m_representation->save($representation);
			  
			  $count = $c_acteur->findConuter() + 1;
			  $c_acteur->setId_acteur($count)
                       ->setCode_acteur($code_gac)
			           ->setCode_division(NULL)
                       ->setCode_membre($code)
                       ->setType_acteur($tetedivisionacnev)
                       ->setId_utilisateur($user->id_utilisateur)
                       ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
			  $c_acteur->setCode_activite('SOURCE');
			  $c_acteur->setCode_source_create('SOURCE');
			  $c_acteur->setCode_monde_create('MONDE');
			  $c_acteur->setCode_zone_create($code_zone);
			  $c_acteur->setId_pays(null);
			  $c_acteur->setId_region(null);
			  $c_acteur->setId_prefecture(null);
			  $c_acteur->setId_canton(null);
			  $c_acteur->setCode_secteur_create(NULL);
			  $c_acteur->setCode_agence_create(NULL);
			  
			  $c_acteur->setCode_gac_chaine(null);
			  $t_acteur->insert($c_acteur->toArray());
			  
			  $db->commit();
		
	  } catch(Exception $exc) {
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();  
            return;
      }
		
	}
	
	
	
	public function lastcodemembreadminAction() {
	   $table = new Application_Model_DbTable_EuMembreMorale();
	   $select = $table->select();
       $select->from($table, array('MAX(code_membre_morale) as code'));
       $select->where('code_membre_morale LIKE ?','000000000000'.'%');
       $result = $table->fetchAll($select);
	   
	   $result = $table->fetchAll($select);
       if(count($result) == 0) {
          $code = "";
       } else {
          $row  = $result->current();
          $code = $row['code'];
       }
	   $this->view->code = $code;
	}


    public  function sommebanapproAction()  {
        $bon_neutre_id = 31466;
        $date_banque = "2018-02-01";
	    $date_banque = new Zend_Date($date_banque);
	    //$date_banque->addDay(1);
	    $table = new Application_Model_DbTable_EuBonNeutreDetail();
        $select = $table->select();
	    $select->from($table,array('SUM(bon_neutre_detail_montant_solde) as somme'));
	    $select->where('bon_neutre_id = ?', $bon_neutre_id);
	    //$select->where('(bon_neutre_appro_id is not null');
	    //$select->where('bon_neutre_appro_id > ?)', 0);

        $select->where('bon_neutre_appro_id > ?', 0);
	    $select->where('bon_neutre_detail_montant_solde > ? ', 0);
	    $select->where("REPLACE(bon_neutre_detail_date, ' ', '') < ? ", $date_banque->toString('yyyy-MM-dd'));
	
       	
	    $result = $table->fetchAll($select);
        $row = $result->current();
        $somme = $row['somme'];
        if($somme == NULL) {
           $somme = 0;
        } else {
           $row = $result->current();
           $somme = $row['somme'];
        }
	    $this->view->somme = $somme;	
	    $this->view->date_banque = $date_banque->toString('yyyy-MM-dd');

    }


    public  function sommebanoldAction()  {
        $bon_neutre_id = 31466;
        $date_banque = "2018-02-01";
	    $date_banque = new Zend_Date($date_banque);
	    //$date_banque->addDay(1);
	    $table = new Application_Model_DbTable_EuBonNeutreDetail();
        $select = $table->select();

        $select->from($table,array('SUM(bon_neutre_detail_montant_solde) as somme'));
	    $select->where('bon_neutre_id = ?', $bon_neutre_id);
        //$select->where('bon_neutre_appro_id  is  null');
        $select->where("bon_neutre_detail_montant_solde > ? ", 0);
	    $select->where("REPLACE(bon_neutre_detail_date_numero, ' ', '') < ? ",$date_banque->toString('yyyy-MM-dd'));
        $result = $table->fetchAll($select);
        $row = $result->current();

        if($row['somme'] == NULL) {
           $this->view->somme = 0;
        } else {
           $this->view->somme = $row['somme'];
        }

        $this->view->date_banque = $date_banque->toString('yyyy-MM-dd');
        $this->view->ligne = count($result);
        
    }

	
	
    public function testmailAction() {
      /* page index/mcnp  */
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');
    
        $this->view->index = "mcnp";
	  
        $esmc_email	 = "yokamly@gmail.com";	
        $esmc_email2	 = "natacha@gacsource.com";	
		
        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
 
        $transport = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);

        //$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
        //Zend_Mail::setDefaultTransport($tr);		
        $mail = new Zend_Mail();
        //$mail->setBodyText('Mon texte de test');
        $mail->setBodyHtml('La liste des bons émis depuis');
        $mail->setFrom($esmc_email2, 'ESMC');
        $mail->addTo($esmc_email, 'MCNP');
        $mail->setSubject('Les bons emis depuis '); 

        $mail->send($transport);//$tr


    }

	
	
    public function mcnpAction() {
      /* page index/mcnp  */

      $sessionmembre = new Zend_Session_Namespace('membre');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublic');
    
      $this->view->index = "mcnp";


    }

	
    public function ceuAction() {
      /* page index/ceu  */

      $sessionmembre = new Zend_Session_Namespace('membre');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicceu');
    
      $this->view->index = "ceu";
    }
	
    public function esmcAction() {
      /* page index/esmc  */

    $sessionmembre = new Zend_Session_Namespace('membre');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    
$this->view->index = "esmc";

    }
	

	public  function indexandroidAction()  {
		/* page index  */
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
    
        $this->view->index = "esmc";
		

		if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
           $domaine = "esmcgie.com";
           $domaine2 = "https://esmc.esmcgie.com/index/indexandroid";
           $this->_redirect($domaine2);
        } else if($_SERVER['SERVER_NAME'] == "esmc.esmcgie.com"){
           $domaine = "esmcgie.com";
           $domaine2 = "https://www.esmcgie.com/index/indexandroid";
           $this->_redirect($domaine2);
        } else {
           $domaine = "prod.esmcgie.com";
           $domaine2 = "https://www.esmcgie.com/index/indexandroid";
           $this->_redirect($domaine2);
       }

	}
  

    public function indexAction() {
        /*$domaine2 = "https://esmc.esmcgie.com";
        $this->_redirect($domaine2);*/

        /* page index  */
        $sessionmembre = new Zend_Session_Namespace('membre');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcadmin');

        //$sessionmembre = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout()->setLayout('layoutesmc');


        

        $this->view->index = "esmc";

        if ($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
            $domaine2 = "https://esmc.esmcgie.com";
            $this->_redirect($domaine2);
        } 
        
        /*elseif ($_SERVER['SERVER_NAME'] == "esmc.esmcgie.com") {
            $domaine2 = "https://esmc.esmcgie.com";
            $this->_redirect($domaine2);
        } else {
            $domaine2 = "http://esmc.esmcgie.com";
            $this->_redirect($domaine2);
        }*/


    }
	

    public function index2Action() {
      /* page index  */
      $sessionmembre = new Zend_Session_Namespace('membre');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmc');
    
      $this->view->index = "esmc";

      /*
      if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
           $domaine = "prod.gacsource.net";
           $domaine2 = "https://esmc.gacsource.net";
           $this->_redirect($domaine2);
      } else if($_SERVER['SERVER_NAME'] == "esmcgacsource.com"){
           $domaine = "prod.esmcgacsource.com";
           $domaine2 = "http://www.esmcgacsource.com";
           $this->_redirect($domaine2);
      } else {
        $domaine = "prod.esmcgacsource.com";
        $domaine2 = "http://www.esmcgacsource.com";
        $this->_redirect($domaine2);
      }
  */  

    }
	
	
  
    public function filiereAction()
    {
        /* page index/filiere - Liste des acteurs */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
        $filiere = new Application_Model_EuFiliereMapper();
        $this->view->entries = $filiere->fetchAll2();
        $this->view->selectfiliere = $filiere->fetchAll2();

    }

    public function rechercheAction()
    {
        /* page index/recherche - Recherche des acteurs par criteres quartier, ville et filiere */

        $this->_helper->layout()->setLayout('layoutpublic');
        $filiere = new Application_Model_EuFiliereMapper();
        $acteursmembremorale = new Application_Model_EuMembreMoraleMapper();
        $this->view->selectfiliere = $filiere->fetchAll2();
        if(isset($_POST['ok']) && $_POST['ok']=="ok"){
        $this->view->entries = $acteursmembremorale->fetchAllrecherche($_POST['id_filiere'], $_POST['quartier'], $_POST['ville']);
        }
    }



    public function filiereproduitAction()
    {
        /* page index/filiereproduit - Liste des produits en fonction des acteurs  */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
        $filiere = new Application_Model_EuFiliereMapper();
        $this->view->entries = $filiere->fetchAll3();
    $this->view->selectfiliere = $filiere->fetchAll3();

    }



    public function documentAction()
    {
        /* page index/document - Liste des DAC (Dossiers d'Appel à Candidature) et des AAOO (Avis d'Appel d'Offres Ouverts) */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

        $document = new Application_Model_EuDocumentMapper();
        $this->view->entries = $document->fetchAll3();

    }


    public function addappeloffresAction()
    {
        /* page index/addappeloffres - Soumission à l'appel d'offre */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['id_nom_entrepot']) && $_POST['id_nom_entrepot']!="" && isset($_POST['num_appeloffres']) && $_POST['num_appeloffres']!="" && isset($_POST['libelle_appeloffres']) && $_POST['libelle_appeloffres']!="" && isset($_FILES['desc_appeloffres']['name']) && $_FILES['desc_appeloffres']['name']!="") {
    
    include("Transfert.php");
    $chemin = "appeloffress";
    $file = $_FILES['desc_appeloffres']['name'];
    $file1='desc_appeloffres';
    $appeloffres = $chemin."/".transfert($chemin,$file1);
      
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuAppeloffres();
        $ma = new Application_Model_EuAppeloffresMapper();
      
            $compteur = $ma->findConuter() + 1;
            $a->setId_appeloffres($compteur);
            $a->setId_nom_entrepot($_POST['id_nom_entrepot']);
            $a->setNum_appeloffres($_POST['num_appeloffres']);
            $a->setLibelle_appeloffres($_POST['libelle_appeloffres']);
            $a->setDesc_appeloffres($appeloffres);
            $a->setId_utilisateur($_POST['id_utilisateur']);
            $a->setPreselection(0);
            $a->setSelection(0);
            $a->setPropo(0);
            $a->setOkfinal(0);
      $a->setDate_appeloffres($date_id->toString('yyyy-MM-dd'));
            $ma->save($a);
      
    $this->_redirect('/index/document');
    } else {  $this->view->error = "Champs * obligatoire ..."; 
     
            $id = (int)$this->_request->aram('id');
            if ($id != 0) {
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
    $ma->find($id, $a);
    $this->view->document = $a;
            }
  }
       
  } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $a = new Application_Model_EuDocument();
        $ma = new Application_Model_EuDocumentMapper();
    $ma->find($id, $a);
    $this->view->document = $a;
            }
  }
  }


    public function acteurproduitAction()
    {
        /* page index/acteurproduit - Liste des produits par acteur */

$sessionmembre = new Zend_Session_Namespace('membre');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

        $id = (string) $this->_request->getParam('id');
    if($id!=""){
      $this->view->code_membre_vendeur = $id;

        $articlestockes = new Application_Model_EuArticleStockesMapper();
        $this->view->entries = $articlestockes->fetchAll2($id);

if (!isset($sessionmembre->code_membre)) {
                    $sessionmembre->errorlogin = "Vous devez vous connecter à votre espace avant d'effectuer cette action...";
          } 



    } else {  $this->_redirect('/index/filiere');  } 
    }


    public function appelnnAction()
    {
        /* page index/appelnn - Liste des collectes */

$sessionmembre = new Zend_Session_Namespace('membre');

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
              $date_idd = clone $date_id;
              $date_fin = clone $date_id;
        $periode = Util_Utils::getParametre('periode', 'collecte');
              $date_fin->addDay($periode);
        
        $proposition = new Application_Model_EuProposition();
        $map_proposition = new Application_Model_EuPropositionMapper();
        $membre = new Application_Model_EuMembre();
        $map_membre = new Application_Model_EuMembreMapper();
        $membremorale = new Application_Model_EuMembreMorale();
        $map_membremorale = new Application_Model_EuMembreMoraleMapper();
        $proposition = new Application_Model_EuProposition();
        $map_proposition = new Application_Model_EuPropositionMapper();
              $appel = new Application_Model_EuAppelNn();
        $map_appel = new Application_Model_EuAppelNnMapper();
              $t_appel = new Application_Model_DbTable_EuAppelNn();
              $compte = new Application_Model_EuCompte();
              $map_compte = new Application_Model_EuCompteMapper();
              $dappel = new Application_Model_EuDetailAppelNn();
        $map_dappel = new Application_Model_EuDetailAppelNnMapper();

        $appel_offre = new Application_Model_EuAppelOffre();
        $map_appel_offre = new Application_Model_EuAppelOffreMapper();

    $t_frais = new Application_Model_DbTable_EuFrais();
        $select = $t_frais->select();
    $select->where('valider = ?',1);
    $select->where('disponible = ?',1); 
        $frais = $t_frais->fetchAll($select);

        foreach ($frais as $row) {

    $id_proposition = $row->id_proposition;
    $map_proposition->find($row->id_proposition, $proposition);
    $map_appel_offre->find($proposition->id_appel_offre, $appel_offre);
    $appel_nn = "Collecte : ".$appel_offre->numero_offre." / ".$appel_offre->nom_appel_offre;
    
    $t_utilisateur = new Application_Model_DbTable_EuUtilisateur();
        $select = $t_utilisateur->select();
    $select->where('code_groupe = ?',"surveillance");
        $utilisateur = $t_utilisateur->fetchRow($select);
    $code_compte == "NN-CAPA-".$utilisateur->code_membre;
    $code_membreb == $utilisateur->code_membre;
    
               $nn = $map_appel->findByAppel($id_proposition);
             $compteur_appel = $map_appel->findConuter() + 1;
             if ($nn == NULL) {
                $appel->setId_appel_nn($compteur_appel)
                  ->setId_proposition($id_proposition)
                      ->setDesignation_appel($appel_nn)
                                  ->setDate_appel($date_idd->toString('yyyy-MM-dd'))
                  ->setDate_fin($date_fin->toString('yyyy-MM-dd'))
                                  ->setCode_compte($code_compte)
                                  ->setMontant_nn(0)
                                  ->setDisponible(0)
                                  ->setCode_membre_morale($code_membreb)
                                  ->setId_utilisateur(NULL);//$user->id_utilisateur    
                      $map_appel->save($appel);
             }

             }


        $appelnn = new Application_Model_EuAppelNnMapper();
    
    $t_utilisateur = new Application_Model_DbTable_EuUtilisateur();
        $select = $t_utilisateur->select();
    $select->where('code_groupe = ?',"surveillance");
    $select->where('code_membre = ?',$sessionmembre->code_membre);
        $utilisateur = $t_utilisateur->fetchRow($select);
    if(count($utilisateur) > 0){
        $this->view->entries = $appelnn->fetchAll3();
      }else{
        $this->view->entries = $appelnn->fetchAll2();
        }

    }






    public function acteurpbfAction()
    {
        /* page index/acteurpbf - Liste des pdf */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

        $acteurpbf = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $acteurpbf->fetchAllPbfDsms();

    }


    public function acteurpbfsourceAction()
    {
        /* page index/acteurpbfsource - Liste des pdf source */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

        $acteurpbf = new Application_Model_EuMembreMoraleMapper();
        $this->view->entries = $acteurpbf->fetchAllDivisionSource(3);//

    }


    public function codesmsAction()
    {
        /* page index/codesms - Achat de Code SMS */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
        $id = (int) $this->_request->getParam('id');
    if($id > 0){
      
$acteurM = new Application_Model_EuActeur();
$acteur = new Application_Model_EuActeur();
$acteurM->find($id, $acteur);

      $this->view->code_membre_vendeur = $acteur->code_membre;
      $this->view->code_envoi = 'NN-TR-' . $acteur->code_membre;

        if (isset($_POST['ok']) && $_POST['ok'] == "ok") {
            if (isset($_POST['type_transfert']) && $_POST['type_transfert'] != "" && isset($_POST['mont_transfert']) && $_POST['mont_transfert'] > 0 && isset($_POST['tel_dest']) && $_POST['tel_dest'] != "") {


if($_POST['type_transfert'] == "MF107" || $_POST['type_transfert'] == "MF11000" || $_POST['type_transfert'] == "MFL"){
$mont = Util_Utils::getParametre('FCPS', 'valeur') + Util_Utils::getParametre('FL', 'valeur') + Util_Utils::getParametre('FS', 'valeur');
$quota = Util_Utils::getParametre('quotaMF', 'valeur');
$montant_total = $quota * $mont;
$result = $_POST['mont_transfert'] % $mont;
  if($result != 0){
                    $this->view->error = "Le montant n'est pas un multiple de ".$mont.".";
                    return;
    }
  if($_POST['mont_transfert'] > $montant_total){
                    $this->view->error = "Le montant dépasse le montant autorisé, soit ".$quota." part de ".$mont.".";
                    return;
    }
  }


$acteurM = new Application_Model_EuActeur();
$acteur = new Application_Model_EuActeur();
$acteurM->find($id, $acteur);

      $this->view->code_membre_vendeur = $acteur->code_membre;

        $type = $_POST['type_transfert'];
        $tel = $_POST['tel_dest'];
        $code_envoi = 'NN-TR-' . $acteur->code_membre;
        //$code_recu = $request->code_recu;
        $montant = $_POST['mont_transfert'];
        //$code_dev = $request->code_dev;
    

            $date = Zend_Date::now();

                $cm_map = new Application_Model_EuCompteMapper();
                $cm = new Application_Model_EuCompte();
                $ret = $cm_map->find($code_envoi, $cm);

                if ($ret && $cm->getSolde() >= $montant) {
          
                    $code_transfert = strtoupper(Util_Utils::genererCodeSMS(8));
          
            $money_map = new Application_Model_EuSmsmoneyMapper();
            $compteursmsmoney = $money_map->findConuter() + 1;
            $sms_money = new Application_Model_EuSmsmoney();
                  $sms_money->setNEng($compteursmsmoney)
                    ->setCreditAmount($montant)
                    ->setFromAccount($code_envoi)
                    ->setCreditCode($code_transfert)
                    ->setSentTo($tel)
                    ->setDestAccount(NULL)
                    ->setDatetime($date->toString('yyyy-MM-dd HH:mm:ss'))
                    ->setDatetimeConsumed(NULL)
                    ->setDestAccount_Consumed(NULL)
                    ->setCurrencyCode('XOF')
                    ->setIDDatetimeConsumed(0)
                    ->setIDDatetime(Util_Utils::getIDDate($date->toString('yyyy-MM-dd')))
                    ->setId_Utilisateur(NULL)
                    ->setMotif($type)
                    ->setCode_Agence(NULL)
                    ->setNum_recu($NULL);
                    $money_map->save($sms_money);
            
    

$mp_detailsmsmoney = new Application_Model_EuDetailSmsmoneyMapper();
$p_detailsmsmoney = new Application_Model_EuDetailSmsmoney();
$entries_detailsmsmoney = $mp_detailsmsmoney->findByCodeMembre($acteur->code_membre);
$montplace = $montant;
foreach ($entries_detailsmsmoney as $entry):            

if($montplace <= $entry->solde_sms){      
$detailsmsmoney_mapper = new Application_Model_EuDetailSmsmoneyMapper();
$detailsmsmoney_p = new Application_Model_EuDetailSmsmoney();
$result_detailsmsmoney = $detailsmsmoney_mapper->find($entry->id_detail_smsmoney, $detailsmsmoney_p);
$detailsmsmoney_p->setSolde_sms($detailsmsmoney_p->getSolde_sms() - $montplace);
$detailsmsmoney_p->setMont_vendu($detailsmsmoney_p->getMont_vendu() + $montplace);
$detailsmsmoney_mapper->update($detailsmsmoney_p);


            $td_dvent = new Application_Model_DbTable_EuDetailVentesms();
                        $d_dvent = new Application_Model_EuDetailVentesms();
                                $d_dvent->setId_detail_smsmoney($entry->id_detail_smsmoney)
                                        ->setId_utilisateur(NULL)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_dist($acteur->code_membre)
                                        ->setMont_vente($montplace)
                                        ->setDate_vente($date->toString('yyyy-MM-dd HH:mm:ss'))
                                        ->setType_tansfert($type)
                                        ->setCreditcode($code_transfert)
                                        ->setCode_produit($type);
                                $td_dvent->insert($d_dvent->toArray());


break;
}else{
$detailsmsmoney_mapper = new Application_Model_EuDetailSmsmoneyMapper();
$detailsmsmoney_p = new Application_Model_EuDetailSmsmoney();
$result_detailsmsmoney = $detailsmsmoney_mapper->find($entry->id_detail_smsmoney, $detailsmsmoney_p);
$detailsmsmoney_p->setSolde_sms($detailsmsmoney_p->getSolde_sms() - $entry->solde_sms);
$detailsmsmoney_p->setMont_vendu($detailsmsmoney_p->getMont_vendu() + $entry->solde_sms);
$detailsmsmoney_mapper->update($detailsmsmoney_p);
$montplace = $montplace - $entry->solde_sms;


            $td_dvent = new Application_Model_DbTable_EuDetailVentesms();
                        $d_dvent = new Application_Model_EuDetailVentesms();
                                $d_dvent->setId_detail_smsmoney($entry->id_detail_smsmoney)
                                        ->setId_utilisateur(NULL)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_dist($acteur->code_membre)
                                        ->setMont_vente($entry->solde_sms)
                                        ->setDate_vente($date->toString('yyyy-MM-dd HH:mm:ss'))
                                        ->setType_tansfert($type)
                                        ->setCreditcode($code_transfert)
                                        ->setCode_produit($type);
                                $td_dvent->insert($d_dvent->toArray());


}     
endforeach;           
            


            $sms = new Application_Model_EuSms();
            $compteursms = $sms->findConuter() + 1;
            $tbl_sms = new Application_Model_DbTable_EuSms();
                      $sms->setNEng($compteursms)
                        ->setDateEnvoi(NULL)
                            ->setDateTime($date->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setHeureEnvoi(NULL)
                            ->setIDHeureEnvoi(0)
                            ->setDecodeString(NULL)
                            ->setTypeDestinataire(NULL)
              ->setRecipient($tel)
                            ->setNom(NULL)
                            ->setPrenom(NULL)
                            ->setSociete(NULL)
                            ->setRetries(0)
                            ->setEnvoyeLe(NULL)
                            ->setEnvoyePar(NULL)
                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('yyyy-MM-dd')))
                            ->setIDDateEnvoi(0)
                            ->setSMSBody($montant . ' ont ete ajoute au Code: ' . $code_transfert)
                            ->setEtat(0);
                    $tbl_sms->insert($sms->toArray());







                    $cm->setSolde($cm->getSolde() - $montant);
                    $cm_map->update($cm);

                $this->view->error = "Operation bien effectuée";
                } else {
                    $this->view->error = "Erreur de traitement: Le solde du transfert est insuffisant ou ce compte n'existe pas";
                    //return;
                }

            } else {
                $this->view->error = "Saisir tous les champs";
            }
        }

    } else {  $this->_redirect('/index/acteurpbf');  } 


    }



    public function codesmssourceAction()
    {
        /* page index/codesmssource - Achat de Code SMS Source */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
        $id = (int) $this->_request->getParam('id');
    if($id > 0){
      
$acteurM = new Application_Model_EuActeur();
$acteur = new Application_Model_EuActeur();
$acteurM->find($id, $acteur);

      $this->view->code_membre_vendeur = $acteur->code_membre;
      
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['acheteur_type']) && $_POST['acheteur_type']!="" && 
  (
  (isset($_POST['acheteur_nom']) && $_POST['acheteur_nom']!="" && isset($_POST['acheteur_prenom']) && $_POST['acheteur_prenom']!="") || 
  isset($_POST['acheteur_raison_sociale']) && $_POST['acheteur_raison_sociale']!=""
  ) && 
  isset($_POST['acheteur_numero']) && $_POST['acheteur_numero']!="" && isset($_POST['type_transfert']) && $_POST['type_transfert']!="" && isset($_POST['acheteur_cel']) && $_POST['acheteur_cel']!="" && isset($_POST['acheteur_banque']) && $_POST['acheteur_banque']!="" && isset($_POST['mont_transfert']) && $_POST['mont_transfert']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
    
      
        $acheteur_mapper = new Application_Model_EuAcheteurMapper();
    $acheteur = $acheteur_mapper->fetchAllByNumero($_POST['acheteur_numero'], $_POST['acheteur_banque']); 
    if(count($acheteur) > 0){
$this->view->error = "Numéro de reçu déjà utilisé ...";
      }else{
      
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
      
        $acheteur = new Application_Model_EuAcheteur();
        $acheteur_mapper = new Application_Model_EuAcheteurMapper();
      
            $compteur_acheteur = $acheteur_mapper->findConuter() + 1;
            $acheteur->setAcheteur_id($compteur_acheteur);
            $acheteur->setAcheteur_prenom($_POST['acheteur_prenom']);
            $acheteur->setAcheteur_nom($_POST['acheteur_nom']);
            $acheteur->setAcheteur_raison_sociale($_POST['acheteur_raison_sociale']);
            $acheteur->setAcheteur_numero($_POST['acheteur_numero']);
            $acheteur->setAcheteur_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $acheteur->setType_transfert($_POST['type_transfert']);
            $acheteur->setAcheteur_banque($_POST['acheteur_banque']);
            $acheteur->setAcheteur_cel($_POST['acheteur_cel']);
            $acheteur->setMont_transfert($_POST['mont_transfert']);
            $acheteur->setAcheteur_code_membre($acteur->code_membre);
            $acheteur->setAcheteur_type($_POST['acheteur_type']);
            $acheteur->setCode_agence($_POST['code_agence']);
            $acheteur->setPublier(0);
            $acheteur_mapper->save($acheteur);


if($_POST['acheteur_type'] == "PP"){
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $_POST["acheteur_cel"], "Vous venez de payer un code SMS. Vous allez recevoir une confirmation dans quelques minutes");

$mobilekacm = Util_Utils::getParametre('mobile', 'kacm');
$compteur = Util_Utils::findConuter() + 1;
//Util_Utils::addSms($compteur, $mobilekacm, "Un achat de Code SMS est fait. Acheteur: ".$_POST['acheteur_nom']." ".$_POST['acheteur_prenom'].", Reçu banque: ".$_POST['acheteur_numero'].", Banque: ".$_POST['acheteur_banque'].", Type transfert: ".$_POST['type_transfert']);

}else if($_POST['acheteur_type'] == "PM"){
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $_POST["acheteur_cel"], "Vous venez de payer un code SMS. Vous allez recevoir une confirmation. Veuillez contacter le centre de enrolement le plus proche pour avoir vos agrements...");

$mobilekacm = Util_Utils::getParametre('mobile', 'kacm');
$compteur = Util_Utils::findConuter() + 1;
//Util_Utils::addSms($compteur, $mobilekacm, "Un achat de Code SMS est fait. Acheteur: ".$_POST['acheteur_raison_sociale'].", Reçu banque: ".$_POST['acheteur_numero'].", Banque: ".$_POST['acheteur_banque'].", Type transfert: ".$_POST['type_transfert']);
  }

$this->view->error = "Opération bien réussie. Vous serez contacté dans quelques instants.";

    //$this->_redirect('/index/codesmssource/id/'.$id);
        } 
    } else {  $this->view->error = "Champs * obligatoire ..."; }
  }


    } else {  $this->_redirect('/index/acteurpbfsource');  } 


    }




    public function enrolementsmsAction()
    {
        /* page index/enrolementsms - Enrolement avec Code SMS */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
  
    if(isset($_POST['ok']) && $_POST['ok']=="ok"){
  if (isset($_POST['code_fs']) && $_POST['code_fs']!="" && isset($_POST['code_fl']) && $_POST['code_fl']!="" && isset($_POST['nom_membre']) && $_POST['nom_membre']!="" && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="" && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!="" && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!="" && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!="" && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="" && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!="" && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!="" && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" && isset($_POST['profession_membre']) && $_POST['profession_membre']!="" && isset($_POST['religion_membre']) && $_POST['religion_membre']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="") {
// && isset($_POST['code_fkps']) && $_POST['code_fkps']!=""     


$smsmoneyM = new Application_Model_EuSmsmoneyMapper();
if($smsmoneyFS = $smsmoneyM->findByCreditCode9($_POST['code_fs'], "FS") && $smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL") && (($_POST['code_fkps']=="") || (isset($_POST['code_fkps']) && $_POST['code_fkps']!="" && $smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS")))){
// && $smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS")

            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;
            $date_nais = new Zend_Date($_POST["date_nais_membre"]);

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            $compteur = $preinsc_mapper->findConuter() + 1;         
          
            $preinscription = new Application_Model_EuPreinscription();
            $mapper = new Application_Model_EuPreinscriptionMapper();
            
            $preinscription->setId_preinscription($compteur)
                           ->setNom_membre($_POST["nom_membre"])
                           ->setPrenom_membre($_POST["prenom_membre"])
                           ->setSexe_membre($_POST["sexe_membre"])
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($_POST["id_pays"])
                           ->setLieu_nais_membre($_POST["lieu_nais_membre"])
                           ->setPere_membre($_POST["pere_membre"])
                           ->setMere_membre($_POST["mere_membre"])
                           ->setSitfam_membre($_POST["sitfam_membre"])
                           ->setNbr_enf_membre($_POST["nbr_enf_membre"])
                           ->setProfession_membre($_POST["profession_membre"])
                           ->setFormation($_POST["formation"])
                           ->setId_religion_membre($_POST["religion_membre"])
                           ->setQuartier_membre($_POST["quartier_membre"])
                           ->setVille_membre($_POST["ville_membre"])
                           ->setBp_membre($_POST["bp_membre"])
                           ->setTel_membre($_POST["tel_membre"])
                           ->setEmail_membre($_POST["email_membre"])
                           ->setPortable_membre($_POST["portable_membre"])
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_fs($_POST["code_fs"])
                           ->setCode_fl($_POST["code_fl"]);
                $preinscription->setCode_fkps($_POST["code_fkps"]);

                $mapper->save($preinscription);

          
          
                for($i = 0; $i < count($_POST['code_banque']); $i++) {
                    $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                    $cb = new Application_Model_EuCompteBancaire();
                    $cb_compteur = $cb_mapper->findConuter() + 1;         
          
                    $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i])
                               ->setId_preinscription($compteur)
                               ->setId_preinscription_morale(NULL);
                            $cb_mapper->save($cb);
                }

/*          */          
                    
                      
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $_POST["portable_membre"], "Vous venez de faire une preinscription PP. Vous allez recevoir une confirmation dans quelques minutes");

$mobilekacm = Util_Utils::getParametre('mobile', 'kacm');
$compteur = Util_Utils::findConuter() + 1;
//Util_Utils::addSms($compteur, $mobilekacm, "Une preinscription PP est faite. Membre: ".$_POST['nom_membre']." ".$_POST['prenom_membre'].", Portable: ".$_POST['portable_membre']);

      $this->view->error = "Pré-inscription bien effectuée ...";
    //$this->_redirect('/');
    } else {  $this->view->error = "Vérifier bien les codes SMS ...";  } 
    } else {  $this->view->error = "Champs * obligatoire ...";  } 
    }
    
    }


    public function enrolementpmsmsAction()
    {
        /* page index/enrolementpmsms - Mise sur chaine avec Code SMS */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
        
  
    if(isset($_POST['ok']) && $_POST['ok']=="ok"){
  if (isset($_POST['code_fs']) && $_POST['code_fs']!="" && isset($_POST['code_fl']) && $_POST['code_fl']!="" && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="" && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="" && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!="" && isset($_POST['code_statut']) && $_POST['code_statut']!="" && isset($_POST['code_rep']) && $_POST['code_rep']!="" && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="") {
// && isset($_POST['code_fkps']) && $_POST['code_fkps']!=""     

$offres_mapper = new Application_Model_EuAppeloffresMapper();
$smsmoneyM = new Application_Model_EuSmsmoneyMapper();
$agrement_mapper = new Application_Model_EuAgrementMapper();
$licence_mapper = new Application_Model_EuLicenceMapper();

if(
$smsmoneyFS = $smsmoneyM->findByCreditCode9($_POST['code_fs'], "FS") && 
$smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL") && 
(($_POST['code_fkps']=="") || (isset($_POST['code_fkps']) && $_POST['code_fkps']!="" && $smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS"))) && 
(
(isset($_POST["numero_contrat"]) && $_POST["numero_contrat"] != "" && $trouveof = $offres_mapper->findoffres($_POST["numero_contrat"])) || 
(isset($_POST["numero_licence"]) && $_POST["numero_licence"] != "" && $trouvel = $licence_mapper->findlicence($_POST["numero_licence"])) || 
($trouveagrementfiliere = $agrement_mapper->findagrementfiliere($_POST["numero_agrement_filiere"]) && 
$trouveagrementacnev = $agrement_mapper->findagrementacnev($_POST["numero_agrement_acnev"]) && 
$trouveagrementtechno = $agrement_mapper->findagrementtechno($_POST["numero_agrement_technopole"]))
)
){
//$smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS") && 

            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;

$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur = $preinsc_mapper->findConuter() + 1;         
          
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper = new Application_Model_EuPreinscriptionMoraleMapper();
            
                        $preinscriptionmorale->setId_preinscription_morale($compteur)
                               ->setCode_type_acteur($_POST["code_type_acteur"])
                               ->setCode_statut($_POST["code_statut"])
                               ->setRaison_sociale($_POST["raison_sociale"])
                 ->setId_pays($_POST["id_pays"])
                               ->setNum_registre_membre($_POST["num_registre_membre"])
                               ->setDomaine_activite($_POST["domaine_activite"])
                               ->setSite_web($_POST["site_web"])
                               ->setQuartier_membre($_POST["quartier_membre"])
                               ->setVille_membre($_POST["ville_membre"])
                               ->setCategorie_membre($_POST["categorie_membre"])
                               ->setBp_membre($_POST["bp_membre"])
                               ->setTel_membre($_POST["tel_membre"])
                               ->setEmail_membre($_POST["email_membre"])
                               ->setPortable_membre($_POST["portable_membre"])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($_POST["code_rep"])
                ->setCode_membre_morale(NULL)
                ->setNumero_contrat($_POST["numero_contrat"])
                ->setNumero_agrement_filiere($_POST["numero_agrement_filiere"])
                ->setNumero_agrement_acnev($_POST["numero_agrement_acnev"])
                ->setNumero_agrement_technopole($_POST["numero_agrement_technopole"])
                 ->setCode_fs($_POST["code_fs"])
                 ->setCode_fl($_POST["code_fl"])
                ->setCode_fkps($_POST["code_fkps"])
                ;
                        $mapper->save($preinscriptionmorale);/**/

          for($i = 0; $i < count($_POST['code_banque']); $i++){
                    $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                    $cb = new Application_Model_EuCompteBancaire();
          
$cb_compteur = $cb_mapper->findConuter() + 1;         
          
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                   ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i])
                               ->setId_preinscription(NULL)
                   ->setId_preinscription_morale($compteur)
                 ;
                            $cb_mapper->save($cb);
                    }

/**/                    
                    
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $_POST["portable_membre"], "Vous venez de faire une preinscription PM. Vous allez recevoir une confirmation dans quelques minutes.");

$mobilekacm = Util_Utils::getParametre('mobile', 'kacm');
$compteur = Util_Utils::findConuter() + 1;
//Util_Utils::addSms($compteur, $mobilekacm, "Une preinscription PM est faite. Membre Moral: ".$_POST['raison_sociale'].", Domaine:".$_POST['domaine_activite'].", Portable: ".$_POST['portable_membre']);
                      
      $this->view->error = "Pré-inscription bien effectuée ...";
    //$this->_redirect('/');
    } else {  $this->view->error = "Vérifier bien les codes SMS et les numéros ...";  } 
    } else {  $this->view->error = "Champs * obligatoire ...";  } 
    }
    

    }



    public function enrolementmaisonsmsAction()
    {
        /* page index/enrolementmaisonsms - Mise sur chaine maison avec Code SMS */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');

    
        $code_agence = '001001001001';
        $code = '';
$code_membre_acnev = "0010010010010000001M";//$user->code_membre
    
    $parametreM = new Application_Model_EuParametresMapper();
    $parametre = new Application_Model_EuParametres();
    $parametreM->find('FS', 'valeur', $parametre);

        $val_fs = $parametre->montant;
        $this->view->fs = $parametre->montant;

    if(isset($_POST['ok']) && $_POST['ok']=="ok"){
      
            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;
            $code_sms = $_POST["code_sms"];
                $frais_identification = trim($_POST["frais_identification"]);
            $mode_reg = $_POST["reglement_membre"];
            $membre_reg = $_POST["membre_reg"];
            $code_caps = $_POST["code_caps"];
      
    
      
    $parametre2M = new Application_Model_EuParametresMapper();
    $parametre2 = new Application_Model_EuParametres();
    $parametre2M->find('FL', 'valeur', $parametre2);
    $prix = $parametre2->montant;
    
    $table = new Application_Model_DbTable_EuPrixCarte();
        $select = $table->select()->where('id_prix_carte = ?', 5);
        $prixcarte = $table->fetchRow($select);
        $carte = $prixcarte->prix_carte;
      
    $parametreM = new Application_Model_EuParametresMapper();
    $parametre = new Application_Model_EuParametres();
    $parametreM->find('FS', 'valeur', $parametre);

         $fs = $parametre->montant;

            if ($mode_reg == 'N') {
                $code_sms = $_POST["creditcode"];
            } else {
                $code_sms = '';
            }
      //$code_sms = $_POST["creditcode"];
          $sms_mapper = new Application_Model_EuSmsmoneyMapper();
                    $sms = $sms_mapper->findByCreditCode($code_sms);
          
if ($sms->getCreditAmount() == ($fs + $prix + $carte)){
          
        $cm_map = new Application_Model_EuCompteMapper();
                $_compte = new Application_Model_EuCompte();

                        //insertion dans la table membremorale des information du nouveau membre
                        $membre = new Application_Model_EuMembreMorale();
                        $mapper = new Application_Model_EuMembreMoraleMapper();
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }
                        $membre->setCode_membre_morale($code)
                               ->setCode_type_acteur($_POST["type_acteur"])
                               ->setCode_statut($_POST["statut_juridique"])
                               ->setRaison_sociale(htmlentities (addslashes (trim ($_POST["design"]))))
                 ->setId_pays($_POST["id_pays"])
                               ->setNum_registre_membre($_POST["numero"])
                               ->setDomaine_activite(htmlentities (addslashes (trim ("Immobilière"))))
                               ->setSite_web(htmlentities (addslashes (trim ($_POST["site_web"]))))
                               ->setQuartier_membre(htmlentities (addslashes (trim ($_POST["quartier_membre"]))))
                               ->setVille_membre(htmlentities (addslashes (trim ($_POST["ville_membre"]))))
                               ->setBp_membre($_POST["bp_membre"])
                               ->setTel_membre($_POST["tel_membre"])
                               ->setEmail_membre($_POST["email_membre"])
                               ->setPortable_membre($_POST["portable_membre"])
                               ->setId_utilisateur(NULL)//$user->id_utilisateur
                               ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                               ->setDate_identification($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_agence($code_agence)
                               ->setCodesecret($_POST["codesecret"])
                 ->setAuto_enroler('O')
                 ->setEtat_membre('N');
                        $mapper->save($membre);



                      // Enrégistrement du proprietaire dans la table  eu_proprietaire
               $proprio_mapper = new Application_Model_EuProprietaireMapper();
                           $proprio = new Application_Model_EuProprietaire();
               $proprio = $proprio_mapper->findProprio($_POST['proprio']);
                          if(!$proprio){
              $compteur_proprietaire = $proprio_mapper->findConuter() + 1;
               $proprio->setId_proprietaire($compteur_proprietaire)
                  ->setCode_membre_pro($_POST['proprio'])
                                ->setCode_membre_ag($code_membre_acnev)
                  ->setDate_declaration($date_idd->toString('yyyy-MM-dd'))
                                ->setId_utilisateur(NULL)
                                ->setNbre_maison(1);
                           $proprio_mapper->save($proprio);
               }else{
              $proprio->setNbre_maison($proprio->getNbre_maison() + 1);
                           $proprio_mapper->update($proprio);
                  }


                      // Enrégistrement du representant dans la table  eu_representation
               $rep_mapper = new Application_Model_EuRepresentationMapper();
                           $rep = new Application_Model_EuRepresentation();
               $rep->setCode_membre_morale($code)
                               ->setCode_membre($_POST['proprio'])
                               ->setTitre("Représentant");
                           $rep_mapper->save($rep);
               



                        $maison = new Application_Model_EuMaison();
            $mapper_m = new Application_Model_EuMaisonMapper();
                        $compteur_maison = $mapper_m->findConuter() + 1;
                        
                        $maison->setId_maison($compteur_maison);
                        $maison->setDesignation($_POST["design"]);
                        $maison->setId_proprietaire($proprio->getId_proprietaire());
                        $maison->setCode_membre($code);
                        $maison->setType_maison($_POST["type_maison"]);
                        if(isset($_POST['eau'])) {
                          $maison->setEau($_POST["eau"]);
              $maison->setFrais_eau($_POST["frais_eau"]);
                        }
                        else {
                            $maison->setEau(0);
                            $maison->setFrais_eau(0);             
                        }
                        $maison->setDate_enregistrement($date_idd->toString('yyyy-MM-dd'));
                            if(isset($_POST['elect'])) {
                            $maison->setElectrifier($_POST['elect']);
              $maison->setFrais_electricite($_POST["frais_elect"]);
                        }
                        else {
                        $maison->setElectrifier(0);
                         $maison->setFrais_electricite(0);            
                        }
                        if(isset($_POST['wd'])) {
                          $maison->setWc_douche($_POST['wd']);
              $maison->setFrais_vidange($_POST["frais_vidange"]);
                        }
                        else {
                            $maison->setWc_douche(0);
                            $maison->setFrais_vidange(0);             
                        }
            if(isset($_POST['tel'])) {
              $maison->setFrais_tel($_POST["frais_tel"]);
                        }
                        else {
                            $maison->setFrais_tel(0);             
                        }
            if($_POST['taxe'] != '') {
              $maison->setTaxe($_POST["taxe"]);
                        }
                        else {
                            $maison->setTaxe(0);              
                        }
                        if($_POST['numero'] != '') {
                             $maison->setNum_maison($_POST["numero"]);              
                        }
            else {
                 $maison->setNum_maison(NULL);
            }
                        $maison->setStatut(0);
                        $maison->setDesc_maison($_POST["desc"]);
                        $maison->setRue($_POST["rue"]);
                        $maison->setNum_police_electricite($_POST["num_police"]);
                        $maison->setNum_compteur_eau($_POST["num_compteur"]);
                        $maison->setNum_ligne_tel($_POST["num_ligne"]);
                        $maison->setId_utilisateur(NULL);//$user->id_utilisateur
                        $maison->setId_quartier($_POST["quartier_membre"]);
                            
                        $mapper_m->save($maison);
                            



                        //insertion des frais d'identification dans la table placement
                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;
                        
        $place_op = new Application_Model_EuOperation();
                $place_op->setId_operation($compteur)
                        ->setDate_op($date_idd->toString('yyyy-MM-dd'))
                        ->setMontant_op($frais_identification)
                        ->setCode_membre(NULL)
                        ->setCode_membre_morale($code)
                        ->setHeure_op($date_idd->toString('HH:mm:ss'))
                        ->setCode_produit('FS')
                        ->setId_utilisateur(NULL)
                        ->setLib_op('Auto-enrôlement')
                        ->setCode_cat('TFS')
                        ->setType_op('AERL');
                $mapper_op->save($place_op);

                        //Util_Utils::createCompte('NB-TPAGCI-' . $code, 'TPAGCI', 'TPAGCI', 0, $code, 'NB', $date_id, 0);
    
                      

        
                //Creation du FS
                $tab_fs = new Application_Model_DbTable_EuFs();
                $fs_model = new Application_Model_EuFs();
                $fs_model->setCode_membre_morale($code)
                 ->setCode_membre(NULL)
                         ->setCode_fs('FS-' . $code)
                         ->setCreditcode($sms->getCreditCode())//
                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                         ->setId_utilisateur(NULL)//$user->id_utilisateur
                         ->setMont_fs($frais_identification);
                $tab_fs->insert($fs_model->toArray());

        
        
        $compteur=Util_Utils::findConuter() + 1;
                Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le réseau MCNP! Votre numéro de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);
                     //return $this->_helper->redirector('morale', 'eu-membre', NULL, array('controller' => 'eu-membre', 'action' => 'morale'));


/////////////////////////////////licence////////////////////////////////////////////////          
          
            $code_membre = $code;
            $code_dev = 'XOF';
      $code_sms = '';
      
    $parametre2M = new Application_Model_EuParametresMapper();
    $parametre2 = new Application_Model_EuParametres();
    $parametre2M->find('FL', 'valeur', $parametre2);

            $prix = $parametre2->montant;

          $tfl = new Application_Model_DbTable_EuFl();
                $fl = new Application_Model_EuFl();
                $code_fl = 'FL-' . $code_membre;
                /*$result = $tfl->find($code_fl);
                if (count($result) > 0) {
                    $this->view->message = "Vous avez déja souscrit au frais de licence!!! ";
                    return;
                }*/
                $cm_map = new Application_Model_EuCompteMapper();
                   
                 $mapper_op = new Application_Model_EuOperationMapper();
                                $compteur = $mapper_op->findConuter() + 1;
                                $date_deb = new Zend_Date(Zend_Date::ISO_8601);
        
        $place_op = new Application_Model_EuOperation();
                $place_op->setId_operation($compteur)
                        ->setDate_op($date_deb->toString('yyyy-MM-dd'))
                        ->setMontant_op($prix)
                        ->setCode_membre(NULL)
                        ->setCode_membre_morale($code_membre)
                        ->setHeure_op($date_deb->toString('HH:mm:ss'))
                        ->setCode_produit(NULL)
                        ->setId_utilisateur(NULL)
                        ->setLib_op('Frais de licences')
                        ->setCode_cat(NULL)
                        ->setType_op('FL');
                $mapper_op->save($place_op);


          $tfl = new Application_Model_DbTable_EuFl();
                $fl = new Application_Model_EuFl();
                                $fl->setCode_fl($code_fl)
                                        ->setCode_membre_morale($code_membre)
                                        ->setMont_fl($prix)
                                        ->setDate_fl($date_deb->toString('yyyy-MM-dd'))
                                        ->setHeure_fl($date_deb->toString('HH:mm:ss'))
                                        ->setId_utilisateur(NULL)//$user->id_utilisateur
                                        ->setCreditcode($sms->getCreditCode());//
                                $tfl->insert($fl->toArray());

                                //Mise à jour du compte général FGFL
                                $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                                $cg_fgfn = new Application_Model_EuCompteGeneral();
                                $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                                if ($result3) {
                                    $cg_fgfn->setSolde($cg_fgfn->getSolde() + $prix);
                                    $cg_mapper->update($cg_fgfn);
                                } else {
                                    $cg_fgfn->setCode_compte('FL')
                                            ->setIntitule('Frais de licence')
                                            ->setService('E')
                                            ->setCode_type_compte('NN')
                                            ->setSolde($prix);
                                    $cg_mapper->save($cg_fgfn);
                                }
                

/////////////////////////////////carte///////////////////////////////////////////         
          
           $date = Zend_Date::now();
               $carte = new Application_Model_EuCartes();
               $t_carte = new Application_Model_DbTable_EuCartes();
               $compte = new Application_Model_EuCompte();
               $map_compte = new Application_Model_EuCompteMapper();
               $map_membre = new Application_Model_EuMembreMapper();
         $map_membreM = new Application_Model_EuMembreMoraleMapper();

              $membre = $code_membre;
      
               $table = new Application_Model_DbTable_EuPrixCarte();
        $select = $table->select()->where('id_prix_carte = ?', 5);
        $prixcarte = $table->fetchRow($select);
         $montant = $prixcarte->prix_carte;
                
          // vérification de la licence
                    $tfl = new Application_Model_DbTable_EuFl();
                    $code_fl = 'FL-' . $membre;
                    $result = $tfl->find($code_fl);
                             $somme = $somme + $montant;
            
            $cm_map = new Application_Model_EuCompteMapper();
                        $code_sms = '';

                                    $code_cat = "TPAGCI";
                  $code_cat_ts = "TSI";
                                    $type_carte = "NB";
                                    $type_membre = "M";
                                    $code_compte = $type_carte . '-' . $code_cat . '-' . $membre;
                  $code_compte_ts = $type_carte . '-' . $code_cat_ts . '-' . $membre;
                  
                                    $c_select = $t_carte->select();
                                    $c_select->where('code_membre like ?', $membre)
                                            ->where('code_cat like ?', $code_cat);
                                    $results = $t_carte->fetchAll($c_select);
                  
                                    $res = $map_compte->find($code_compte, $compte);
                                    if (!$res) {
                                        $compte->setCode_cat($code_cat)
                                                ->setCode_compte($code_compte)
                                                ->setCode_membre_morale($membre)
                                                ->setCode_type_compte($type_carte)
                                                ->setDate_alloc($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                ->setDesactiver(0)
                                                ->setLib_compte($code_cat)
                                                ->setSolde(0)
                                                ->setSource(NULL);
                                        $map_compte->save($compte);
                    
                    $compte->setCode_cat($code_cat)
                                                ->setCode_compte($code_compte_ts)
                                                ->setCode_membre_morale($membre)
                                                ->setCode_type_compte($type_carte)
                                                ->setDate_alloc($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                ->setDesactiver(0)
                                                ->setLib_compte($code_cat)
                                                ->setSolde(0)
                                                ->setSource(NULL);
                                        $map_compte->save($compte);
                    
                                        $prix = $montant;
                                        $carte->setCode_cat($code_cat)
                                                ->setCode_membre($membre)
                                                ->setMont_carte($montant)
                                                ->setDate_demande($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                ->setLivrer(0)
                                                ->setCode_Compte($code_compte)
                                                ->setImprimer(0)
                                                ->setCardPrintedDate(NULL)
                                                ->setCardPrintedIDDate(0)
                                                ->setId_utilisateur(NULL);//$user->id_utilisateur
                                        $t_carte->insert($carte->toArray());
                                    } else {
                                        if ($compte->getCardPrintedDate() == '' || $compte->getCardPrintedIDDate() == 0) {
                                            $prix = $montant;
                                            $carte->setCode_cat($code_cat)
                                                    ->setCode_membre($membre)
                                                    ->setMont_carte($montant)
                                                    ->setDate_demande($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                    ->setLivrer(0)
                                                    ->setImprimer(0)
                                                    ->setCardPrintedDate(NULL)
                                                    ->setCardPrintedIDDate(0)
                                                    ->setCode_Compte($code_compte)
                                                    ->setId_utilisateur(NULL);//$user->id_utilisateur
                                            $t_carte->insert($carte->toArray());
                                        }
                                    }
                
                                $mapper_op = new Application_Model_EuOperationMapper();
                                $compteur = $mapper_op->findConuter() + 1;
                
                $place_op = new Application_Model_EuOperation();
                $place_op->setId_operation($compteur)
                        ->setDate_op($date->toString('yyyy-MM-dd'))
                        ->setMontant_op($montant)
                        ->setCode_membre(NULL)
                        ->setCode_membre_morale($membre)
                        ->setHeure_op($date->toString('HH:mm:ss'))
                        ->setCode_produit(NULL)
                        ->setId_utilisateur(NULL)
                        ->setLib_op('Frais de CPS')
                        ->setCode_cat(NULL)
                        ->setType_op('CPS');
                $mapper_op->save($place_op);

                    
/////////////////////////////////////////////////////////// 
            $compte_transfert = $sms->getFromAccount();
                        $transfert = explode('-', $compte_transfert);
                        $membre_transfert = $transfert[2];
            $sms->setDestAccount_Consumed('NB-TFS-' . $membre)
                            ->setDateTimeconsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('yyyy-MM-dd')));
            $sms_mapper->update($sms);

$this->view->message = 'Enrôlement Maison bien effectué';

} else {
$this->view->message = 'Le code SMS [' . $code_sms . ']  est  invalide !!!';
}
                      
//$this->_redirect('/index');


        }



    }


    public function pagemenuesmcAction()
    {
        /* page index/pagemenuesmc - Page ESMC */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    

        $id = (int) $this->_request->getParam('id');
    if($id > 0){
        $menu = new Application_Model_EuMenu();
        $menuM = new Application_Model_EuMenuMapper();
        $menuM->find($id, $menu);
    $this->view->menu = $menu;
    } else {  $this->_redirect('/');  } 
    }





    public function pageesmcAction()
    {
        /* page index/pageesmc - Page ESMC */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    

        $id = (int) $this->_request->getParam('id');
    if($id > 0){
        $page = new Application_Model_EuPage();
        $pageM = new Application_Model_EuPageMapper();
        $pageM->find2($id, $page);
    $this->view->page = $page;
    } else {  $this->_redirect('/');  } 
    }


    public function pageceuAction()
    {
        /* page index/pageceu - Page CEU/ReDeMaRe */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicceu');
    

        $id = (int) $this->_request->getParam('id');
    if($id > 0){
        $page = new Application_Model_EuPage();
        $pageM = new Application_Model_EuPageMapper();
        $pageM->find2($id, $page);
    $this->view->page = $page;
    } else {  $this->_redirect('/');  } 
    }

    public function pagemcnpAction()
    {
        /* page index/pagemcn - Page MCNP */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

        $id = (int) $this->_request->getParam('id');
    if($id > 0){
        $page = new Application_Model_EuPage();
        $pageM = new Application_Model_EuPageMapper();
        $pageM->find2($id, $page);
    $this->view->page = $page;
    } else {  $this->_redirect('/');  } 
    }





    public function addcontactesmcAction()
    {
         /* page index/addcontact - Page Contact ESMC */

   //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    
           $date = Zend_Date::now();
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['contact_nom']) && $_POST['contact_nom']!="" && isset($_POST['contact_email']) && $_POST['contact_email']!="" && isset($_POST['contact_sujet']) && $_POST['contact_sujet']!="" && isset($_POST['contact_message']) && $_POST['contact_message']!="" && isset($_POST['calcul']) && $_POST['calcul']=="2") {
          
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuContact();
        $ma = new Application_Model_EuContactMapper();
      
            $compteur = $ma->findConuter() + 1;
            $a->setContact_id($compteur);
            $a->setContact_nom($_POST['contact_nom']);
            $a->setContact_email($_POST['contact_email']);
            $a->setContact_sujet($_POST['contact_sujet']);
            $a->setContact_message($_POST['contact_message']);
            $a->setContact_type("ESMC");
            $a->setContact_date($date->toString('yyyy-MM-dd'));
            $a->setTraiter(0);
            $ma->save($a);


                    
$mobilecontactesmc = Util_Utils::getParametre('mobile', 'contactesmc');
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $mobilecontactesmc, "Un message vient d'être laissé dans la rubrique Contacts ESMC. Interface: ESMC. Nom: ".$_POST['contact_nom'].". Sujet: ".$_POST['contact_sujet']);
                      

      $this->view->error = "Message bien envoyé ...";
    //$this->_redirect('/');
    } else {  $this->view->error = "Champs * obligatoire ...";  } 
    }
    

    }

    public function addcontactceuAction()
    {
         /* page index/addcontactceu - Page Contact CEU/ReDeMaRe */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicceu');
    
           $date = Zend_Date::now();

  
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['contact_nom']) && $_POST['contact_nom']!="" && isset($_POST['contact_email']) && $_POST['contact_email']!="" && isset($_POST['contact_sujet']) && $_POST['contact_sujet']!="" && isset($_POST['contact_message']) && $_POST['contact_message']!="" && isset($_POST['calcul']) && $_POST['calcul']=="2") {
          
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuContact();
        $ma = new Application_Model_EuContactMapper();
      
            $compteur = $ma->findConuter() + 1;
            $a->setContact_id($compteur);
            $a->setContact_nom($_POST['contact_nom']);
            $a->setContact_email($_POST['contact_email']);
            $a->setContact_sujet($_POST['contact_sujet']);
            $a->setContact_message($_POST['contact_message']);
            $a->setContact_type("CEU/ReDeMaRe");
            $a->setContact_date($date->toString('yyyy-MM-dd'));
            $a->setTraiter(0);
            $ma->save($a);


                    
$mobilecontactceu = Util_Utils::getParametre('mobile', 'contactceu');
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $mobilecontactceu, "Un message vient d'être laissé dans la rubrique Contacts CEU/ReDeMaRe. Interface: CEU/ReDeMaRe. Nom: ".$_POST['contact_nom'].". Sujet: ".$_POST['contact_sujet']);
                      

      $this->view->error = "Message bien envoyé ...";
    //$this->_redirect('/');
    } else {  $this->view->error = "Champs * obligatoire ...";  } 
    }
    

    }

    public function addcontactmcnpAction()
    {
         /* page index/addcontactmcnp - Page Contact MCNP */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
           $date = Zend_Date::now();

  
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['contact_nom']) && $_POST['contact_nom']!="" && isset($_POST['contact_email']) && $_POST['contact_email']!="" && isset($_POST['contact_sujet']) && $_POST['contact_sujet']!="" && isset($_POST['contact_message']) && $_POST['contact_message']!="" && isset($_POST['calcul']) && $_POST['calcul']=="2") {
          
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuContact();
        $ma = new Application_Model_EuContactMapper();
      
            $compteur = $ma->findConuter() + 1;
            $a->setContact_id($compteur);
            $a->setContact_nom($_POST['contact_nom']);
            $a->setContact_email($_POST['contact_email']);
            $a->setContact_sujet($_POST['contact_sujet']);
            $a->setContact_message($_POST['contact_message']);
            $a->setContact_type("MCNP");
            $a->setContact_date($date->toString('yyyy-MM-dd'));
            $a->setTraiter(0);
            $ma->save($a);


                    
$mobilecontactmcnp = Util_Utils::getParametre('mobile', 'contactmcnp');
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $mobilecontactmcnp, "Un message vient d'être laissé dans la rubrique Contacts MCNP. Interface: MCNP. Nom: ".$_POST['contact_nom'].". Sujet: ".$_POST['contact_sujet']);
                      

      $this->view->error = "Message bien envoyé ...";
    //$this->_redirect('/');
    } else {  $this->view->error = "Champs * obligatoire ...";  } 
    }
    

    }
  


    public function videoesmcAction()
    {
         /* page index/videoesmc - Page Video ESMC */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    

        $id = (string) $this->_request->getParam('id');
    if($id > 0){
        $video = new Application_Model_EuVideo();
        $videoM = new Application_Model_EuVideoMapper();
        $videoM->find($id, $video);
    $this->view->video = $video;
    } else {  $this->_redirect('/');  } 
    }

    public function videoceuAction()
    {
        /* page index/videoceu - Page Video CEU/ReDeMaRe */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicceu');
    

        $id = (string) $this->_request->getParam('id');
    if($id > 0){
        $video = new Application_Model_EuVideo();
        $videoM = new Application_Model_EuVideoMapper();
        $videoM->find($id, $video);
    $this->view->video = $video;
    } else {  $this->_redirect('/');  } 
    }

    public function videomcnpAction()
    {
        /* page index/videomcnp - Page Video MCNP */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

        $id = (string) $this->_request->getParam('id');
    if($id > 0){
        $video = new Application_Model_EuVideo();
        $videoM = new Application_Model_EuVideoMapper();
        $videoM->find($id, $video);
    $this->view->video = $video;
    } else {  $this->_redirect('/');  } 
    }

    public function videolisteesmcAction()
    {
        /* page index/videolisteesmc - Page Liste Video ESMC */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    
        $video = new Application_Model_EuVideoMapper();
        $this->view->entries = $video->fetchAll3("ESMC");

    }

    public function videolisteceuAction()
    {
        /* page index/videolisteceu - Page Liste Video CEU/ReDeMaRe */

     //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicceu');
    
        $video = new Application_Model_EuVideoMapper();
        $this->view->entries = $video->fetchAll3("CEU/ReDeMaRe");

    }

    public function videolistemcnpAction()
    {
        /* page index/videolistemcnp - Page Liste Video MCNP */

     //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
        $video = new Application_Model_EuVideoMapper();
        $this->view->entries = $video->fetchAll3("MCNP");

    }


    public function addcandidatcmfhAction()
    {
        /* page index/addcandidatcmfh - Ajout de la candidature CMFH */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['id_type_candidat']) && $_POST['id_type_candidat']!="" && isset($_POST['candidat_nom_entrepot']) && $_POST['candidat_nom_entrepot']!="" && isset($_POST['candidat_nom']) && $_POST['candidat_nom']!="" && isset($_POST['candidat_operationnel']) && $_POST['candidat_operationnel']!="" && isset($_POST['candidat_datenaiss']) && $_POST['candidat_datenaiss']!="" && isset($_POST['candidat_nationalite']) && $_POST['candidat_nationalite']!="" && isset($_POST['candidat_capacite_production']) && $_POST['candidat_capacite_production']!="" && isset($_POST['candidat_pays']) && $_POST['candidat_pays']!="" && isset($_POST['candidat_qte_moyen']) && $_POST['candidat_qte_moyen']!="" && isset($_POST['candidat_description_projet']) && $_POST['candidat_description_projet']!="" && isset($_POST['candidat_date']) && $_POST['candidat_date']!="") {
    
      
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $candidat = new Application_Model_EuCandidat();
        $candidat_mapper = new Application_Model_EuCandidatMapper();
      
            $compteur_candidat = $candidat_mapper->findConuter() + 1;
            $candidat->setCandidat_id($compteur_candidat);
            $candidat->setId_type_candidat($_POST['id_type_candidat']);
            $candidat->setCandidat_nom_entrepot($_POST['candidat_nom_entrepot']);
            $candidat->setCandidat_nom($_POST['candidat_nom']);
            $candidat->setCandidat_operationnel($_POST['candidat_operationnel']);
            $candidat->setCandidat_datenaiss($_POST['candidat_datenaiss']);
            $candidat->setCandidat_nationalite($_POST['candidat_nationalite']);
            $candidat->setCandidat_capacite_production($_POST['candidat_capacite_production']);
            $candidat->setCandidat_stock_disponible($_POST['candidat_stock_disponible']);
            $candidat->setCandidat_qte_max($_POST['candidat_qte_max']);
            $candidat->setCandidat_pays($_POST['candidat_pays']);
            $candidat->setCandidat_qte_moyen($_POST['candidat_qte_moyen']);
            $candidat->setCandidat_qte_min($_POST['candidat_qte_min']);
            $candidat->setCandidat_tache($_POST['candidat_tache']);
            $candidat->setCandidat_competence($_POST['candidat_competence']);
            $candidat->setCandidat_description_projet($_POST['candidat_description_projet']);
            $candidat->setCandidat_date($_POST['candidat_date']);
            $candidat->setPublier(0);
            $candidat_mapper->save($candidat);
      
	  if($_POST['id_type_candidat'] == 7){$cmfh = "FC";}else{$cmfh = "CMFH";}
	  
	  
$mobilecandidatcmfh = Util_Utils::getParametre('mobile', 'candidatcmfh');
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $mobilecandidatcmfh, "Une candidature de ".$cmfh." vient d\'être faite. Nom du candidat: ".$_POST['candidat_nom'].". Date: ".$_POST['candidat_date']);
                      
$this->view->error = "Opération bien effectuée...";

/*if($_POST['id_type_candidat'] != 7){
    $this->_redirect('/index/addquittancecmfh/id/'.$compteur_candidat);
}*/
    } else {  $this->view->error = "Champs * obligatoire ..."; 
     
            $type = (int)$this->_request->getParam('type');
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $document = new Application_Model_EuDocument();
        $document_mapper = new Application_Model_EuDocumentMapper();
    $document_mapper->find($id, $document);
    $this->view->document = $document;
    $this->view->type = $type;
            }
  }
       
  } else {

            $type = (int)$this->_request->getParam('type');
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $document = new Application_Model_EuDocument();
        $document_mapper = new Application_Model_EuDocumentMapper();
    $document_mapper->find($id, $document);
    $this->view->document = $document;
    $this->view->type = $type;
            }
  }
  

  }


    public function addquittancecmfhAction()
    {
        /* page index/addquittancecmfh - Ajout de la quittance CMFH/CAPS */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

  
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['quittance_nom']) && $_POST['quittance_nom']!="" && isset($_POST['quittance_code']) && $_POST['quittance_code']!="" && isset($_POST['quittance_numero']) && $_POST['quittance_numero']!="" && isset($_POST['quittance_type']) && $_POST['quittance_type']!="" && isset($_POST['quittance_cel']) && $_POST['quittance_cel']!="" && isset($_POST['quittance_banque']) && $_POST['quittance_banque']!="" && isset($_POST['quittance_code_membre']) && $_POST['quittance_code_membre']!="") {
    

      
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
      
        $quittance = new Application_Model_EuQuittance();
        $quittance_mapper = new Application_Model_EuQuittanceMapper();
      
            $compteur_quittance = $quittance_mapper->findConuter() + 1;
            $quittance->setQuittance_id($compteur_quittance);
            $quittance->setQuittance_code($_POST['quittance_code']);
            $quittance->setQuittance_nom($_POST['quittance_nom']);
            $quittance->setQuittance_numero($_POST['quittance_numero']);
            $quittance->setQuittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $quittance->setQuittance_type($_POST['quittance_type']);
            $quittance->setQuittance_banque($_POST['quittance_banque']);
            $quittance->setQuittance_cel($_POST['quittance_cel']);
            $quittance->setQuittance_candidat($_POST['quittance_candidat']);
            $quittance->setQuittance_code_membre($_POST['quittance_code_membre']);
            $quittance->setPublier(0);
            $quittance_mapper->save($quittance);



$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $_POST["quittance_cel"], "Vous venez de vous inscrire pour le programme de CMFH/CAPS/GAC. Vous allez recevoir une confirmation et vos accès dans quelques minutes");

$mobilequittance = Util_Utils::getParametre('mobile', 'quittance');
$compteur = Util_Utils::findConuter() + 1;
Util_Utils::addSms($compteur, $mobilequittance, "Un CMFH/CAPS/GAC vient de s\'inscrire sur la plateforme. Quittance: ".$_POST['quittance_code'].", Acheteur: ".$_POST['quittance_nom'].", Reçu de banque: ".$_POST['quittance_numero'].", Banque: ".$_POST['quittance_banque'].", Nbre de code achetés: ".$_POST['quittance_type']);

$this->view->error = "Opération bien réussie. Vous serez contacté dans quelques instants.";

    //$this->_redirect('/index');
    } else {  $this->view->error = "Champs * obligatoire ..."; 
     
            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $candidat = new Application_Model_EuCandidat();
        $candidat_mapper = new Application_Model_EuCandidatMapper();
    $candidat_mapper->find($id, $candidat);
    $this->view->candidat = $candidat;
            }
  }
       
  } else {

            $id = (int)$this->_request->getParam('id');
            if ($id != 0) {
        $candidat = new Application_Model_EuCandidat();
        $candidat_mapper = new Application_Model_EuCandidatMapper();
    $candidat_mapper->find($id, $candidat);
    $this->view->candidat = $candidat;
            }
  }

  }

  






    public function fichierlisteesmcAction()
    {
        /* page index/fichierlisteesmc - Liste des fichiers */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    
        $fichier = new Application_Model_EuFichierMapper();
        $this->view->entries = $fichier->fetchAll2();

    }


    public function actualitelisteesmcAction()
    {
        /* page index/actualitelisteesmc - Liste des actualités */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    
        $actualite = new Application_Model_EuActualiteMapper();
        $this->view->entries = $actualite->fetchAll2();

    }




    public function actualiteesmcAction()
    {
        /* page index/actualiteesmc - Détail actualité */

    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');
    

        $id = (string) $this->_request->getParam('id');
    if($id > 0){
        $actualite = new Application_Model_EuActualite();
        $actualiteM = new Application_Model_EuActualiteMapper();
        $actualiteM->find($id, $actualite);
    $this->view->actualite = $actualite;
    } else {  $this->_redirect('/');  } 
    }



    public function centreenrolementAction() {
       /* page index/centreenrolement - Liste des centres d'enrolements */
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublic');
    
       $centre = new Application_Model_EuCentreMapper();
       $this->view->entries = $centre->fetchAll2();
    }


	public function logoutAction() {
		Zend_Session::destroy(true);
		$this->_redirect('/index/securelogin');
    }
    
	public function secureloginAction()  {
	   $this->_helper->layout->disableLayout();
	   $sessionmembre = new Zend_Session_Namespace('membre');
	   
	   /*
	    $domaine  = "";
	    $domaine2 = "";
	    $domaine3 = "";
	   
	    if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = "prod.gacsource.net";
          $domaine2 = "https://esmc.gacsource.net";
          $domaine3 = "https://prod.gacsource.net";

        } else {
          $domaine = "prod.esmcgacsource.com";
          $domaine2 = "http://www.esmc.tg";
          $domaine3 = "http://prod.esmcgacsource.com";
        }
	    */

	    if(isset($_POST['ok']) && $_POST['ok'] == "ok") {
		   //if(isset($_POST['code_membre']) && $_POST['code_membre'] != "" && isset($_POST['codesecret']) && $_POST['codesecret'] != "") {
		   if(isset($_POST['code_membre']) && $_POST['code_membre'] != "") {
		       if(substr($_POST['code_membre'], -1) == "P") {
				   /*
				    if($_POST['codesecret'] != Util_Utils::getParamEsmc(11)) {
					     $eumembre = new Application_Model_DbTable_EuMembre();
					     $select = $eumembre->select()->where('code_membre = ?', $_POST['code_membre'])
							                          ->where('codesecret = ?', md5($_POST['codesecret']))
							                          ->where('desactiver = ?', 0);
				
			        } else {
					    $eumembre = new Application_Model_DbTable_EuMembre();
					    $select = $eumembre->select()->where('code_membre = ?', $_POST['code_membre'])
							               ->where('desactiver = ?', 0);
			        }
					*/
					
					$eumembre = new Application_Model_DbTable_EuMembre();
					$select = $eumembre->select()->where('code_membre = ?', $_POST['code_membre'])
							                     ->where('desactiver = ?', 0);
                      
					if($rowseumembre = $eumembre->fetchRow($select))  {
					     $sessionmembre->membre = $rowseumembre->code_membre;
					     $sessionmembre->nom_membre = $rowseumembre->nom_membre;
					     $sessionmembre->prenom_membre = $rowseumembre->prenom_membre;
					     $sessionmembre->sexe_membre = $rowseumembre->sexe_membre;
					     $sessionmembre->date_nais_membre = $rowseumembre->date_nais_membre;
					     $sessionmembre->lieu_nais_membre = $rowseumembre->lieu_nais_membre;
					     $sessionmembre->pays = $rowseumembre->id_pays;
					     $sessionmembre->profession_membre = $rowseumembre->profession_membre;
					     $sessionmembre->formation = $rowseumembre->formation;
					     $sessionmembre->pere_membre = $rowseumembre->pere_membre;
					     $sessionmembre->mere_membre = $rowseumembre->mere_membre;
					     $sessionmembre->sitfam_membre = $rowseumembre->sitfam_membre;
					     $sessionmembre->nbr_enf_membre = $rowseumembre->nbr_enf_membre;
					     $sessionmembre->quartier_membre = $rowseumembre->quartier_membre;
					     $sessionmembre->ville_membre = $rowseumembre->ville_membre;
					     $sessionmembre->bp_membre = $rowseumembre->bp_membre;
					     $sessionmembre->tel_membre = $rowseumembre->tel_membre;
					     $sessionmembre->email_membre = $rowseumembre->email_membre;
					     $sessionmembre->date_identification = $rowseumembre->date_identification;
					     $sessionmembre->portable_membre = $rowseumembre->portable_membre;
					     $sessionmembre->code_agence = $rowseumembre->code_agence;
					     $sessionmembre->heure_identification = $rowseumembre->heure_identification;
					     //$sessionmembre->id_utilisateur = $rowseumembre->id_utilisateur;
					     $sessionmembre->auto_enroler = $rowseumembre->auto_enroler;

                         if(substr($sessionmembre->membre, -1) == "P") {
						     $sessionmembre->type = 'RPG';
						     $sessionmembre->desctype = 'Revenu Périodique Garanti';
						     $sessionmembre->typepernonne = 'P';
					     } else if (substr($sessionmembre->membre, -1) == "M") {
						     $sessionmembre->type = 'I';
						     $sessionmembre->desctype = 'Investissement';
						     $sessionmembre->typepernonne = 'M';
					     }

					     $sessionmembre->auto_enroler = $rowseumembre->auto_enroler;

					     $sessionmembre->code_secret = $rowseumembre->codesecret;

					     $code_groupe = array('personne_physique');
                         $utilisateur_m = new Application_Model_EuUtilisateurMapper();
                         $utilisateur_rows = $utilisateur_m->findByMembre($sessionmembre->membre, $code_groupe);
/*
					     $sessionmembre->code_groupe = $utilisateur_rows->code_groupe;
					     $sessionmembre->id_utilisateur = $utilisateur_rows->id_utilisateur;*/
						 
						 $os = Util_Utils::getOS();
                         $infos =  Util_Utils::detecterSysteme();
                         $texte_confirmation = "Confirmez vous la Tentative de connection à votre compte Personnel ESMC depuis un navigateur ".$infos['browser']." sous ".$os." ?";

                         $table = new Application_Model_DbTable_EuConfirmation();
                         $entryObject = new Application_Model_EuConfirmation();
                        $mapper = new Application_Model_EuConfirmationMapper();

                        $db = Zend_Db_Table::getDefaultAdapter();
						$entryObject->setType_confirmation("2")
                                     ->setCode_operateur($rowseumembre->code_membre)
                                     ->setNom_operateur("")
                                     ->setData_text($texte_confirmation)
                                     ->setData_json("")
                                     ->setActivite("https://esmcgie.com/index/securelogin")
                                     ->setStatus("1")
                                     ->setDate_creation(time())
                                     ->setDate_confirmation("")
                                     ->setTexte_confirmation($texte_confirmation)
                                     ->setPage("index/securelogin")
                                     ->setCode_sms($sessionmembre->confirmation)
                                     ->setNom_appareil("")
                                     ->setImei_appareil("")
                                     ->setNumero_appareil("")
                                     ->setMac_appareil("")
                                     ->setIp_appareil("")
                                     ->setCode_membre($rowseumembre->code_membre);
                        $mapper->save($entryObject);

						//echo "nouvelle insertion".$db->lastInsertId();
                        $numero_insertion = $db->lastInsertId();
                        
                        $sessionmembre->numero_confirmation = $numero_insertion;
                        $sessionmembre->confirmation_envoi= $numero_insertion;
                           
                        Util_Utils::envoiNotificationAdministrationBiometrique($numero_insertion,$rowseumembre->code_membre,"Espace Personnel ESMC",$texte_confirmation ,"");
         
                        $sessionmembre->errorlogin = "";
                        //$this->_redirect('/index/securelogin');
						   
					}  else {
					   $sessionmembre->errorlogin = "Compte non actif";
					   $this->_redirect('/index/securelogin');
					   //$sessionmembre->errorlogin = "Code Membre ou Code Secret Erroné";
					   //$this->_redirect($domaine2.'/index/indexandroid');
					   
					   
					}
               }
                else if(substr($_POST['code_membre'], -1) == "M")  {
				   /*
				   if($_POST['codesecret'] != Util_Utils::getParamEsmc(11)) {
					     $eumembre = new Application_Model_DbTable_EuMembreMorale();
					     $select = $eumembre->select()->where('code_membre_morale = ?', $_POST['code_membre'])
							                          ->where('codesecret = ?', md5($_POST['codesecret']))
							                          ->where('desactiver = ?', 0);
				   } else {
					     $eumembre = new Application_Model_DbTable_EuMembreMorale();
					     $select = $eumembre->select()->where('code_membre_morale = ?', $_POST['code_membre'])
							                ->where('desactiver = ?', 0);
				   }
				   */
				   
				   $eumembre = new Application_Model_DbTable_EuMembreMorale();
				   $select = $eumembre->select()->where('code_membre_morale = ?', $_POST['code_membre'])
							                ->where('desactiver = ?', 0);

                   if($rowseumembre = $eumembre->fetchRow($select)) {
					    $sessionmembre->membre = $rowseumembre->code_membre_morale;
						$sessionmembre->code_type_acteur = $rowseumembre->code_type_acteur;
						$sessionmembre->code_statut = $rowseumembre->code_statut;
						$sessionmembre->raison_sociale = $rowseumembre->raison_sociale;
						$sessionmembre->pays = $rowseumembre->id_pays;
						$sessionmembre->quartier_membre = $rowseumembre->quartier_membre;
						$sessionmembre->ville_membre = $rowseumembre->ville_membre;
						$sessionmembre->tel_membre = $rowseumembre->tel_membre;
						$sessionmembre->portable_membre = $rowseumembre->portable_membre;
						$sessionmembre->email_membre = $rowseumembre->email_membre;
						$sessionmembre->bp_membre = $rowseumembre->bp_membre;
						$sessionmembre->site_web = $rowseumembre->site_web;
						$sessionmembre->domaine_activite = $rowseumembre->domaine_activite;
						$sessionmembre->num_registre_membre = $rowseumembre->num_registre_membre;
						$sessionmembre->date_identification = $rowseumembre->date_identification;
						$sessionmembre->heure_identification = $rowseumembre->heure_identification;
						$sessionmembre->code_agence = $rowseumembre->code_agence;
						$sessionmembre->id_utilisateur = $rowseumembre->id_utilisateur;
						$sessionmembre->auto_enroler = $rowseumembre->auto_enroler;
						$sessionmembre->etat_membre = $rowseumembre->etat_membre;
						$sessionmembre->id_filiere = $rowseumembre->id_filiere;
						
						if(substr($sessionmembre->membre, -1) == "P") {
							$sessionmembre->type = 'RPG';
							$sessionmembre->desctype = 'Revenu Périodique Garanti';
							$sessionmembre->typepernonne = 'P';
						} else if (substr($sessionmembre->membre, -1) == "M") {
							$sessionmembre->type = 'I';
							$sessionmembre->desctype = 'Investissement';
							$sessionmembre->typepernonne = 'M';
						}

						$sessionmembre->code_secret = $rowseumembre->codesecret;
						$code_groupe = array('personne_morale','pbf_grossiste', 'oe_grossiste', 'ose_grossiste', 'detentrice', 'detentrice_filiere', 'agrement_filiere', 'detentrice_pays', 'detentrice_region', 'detentrice_secteur', 'detentrice_agence', 'surveillance', 'surveillance_technopole', 'agrement_technopole', 'surveillance_pays', 'surveillance_region', 'surveillance_secteur', 'surveillance_agence', 'executante', 'executante_acnev', 'agrement_acnev', 'executante_pays', 'executante_region', 'executante_secteur', 'executante_agence');
                        $utilisateur_m = new Application_Model_EuUtilisateurMapper();
					   
					    $utilisateur_rows = $utilisateur_m->findByMembre2($rowseumembre->code_membre_morale);

						$sessionmembre->code_groupe = $utilisateur_rows->code_groupe;
						
						
						$acteur3 = new Application_Model_EuActeur();
                        $acteur3Row = $acteur3->findByCodeActeur3($rowseumembre->code_membre_morale);

				        $sessionmembre->code_acteur = $acteur3Row->code_acteur;

                        $acteur = new Application_Model_EuActeur();
                        $acteurRow = $acteur->findByCodeActeur2($sessionmembre->code_acteur);
				        $sessionmembre->code_source_create = $acteurRow->code_source_create;
				        $sessionmembre->code_monde_create = $acteurRow->code_monde_create;
				        $sessionmembre->code_zone_create = $acteurRow->code_zone_create;
				        $sessionmembre->id_pays = $acteurRow->id_pays;
				        $sessionmembre->id_region = $acteurRow->id_region;
				        $sessionmembre->code_secteur_create = $acteurRow->code_secteur_create;
				        $sessionmembre->code_agence_create = $acteurRow->code_agence_create;
						
						$os = Util_Utils::getOS();
                        $infos =  Util_Utils::detecterSysteme();
                        $texte_confirmation = "Confirmez vous la Tentative de connection à votre compte Professionnel ESMC depuis un navigateur ".$infos['browser']." sous ".$os." ?";

                        $table = new Application_Model_DbTable_EuConfirmation();
                        $entryObject = new Application_Model_EuConfirmation();
                        $mapper = new Application_Model_EuConfirmationMapper();

                        $db = Zend_Db_Table::getDefaultAdapter();
						$entryObject->setType_confirmation("2")
                                    ->setCode_operateur($rowseumembre->code_membre_morale)
                                    ->setNom_operateur("")
                                    ->setData_text($texte_confirmation)
                                    ->setData_json("")
                                    ->setActivite("https://esmcgie.com/index/securelogin")
                                    ->setStatus("1")
                                    ->setDate_creation(time())
                                    ->setDate_confirmation("")
                                    ->setTexte_confirmation($texte_confirmation)
                                    ->setPage("index/securelogin")
                                    ->setCode_sms($sessionutilisateur->confirmation)
                                    ->setNom_appareil("")
                                    ->setImei_appareil("")
                                    ->setNumero_appareil("")
                                    ->setMac_appareil("")
                                    ->setIp_appareil("")
                                    ->setCode_membre($rowseumembre->code_membre_morale);
                          $mapper->save($entryObject);
							
						  //echo "nouvelle insertion".$db->lastInsertId();
                          $numero_insertion = $db->lastInsertId();
                          $sessionmembre->confirmation_envoi= $numero_insertion;
                          $sessionmembre->numero_confirmation = $numero_insertion;

						  $eurepresentation = new Application_Model_DbTable_EuRepresentation();
						  $select = $eurepresentation->select();
						  $select->where('code_membre_morale = ?',$rowseumembre->code_membre_morale);
						  $select->where('etat like ?',"inside");
						  $representants = $eurepresentation->fetchAll($select);
						  
                            
                            foreach ($representants as $row) {
                                Util_Utils::envoiNotificationAdministrationBiometrique(""+$numero_insertion,$row->code_membre,"Espace Professionnel ESMC",$texte_confirmation,"");
                            }
							

						  $sessionmembre->errorlogin = "";
                          //$this->_redirect('/index/securelogin');
						  //$this->_redirect($domaine2'/index/securelogin');
						  

				   } else {
						$sessionmembre->errorlogin = "Compte non actif";
						$this->_redirect('/index/securelogin');
				   }

			   }
		   }
	   }
		
	}
	
	


    public function loginAction()
    {
        /* page index/login - Authentification ZPPE */

   $sessionzppe = new Zend_Session_Namespace('zppe');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['login']) && $_POST['login']!="" && isset($_POST['pwd']) && $_POST['pwd']!=""){

  $euzppe = new Application_Model_DbTable_EuZppe();
  $select = $euzppe->select()->where('zppe_login = ?', $_POST['login'])
                  ->where('zppe_password = ?', md5($_POST['pwd']))
                ->where('publier = ?', 1);
  $rowseuzppe = $euzppe->fetchRow($select);
if (count($rowseuzppe)>0){
         $sessionzppe->zppe_id = $rowseuzppe->zppe_id;
         $sessionzppe->zppe_login = $rowseuzppe->zppe_login;
         $sessionzppe->zppe_password = $rowseuzppe->zppe_password;
         $sessionzppe->zppe_libelle = $rowseuzppe->zppe_libelle;
         $sessionzppe->zppe_resume = $rowseuzppe->zppe_resume;
         $sessionzppe->zppe_description = $rowseuzppe->zppe_description;
         $sessionzppe->zppe_portable = $rowseuzppe->zppe_portable;
         $sessionzppe->zppe_email = $rowseuzppe->zppe_email;
         $sessionzppe->zppe_vignette = $rowseuzppe->zppe_vignette;
         $sessionzppe->publier = $rowseuzppe->publier;
         

         $sessionzppe->errorlogin = "";
    $this->_redirect('/index/zppe');
  } else { $sessionzppe->errorlogin = "Login ou Mot de Passe Erroné"; }
    $this->_redirect('/index/login');
  } else { $sessionzppe->errorlogin = "Saisir Login et Mot de Passe"; } 
    $this->_redirect('/index/login');
  }

        $zppe = new Application_Model_EuZppeMapper();
        $this->view->entries = $zppe->fetchAll2();

    }
  
    function nocompteAction()
    {
  Zend_Session::destroy(true);
    $this->_redirect('/index/login');
    }


    public function zppeAction()
    {
        /* page index/zppe - Liste des ZPPEs */

     $sessionzppe = new Zend_Session_Namespace('zppe');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
  if (!isset($sessionzppe->zppe_login)) {$this->_redirect('/index/login');}

        $bon = new Application_Model_EuBonMapper();
        $this->view->entries = $bon->fetchAllByZppe($sessionzppe->zppe_id);

        $this->view->tabletri = 1;

    }




    public function listrecuAction()
    {
        /* page index/listrecu - Liste des reçus */

    $sessionzppe = new Zend_Session_Namespace('zppe');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
  if (!isset($sessionzppe->zppe_login)) {$this->_redirect('/index/login');}

        $recu = new Application_Model_EuRecuMapper();
        $this->view->entries = $recu->fetchAllByZppe($sessionzppe->zppe_id);

        $this->view->tabletri = 1;

    }




    public function addquestionreponseAction()
    {
        /* page index/addquestionreponse - Ajout de question reponse */

   $sessionzppe = new Zend_Session_Namespace('zppe');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');

        $question_reponse = new Application_Model_EuQuestionReponseMapper();
        $this->view->entries = $question_reponse->fetchAll2();

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['question_reponse_nom']) && $_POST['question_reponse_nom']!="" && isset($_POST['question_reponse_categorie']) && $_POST['question_reponse_categorie']!="" && isset($_POST['question_reponse_question']) && $_POST['question_reponse_question']!="") {
    
      
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $a = new Application_Model_EuQuestionReponse();
        $ma = new Application_Model_EuQuestionReponseMapper();
      
            $compteur = $ma->findConuter() + 1;
            $a->setQuestion_reponse_id($compteur);
            $a->setQuestion_reponse_categorie($_POST['question_reponse_categorie']);
            $a->setQuestion_reponse_question($_POST['question_reponse_question']);
            $a->setQuestion_reponse_nom($_POST['question_reponse_nom']);
            $a->setQuestion_reponse_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $a->setPublier($_POST['publier']);
            $ma->save($a);
      
$sessionzppe->errorlogin = "Opération bien effectuée. Veuillez patienter un instant. ...";
$sessionzppe->id = $compteur;
    $this->_redirect('/index/addquestionreponse');
    } else {  $this->view->error = "Champs * obligatoire ...";  } 
    }
    
    }
	
	
	public function enrolementcapsAction()   {
	    //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		
		$mont_caps = Util_Utils::getParametre('CAPS','valeur');
		$fs = Util_Utils::getParametre('FS','valeur');
		$mont_fl = Util_Utils::getParametre('FL','valeur');
		$fkps = Util_Utils::getParametre('FKPS','valeur');
		
		
		$place    = new Application_Model_EuOperation();
		$mapper   = new Application_Model_EuOperationMapper();
	    $membre   = new Application_Model_EuMembre();
	    $m_map    = new Application_Model_EuMembreMapper();
		$m_caps   = new Application_Model_EuCapsMapper();
        $caps     = new Application_Model_EuCaps();
		//$dvente   = new Application_Model_EuDepotVente();
		//$m_dvente = new Application_Model_EuDepotVenteMapper();
	    $membretiers = new Application_Model_EuMembretierscode();
		$m_membretiers = new Application_Model_EuMembretierscodeMapper();
		
		$date = new Zend_Date(Zend_Date::ISO_8601);
		$db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
		try {
		
		
	
	
	    } catch (Exception $exc) {
            $db->rollback();
            $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
            $this->view->message = $message;
        }
	
	}
	
	

   public function enrolementsms2Action() {
	
	    //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
		$request = $this->getRequest ();
		if ($request->isPost ()) {
		   if (isset($_POST['code_fs']) && $_POST['code_fs']!="" 
		      && isset($_POST['code_fl']) && $_POST['code_fl']!="" 
		      && isset($_POST['nom_membre']) && $_POST['nom_membre']!="" 
		      && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="" 
		      && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!="" 
		      && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!="" 
		      && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!="" 
		      && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="" 
		      && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!="" 
		      && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!="" 
		      && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" 
		      && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" 
		      && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" 
		      && isset($_POST['profession_membre']) && $_POST['profession_membre']!="" 
		      && isset($_POST['religion_membre']) && $_POST['religion_membre']!="" 
		      && isset($_POST['id_pays']) && $_POST['id_pays']!="" 
		      && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
					
					

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

					
					
				    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
					$code_agence = $request->getParam("code_agence");
                    $code_zone = substr($_POST['code_agence'], 0, 3);
                    $id_pays = $_POST['id_pays'];
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;
					
					$date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();
					
					$souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();
					
					$code_activationM = new Application_Model_EuCodeActivationMapper();
					
                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
					$ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
				    try {
				        $code_fs = $request->getParam("code_fs");
                        $code_fl = $request->getParam("code_fl");
                        $code_fkps = $request->getParam("code_fkps");
						

						if($code_fs != "") {
						    $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            } 
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }
							
							//$code_activation_fs = $code_activationM->fetchAllByCodeFSFLFCPS($code_fs, "FS");
							/*if ($code_activation_fs == NULL) {
                                $db->rollback();
                                $this->view->message = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }*/
							
                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
							if ($sms_fs == NULL) {
                                $db->rollback();
                                $this->view->message = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
							
							if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $this->view->message = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;    
                            }
							
							
							
							
							$date_nais = new Zend_Date($_POST["date_nais_membre"]);
							
							$trouvemembre = $mapper->fetchByMembre($request->getParam("nom_membre"),$request->getParam("prenom_membre"),$date_nais->toString('yyyy-MM-dd'),$request->getParam("lieu_nais_membre"));
						    if($trouvemembre != false) {
						       $this->view->message = "Ouverture de compte marchand déjà effectué pour ce membre !!!";
                               $db->rollback();
                               $this->view->nom_membre = $request->getParam("nom_membre");
                               $this->view->prenom_membre = $request->getParam("prenom_membre");
                               $this->view->sexe = $request->getParam("sexe_membre");
                               $this->view->sitfam = $request->getParam("sitfam_membre");
                               $this->view->datnais = $request->getParam("date_nais_membre");
                               $this->view->nation = $request->getParam("nationalite_membre");
                               $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                               $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                               $this->view->formation = $request->getParam("formation");
                               $this->view->profession = $request->getParam("profession_membre");
                               $this->view->religion = $request->getParam("religion_membre");
                               $this->view->pere = $request->getParam("pere_membre");
                               $this->view->mere = $request->getParam("mere_membre");
                               $this->view->quartier_membre = $request->getParam("quartier_membre");
                               $this->view->ville_membre = $request->getParam("ville_membre");
                               $this->view->bp = $request->getParam("bp_membre");
                               $this->view->tel = $request->getParam("tel_membre");
                               $this->view->email = $request->getParam("email_membre");
                               $this->view->portable = $request->getParam("portable_membre");
                               return;
						    }
							
							
							
                            if ($date_nais >= $date_idd) {
                                $this->view->message = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
							
							
///////////////////////////////preinscription						

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;         
          
            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();
            
            $preinscription->setId_preinscription($compteur_preinscription)
                           ->setNom_membre($request->getParam("nom_membre"))
                           ->setPrenom_membre($request->getParam("prenom_membre"))
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre($request->getParam("tel_membre"))
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre($request->getParam("portable_membre"))
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
						   ->setCode_agence($code_agence)
                           ->setCode_fs($request->getParam("code_fs"))
                           ->setCode_fl($request->getParam("code_fl"))
                		   ->setCode_fkps($request->getParam("code_fkps"));
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);


///////////////////////////validation acnev
								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
												$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);

          
//////validation filere
								$preinscription = new Application_Model_EuPreinscription();
								$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
								$preinscriptionM->find($compteur_preinscription, $preinscription);
								
								$preinscription->setPublier(2);
								$preinscriptionM->update($preinscription);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
								$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
								$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
								$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
							    $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
								$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
								$validation_quittance->setPublier(1);
								$validation_quittance_mapper->save($validation_quittance);
							
                                //////validation technopole
								$preinscription = new Application_Model_EuPreinscription();
								$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
								$preinscriptionM->find($compteur_preinscription, $preinscription);
								
								$preinscription->setPublier(3);
								$preinscriptionM->update($preinscription);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
												$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);
							
							
////////////////////////////////////////////							
														
							
							$membre->setCode_membre($code)
                                   ->setNom_membre($request->getParam("nom_membre"))
                                   ->setPrenom_membre($request->getParam("prenom_membre"))
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre($request->getParam("tel_membre"))
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre($request->getParam("portable_membre"))
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($_POST["codesecret"]))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null);
                                $mapper->save($membre);
								
								
								/////////////
								$preinscription = new Application_Model_EuPreinscription();
								$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
								$preinscriptionM->find($compteur_preinscription, $preinscription);
								
								$preinscription->setCode_membre($code);
								$preinscriptionM->update($preinscription);
								
								
								
						// insertion dans la table eu_code_activation
				        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				        $codeactivation = new Application_Model_EuCodeActivation();
						
						$m_dvente = new Application_Model_EuDepotVenteMapper();
				        $dvente = new Application_Model_EuDepotVente();
						
								   
						$findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
						if($findcode != NULL)  {
						    $findcode = $findcode[0];
							//$id_souscription = $findcode->souscription_id;
							//$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
							//if($findsouscrip != FALSE) {
							//}
							$souscription_mapper->find($findcode->souscription_id,$souscription);
							$ancien_code = $souscription->souscription_ancien_membre;
							//$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
							//$id_depot = $findsousdv->id_depot;
							//$trouvedepot = $m_dvente->find($id_depot,$dvente);
							$trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
							$codeactivation->setCode_membre($code);
							$m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);							
						} 
						else {
							$this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;	
					    }
								
							$mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
							$findmem = $mem_mapper->find($code,$mem);
							
							if(($ancien_code == '') || ($ancien_code == NULL)) {
							  $mem->setEtat_membre('N');
							} else {
							  if(substr($ancien_code,-1,1) == 'M') {
							     $this->view->message = "Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->nom_membre = $_POST["nom_membre"];
                                 $this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 $this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 $this->view->portable = $_POST["portable_membre"];
                                 return;
							  }
							
                              $mem->setEtat_membre('A');
							  //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {      
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);      
                              }
							  // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {      
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);      
                              }  
                            }							
							$mem_mapper->update($mem);							
								
							$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
						    for($i = 0; $i < count($_POST['code_banque']); $i++) {
                                    $cb_compteur = $cb_mapper->findConuter() + 1;         
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
                                }
								
								$mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrôlement';
                                $type_op = 'AERL';
                                Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);            
                                $tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
								if(($ancien_code =='') || ($ancien_code == NULL)) {		 
				                   $fs_model->setOrigine_fs('N');
								} else {
                                   $fs_model->setOrigine_fs('A');
                                }								
                                $tab_fs->insert($fs_model->toArray());
            
                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);
								
								$userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                $id_user = $mapper->findConuter() + 1;
                                $userin->setId_utilisateur($id_user)
                                       ->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                       ->setNom_utilisateur($request->getParam("nom_membre"))
                                       ->setLogin($code)
                                       ->setPwd(md5($_POST["codesecret"]))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)       
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code);    
                                $mapper->save($userin);
								
								// Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                $id_contrat = $mapper->findConuter() + 1;
                                $contrat->setId_contrat($id_contrat);
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
						} else {   
                            $this->view->message = "Le code FS est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;  
					    }
						
						if($code_fl != "") {
							//$code_activation_fl = $code_activationM->fetchAllByCodeFSFLFCPS($code_fl, "FL");
							/*if ($code_activation_fl == NULL) {
                                $db->rollback();
                                $this->view->message = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }*/
							
						    $sms_fl = $sms_mapper->findByCreditCode($code_fl);
							if ($sms_fl == NULL) {
                                $db->rollback();
                                $this->view->message = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
							if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $this->view->message = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;    
                            }
							
							$tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;
            
                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());
							   
							 if(($ancien_code =='') || ($ancien_code == NULL)) {		 
				                $fl->setOrigine_fl('N');
							 } else {
                                $fl->setOrigine_fl('A');
                             }  
                             $tfl->insert($fl->toArray());
							
							//Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);
							
							$tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";
               
                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";
							
							for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }
                    
                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
							
							for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }     
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);   
                                } 
                            }
				        }  else {   
                            $this->view->message = "Le code FL est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;  
					    }
						
						
						if($code_fkps != "") {
							//$code_activation_fkps = $code_activationM->fetchAllByCodeFSFLFCPS($code_fkps, "FCPS");
							/*if ($code_activation_fkps == NULL) {
                                $db->rollback();
                                $this->view->message = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }*/
							
						    $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
							if ($sms_fkps == NULL) {
                                $db->rollback();
                                $this->view->message = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
							if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $this->view->message = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;    
                            }
							
							$carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
							if(($ancien_code =='') || ($ancien_code == NULL)) {		 
				               $carte->setOrigine_fkps('N');
							} else {
                               $carte->setOrigine_fkps('A');
                            }	  
                            $t_carte->insert($carte->toArray()); 
                            $compteurcps = $mapper_op->findConuter() + 1; 
                            Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
						}  
						
						$compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$_POST["codesecret"]); 
                        $db->commit();
						$this->view->message = "Ouverture de compte marchand bien effectuée ...";
						
				    }  catch (Exception $exc) {
                        $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->nom_membre = $request->getParam("nom_membre");
                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
		    } else {  
			    $this->view->message = "Champs * obligatoire ..."; 
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");				
			}
		}	
	}
	


   public function adddemandeconfigAction() {
        /* page administration/adddemandeconfig - Ajout d'une demande */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $t_canton = new Application_Model_DbTable_EuCanton();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_region = new Application_Model_DbTable_EuRegion();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		$cantons  = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
		$this->view->cantons = $cantons;
		$this->view->prefectures = $prefectures;
		$this->view->regions = $regions;
		$this->view->pays = $pays;
        $this->view->zones = $zones;
	    $request = $this->getRequest();
		
		if ($request->isPost ())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction(); 
            try {
			    $offreur = new Application_Model_EuOffreurProjet();
                $m_offreur = new Application_Model_EuOffreurProjetMapper();
				
				$demande   = new Application_Model_EuDemandeConfigte();
                $m_demande = new Application_Model_EuDemandeConfigteMapper();
			   
			    $code_membre = $request->getParam("code_membre");
			    $nom_produit = $request->getParam("nom_produit");
			    $id_canton = $request->getParam("id_canton");
			   
			    $date_id = Zend_Date::now();
			   
			    $findoffreur = $m_offreur->fetchAllByMembre($code_membre);
			    if($findoffreur == false) {
			       $sessionmcnp->error = "Le membre moral saisi n'est pas un offreur de projet ou de Biens,Produits et Service ...";
				   return;
			    }
				
				$finddemande = $m_demande->findbymembre($code_membre);
			    if($finddemande != false) {
			       $sessionmcnp->error = "Ce membre moral a déjà fait la demande de configuration de son TE ...";
				   return;
			    }
				
				$compteur_demande = $m_demande->findConuter() + 1;
			    $demande->setId_demande($compteur_demande);
                $demande->setNom_produit($nom_produit);
                $demande->setCode_membre_morale($code_membre);
			    $demande->setValider(3);
			    $demande->setId_canton($id_canton);
			    $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			   
			    if(isset($_POST['categorie1'])  && ($_POST['categorie1'] == 1)) {
				   $demande->setProduit_special(1);
			    } else {
                   $demande->setProduit_special(0);
                }					  
					  
			    if(isset($_POST['categorie2']) && ($_POST['categorie2'] == 1)) {
				  $demande->setProduit_ordinaire(1);
			    } else {
                  $demande->setProduit_ordinaire(0);
                }
			   
			    $m_demande->save($demande);
			    $db->commit();
			    $sessionmcnp->error = "Opération bien effectuée ...";
            } catch (Exception $exc) {				   
			   $db->rollback();
               $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
               return;
		    }
        
        }
   
   }

	
	
	
	public function misechaineAction() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		
		if(isset($_POST['ok']) && $_POST['ok']=="ok")   {
		    $membre = new Application_Model_EuMembreMorale();
            $mapper = new Application_Model_EuMembreMoraleMapper();
			$code = $_POST["code_membre"];
			$agrement_filiere  =  $_POST["numero_agrement_filiere"];
            $agrement_acnev    =  $_POST["numero_agrement_acnev"];
            $agrement_technopole =  $_POST["numero_agrement_technopole"];
			$id_type_acteur = "";
			$id_type_creneau = "";
			$id_filiere = "";
			$date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;
			$agrement_mapper = new Application_Model_EuAgrementMapper();
            $agrement        = new Application_Model_EuAgrement();
			$compte = new Application_Model_EuCompte();
            $map_compte = new Application_Model_EuCompteMapper();
			
			$contrat = new Application_Model_EuContrat();
            $map_contrat = new Application_Model_EuContratMapper();
			
			$db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
			try {
			    $findmembre = $mapper->find($code,$membre);
				if($findmembre == false) {
				    $db->rollBack();
                    $this->view->message = " Ce membre est inexistant ..."; 
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;				   
				    return;
				}
				
				$trouveagrementfiliere = $agrement_mapper->findagrementfiliere($agrement_filiere);
                $trouveagrementacnev = $agrement_mapper->findagrementacnev($agrement_acnev);
                $trouveagrementtechno = $agrement_mapper->findagrementtechno($agrement_technopole);
				$code_agence = substr($code,0,12);
				$table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;
				
				if($trouveagrementfiliere != false) {
                    $result = $agrement_mapper->find($trouveagrementfiliere->getId_agrement(),$agrement);
				    $id_type_acteur = $agrement->getId_type_acteur();
					$id_type_creneau = $agrement->getId_type_creneau();
					$id_filiere = $agrement->getId_filiere();
                    $agrement->setCode_membre_morale($code);
                    $agrement_mapper->update($agrement);
                } else {
				    $db->rollBack();
                    $this->view->message = "Le numéro agrément filière  ".$agrement_filiere."  est invalide ...";
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;					
				    return;
				}
				
				
				if($trouveagrementacnev != false) {
                    $result = $agrement_mapper->find($trouveagrementacnev->getId_agrement(),$agrement);
                    $agrement->setCode_membre_morale($code);
                    $agrement_mapper->update($agrement);    
                } else {
				    $db->rollBack();
                    $this->view->message = "Le numéro agrément acnev  ".$agrement_acnev."  est invalide ...";
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;					
				    return;
				}
            
                if($trouveagrementtechno != false) {
                   $result = $agrement_mapper->find($trouveagrementtechno->getId_agrement(),$agrement);
                   $agrement->setCode_membre_morale($code);
                   $agrement_mapper->update($agrement); 
                } else {
				    $db->rollBack();
                    $this->view->message = "Le numéro agrément technopole  ".$agrement_technopole."  est invalide ...";
                    $this->view->code_membre = $code;
					$this->view->numero_agrement_filiere = $agrement_filiere;
					$this->view->numero_agrement_acnev = $agrement_acnev;
					$this->view->numero_agrement_technopole = $agrement_technopole;			   
				    return;
				}
				
                // Mise à jour des tables
				$filiere =  new Application_Model_EuFiliere();
                $map_filiere = new Application_Model_EuFiliereMapper();
                $find_filiere = $map_filiere->find($id_filiere,$filiere);

                // insertion dans la table eu_acteur_creneau
                $cm    = new Application_Model_EuActeurCreneauMapper();
                $acren = new Application_Model_EuActeurCreneau();
				$rep_mapper = new Application_Model_EuRepresentationMapper();
				$rep = $rep_mapper->findbyrep($code);
				
                $acren->setNom_acteur($membre->getRaison_sociale());
                $acren->setCode_membre($code);
                $acren->setId_type_acteur($id_type_acteur);
              
                $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                $acren->setId_utilisateur(null);
                $acren->setGroupe(null);
                $acren->setCode_creneau(NULL);
                $acren->setCode_gac_filiere(NULL);
                $acren->setCode_gac(NULL);
                
				$code_zone =  substr($membre->getCode_agence(),0,3);
                $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                if ($code_acteur == NULL) {
                    $code_acteur = 'A' . $code_zone . '0001';
                } else {
                    $num_ordre = substr($code_acteur, -4);
                    $num_ordre++;
                    $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                }
                $acren->setCode_acteur($code_acteur);
                $acren->setId_filiere($id_filiere);
                $cm->save($acren);
				
				// Insertion dans la table eu_acteur
				$t_acteur = new Application_Model_DbTable_EuActeur();
				$c_acteur = new Application_Model_EuActeur();
                $table = new Application_Model_DbTable_EuActeur();
                $select = $table->select();
                $select->where('code_acteur like ?',$acteur);
                $resultSet = $table->fetchAll($select);
                $ligneacteur = $resultSet->current();
                $count = $c_acteur->findConuter() + 1;
					
				$c_acteur->setId_acteur($count)
                         ->setCode_acteur(NULL)
                         ->setCode_division($filiere->getCode_division())
                         ->setCode_membre($code)
                         ->setId_utilisateur(NULL)
                         ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				if($id_type_acteur == 3) {
					$c_acteur->setCode_activite('detaillant');
			    } else if($id_type_acteur == 2) {
					$c_acteur->setCode_activite('semi-grossiste');
			    } else if($id_type_acteur == 1) {
					$c_acteur->setCode_activite('grossiste');
				}
			    $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                $c_acteur->setId_pays($ligneacteur->id_pays);
                $c_acteur->setId_region($ligneacteur->id_region);
                $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                $c_acteur->setType_acteur('DSMS');
                    
                $c_acteur->setCode_gac_chaine($acteur);
                $t_acteur->insert($c_acteur->toArray());
				
				
				
				// Mise à jour de la table eu_utilisateur
                $user_mapper = new Application_Model_EuUtilisateurMapper();
                $userin = new Application_Model_EuUtilisateur();
				$trouveuser = false;
				$code_type_acteur = $membre->getCode_type_acteur();
				
				$finduser = $user_mapper->findByMembre($code,"personne_morale");
				if($finduser != false) {
				  $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				}
				
				if($trouveuser) {
				    if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                        $userin->setCode_groupe('oe_detaillant');
                        $userin->setCode_gac_filiere('oe_detaillant');
                        $userin->setCode_groupe_create('oe_detaillant');
                    } 
                    elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                        $userin->setCode_groupe('ose_detaillant');
                        $userin->setCode_gac_filiere('ose_detaillant');
                        $userin->setCode_groupe_create('ose_detaillant');
                    }
                    elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                        $userin->setCode_groupe('oe_semi_grossiste');
                        $userin->setCode_gac_filiere(NULL);
                        $userin->setCode_groupe_create('oe_semi_grossiste');
                    } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                        $userin->setCode_groupe('ose_semi_grossiste');
                        $userin->setCode_gac_filiere(NULL);
                        $userin->setCode_groupe_create('ose_semi_grossiste');
                    } 
                    elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                        $userin->setCode_groupe('oe_grossiste');
                        $userin->setCode_gac_filiere(NULL);
                        $userin->setCode_groupe_create('oe_grossiste');
                    }
                    elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                        $userin->setCode_groupe('ose_grossiste');
                        $userin->setCode_gac_filiere(NULL);
                        $userin->setCode_groupe_create('ose_grossiste');
                    }
				    $userin->setId_filiere($id_filiere);
                    $user_mapper->update($userin);
				
				}
				
				// Mise à jour de la table eu_membre_morale
				$membre->setId_filiere($id_filiere);
				$mapper->update($membre);
				
				// Recuperation de la PRK nr
                $param = new Application_Model_EuParametresMapper();
                $par = new Application_Model_EuParametres();
                $prc = 0;
                $par_prc = $param->find('prc','nr',$par);
                if ($par_prc == true) {
                   $prc = $par->getMontant();
                } 
            
                $te_mapper = new Application_Model_EuTegcMapper();
                $te = new Application_Model_EuTegc();
                $code_te = 'TEGCP' .$id_filiere. $code;
                $find_te = $te_mapper->find($code_te,$te);
                if ($find_te == false) {
                    $te->setCode_tegc($code_te)
                       ->setId_filiere($id_filiere)
                       ->setMdv($prc)
                       ->setCode_membre($code)
                       ->setMontant(0)
                       ->setMontant_utilise(0)
                       ->setSolde_tegc(0);
                    $te_mapper->save($te);
                } else {
                    $te->setId_filiere($id_filiere);
                    $te->setMdv($prc);
                    $te_mapper->update($te);
                }
				
				$code_compte = 'NB-TPAGCP-'.$code;
				$res = $map_compte->find($code_compte,$compte);
				
				if(!$res) {
                    $compte->setCode_cat('TPAGCP')
                           ->setCode_compte($code_compte)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setCode_type_compte('NB')
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte('TPAGCP')
                           ->setSolde(0);
                    $map_compte->save($compte); 
                }
				
				$code_comptets = 'NB-TSGCP-'.$code;
				$rests = $map_compte->find($code_comptets,$compte);
				
				if(!$rests) {
                    $compte->setCode_cat('TSGCP')
                           ->setCode_compte($code_comptets)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setCode_type_compte('NB')
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte('TSGCP')
                           ->setSolde(0);
                    $map_compte->save($compte); 
                }
				
                // Mise à jour de la table eu_contrat
				$findcontrat = $map_contrat->findByMembre($code);
				$trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				$contrat->setId_type_creneau($id_type_creneau);
				$contrat->setId_type_acteur($id_type_acteur);
				$map_contrat->update($contrat);
					
		        $compteur = Util_Utils::findConuter() + 1;
                Util_Utils::addSms($compteur,$membre->getPortable_membre(),"Le membre " . $code ."  a ete mis sur chaine");
				$db->commit();
				$this->view->message = "Mise sur chaine bien effectuée ...";
			} catch (Exception $exc) {
		        $db->rollback();
		        $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                return;
	        }
	    }
	}
	
	
	public function enrolementpmsms2Action() {
	    //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
		$request = $this->getRequest ();
		if ($request->isPost ()) {
	        if (isset($_POST['code_fs']) && $_POST['code_fs']!="" 
			&& isset($_POST['code_fl']) && $_POST['code_fl']!="" 
			&& isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="" 
			&& isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="" 
			&& isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!="" 
			&& isset($_POST['code_statut']) && $_POST['code_statut']!="" 
			&& isset($_POST['code_rep']) && $_POST['code_rep']!="" 
			&& isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" 
			&& isset($_POST['ville_membre']) && $_POST['ville_membre']!="" 
			&& isset($_POST['portable_membre']) && $_POST['portable_membre']!="" 
			&& isset($_POST['id_pays']) && $_POST['id_pays']!="" 
			&& isset($_POST['code_agence']) && $_POST['code_agence']!="") {
						
                $id_utilisateur_acnev = 1;
                $id_utilisateur_filiere = 2;
                $id_utilisateur_technopole = 3;
	
			    $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;
           
                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');
           
                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
                $code_fs = $request->getParam("code_fs");
                $code_fl = $request->getParam("code_fl");
                $code_fkps = $request->getParam("code_fkps");
				$ancien_code = '';
         
                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();
		
                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();
				
				$souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();
				
                $tcartes = array();
                $tscartes = array();
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
				try {
				    if($code_fs !="") {
					    $sms_fs = $sms_mapper->findByCreditCode($code_fs);
						$code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }							
							
///////////////////////////////preinscription morale						
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;         
          
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();
            
                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($request->getParam("raison_sociale"))
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre($request->getParam("tel_membre"))
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre($request->getParam("portable_membre"))
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($request->getParam("code_fs"))
                               ->setCode_fl($request->getParam("code_fl"))
                               ->setCode_fkps($request->getParam("code_fkps"))
							   ->setCode_agence($code_agence)
				               ->setPublier(1)
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


//////validation acnev
								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);

          
//////validation filere
								$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
								$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
								$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);
								
								$preinscriptionmorale->setPublier(2);
								$preinscriptionmoraleM->update($preinscriptionmorale);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);
							
//////validation technopole
								$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
								$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
								$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);
								
								$preinscriptionmorale->setPublier(3);
								$preinscriptionmoraleM->update($preinscriptionmorale);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);
							
							
////////////////////////////////////////////							
														
							
						
                        $compteur = $mapper_op->findConuter() + 1;
						$membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($request->getParam("raison_sociale"));
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre($request->getParam("tel_membre"));
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre($request->getParam("portable_membre"));
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($_POST["codesecret"]));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $mapper->save($membre);
						
						
								
								
					    /////////////
						$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
						$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
						$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);
								
						$preinscriptionmorale->setCode_membre_morale($code);
						$preinscriptionmoraleM->update($preinscriptionmorale);
								
								
						
						// insertion dans la table eu_code_activation
				        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				        $codeactivation = new Application_Model_EuCodeActivation();
						
						$m_dvente = new Application_Model_EuDepotVenteMapper();
				        $dvente = new Application_Model_EuDepotVente();
								   
						$findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
						if($findcode != NULL)  {
                            $findcode = $findcode[0];
							$id_souscription = $findcode->souscription_id;
							$findsouscription = $souscription_mapper->find($id_souscription,$souscription);
							$ancien_code = $souscription->souscription_ancien_membre;
							//$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
							//$id_depot = $findsousdv->id_depot;
							//$trouvedepot = $m_dvente->find($id_depot,$dvente);
							$trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
							$codeactivation->setCode_membre($code);
							$m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
							
						} else {
							$this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->raison_sociale = $request->getParam("raison_sociale");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;	
					    }
						
						$mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
					    $findmem = $mem_mapper->find($code,$mem);
							
						if(($ancien_code =='') || ($ancien_code == NULL)) {
							  $mem->setEtat_membre('N');
						} else {
						      if(substr($ancien_code,-1,1) == 'P') {
							     $this->view->message = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 $this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
							  }
                              $mem->setEtat_membre('A');
							  //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {      
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);      
                              }
							  
							 // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {      
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);      
                             }  
                         }							
						 $mem_mapper->update($mem);
						
						
						
						
						// eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
             
				        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);
						
						$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
						for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;         
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
						
						
						//insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();         
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;
          
                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur); 
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($_POST["codesecret"]));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);        
                        $user_mapper->save($userin);
						
						// Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;
          
                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere(''); 
                        $mapper_contrat->save($contrat);
						
						$tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
						if(($ancien_code =='') || ($ancien_code == NULL)) {		 
						   $fs_model->setOrigine_fs('N');
						} else {
                           $fs_model->setOrigine_fs('A');
                        }						
                        $tab_fs->insert($fs_model->toArray());
            
          
                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);
						
			        } else {   
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;  
					}
					
					
					
					
					
					if($code_fl !="") {
					    
						$sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;
						
						$fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());
						   
						if(($ancien_code =='') || ($ancien_code == NULL)) {		 
						   $fl->setOrigine_fl('N');
						} else {
                           $fl->setOrigine_fl('A');
                        }   
				  
                        $tfl->insert($fl->toArray());
						
						//Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }
				
                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);
						
						//$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";
            
                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI"; 
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI"; 
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte); 
                            }
                  
                        }
						
						for($j = 1; $j < count($tscartes); $j++) {  
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                  
                        }
                    }  else {   
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;  
					}
					
					if($code_fkps !="") {
					    $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
						if(($ancien_code =='') || ($ancien_code == NULL)) {		 
						   $carte->setOrigine_fkps('N');
						} else {
                           $carte->setOrigine_fkps('A');
                        }	  
                        $t_carte->insert($carte->toArray());
                             
                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
			        }
					
					$compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP ! Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);
                    $db->commit();
			
			    } catch (Exception $exc) {
                    $db->rollback();
                    $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                    $this->view->code_statut = $request->getParam("code_statut");
                    $this->view->raison_sociale = $request->getParam("raison_sociale");
                    $this->view->domaine_activite = $request->getParam("domaine_activite");
                    $this->view->site_web = $request->getParam("site_web");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    $this->view->tel = $request->getParam("tel_membre");
                    $this->view->email = $request->getParam("email_membre");
                    $this->view->id_pays = $request->getParam("id_pays");
                    $this->view->portable = $request->getParam("portable_membre");
                    $this->view->registre = $request->getParam("num_registre_membre");
                    $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
                }
	
	        }  else {  
			    $this->view->message = "Champs * obligatoire ...";
                $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                $this->view->code_statut = $request->getParam("code_statut");
                $this->view->raison_sociale = $request->getParam("raison_sociale");
                $this->view->domaine_activite = $request->getParam("domaine_activite");
                $this->view->site_web = $request->getParam("site_web");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->id_pays = $request->getParam("id_pays");
                $this->view->portable = $request->getParam("portable_membre");
                $this->view->registre = $request->getParam("num_registre_membre");				
			}
	    }
	
	}
	
	
	
	
	
	
	
  
    public function enrolementpmoldsms2Action() {
	    //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		if(isset($_POST['ok']) && $_POST['ok']=="ok") {
	        if (isset($_POST['code_fs']) && $_POST['code_fs']!="" 
			&& isset($_POST['code_fl']) && $_POST['code_fl']!="" 
			&& isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="" 
			&& isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="" 
			&& isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!="" 
			&& isset($_POST['code_statut']) && $_POST['code_statut']!="" 
			&& isset($_POST['code_rep']) && $_POST['code_rep']!="" 
			&& isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" 
			&& isset($_POST['ville_membre']) && $_POST['ville_membre']!="" 
			&& isset($_POST['portable_membre']) && $_POST['portable_membre']!="" 
			&& isset($_POST['id_pays']) && $_POST['id_pays']!="" 
			&& isset($_POST['code_agence']) && $_POST['code_agence']!="") {
					
					

$id_utilisateur_acnev = 1;
$id_utilisateur_filiere = 2;
$id_utilisateur_technopole = 3;

					
					
			    $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $_POST['code_agence'];
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;
           
                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');
           
                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
                $code_fs = $_POST["code_fs"];
                $code_fl = $_POST["code_fl"];
                $code_fkps = $_POST["code_fkps"];
         
                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();
		
                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();
                $tcartes = array();
                $tscartes = array();
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
				try {
				    if($code_fs !="") {
					    $sms_fs = $sms_mapper->findByCreditCode($code_fs);
						$code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }
						
						
							
							
///////////////////////////////preinscription morale						


$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;         
          
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();
            
                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($_POST["code_type_acteur"])
                               ->setCode_statut($_POST["code_statut"])
                               ->setRaison_sociale($_POST["raison_sociale"])
                 ->setId_pays($_POST["id_pays"])
                               ->setNum_registre_membre($_POST["num_registre_membre"])
                               ->setDomaine_activite($_POST["domaine_activite"])
                               ->setSite_web($_POST["site_web"])
                               ->setQuartier_membre($_POST["quartier_membre"])
                               ->setVille_membre($_POST["ville_membre"])
                               ->setCategorie_membre($_POST["categorie_membre"])
                               ->setBp_membre($_POST["bp_membre"])
                               ->setTel_membre($_POST["tel_membre"])
                               ->setEmail_membre($_POST["email_membre"])
                               ->setPortable_membre($_POST["portable_membre"])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($_POST["code_rep"])
                ->setCode_membre_morale(NULL)
                ->setNumero_contrat($_POST["numero_contrat"])
                ->setNumero_agrement_filiere($_POST["numero_agrement_filiere"])
                ->setNumero_agrement_acnev($_POST["numero_agrement_acnev"])
                ->setNumero_agrement_technopole($_POST["numero_agrement_technopole"])
                 ->setCode_fs($_POST["code_fs"])
                 ->setCode_fl($_POST["code_fl"])
                ->setCode_fkps($_POST["code_fkps"])
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


//////validation acnev
								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);

          
//////validation filere
								$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
								$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
								$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);
								
								$preinscriptionmorale->setPublier(2);
								$preinscriptionmoraleM->update($preinscriptionmorale);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);
							
//////validation technopole
								$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
								$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
								$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);
								
								$preinscriptionmorale->setPublier(3);
								$preinscriptionmoraleM->update($preinscriptionmorale);


								$validation_quittance = new Application_Model_EuValidationQuittance();
								$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
												$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
												$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
												$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
												$validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
												$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
												$validation_quittance->setPublier(1);
												$validation_quittance_mapper->save($validation_quittance);
							
							
////////////////////////////////////////////							
														
							
						
                        $compteur = $mapper_op->findConuter() + 1;
						$membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($_POST["code_type_acteur"]);
                        $membre->setCode_statut($_POST["code_statut"]);
                        $membre->setRaison_sociale(addslashes (trim ($_POST["raison_sociale"])));
                        $membre->setId_pays($_POST["id_pays"]);
                        $membre->setNum_registre_membre($_POST["num_registre_membre"]);
                        $membre->setDomaine_activite(addslashes (trim ($_POST["domaine_activite"])));
                        $membre->setSite_web(addslashes (trim ($_POST["site_web"])));
                        $membre->setQuartier_membre(addslashes (trim ($_POST["quartier_membre"])));
                        $membre->setVille_membre(addslashes (trim ($_POST["ville_membre"])));
                        $membre->setBp_membre($_POST["bp_membre"]);
                        $membre->setTel_membre($_POST["tel_membre"]);
                        $membre->setEmail_membre($_POST["email_membre"]);
                        $membre->setPortable_membre($_POST["portable_membre"]);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($_POST["codesecret"]));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre('N');
                        $mapper->save($membre);
						
						
								
								
								/////////////
								$preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
								$preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
								$preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);
								
								$preinscriptionmorale->setCode_membre_morale($code);
								$preinscriptionmoraleM->update($preinscriptionmorale);
								
								
						
						// insertion dans la table eu_code_activation
				        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				        $codeactivation = new Application_Model_EuCodeActivation();
						
						$m_dvente = new Application_Model_EuDepotVenteMapper();
				        $dvente = new Application_Model_EuDepotVente();
								   
						$findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
						if($findcode != NULL)  {
                            $findcode = $findcode[0];
							$id_souscription = $findcode->souscription_id;
							$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
							$id_depot = $findsousdv->id_depot;
							$trouvedepot = $m_dvente->find($id_depot,$dvente);
							$trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
							$codeactivation->setCode_membre($code);
							$m_codeactivation->update($codeactivation);
                            $dvente->setCode_membre($code);
                            $m_dvente->update($dvente);							
						} else {
							$this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;	
					    }
						
						// eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
             
				        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);
						
						$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
						for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;         
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
						
						
						//insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();         
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;
          
                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur); 
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($_POST["codesecret"]));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);        
                        $user_mapper->save($userin);
						
						// Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;
          
                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat(NULL);
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere(''); 
                        $mapper_contrat->save($contrat);
						
						$tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs)
						         ->setOrigine_fs('N');
                        $tab_fs->insert($fs_model->toArray());
            
          
                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);
						
			        } else {   
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
						$this->view->code_type_acteur = $_POST["code_type_acteur"];
                        $this->view->code_statut = $_POST["code_statut"];
                        $this->view->raison_sociale = $_POST["raison_sociale"];
                        $this->view->domaine_activite = $_POST["domaine_activite"];
                        $this->view->site_web = $_POST["site_web"];
                        $this->view->quartier_membre = $_POST["quartier_membre"];
                        $this->view->ville_membre = $_POST["ville_membre"];
                        $this->view->bp = $_POST["bp_membre"];
                        $this->view->tel = $_POST["tel_membre"];
                        $this->view->email = $_POST["email_membre"];
                        $this->view->id_pays = $_POST["id_pays"];
                        $this->view->portable = $_POST["portable_membre"];
                        $this->view->registre = $_POST["num_registre_membre"];
                        return;  
					}
					
					
					
					
					
					if($code_fl !="") {
					    
						$sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;
						
						$fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode())
				           ->setOrigine_fl('N');
                        $tfl->insert($fl->toArray());
						
						//Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }
				
                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);
						
						//$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";
            
                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI"; 
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI"; 
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte); 
                            }
                  
                        }
						
						for($j = 1; $j < count($tscartes); $j++) {  
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                  
                        }
                    }  else {   
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
						$this->view->code_type_acteur = $_POST["code_type_acteur"];
                        $this->view->code_statut = $_POST["code_statut"];
                        $this->view->raison_sociale = $_POST["raison_sociale"];
                        $this->view->domaine_activite = $_POST["domaine_activite"];
                        $this->view->site_web = $_POST["site_web"];
                        $this->view->quartier_membre = $_POST["quartier_membre"];
                        $this->view->ville_membre = $_POST["ville_membre"];
                        $this->view->bp = $_POST["bp_membre"];
                        $this->view->tel = $_POST["tel_membre"];
                        $this->view->email = $_POST["email_membre"];
                        $this->view->id_pays = $_POST["id_pays"];
                        $this->view->portable = $_POST["portable_membre"];
                        $this->view->registre = $_POST["num_registre_membre"];
                        return;  
					}
					
					if($code_fkps !="") {
					    $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL)
					          ->setOrigine_fkps('N');
                        $t_carte->insert($carte->toArray());
                             
                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
			        }
					
					$compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP ! Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);
                    $db->commit();
			
			    } catch (Exception $exc) {
                    $db->rollback();
                    $this->view->code_type_acteur = $_POST["code_type_acteur"];
                    $this->view->code_statut = $_POST["code_statut"];
                    $this->view->raison_sociale = $_POST["raison_sociale"];
                    $this->view->domaine_activite = $_POST["domaine_activite"];
                    $this->view->site_web = $_POST["site_web"];
                    $this->view->quartier_membre = $_POST["quartier_membre"];
                    $this->view->ville_membre = $_POST["ville_membre"];
                    $this->view->bp = $_POST["bp_membre"];
                    $this->view->tel = $_POST["tel_membre"];
                    $this->view->email = $_POST["email_membre"];
                    $this->view->id_pays = $_POST["id_pays"];
                    $this->view->portable = $_POST["portable_membre"];
                    $this->view->registre = $_POST["num_registre_membre"];
                    $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
                }
	
	        }  else {  
			    $this->view->message = "Champs * obligatoire ...";
                $this->view->code_type_acteur = $_POST["code_type_acteur"];
                $this->view->code_statut = $_POST["code_statut"];
                $this->view->raison_sociale = $_POST["raison_sociale"];
                $this->view->domaine_activite = $_POST["domaine_activite"];
                $this->view->site_web = $_POST["site_web"];
                $this->view->quartier_membre = $_POST["quartier_membre"];
                $this->view->ville_membre = $_POST["ville_membre"];
                $this->view->bp = $_POST["bp_membre"];
                $this->view->tel = $_POST["tel_membre"];
                $this->view->email = $_POST["email_membre"];
                $this->view->id_pays = $_POST["id_pays"];
                $this->view->portable = $_POST["portable_membre"];
                $this->view->registre = $_POST["num_registre_membre"];				
			}
	    }
	
	}
	



	
	public function activationcapsAction()   {
	    //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
		$request = $this->getRequest ();
		if ($request->isPost ()) {
		
		    if (isset($_POST['nom_membre']) && $_POST['nom_membre']!="" 
		        && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="" 
		        && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!="" 
		        && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!="" 
		        && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!="" 
		        && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="" 
		        && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!="" 
		        && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!="" 
		        && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" 
		        && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" 
		        && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" 
		        && isset($_POST['profession_membre']) && $_POST['profession_membre']!="" 
		        && isset($_POST['religion_membre']) && $_POST['religion_membre']!="" 
		        && isset($_POST['id_pays']) && $_POST['id_pays']!="" 
		        && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
				
				    $mont_caps = Util_Utils::getParametre('CAPS','valeur');
		            $fs = Util_Utils::getParametre('FS','valeur');
		            $mont_fl = Util_Utils::getParametre('FL','valeur');
		            $fkps = Util_Utils::getParametre('FKPS','valeur');
					
					$place    = new Application_Model_EuOperation();
		            $mapper   = new Application_Model_EuOperationMapper();
	                $membre   = new Application_Model_EuMembre();
	                $m_map    = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
		            $m_caps   = new Application_Model_EuCapsMapper();
                    $caps     = new Application_Model_EuCaps();
		            $dvente   = new Application_Model_EuDepotVente();
		            $m_dvente = new Application_Model_EuDepotVenteMapper();
			
		            $activation   = new Application_Model_EuActivation();
		            $m_activation = new Application_Model_EuActivationMapper();
	                $membretiers = new Application_Model_EuMembretierscode();
		            $m_membretiers = new Application_Model_EuMembretierscodeMapper();
					$souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();
					
					$date = new Zend_Date(Zend_Date::ISO_8601);
		            $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
				        //$code_activation = null;
						$code_agence = $request->getParam("code_agence");
						//$categorie = $request->getParam("type_activation");
		                $type_bnp  = 'CAPS';
                        $type_caps = 'CAPSFLFCPS';
			            $id_membretiers  = '';
						$id_depot = '';
			            $souscription_id = '';
			            $apporteur = '';
			            $table = new Application_Model_DbTable_EuActeur();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur =  $code_acteur;
						
						
						//if($categorie == 'AvecListe') {
						    $code_activation = $request->getParam("code_activation");
						    $tmtc = new Application_Model_DbTable_EuMembretierscode();
		                    $select = $tmtc->select();
                            $select->where('membretierscode_code like ?',$code_activation)
			                       ->where('publier = ?',0);
		                    $result = $tmtc->fetchAll($select);
						
			                if (count($result) > 0) {
			                    $id_membretiers = $result->current()->membretierscode_id;
			                    $souscription_id = $result->current()->membretierscode_souscription;
								$trouvesou = $souscription_mapper->find($souscription_id,$souscription);
								//$souscription_id = $souscription->getSouscription_souscription();
			                } else {
			                    $db->rollback();
                                $this->view->message = "Votre code activation est mal renseigné ou est déjà utilisé";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
			                }
						
						    $lignedvente = $m_dvente->findbysouscriptionmembre($souscription_id);
						    $reste = $mont_caps;
						    if ($lignedvente != NULL) {
							    if($lignedvente->getSolde_depot() >= $reste) {
						            $id_depot = $lignedvente->getId_depot();
							        $apporteur = $lignedvente->getCode_membre();
				                    $finddvente = $m_dvente->find($id_depot,$dvente);
							
							        //Mise à jour de la table eu_depot_vente
                                    $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
						            $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                                    $m_dvente->update($lignedvente);
								
								} else {
								    $db->rollback();
                                    $this->view->message = "Le montant de la souscription est insuffisant ...";
			                        $this->view->nom_membre = $request->getParam("nom_membre");
                                    $this->view->prenom_membre = $request->getParam("prenom_membre");
                                    $this->view->sexe = $request->getParam("sexe_membre");
                                    $this->view->sitfam = $request->getParam("sitfam_membre");
                                    $this->view->datnais = $request->getParam("date_nais_membre");
                                    $this->view->nation = $request->getParam("nationalite_membre");
                                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                    $this->view->formation = $request->getParam("formation");
                                    $this->view->profession = $request->getParam("profession_membre");
                                    $this->view->religion = $request->getParam("religion_membre");
                                    $this->view->pere = $request->getParam("pere_membre");
                                    $this->view->mere = $request->getParam("mere_membre");
                                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                                    $this->view->ville_membre = $request->getParam("ville_membre");
                                    $this->view->bp = $request->getParam("bp_membre");
                                    $this->view->tel = $request->getParam("tel_membre");
                                    $this->view->email = $request->getParam("email_membre");
                                    $this->view->portable = $request->getParam("portable_membre");
                                    return;
								}
						
				            } else {
			                    $db->rollback();
                                $this->view->message = "Ce code d'activation n'est lié à aucune souscription";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
			                }
							
							if(($apporteur == '') || ($apporteur == NULL)) {
							    $db->rollback();
                                $this->view->message = "Le CMFH de la souscription doit activer son compte marchand";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
							}
							
							
						
						//}  
						
						/*else  {
						    $lignedventes = $m_dvente->findbycmfhsansliste();
				            $reste = $mont_caps;
							if ($lignedventes != null) {
				                $lignedvente = $lignedventes[0];
					            $id_depot = $lignedvente->getId_depot();
					            $finddvente = $m_dvente->find($id_depot,$dvente);
						        $apporteur = $lignedvente->getCode_membre();
						        $lignedvente->setSolde_depot($lignedvente->getSolde_depot() - $reste);
						        $lignedvente->setMont_vendu($lignedvente->getMont_vendu() + $reste);
                                $m_dvente->update($lignedvente);
				            } else {
			                    $db->rollback();
                                $this->view->message = "Aucun  CMFH ne dispose de code d'activation";
			                    $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
			                }
						
						}*/
						
						
						$count = $mapper->findConuter() + 1;
                        $date_fin = new Zend_Date(Zend_Date::ISO_8601);
                        $date_deb = clone $date_fin;
				
		                $place->setId_operation($count)
                              ->setDate_op($date->toString('yyyy-MM-dd'))
                              ->setHeure_op($date->toString('HH:mm:ss'))
                              ->setId_utilisateur(null)
                              ->setCode_membre($apporteur)
                              ->setCode_membre_morale(null)
                              ->setMontant_op($mont_caps)
                              ->setCode_produit('CAPS')
                              ->setLib_op('Enrolement')
                              ->setType_op($type_bnp)
                              ->setCode_cat('TCAPS');
			            $mapper->save($place);
				
			            $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
			            $code = $m_map->getLastCodeMembreByAgence($code_agence);
                        if ($code == null) {
                            $code = $code_agence . '0000001' . 'P';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'P';
                        }
			
			            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));	
                        $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
						
						$trouvemembre = $m_map->fetchByMembre($request->getParam("nom_membre"),$request->getParam("prenom_membre"),$date_nais->toString('yyyy-MM-dd'),$request->getParam("lieu_nais_membre"));
						if($trouvemembre != false) {
						    $this->view->message = "Ouverture de compte marchand déjà effectué pour ce membre !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
						}
						
						if ($date_nais >= $date_idd) {
                            $this->view->message = "La date de naissance doit etre antérieure à la date actuelle !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
						
						/////////////////////////////// preinscription ///////////////////////////////////////////////						

                        $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                        $compteur_preinscription = $preinsc_mapper->findConuter() + 1;         
          
                        $preinscription = new Application_Model_EuPreinscription();
                        $mapper = new Application_Model_EuPreinscriptionMapper();
            
                        $preinscription->setId_preinscription($compteur_preinscription)
                                       ->setNom_membre($request->getParam("nom_membre"))
						               ->setCode_agence($code_agence)
                                       ->setPrenom_membre($request->getParam("prenom_membre"))
                                       ->setSexe_membre($request->getParam("sexe_membre"))
                                       ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                       ->setId_pays($request->getParam("id_pays"))
                                       ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                       ->setPere_membre($request->getParam("pere_membre"))
                                       ->setMere_membre($request->getParam("mere_membre"))
                                       ->setSitfam_membre($request->getParam("sitfam_membre"))
                                       ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                       ->setProfession_membre($request->getParam("profession_membre"))
                                       ->setFormation($request->getParam("formation"))
                                       ->setId_religion_membre($request->getParam("religion_membre"))
                                       ->setQuartier_membre($request->getParam("quartier_membre"))
                                       ->setVille_membre($request->getParam("ville_membre"))
                                       ->setBp_membre($request->getParam("bp_membre"))
                                       ->setTel_membre($request->getParam("tel_membre"))
                                       ->setEmail_membre($request->getParam("email_membre"))
                                       ->setPortable_membre($request->getParam("portable_membre"))
                                       ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                       ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                       ->setCode_membre(null)
                                       ->setCode_fs(null)
                                       ->setCode_fl(null)
                			           ->setCode_fkps(null);
                        $preinscription->setPublier(1);

                        $mapper->save($preinscription);
						
						////// validation acnev ///////////////////////////////////////
					    $validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

          
                        ////// validation filere ///////////////////////////////////
						$preinscription = new Application_Model_EuPreinscription();
						$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
					    $preinscriptionM->find($compteur_preinscription, $preinscription);
								
						$preinscription->setPublier(2);
						$preinscriptionM->update($preinscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							
                        ////// validation technopole ///////////////////////////////////////////////////////////////
						$preinscription = new Application_Model_EuPreinscription();
					    $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
						$preinscriptionM->find($compteur_preinscription, $preinscription);
								
						$preinscription->setPublier(3);
						$preinscriptionM->update($preinscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							
							
                        ////////////////////////////////////////////
						// insertion dans la table eu_membre
                        $membre->setCode_membre($code)
                               ->setNom_membre($request->getParam("nom_membre"))
                               ->setPrenom_membre($request->getParam("prenom_membre"))
                               ->setSexe_membre($request->getParam("sexe_membre"))
                               ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                               ->setId_pays($request->getParam("nationalite_membre"))
                               ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                               ->setPere_membre($request->getParam("pere_membre"))
                               ->setMere_membre($request->getParam("mere_membre"))

                               ->setSitfam_membre($request->getParam("sitfam_membre"))
                               ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                               ->setProfession_membre($request->getParam("profession_membre"))
                               ->setFormation($request->getParam("formation"))
                               ->setId_religion_membre($request->getParam("religion_membre"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre($request->getParam("tel_membre"))
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre($request->getParam("portable_membre"))
                               ->setId_utilisateur(null)
                               ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                               ->setDate_identification($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_agence($code_agence)
                               ->setId_maison(null)
                               ->setCodesecret(md5($request->getParam("codesecret")))
				               ->setEtat_membre('N')
				               ->setCode_gac($acteur)
                               ->setAuto_enroler('N');
                            $m_map->save($membre);
							
						////////////////////////////////////////////////////////////////////////////////
						$preinscription = new Application_Model_EuPreinscription();
						$preinscriptionM = new Application_Model_EuPreinscriptionMapper();
						$preinscriptionM->find($compteur_preinscription, $preinscription);
								
						$preinscription->setCode_membre($code);
						$preinscriptionM->update($preinscription);
				
				        // insertion dans la table eu_activation
						$id_activation = $m_activation->findConuter() + 1;
						$activation->setId_activation($id_activation)
						           ->setId_depot($id_depot)
								   ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
								   ->setCode_activation($code_activation)
								   ->setCode_membre($code);
						$m_activation->save($activation);		   
				
				
				        $findmembretiers = $m_membretiers->find($id_membretiers,$membretiers);
			            if($findmembretiers) {
			                $membretiers->setCode_membre($code)
							            ->setPublier(1);
				            $m_membretiers->update($membretiers);
		                }
			
			            $userin = new Application_Model_EuUtilisateur();
                        $mapper_user = new Application_Model_EuUtilisateurMapper();
			
			            // insertion dans la table eu_utilisateur
                        $id_user = $mapper_user->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(null)
                               ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                               ->setNom_utilisateur($request->getParam("nom_membre"))
                               ->setLogin($code)
                               ->setPwd(md5($request->getParam("codesecret")))
                               ->setDescription(null)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
				               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(null)
                               ->setCode_zone($code_zone)
                               //->setCode_gac_filiere(null)
		                       ->setId_pays($request->getParam("id_pays"))	    	
                               ->setCode_acteur($acteur)
				               ->setCode_membre($code);
                        $mapper_user->save($userin);							   
                    
				        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
		                $mapper_contrat = new Application_Model_EuContratMapper();
		                $id_contrat = $mapper_contrat->findConuter() + 1;
				        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(null);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(null);
                        $contrat->setId_pays(null);
                        $contrat->setId_utilisateur(null);
                        $contrat->setFiliere(null);
                        $mapper_contrat->save($contrat);
				
				        // insertion dans la table eu_compte_bancaire
					    $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
					    for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;         
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
					   
                        // insertion dans eu_fs
						$tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
						         ->setCode_membre_morale(null)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($code_activation)
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur(null)
                                 ->setMont_fs($fs);
                        $tab_fs->insert($fs_model->toArray()); 
						      
						//insertion des frais d'identification dans la table operation
                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;
						$lib_op = 'Enrôlement';
                        $type_op = 'ERL';
						Util_Utils::addOperation($compteur,$code,null,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'),null);
                        
				        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();
					 
					    $id = $type_bnp . $apporteur . $date_deb->toString('yyyyMMddHHmmss');
				        $caps->setCode_caps($id)
                             ->setCode_membre_benef($code)
                             ->setMont_caps($mont_caps)
                             ->setMont_fs(0)
                             ->setPeriode(0)
                             ->setId_operation($count)
                             ->setRembourser('N')
                             ->setId_credit(null)
                             ->setIndexer(1)
                             ->setType_caps($type_caps)
                             ->setCode_type_bnp($type_bnp)
                             ->setFs_utiliser(1)
                             ->setFl_utiliser(1)
	                         ->setCps_utiliser(1)
                             ->setMont_panu_fs(0)
                             ->setReconst_fs(0)
                             ->setPanu(0)
                             ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                             ->setId_utilisateur(null);
							 
					    if(substr($apporteur,19,1)=='P') {
                            $caps->setCode_membre_app($apporteur)
                                 ->setCode_membre_morale_app(null);
                        } else  {
                            $caps->setCode_membre_app(null)
                                 ->setCode_membre_morale_app($apporteur);
                        }							 
				        $m_caps->save($caps);
				        
						$tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
						$mapper_op = new Application_Model_EuOperationMapper();
						$compteur = $mapper_op->findConuter() + 1;
						
						// insertion dans la table eu_operation 
                        Util_Utils::addOperation($compteur,$code,null,null,$mont_fl,null,'Frais de licences','FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);
						
						// insertion dans la table eu_fl
						$fl->setCode_fl("FL-".$code)
                           ->setCode_membre($code)
						   ->setCode_membre_morale(null)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(null)
                           ->setCreditcode($code_activation);
                        $tfl->insert($fl->toArray());
						
						$tcartes[0]="TPAGCRPG";
						$tcartes[1]="TCNCS";
						$tcartes[2]="TPaNu";
						$tcartes[3]="TPaR";
						$tcartes[4]="TR";
						$tcartes[5]="CAPA";
									
						$tscartes[0]="TSRPG";
					    $tscartes[1]="TSCNCS";
					    $tscartes[2]="TSPaNu";
						$tscartes[3]="TSPaR";
						$tscartes[4]="TSCAPA";
	
						for($i = 0; $i < count($tcartes); $i++) {
							if($tcartes[$i] == "TCNCS") {
                              $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NR';
							  $res = $map_compte->find($code_compte,$compte);
							} elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                              $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NN';
							  $res = $map_compte->find($code_compte,$compte);
							} else {
							  $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
							  $type_carte = 'NB';
							  $res = $map_compte->find($code_compte,$compte);
							}		
								if(!$res) {
								    // insertion dans la table eu_compte
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
										   ->setCode_membre_morale(null)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
									$map_compte->save($compte);
									
							    }
									
                        }
						
						for($j = 0; $j < count($tscartes); $j++) {
							if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NR';
							    $res = $map_compte->find($code_comptets,$compte);
						    } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NN';
								$res = $map_compte->find($code_comptets,$compte);
							} else  {
								$code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
								$type_carte = 'NB';
								$res = $map_compte->find($code_comptets,$compte);
							}
										
								if(!$res) {
								    // insertion dans la table eu_compte
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
										   ->setCode_membre_morale(null)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
									$map_compte->save($compte);
									
							    }
									
                        }
						
						//Mise e jour du compte general fgfn
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $fl);
                            $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($fl);
                            $cg_mapper->save($cg_fgfn);
                        }
						
						// insertion dans la table eu_carte
    					$id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
							  ->setCode_cat(null)
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte(null)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(null);
                        $t_carte->insert($carte->toArray());
						
						$mapper_op = new Application_Model_EuOperationMapper();
						$countop = $mapper_op->findConuter() + 1;		
                        Util_Utils::addOperation($countop,$code,null,null,$fkps,null,'Frais de CPS','CPS',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'),null);
                        
						/*
						if(substr($apporteur,19,1) == 'P') {
						    $findmembre = $m_map->find($apporteur,$membre);
						    $compt = Util_Utils::findConuter() + 1;
                            Util_Utils::addSms($compt,$membre->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);   
                        } else {
						    $findmembre = $m_mapmoral->find($apporteur,$membremoral);
						    $compt = Util_Utils::findConuter() + 1;
                            Util_Utils::addSms($compt,$membremoral->getPortable_membre(),"Vous venez de faire l'activation du compte marchand ESMC du membre  ". $code);
						} */
						
			            $compt1 = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms($compt1,$request->getParam("portable_membre"),"Bienvenue dans le reseau MCNP !!!  Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);   
                        
						$db->commit();
						$this->view->message = "Ouverture de compte marchand bien effectuée ...";
	
	                } catch (Exception $exc) {
                        $db->rollback();
                        $message = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                        $this->view->message = $message;
						$this->view->nom_membre = $request->getParam("nom_membre");
                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->portable = $request->getParam("portable_membre");
				        return;
                    }
	
	        }  else {  
			    $this->view->message = "Champs * obligatoire ..."; 
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");			
			}
	
	    }
	
	}
	
	
	



    public function testAction()
    {
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    
//include("automatisation.php"); 
//releve_relevedetail();
  //validation_automatique(100);
  //dotransfertAction(100);
  //transfertNumeroSouscription();

//$compteur = Util_Utils::findConuter() + 1; 
//Util_Utils::addSms($compteur, '90291387', "Vous venez d'etre selectionne pour l'appel d'offre auquel vous avez soumissionner");        

$this->view->nom_serveur = $_SERVER['SERVER_NAME'];

    }





        public function ancienppAction() {
        /* page index/ancienpp - Retrouve ancienne personne physique GIE/ReDeMaRe */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Physique();
                $membres = new Application_Model_DbTable_EuAncienMembre();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentp like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $souscription = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->numidentp);
                    $sous = $souscription->fetchAll($selection);
                    if(count($sous) == 0) {     
                        $this->_redirect('/index/reactivationsouscriptiongiepp/id/'.$trouvmembre->numidentp);
                    } else {  
                       $this->view->message = "Quittance de Réactivation déjà effectuée ...";
                    }   
                } else {
                    $this->view->message = "Votre numéro identité est introuvable ou est déjà réactivé ... ";//Déjà Activé
                }
            } else {  
                $this->view->message = "Champs * obligatoire ...";
            }
       
        } 
    }



	
	
	
    public function ancienppeditAction() {
        /* page index/ancienppedit - Enrolement ancienne personne physique GIE/ReDeMaRe */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    
        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
        if (isset($_POST['nom_membre']) && $_POST['nom_membre']!="" 
		    && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="" 
			&& isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!="" 
			&& isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!="" 
			&& isset($_POST['prenom_membre']) && $_POST['prenom_membre']!="" 
			&& isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="" 
			&& isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!="" 
			&& isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!="" 
			&& isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" 
			&& isset($_POST['ville_membre']) && $_POST['ville_membre']!="" 
			&& isset($_POST['portable_membre']) && $_POST['portable_membre']!="" 
			&& isset($_POST['profession_membre']) && $_POST['profession_membre']!="" 
			&& isset($_POST['religion_membre']) && $_POST['religion_membre']!="" 
			&& isset($_POST['id_pays']) && $_POST['id_pays']!="" 
			&& isset($_POST['code_agence']) && $_POST['code_agence']!="") {
			
            $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
			if(($smsmoneyFS = $smsmoneyM->findByCreditCode9($_POST['code_fs'], "FS") && $smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL"))
			&& (($_POST['code_fkps']=="") || (isset($_POST['code_fkps']) && $_POST['code_fkps']!="" && $smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS")))) {
                $code_agence = $_POST['code_agence'];
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
			   
			   
			    $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
			   
			   
			    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
                $membre = new Application_Model_EuMembre();
                $mapper = new Application_Model_EuMembreMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();
                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                $tcartes = array();
                $tscartes = array();
			   
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
			    try { 
					$code_fs = $_POST["code_fs"];
                    $code_fl = $_POST["code_fl"];
                    $code_fkps = $_POST["code_fkps"];
					
					if($code_fs != "") {
					    $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                           $code = $code_agence . '0000001' . 'P';
                        } 
                        else {
                           $num_ordre = substr($code, 12, 7);
                           $num_ordre++;
                           $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                           $code = $code_agence . $num_ordre_bis . 'P';
                        }
						$sms_fs = $sms_mapper->findByCreditCode($code_fs);
						if ($sms_fs == NULL) {
					        $db->rollback();
                            $this->view->message = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
					    }
						
						if($sms_fs->getMotif() != 'FS') {
						    $db->rollBack();
                            $this->view->message = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
			            }
						$date_nais = new Zend_Date($_POST["date_nais_membre"]);
                        if ($date_nais >= $date_idd) {
                            $this->view->message = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
                        }
						$membre->setCode_membre($code)
                               ->setNom_membre($_POST["nom_membre"])
                               ->setPrenom_membre($_POST["prenom_membre"])
                               ->setSexe_membre($_POST["sexe_membre"])
                               ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                               ->setId_pays($_POST["nationalite_membre"])
                               ->setLieu_nais_membre($_POST["lieu_nais_membre"])
                               ->setPere_membre($_POST["pere_membre"])
                               ->setMere_membre($_POST["mere_membre"])
                               ->setSitfam_membre($_POST["sitfam_membre"])
                               ->setNbr_enf_membre($_POST["nbr_enf_membre"])
                               ->setProfession_membre($_POST["profession_membre"])
                               ->setFormation($_POST["formation"])
                               ->setId_religion_membre($_POST["religion_membre"])
                               ->setQuartier_membre($_POST["quartier_membre"])
                               ->setVille_membre($_POST["ville_membre"])
                               ->setBp_membre($_POST["bp_membre"])
                               ->setTel_membre($_POST["tel_membre"])
                               ->setEmail_membre($_POST["email_membre"])
                               ->setPortable_membre($_POST["portable_membre"])
                               ->setId_utilisateur(NULL)
                               ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                               ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                               ->setCode_agence($code_agence)
                               ->setCodesecret(md5($_POST["codesecret"]))
                               ->setAuto_enroler('O')
                               ->setEtat_membre('A');
                        $mapper->save($membre);
						
						//Mise à jour de la table physique
                        $p_mapper = new Application_Model_PhysiqueMapper();
                        $p = new Application_Model_Physique();
                        $rep = $p_mapper->find($_POST["numident"],$p);
                        if ($rep == true) {      
                            $p->setEtat_contrat(1)
                              ->setCode_membre($code);
                            $p_mapper->update($p);      
                        }
						
						$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
						for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;         
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
						
						$mapper_op = new Application_Model_EuOperationMapper();
                        $compteurfs = $mapper_op->findConuter() + 1;
                        $lib_op = 'Auto-enrôlement';
                        $type_op = 'AERL';
                        Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                        
                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
                                 ->setCode_membre_morale(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur(NULL)
                                 ->setMont_fs($fs)
								 ->setOrigine_fs('A');
                        $tab_fs->insert($fs_model->toArray());
						
						$sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);
						
						$userin = new Application_Model_EuUtilisateur();
                        $mapper = new Application_Model_EuUtilisateurMapper();
                        $id_user = $mapper->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(NULL)
                               ->setPrenom_utilisateur($_POST["prenom_membre"])
                               ->setNom_utilisateur($_POST["nom_membre"])
                               ->setLogin($code)
                               ->setPwd(md5($_POST["codesecret"]))
                               ->setDescription(NULL)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
                               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(NULL)
                               ->setCode_zone($code_zone)
                               ->setId_pays($id_pays)       
                               ->setCode_acteur($code_acteur)
                               ->setCode_membre($code);    
                        $mapper->save($userin);
						
						// Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper->findConuter() + 1;
                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numerique');
                        $contrat->setId_type_contrat(NULL);
                        $contrat->setId_type_creneau(NULL);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays(NULL);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere(NULL);
                        $mapper_contrat->save($contrat);
						
                    } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->nom_membre = $_POST["nom_membre"];
                        $this->view->prenom_membre = $_POST["prenom_membre"];
                        $this->view->sexe = $_POST["sexe_membre"];
                        $this->view->sitfam = $_POST["sitfam_membre"];
                        $this->view->datnais = $_POST["date_nais_membre"];
                        $this->view->nation = $_POST["nationalite_membre"];
                        $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                        $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                        $this->view->formation = $_POST["formation"];
                        $this->view->profession = $_POST["profession_membre"];
                        $this->view->religion = $_POST["religion_membre"];
                        $this->view->pere = $_POST["pere_membre"];
                        $this->view->mere = $_POST["mere_membre"];
                        $this->view->quartier_membre = $_POST["quartier_membre"];
                        $this->view->ville_membre = $_POST["ville_membre"];
                        $this->view->bp = $_POST["bp_membre"];
                        $this->view->tel = $_POST["tel_membre"];
                        $this->view->email = $_POST["email_membre"];
                        $this->view->portable = $_POST["portable_membre"];
                        return;  
                    }
					
					if($code_fl != "") {
					    $sms_fl = $sms_mapper->findByCreditCode($code_fl);
						if ($sms_fl == NULL) {
                           $db->rollback();
                           $this->view->message = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                           $this->view->nom_membre = $_POST["nom_membre"];
                           $this->view->prenom_membre = $_POST["prenom_membre"];
                           $this->view->sexe = $_POST["sexe_membre"];
                           $this->view->sitfam = $_POST["sitfam_membre"];
                           $this->view->datnais = $_POST["date_nais_membre"];
                           $this->view->nation = $_POST["nationalite_membre"];
                           $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                           $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                           $this->view->formation = $_POST["formation"];
                           $this->view->profession = $_POST["profession_membre"];
                           $this->view->religion = $_POST["religion_membre"];
                           $this->view->pere = $_POST["pere_membre"];
                           $this->view->mere = $_POST["mere_membre"];
                           $this->view->quartier_membre = $_POST["quartier_membre"];
                           $this->view->ville_membre = $_POST["ville_membre"];
                           $this->view->bp = $_POST["bp_membre"];
                           $this->view->tel = $_POST["tel_membre"];
                           $this->view->email = $_POST["email_membre"];
                           $this->view->portable = $_POST["portable_membre"];
                           return;
                        }
						
						if($sms_fl->getMotif() != 'FL') {
                          $db->rollBack();
                          $this->view->message = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                          $this->view->nom_membre = $_POST["nom_membre"];
                          $this->view->prenom_membre = $_POST["prenom_membre"];
                          $this->view->sexe = $_POST["sexe_membre"];
                          $this->view->sitfam = $_POST["sitfam_membre"];
                          $this->view->datnais = $_POST["date_nais_membre"];
                          $this->view->nation = $_POST["nationalite_membre"];
                          $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                          $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                          $this->view->formation = $_POST["formation"];
                          $this->view->profession = $_POST["profession_membre"];
                          $this->view->religion = $_POST["religion_membre"];
                          $this->view->pere = $_POST["pere_membre"];
                          $this->view->mere = $_POST["mere_membre"];
                          $this->view->quartier_membre = $_POST["quartier_membre"];
                          $this->view->ville_membre = $_POST["ville_membre"];
                          $this->view->bp = $_POST["bp_membre"];
                          $this->view->tel = $_POST["tel_membre"];
                          $this->view->email = $_POST["email_membre"];
                          $this->view->portable = $_POST["portable_membre"];
                          return;    
                        }
						
						$tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;
            
                        $fl->setCode_fl($code_fl)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(NULL)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode())
						   ->setOrigine_fl('A');
                        $tfl->insert($fl->toArray());
						
						//Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }
						$compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);
						
						$tcartes[0]="TPAGCRPG";
                        $tcartes[1]="TCNCS";
                        $tcartes[2]="TPaNu";
                        $tcartes[3]="TPaR";
                        $tcartes[4]="TR";
                        $tcartes[5]="CAPA";
						
						$tscartes[0]="TSRPG";
                        $tscartes[1]="TSCNCS";
                        $tscartes[2]="TSPaNu";
                        $tscartes[3]="TSPaR";
                        $tscartes[4]="TSCAPA";
						
						for($i = 0; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCS") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } else  {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                    
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                        }
						
						for($j = 0; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } else {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
							
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                               $map_compte->save($compte);   
                            } 
                        }
					}
					
					if($code_fkps != "") {
					    $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
						if ($sms_fkps == NULL) {
                           $db->rollback();
                           $this->view->message = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                           $this->view->nom_membre = $_POST["nom_membre"];
                           $this->view->prenom_membre = $_POST["prenom_membre"];
                           $this->view->sexe = $_POST["sexe_membre"];
                           $this->view->sitfam = $_POST["sitfam_membre"];
                           $this->view->datnais = $_POST["date_nais_membre"];
                           $this->view->nation = $_POST["nationalite_membre"];
                           $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                           $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                           $this->view->formation = $_POST["formation"];
                           $this->view->profession = $_POST["profession_membre"];
                           $this->view->religion = $_POST["religion_membre"];
                           $this->view->pere = $_POST["pere_membre"];
                           $this->view->mere = $_POST["mere_membre"];
                           $this->view->quartier_membre = $_POST["quartier_membre"];
                           $this->view->ville_membre = $_POST["ville_membre"];
                           $this->view->bp = $_POST["bp_membre"];
                           $this->view->tel = $_POST["tel_membre"];
                           $this->view->email = $_POST["email_membre"];
                           $this->view->portable = $_POST["portable_membre"];
                           return;
                        }
						
						if($sms_fkps->getMotif() != 'FKPS') {
                          $db->rollBack();
                          $this->view->message = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                          $this->view->nom_membre = $_POST["nom_membre"];
                          $this->view->prenom_membre = $_POST["prenom_membre"];
                          $this->view->sexe = $_POST["sexe_membre"];
                          $this->view->sitfam = $_POST["sitfam_membre"];
                          $this->view->datnais = $_POST["date_nais_membre"];
                          $this->view->nation = $_POST["nationalite_membre"];
                          $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                          $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                          $this->view->formation = $_POST["formation"];
                          $this->view->profession = $_POST["profession_membre"];
                          $this->view->religion = $_POST["religion_membre"];
                          $this->view->pere = $_POST["pere_membre"];
                          $this->view->mere = $_POST["mere_membre"];
                          $this->view->quartier_membre = $_POST["quartier_membre"];
                          $this->view->ville_membre = $_POST["ville_membre"];
                          $this->view->bp = $_POST["bp_membre"];
                          $this->view->tel = $_POST["tel_membre"];
                          $this->view->email = $_POST["email_membre"];
                          $this->view->portable = $_POST["portable_membre"];
                          return;    
                        }
						
						
						$carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($mont_cps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL)
							  ->setOrigine_fkps('A');
                        $t_carte->insert($carte->toArray()); 
                        $compteurcps = $mapper_op->findConuter() + 1; 
                        Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                        $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                 ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
					
					}
					$compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$_POST["codesecret"]); 
                    $db->commit();
					$sessionmcnp->errorlogin = "Ré-activation du compte marchand membre personne physique bien effectuée ...";
					$this->_redirect('/index/ancienmpp');
                } catch (Exception $exc)  {
                    $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    $db->rollback();
                    $this->view->nom_membre = $_POST["nom_membre"];
                    $this->view->prenom_membre = $_POST["prenom_membre"];
                    $this->view->sexe = $_POST["sexe_membre"];
                    $this->view->sitfam = $_POST["sitfam_membre"];
                    $this->view->datnais = $_POST["date_nais_membre"];
                    $this->view->nation = $_POST["nationalite_membre"];
                    $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                    $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                    $this->view->formation = $_POST["formation"];
                    $this->view->profession = $_POST["profession_membre"];
                    $this->view->religion = $_POST["religion_membre"];
                    $this->view->pere = $_POST["pere_membre"];
                    $this->view->mere = $_POST["mere_membre"];
                    $this->view->quartier_membre = $_POST["quartier_membre"];
                    $this->view->ville_membre = $_POST["ville_membre"];
                    $this->view->bp = $_POST["bp_membre"];
                    $this->view->tel = $_POST["tel_membre"];
                    $this->view->email = $_POST["email_membre"];
                    $this->view->portable = $_POST["portable_membre"];
                    return;
                }
			} 
		       
		   
		   
		   
		} else {  
		    $this->view->message = "Champs * obligatoire ...";
            $this->view->nom_membre = $_POST["nom_membre"];
            $this->view->prenom_membre = $_POST["prenom_membre"];
            $this->view->sexe = $_POST["sexe_membre"];
            $this->view->sitfam = $_POST["sitfam_membre"];
            $this->view->datnais = $_POST["date_nais_membre"];
            $this->view->nation = $_POST["nationalite_membre"];
            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
            $this->view->formation = $_POST["formation"];
            $this->view->profession = $_POST["profession_membre"];
            $this->view->religion = $_POST["religion_membre"];
            $this->view->pere = $_POST["pere_membre"];
            $this->view->mere = $_POST["mere_membre"];
            $this->view->quartier_membre = $_POST["quartier_membre"];
            $this->view->ville_membre = $_POST["ville_membre"];
            $this->view->bp = $_POST["bp_membre"];
            $this->view->tel = $_POST["tel_membre"];
            $this->view->email = $_POST["email_membre"];
            $this->view->portable = $_POST["portable_membre"];			
		} 
    } else {
        $id = (string)$this->_request->getParam('id');
        $tabela = new Application_Model_DbTable_Physique();
        $membres = new Application_Model_DbTable_EuAncienMembre();
        $select=$tabela->select();
        $select->from($tabela)
               ->where('numidentp like ?', '%'.$id.'%')
               ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
        $memb = $tabela->fetchAll($select);
        $trouvmembre = $memb->current();
      
        $this->view->numident = $trouvmembre->numidentp;
        $this->view->nom_membre = $trouvmembre->nom;
        $this->view->prenom_membre = $trouvmembre->prenom;
        $this->view->sexe = $trouvmembre->sexe;
        $this->view->profession = $trouvmembre->prof;
        $this->view->tel = $trouvmembre->tel;
        $this->view->ville_membre = $trouvmembre->ville; 
        $this->view->pere = $trouvmembre->pere;
        $this->view->mere = $trouvmembre->mere;
        $this->view->quartier_membre = $trouvmembre->qartresid;
        $this->view->bp = $trouvmembre->bp;
        $this->view->nbre_enf = $trouvmembre->nbrenf;
        $this->view->email = $trouvmembre->email;
        $this->view->portable = $trouvmembre->portable;
        $this->view->formation = $trouvmembre->formation;
        $this->view->lieu_nais = $trouvmembre->lieunais;  
    }
    
    }
	



    public function ancienppeditoldAction()
    {
        /* page index/ancienppedit - Enrolement ancienne personne physique GIE/ReDeMaRe */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

    if(isset($_POST['ok']) && $_POST['ok']=="ok"){
  if (isset($_POST['nom_membre']) && $_POST['nom_membre']!="" && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="" && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!="" && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!="" && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!="" && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="" && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!="" && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!="" && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" && isset($_POST['profession_membre']) && $_POST['profession_membre']!="" && isset($_POST['religion_membre']) && $_POST['religion_membre']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {

            
$code_agence = $_POST['code_agence'];
$code_zone = substr($_POST['code_agence'], 0, 3);
$id_pays = $_POST['id_pays'];
         $table = new Application_Model_DbTable_EuActeur();
         $selection = $table->select();
         $selection->where('code_membre LIKE ?',$code_agence.'%');
         $selection->where('type_acteur LIKE ?','gac_surveillance');
         $resultat = $table->fetchAll($selection);
         $trouvacteursur = $resultat->current();
         $code_acteur = $trouvacteursur->code_acteur;


            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
                  //insertion dans la table membre des information du nouveau membre
          
                  $membre = new Application_Model_EuMembre();
                  $mapper = new Application_Model_EuMembreMapper();
          $compte = new Application_Model_EuCompte();
                  $map_compte = new Application_Model_EuCompteMapper();
              $tcartes = array();
            $tscartes = array();
          
                  $code = $mapper->getLastCodeMembreByAgence($code_agence);
                  if ($code == NULL) {
                      $code = $code_agence . '0000001' . 'P';
                  } 
                  else {
                      $num_ordre = substr($code, 12, 7);
                      $num_ordre++;
                      $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                      $code = $code_agence . $num_ordre_bis . 'P';
                  }
                      $date_nais = new Zend_Date($_POST["date_nais_membre"]);
                      if ($date_nais >= $date_idd) {
                         $this->view->message = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                         $db->rollback();
                         if ($code_caps != '') {
                            $this->view->code = $code_caps;
                         }
                         $this->view->nom_membre = $_POST["nom_membre"];
                         $this->view->prenom_membre = $_POST["prenom_membre"];
                         $this->view->sexe = $_POST["sexe_membre"];
                         $this->view->sitfam = $_POST["sitfam_membre"];
                         $this->view->datnais = $_POST["date_nais_membre"];
                         $this->view->nation = $_POST["nationalite_membre"];
                         $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                         $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                         $this->view->formation = $_POST["formation"];
                         $this->view->profession = $_POST["profession_membre"];
                         $this->view->religion = $_POST["religion_membre"];
                         $this->view->pere = $_POST["pere_membre"];
                         $this->view->mere = $_POST["mere_membre"];
                         $this->view->quartier_membre = $_POST["quartier_membre"];
                         $this->view->ville_membre = $_POST["ville_membre"];
                         $this->view->bp = $_POST["bp_membre"];
                         $this->view->tel = $_POST["tel_membre"];
                         $this->view->email = $_POST["email_membre"];
                         $this->view->portable = $_POST["portable_membre"];
                         return;
                    }
                    $membre->setCode_membre($code)
                           ->setNom_membre($_POST["nom_membre"])
                           ->setPrenom_membre($_POST["prenom_membre"])
                           ->setSexe_membre($_POST["sexe_membre"])
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($_POST["nationalite_membre"])
                           ->setLieu_nais_membre($_POST["lieu_nais_membre"])
                           ->setPere_membre($_POST["pere_membre"])
                           ->setMere_membre($_POST["mere_membre"])
                           ->setSitfam_membre($_POST["sitfam_membre"])
                           ->setNbr_enf_membre($_POST["nbr_enf_membre"])
                           ->setProfession_membre($_POST["profession_membre"])
                           ->setFormation($_POST["formation"])
                           ->setId_religion_membre($_POST["religion_membre"])
                           ->setQuartier_membre($_POST["quartier_membre"])
                           ->setVille_membre($_POST["ville_membre"])
                           ->setBp_membre($_POST["bp_membre"])
                           ->setTel_membre($_POST["tel_membre"])
                           ->setEmail_membre($_POST["email_membre"])
                           ->setPortable_membre($_POST["portable_membre"])
                           ->setId_utilisateur(NULL)//$user->id_utilisateur
                           ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                           ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                           ->setCode_agence($code_agence)
               ->setCodesecret(md5($_POST["codesecret"]))
                 ->setAuto_enroler('O')
               ->setEtat_membre('A');
                      $mapper->save($membre);
                        
                      //Mise à jour de la table physique
                      $p_mapper = new Application_Model_PhysiqueMapper();
                      $p = new Application_Model_Physique();
                      $rep = $p_mapper->find($_POST["numident"],$p);
                      if ($rep == true) {      
                         $p->setEtat_contrat(1)
               ->setCode_membre($code);
                         $p_mapper->update($p);      
                      }
               
          for($i = 0; $i < count($_POST['code_banque']); $i++){
                    $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                    $cb = new Application_Model_EuCompteBancaire();
              $cb_compteur = $cb_mapper->findConuter() + 1;         
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                   ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i])
                 ;
                            $cb_mapper->save($cb);
                    }

                     //Util_Utils::createCompte('NB-TPAGCRPG-' . $code, 'TPAGCRPG', 'TPAGCRPG', 0, $code, 'NB', $date_id, 0);
          // Mise à jour de la table eu_utilisateur
            
          $userin = new Application_Model_EuUtilisateur();
                    $mapper = new Application_Model_EuUtilisateurMapper();
                    $id_user = $mapper->findConuter() + 1;
                    $userin->setId_utilisateur($id_user)
                           ->setId_utilisateur_parent(NULL)//$user->id_utilisateur
                           ->setPrenom_utilisateur($_POST["prenom_membre"])
                           ->setNom_utilisateur($_POST["nom_membre"])
                           ->setLogin($code)
                           ->setPwd(md5($_POST["codesecret"]))
                           ->setDescription(NULL)
                           ->setUlock(0)
                           ->setCh_pwd_flog(0)
                           ->setCode_groupe('personne_physique')
                 ->setCode_groupe_create('personne_physique')
                           ->setConnecte(0)
                           ->setCode_agence($code_agence)
                           ->setCode_secteur(NULL)
                           ->setCode_zone($code_zone)
                                 //->setCode_gac_filiere(NULL)
                       ->setId_pays($id_pays)       
                           ->setCode_acteur($code_acteur)
                 ->setCode_membre($code);    
                     $mapper->save($userin);
          
        
             // Mise à jour de la table eu_contrat
                     $contrat = new Application_Model_EuContrat();
                 $mapper_contrat = new Application_Model_EuContratMapper();
                 $id_contrat = $mapper->findConuter() + 1;
             $contrat->setId_contrat($id_contrat);
                     $contrat->setCode_membre($code);
                     $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                     $contrat->setNature_contrat('numerique');
                     $contrat->setId_type_contrat(NULL);
                     $contrat->setId_type_creneau(NULL);
                     $contrat->setId_type_acteur(NULL);
                     $contrat->setId_pays(NULL);
                     $contrat->setId_utilisateur(NULL);//$user->id_utilisateur
                     $contrat->setFiliere(NULL);
                     $mapper_contrat->save($contrat);
              
              
             $acteur = $code_acteur;
             $t_acteur = new Application_Model_DbTable_EuActeur();
                     $c_acteur = new Application_Model_EuActeur();
                     $count = $c_acteur->findConuter() + 1;
           $table = new Application_Model_DbTable_EuActeur();
          
           if(isset($_POST["actcmfh"])) { 
                       $select = $table->select();
             $select->where('code_acteur LIKE ?', $acteur);
             $resultSet = $table->fetchAll($select);
             $ligneacteur = $resultSet->current();
                       $c_acteur->setId_acteur($count);
                       $c_acteur->setCode_acteur(NULL);
                       $c_acteur->setCode_membre($code);
                       $c_acteur->setId_utilisateur(NULL);//$user->id_utilisateur
                       $c_acteur->setDate_creation($date_idd->toString('yyyy-MM-dd'));
               $c_acteur->setCode_activite(NULL);
               $c_acteur->setCode_source_create($ligneacteur->code_source_create);
               $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
             $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
             $c_acteur->setId_pays($ligneacteur->id_pays);
             $c_acteur->setId_region($ligneacteur->id_region);
             $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
             $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                
                       $c_acteur->setType_acteur('CMFH');
               $c_acteur->setCode_gac_chaine($acteur);         
                       $t_acteur->insert($c_acteur->toArray());
          }  else if(isset($_POST["actenro"])) { 
              $select = $table->select();
              $select->where('code_acteur LIKE ?', $acteur);
              $resultSet = $table->fetchAll($select);
              $ligneacteur = $resultSet->current();
                        $c_acteur->setId_acteur($count);
                        $c_acteur->setCode_acteur(NULL);
                        $c_acteur->setCode_membre($code);
                        $c_acteur->setId_utilisateur(NULL);//$user->id_utilisateur
                        $c_acteur->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                $c_acteur->setCode_activite(NULL);
                $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
              $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
              $c_acteur->setId_pays($ligneacteur->id_pays);
              $c_acteur->setId_region($ligneacteur->id_region);
              $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
              $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
            
              $c_acteur->setType_acteur('DSMS');
                $c_acteur->setCode_gac_chaine($acteur);         
                        $t_acteur->insert($c_acteur->toArray());
             
          }
          
              $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
            $tafl = new Application_Model_DbTable_EuAncienFl();
                        $afl = new Application_Model_EuAncienFl();
                        $code_fl = 'FL-'.$code;
                        $result = $tafl->find($code_fl);
              
              //if (count($result) > 0) {
            $code_afl = 'FL-'.$code;
            $mont_fl = Util_Utils::getParametre('FL','valeur'); 
            $fl->setCode_fl($code_afl)
                           ->setCode_membre($code)
               ->setCode_membre_morale(NULL)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_id->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_id->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)//$user->id_utilisateur
                           ->setCreditcode(NULL);
                         $tfl->insert($fl->toArray());
                
             $tcartes[0]="TPAGCRPG";
             $tcartes[1]="TCNCS";
             $tcartes[2]="TPaNu";
             $tcartes[3]="TPaR";
             $tcartes[4]="TR";
             $tcartes[5]="CAPA";
             $tcartes[6]="TRE";
               
             $tscartes[0]="TSRPG";
             $tscartes[1]="TSCNCS";
             $tscartes[2]="TSPaNu";
             $tscartes[3]="TSPaR";
             $tscartes[4]="TSCAPA";
			 $tscartes[5]="TSRE";
               
             for($i = 0; $i < count($tcartes); $i++) {
              if($tcartes[$i] == "TCNCS") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                $type_carte = 'NR';
                $res = $map_compte->find($code_compte,$compte);
              } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                $type_carte = 'NN';
                  $res = $map_compte->find($code_compte,$compte);
              } else  {
                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                $type_carte = 'NB';
                $res = $map_compte->find($code_compte,$compte);
               }
                    
              if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre($code)
                     ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                 $map_compte->save($compte);  
              }
                  
                            }
              
              
              for($j = 0; $j < count($tscartes); $j++) {
              
                  if($tscartes[$j] == "TSCNCS") {
                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                    $type_carte = 'NR';
                    $res = $map_compte->find($code_comptets,$compte);
                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                    $type_carte = 'NN';
                    $res = $map_compte->find($code_comptets,$compte);
                } else {
                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                    $type_carte = 'NB';
                    $res = $map_compte->find($code_comptets,$compte);
                }
                    
                if(!$res) {
                    $compte->setCode_cat($tscartes[$j])
                           ->setCode_compte($code_comptets)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(NULL)
                           ->setCode_type_compte($type_carte)
                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                           ->setDesactiver(0)
                           ->setLib_compte($tscartes[$j])
                           ->setSolde(0);
                    $map_compte->save($compte);
                  
                  }
              
              }
            
                    $compteur=Util_Utils::findConuter() + 1;
                            Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$_POST["codesecret"]); 
                            $db->commit();
                            //Redirection sur le formulaire du contrat
                            //return $this->_helper->redirector('newpp', 'eu-contrat', NULL, array('controller' => 'eu-contrat', 'action' => 'newpp', 'membre' => $code, 'type' => 'P'));
                    //return $this->_helper->redirector('index');
            } 
            catch (Exception $exc) {
                   $db->rollback();
                   $this->view->nom = $_POST["nom_membre"];
                   $this->view->prenom = $_POST["prenom_membre"];
                   $this->view->sexe = $_POST["sexe_membre"];
                   $this->view->sitmatr = $_POST["sitfam_membre"];
                   $this->view->datenais = $_POST["date_nais_membre"];
                   $this->view->nation = $_POST["nationalite_membre"];
                   $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                   $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                   $this->view->formation = $_POST["formation"];
                   $this->view->prof = $_POST["profession_membre"];
                   $this->view->religion = $_POST["religion_membre"];
                   $this->view->pere = $_POST["pere_membre"];
                   $this->view->mere = $_POST["mere_membre"];
                   $this->view->quartier_membre = $_POST["quartier_membre"];
                   $this->view->ville_membre = $_POST["ville_membre"];
                   $this->view->bp = $_POST["bp_membre"];
                   $this->view->tel = $_POST["tel_membre"];
                   $this->view->email = $_POST["email_membre"];
                   $this->view->portable = $_POST["portable_membre"];
                   $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             }
          

/*          */          

         $sessionmcnp->errorlogin = "Ré-activation du compte marchant membre personne physique bien effectuée ...";
         $this->_redirect('/index/ancienpp');
    //$this->_redirect('/');
    } else {  $this->view->message = "Champs * obligatoire ...";  } 
    } else {
      
            $id = (string)$this->_request->getParam('id');
      
        $tabela = new Application_Model_DbTable_Physique();
    $membres = new Application_Model_DbTable_EuAncienMembre();
        $select=$tabela->select();
        $select->from($tabela)
               ->where('numidentp like ?', '%'.$id.'%')
        ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
         ;
    $memb = $tabela->fetchAll($select);
    $trouvmembre = $memb->current();
      
$this->view->numident = $trouvmembre->numidentp;
$this->view->nom_membre = $trouvmembre->nom;
$this->view->prenom_membre = $trouvmembre->prenom;
$this->view->sexe = $trouvmembre->sexe;
$this->view->profession = $trouvmembre->prof;
$this->view->tel = $trouvmembre->tel;
$this->view->ville_membre = $trouvmembre->ville; 
$this->view->pere = $trouvmembre->pere;
$this->view->mere = $trouvmembre->mere;
$this->view->quartier_membre = $trouvmembre->qartresid;
$this->view->bp = $trouvmembre->bp;
$this->view->nbre_enf = $trouvmembre->nbrenf;
$this->view->email = $trouvmembre->email;
$this->view->portable = $trouvmembre->portable;
$this->view->formation = $trouvmembre->formation;
$this->view->lieu_nais = $trouvmembre->lieunais;
      
      }
    
    }








	public  function acteurcreneauAction()  {
        /* page index  */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutesmc');
       
        $tabela = new Application_Model_DbTable_EuTegc();
        $select = $tabela->select();
        
        //$select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        //$select->setIntegrityCheck(false);
        
        $select->from($tabela,array('code_membre','code_membre_physique'));
        $select->distinct();
        //$select->join('eu_membre_morale','eu_membre_morale.code_membre_morale = eu_tegc.code_membre');
        $select->where('code_membre_physique is null');
        $select->where('(type_tegc is not null');
        $select->where('type_tegc <> ?)',"PRESTATAIRE");
        /*$select->order('nom_tegc asc');*/
       
        $this->view->entries = $tabela->fetchAll($select);
        $this->view->tabletri = 1;
        $this->view->index = "esmc";
       
     }




    public function ancienppmcnpAction() {
        /* page index/ancienppmcnp - Retrouve ancienne personne physique MCNP */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_EuAncienMembre();
                $select = $tabela->select();
                $select->where('ancien_code_membre like ?', '%'.$_POST['code_membre'].'%')
				       ->where('type_membre like ?', 'P')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');       
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();      
                    $souscription = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->ancien_code_membre);
                    $sous = $souscription->fetchAll($selection);
                    if(count($sous) == 0) {     
                      $this->_redirect('/index/reactivationsouscriptionmcnppp/id/'.$trouvmembre->ancien_code_membre);
                    } else {  
                       $this->view->message = "Quittance de Réactivation déjà effectuée ...";
                    }                     
                } else {  $this->view->message = "Votre ancien code membre est introuvable ou est déjà réactivé ... ";}//Déjà Activé
            } else {  $this->view->message = "Champs * obligatoire ...";}
       
        } 
    }


     public function ancienppmcnpeditAction() {
        /* page index/ancienppmcnpedit - Enrolement ancienne personne physique MCNP */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    
        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
		
		   if (isset($_POST['nom_membre']) && $_POST['nom_membre']!="" 
		    && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="" 
			&& isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!="" 
			&& isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!="" 
			&& isset($_POST['prenom_membre']) && $_POST['prenom_membre']!="" 
			&& isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="" 
			&& isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!="" 
			&& isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!="" 
			&& isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" 
			&& isset($_POST['ville_membre']) && $_POST['ville_membre']!="" 
			&& isset($_POST['portable_membre']) && $_POST['portable_membre']!="" 
			&& isset($_POST['profession_membre']) && $_POST['profession_membre']!="" 
			&& isset($_POST['religion_membre']) && $_POST['religion_membre']!="" 
			&& isset($_POST['id_pays']) && $_POST['id_pays']!="" 
			&& isset($_POST['code_agence']) && $_POST['code_agence']!="") {
			
            $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
			if(($smsmoneyFS = $smsmoneyM->findByCreditCode9($_POST['code_fs'], "FS") && $smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL"))
			&& (($_POST['code_fkps']=="") || (isset($_POST['code_fkps']) && $_POST['code_fkps']!="" && $smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS")))) {
                $code_agence = $_POST['code_agence'];
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
			   
			    $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
			   
			    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
                $membre = new Application_Model_EuMembre();
                $mapper = new Application_Model_EuMembreMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();
                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                $tcartes = array();
                $tscartes = array();
			   
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
			    try { 
					$code_fs = $_POST["code_fs"];
                    $code_fl = $_POST["code_fl"];
                    $code_fkps = $_POST["code_fkps"];
					
					if($code_fs != "") {
					    $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                           $code = $code_agence . '0000001' . 'P';
                        } 
                        else {
                           $num_ordre = substr($code, 12, 7);
                           $num_ordre++;
                           $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                           $code = $code_agence . $num_ordre_bis . 'P';
                        }
						$sms_fs = $sms_mapper->findByCreditCode($code_fs);
						if ($sms_fs == NULL) {
					        $db->rollback();
                            $this->view->message = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
					    }
						
						if($sms_fs->getMotif() != 'FS') {
						    $db->rollBack();
                            $this->view->message = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
			            }
						$date_nais = new Zend_Date($_POST["date_nais_membre"]);
                        if ($date_nais >= $date_idd) {
                            $this->view->message = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
                        }
						$membre->setCode_membre($code)
                               ->setNom_membre($_POST["nom_membre"])
                               ->setPrenom_membre($_POST["prenom_membre"])
                               ->setSexe_membre($_POST["sexe_membre"])
                               ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                               ->setId_pays($_POST["nationalite_membre"])
                               ->setLieu_nais_membre($_POST["lieu_nais_membre"])
                               ->setPere_membre($_POST["pere_membre"])
                               ->setMere_membre($_POST["mere_membre"])
                               ->setSitfam_membre($_POST["sitfam_membre"])
                               ->setNbr_enf_membre($_POST["nbr_enf_membre"])
                               ->setProfession_membre($_POST["profession_membre"])
                               ->setFormation($_POST["formation"])
                               ->setId_religion_membre($_POST["religion_membre"])
                               ->setQuartier_membre($_POST["quartier_membre"])
                               ->setVille_membre($_POST["ville_membre"])
                               ->setBp_membre($_POST["bp_membre"])
                               ->setTel_membre($_POST["tel_membre"])
                               ->setEmail_membre($_POST["email_membre"])
                               ->setPortable_membre($_POST["portable_membre"])
                               ->setId_utilisateur(NULL)
                               ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                               ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                               ->setCode_agence($code_agence)
                               ->setCodesecret(md5($_POST["codesecret"]))
                               ->setAuto_enroler('O')
                               ->setEtat_membre('A');
                        $mapper->save($membre);
						
						// Mise à jour de la table eu_ancien_membre
                        $p_mapper = new Application_Model_EuAncienMembreMapper();
                        $p = new Application_Model_EuAncienMembre();
                        $rep = $p_mapper->find($_POST["ancien_code_membre"],$p);
                        if ($rep == true) {      
                            $p->setEtat_contrat(1)
                              ->setCode_membre($code);
                            $p_mapper->update($p);      
                        }
						
						$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
						for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;         
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
						
						$mapper_op = new Application_Model_EuOperationMapper();
                        $compteurfs = $mapper_op->findConuter() + 1;
                        $lib_op = 'Auto-enrôlement';
                        $type_op = 'AERL';
                        Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                        
                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
                                 ->setCode_membre_morale(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur(NULL)
                                 ->setMont_fs($fs)
								 ->setOrigine_fs('A');
                        $tab_fs->insert($fs_model->toArray());
						
						$sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);
						
						$userin = new Application_Model_EuUtilisateur();
                        $mapper = new Application_Model_EuUtilisateurMapper();
                        $id_user = $mapper->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(NULL)
                               ->setPrenom_utilisateur($_POST["prenom_membre"])
                               ->setNom_utilisateur($_POST["nom_membre"])
                               ->setLogin($code)
                               ->setPwd(md5($_POST["codesecret"]))
                               ->setDescription(NULL)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
                               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(NULL)
                               ->setCode_zone($code_zone)
                               ->setId_pays($id_pays)       
                               ->setCode_acteur($code_acteur)
                               ->setCode_membre($code);    
                        $mapper->save($userin);
						
						// Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper->findConuter() + 1;
                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numerique');
                        $contrat->setId_type_contrat(NULL);
                        $contrat->setId_type_creneau(NULL);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays(NULL);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere(NULL);
                        $mapper_contrat->save($contrat);
						
                    } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->nom_membre = $_POST["nom_membre"];
                        $this->view->prenom_membre = $_POST["prenom_membre"];
                        $this->view->sexe = $_POST["sexe_membre"];
                        $this->view->sitfam = $_POST["sitfam_membre"];
                        $this->view->datnais = $_POST["date_nais_membre"];
                        $this->view->nation = $_POST["nationalite_membre"];
                        $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                        $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                        $this->view->formation = $_POST["formation"];
                        $this->view->profession = $_POST["profession_membre"];
                        $this->view->religion = $_POST["religion_membre"];
                        $this->view->pere = $_POST["pere_membre"];
                        $this->view->mere = $_POST["mere_membre"];
                        $this->view->quartier_membre = $_POST["quartier_membre"];
                        $this->view->ville_membre = $_POST["ville_membre"];
                        $this->view->bp = $_POST["bp_membre"];
                        $this->view->tel = $_POST["tel_membre"];
                        $this->view->email = $_POST["email_membre"];
                        $this->view->portable = $_POST["portable_membre"];
                        return;  
                    }
					
					if($code_fl != "") {
					    $sms_fl = $sms_mapper->findByCreditCode($code_fl);
						if ($sms_fl == NULL) {
                           $db->rollback();
                           $this->view->message = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                           $this->view->nom_membre = $_POST["nom_membre"];
                           $this->view->prenom_membre = $_POST["prenom_membre"];
                           $this->view->sexe = $_POST["sexe_membre"];
                           $this->view->sitfam = $_POST["sitfam_membre"];
                           $this->view->datnais = $_POST["date_nais_membre"];
                           $this->view->nation = $_POST["nationalite_membre"];
                           $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                           $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                           $this->view->formation = $_POST["formation"];
                           $this->view->profession = $_POST["profession_membre"];
                           $this->view->religion = $_POST["religion_membre"];
                           $this->view->pere = $_POST["pere_membre"];
                           $this->view->mere = $_POST["mere_membre"];
                           $this->view->quartier_membre = $_POST["quartier_membre"];
                           $this->view->ville_membre = $_POST["ville_membre"];
                           $this->view->bp = $_POST["bp_membre"];
                           $this->view->tel = $_POST["tel_membre"];
                           $this->view->email = $_POST["email_membre"];
                           $this->view->portable = $_POST["portable_membre"];
                           return;
                        }
						
						if($sms_fl->getMotif() != 'FL') {
                          $db->rollBack();
                          $this->view->message = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                          $this->view->nom_membre = $_POST["nom_membre"];
                          $this->view->prenom_membre = $_POST["prenom_membre"];
                          $this->view->sexe = $_POST["sexe_membre"];
                          $this->view->sitfam = $_POST["sitfam_membre"];
                          $this->view->datnais = $_POST["date_nais_membre"];
                          $this->view->nation = $_POST["nationalite_membre"];
                          $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                          $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                          $this->view->formation = $_POST["formation"];
                          $this->view->profession = $_POST["profession_membre"];
                          $this->view->religion = $_POST["religion_membre"];
                          $this->view->pere = $_POST["pere_membre"];
                          $this->view->mere = $_POST["mere_membre"];
                          $this->view->quartier_membre = $_POST["quartier_membre"];
                          $this->view->ville_membre = $_POST["ville_membre"];
                          $this->view->bp = $_POST["bp_membre"];
                          $this->view->tel = $_POST["tel_membre"];
                          $this->view->email = $_POST["email_membre"];
                          $this->view->portable = $_POST["portable_membre"];
                          return;    
                        }
						
						$tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;
            
                        $fl->setCode_fl($code_fl)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(NULL)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode())
						   ->setOrigine_fl('A');
                        $tfl->insert($fl->toArray());
						
						//Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                           $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                           $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }
						$compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);
						
						$tcartes[0]="TPAGCRPG";
                        $tcartes[1]="TCNCS";
                        $tcartes[2]="TPaNu";
                        $tcartes[3]="TPaR";
                        $tcartes[4]="TR";
                        $tcartes[5]="CAPA";
						
						$tscartes[0]="TSRPG";
                        $tscartes[1]="TSCNCS";
                        $tscartes[2]="TSPaNu";
                        $tscartes[3]="TSPaR";
                        $tscartes[4]="TSCAPA";
						
						
						for($i = 0; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCS") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } else  {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                    
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                        }
						
						for($j = 0; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } else {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
							
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                               $map_compte->save($compte);   
                            } 
                        }
					}
					
					if($code_fkps != "") {
					    $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
						if ($sms_fkps == NULL) {
                           $db->rollback();
                           $this->view->message = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                           $this->view->nom_membre = $_POST["nom_membre"];
                           $this->view->prenom_membre = $_POST["prenom_membre"];
                           $this->view->sexe = $_POST["sexe_membre"];
                           $this->view->sitfam = $_POST["sitfam_membre"];
                           $this->view->datnais = $_POST["date_nais_membre"];
                           $this->view->nation = $_POST["nationalite_membre"];
                           $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                           $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                           $this->view->formation = $_POST["formation"];
                           $this->view->profession = $_POST["profession_membre"];
                           $this->view->religion = $_POST["religion_membre"];
                           $this->view->pere = $_POST["pere_membre"];
                           $this->view->mere = $_POST["mere_membre"];
                           $this->view->quartier_membre = $_POST["quartier_membre"];
                           $this->view->ville_membre = $_POST["ville_membre"];
                           $this->view->bp = $_POST["bp_membre"];
                           $this->view->tel = $_POST["tel_membre"];
                           $this->view->email = $_POST["email_membre"];
                           $this->view->portable = $_POST["portable_membre"];
                           return;
                        }
						
						if($sms_fkps->getMotif() != 'FKPS') {
                          $db->rollBack();
                          $this->view->message = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                          $this->view->nom_membre = $_POST["nom_membre"];
                          $this->view->prenom_membre = $_POST["prenom_membre"];
                          $this->view->sexe = $_POST["sexe_membre"];
                          $this->view->sitfam = $_POST["sitfam_membre"];
                          $this->view->datnais = $_POST["date_nais_membre"];
                          $this->view->nation = $_POST["nationalite_membre"];
                          $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                          $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                          $this->view->formation = $_POST["formation"];
                          $this->view->profession = $_POST["profession_membre"];
                          $this->view->religion = $_POST["religion_membre"];
                          $this->view->pere = $_POST["pere_membre"];
                          $this->view->mere = $_POST["mere_membre"];
                          $this->view->quartier_membre = $_POST["quartier_membre"];
                          $this->view->ville_membre = $_POST["ville_membre"];
                          $this->view->bp = $_POST["bp_membre"];
                          $this->view->tel = $_POST["tel_membre"];
                          $this->view->email = $_POST["email_membre"];
                          $this->view->portable = $_POST["portable_membre"];
                          return;    
                        }
						
						
						$carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($mont_cps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL)
							  ->setOrigine_fkps('A');
                        $t_carte->insert($carte->toArray()); 
                        $compteurcps = $mapper_op->findConuter() + 1; 
                        Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                        $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                 ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
					
					}
					$compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$_POST["codesecret"]); 
                    $db->commit();
					$sessionmcnp->errorlogin = "Ré-activation du compte marchand membre personne physique bien effectuée ...";
					$this->_redirect('/index/ancienmppmcnp');
                } catch (Exception $exc)  {
                    $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    $db->rollback();
                    $this->view->nom_membre = $_POST["nom_membre"];
                    $this->view->prenom_membre = $_POST["prenom_membre"];
                    $this->view->sexe = $_POST["sexe_membre"];
                    $this->view->sitfam = $_POST["sitfam_membre"];
                    $this->view->datnais = $_POST["date_nais_membre"];
                    $this->view->nation = $_POST["nationalite_membre"];
                    $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                    $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                    $this->view->formation = $_POST["formation"];
                    $this->view->profession = $_POST["profession_membre"];
                    $this->view->religion = $_POST["religion_membre"];
                    $this->view->pere = $_POST["pere_membre"];
                    $this->view->mere = $_POST["mere_membre"];
                    $this->view->quartier_membre = $_POST["quartier_membre"];
                    $this->view->ville_membre = $_POST["ville_membre"];
                    $this->view->bp = $_POST["bp_membre"];
                    $this->view->tel = $_POST["tel_membre"];
                    $this->view->email = $_POST["email_membre"];
                    $this->view->portable = $_POST["portable_membre"];
                    return;
                }
			}   
		} else {  
		    $this->view->message = "Champs * obligatoire ...";
			$this->view->nom_membre = $_POST["nom_membre"];
            $this->view->prenom_membre = $_POST["prenom_membre"];
            $this->view->sexe = $_POST["sexe_membre"];
            $this->view->sitfam = $_POST["sitfam_membre"];
            $this->view->datnais = $_POST["date_nais_membre"];
            $this->view->nation = $_POST["nationalite_membre"];
            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
            $this->view->formation = $_POST["formation"];
            $this->view->profession = $_POST["profession_membre"];
            $this->view->religion = $_POST["religion_membre"];
            $this->view->pere = $_POST["pere_membre"];
            $this->view->mere = $_POST["mere_membre"];
            $this->view->quartier_membre = $_POST["quartier_membre"];
            $this->view->ville_membre = $_POST["ville_membre"];
            $this->view->bp = $_POST["bp_membre"];
            $this->view->tel = $_POST["tel_membre"];
            $this->view->email = $_POST["email_membre"];
            $this->view->portable = $_POST["portable_membre"];    		   
		}
		
		} else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_nais_membre as datenaismembre"))
                   ->where('ancien_code_membre LIKE ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');       
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
      
            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->nom_membre = $trouvmembre->nom_membre;
            $this->view->prenom_membre = $trouvmembre->prenom_membre;
            $this->view->sexe = $trouvmembre->sexe_membre;
            $this->view->profession = $trouvmembre->profession_membre;
            $this->view->tel = $trouvmembre->tel_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre; 
            $this->view->pere = $trouvmembre->pere_membre;
            $this->view->mere = $trouvmembre->mere_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->bp = $trouvmembre->bp_membre;
            $this->view->nbre_enf = $trouvmembre->nbr_enf_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->portable = $trouvmembre->portable_membre;
            $this->view->formation = $trouvmembre->formation;
            $this->view->lieu_nais = $trouvmembre->lieu_nais_membre;
            $this->view->datnais = $trouvmembre->datenaismembre;
            $this->view->sitfam = $trouvmembre->sitfam_membre;
            $this->view->nation = $trouvmembre->id_pays;
            $this->view->religion = $trouvmembre->id_religion_membre;

        }
    
    }


    public function ancienppmcnpeditoldAction() {
        /* page index/ancienppmcnpedit - Enrolement ancienne personne physique MCNP */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    

        if(isset($_POST['ok']) && $_POST['ok']=="ok"){
            if (isset($_POST['nom_membre']) && $_POST['nom_membre']!="" && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!="" && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!="" && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!="" && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!="" && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="" && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!="" && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!="" && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" && isset($_POST['profession_membre']) && $_POST['profession_membre']!="" && isset($_POST['religion_membre']) && $_POST['religion_membre']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
            $code_agence = $_POST['code_agence'];
            $code_zone = substr($_POST['code_agence'], 0, 3);
            $id_pays = $_POST['id_pays'];
            $table = new Application_Model_DbTable_EuActeur();
            $selection = $table->select();
            $selection->where('code_membre LIKE ?',$code_agence.'%');
            $selection->where('type_acteur LIKE ?','gac_surveillance');
            $resultat = $table->fetchAll($selection);
            $trouvacteursur = $resultat->current();
            $code_acteur = $trouvacteursur->code_acteur;


         
            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $date_idd = clone $date_id;
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
                //insertion dans la table membre des information du nouveau membre
                $membre = new Application_Model_EuMembre();
                $mapper = new Application_Model_EuMembreMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();
                $tcartes = array();
                $tscartes = array();
                $code = $mapper->getLastCodeMembreByAgence($code_agence);
                if ($code == NULL) {
                    $code = $code_agence . '0000001' . 'P';
                } 
                else {
                    $num_ordre = substr($code, 12, 7);
                    $num_ordre++;
                    $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                    $code = $code_agence . $num_ordre_bis . 'P';
                }
                      $date_nais = new Zend_Date($_POST["date_nais_membre"]);
                      if ($date_nais >= $date_idd) {
                         $this->view->message = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                         $db->rollback();
                         if ($code_caps != '') {
                            $this->view->code = $code_caps;
                         }
                         $this->view->nom_membre = $_POST["nom_membre"];
                         $this->view->prenom_membre = $_POST["prenom_membre"];
                         $this->view->sexe = $_POST["sexe_membre"];
                         $this->view->sitfam = $_POST["sitfam_membre"];
                         $this->view->datnais = $_POST["date_nais_membre"];
                         $this->view->nation = $_POST["nationalite_membre"];
                         $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                         $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                         $this->view->formation = $_POST["formation"];
                         $this->view->profession = $_POST["profession_membre"];
                         $this->view->religion = $_POST["religion_membre"];
                         $this->view->pere = $_POST["pere_membre"];
                         $this->view->mere = $_POST["mere_membre"];
                         $this->view->quartier_membre = $_POST["quartier_membre"];
                         $this->view->ville_membre = $_POST["ville_membre"];
                         $this->view->bp = $_POST["bp_membre"];
                         $this->view->tel = $_POST["tel_membre"];
                         $this->view->email = $_POST["email_membre"];
                         $this->view->portable = $_POST["portable_membre"];
                         return;
                    }
                    $membre->setCode_membre($code)
                           ->setNom_membre($_POST["nom_membre"])
                           ->setPrenom_membre($_POST["prenom_membre"])
                           ->setSexe_membre($_POST["sexe_membre"])
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($_POST["nationalite_membre"])
                           ->setLieu_nais_membre($_POST["lieu_nais_membre"])
                           ->setPere_membre($_POST["pere_membre"])
                           ->setMere_membre($_POST["mere_membre"])
                           ->setSitfam_membre($_POST["sitfam_membre"])
                           ->setNbr_enf_membre($_POST["nbr_enf_membre"])
                           ->setProfession_membre($_POST["profession_membre"])
                           ->setFormation($_POST["formation"])
                           ->setId_religion_membre($_POST["religion_membre"])
                           ->setQuartier_membre($_POST["quartier_membre"])
                           ->setVille_membre($_POST["ville_membre"])
                           ->setBp_membre($_POST["bp_membre"])
                           ->setTel_membre($_POST["tel_membre"])
                           ->setEmail_membre($_POST["email_membre"])
                           ->setPortable_membre($_POST["portable_membre"])
                           ->setId_utilisateur(NULL)
                           ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                           ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                           ->setCode_agence($code_agence)
               ->setCodesecret(md5($_POST["codesecret"]))
                 ->setAuto_enroler('O')
               ->setEtat_membre('A');
                     $mapper->save($membre);
                        
            
                            // Mise à jour de la table eu_ancien_membre
                              $p_mapper = new Application_Model_EuAncienMembreMapper();
                              $p = new Application_Model_EuAncienMembre();
                              $rep = $p_mapper->find($_POST["ancien_code_membre"],$p);
                              if ($rep == true) {      
                                 $p->setEtat_contrat(1)
                     ->setCode_membre($code);
                                 $p_mapper->update($p);      
                              }
               
               
               
          for($i = 0; $i < count($_POST['code_banque']); $i++){
                    $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                    $cb = new Application_Model_EuCompteBancaire();
              $cb_compteur = $cb_mapper->findConuter() + 1;         
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre($code)
                   ->setCode_membre_morale(NULL)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i])
                 ;
                            $cb_mapper->save($cb);
                    }
            
                        //Util_Utils::createCompte('NB-TPAGCRPG-' . $code, 'TPAGCRPG', 'TPAGCRPG', 0, $code, 'NB', $date_id, 0);
            // Mise à jour de la table eu_utilisateur
            
            $userin = new Application_Model_EuUtilisateur();
                        $mapper = new Application_Model_EuUtilisateurMapper();
                        $id_user = $mapper->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(NULL)
                               ->setPrenom_utilisateur($_POST["prenom_membre"])
                               ->setNom_utilisateur($_POST["nom_membre"])
                               ->setLogin($code)
                               ->setPwd(md5($_POST["codesecret"]))
                               ->setDescription(NULL)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
                     ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(NULL)
                               ->setCode_zone($code_zone)
                                 //->setCode_gac_filiere(NULL)
                           ->setId_pays($id_pays)       
                               ->setCode_acteur($code_acteur)
                     ->setCode_membre($code);    
                          $mapper->save($userin);
          
        
                  // Mise à jour de la table eu_contrat
                          $contrat = new Application_Model_EuContrat();
                      $mapper_contrat = new Application_Model_EuContratMapper();
                      $id_contrat = $mapper->findConuter() + 1;
                  $contrat->setId_contrat($id_contrat);
                          $contrat->setCode_membre($code);
                          $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                          $contrat->setNature_contrat('numerique');
                          $contrat->setId_type_contrat(NULL);
                          $contrat->setId_type_creneau(NULL);
                          $contrat->setId_type_acteur(NULL);
                          $contrat->setId_pays(NULL);
                          $contrat->setId_utilisateur(NULL);
                          $contrat->setFiliere(NULL);
                          $mapper_contrat->save($contrat);
              
              
            $acteur = $code_acteur;
            $t_acteur = new Application_Model_DbTable_EuActeur();
                    $c_acteur = new Application_Model_EuActeur();
                    $count = $c_acteur->findConuter() + 1;
          $table = new Application_Model_DbTable_EuActeur();
          
          if(isset($_POST["actcmfh"])) { 
                       $select = $table->select();
             $select->where('code_acteur LIKE ?', $acteur);
             $resultSet = $table->fetchAll($select);
             $ligneacteur = $resultSet->current();
                       $c_acteur->setId_acteur($count);
                       $c_acteur->setCode_acteur(NULL);
                       $c_acteur->setCode_membre($code);
                       $c_acteur->setId_utilisateur(NULL);
                       $c_acteur->setDate_creation($date_idd->toString('yyyy-MM-dd'));
               $c_acteur->setCode_activite(NULL);
               $c_acteur->setCode_source_create($ligneacteur->code_source_create);
               $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
             $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
             $c_acteur->setId_pays($ligneacteur->id_pays);
             $c_acteur->setId_region($ligneacteur->id_region);
             $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
             $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                
                       $c_acteur->setType_acteur('CMFH');
               $c_acteur->setCode_gac_chaine($acteur);         
                       $t_acteur->insert($c_acteur->toArray());
             
          } else if(isset($_POST["actenro"])) { 
              $select = $table->select();
              $select->where('code_acteur LIKE ?', $acteur);
              $resultSet = $table->fetchAll($select);
              $ligneacteur = $resultSet->current();
                        $c_acteur->setId_acteur($count);
                        $c_acteur->setCode_acteur(NULL);
                        $c_acteur->setCode_membre($code);
                        $c_acteur->setId_utilisateur(NULL);
                        $c_acteur->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                $c_acteur->setCode_activite(NULL);
                $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
              $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
              $c_acteur->setId_pays($ligneacteur->id_pays);
              $c_acteur->setId_region($ligneacteur->id_region);
              $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
              $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
              $c_acteur->setType_acteur('DSMS');
                $c_acteur->setCode_gac_chaine($acteur);         

                        $t_acteur->insert($c_acteur->toArray());
          }
              
            $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
            $tafl = new Application_Model_DbTable_EuAncienFl();
                        $afl = new Application_Model_EuAncienFl();
                        $code_fl = 'FL-'.$_POST["ancien_code_membre"];
                        $result = $tafl->find($code_fl);
              
              //if (count($result) > 0) {
                 $code_afl = 'FL-'.$code;
               $mont_fl = Util_Utils::getParametre('FL','valeur'); 
               $fl->setCode_fl($code_afl)
                                ->setCode_membre($code)
                  ->setCode_membre_morale(NULL)
                                ->setMont_fl($mont_fl)
                                ->setDate_fl($date_id->toString('yyyy-MM-dd'))
                                ->setHeure_fl($date_id->toString('HH:mm:ss'))
                                ->setId_utilisateur(NULL)
                                ->setCreditcode(NULL);
                             $tfl->insert($fl->toArray());
                
               $tcartes[0]="TPAGCRPG";
                 $tcartes[1]="TCNCS";
               $tcartes[2]="TPaNu";
               $tcartes[3]="TPaR";
                 $tcartes[4]="TR";
               $tcartes[5]="CAPA";
                 $tcartes[6]="TRE";
               
               $tscartes[0]="TSRPG";
               $tscartes[1]="TSCNCS";
               $tscartes[2]="TSPaNu";
               $tscartes[3]="TSPaR";
               $tscartes[4]="TSCAPA";
			   $tscartes[5]="TSRE";
               
               for($i = 0; $i < count($tcartes); $i++) {
                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                  $type_carte = 'NR';
                  $res = $map_compte->find($code_compte,$compte);
                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                    $type_carte = 'NN';
                  $res = $map_compte->find($code_compte,$compte);
                } else  {
                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                    $type_carte = 'NB';
                  $res = $map_compte->find($code_compte,$compte);
                  }
                    
                if(!$res) {
                                  $compte->setCode_cat($tcartes[$i])
                                         ->setCode_compte($code_compte)
                                         ->setCode_membre($code)
                     ->setCode_membre_morale(NULL)
                                         ->setCode_type_compte($type_carte)
                                         ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte($tcartes[$i])
                                         ->setSolde(0);
                  $map_compte->save($compte); 
                }
                  
                            }
              
              
              for($j = 0; $j < count($tscartes); $j++) {
              
                  if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                    $type_carte = 'NR';
                    $res = $map_compte->find($code_comptets,$compte);
                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSRE") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                  $type_carte = 'NN';
                  $res = $map_compte->find($code_comptets,$compte);
                } else {
                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                  $type_carte = 'NB';
                    $res = $map_compte->find($code_comptets,$compte);
                }
                    
                if(!$res) {
                                   $compte->setCode_cat($tscartes[$j])
                                          ->setCode_compte($code_comptets)
                                          ->setCode_membre($code)
                      ->setCode_membre_morale(NULL)
                                          ->setCode_type_compte($type_carte)
                                          ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                          ->setDesactiver(0)
                                          ->setLib_compte($tscartes[$j])
                                          ->setSolde(0);
                   $map_compte->save($compte);
                  
                  }
              
              } 
               
        
                $compteur=Util_Utils::findConuter() + 1;
                          Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$_POST["codesecret"]); 
                          $db->commit();
                          //Redirection sur le formulaire du contrat
                          //return $this->_helper->redirector('newpp', 'eu-contrat', NULL, array('controller' => 'eu-contrat', 'action' => 'newpp', 'membre' => $code, 'type' => 'P'));
              //return $this->_helper->redirector('index');      
         } catch (Exception $exc) {
                   $db->rollback();
                   $this->view->nom = $_POST["nom_membre"];
                   $this->view->prenom = $_POST["prenom_membre"];
                   $this->view->sexe = $_POST["sexe_membre"];
                   $this->view->sitmatr = $_POST["sitfam_membre"];
                   $this->view->datenais = $_POST["date_nais_membre"];
                   $this->view->nation = $_POST["nationalite_membre"];
                   $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                   $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                   $this->view->formation = $_POST["formation"];
                   $this->view->prof = $_POST["profession_membre"];
                   $this->view->religion = $_POST["religion_membre"];
                   $this->view->pere = $_POST["pere_membre"];
                   $this->view->mere = $_POST["mere_membre"];

                   $this->view->quartier_membre = $_POST["quartier_membre"];
                   $this->view->ville_membre = $_POST["ville_membre"];
                   $this->view->bp = $_POST["bp_membre"];
                   $this->view->tel = $_POST["tel_membre"];
                   $this->view->email = $_POST["email_membre"];
                   $this->view->portable = $_POST["portable_membre"];
                   $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
           }
          

/*          */          

      $sessionmcnp->errorlogin = "Ré-activation du compte marchant membre personne physique bien effectuée ...";
    $this->_redirect('/index/ancienppmcnp');
    //$this->_redirect('/');
    } else {  $this->view->message = "Champs * obligatoire ...";  } 
    } else {
      
            $id = (string)$this->_request->getParam('id');
      
        $tabela = new Application_Model_DbTable_EuAncienMembre();
       $select = $tabela->select();
           $select->from($tabela,array('eu_ancien_membre.*',"date_nais_membre as datenaismembre"))
                  ->where('ancien_code_membre LIKE ?', '%'.$id.'%')
         ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');       
    $memb = $tabela->fetchAll($select);
    $trouvmembre = $memb->current();
      
$this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
$this->view->nom_membre = $trouvmembre->nom_membre;
$this->view->prenom_membre = $trouvmembre->prenom_membre;
$this->view->sexe = $trouvmembre->sexe_membre;
$this->view->profession = $trouvmembre->profession_membre;
$this->view->tel = $trouvmembre->tel_membre;
$this->view->ville_membre = $trouvmembre->ville_membre; 
$this->view->pere = $trouvmembre->pere_membre;
$this->view->mere = $trouvmembre->mere_membre;
$this->view->quartier_membre = $trouvmembre->quartier_membre;
$this->view->bp = $trouvmembre->bp_membre;
$this->view->nbre_enf = $trouvmembre->nbr_enf_membre;
$this->view->email = $trouvmembre->email_membre;
$this->view->portable = $trouvmembre->portable_membre;
$this->view->formation = $trouvmembre->formation;
$this->view->lieu_nais = $trouvmembre->lieu_nais_membre;
$this->view->datnais = $trouvmembre->datenaismembre;
$this->view->sitfam = $trouvmembre->sitfam_membre;
$this->view->nation = $trouvmembre->id_pays;
$this->view->religion = $trouvmembre->id_religion_membre;

      }
    
    }


	
	
	
	public function ancienmpmmcnpAction() {
        /* page index/ancienpmmcnp - Retrouve ancienne personne morale MCNP */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
        if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                   ->where('ancien_code_membre LIKE ?', '%'.$_POST['code_membre'].'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');        
            $memb = $tabela->fetchAll($select);
            if(count($memb) > 0) {
			    $table  = new Application_Model_DbTable_EuSouscription();
				$selection = $table->select();
                $selection->from($table)
                          ->where('souscription_ancien_membre like ?', '%'.$_POST['code_membre'].'%')
						  ->where('souscription_programme like ?','KACM');
			    $sous = $table->fetchAll($selection);
                if(count($sous) > 0) {
                   $trouvmembre = $memb->current();      
                   $this->_redirect('/index/ancienpmmcnpedit/id/'.$trouvmembre->ancien_code_membre);
				} else {
                   $this->view->message = "Vous devez faire la demande de quittance de réactivation ...";
                }				
            } else {  $this->view->message = "Pas de resultat ...";}
        } else {  $this->view->message = "Champs * obligatoire ...";}
       
        } 
    }
	

	
	public function ancienmppmcnpAction() {
	    /* page index/ancienppmcnp - Retrouve ancienne personne physique MCNP */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		
		
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_EuAncienMembre();
                $select = $tabela->select();
                $select->where('ancien_code_membre like ?',$_POST['code_membre'])
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');       
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
				    $trouvmembre = $memb->current();
				    $table  = new Application_Model_DbTable_EuSouscription();
				    $selection = $table->select();
                    $selection->from($table)
                              ->where('souscription_ancien_membre like ?', '%'.$_POST['code_membre'].'%')
							  ->where('souscription_programme like ?','KACM');
					$sous = $table->fetchAll($selection);
                    if(count($sous) > 0) {      
                       $this->_redirect('/index/ancienppmcnpedit/id/'.$trouvmembre->ancien_code_membre);
					} else {
                       $this->view->message = "Vous devez faire la demande de quittance de réactivation ...";
                    }					
                } else {  $this->view->message = "Pas de resultat ...";}
            } else {  $this->view->message = "Champs * obligatoire ...";}
        }
	
	
	
	
	}
	
	


    public function ancienpmAction() {
        /* page index/ancienpm - Retrouve ancienne personne morale GIE/ReDeMaRe */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Morale();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentm like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                       ->order('nomm ASC');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $souscription = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->numidentm);
                    $sous = $souscription->fetchAll($selection);
                    if(count($sous) == 0) {     
                      $this->_redirect('/index/reactivationsouscriptiongiepm/id/'.$trouvmembre->numidentm);
                    } else {  
                      $this->view->message = "Quittance de Réactivation déjà effectuée ...";
                    }                    
                } else {  $this->view->message = "Votre numéro identité est introuvable ou est déjà réactivé ... ";}//Déjà Activé
            } else {  $this->view->message = "Champs * obligatoire ...";}
       
        } 
    }


    
    public function ancienpmeditAction() {
        /* page index/ancienpmedit - Mise sur chaine ancienne personne morale GIE/ReDeMaRe */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		if(isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_fs']) && $_POST['code_fs']!="" && isset($_POST['code_fl']) && $_POST['code_fl']!="" && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="" && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="" && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!="" && isset($_POST['code_statut']) && $_POST['code_statut']!="" && isset($_POST['code_rep']) && $_POST['code_rep']!="" && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
			    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                if($smsmoneyFS = $smsmoneyM->findByCreditCode9($_POST['code_fs'], "FS") && $smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL") 
				    && (($_POST['code_fkps']=="") || (isset($_POST['code_fkps']) && $_POST['code_fkps']!="" && $smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS")))) {

                    $code_agence = $_POST['code_agence'];
                    $code_zone = substr($_POST['code_agence'],0,3);
                    $id_pays = $_POST['id_pays'];
                    $groupe = null;

                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;
                    $acteur =  $code_acteur;
					
					$fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $fcps = Util_Utils::getParametre('FKPS','valeur');
					
					$date_id     =  new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd    =  clone $date_id;
                    $code_fs     =  $_POST["code_fs"];
                    $code_fl     =  $_POST["code_fl"];
                    $code_fkps   =  $_POST["code_fkps"];
					
					$id_type_creneau =  "";
					$id_type_acteur  =  "";
					$id_filiere      =  "";
					
					$membre = new Application_Model_EuMembreMorale();
                    $mapper = new Application_Model_EuMembreMoraleMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();
         
                    $mapper_op = new Application_Model_EuOperationMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $tcartes = array();
                    $tscartes = array();
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					
					try {
                        if($code_fs !="") {
					        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
							$code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'M';
                            } else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'M';
                            }
							$compteur = $mapper_op->findConuter() + 1;
							$membre->setId_filiere(null);
                            $membre->setCode_membre_morale($code);
                            $membre->setCode_type_acteur($_POST["code_type_acteur"]);
                            $membre->setCode_statut($_POST["code_statut"]);
                            $membre->setRaison_sociale(addslashes (trim ($_POST["raison_sociale"])));
							
							$membre->setId_pays($_POST["id_pays"]);
                            $membre->setNum_registre_membre($_POST["num_registre_membre"]);
                            $membre->setDomaine_activite(addslashes (trim ($_POST["domaine_activite"])));
                            $membre->setSite_web(addslashes (trim ($_POST["site_web"])));
                            $membre->setQuartier_membre(addslashes (trim ($_POST["quartier_membre"])));
                            $membre->setVille_membre(addslashes (trim ($_POST["ville_membre"])));
                            $membre->setBp_membre($_POST["bp_membre"]);
                            $membre->setTel_membre($_POST["tel_membre"]);
                            $membre->setEmail_membre($_POST["email_membre"]);
                            $membre->setPortable_membre($_POST["portable_membre"]);
                            $membre->setId_utilisateur(NULL);
                            $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                            $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                            $membre->setCode_agence($code_agence);
                            $membre->setCodesecret(md5($_POST["codesecret"]));
                            $membre->setAuto_enroler('O');
                            $membre->setEtat_membre('A');
                            $mapper->save($membre);
							
							
							$m_mapper = new Application_Model_MoraleMapper();
                            $m = new Application_Model_Morale();
                            $rep = $m_mapper->find($_POST["numidentm"],$m);
                            if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                            }
							
							Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
               
					        //insertion dans la table eu_representation
                            $rep_mapper = new Application_Model_EuRepresentationMapper();
                            $rep = new Application_Model_EuRepresentation();
                            $rep->setCode_membre_morale($code)
                                ->setCode_membre($_POST['code_rep'])
                                ->setTitre("Representant")
                                ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                                ->setId_utilisateur(NULL)
                                ->setEtat('inside');
                            $rep_mapper->save($rep);
							
							$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
							for($i = 0; $i < count($_POST['code_banque']); $i++) {
                                $cb_compteur = $cb_mapper->findConuter() + 1;         
                                $cb->setCode_banque($_POST['code_banque'][$i])
                                  ->setId_compte($cb_compteur)
                                  ->setCode_membre(NULL)
                                  ->setCode_membre_morale($code)
                                  ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                $cb_mapper->save($cb);
                            }
							
							$t_acteur = new Application_Model_DbTable_EuActeur();
                            $c_acteur = new Application_Model_EuActeur();
                            $table = new Application_Model_DbTable_EuActeur();
                            $select = $table->select();
                            $select->where('code_acteur like ?', $acteur);
                            $resultSet = $table->fetchAll($select);
                            $ligneacteur = $resultSet->current();
                            $count = $c_acteur->findConuter() + 1;
							
							$c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division(NULL)
                                     ->setCode_membre($code)
                                     ->setId_utilisateur($utilisateur)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));   
                            $c_acteur->setCode_activite(NULL);
                            $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                            $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                            $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                            $c_acteur->setId_pays($ligneacteur->id_pays);
                            $c_acteur->setId_region($ligneacteur->id_region);
                            $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                            $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                               
                            $c_acteur->setType_acteur('DSMS');
                    
                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());
							
							// table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
                            $membre_mapper = new Application_Model_EuMembreMapper();
                            $membrein = new Application_Model_EuMembre();         
                            $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                            $id_user = $user_mapper->findConuter() + 1;
							
							$userin->setId_utilisateur($id_user);
                            $userin->setId_utilisateur_parent($utilisateur); 
                            $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                            $userin->setNom_utilisateur($membrein->getNom_membre());
                            $userin->setLogin($code);
                            $userin->setPwd(md5($_POST["codesecret"]));
                            $userin->setDescription(NULL);
                            $userin->setUlock(0);
                            $userin->setCh_pwd_flog(0);
                        
                            $code_type_acteur = $_POST["code_type_acteur"];
            
                            $userin->setCode_groupe('personne_morale');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('personne_morale');
                        
                            $userin->setConnecte(0);
                            $userin->setCode_agence($code_agence);
                            $userin->setCode_secteur(NULL);
                            $userin->setCode_zone($code_zone);
                            $userin->setId_filiere($id_filiere);
                    
                            $userin->setCode_acteur($acteur);
          
                            $userin->setCode_membre($code);
                            $userin->setId_pays($id_pays);        
                            $user_mapper->save($userin);
							
							
							// Mise à jour de la table eu_contrat
                            $contrat = new Application_Model_EuContrat();
                            $mapper_contrat = new Application_Model_EuContratMapper();
                            $id_contrat = $mapper_contrat->findConuter() + 1;
          
                            $contrat->setId_contrat($id_contrat);
                            $contrat->setCode_membre($code);
                            $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                            $contrat->setNature_contrat(NULL);
                            $contrat->setId_type_contrat(7);
                            $contrat->setId_type_creneau($id_type_creneau);
                            $contrat->setId_type_acteur($id_type_acteur);

                            $contrat->setId_pays($_POST['id_pays']);
                            $contrat->setId_utilisateur(NULL);
                            $contrat->setFiliere(''); 
                            $mapper_contrat->save($contrat);
            
                            $tab_fs = new Application_Model_DbTable_EuFs();
                            $fs_model = new Application_Model_EuFs();
                            $fs_model->setCode_membre_morale($code)
                                     ->setCode_membre(NULL)
                                     ->setCode_fs('FS-' . $code)
                                     ->setCreditcode($sms_fs->getCreditCode())
                                     ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                     ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                     ->setId_utilisateur($utilisateur)
                                     ->setMont_fs($fs)
									 ->setOrigine_fs('A');
                            $tab_fs->insert($fs_model->toArray());
            
                            $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                                   ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fs);
					
                		}

                        if($code_fl !="") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;
             
                            $fl->setCode_fl($code_fl)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode())
							   ->setOrigine_fl('A');
                            $tfl->insert($fl->toArray());
                        
                            //Mise e jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            //$tcartes[0]="TPAGCP";
                            $tcartes[1]="TCNCSEI";
                            $tcartes[2]="TPAGCI";
                            $tcartes[3]="TIR";
                            $tcartes[4]="TR";
                            $tcartes[5]="TPaNu";
                            $tcartes[6]="TPaR";
                            $tcartes[7]="TFS";
                            $tcartes[8]="TPN";
                            $tcartes[9]="TIB";
                            $tcartes[10]="TPaNu";
                            $tcartes[11]="TIN";
                            $tcartes[12]="CAPA";
                            $tcartes[13]="TMARGE";
                            //$tcartes[14]="TRE";
            
                            for($i = 1; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                   $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NR';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                   $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NN';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                   $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NB';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TIN") {
                                   $tcartes[$i] = "TI"; 
                                   $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NN';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TIR") {
                                   $tcartes[$i] = "TI"; 
                                   $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NR';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TIB") {
                                   $tcartes[$i] = "TI";
                                   $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NB';
                                   $res = $map_compte->find($code_compte,$compte);
                                }
                    
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                          ->setCode_compte($code_compte)
                                          ->setCode_membre(NULL)
                                          ->setCode_membre_morale($code)
                                          ->setCode_type_compte($type_carte)
                                          ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                          ->setDesactiver(0)
                                          ->setLib_compte($tcartes[$i])
                                         ->setSolde(0);
                                $map_compte->save($compte); 
                            }
                  
                        }
              
                        //$tscartes[0]="TSGCP";
                        $tscartes[1]="TSCNCSEI";
                        $tscartes[2]="TSGCI";
                        $tscartes[3]="TSCAPA";
                        $tscartes[4]="TSPaNu";
                        $tscartes[5]="TSPaR";
                        $tscartes[6]="TSFS";
                        $tscartes[7]="TSPN";
                        $tscartes[8]="TSIN";
                        $tscartes[9]="TSIB";
                        $tscartes[10]="TSIR";
                        $tscartes[11]="TSMARGE";
			            //$tscartes[12]="TSRE";
              
                        for($j = 1; $j < count($tscartes); $j++) {  
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR"
                                || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                  
                        } 
                    }
					
					
					if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[2])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[2]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL)
							  ->setOrigine_fkps('A');
                        $t_carte->insert($carte->toArray());
                             
                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps); 
                    }
					$compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP ! Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);
                    $db->commit();
					$sessionmcnp->errorlogin = "Ré-activation du compte marchand membre personne morale bien effectuée ... ...";
                    $this->_redirect('/index/ancienmpm');
					
				    }  catch (Exception $exc) { 
                        $db->rollback();
                        $this->view->code_type_acteur = $_POST["code_type_acteur"];
                        $this->view->code_statut = $_POST["code_statut"];
                        $this->view->raison_sociale = $_POST["raison_sociale"];
                        $this->view->domaine_activite = $_POST["domaine_activite"];
                        $this->view->site_web = $_POST["site_web"];
                        $this->view->quartier_membre = $_POST["quartier_membre"];
                        $this->view->ville_membre = $_POST["ville_membre"];
                        $this->view->bp = $_POST["bp_membre"];
                        $this->view->tel = $_POST["tel_membre"];
                        $this->view->email = $_POST["email_membre"];
                        $this->view->id_pays = $_POST["id_pays"];
                        $this->view->portable = $_POST["portable_membre"];
                        $this->view->registre = $_POST["num_registre_membre"];
                        $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        return;
                    }
				}
			
            } else {
			    $this->view->message = "Champs * obligatoire ...";
				$this->view->code_type_acteur = $_POST["code_type_acteur"];
                $this->view->code_statut = $_POST["code_statut"];
                $this->view->raison_sociale = $_POST["raison_sociale"];
                $this->view->domaine_activite = $_POST["domaine_activite"];
                $this->view->site_web = $_POST["site_web"];
                $this->view->quartier_membre = $_POST["quartier_membre"];
                $this->view->ville_membre = $_POST["ville_membre"];
                $this->view->bp = $_POST["bp_membre"];
                $this->view->tel = $_POST["tel_membre"];
                $this->view->email = $_POST["email_membre"];
                $this->view->id_pays = $_POST["id_pays"];
                $this->view->portable = $_POST["portable_membre"];
                $this->view->registre = $_POST["num_registre_membre"];
			}
				
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Morale();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentm like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                   ->order('nomm ASC');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->numidentm = $trouvmembre->numidentm;
            $this->view->raison = $trouvmembre->nomm;
            $this->view->code_rep = $trouvmembre->representant;
            $this->view->quartier_membre = $trouvmembre->qart;
            $this->view->ville_membre = $trouvmembre->ville;
            $this->view->bp = $trouvmembre->bp;
            $this->view->tel = $trouvmembre->tel;
            $this->view->portable = $trouvmembre->portable;
            $this->view->email = $trouvmembre->email;
            $this->view->site_web = $trouvmembre->site;   
        }
    
    }
  
  


    public function ancienpmeditoldAction() {
        /* page index/ancienpmedit - Mise sur chaine ancienne personne morale GIE/ReDeMaRe */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
        if(isset($_POST['ok']) && $_POST['ok']=="ok"){
            if (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="" && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="" && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!="" && isset($_POST['code_statut']) && $_POST['code_statut']!="" && isset($_POST['code_rep']) && $_POST['code_rep']!="" && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {

                $offres_mapper = new Application_Model_EuAppeloffresMapper();
                $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                $agrement_mapper = new Application_Model_EuAgrementMapper();
                $licence_mapper = new Application_Model_EuLicenceMapper();

                if($trouveagrementfiliere = $agrement_mapper->findagrementfiliere($_POST["numero_agrement_filiere"]) && $trouveagrementacnev = $agrement_mapper->findagrementacnev($_POST["numero_agrement_acnev"]) && $trouveagrementtechno = $agrement_mapper->findagrementtechno($_POST["numero_agrement_technopole"])){
                    $utilisateur = NULL;
                    //$groupe = $user->code_groupe;
                    $code_agence = $_POST['code_agence'];
                    $code_zone = substr($_POST['code_agence'], 0, 3);
                    $id_pays = $_POST['id_pays'];
                    $groupe = NULL;
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre LIKE ?',$code_agence.'%');
                    $selection->where('type_acteur LIKE ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;
                    $acteur      =  $code_acteur;
           
                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $fcps = Util_Utils::getParametre('FCPS','valeur');
           
                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    //$code_fs = $_POST["code_fs"];
                    //$code_fl = $_POST["code_fl"];
                    //$code_fkps = $_POST["code_fkps"];
         
           
                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
         
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                        $agrement_mapper = new Application_Model_EuAgrementMapper();
                        $agrement        = new Application_Model_EuAgrement();
           
                        $agrement_filiere  =  $_POST["numero_agrement_filiere"];
                        $agrement_acnev    =  $_POST["numero_agrement_acnev"];
                        $agrement_technopole =  $_POST["numero_agrement_technopole"];
           
                        //insertion dans la table membremorale des information du nouveau membre
                        $membre = new Application_Model_EuMembreMorale();
                        $mapper = new Application_Model_EuMembreMoraleMapper();
                        $membre1 = new Application_Model_EuMembreMorale();
                        $mapper1 = new Application_Model_EuMembreMoraleMapper();
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }
           
                        //insertion dans la table eu_operation
                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteur = $mapper_op->findConuter() + 1;
            
                        
                        $trouveagrementfiliere = $agrement_mapper->findagrementfiliere($agrement_filiere);
                        $trouveagrementacnev = $agrement_mapper->findagrementacnev($agrement_acnev);
                        $trouveagrementtechno = $agrement_mapper->findagrementtechno($agrement_technopole);
            
            
           
                        if($trouveagrementfiliere != FALSE) {
                            $result = $agrement_mapper->find($trouveagrementfiliere->getId_agrement(),$agrement);
							$id_type_acteur = $agrement->getId_type_acteur();
							$id_type_creneau = $agrement->getId_type_creneau();
							$id_filiere = $agrement->getId_filiere();

                            $agrement->setCode_membre_morale($code);
                            $agrement_mapper->update($agrement);
            
                            $resmembre = $mapper1->find($agrement->getCode_membre_morale_agrement(),$membre1);
                            $membre->setId_filiere($id_filiere);
                            $membre->setCode_membre_morale($code);
                            $membre->setCode_type_acteur($_POST["code_type_acteur"]);
                            $membre->setCode_statut($_POST["code_statut"]);
                            $membre->setRaison_sociale(addslashes (trim ($_POST["raison_sociale"])));
                            $membre->setId_pays($_POST["id_pays"]);
                            $membre->setNum_registre_membre($_POST["num_registre_membre"]);
                            $membre->setDomaine_activite(addslashes (trim ($_POST["domaine_activite"])));
                            $membre->setSite_web(addslashes (trim ($_POST["site_web"])));
                            $membre->setQuartier_membre(addslashes (trim ($_POST["quartier_membre"])));
                            $membre->setVille_membre(addslashes (trim ($_POST["ville_membre"])));
                            $membre->setBp_membre($_POST["bp_membre"]);
                            $membre->setTel_membre($_POST["tel_membre"]);
                            $membre->setEmail_membre($_POST["email_membre"]);
                            $membre->setPortable_membre($_POST["portable_membre"]);
                            $membre->setId_utilisateur($utilisateur);
                            $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                            $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                            $membre->setCode_agence($code_agence);
                            $membre->setCodesecret(md5($_POST["codesecret"]));
                            $membre->setAuto_enroler('O');
                            $membre->setEtat_membre('A');
                            $mapper->save($membre);
            
            
                            // eu_acteurs_creneau
                            $cm = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
              
                            $acren->setNom_acteur(addslashes (trim ($_POST["raison_sociale"])));
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
            
                            //$acren->setCode_activite(NULL);
                            $acren->setCode_membre_gestionnaire($_POST['code_rep']);
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur($utilisateur);
                            $acren->setGroupe($groupe);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
              
              
                            $code_zone = $code_zone;
                            $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if ($code_acteur == NULL) {
                                $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                                $num_ordre = substr($code_acteur, -4);
                                $num_ordre++;
                                $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
            
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);  
                            $fs = Util_Utils::getParametre('FS','valeur');  
                            // eu_operation
                            Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
             
                            //insertion dans la table eu_representation
                            $rep_mapper = new Application_Model_EuRepresentationMapper();
                            $rep = new Application_Model_EuRepresentation();
                            $rep->setCode_membre_morale($code)
                                ->setCode_membre($_POST['code_rep'])
                                ->setTitre("Representant")
                                ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                                ->setId_utilisateur(NULL)
                                ->setEtat('inside');
                            $rep_mapper->save($rep);
            
                            //insertion dans la table eu_compte_bancaire
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
                                $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                                $cb = new Application_Model_EuCompteBancaire();
                                $cb_compteur = $cb_mapper->findConuter() + 1;         
                                $cb->setCode_banque($_POST['code_banque'][$i])
                                   ->setId_compte($cb_compteur)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                    }
          
                }   else {
                    $db->rollBack();
                    $this->view->message = " Le numéro agrément de la filière est invalide ou est déjà utilisé";
                    $this->view->type_acteur = $_POST["code_type_acteur"];
                    $this->view->statut_juridique = $_POST["code_statut"];
                    $this->view->raison = $_POST["raison_sociale"];
                    $this->view->domaine_activite = $_POST["domaine_activite"];
                    $this->view->site_web = $_POST["site_web"];
                    $this->view->quartier_membre = $_POST["quartier_membre"];
                    $this->view->ville_membre = $_POST["ville_membre"];
                    $this->view->bp = $_POST["bp_membre"];
                    $this->view->tel = $_POST["tel_membre"];
                    $this->view->email = $_POST["email_membre"];
                    $this->view->portable = $_POST["portable_membre"];
                    $this->view->registre = $_POST["num_registre_membre"];
                    return;
                }
           
                if($trouveagrementacnev != FALSE) {
                    $result = $agrement_mapper->find($trouveagrementacnev->getId_agrement(),$agrement);
                    $agrement->setCode_membre_morale($code);
                    $agrement_mapper->update($agrement);     
                } else {
                    $db->rollBack();
                    $this->view->message = " Le numéro agrément de l'acnev est invalide ou est déjà utilisé";
                    $this->view->type_acteur = $_POST["code_type_acteur"];
                    $this->view->statut_juridique = $_POST["code_statut"];
                    $this->view->raison = $_POST["raison_sociale"];
                    $this->view->domaine_activite = $_POST["domaine_activite"];
                    $this->view->site_web = $_POST["site_web"];
                    $this->view->quartier_membre = $_POST["quartier_membre"];
                    $this->view->ville_membre = $_POST["ville_membre"];
                    $this->view->bp = $_POST["bp_membre"];
                    $this->view->tel = $_POST["tel_membre"];
                    $this->view->email = $_POST["email_membre"];
                    $this->view->portable = $_POST["portable_membre"];
                    $this->view->registre = $_POST["num_registre_membre"];
                    return;
                }
          
          
                if($trouveagrementtechno != FALSE) {
                    $result = $agrement_mapper->find($trouveagrementtechno->getId_agrement(),$agrement);
                    $agrement->setCode_membre_morale($code);
                    $agrement_mapper->update($agrement);      
                } else {
                    $db->rollBack();
                    $this->view->message = " Le numéro agrément de la technopole est invalide ou est déjà utilisé";
                    $this->view->type_acteur = $_POST["code_type_acteur"];
                    $this->view->statut_juridique = $_POST["code_statut"];
                    $this->view->raison = $_POST["raison_sociale"];
                    $this->view->domaine_activite = $_POST["domaine_activite"];
                    $this->view->site_web = $_POST["site_web"];
                    $this->view->quartier_membre = $_POST["quartier_membre"];
                    $this->view->ville_membre = $_POST["ville_membre"];
                    $this->view->bp = $_POST["bp_membre"];
                    $this->view->tel = $_POST["tel_membre"];
                    $this->view->email = $_POST["email_membre"];
                    $this->view->portable = $_POST["portable_membre"];
                    $this->view->registre = $_POST["num_registre_membre"];
                    return;
                } 
           
                $filiere =  new Application_Model_EuFiliere();
                $map_filiere = new Application_Model_EuFiliereMapper();
                $find_filiere = $map_filiere->find($membre1->getId_filiere(),$filiere);
                $t_acteur = new Application_Model_DbTable_EuActeur();
                $c_acteur = new Application_Model_EuActeur();
                $table = new Application_Model_DbTable_EuActeur();
                $select = $table->select();
                $select->where('code_acteur LIKE ?', $acteur);
                $resultSet = $table->fetchAll($select);
                $ligneacteur = $resultSet->current();
                $count = $c_acteur->findConuter() + 1;
                $c_acteur->setId_acteur($count)
                        ->setCode_acteur(NULL)
                        ->setCode_division($filiere->getCode_division())
                        ->setCode_membre($code)
                        ->setId_utilisateur($utilisateur)
                        ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
              
                if($trouveagrementfiliere->id_type_acteur == 3) {
                    $c_acteur->setCode_activite('detaillant');
                    $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                    $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                    $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                    $c_acteur->setId_pays($ligneacteur->id_pays);
                    $c_acteur->setId_region($ligneacteur->id_region);
                    $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                    $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                } else if($trouveagrementfiliere->id_type_acteur == 2) {
                    $c_acteur->setCode_activite('semi-grossiste');
                    $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                    $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                    $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                    $c_acteur->setId_pays($ligneacteur->id_pays);
                    $c_acteur->setId_region($ligneacteur->id_region);
                    $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                    $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                } else if($trouveagrementfiliere->id_type_acteur == 1) {
                    $c_acteur->setCode_activite('grossiste');
                    $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                    $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                    $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                    $c_acteur->setId_pays($ligneacteur->id_pays);
                    $c_acteur->setId_region($ligneacteur->id_region);
                    $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                    $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                }
                    $c_acteur->setType_acteur('DSMS');
                    $c_acteur->setCode_gac_chaine($acteur);
                    $t_acteur->insert($c_acteur->toArray());
                    //R�cup�ration de la PRK nr
                    $param = new Application_Model_EuParametresMapper();
                    $par = new Application_Model_EuParametres();
                    $prc = 0;
                    $par_prc = $param->find('prc', 'nr', $par);
                    if ($par_prc == true) {
                       $prc = $par->getMontant();
                    }
             
                    $te_mapper = new Application_Model_EuTegcMapper();
                    $te = new Application_Model_EuTegc();
                    $code_te = 'TEGCP' .$membre1->getId_filiere(). $code;
                    $find_te = $te_mapper->find($code_te,$te);
                    if ($find_te == false) {
                        $te->setCode_tegc($code_te)
                            ->setId_filiere($membre1->getId_filiere())
                            ->setMdv($prc)
                            ->setCode_membre($code)
                            ->setMontant(0)
                            ->setMontant_utilise(0)
                            ->setSolde_tegc(0);
                          $te_mapper->save($te);
                    } else {
                        $te->setId_filiere($id_filiere);
                        $te->setMdv($prc);
                        $te_mapper->update($te);
                    }
                
                    // table EU_UTILISATEUR
                    $user_mapper = new Application_Model_EuUtilisateurMapper();
                    $userin = new Application_Model_EuUtilisateur();
                    $membre_mapper = new Application_Model_EuMembreMapper();
                    $membrein = new Application_Model_EuMembre();         
                    $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                    $id_user = $user_mapper->findConuter() + 1;
          
                    $userin->setId_utilisateur($id_user);
                    $userin->setId_utilisateur_parent($utilisateur); 
                    $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                    $userin->setNom_utilisateur($membrein->getNom_membre());
                    $userin->setLogin($code);
                    $userin->setPwd(md5($_POST["codesecret"]));
                    $userin->setDescription(NULL);
                    $userin->setUlock(0);
                    $userin->setCh_pwd_flog(0);

                    if($trouveagrementfiliere->id_type_acteur == 3) {
                        $userin->setCode_groupe('oe_detaillant');
                        $userin->setCode_gac_filiere('oe_detaillant');
                        $userin->setCode_groupe_create('oe_detaillant');
                    } else if($trouveagrementfiliere->id_type_acteur == 2) {
                        $userin->setCode_groupe('oe_semi_grossiste');
                        $userin->setCode_gac_filiere(NULL);
                        $userin->setCode_groupe_create('oe_semi_grossiste');
                    } else if($trouveagrementfiliere->id_type_acteur == 1) {
                        $userin->setCode_groupe('oe_grossiste');
                        $userin->setCode_gac_filiere(NULL);
                        $userin->setCode_groupe_create('oe_grossiste');
                    }
          
                    $userin->setConnecte(0);
                    $userin->setCode_agence($code_agence);
                    $userin->setCode_secteur(NULL);
                    $userin->setCode_zone($code_zone);
                    $userin->setId_filiere($id_filiere);
                    
                    $userin->setCode_acteur($acteur);
          
                    $userin->setCode_membre($code);
                    $userin->setId_pays($id_pays);        
                    $user_mapper->save($userin);

                    // Mise à jour de la table eu_contrat
                    $contrat = new Application_Model_EuContrat();
                    $mapper_contrat = new Application_Model_EuContratMapper();
                    $id_contrat = $mapper_contrat->findConuter() + 1;
          
                    $contrat->setId_contrat($id_contrat);
                    $contrat->setCode_membre($code);
                    $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                    $contrat->setNature_contrat(NULL);
                    $contrat->setId_type_contrat(3);
                    $contrat->setId_type_creneau($id_type_creneau);
            
                    $contrat->setId_type_acteur($id_type_acteur);

                    $contrat->setId_pays($id_pays);
                    $contrat->setId_utilisateur(NULL);
                    $contrat->setFiliere(''); 
                    
                    $mapper_contrat->save($contrat);
          
                    //Mise à jour de la table morale
                    $m_mapper = new Application_Model_MoraleMapper();
                    $m = new Application_Model_Morale();
                    $rep = $m_mapper->find($_POST["numidentm"],$m);
                    if ($rep == true) {
                        $m->setEtat_contrat(1)
                          ->setCode_membre($code);
                        $m_mapper->update($m);
                    }
                    $compteur = Util_Utils::findConuter() + 1;
                    Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP! Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);
                    $db->commit();
                //return $this->_helper->redirector('morale', 'eu-membre', NULL, array('controller' => 'eu-membre-ancien', 'action' => 'morale'));
        } catch (Exception $exc) {
            $db->rollback();
            $this->view->type_acteur = $_POST["code_type_acteur"];
            $this->view->statut_juridique = $_POST["code_statut"];
            $this->view->raison = $_POST["raison_sociale"];
            $this->view->domaine_activite = $_POST["domaine_activite"];
            $this->view->site_web = $_POST["site_web"];
            $this->view->quartier_membre = $_POST["quartier_membre"];
            $this->view->ville_membre = $_POST["ville_membre"];
            $this->view->bp = $_POST["bp_membre"];
            $this->view->tel = $_POST["tel_membre"];
            $this->view->email = $_POST["email_membre"];
            $this->view->portable = $_POST["portable_membre"];
            $this->view->registre = $_POST["num_registre_membre"];
            $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            return;
        }
      
          

/*          */          

        $sessionmcnp->errorlogin = "Ré-activation du compte marchand membre personne morale bien effectuée ... ...";
        $this->_redirect('/index/ancienpm');
        //$this->_redirect('/');
    } else {  $this->view->message = "Vérifier bien les numéros agréments...";  } 
    } else {  $this->view->message = "Champs * obligatoire ...";  } 
	
    } else {
        $id = (string)$this->_request->getParam('id');
        $tabela = new Application_Model_DbTable_Morale();
        $select=$tabela->select();
        $select->from($tabela)
               ->where('numidentm like ?', '%'.$id.'%')
               ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
               ->order('nomm ASC');
        $memb = $tabela->fetchAll($select);
        $trouvmembre = $memb->current();
        $this->view->numidentm = $trouvmembre->numidentm;
        $this->view->raison = $trouvmembre->nomm;
        $this->view->code_rep = $trouvmembre->representant;
        $this->view->quartier_membre = $trouvmembre->qart;
        $this->view->ville_membre = $trouvmembre->ville;
        $this->view->bp = $trouvmembre->bp;
        $this->view->tel = $trouvmembre->tel;
        $this->view->portable = $trouvmembre->portable;
        $this->view->email = $trouvmembre->email;
        $this->view->site_web = $trouvmembre->site;   
    }
    
    }

	
	public function reactivationsouscriptionmf107Action() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if(isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""  && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!=""
		    && isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!=""  && isset($_POST['code_activite']) && $_POST['code_activite']!=""
			&& isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!=""  && isset($_POST['souscription_montant']) && $_POST['souscription_montant']!="") {
    
		        $db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
		            $code_membre = $this->_request->getParam('id');
				    $repmf107   = new Application_Model_EuRepartitionMf107();
			        $m_repmf107 = new Application_Model_EuRepartitionMf107Mapper();
				    $montant = $_POST['souscription_montant'];
					$montantmf = $m_repmf107->findsum($code_membre) / 32;
					if($montantmf < $montant) {
					  $this->view->error = "Le montant souscription est supérieur au montant disponible sur le compte  ...";
					  $this->view->sum = $_POST['montant_mf'];
					  $this->view->mobile = $_POST['souscription_mobile'];
					  $this->view->mail = $_POST['souscription_email'];
					  $this->view->ville = $_POST['souscription_ville'];
					  $this->view->quartier = $_POST['souscription_quartier'];
					  $this->view->login = $_POST['souscription_login'];
					  return;
					}
					
					$mfcredits = $m_repmf107->fetchRepByMembre($code_membre);
					$montant = $montant * 32;
					if ($mfcredits != null && $montant > 0)  {
						$j = 0;
                        $reste = $montant;
                        $nbre_credit = count($mfcredits);
                        while ($reste > 0 && $j < $nbre_credit) {
                            $mfcredit = $mfcredits[$j];
                            $id = $mfcredit->getId_rep();
							$findrep = $m_repmf107->find($id,$repmf107);
							if ($reste >= $mfcredit->getSolde_rep()) {
						        //Mise à jour du compte crédit mf107
                                $reste = $reste - $mfcredit->getSolde_rep();
								$mfcredit->setMont_reglt($mfcredit->getMont_reglt() + $mfcredit->getSolde_rep());
								$mfcredit->setPayer(1);
								$mfcredit->setSolde_rep(0);
                                $m_repmf107->update($mfcredit);			 							   
						    } else {
							    //Mise à jour du compte crédit mf107
                                $mfcredit->setSolde_rep($mfcredit->getSolde_rep() - $reste);
								$mfcredit->setMont_reglt($mfcredit->getMont_reglt() + $reste);
                                $m_repmf107->update($mfcredit);
						        $reste = 0;
						    }
                            $j++;
                        }							
						
					} else {
						$db->rollback();
                        $this->view->error = "Le solde de votre compte  est null ...";
						$this->view->sum = $_POST['montant_mf'];
					    $this->view->mobile = $_POST['souscription_mobile'];
						$this->view->mail = $_POST['souscription_email'];
						$this->view->ville = $_POST['souscription_ville'];
						$this->view->quartier = $_POST['souscription_quartier'];
						$this->view->login = $_POST['souscription_login'];
				        return;  
				    }
					
					$eusouscription = new Application_Model_DbTable_EuSouscription();
	                $select = $eusouscription->select();
					if($_POST['souscription_personne'] == "PP") {
	                  $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_nom'])));
	                  $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_prenom'])));
			        } else {
	                  $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));
			        }
	                $select->order(array("souscription_id ASC"));
	                $select->limit(1);
	                $rowseusouscription = $eusouscription->fetchRow($select);
		            if(count($rowseusouscription) > 0) {
			          $souscription_ok = 1;
			          $souscription_first = $rowseusouscription->souscription_id;
			        } else {
			          $souscription_ok = 0;
			        }
					
					$eusouscription = new Application_Model_DbTable_EuSouscription();
	                $select = $eusouscription->select()->where('souscription_login = ?', $_POST['souscription_login']);
				    if ($rowseusouscription = $eusouscription->fetchRow($select) && $_POST['souscription_login'] != "" && $souscription_ok == 0) {
                        $this->view->error = "Login déjà existant ...";
						$this->view->sum = $_POST['montant_mf'];
						$this->view->mobile = $_POST['souscription_mobile'];
						$this->view->mail = $_POST['souscription_email'];
						$this->view->ville = $_POST['souscription_ville'];
						$this->view->quartier = $_POST['souscription_quartier'];
						$this->view->login = $_POST['souscription_login'];
						return;
	                } else if($_POST['souscription_passe'] != $_POST['confirme']) {
                        $this->view->error = "Mot de passe incorret ...";
						$this->view->sum = $_POST['montant_mf'];
						$this->view->mobile = $_POST['souscription_mobile'];
						$this->view->mail = $_POST['souscription_email'];
						$this->view->ville = $_POST['souscription_ville'];
						$this->view->quartier = $_POST['souscription_quartier'];
						$this->view->login = $_POST['souscription_login'];
						return;   
	                } else {
					    $code_membre = $this->_request->getParam('id');
						$date_id = Zend_Date::now();
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						include("Transfert.php");
						$souscription_vignette = "";
						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne($_POST['souscription_personne']);
			            if($_POST['souscription_personne'] == "PP") {
                            $souscription->setSouscription_nom($_POST['souscription_nom']);
                            $souscription->setSouscription_prenom($_POST['souscription_prenom']);
			            } else {
                            $souscription->setSouscription_raison($_POST['souscription_raison']);
                            $souscription->setCode_type_acteur($_POST["type_acteur"]);
                            $souscription->setCode_statut($_POST["statut_juridique"]);
			            }
						
						$souscription->setSouscription_email($_POST['souscription_email']);
                        $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                        $souscription->setSouscription_membreasso(1);
                        $souscription->setSouscription_type($_POST['souscription_type']);
						
						$souscription->setSouscription_numero(null);
                        $souscription->setSouscription_date_numero(null);
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($_POST['souscription_montant']);
                        $souscription->setSouscription_nombre($_POST['souscription_nombre']);
                        $souscription->setSouscription_programme($_POST['souscription_programme']);
					    $souscription->setSouscription_type_candidat($_POST['souscription_type_candidat']);
						
						$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette($souscription_vignette);
                        $souscription->setCode_type_acteur($_POST["type_acteur"]);
                        $souscription->setCode_statut($_POST["statut_juridique"]);
                        $souscription->setCode_activite($_POST["code_activite"]);
                        $souscription->setId_metier($_POST["id_metier"]);
                        $souscription->setId_competence($_POST["id_competence"]);
                        $souscription->setSouscription_ville($_POST['souscription_ville']);
                        $souscription->setSouscription_quartier($_POST['souscription_quartier']);
		
                        $souscription->setSouscription_login($_POST['souscription_login']);
                        $souscription->setSouscription_passe($_POST['souscription_passe']);
						
						if($souscription_ok == 1) {
                          $souscription->setSouscription_souscription($souscription_first);
				        } else {
                          $souscription->setSouscription_souscription($compteur_souscription);
					    }
                        $souscription->setSouscription_autonome($_POST['souscription_autonome']);
					    $souscription->setSouscription_ancien_membre($code_membre);
						$souscription->setId_canton($_POST['id_canton']);
			            $souscription->setPublier(0);
						$souscription->setErreur(0);	
						$souscription_mapper->save($souscription);
						
						$html = "";
					    if($_POST['souscription_personne'] == "PP") {
			                $html .= "Nom : ".$_POST['souscription_nom']."<br/>";
                            $html .= "Prenom : ".$_POST['souscription_prenom']."<br/>";
						} else {
                            $html .= "Raison sociale : ".$_POST['souscription_raison']."<br/>";
                            if($_POST["type_acteur"] == 'EI')    {$html .= "Type Entreprise    : Entreprise Industrie<br/>";}
                            if($_POST["type_acteur"] == 'OE')    {$html .= "Type Entreprise    : Opérateur Economique<br/>";}
                            if($_POST["type_acteur"] == 'OSE')   {$html .= "Type Association  : Opérateur Socio-Economique<br/>";}
                            if($_POST["type_acteur"] == 'PEI')   {$html .= "Type Entreprise   : Partenaire Entreprise Industrie<br/>";}
                            if($_POST["type_acteur"] == 'POE')   {$html .= "Type Entreprise   : Partenaire Opérateur Economique<br/>";}
                            if($_POST["type_acteur"] == 'POSE')  {$html .= "Type Association : Partenaire Opérateur Socio-Economique<br/>";}

                            $statutjuridique = new Application_Model_EuStatutJuridique();
                            $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                            $statutjuridiqueM->find($_POST["statut_juridique"], $statutjuridique);
                            $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br/>";	
			            }
						$html .= "E-mail    : ".$_POST['souscription_email']."<br/>";
                        $html .= "Mobile    : ".$_POST['souscription_mobile']."<br/>";
                        $html .= "Ville     :  ".$_POST['souscription_ville']."<br/>";
                        $html .= "Quartier  : ".$_POST['souscription_quartier']."<br/>";
                        $html .= "Programme : ".$_POST['souscription_programme']."<br/>";
						
						$type_candidatM = new Application_Model_DbTable_EuTypeCandidat();
                        $type_candidat = $type_candidatM->find($_POST['souscription_type_candidat']);
		                $row = $type_candidat->current();
                        $html .= "Type candidat : ".$row->libelle_type_candidat."<br/>";	

                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
		                $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
		                $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
		                $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";

                        $html .= "Montant : ".$_POST['souscription_montant']."<br/>";
                        $html .= "Nombre  : ".$_POST['souscription_nombre']."<br/>";
                        $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br/>";

                        $esmc_email	 = Util_Utils::getParamEsmc(3);
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                        Zend_Mail::setDefaultTransport($tr);		
                        $mail = new Zend_Mail();
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($esmc_email, "ESMC - SIF");
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                        $mail->send();	

                        $html .= "<br/>";
                        $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter et compléter les informations vous concernant pour être bien classifié dans votre domaine et ainsi être en bonne position pour l’ouverture prochaine du marché MCNP.";
                        $html .= "<br/>";
                        $html .= "Connectez vous ici : <a href='https://esmcgie.com/souscription/login'>Connexion Souscription</a>";
                        $html .= "Login : ".$_POST['souscription_login']."<br/>";
                        $html .= "Mot de passe : ".$_POST['souscription_passe']."<br/>";
						
                        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
 
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                        Zend_Mail::setDefaultTransport($tr);		
                        $mail = new Zend_Mail();
                        //$mail->setBodyText('Mon texte de test');
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($_POST['souscription_email'], $_POST['souscription_nom']." ".$_POST['souscription_prenom']);
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                        $mail->send($tr);
						
						$htmlpdf = "";
                        $htmlpdf .= '
                        <page backbottom="15mm">
                        <page_footer>
                            <table>
                            <tr>
                                <td align="center">
	                            <hr>
	                                Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425
								</td>
                            </tr>
                            </table>
                        </page_footer>
                        <table width="768" border="0">
                        <tbody>
                            <tr>
                                <td colspan="4"><img src="'.Util_Utils::getParamEsmc(1).'/images/entete.gif"  width="738" height="105"  /></td>
                            </tr>';
						$souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription,$souscription);
						
						if($souscription->souscription_personne == "PP") {
						    $souscrip = new Application_Model_EuSouscription();
                            $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                            $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");							
		                    $unite = 2187.5;	
                            $htmlpdf .='
                            <tr>
                                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                            </tr>';	
						} else if($souscription->souscription_personne == "PM") {	
                            $souscrip = new Application_Model_EuSouscription();
                            $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                            $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");		
		                    $unite = 2187.5;	
                            $htmlpdf .='
                            <tr>
                                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                            </tr>';							
						}
                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
		                $souscriptionM->update($souscription);

                        if($souscription->souscription_autonome == 1) {
	                        $souscription_nombre = $souscription->souscription_nombre - 1;
			                if($souscription->souscription_personne == "PP") {
				                $autonome = 5000;
			                } else if($souscription->souscription_personne == "PM") {
				                $autonome = 70000;
				            }
	                    }   else {
	                        $souscription_nombre = $souscription->souscription_nombre;
	                        $autonome = 0;
                        }
						
						if($souscription->souscription_personne == "PP") {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_nom.' '.$souscription->souscription_prenom.'</em></strong></p></td>
                            </tr>';
                        } else if($souscription->souscription_personne == "PM") {
                            $htmlpdf .= '
                            <tr>
                              <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_raison.'</em></strong></p></td>
                            </tr>';
                        }
						
						if($souscription->souscription_autonome == 1) {
                            $htmlpdf .= '
                            <tr style="background-color:#999;">
                                <td align="left"><em><strong>Achat de code SMS KACM</strong></em></td>
                                <td align="center"><em>1</em></td>
                                <td align="center"><em>'.$autonome.' FCFA</em></td>
                                <td align="center"><em>'.number_format(($autonome), 0, ',', ' ').' FCFA</em></td>
                            </tr>';
                        }
						
						$htmlpdf .= '
                        <tr style="background-color:#999;">
                            <td align="left"><em><strong>Achat de code SMS  CMFH/CAPS/GAC Togo</strong></em></td>
                            <td align="center"><em>'.$souscription_nombre.'</em></td>
                            <td align="center"><em>'.$unite.' FCFA</em></td>
                            <td align="center"><em>'.number_format(($souscription_nombre * $unite), 0, ',', ' ').' FCFA</em></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($souscription_nombre * $unite + $autonome), 50).' CFA</em></td>
                            <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(1).'/images/cachet.jpg" /><br />
                            Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                        </tr>';
						
						$htmlpdf .= '
                        <tr>
                           <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  Chiffres :</u> '.number_format(($souscription_nombre * 70000 ), 0, ',', ' ').' BA.</em></td>
                        </tr>
                        <tr>
                           <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  lettres :</u> '.lettre2(($souscription_nombre * 70000 ), 50).' </em></td>
                        </tr>';
						
						
						$htmlpdf .= '
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="center">';
	                        if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" 
							|| substr($souscription->souscription_vignette, 0, 3) == "jpeg" 
							|| substr($souscription->souscription_vignette, 0, 3) == "JPG" 
							|| substr($souscription->souscription_vignette, 0, 3) == "JPEG")) {
                                list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(1).$souscription->souscription_vignette);
	                            $pourcent = 700 * 100 / $width;
	                            $width2 = 700;
	                            $height2 = $pourcent * $height / 100;
                                $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(1).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />';}
                                $htmlpdf .= '  
							</td>
	                    </tr>
                        </tbody>
                        </table>
                        <br/>
                        <br/>
                       &nbsp;
                       </page>';
                       $htmlpdf .= '';
					   
					    ////////////////////////////////////////////////////////////////////////////////
                        $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                        $somecontent = $htmlpdf;
                        // Assurons nous que le fichier est accessible en écriture
                        if (is_writable($filename)) {
                            // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                            // Le pointeur de fichier est placé à la fin du fichier
                            // c'est là que $somecontent sera placé
                            if (!$handle = fopen($filename, 'w+')) {
                                echo "Impossible d'ouvrir le fichier ($filename)";
                                exit;
                            }

                            // Ecrivons quelque chose dans notre fichier.
                            if (fwrite($handle, $somecontent) === FALSE) {
                                echo "Impossible d'écrire dans le fichier ($filename)";
                                exit;
                            }
                            //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                            fclose($handle);
                    
                        } else {
                            echo "Le fichier $filename n'est pas accessible en écriture.";
                        }

                        ////////////////////////////////////////////////////////////////////////////	
                        $file = $filename;
                        if (!is_dir("../../webfiles/pdf_souscription/")) {
                           mkdir("../../webfiles/pdf_souscription/", 0777);
                        }
                        /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/
                        $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
                        $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                        $newchemin = "../../webfiles/pdf_souscription/";

                        copy($file, $newfile);
                        ob_start();
                        include(dirname(__FILE__).'/../'.$newfile);
                        $content = ob_get_clean();

                        // convert to PDF
                        require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                        try {
                            $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                            $html2pdf->pdf->SetDisplayMode('fullpage');
                            $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                            //$html2pdf->writeHTML($content);
                            $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                        }
                        catch(HTML2PDF_exception $e) {
                            echo $e;
                            exit;
                        }
                        $file = $newchemin.$newnom.'.pdf';
                        $filena	= $newnom.'.pdf';
                        unlink($newfile);
						
						
						$db->commit();
						$sessionmcnp->errorlogin = "Souscription au compte marchand pour tiers bien effectuée";						
					    $this->_redirect('/index/ancienmf107');
					
					}
		        } catch (Exception $exc) {
				    $db->rollback();
				    $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				    return;
			    }
		    }
	    } else {
		    $code_membre = $this->_request->getParam('id');
		    $tabela = new Application_Model_DbTable_EuRepartitionMf107();
            $select = $tabela->select();
		    $select->from($tabela,array('sum(solde_rep) as somme'));
	        $select->where('code_membre = ?',$code_membre);
	        $select->where('solde_rep > ?',0);
		    $result  = $tabela->fetchAll($select);
		    $findsum = $result->current();
		    $this->view->sum = round($findsum->somme/32);
		}
	}
	
	
	public function reactivationsouscriptionmf11000Action() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
        
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if(isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""  
			  && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!=""
			  && isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!=""  
			  && isset($_POST['code_activite']) && $_POST['code_activite']!=""
			  && isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!=""  
			  && isset($_POST['souscription_montant']) && $_POST['souscription_montant']!="") {
			    $db = Zend_Db_Table::getDefaultAdapter();
				$db->beginTransaction();
				try {
				    $num_bon = $this->_request->getParam('id');
					$repmf11000   = new Application_Model_EuRepartitionMf11000();
			        $m_repmf11000 = new Application_Model_EuRepartitionMf11000Mapper();
				    $montant   = $_POST['souscription_montant'];
					$montantmf = $m_repmf11000->findsum($num_bon) / 6;
					
					if($montantmf < $montant) {
					    $this->view->error = "Le montant souscription est supérieur au montant disponible sur le compte  ...";
					    $this->view->sum = $_POST['montant_mf'];
					    $this->view->mobile = $_POST['souscription_mobile'];
					    $this->view->mail = $_POST['souscription_email'];
					    $this->view->ville = $_POST['souscription_ville'];
					    $this->view->quartier = $_POST['souscription_quartier'];
					    $this->view->login = $_POST['souscription_login'];
						return;
					}
					
					$mfcredits = $m_repmf11000->fetchRepByNumBon($num_bon);
				    $montant = $montant * 6;
					if ($mfcredits != null && $montant > 0)  {
					    $j = 0;
                        $reste = $montant;
                        $nbre_credit = count($mfcredits);
						while ($reste > 0 && $j < $nbre_credit) {
						    $mfcredit = $mfcredits[$j];
                            $id = $mfcredit->getId_rep();
							$findrep = $m_repmf11000->find($id,$repmf11000);
						    if ($reste >= $mfcredit->getSolde_rep()) {
						        //Mise à jour du compte de detail mf11000
                                $reste = $reste - $mfcredit->getSolde_rep();
								$mfcredit->setMont_reglt($mfcredit->getMont_reglt() + $mfcredit->getSolde_rep());
							    $mfcredit->setPayer(1);
								$mfcredit->setSolde_rep(0);
                                $m_repmf11000->update($mfcredit);			 							   
						    } else {
							    //Mise à jour du compte de detail mf11000
                                $mfcredit->setSolde_rep($mfcredit->getSolde_rep() - $reste);
								$mfcredit->setMont_reglt($mfcredit->getMont_reglt() + $reste);
                                $m_repmf11000->update($mfcredit);
						        $reste = 0;
						    }
							$j++;
				        }
					} else  {
						$db->rollback();
                        $this->view->error = "Le solde de votre compte  est insuffisant ...";
						$this->view->sum = $_POST['montant_mf'];
					    $this->view->mobile = $_POST['souscription_mobile'];
						$this->view->mail = $_POST['souscription_email'];
						$this->view->ville = $_POST['souscription_ville'];
						$this->view->quartier = $_POST['souscription_quartier'];
						$this->view->login = $_POST['souscription_login'];
				        return;  
					}
					
					$eusouscription = new Application_Model_DbTable_EuSouscription();
	                $select = $eusouscription->select();
				    if($_POST['souscription_personne'] == "PP") {
	                  $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_nom'])));
	                  $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_prenom'])));
			        } else {
	                  $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));
			        }
					
					$select->order(array("souscription_id ASC"));
	                $select->limit(1);
	                $rowseusouscription = $eusouscription->fetchRow($select);
		            if(count($rowseusouscription) > 0) {
			            $souscription_ok = 1;
			            $souscription_first = $rowseusouscription->souscription_id;
			        } else {
			            $souscription_ok = 0;
			        }
					
					$eusouscription = new Application_Model_DbTable_EuSouscription();
	                $select = $eusouscription->select()->where('souscription_login = ?', $_POST['souscription_login']);
					$rowseusouscription = $eusouscription->fetchAll($select);
					
					
					if (count($rowseusouscription) > 0 && $_POST['souscription_login'] != "" && $souscription_ok == 0) {
                        $this->view->error = "Login déjà existant ...";
						$this->view->sum = $_POST['montant_mf'];
						$this->view->mobile = $_POST['souscription_mobile'];
						$this->view->mail = $_POST['souscription_email'];
						$this->view->ville = $_POST['souscription_ville'];
						$this->view->quartier = $_POST['souscription_quartier'];
						$this->view->login = $_POST['souscription_login'];
						return;
	                } else if($_POST['souscription_passe'] != $_POST['confirme']) {
                        $this->view->error = "Mot de passe incorret ...";
						$this->view->sum = $_POST['montant_mf'];
						$this->view->mobile = $_POST['souscription_mobile'];
						$this->view->mail = $_POST['souscription_email'];
						$this->view->ville = $_POST['souscription_ville'];
						$this->view->quartier = $_POST['souscription_quartier'];
						$this->view->login = $_POST['souscription_login'];
						return;   
	                } else {
					    $num_bon = $this->_request->getParam('id');
						$date_id = Zend_Date::now();
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						include("Transfert.php");
						$souscription_vignette = "";
						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne($_POST['souscription_personne']);
			            if($_POST['souscription_personne'] == "PP") {
                          $souscription->setSouscription_nom($_POST['souscription_nom']);
                          $souscription->setSouscription_prenom($_POST['souscription_prenom']);
			            } else {
                          $souscription->setSouscription_raison($_POST['souscription_raison']);
                          $souscription->setCode_type_acteur($_POST["type_acteur"]);
                          $souscription->setCode_statut($_POST["statut_juridique"]);
			            }
						
						$souscription->setSouscription_email($_POST['souscription_email']);
                        $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                        $souscription->setSouscription_membreasso(1);
                        $souscription->setSouscription_type($_POST['souscription_type']);
						
						$souscription->setSouscription_numero(null);
                        $souscription->setSouscription_date_numero(null);
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($_POST['souscription_montant']);
                        $souscription->setSouscription_nombre($_POST['souscription_nombre']);
                        $souscription->setSouscription_programme($_POST['souscription_programme']);
					    $souscription->setSouscription_type_candidat($_POST['souscription_type_candidat']);
						
						$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette($souscription_vignette);
                        $souscription->setCode_type_acteur($_POST["type_acteur"]);
                        $souscription->setCode_statut($_POST["statut_juridique"]);
                        $souscription->setCode_activite($_POST["code_activite"]);
                        $souscription->setId_metier($_POST["id_metier"]);
                        $souscription->setId_competence($_POST["id_competence"]);
                        $souscription->setSouscription_ville($_POST['souscription_ville']);
                        $souscription->setSouscription_quartier($_POST['souscription_quartier']);
		
                        $souscription->setSouscription_login($_POST['souscription_login']);
                        $souscription->setSouscription_passe($_POST['souscription_passe']);
						
						if($souscription_ok == 1) {
                          $souscription->setSouscription_souscription($souscription_first);
				        } else {
                          $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
                        $souscription->setSouscription_autonome($_POST['souscription_autonome']);
					    $souscription->setSouscription_ancien_membre($num_bon);
						$souscription->setId_canton($_POST['id_canton']);
			            $souscription->setPublier(3);	
						$souscription->setErreur(0);
						$souscription_mapper->save($souscription);
					    
						$html = "";
						if($_POST['souscription_personne'] == "PP") {
			              $html .= "Nom : ".$_POST['souscription_nom']."<br/>";
                          $html .= "Prenom : ".$_POST['souscription_prenom']."<br/>";
						} else {
                          $html .= "Raison sociale : ".$_POST['souscription_raison']."<br/>";
                          if($_POST["type_acteur"] == 'EI')   {$html .= "Type Entreprise    : Entreprise Industrie<br/>";}
                          if($_POST["type_acteur"] == 'OE')   {$html .= "Type Entreprise    : Opérateur Economique<br/>";}
                          if($_POST["type_acteur"] == 'OSE')  {$html .= "Type Association  : Opérateur Socio-Economique<br/>";}
                          if($_POST["type_acteur"] == 'PEI')  {$html .= "Type Entreprise   : Partenaire Entreprise Industrie<br/>";}
                          if($_POST["type_acteur"] == 'POE')  {$html .= "Type Entreprise   : Partenaire Opérateur Economique<br/>";}
                          if($_POST["type_acteur"] == 'POSE') {$html .= "Type Association : Partenaire Opérateur Socio-Economique<br/>";}

                          $statutjuridique = new Application_Model_EuStatutJuridique();
                          $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                          $statutjuridiqueM->find($_POST["statut_juridique"], $statutjuridique);
                          $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br/>";
			            }
						
						$html .= "E-mail    : ".$_POST['souscription_email']."<br/>";
                        $html .= "Mobile    : ".$_POST['souscription_mobile']."<br/>";
                        $html .= "Ville     :  ".$_POST['souscription_ville']."<br/>";
                        $html .= "Quartier  : ".$_POST['souscription_quartier']."<br/>";
                        $html .= "Programme : ".$_POST['souscription_programme']."<br />";
						
						$type_candidatM = new Application_Model_DbTable_EuTypeCandidat();
                        $type_candidat = $type_candidatM->find($_POST['souscription_type_candidat']);
		                $row = $type_candidat->current();
                        $html .= "Type candidat : ".$row->libelle_type_candidat."<br/>";	

                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
		                $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
		                $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
		                $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";

                        $html .= "Montant : ".$_POST['souscription_montant']."<br/>";
                        $html .= "Nombre  : ".$_POST['souscription_nombre']."<br/>";
                        $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br/>";

                        $esmc_email	 = Util_Utils::getParamEsmc(3);
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                        Zend_Mail::setDefaultTransport($tr);		
                        $mail = new Zend_Mail();
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($esmc_email, "ESMC - SIF");
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                        $mail->send();	

                        $html .= "<br/>";
                        $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter et compléter les informations vous concernant pour être bien classifié dans votre domaine et ainsi être en bonne position pour l’ouverture prochaine du marché MCNP.";
                        $html .= "<br/>";
                        $html .= "Connectez vous ici : <a href='https://esmcgie.com/souscription/login'>Connexion Souscription</a>";
                        $html .= "Login : ".$_POST['souscription_login']."<br/>";
                        $html .= "Mot de passe : ".$_POST['souscription_passe']."<br/>";

                        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
 
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                        Zend_Mail::setDefaultTransport($tr);		
                        $mail = new Zend_Mail();
                        //$mail->setBodyText('Mon texte de test');
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($_POST['souscription_email'], $_POST['souscription_nom']." ".$_POST['souscription_prenom']);
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                        $mail->send($tr);
						
						$htmlpdf = "";
                        $htmlpdf .= '
                        <page backbottom="15mm">
                        <page_footer>
                            <table>
                            <tr>
                                <td align="center">
	                            <hr>
	                                Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425
								</td>
                            </tr>
                            </table>
                        </page_footer>
                        <table width="768" border="0">
                        <tbody>
                            <tr>
                                <td colspan="4"><img src="'.Util_Utils::getParamEsmc(1).'/images/entete.gif"  width="738" height="105"  /></td>
                            </tr>';
						$souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription,$souscription);
						
						if($souscription->souscription_personne == "PP") {
						    $souscrip = new Application_Model_EuSouscription();
                            $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                            $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");							
		                    $unite = 2187.5;	
                            $htmlpdf .='
                            <tr>
                                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                            </tr>';	
						} else if($souscription->souscription_personne == "PM") {	
                            $souscrip = new Application_Model_EuSouscription();
                            $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                            $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");		
		                    $unite = 2187.5;	
                            $htmlpdf .='
                            <tr>
                                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                            </tr>';							
						}
                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
		                $souscriptionM->update($souscription);

                        if($souscription->souscription_autonome == 1) {
	                        $souscription_nombre = $souscription->souscription_nombre - 1;
			                if($souscription->souscription_personne == "PP"){
				                $autonome = 5000;
			                } else if($souscription->souscription_personne == "PM"){
				                $autonome = 70000;
				            }
	                    }   else {
	                        $souscription_nombre = $souscription->souscription_nombre;
	                        $autonome = 0;
                        }
						
						if($souscription->souscription_personne == "PP") {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_nom.' '.$souscription->souscription_prenom.'</em></strong></p></td>
                            </tr>';
                        } else if($souscription->souscription_personne == "PM") {
                            $htmlpdf .= '
                            <tr>
                              <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_raison.'</em></strong></p></td>
                            </tr>';
                        }
						
						if($souscription->souscription_autonome == 1) {
                            $htmlpdf .= '
                            <tr style="background-color:#999;">
                                <td align="left"><em><strong>Achat de code SMS KACM</strong></em></td>
                                <td align="center"><em>1</em></td>
                                <td align="center"><em>'.$autonome.' FCFA</em></td>
                                <td align="center"><em>'.number_format(($autonome), 0, ',', ' ').' FCFA</em></td>
                            </tr>';
                        }
						
						$htmlpdf .= '
                        <tr style="background-color:#999;">
                            <td align="left"><em><strong>Achat de code SMS  CMFH/CAPS/GAC Togo</strong></em></td>
                            <td align="center"><em>'.$souscription_nombre.'</em></td>
                            <td align="center"><em>'.$unite.' FCFA</em></td>
                            <td align="center"><em>'.number_format(($souscription_nombre * $unite), 0, ',', ' ').' FCFA</em></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($souscription_nombre * $unite + $autonome), 50).' CFA</em></td>
                            <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(1).'/images/cachet.jpg" /><br />
                            Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                        </tr>';
						
						$htmlpdf .= '
                        <tr>
                           <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  Chiffres :</u> '.number_format(($souscription_nombre * 70000 ), 0, ',', ' ').' BA.</em></td>
                        </tr>
                        <tr>
                           <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  lettres :</u> '.lettre2(($souscription_nombre * 70000 ), 50).' </em></td>
                        </tr>';
						
						
						$htmlpdf .= '
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="center">';
	                        if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" 
							|| substr($souscription->souscription_vignette, 0, 3) == "jpeg" 
							|| substr($souscription->souscription_vignette, 0, 3) == "JPG" 
							|| substr($souscription->souscription_vignette, 0, 3) == "JPEG")) {
                                list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(1).$souscription->souscription_vignette);
	                            $pourcent = 700 * 100 / $width;
	                            $width2 = 700;
	                            $height2 = $pourcent * $height / 100;
                                $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(1).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />';}
                                $htmlpdf .= '  
							</td>
	                    </tr>
                        </tbody>
                        </table>
                        <br/>
                        <br/>
                       &nbsp;
                       </page>';
                       $htmlpdf .= '';
					   
					   ////////////////////////////////////////////////////////////////////////////////
                        $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                        $somecontent = $htmlpdf;
                        // Assurons nous que le fichier est accessible en écriture
                        if (is_writable($filename)) {
                            // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                            // Le pointeur de fichier est placé à la fin du fichier
                            // c'est là que $somecontent sera placé
                            if (!$handle = fopen($filename, 'w+')) {
                                echo "Impossible d'ouvrir le fichier ($filename)";
                                exit;
                            }

                            // Ecrivons quelque chose dans notre fichier.
                            if (fwrite($handle, $somecontent) === FALSE) {
                                echo "Impossible d'écrire dans le fichier ($filename)";
                                exit;
                            }
                            //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                            fclose($handle);
                    
                        } else {
                            echo "Le fichier $filename n'est pas accessible en écriture.";
                        }

                        ////////////////////////////////////////////////////////////////////////////	
                        $file = $filename;
                        if (!is_dir("../../webfiles/pdf_souscription/")) {
                           mkdir("../../webfiles/pdf_souscription/", 0777);
                        }
                        /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/
                        $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", ($souscription->souscription_id))."_.html";
                        $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                        $newchemin = "../../webfiles/pdf_souscription/";

                        copy($file, $newfile);
                        ob_start();
                        include(dirname(__FILE__).'/../'.$newfile);
                        $content = ob_get_clean();

                        // convert to PDF
                        require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                        try {
                            $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                            $html2pdf->pdf->SetDisplayMode('fullpage');
                            $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                            //$html2pdf->writeHTML($content);
                            $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                        }
                        catch(HTML2PDF_exception $e) {
                            echo $e;
                            exit;
                        }
                        $file = $newchemin.$newnom.'.pdf';
                        $filena	= $newnom.'.pdf';
                        unlink($newfile);
							
					    $db->commit();
                        $sessionmcnp->errorlogin = "Souscription au compte marchand pour tiers bien effectuée";
                        //$this->_redirect(str_replace("../../webfiles/", "http://webfiles.gacsource.net/", $file));						
					    $this->_redirect('/index/ancienmf11000');
					}
                    
				} catch (Exception $exc) {
				  $db->rollback();
				  $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
				  return;
			    }
		    } else {  $this->view->error = "Champs * obligatoire ...";  }
		
	    } else {
		  $num_bon = $this->_request->getParam('id');
		  $tabela  =  new Application_Model_DbTable_EuRepartitionMf11000();
          $select  =  $tabela->select();
		  $select->from($tabela, array('SUM(solde_rep) as somme'));
		  $select->where('code_mf11000 = ?',$num_bon);
	      $select->where('solde_rep > ?',0);
		  $result  = $tabela->fetchAll($select);
		  $findsum = $result->current();
		  $this->view->sum = round($findsum->somme/6);
		}
	
	}
	
	
	
	public  function ancienmf11000Action() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['num_bon']) && $_POST['num_bon']!="") {
			    $num_bon = $_POST['num_bon'];
			    $tabela = new Application_Model_DbTable_EuRepartitionMf11000();
                $select = $tabela->select();
				//$select->from($tabela, array('SUM(solde_rep) as somme'));
			    $select->where('code_mf11000 like ?',$num_bon);
			    $select->where('solde_rep > ?',0);
			    $result = $tabela->fetchAll($select);
			    if(count($result) > 0) { 
				    $table = new Application_Model_DbTable_EuReleve();
				    $selection = $table->select();
				    $selection->where('releve_membre like ?',$num_bon);
			        $selection->where('releve_type like ?','MF11000_PP');
				    $selection->where('publier = ?',1);
				    $resultat = $table->fetchAll($selection);
				    if(count($resultat) > 0) {
					  $this->_redirect('/index/reactivationsouscriptionmf11000/id/'.$num_bon);
					} else { 
				      $this->view->message = "Vous devez disposer d'un relevé correct ...";
			        }
		        } else {
				    $this->view->message = "Pas de resultat ..."; 
				}
	        }
	    } 
	
	}
	
	
	
	
	
	public  function ancienmf107Action() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
		    if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
			    $code_membre = $_POST['code_membre'];
			    $tabela = new Application_Model_DbTable_EuRepartitionMf107();
                $select = $tabela->select();
				//$select->from($tabela, array('SUM(solde_rep) as somme'));
			    $select->where('code_membre like ?',$code_membre);
			    $select->where('solde_rep > ?',0);
			    $result = $tabela->fetchAll($select);
			   
			    if(count($result) > 0) {
                    $table = new Application_Model_DbTable_EuReleve();
				    $selection = $table->select();
				    $selection->where('releve_membre like ?',$code_membre);
			        $selection->where('releve_type like ?',"MF107");
				    $selection->where('publier = ?',1);
				    $resultat = $table->fetchAll($selection);
				    if(count($resultat) > 0) {			
			           $this->_redirect('/index/reactivationsouscriptionmf107/id/'.$code_membre); 
					} else {
                       $this->view->message = "Vous devez disposer d'un relevé correct ...";
                    }					
		        } else {
				   $this->view->message = "Pas de resultat ..."; 
				}
			
			}
			
		}
		
	}
	
	


    public function ancienpmmcnpAction() {
        /* page index/ancienpmmcnp - Retrouve ancienne personne morale MCNP */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_EuAncienMembre();
                $select = $tabela->select();
                $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                       ->where('ancien_code_membre LIKE ?', '%'.$_POST['code_membre'].'%')
					   ->where('type_membre like ?', 'M')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');        
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $table  = new Application_Model_DbTable_EuSouscription();
                    $selection = $table->select();
                    $selection->from($table)
                              ->where('souscription_ancien_membre like ?',$_POST['code_membre']);
                    $sous = $table->fetchAll($selection);
                    if(count($sous) == 0) {      
                       $this->_redirect('/index/reactivationsouscriptionmcnppm/id/'.$trouvmembre->ancien_code_membre);
                    } else {
                       $this->view->message = "Quittance de Réactivation déjà effectuée ...";
                    }   
                } else {  $this->view->message = "Votre ancien code membre est introuvable ou est dejà réactivé ... ";}//Déjà Activé
                } else {  $this->view->message = "Champs * obligatoire ...";}
       
        } 
    }


  
    public  function ancienpmmcnpeditAction() {
	    /* page index/ancienpmmcnpedit - Mise sur chaine ancienne personne morale MCNP */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
		
		if(isset($_POST['ok']) && $_POST['ok']=="ok") {
		    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                if($smsmoneyFS = $smsmoneyM->findByCreditCode9($_POST['code_fs'], "FS") && $smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL") 
				    && (($_POST['code_fkps']=="") || (isset($_POST['code_fkps']) && $_POST['code_fkps']!="" && $smsmoneyFKPS = $smsmoneyM->findByCreditCode9($_POST['code_fkps'], "FCPS")))) {
		
		            $code_agence = $_POST['code_agence'];
                    $code_zone = substr($_POST['code_agence'],0,3);
                    $id_pays = $_POST['id_pays'];
                    $groupe = NULL;

                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;
                    $acteur      =  $code_acteur;
					
					$fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $fcps = Util_Utils::getParametre('FKPS','valeur');
					
					$date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $code_fs = $_POST["code_fs"];
                    $code_fl = $_POST["code_fl"];
                    $code_fkps = $_POST["code_fkps"];
					
					$id_type_creneau = "";
					$id_type_acteur  = "";
					$id_filiere      = "";
					
					$membre = new Application_Model_EuMembreMorale();
                    $mapper = new Application_Model_EuMembreMoraleMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();
         
                    $mapper_op = new Application_Model_EuOperationMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $tcartes = array();
                    $tscartes = array();
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
					    if($code_fs !="") {
		                    $sms_fs = $sms_mapper->findByCreditCode($code_fs);
							$code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'M';
                            } else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'M';
                            }
							$compteur = $mapper_op->findConuter() + 1;
							$membre->setId_filiere(null);
                            $membre->setCode_membre_morale($code);
                            $membre->setCode_type_acteur($_POST["code_type_acteur"]);
                            $membre->setCode_statut($_POST["code_statut"]);
                            $membre->setRaison_sociale(addslashes (trim ($_POST["raison_sociale"])));
							
							$membre->setId_pays($_POST["id_pays"]);
                            $membre->setNum_registre_membre($_POST["num_registre_membre"]);
                            $membre->setDomaine_activite(addslashes (trim ($_POST["domaine_activite"])));
                            $membre->setSite_web(addslashes (trim ($_POST["site_web"])));
                            $membre->setQuartier_membre(addslashes (trim ($_POST["quartier_membre"])));
                            $membre->setVille_membre(addslashes (trim ($_POST["ville_membre"])));
                            $membre->setBp_membre($_POST["bp_membre"]);
                            $membre->setTel_membre($_POST["tel_membre"]);
                            $membre->setEmail_membre($_POST["email_membre"]);
                            $membre->setPortable_membre($_POST["portable_membre"]);
                            $membre->setId_utilisateur(NULL);
                            $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                            $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                            $membre->setCode_agence($code_agence);
                            $membre->setCodesecret(md5($_POST["codesecret"]));
                            $membre->setAuto_enroler('O');
                            $membre->setEtat_membre('A');
                            $mapper->save($membre);
							
							//Mise à jour de la table morale
                            $m_mapper = new Application_Model_EuAncienMembreMapper();
                            $m = new Application_Model_EuAncienMembre();
                            $rep = $m_mapper->find($_POST["ancien_code_membre"],$m);
                            if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                            }
							
							Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
               
					        //insertion dans la table eu_representation
                            $rep_mapper = new Application_Model_EuRepresentationMapper();
                            $rep = new Application_Model_EuRepresentation();
                            $rep->setCode_membre_morale($code)
                                ->setCode_membre($_POST['code_rep'])
                                ->setTitre("Representant")
                                ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                                ->setId_utilisateur(NULL)
                                ->setEtat('inside');
                            $rep_mapper->save($rep);
							
							$cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
							for($i = 0; $i < count($_POST['code_banque']); $i++) {
                                $cb_compteur = $cb_mapper->findConuter() + 1;         
                                $cb->setCode_banque($_POST['code_banque'][$i])
                                   ->setId_compte($cb_compteur)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                $cb_mapper->save($cb);
                            }
							
							$t_acteur = new Application_Model_DbTable_EuActeur();
                            $c_acteur = new Application_Model_EuActeur();
                            $table = new Application_Model_DbTable_EuActeur();
                            $select = $table->select();
                            $select->where('code_acteur like ?', $acteur);
                            $resultSet = $table->fetchAll($select);
                            $ligneacteur = $resultSet->current();
                            $count = $c_acteur->findConuter() + 1;
							
							$c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division(NULL)
                                     ->setCode_membre($code)
                                     ->setId_utilisateur($utilisateur)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));   
                            $c_acteur->setCode_activite(NULL);
                            $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                            $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                            $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                            $c_acteur->setId_pays($ligneacteur->id_pays);
                            $c_acteur->setId_region($ligneacteur->id_region);
                            $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                            $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                               
                            $c_acteur->setType_acteur('DSMS');
                    
                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());
							
							// table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
                            $membre_mapper = new Application_Model_EuMembreMapper();
                            $membrein = new Application_Model_EuMembre();         
                            $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                            $id_user = $user_mapper->findConuter() + 1;
							
							$userin->setId_utilisateur($id_user);
                            $userin->setId_utilisateur_parent($utilisateur); 
                            $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                            $userin->setNom_utilisateur($membrein->getNom_membre());
                            $userin->setLogin($code);
                            $userin->setPwd(md5($_POST["codesecret"]));
                            $userin->setDescription(NULL);
                            $userin->setUlock(0);
                            $userin->setCh_pwd_flog(0);
                        
                            $code_type_acteur = $_POST["code_type_acteur"];
            
                            $userin->setCode_groupe('personne_morale');
                            $userin->setCode_gac_filiere(NULL);
                            $userin->setCode_groupe_create('personne_morale');
                        
                            $userin->setConnecte(0);
                            $userin->setCode_agence($code_agence);
                            $userin->setCode_secteur(NULL);
                            $userin->setCode_zone($code_zone);
                            $userin->setId_filiere($id_filiere);
                    
                            $userin->setCode_acteur($acteur);
          
                            $userin->setCode_membre($code);
                            $userin->setId_pays($id_pays);        
                            $user_mapper->save($userin);
							
							
							// Mise à jour de la table eu_contrat
                            $contrat = new Application_Model_EuContrat();
                            $mapper_contrat = new Application_Model_EuContratMapper();
                            $id_contrat = $mapper_contrat->findConuter() + 1;
          
                            $contrat->setId_contrat($id_contrat);
                            $contrat->setCode_membre($code);
                            $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                            $contrat->setNature_contrat(NULL);
                            $contrat->setId_type_contrat(3);
                            $contrat->setId_type_creneau($id_type_creneau);
                            $contrat->setId_type_acteur($id_type_acteur);

                            $contrat->setId_pays($_POST['id_pays']);
                            $contrat->setId_utilisateur(NULL);
                            $contrat->setFiliere(''); 
                            $mapper_contrat->save($contrat);
							
							
							$tab_fs = new Application_Model_DbTable_EuFs();
                            $fs_model = new Application_Model_EuFs();
                            $fs_model->setCode_membre_morale($code)
                                     ->setCode_membre(NULL)
                                     ->setCode_fs('FS-' . $code)
                                     ->setCreditcode($sms_fs->getCreditCode())
                                     ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                     ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                     ->setId_utilisateur($utilisateur)
                                     ->setMont_fs($fs)
									 ->setOrigine_fs('A');
                            $tab_fs->insert($fs_model->toArray());
            
                            $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                                   ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fs);
						
						}
						if($code_fl !="") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;
             
                            $fl->setCode_fl($code_fl)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode())
							   ->setOrigine_fl('A');
                            $tfl->insert($fl->toArray());
                        
                            //Mise e jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            //$tcartes[0]="TPAGCP";
                            $tcartes[1]="TCNCSEI";
                            $tcartes[2]="TPAGCI";
                            $tcartes[3]="TIR";
                            $tcartes[4]="TR";
                            $tcartes[5]="TPaNu";
                            $tcartes[6]="TPaR";
                            $tcartes[7]="TFS";
                            $tcartes[8]="TPN";
                            $tcartes[9]="TIB";
                            $tcartes[10]="TPaNu";
                            $tcartes[11]="TIN";
                            $tcartes[12]="CAPA";
                            $tcartes[13]="TMARGE";
                            //$tcartes[14]="TRE";
            
                            for($i = 1; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                   $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NR';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                   $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NN';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                   $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NB';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TIN") {
                                   $tcartes[$i] = "TI"; 
                                   $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NN';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TIR") {
                                   $tcartes[$i] = "TI"; 
                                   $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NR';
                                   $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TIB") {
                                   $tcartes[$i] = "TI";
                                   $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                   $type_carte = 'NB';
                                   $res = $map_compte->find($code_compte,$compte);
                                }
                    
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                          ->setCode_compte($code_compte)
                                          ->setCode_membre(NULL)
                                          ->setCode_membre_morale($code)
                                          ->setCode_type_compte($type_carte)
                                          ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                          ->setDesactiver(0)
                                          ->setLib_compte($tcartes[$i])
                                         ->setSolde(0);
                                $map_compte->save($compte); 
                            }
                  
                        }
              
                        //$tscartes[0]="TSGCP";
                        $tscartes[1]="TSCNCSEI";
                        $tscartes[2]="TSGCI";
                        $tscartes[3]="TSCAPA";
                        $tscartes[4]="TSPaNu";
                        $tscartes[5]="TSPaR";
                        $tscartes[6]="TSFS";
                        $tscartes[7]="TSPN";
                        $tscartes[8]="TSIN";
                        $tscartes[9]="TSIB";
                        $tscartes[10]="TSIR";
                        $tscartes[11]="TSMARGE";
			            //$tscartes[12]="TSRE";
              
                        for($j = 1; $j < count($tscartes); $j++) {  
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR"
                                || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI"; 
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                  
                        } 
                    }
						
                        if($code_fkps !="") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[2])
                                  ->setCode_membre($code)
                                  ->setMont_carte($fkps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[2]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL)
							      ->setOrigine_fkps('A');
                            $t_carte->insert($carte->toArray());
                             
                            $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                     ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps); 
                        }						
		
		                $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP ! Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);
                        //$db->commit();
						$sessionmcnp->errorlogin = "Ré-activation du compte marchand membre personne morale bien effectuée ... ...";
                        $this->_redirect('/index/ancienmpmmcnp');
		            }  catch (Exception $exc) {
                        $db->rollback();
                        $this->view->code_type_acteur = $_POST["code_type_acteur"];
                        $this->view->code_statut = $_POST["code_statut"];
                        $this->view->raison_sociale = $_POST["raison_sociale"];
                        $this->view->domaine_activite = $_POST["domaine_activite"];
                        $this->view->site_web = $_POST["site_web"];
                        $this->view->quartier_membre = $_POST["quartier_membre"];
                        $this->view->ville_membre = $_POST["ville_membre"];
                        $this->view->bp = $_POST["bp_membre"];
                        $this->view->tel = $_POST["tel_membre"];
                        $this->view->email = $_POST["email_membre"];
                        $this->view->id_pays = $_POST["id_pays"];
                        $this->view->portable = $_POST["portable_membre"];
                        $this->view->registre = $_POST["num_registre_membre"];
                        $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        return;
                    }
		
		        }  else  {
				    $this->view->message = "Champs * obligatoire ...";
				    $this->view->code_type_acteur = $_POST["code_type_acteur"];
                    $this->view->code_statut = $_POST["code_statut"];
                    $this->view->raison_sociale = $_POST["raison_sociale"];
                    $this->view->domaine_activite = $_POST["domaine_activite"];
                    $this->view->site_web = $_POST["site_web"];
                    $this->view->quartier_membre = $_POST["quartier_membre"];
                    $this->view->ville_membre = $_POST["ville_membre"];
                    $this->view->bp = $_POST["bp_membre"];
                    $this->view->tel = $_POST["tel_membre"];
                    $this->view->email = $_POST["email_membre"];
                    $this->view->id_pays = $_POST["id_pays"];
                    $this->view->portable = $_POST["portable_membre"];
                    $this->view->registre = $_POST["num_registre_membre"];	
				}
		
		} else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');        
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->raison = $trouvmembre->raison_sociale;
            $this->view->code_rep = $trouvmembre->nom_membre." ".$trouvmembre->prenom_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
            $this->view->bp = $trouvmembre->bp_membre;
            $this->view->tel = $trouvmembre->tel_membre; 
            $this->view->portable = $trouvmembre->portable_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->site_web = $trouvmembre->site_web;
        }
	}
  
  


    public function ancienpmmcnpeditoldAction() {
        /* page index/ancienpmmcnpedit - Mise sur chaine ancienne personne morale MCNP */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
        if(isset($_POST['ok']) && $_POST['ok']=="ok"){
            if (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!="" && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="" && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!="" && isset($_POST['code_statut']) && $_POST['code_statut']!="" && isset($_POST['code_rep']) && $_POST['code_rep']!="" && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!="" && isset($_POST['ville_membre']) && $_POST['ville_membre']!="" && isset($_POST['portable_membre']) && $_POST['portable_membre']!="" && isset($_POST['id_pays']) && $_POST['id_pays']!="" && isset($_POST['code_agence']) && $_POST['code_agence']!="") {

            $offres_mapper = new Application_Model_EuAppeloffresMapper();
            $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
            $agrement_mapper = new Application_Model_EuAgrementMapper();
            $licence_mapper = new Application_Model_EuLicenceMapper();

            if($trouveagrementfiliere = $agrement_mapper->findagrementfiliere($_POST["numero_agrement_filiere"]) && $trouveagrementacnev = $agrement_mapper->findagrementacnev($_POST["numero_agrement_acnev"]) && $trouveagrementtechno = $agrement_mapper->findagrementtechno($_POST["numero_agrement_technopole"])){
               $utilisateur = NULL;
               //$groupe = $user->code_groupe;
               $code_agence = $_POST['code_agence'];
               $code_zone = substr($_POST['code_agence'], 0, 3);
               $id_pays = $_POST['id_pays'];
               $groupe = NULL;
               $table = new Application_Model_DbTable_EuActeur();
               $selection = $table->select();
               $selection->where('code_membre LIKE ?',$code_agence.'%');
               $selection->where('type_acteur LIKE ?','gac_surveillance');
               $resultat = $table->fetchAll($selection);
               $trouvacteursur = $resultat->current();
               $code_acteur = $trouvacteursur->code_acteur;
               $acteur      =  $code_acteur;
           
               $fs = Util_Utils::getParametre('FS','valeur');
               $mont_fl = Util_Utils::getParametre('FL','valeur');
               $fcps = Util_Utils::getParametre('FCPS','valeur');
           
               $date_id = new Zend_Date(Zend_Date::ISO_8601);
               $date_idd = clone $date_id;
               //$code_fs = $_POST["code_fs"];
               //$code_fl = $_POST["code_fl"];
               //$code_fkps = $_POST["code_fkps"];
               $sms_mapper = new Application_Model_EuSmsmoneyMapper();
         
           
           
              $date_id = new Zend_Date(Zend_Date::ISO_8601);
              $date_idd = clone $date_id;
         
              $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
                  $agrement_mapper = new Application_Model_EuAgrementMapper();
                  $agrement        = new Application_Model_EuAgrement();
                  $compte = new Application_Model_EuCompte();
                  $map_compte = new Application_Model_EuCompteMapper();
           
                  $agrement_filiere  =  $_POST["numero_agrement_filiere"];
                  $agrement_acnev    =  $_POST["numero_agrement_acnev"];
                  $agrement_technopole =  $_POST["numero_agrement_technopole"];
                  $code_agence = $code_agence;
                  $fs = Util_Utils::getParametre('FS', 'valeur');
           
                    //insertion dans la table membremorale des information du nouveau membre
                    $membre = new Application_Model_EuMembreMorale();
                    $mapper = new Application_Model_EuMembreMoraleMapper();
                    $membre1 = new Application_Model_EuMembreMorale();
                    $mapper1 = new Application_Model_EuMembreMoraleMapper();
                    $code = $mapper->getLastCodeMembreByAgence($code_agence);
                    if ($code == NULL) {
                      $code = $code_agence . '0000001' . 'M';
                    } else {
                      $num_ordre = substr($code, 12, 7);
                      $num_ordre++;
                      $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                      $code = $code_agence . $num_ordre_bis . 'M';
                    }
           
                   //insertion dans la table eu_operation
                   $mapper_op = new Application_Model_EuOperationMapper();
                   $compteur = $mapper_op->findConuter() + 1;
            
                   $trouveagrementfiliere = $agrement_mapper->findagrementfiliere($agrement_filiere);
                   $trouveagrementacnev = $agrement_mapper->findagrementacnev($agrement_acnev);
                   $trouveagrementtechno = $agrement_mapper->findagrementtechno($agrement_technopole);
           
                   if($trouveagrementfiliere != FALSE) {
                        $result = $agrement_mapper->find($trouveagrementfiliere->getId_agrement(),$agrement);
					    $id_type_acteur = $agrement->getId_type_acteur();
					    $id_type_creneau = $agrement->getId_type_creneau();
						$id_filiere = $agrement->getId_filiere();
                        $agrement->setCode_membre_morale($code);
                        $agrement_mapper->update($agrement);
            
                        $resmembre = $mapper1->find($agrement->getCode_membre_morale_agrement(),$membre1);
                        $membre->setId_filiere($id_filiere);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($_POST["code_type_acteur"]);
                        $membre->setCode_statut($_POST["code_statut"]);
                        $membre->setRaison_sociale(addslashes (trim ($_POST["raison_sociale"])));
                        $membre->setId_pays($_POST["id_pays"]);
                        $membre->setNum_registre_membre($_POST["num_registre_membre"]);
                        $membre->setDomaine_activite(addslashes (trim ($_POST["domaine_activite"])));
                        $membre->setSite_web(addslashes (trim ($_POST["site_web"])));
                        $membre->setQuartier_membre(addslashes (trim ($_POST["quartier_membre"])));
                        $membre->setVille_membre(addslashes (trim ($_POST["ville_membre"])));
                        $membre->setBp_membre($_POST["bp_membre"]);
                        $membre->setTel_membre($_POST["tel_membre"]);
                        $membre->setEmail_membre($_POST["email_membre"]);
                        $membre->setPortable_membre($_POST["portable_membre"]);
                        $membre->setId_utilisateur($utilisateur);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($_POST["codesecret"]));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre('A');
                        $mapper->save($membre);
            
            
                // eu_acteurs_creneau
                $cm = new Application_Model_EuActeurCreneauMapper();
                $acren = new Application_Model_EuActeurCreneau();
              
                $acren->setNom_acteur(addslashes (trim ($_POST["raison_sociale"])));
                $acren->setCode_membre($code);
                $acren->setId_type_acteur($id_type_acteur);
            
                //$acren->setCode_activite(NULL);
                $acren->setCode_membre_gestionnaire($_POST['code_rep']);
                $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                $acren->setId_utilisateur($utilisateur);
                $acren->setGroupe($groupe);
                $acren->setCode_creneau(NULL);
                $acren->setCode_gac_filiere(NULL);
                $acren->setCode_gac(NULL);
              
              
                $code_zone = $code_zone;
                $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                if ($code_acteur == NULL) {
                    $code_acteur = 'A' . $code_zone . '0001';
                } else {
                    $num_ordre = substr($code_acteur, -4);
                    $num_ordre++;
                    $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                }
            
                $acren->setCode_acteur($code_acteur);
                $acren->setId_filiere($id_filiere);
                $cm->save($acren);  
              
                // eu_operation
                Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
             
            //insertion dans la table eu_representation
            $rep_mapper = new Application_Model_EuRepresentationMapper();
            $rep = new Application_Model_EuRepresentation();
            $rep->setCode_membre_morale($code)
                ->setCode_membre($_POST['code_rep'])
                ->setTitre("Representant")
                ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                ->setId_utilisateur(NULL)
                ->setEtat('inside');
            $rep_mapper->save($rep);
            
			
            //insertion dans la table eu_compte_bancaire
			$cb_mapper = new Application_Model_EuCompteBancaireMapper();
            $cb = new Application_Model_EuCompteBancaire();
            for($i = 0; $i < count($_POST['code_banque']); $i++) {
                $cb_compteur = $cb_mapper->findConuter() + 1;         
                $cb->setCode_banque($_POST['code_banque'][$i])
                   ->setId_compte($cb_compteur)
                   ->setCode_membre(NULL)
                   ->setCode_membre_morale($code)
                   ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                $cb_mapper->save($cb);
            }

            } else {
                $db->rollBack();
                $this->view->message = " Le numéro agrément de la filière est invalide ou est déjà utilisé";
                $this->view->type_acteur = $_POST["code_type_acteur"];
                $this->view->statut_juridique = $_POST["code_statut"];
                $this->view->raison = $_POST["raison_sociale"];
                $this->view->domaine_activite = $_POST["domaine_activite"];
                $this->view->site_web = $_POST["site_web"];
                $this->view->quartier_membre = $_POST["quartier_membre"];
                $this->view->ville_membre = $_POST["ville_membre"];
                $this->view->bp = $_POST["bp_membre"];
                $this->view->tel = $_POST["tel_membre"];
                $this->view->email = $_POST["email_membre"];
                $this->view->portable = $_POST["portable_membre"];
                $this->view->registre = $_POST["num_registre_membre"];
                return;
            }
           
            if($trouveagrementacnev != FALSE) {
                $result = $agrement_mapper->find($trouveagrementacnev->getId_agrement(),$agrement);
                $agrement->setCode_membre_morale($code);
                $agrement_mapper->update($agrement);     
            } else {
                $db->rollBack();
                $this->view->message = " Le numéro agrément de l'acnev est invalide ou est déjà utilisé";
                $this->view->type_acteur = $_POST["code_type_acteur"];
                $this->view->statut_juridique = $_POST["code_statut"];
                $this->view->raison = $_POST["raison_sociale"];
                $this->view->domaine_activite = $_POST["domaine_activite"];
                $this->view->site_web = $_POST["site_web"];
                $this->view->quartier_membre = $_POST["quartier_membre"];
                $this->view->ville_membre = $_POST["ville_membre"];
                $this->view->bp = $_POST["bp_membre"];
                $this->view->tel = $_POST["tel_membre"];
                $this->view->email = $_POST["email_membre"];
                $this->view->portable = $_POST["portable_membre"];
                $this->view->registre = $_POST["num_registre_membre"];
                return;
            }
          
          
          if($trouveagrementtechno != FALSE) {
               $result = $agrement_mapper->find($trouveagrementtechno->getId_agrement(),$agrement);
               $agrement->setCode_membre_morale($code);
               $agrement_mapper->update($agrement);      
            } else {
                $db->rollBack();
                $this->view->message = " Le numéro agrément de la technopole est invalide ou est déjà utilisé";
                $this->view->type_acteur = $_POST["code_type_acteur"];
                $this->view->statut_juridique = $_POST["code_statut"];
                $this->view->raison = $_POST["raison_sociale"];
                $this->view->domaine_activite = $_POST["domaine_activite"];
                $this->view->site_web = $_POST["site_web"];
                $this->view->quartier_membre = $_POST["quartier_membre"];
                $this->view->ville_membre = $_POST["ville_membre"];
                $this->view->bp = $_POST["bp_membre"];
                $this->view->tel = $_POST["tel_membre"];
                $this->view->email = $_POST["email_membre"];
                $this->view->portable = $_POST["portable_membre"];
                $this->view->registre = $_POST["num_registre_membre"];
                return;
            } 
           
            $filiere =  new Application_Model_EuFiliere();
            $map_filiere = new Application_Model_EuFiliereMapper();
            $find_filiere = $map_filiere->find($membre1->getId_filiere(),$filiere);
           
            $t_acteur = new Application_Model_DbTable_EuActeur();
            $c_acteur = new Application_Model_EuActeur();
            $table = new Application_Model_DbTable_EuActeur();
            $select = $table->select();
            $select->where('code_acteur like ?', $acteur);
            $resultSet = $table->fetchAll($select);
            $ligneacteur = $resultSet->current();
            $count = $c_acteur->findConuter() + 1;
            $c_acteur->setId_acteur($count)
                    ->setCode_acteur(NULL)
                    ->setCode_division($filiere->getCode_division())
                    ->setCode_membre($code)
                    ->setId_utilisateur($utilisateur)
                    ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
              
            if($trouveagrementfiliere->id_type_acteur == 3) {
                $c_acteur->setCode_activite('detaillant');
                $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                $c_acteur->setId_pays($ligneacteur->id_pays);
                $c_acteur->setId_region($ligneacteur->id_region);
                $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
            } elseif($trouveagrementfiliere->id_type_acteur == 2) {
                $c_acteur->setCode_activite('semi-grossiste');
                $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                $c_acteur->setId_pays($ligneacteur->id_pays);
                $c_acteur->setId_region($ligneacteur->id_region);
                $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
            } elseif($trouveagrementfiliere->id_type_acteur == 1) {
                $c_acteur->setCode_activite('grossiste');
                $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                $c_acteur->setId_pays($ligneacteur->id_pays);
                $c_acteur->setId_region($ligneacteur->id_region);
                $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
            }
                $c_acteur->setType_acteur('DSMS');
                $c_acteur->setCode_gac_chaine($acteur);
                $t_acteur->insert($c_acteur->toArray());
                //R�cup�ration de la PRK nr
                $param = new Application_Model_EuParametresMapper();
                $par = new Application_Model_EuParametres();
                $prc = 0;
                $par_prc = $param->find('prc', 'nr', $par);
                if ($par_prc == true) {
                    $prc = $par->getMontant();
                }
             
                $te_mapper = new Application_Model_EuTegcMapper();
                $te = new Application_Model_EuTegc();
                $code_te = 'TEGCP' .$membre1->getId_filiere(). $code;
                $find_te = $te_mapper->find($code_te,$te);
                if ($find_te == false) {
                    $te->setCode_tegc($code_te)
                       ->setId_filiere($membre1->getId_filiere())
                       ->setMdv($prc)
                       ->setCode_membre($code)
                       ->setMontant(0)
                       ->setMontant_utilise(0)
                       ->setSolde_tegc(0);
                          $te_mapper->save($te);
                } else  {
                    $te->setId_filiere($id_filiere);
                    $te->setMdv($prc);
                    $te_mapper->update($te);
                }
                
                // table EU_UTILISATEUR
                $user_mapper = new Application_Model_EuUtilisateurMapper();
                $userin = new Application_Model_EuUtilisateur();
                $membre_mapper = new Application_Model_EuMembreMapper();
                $membrein = new Application_Model_EuMembre();         
                $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                $id_user = $user_mapper->findConuter() + 1;
          
                $userin->setId_utilisateur($id_user);
                $userin->setId_utilisateur_parent($utilisateur); 
                $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                $userin->setNom_utilisateur($membrein->getNom_membre());
                $userin->setLogin($code);
                $userin->setPwd(md5($_POST["codesecret"]));
                $userin->setDescription(NULL);
                $userin->setUlock(0);
                $userin->setCh_pwd_flog(0);

                if($trouveagrementfiliere->id_type_acteur == 3) {
                    $userin->setCode_groupe('oe_detaillant');
                    $userin->setCode_gac_filiere('oe_detaillant');
                    $userin->setCode_groupe_create('oe_detaillant');
                } elseif($trouveagrementfiliere->id_type_acteur == 2) {
                    $userin->setCode_groupe('oe_semi_grossiste');
                    $userin->setCode_gac_filiere(NULL);
                    $userin->setCode_groupe_create('oe_semi_grossiste');
                } elseif($trouveagrementfiliere->id_type_acteur == 1) {
                    $userin->setCode_groupe('oe_grossiste');
                    $userin->setCode_gac_filiere(NULL);
                    $userin->setCode_groupe_create('oe_grossiste');
                }
                    $userin->setConnecte(0);
                    $userin->setCode_agence($code_agence);
                    $userin->setCode_secteur(NULL);
                    $userin->setCode_zone($code_zone);
                    $userin->setId_filiere($id_filiere);
                    
                $userin->setCode_acteur($acteur);
          
                $userin->setCode_membre($code);
                $userin->setId_pays($id_pays);        
                $user_mapper->save($userin);

                    // Mise à jour de la table eu_contrat
                $contrat = new Application_Model_EuContrat();
                $mapper_contrat = new Application_Model_EuContratMapper();
                $id_contrat = $mapper_contrat->findConuter() + 1;
          
                $contrat->setId_contrat($id_contrat);
                $contrat->setCode_membre($code);
                $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                $contrat->setNature_contrat(NULL);
                $contrat->setId_type_contrat(NULL);
                $contrat->setId_type_creneau($id_type_creneau);
                $contrat->setId_type_acteur($id_type_acteur);
                $contrat->setId_pays($_POST['id_pays']);
                $contrat->setId_utilisateur(NULL);
                $contrat->setFiliere(''); 
                    
                $mapper_contrat->save($contrat);
          
                $tfl = new Application_Model_DbTable_EuFl();
                $fl = new Application_Model_EuFl();
                $tafl = new Application_Model_DbTable_EuAncienFl();
                $afl = new Application_Model_EuAncienFl();
                $code_fl = 'FL-'.$_POST["ancien_code_membre"];
                $result = $tafl->find($code_fl);
          
                $tcartes = array();
                $tscartes = array();
          
                if ((count($result) > 0) || ($_POST["code_fl"] != "" && $smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL"))) {
                    if (count($result) > 0) {
                        $code_afl = 'FL-'.$code;
                        $mont_fl = Util_Utils::getParametre('FL','valeur'); 
                        $fl->setCode_fl($code_afl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode(NULL);
                        $tfl->insert($fl->toArray());
            } else if ($_POST["code_fl"] != "" && $smsmoneyFL = $smsmoneyM->findByCreditCode9($_POST['code_fl'], "FL")) {
                    $mont_fl = Util_Utils::getParametre('FL','valeur'); 
                    $sms_fl = $sms_mapper->findByCreditCode($_POST["code_fl"]);
                    $tfl = new Application_Model_DbTable_EuFl();
                    $fl = new Application_Model_EuFl();
                    $code_fl = 'FL-' . $code;
                    $fl->setCode_fl($code_fl)
                       ->setCode_membre(NULL)
                       ->setCode_membre_morale($code)
                       ->setMont_fl($mont_fl)
                       ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                       ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                       ->setId_utilisateur(NULL)
                       ->setCreditcode($sms_fl->getCreditCode());
                    $tfl->insert($fl->toArray());
                        
                //Mise e jour du compte general FGFL
                $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                $cg_fgfn = new Application_Model_EuCompteGeneral();
                $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                if ($result3) {
                    $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                    $cg_mapper->update($cg_fgfn);
                } else {
                    $cg_fgfn->setCode_compte('FL')
                            ->setIntitule('Frais de licence')
                            ->setService('E')
                            ->setCode_type_compte('NN')
                            ->setSolde($mont_fl);
                    $cg_mapper->save($cg_fgfn);
                }
                $compteurfl = $mapper_op->findConuter() + 1;
                Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);
            
                $sms_fl->setDestAccount_Consumed('FL-'.$code)
                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                $sms_mapper->update($sms_fl);
            
            }
            
            
            
            
            $tcartes[0]="TPAGCP";
            $tcartes[1]="TCNCSEI";
            $tcartes[2]="TPAGCI";
            $tcartes[3]="TIR";
            $tcartes[4]="TR";
            $tcartes[5]="TPaNu";
            $tcartes[6]="TPaR";
            $tcartes[7]="TFS";
            $tcartes[8]="TPN";
            $tcartes[9]="TIB";
            $tcartes[10]="TPaNu";
            $tcartes[11]="TIN";
            $tcartes[12]="CAPA";
            $tcartes[13]="TMARGE";
            $tcartes[14]="TRE";
                  
                  for($i = 0; $i < count($tcartes); $i++) {
                      if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                          $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                      $type_carte = 'NR';
                        $res = $map_compte->find($code_compte,$compte);
                    } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                          $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                      $type_carte = 'NN';
                        $res = $map_compte->find($code_compte,$compte);
                    } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                        $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                        $type_carte = 'NB';
                          $res = $map_compte->find($code_compte,$compte);
                    } elseif($tcartes[$i] == "TIN") {
                        $tcartes[$i] = "TI"; 
                        $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                        $type_carte = 'NN';
                          $res = $map_compte->find($code_compte,$compte);
                    } elseif($tcartes[$i] == "TIR") {
                        $tcartes[$i] = "TI"; 
                        $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                        $type_carte = 'NR';
                          $res = $map_compte->find($code_compte,$compte);
                    } elseif($tcartes[$i] == "TIB") {
                        $tcartes[$i] = "TI";
                        $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                        $type_carte = 'NB';
                          $res = $map_compte->find($code_compte,$compte);
                    }
                    
                    if(!$res) {
                                          $compte->setCode_cat($tcartes[$i])
                                                 ->setCode_compte($code_compte)
                                                 ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                                                 ->setCode_type_compte($type_carte)
                                                 ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte($tcartes[$i])
                                                 ->setSolde(0);
                      $map_compte->save($compte);
                  
                      }
                  
                                    }
                  
                  $tscartes[0]="TSGCP";
                  $tscartes[1]="TSCNCSEI";
                  $tscartes[2]="TSGCI";
                  $tscartes[3]="TSCAPA";
                  $tscartes[4]="TSPaNu";
                  $tscartes[5]="TSPaR";
                  $tscartes[6]="TSFS";
                  $tscartes[7]="TSPN";
                  $tscartes[8]="TSIN";
                  $tscartes[9]="TSIB";
                  $tscartes[10]="TSIR";
                  $tscartes[11]="TSMARGE";
                  
                  for($j = 0; $j < count($tscartes); $j++) {
                  
                      if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                          $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                      $type_carte = 'NR';
                        $res = $map_compte->find($code_comptets,$compte);
                    } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE") {
                                          $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                      $type_carte = 'NN';
                        $res = $map_compte->find($code_comptets,$compte);
                    } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR"
                      || $tscartes[$j] == "TSFS") {
                        $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                        $type_carte = 'NB';
                          $res = $map_compte->find($code_comptets,$compte);
                    } elseif($tscartes[$j] == "TSIN") {
                        $tscartes[$j] = "TSI"; 
                        $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                        $type_carte = 'NN';
                          $res = $map_compte->find($code_comptets,$compte);
                    } elseif($tscartes[$j] == "TSIR") {
                        $tscartes[$j] = "TSI"; 
                        $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                        $type_carte = 'NR';
                          $res = $map_compte->find($code_comptets,$compte);
                    } elseif($tscartes[$j] == "TSIB") {
                        $tscartes[$j] = "TSI";
                        $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                        $type_carte = 'NB';
                          $res = $map_compte->find($code_comptets,$compte);
                    }
                    
                    if(!$res) {
                                          $compte->setCode_cat($tscartes[$j])
                                                 ->setCode_compte($code_comptets)
                                                 ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                                                 ->setCode_type_compte($type_carte)
                                                 ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte($tscartes[$j])
                                                 ->setSolde(0);
                      $map_compte->save($compte);
                    }
                  
                } 
          
            } else {
                   $db->rollBack();
                   $this->view->message = "Vous devez payer les frais de licence";
                   $this->view->type_acteur = $_POST["code_type_acteur"];
                           $this->view->statut_juridique = $_POST["code_statut"];
                           $this->view->raison = $_POST["raison_sociale"];
                           $this->view->domaine_activite = $_POST["domaine_activite"];
                           $this->view->site_web = $_POST["site_web"];
                           $this->view->quartier_membre = $_POST["quartier_membre"];
                           $this->view->ville_membre = $_POST["ville_membre"];
                           $this->view->bp = $_POST["bp_membre"];
                           $this->view->tel = $_POST["tel_membre"];
                           $this->view->email = $_POST["email_membre"];
                           $this->view->portable = $_POST["portable_membre"];
                           $this->view->registre = $_POST["num_registre_membre"];
                           return;
            }
          
          
          
          
           //Mise à jour de la table morale
                     $m_mapper = new Application_Model_EuAncienMembreMapper();
                     $m = new Application_Model_EuAncienMembre();
                     $rep = $m_mapper->find($_POST["ancien_code_membre"],$m);
                     if ($rep == true) {
                       $m->setEtat_contrat(1)
                 ->setCode_membre($code);
                       $m_mapper->update($m);
                     }
           $compteur = Util_Utils::findConuter() + 1;
                     Util_Utils::addSms($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau MCNP! Votre numero de membre est: " . $code . ". Votre Code Secret est: " . $_POST["codesecret"]);
                $db->commit();
                //return $this->_helper->redirector('morale', 'eu-membre', NULL, array('controller' => 'eu-membre-ancien', 'action' => 'morale'));
        } catch (Exception $exc) {
             $db->rollback();
           $this->view->type_acteur = $_POST["code_type_acteur"];
                   $this->view->statut_juridique = $_POST["code_statut"];
                   $this->view->raison = $_POST["raison_sociale"];
                   $this->view->domaine_activite = $_POST["domaine_activite"];
                   $this->view->site_web = $_POST["site_web"];
                   $this->view->quartier_membre = $_POST["quartier_membre"];
                   $this->view->ville_membre = $_POST["ville_membre"];
                   $this->view->bp = $_POST["bp_membre"];
                   $this->view->tel = $_POST["tel_membre"];
                   $this->view->email = $_POST["email_membre"];
           $this->view->id_pays = $_POST["id_pays"];
                   $this->view->portable = $_POST["portable_membre"];
                   $this->view->registre = $_POST["num_registre_membre"];
             $this->view->message = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
              }
      
          

/*          */          

      $sessionmcnp->errorlogin = "Ré-activation du compte marchand membre personne morale bien effectuée ...";
      $this->_redirect('/index/ancienpmmcnp');
    //$this->_redirect('/');
    } else {  $this->view->message = "Vérifier bien les numéros agréments...";  } 
    } else {  $this->view->message = "Champs * obligatoire ...";  } 
    } else {
      
            $id = (string)$this->_request->getParam('id');
      
           $tabela = new Application_Model_DbTable_EuAncienMembre();
       $select = $tabela->select();
           $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                  ->where('ancien_code_membre LIKE ?', '%'.$id.'%')
          ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');        
    $memb = $tabela->fetchAll($select);
    $trouvmembre = $memb->current();

$this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
$this->view->raison = $trouvmembre->raison_sociale;
$this->view->code_rep = $trouvmembre->nom_membre." ".$trouvmembre->prenom_membre;
$this->view->quartier_membre = $trouvmembre->quartier_membre;
$this->view->ville_membre = $trouvmembre->ville_membre;
$this->view->bp = $trouvmembre->bp_membre;
$this->view->tel = $trouvmembre->tel_membre; 
$this->view->portable = $trouvmembre->portable_membre;
$this->view->email = $trouvmembre->email_membre;
$this->view->site_web = $trouvmembre->site_web;
      


      }
    
    }









    public function addsouscriptionAction() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		$param = (int)$this->_request->getParam('param');
	    $this->view->param = $param;
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
		$request = $this->getRequest ();
		if ($request->isPost ()) {
		
		    if (isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="" 
			    && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!="" 
				&& isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!="" 
				&& isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="" 
				&& isset($_POST['code_activite']) && $_POST['code_activite']!="" 
				&& isset($_POST['souscription_type']) && $_POST['souscription_type']!="" 
				&& isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="" 
				&& isset($_POST['souscription_date_numero']) && $_POST['souscription_date_numero']!="0000-00-00" 
				&& isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!="" 
				&& isset($_POST['souscription_montant']) && $_POST['souscription_montant']!=""
				&& isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="" && verif_img($_FILES['souscription_vignette']['name']) == 1 
				) {
		
		            $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
					try {
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select();
			            if($_POST['souscription_personne'] == "PP") {
	                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("souscription_nom"))));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("souscription_prenom"))));
			            } else {
	                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("souscription_raison"))));
			            }
	                    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			              $souscription_ok = 0;
			            }
						
                        /////////////////controle numero de banque
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select()
                                                //->where('souscription_banque = ?',$request->getParam("souscription_banque"))
                                                ->where('souscription_numero = ?',$request->getParam("souscription_numero"))
                                                ;
                        if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_numero") != "") {
                            $db->rollback();
                            $this->view->param = $param;
                            $sessionmcnp->error = "Numéro de banque déjà utilisé ...";
                            $this->_redirect('/index/addsouscription/param/'.$param);
                            return; 
                        }


                        /////////////////controle login
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
                        if ($rowseusouscription = $eusouscription->fetchRow($select) && ($request->getParam("souscription_login") != "" && $request->getParam("souscription_login") != NULL) && $souscription_ok == 0) {
                            $db->rollback();
                            $this->view->param = $param;
                            $sessionmcnp->error = "Login déjà existant ...";
                            $this->_redirect('/index/addsouscription/param/'.$param);
                            return; 
                        }  else if($request->getParam("souscription_passe") != $request->getParam("confirme")) {
                            $db->rollback();
                            $this->view->param = $param;
                            $sessionmcnp->error = "Mot de passe incorret ...";
                            $this->_redirect('/index/addsouscription/param/'.$param);
                            return; 
                        
                        } else {
						    $date_id = Zend_Date::now();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();
		
		                    include("Transfert.php");
		                    if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
		                        $chemin	= "souscriptions";
		                        $file = $_FILES['souscription_vignette']['name'];
		                        $file1='souscription_vignette';
		                        $souscription_vignette = $chemin."/".transfert($chemin,$file1);
		                    } else {$souscription_vignette = "";}
							
							$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne($request->getParam("souscription_personne"));
			                if($_POST['souscription_personne'] == "PP") {
                                $souscription->setSouscription_nom($request->getParam("souscription_nom"));
                                $souscription->setSouscription_prenom($request->getParam("souscription_prenom"));
			                } else {
                                $souscription->setSouscription_raison($request->getParam("souscription_raison"));
                                $souscription->setCode_type_acteur($request->getParam("type_acteur"));
                                $souscription->setCode_statut($request->getParam("statut_juridique"));
			                }
                            $souscription->setSouscription_email($request->getParam("souscription_email"));
                            $souscription->setSouscription_mobile($request->getParam("souscription_mobile"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type($request->getParam("souscription_type"));
                            $souscription->setSouscription_numero($request->getParam("souscription_numero"));
                            $souscription->setSouscription_date_numero($request->getParam("souscription_date_numero"));
			                if($_POST['souscription_type'] == "Banque") {
                                $souscription->setSouscription_banque($request->getParam("souscription_banque"));
			                }
                            $souscription->setSouscription_montant($request->getParam("souscription_montant"));
                            $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                            $souscription->setSouscription_programme($request->getParam("souscription_programme"));
                            $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
                            //$souscription->setSouscription_filiere($_POST['souscription_filiere']);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $souscription->setSouscription_vignette($souscription_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("souscription_ville"));
                            $souscription->setSouscription_quartier($request->getParam("souscription_quartier"));
			                if($_POST['souscription_programme'] == "CMFH") {
                                $souscription->setSouscription_login($request->getParam("souscription_login"));
                                $souscription->setSouscription_passe($request->getParam("souscription_passe"));
			                }
			                if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
				            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
					        }
            
                            $souscription->setSouscription_autonome($request->getParam("souscription_autonome"));
			                $souscription->setPublier(0);
							$souscription->setErreur(0);
							$souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);
							
							
							///////////////////////////////////////////////////////////////////////////////////////
							
							$recubancaire = new Application_Model_EuRecubancaire();
                            $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
		
                            $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
                            $recubancaire->setRecubancaire_id($compteur_recubancaire);
                            $recubancaire->setRecubancaire_type($request->getParam("souscription_type"));
                            $recubancaire->setRecubancaire_numero($request->getParam("souscription_numero"));
                            $recubancaire->setRecubancaire_date_numero($request->getParam("souscription_date_numero"));
			                if($_POST['souscription_type'] == "Banque") {
                                $recubancaire->setRecubancaire_banque($request->getParam("souscription_banque"));
			                }
                            $recubancaire->setRecubancaire_montant($request->getParam("souscription_montant"));
                            $recubancaire->setRecubancaire_vignette($souscription_vignette);
                            $recubancaire->setRecubancaire_souscription($compteur_souscription);
			                $recubancaire->setPublier(1);
                            $recubancaire_mapper->save($recubancaire);
							
							/////////////////////////////////////////////////////////////////////////////////////////////
							$association = new Application_Model_EuAssociation();
                            $m_association = new Application_Model_EuAssociationMapper();
		                    $m_association->find(1, $association);
		                    $code_agence = $association->code_agence;
							
							/*if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
			
			                    if($_POST['souscription_programme'] == "KACM"){
			                        $partagea_montant = floor(($_POST['souscription_montant'] / 100 * 10) / 2);
				                } else {
			                        $partagea_montant = floor(($_POST['souscription_montant'] / 100 * 5) / 2);
					            }
			
		                    } else {
			                    if($_POST['souscription_programme'] == "KACM"){
			                       $partagea_montant = floor($_POST['souscription_montant'] / 100 * 10);
				                } else {
			                       $partagea_montant = floor($_POST['souscription_montant'] / 100 * 5);
					            }
		                    }*/
							
							//////////////////////////////////////////////////////////////////////////////////////////////
							    /*$partagea = new Application_Model_EuPartagea();
                                $partagea_mapper = new Application_Model_EuPartageaMapper();

                                $compteur_partagea = $partagea_mapper->findConuter() + 1;
                                $partagea->setPartagea_id($compteur_partagea);
                                $partagea->setPartagea_association(1);
                                $partagea->setPartagea_souscription($compteur_souscription);
                                $partagea->setPartagea_montant($partagea_montant * 0.75);
                                $partagea_mapper->save($partagea);*/
								
							////////////////////////////////////////////////////////////////////////////////////////////////
                                /*$partagem = new Application_Model_EuPartagem();
                                $partagem_mapper = new Application_Model_EuPartagemMapper();

                                $compteur_partagem = $partagem_mapper->findConuter() + 1;
                                $partagem->setPartagem_id($compteur_partagem);
                                $partagem->setPartagem_membreasso(1);
                                $partagem->setPartagem_souscription($compteur_souscription);
                                $partagem->setPartagem_montant($partagea_montant * 0.25);
                                $partagem_mapper->save($partagem);*/
								
                            //////////////////////////////////////////
                                /*$membreasso = new Application_Model_EuMembreasso();
                                $m_membreasso = new Application_Model_EuMembreassoMapper();
		                        $m_membreasso->find(1, $membreasso);*/

                                $html = "";
                                if($_POST['souscription_personne'] == "PP") {
                                    $html .= "Nom : ".$request->getParam("souscription_nom")."<br />";
                                    $html .= "Prenom : ".$request->getParam("souscription_prenom")."<br />";
			                    } else {
                                    $html .= "Raison sociale : ".$request->getParam("souscription_raison")."<br />";
                                    if($_POST["type_acteur"] == 'EI'){$html .= "Type Association : Entreprise Industrie<br />";}
                                    if($_POST["type_acteur"] == 'OE'){$html .= "Type Association : Op&eacute;rateur Economique<br />";}
                                    if($_POST["type_acteur"] == 'OSE'){$html .= "Type Association : Op&eacute;rateur Socio-Economique<br />";}
                                    if($_POST["type_acteur"] == 'PEI'){$html .= "Type Association : Partenaire Entreprise Industrie<br />";}
                                    if($_POST["type_acteur"] == 'POE'){$html .= "Type Association : Partenaire Op&eacute;rateur Economique<br />";}
                                    if($_POST["type_acteur"] == 'POSE'){$html .= "Type Association : Partenaire Op&eacute;rateur Socio-Economique<br />";}

                                    $statutjuridique = new Application_Model_EuStatutJuridique();
                                    $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                                    $statutjuridiqueM->find($request->getParam("statut_juridique"), $statutjuridique);
                                    $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br />";
			                    }
								
                                $html .= "E-mail : ".$request->getParam("souscription_email")."<br />";
                                $html .= "Mobile : ".$request->getParam("souscription_mobile")."<br />";
                                $html .= "Ville : ".$request->getParam("souscription_ville")."<br/>";
                                $html .= "Quartier : ".$request->getParam("souscription_quartier")."<br />";
                                $html .= "Programme : ".$request->getParam("souscription_programme")."<br />";	
                               
								if(isset($_POST['souscription_type_candidat']) && $_POST['souscription_type_candidat']!="") {
                                    $type_candidatM = new Application_Model_DbTable_EuTypeCandidat();
                                    $type_candidat = $type_candidatM->find($request->getParam("souscription_type_candidat"));
									$row = $type_candidat->current();
                                    $html .= "Type candidat : ".$row->libelle_type_candidat."<br />";	
								}

                                /*
                                $filiere = new Application_Model_EuFiliere();
                                $filiereM = new Application_Model_EuFiliereMapper();
                                $filiereM->find($_POST['souscription_filiere'], $filiere);
                                $html .= "Filiere : ".$filiere->nom_filiere."<br />";*/	
                                
								if(isset($_POST['code_activite']) && $_POST['code_activite']!="") {
                                $activiteM = new Application_Model_DbTable_EuActivite();
                                $activite = $activiteM->find($request->getParam("code_activite"));
								$row = $activite->current();
                                $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";
								}
								if(isset($_POST['id_metier']) && $_POST['id_metier']!="") {
								$metierM = new Application_Model_DbTable_EuMetier();
                                $metier = $metierM->find($request->getParam("id_metier"));
								$row = $metier->current();
                                $html .= "M&eacute;tier : ".$row->libelle_metier."<br />";
                                }
								if(isset($_POST['id_competence']) && $_POST['id_competence']!="") {
                                $competenceM = new Application_Model_DbTable_EuCompetence();
                                $competence = $competenceM->find($request->getParam("id_competence"));
 								$row = $competence->current();
                               $html .= "Comp&eacute;tence : ".$row->libelle_competence."<br />";
								}
								
								$html .= "Type : ".$request->getParam("souscription_type")."<br/>";

			                    if($_POST['souscription_type'] == "Banque") {
                                    $banque = new Application_Model_EuBanque();
                                    $banqueM = new Application_Model_EuBanqueMapper();
                                    $banqueM->find($request->getParam("souscription_banque"), $banque);
                                    $html .= "Banque : ".$banque->libelle_banque."<br/>";
			                    }
								
								$html .= "Numero Re&ccedil;u Banque ou Num&eacute;ro Transaction Flooz: ".$request->getParam("souscription_numero")."<br/>";
                                $html .= "Date Re&ccedil;u Banque ou Transaction Flooz: ".$request->getParam("souscription_date_numero")."<br/>";
                                $html .= "Montant : ".$request->getParam("souscription_montant")."<br/>";
                                $html .= "Nombre : ".$request->getParam("souscription_nombre")."<br/>";

                                $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                                $html .= "Vignette : <a href='https://esmcgie.com/".$souscription_vignette."'>".$souscription_vignette."</a><br />";

                                $html .= "Agr&eacute;ment OSE/OE: ".$association->association_nom."<br />";
			
                                //$esmc_email	 = "achatcmmcnp@esmcgacsource.com";	
                                $esmc_email	 = Util_Utils::getParamEsmc(3);	
					
                                $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                                Zend_Mail::setDefaultTransport($tr);		
                                $mail = new Zend_Mail();
                                //$mail->setBodyText('Mon texte de test');
                                $mail->setBodyHtml($html);
                                $mail->setFrom(Util_Utils::getParamEsmc(3), $association->association_nom);
                                $mail->addTo($esmc_email, "ESMC - SIF");
                                $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));

                                $mail->send();
								
								if(isset($_POST['souscription_mobilisateur']) && $_POST['souscription_mobilisateur'] == 1) {
								
								    $date_id = Zend_Date::now();
                                    $association = new Application_Model_EuAssociation();
                                    $association_mapper = new Application_Model_EuAssociationMapper();
			
                                    $compteur_association = $association_mapper->findConuter() + 1;
                                    $association->setAssociation_id($compteur_association);
                                    $association->setAssociation_mobile($request->getParam("souscription_mobile"));
                                    $association->setAssociation_nom($request->getParam("souscription_nom")." ".$request->getParam("souscription_prenom"));
                                    $association->setAssociation_numero($compteur_association."PP");
                                    $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                    $association->setAssociation_email($request->getParam("souscription_email"));
                                    $association->setAssociation_recepisse(NULL);
                                    $association->setAssociation_adresse($request->getParam("souscription_quartier")." - ".$request->getParam("souscription_ville"));
                                    $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $association->setId_filiere(NULL);
                                    $association->setCode_type_acteur(NULL);
                                    $association->setCode_statut(NULL);
                                    $association->setCode_agence($code_agence);
                                    $association->setPublier(1);
                                    $association_mapper->save($association);
			
                                    $date_id = Zend_Date::now();

                                    $membreasso = new Application_Model_EuMembreasso();
                                    $membreasso_mapper = new Application_Model_EuMembreassoMapper();
			
                                    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    $membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($request->getParam("souscription_mobile"));
                                    $membreasso->setMembreasso_nom($request->getParam("souscription_nom"));
                                    $membreasso->setMembreasso_prenom($request->getParam("souscription_prenom"));
                                    $membreasso->setMembreasso_association($compteur_association);
                                    $membreasso->setMembreasso_email($request->getParam("souscription_email"));
                                    $membreasso->setMembreasso_login($request->getParam("souscription_login"));
                                    $membreasso->setMembreasso_passe($request->getParam("souscription_passe"));
                                    $membreasso->setMembreasso_type(1);
                                    $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $membreasso->setPublier(1);
                                    $membreasso_mapper->save($membreasso);
							
							    }
								
								if($_POST['souscription_programme'] == "CMFH") {
                                    $html .= "<br />";
                                    $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter &acirc; votre espace d'int&eacute;grateur. Veuillez vous int&eacute;grer selon le type d'int&eacute;grateur qui vous convient.";
                                    //$html .= "<br />";
                                    //$html .= "Connectez vous ici : <a href='http://prod.esmcgacsource.com/souscription/login'>Connexion Souscription</a>";
                                    $html .= "<br />";
                                    $html .= "Login : ".$request->getParam("souscription_login")."<br />";
                                    $html .= "<br />";
                                    $html .= "Mot de passe : ".$request->getParam("souscription_passe")."<br />";
                                    $html .= "<br />";

                                    /*if(isset($_POST['souscription_mobilisateur']) && $_POST['souscription_mobilisateur'] == 1) {
                                        $html .= "Vous avez s&eacute;lectionner l'option Mobilisateur donc utilisez les m&ecirc;mes Login et Mot de passe pour vous connecter à votre espace Agr&eacute;ment OSE/OE pour pouvoir souscrire d'autres personnes.";
                                        $html .= "<br />";
                                        $html .= "Connectez vous aussi : <a href='http://prod.esmcgacsource.com/integrateur/login'>Connexion Int&eacute;grateur</a>";
                                        $html .= "<br />";
                                    }*/


                                    $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
 
                                    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                    Zend_Mail::setDefaultTransport($tr);		
                                    $mail = new Zend_Mail();
                                    //$mail->setBodyText('Mon texte de test');
                                    $mail->setBodyHtml($html);
                                    $mail->setFrom(Util_Utils::getParamEsmc(3), $association->association_nom);
                                    $mail->addTo($request->getParam("souscription_email"), $request->getParam("souscription_nom")." ".$request->getParam("souscription_prenom"));
                                    $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                    $mail->send($tr);

			                    }
								
								$relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($request->getParam("souscription_banque"),$request->getParam("souscription_numero"),$request->getParam("souscription_date_numero"));
                                if(count($relevebancairedetail) > 0) {
								    if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']) {
								        include("automatisation.php");
								        validation_automatique($compteur_souscription);
										
								        // operation de transfert
										$souscription = new Application_Model_EuSouscription();
		                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
										$date = new Zend_Date();
		                                $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
			                            $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                            $det_sms   = new Application_Model_EuDetailSmsmoney();
			                            $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                            $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                            $det_vtesms  = new Application_Model_EuDetailVentesms();
			
			                            $mobile = $souscription->souscription_mobile;
			                            //$nbre_compte = $souscription->souscription_nombre;
			                            $fcaps = Util_Utils::getParametre('CAPS','valeur');
										
										$mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');
			
		                                //$montant = $nbre_compte * $fcaps;
		                                $membre_pbf = '0000000000000000001M';
	                                    $code_compte_pbf = "NN-TR-".$membre_pbf;
			                            $ret = $compte_map->find($code_compte_pbf,$compte);
										
										
										
										if(($souscription->souscription_programme == 'KACM') 
			                                || ($souscription->souscription_programme == 'CMFH') 
				                            && $souscription->souscription_autonome == 1) {
											        
													if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			                                            // Mise à jour du compte de transfert
				                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);    
	                                                } else {
			                                            $db->rollback();				
			                                            $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
														$this->view->param = $param;
														$this->_redirect('/index/addsouscription/param/'.$param);
                                                        return;			   
			                                        }
													
													$codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';
													
													// Traitement des produits FS
				                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
												    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
												    // Traitement des produits FCPS
				                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
													
													if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
													
											            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					                                    $nengfs = $money_map->findConuter() + 1;
														$sms_money->setNEng($nengfs)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);
														
														$i = 0;
					                                    $reste = $mont_fs;
					                                    $nbre_lignesdetfs = count($lignesdetfs);
														while ($reste > 0 && $i < $nbre_lignesdetfs) {
					                                        $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
						                                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                    if ($reste >= $lignedetfs->getSolde_sms()) {
						                                        //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
							                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                                                   ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                                                   ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);			 							   
						                                    } else  {
							                                    //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                                        $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
						                                        $reste = 0;
						                                    }
						                                    $i++;
					                                    }
														
														$codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);
					                                    
													$j = 0;
					                                $reste = $mont_fl;
					                                $nbre_lignesdetfl = count($lignesdetfl);
					                                while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                                    $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfl->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
							                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                                $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
						                                    $reste = 0;
						                                }
						                                $j++;
					                                }
													
													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
													
													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }
													
													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;
				
				                                    $codeactivation->setId_code_activation($countcode)
					                                              ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                                    $codeactivation->setCode_membre(null);   
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setSouscription_id($compteur_souscription);
				                                    $m_codeactivation->save($codeactivation);
				
				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand ESMC : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
												
										            }  else {
												        $db->rollback();
	                                                    $this->view->param = $param;
			                                            $sessionmcnp->error = 'Erreur de traitement : le solde du compte est null';
														$this->_redirect('/index/addsouscription/param/'.$param);
                                                        return;	
												    }
										
										}
										
										/*if($souscription->souscription_programme == 'CMFH')   {
			                                $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                if($souscription->souscription_autonome == 1) {   
			                                    $nbre_compte = $souscription->souscription_nombre - 1; 
			                                } else {
				                                $nbre_compte = $souscription->souscription_nombre;
				                            }
				                            $montant = $nbre_compte * $fcaps;
				
				                            // Traitement des produits CAPS
				                            $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
				                            if ($lignesdetfcaps != null) {
				                                $nengfcaps = $money_map->findConuter() + 1;
                                                $sms_money->setNEng($nengfcaps)
                	                                      ->setCode_Agence(null)
                                                          ->setCreditAmount($montant)
                                                          ->setSentTo($mobile)
                                                          ->setMotif('CAPS')
                                                          ->setId_Utilisateur(null)
                                                          ->setCurrencyCode('XOF')
                                                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setFromAccount($code_compte_pbf)
                                                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                          ->setCreditCode($codefcaps)
                                                          ->setDestAccount(null)
                                                          ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                          ->setDestAccount_Consumed('CAPS-'.$compteur_souscription)
                                                          ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                          ->setNum_recu(null);
                                                $money_map->save($sms_money);
					
					                            // Mise à jour du compte de transfert
				                                if($ret) {
			                                        // Mise à jour du compte de transfert
				                                    $compte->setSolde($compte->getSolde() - $montant);
                                                    $compte_map->update($compte);    
	                                            } else {
			                                        $db->rollback();
	                                                $this->view->param = $param;
			                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable';
													$this->_redirect('/index/addsouscription/param/'.$param);
                                                    return;			   
			                                    }
					
				                                $l = 0;
					                            $reste = $montant;
					                            $nbre_lignesdetfcaps = count($lignesdetfcaps);
					                            while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
					                                $lignedetfcaps = $lignesdetfcaps[$l];
                                                    $id = $lignedetfcaps->getId_detail_smsmoney();
						                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                            if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                //Mise à jour  des lignes d'enrégistrement
                                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
													    //insertion dans la table eu_detailventesms
						                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('CAPS')
                                                                       ->setCreditcode($codefcaps)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('CAPS');
                                                        $det_vte_sms->insert($det_vtesms->toArray());
															
							                            $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                              ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                              ->setSolde_sms(0);
                                                        $det_sms_m->update($lignedetfcaps);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                         ->setId_detail_smsmoney($id)
                                                                 ->setCode_membre_dist($membre_pbf)
                                                                 ->setCode_membre(null)
                                                                 ->setType_tansfert('CAPS')
                                                                 ->setCreditcode($codefcaps)
                                                                 ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                 ->setMont_vente($reste)
                                                                 ->setId_utilisateur(null)
                                                                 ->setCode_produit('CAPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                    $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                                $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfcaps);
						                                    $reste = 0;
						                                }
						                        $l++;
					                        }
					
				                } else  {
				                    $db->rollback();
	                                $this->view->param = $param;
			                        $sessionmcnp->error = 'Erreur de traitement : le solde du compte CAPS est null';
									$this->_redirect('/index/addsouscription/param/'.$param);
                                    return;
				                }
				
				                // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();
			                    $countdvente = $m_dvente->findConuter() + 1;
				                $dvente->setId_depot($countdvente)
					                   ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                $dvente->setCode_membre(null);   
			                    $dvente->setCode_produit('CAPS');
				                $dvente->setMont_depot($montant);
				                $dvente->setMont_vendu(0);
				                $dvente->setSolde_depot($montant);
				                $dvente->setId_utilisateur(null);
				                $dvente->setType_depot('AvecListe');
				                $dvente->setSouscription_id($compteur_souscription);
				                $m_dvente->save($dvente);
				
				                $compteur = Util_Utils::findConuter() + 1;
				                //Util_Utils::addSms($compteur,$mobile,$nbre_compte.'  codes  ont ete ajoute a votre souscription');
								Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a  '.$nbre_compte.'  comptes marchands ESMC. 
								Veuillez consulter votre email');
								codegenerer($compteur_souscription);
								
			                }*/
								$db->commit();
                                $sessionmcnp->error = "Opération bien effectuée. Votre souscription a été vérifiée.";
		                        $this->_redirect('/index/addsouscription/param/'.$param);/**/
								
		                    } else {
							    $db->commit();
                                $sessionmcnp->error = "Opération bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre versement à la banque.";
		                        $this->_redirect('/index/addsouscriptioncomplement');/**/
					                }
		                    }  else {
								$db->commit();
                                $sessionmcnp->error = "Opération bien effectuée. Votre souscription n’est pas encore vérifiée, revenez plus tard.";
		                        $this->_redirect('/index/recherchesouscription');/**/
			                }
		
		
		                }
		
		            }  catch (Exception $exc) {
	                    $this->view->param = $param;
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();  
		                $this->_redirect('/index/addsouscription/param/'.$param);/**/
                        return;
                    }
		
		
		
		
		
		    }   else {  $sessionmcnp->error = "Champs * obligatoire ..."; }
		
		
		}	
		
	}

	
	
	


    public function listsouscriptionAction()
    {
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');

        $souscription = new Application_Model_EuSouscriptionMapper();
        $this->view->entries = $souscription->fetchAllByPublier(0, "");

        $this->view->tabletri = 1;

    }

	
    
	 public function recherchesouscriptionAction() {
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
		$sessionmcnp = new Zend_Session_Namespace('mcnp');
        $request = $this->getRequest ();
		if ($request->isPost ()) {
            if(isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="") {
			     $db = Zend_Db_Table::getDefaultAdapter();
                 $db->beginTransaction();
			     try {
			         $souscription_mapper = new Application_Model_EuSouscriptionMapper();
			         $recubancaire = new Application_Model_EuRecubancaire();
			         $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
			         $result = $souscription_mapper->fectchByNumeroBanque($_POST['souscription_numero']);
			         $resultat = $recubancaire_mapper->fetchByNumero($_POST['souscription_numero']);
					 
			         if(($result != NULL) && ($resultat != FALSE)) {
			               $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
		                   $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($resultat->recubancaire_banque,
				           $resultat->recubancaire_numero,$resultat->recubancaire_date_numero);
				           if(count($relevebancairedetail) > 0) {
                                  if(($relevebancairedetail->relevebancairedetail_montant) >= ($result->souscription_montant)) { 
                                       include("automatisation.php");
								       validation_automatique($result->souscription_id);
								       // operation de transfert
								       $souscription = new Application_Model_EuSouscription();
		                               $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                       $souscriptionM->find($result->souscription_id, $souscription);
								       $date = new Zend_Date();
		                               $compte_map = new Application_Model_EuCompteMapper();
                                       $compte      = new Application_Model_EuCompte();
			                           $sms_money   = new Application_Model_EuSmsmoney();
                                       $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                           $det_sms   = new Application_Model_EuDetailSmsmoney();
			                           $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                           $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                           $det_vtesms  = new Application_Model_EuDetailVentesms();
			
			                           $mobile = $souscription->souscription_mobile;
			                           //$nbre_compte = $souscription->souscription_nombre;
			                           $fcaps = Util_Utils::getParametre('CAPS','valeur');
										
								       $mont_fs = Util_Utils::getParametre('FS','valeur');
                                       $mont_fl = Util_Utils::getParametre('FL','valeur');
                                       $mont_kps = Util_Utils::getParametre('FKPS','valeur');
								  
								       $membre_pbf = '0000000000000000001M';
	                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
			                           $ret = $compte_map->find($code_compte_pbf,$compte);
									   
									   if(($souscription->souscription_programme == 'KACM') || ($souscription->souscription_programme == 'CMFH') && $souscription->souscription_autonome == 1) {
											        
											   if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
			                                      // Mise à jour du compte de transfert
				                                  $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                  $compte_map->update($compte);    
	                                           } else {
			                                      $db->rollback();				
			                                      $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                                                  return;			   
			                                   }
													
											   $codefs   = '';
                                               $codefl   = '';
                                               $codefkps = '';
													
													// Traitement des produits FS
				                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
												    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
				                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
												    // Traitement des produits FCPS
				                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
													
													if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
													
											            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					                                    $nengfs = $money_map->findConuter() + 1;
														$sms_money->setNEng($nengfs)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);
														
														$i = 0;
					                                    $reste = $mont_fs;
					                                    $nbre_lignesdetfs = count($lignesdetfs);
														while ($reste > 0 && $i < $nbre_lignesdetfs) {
					                                        $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
						                                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                    if ($reste >= $lignedetfs->getSolde_sms()) {
						                                        //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
							                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                                                                   ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                                                                   ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);			 							   
						                                    } else  {
							                                    //Mise à jour  des lignes d'enrégistrement
															    //insertion dans la table eu_detailventesms
						                                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                   ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						                                        $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
						                                        $reste = 0;
						                                    }
						                                    $i++;
					                                    }
														
														$codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                	                                              ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);
					                                    
													$j = 0;
					                                $reste = $mont_fl;
					                                $nbre_lignesdetfl = count($lignesdetfl);
					                                while ($reste > 0 && $j < $nbre_lignesdetfl) {
					                                    $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfl->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
							                                $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                                                               ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							                                $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
						                                    $reste = 0;
						                                }
						                                $j++;
					                                }
													
													$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                	                                          ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
													
													$k = 0;
					                                $reste = $mont_kps;
					                                $nbre_lignesdetfkps = count($lignesdetfkps);
					                                while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					                                    $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                                if ($reste >= $lignedetfkps->getSolde_sms()) {
						                                    //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
							                                $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                                                 ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                           ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							                                $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
						                                    $reste = 0;
						                                }
						                                $k++;
					                                }
													
													// insertion dans la table eu_code_activation
				                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
				                                    $codeactivation = new Application_Model_EuCodeActivation();
			                                        $countcode = $m_codeactivation->findConuter() + 1;
				
				                                    $codeactivation->setId_code_activation($countcode)
					                                               ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                                    $codeactivation->setCode_membre(null);   
			                                        $codeactivation->setCode_fs($codefs);
				                                    $codeactivation->setCode_fl($codefl);
				                                    $codeactivation->setCode_fkps($codefkps);
				                                    $codeactivation->setSouscription_id($souscription->souscription_id);
				                                    $m_codeactivation->save($codeactivation);
				
				                                    $compteur = Util_Utils::findConuter() + 1;
				                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
												
										            }  else {
												        $db->rollback();
			                                            $sessionmcnp->error = 'Erreur de traitement : le solde du compte est null';
                                                        return;	
												    }
										}
										if($souscription->souscription_programme == 'CMFH')   {
			                                $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                if($souscription->souscription_autonome == 1) {   
			                                    $nbre_compte = $souscription->souscription_nombre - 1; 
			                                } else {
				                                $nbre_compte = $souscription->souscription_nombre;
				                            }
				                            $montant = $nbre_compte * $fcaps;
				
				                            // Traitement des produits CAPS
				                            $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
				                            if ($lignesdetfcaps != null) {
				                                $nengfcaps = $money_map->findConuter() + 1;
                                                $sms_money->setNEng($nengfcaps)
                	                                      ->setCode_Agence(null)
                                                          ->setCreditAmount($montant)
                                                          ->setSentTo($mobile)
                                                          ->setMotif('CAPS')
                                                          ->setId_Utilisateur(null)
                                                          ->setCurrencyCode('XOF')
                                                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setFromAccount($code_compte_pbf)
                                                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                          ->setCreditCode($codefcaps)
                                                          ->setDestAccount(null)
                                                          ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                          ->setDestAccount_Consumed('CAPS-'.$compteur_souscription)
                                                          ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                          ->setNum_recu(null);
                                                $money_map->save($sms_money);
					
					                            // Mise à jour du compte de transfert
				                                if($ret) {
			                                        // Mise à jour du compte de transfert
				                                    $compte->setSolde($compte->getSolde() - $montant);
                                                    $compte_map->update($compte);    
	                                            } else {
			                                        $db->rollback();
			                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable';
                                                    return;			   
			                                    }
					
				                                $l = 0;
					                            $reste = $montant;
					                            $nbre_lignesdetfcaps = count($lignesdetfcaps);
					                            while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
					                                $lignedetfcaps = $lignesdetfcaps[$l];
                                                    $id = $lignedetfcaps->getId_detail_smsmoney();
						                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						                            if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                //Mise à jour  des lignes d'enrégistrement
                                                        $reste = $reste - $lignedetfcaps->getSolde_sms();
													    //insertion dans la table eu_detailventesms
						                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                               ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('CAPS')
                                                                       ->setCreditcode($codefcaps)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('CAPS');
                                                        $det_vte_sms->insert($det_vtesms->toArray());
															
							                            $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                              ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                              ->setSolde_sms(0);
                                                        $det_sms_m->update($lignedetfcaps);			 							   
						                                } else  {
							                                //Mise à jour  des lignes d'enrégistrement
															//insertion dans la table eu_detailventesms
						                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                         ->setId_detail_smsmoney($id)
                                                                 ->setCode_membre_dist($membre_pbf)
                                                                 ->setCode_membre(null)
                                                                 ->setType_tansfert('CAPS')
                                                                 ->setCreditcode($codefcaps)
                                                                 ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                 ->setMont_vente($reste)
                                                                 ->setId_utilisateur(null)
                                                                 ->setCode_produit('CAPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                    $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                                $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfcaps);
						                                    $reste = 0;
						                                }
						                        $l++;
					                        }
					
				                } else  {
				                    $db->rollback();
			                        $sessionmcnp->error = 'Erreur de traitement : le solde du compte CAPS est null';
                                    return;
				                }
				
				                // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();
			                    $countdvente = $m_dvente->findConuter() + 1;
				                $dvente->setId_depot($countdvente)
					                   ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                $dvente->setCode_membre(null);   
			                    $dvente->setCode_produit('CAPS');
				                $dvente->setMont_depot($montant);
				                $dvente->setMont_vendu(0);
				                $dvente->setSolde_depot($montant);
				                $dvente->setId_utilisateur(null);
				                $dvente->setType_depot('AvecListe');
				                $dvente->setSouscription_id($souscription->souscription_id);
				                $m_dvente->save($dvente);
				
				                $compteur = Util_Utils::findConuter() + 1;
				                Util_Utils::addSms($compteur,$mobile,$nbre_compte.'  codes  ont ete ajoute a votre souscription');
								
								codegenerer($souscription->souscription_id);
			                }
							   					   
			               }  
			          }
				}  
                $this->view->entries =  $souscription_mapper->fetchAllByPublierRecherche(0, "", $_POST['souscription_numero']);
				$db->commit();
				}  
				catch (Exception $exc) {
                    $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    $db->rollback();  
                    return;
                }
				
		        }			
        }
        $this->view->tabletri = 1;

    }
	
	
	

    public function recherchesouscriptionoldAction() {
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
        if(isset($_POST['ok']) && $_POST['ok']=="ok") {
            if(isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="") {
			  $souscription = new Application_Model_EuSouscriptionMapper();
			  $result = $souscription->fectchByNumeroBanque($_POST['souscription_numero']);
				
              $this->view->entries =  $souscription->fetchAllByPublierRecherche(0, "", $_POST['souscription_numero']);
		}	
				
        }
        $this->view->tabletri = 1;

    }
	
	
    
	
	
    
	
	
	
	public function relevegiesalaireAction() {
	        /* page index/relevesalaire - Retrouve salaire */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
            //$this->_helper->layout->disableLayout();
            $this->_helper->layout()->setLayout('layoutpublic');
		   
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
			    if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
				    $tabela = new Application_Model_DbTable_Credit();
				    $membre = $_POST['code_membre'];
				    if($membre != '') {
					  $select = $tabela->select();
					  $select->where('membre = ?', $membre);
					  $select->where('libelle like ?','CNCS');
	                }
	                $this->view->creditcncs = $tabela->fetchAll($select);
			        $this->view->code_membre    = $membre;
	
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNCS", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					
	            }
	        }
			$this->view->tabletri = 1;
	}
	
	




    public function relevesalaireAction() {
            /* page index/relevesalaire - Retrouve salaire */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
            //$this->_helper->layout->disableLayout();
            $this->_helper->layout()->setLayout('layoutpublic');
    
		    $code_membre  = '';
			$designation  = '';
			$cncs         = 0;
			$escompte     = 0;
			$echange      = 0;
		    $soldenr      = 0;
		    $soldenn      = 0;
		    $code_membre = '';

            if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    
				$db_cccncs = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_cccncs = $db_cccncs->select();
				$select_cccncs->from($db_cccncs,array('SUM(montant_place) as somme_cccncs'));
                $select_cccncs->where('code_membre = ?', $code_membre);
				$select_cccncs->where('code_produit in (?)',array('CNCSr','CNCSnr'));
                $result_cccncs = $db_cccncs->fetchAll($select_cccncs);
		        $row_cccncs = $result_cccncs->current();
		        $cncs = $row_cccncs['somme_cccncs'];
				
				
				$db_escompte     = new Application_Model_DbTable_EuAncienEchange();
				$select_escompte = $db_escompte->select();
				$select_escompte->from($db_escompte,array('SUM(montant) as somme_escompte'));
                $select_escompte->where('code_membre = ?', $code_membre);
				$select_escompte->where('type_echange like ?','NR/NN');
                $result_escompte   = $db_escompte->fetchAll($select_escompte);
		        $row_escompte = $result_escompte->current();
		        $escompte = $row_escompte['somme_escompte'];
				
				
				$db_echange      = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_echange  = $db_echange->select();
				$select_echange->from($db_echange,array('SUM(montant_place) as somme_echange'));
                //$select_echange->where('code_membre = ?', $code_membre);
				$select_echange->where('compte_source like ?','NR-TCNCS-'.$code_membre);
				$select_echange->orwhere('compte_source like ?','NN-TCNCS-'.$code_membre);
                $result_echange   = $db_echange->fetchAll($select_echange);
		        $row_echange = $result_echange->current();
		        $echange = $row_echange['somme_echange'];
				
				
				/*
				$db_ccnr = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_ccnr = $db_ccnr->select();
				$select_ccnr->from($db_ccnr,array('SUM(montant_credit) as somme_ccnr'));
                $select_ccnr->where('code_membre = ?', $code_membre);
				$select_ccnr->where('code_produit in (?)',array('CNCSr','CNCSnr'));
                $result_ccnr = $db_ccnr->fetchAll($select_ccnr);
		        $row_ccnr = $result_ccnr->current();
		        $soldenr = $row_ccnr['somme_ccnr'];*/
				
				 
				if(substr($code_membre,19,1) == 'M')  {
				    $db_cnn = new Application_Model_DbTable_EuAncienCompte();
				    $select_cnn = $db_cnn->select();
				    $select_cnn->from($db_cnn,array('SUM(solde) as somme_cnn'));
                    $select_cnn->where('code_membre = ?', $code_membre);
				    $select_cnn->where('code_cat in (?)',array('TCNCSEI','TPN','TCNCS'));
                    $result_cnn = $db_cnn->fetchAll($select_cnn);
		            $row_cnn = $result_cnn->current();
		            $soldenn = $row_cnn['somme_cnn'];
				
				} else {
				    $soldenn = abs($cncs-$escompte-$echange);
				
				}	


			$this->view->code_membre    = $code_membre;
			$this->view->designation    = $designation;
		    $this->view->cncs           = $cncs;
			$this->view->escompte       = $escompte;
			$this->view->echange        = $echange;
		    $this->view->soldenn        = $soldenn;		   
	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
        $select = $tabela->select();
		   
		if ($code_membre != '' || $code_membre != null) {
            $select->where('eu_ancien_compte_credit.code_membre = ?',$code_membre);
		} else {
            $code_membre = '%';
        }
		$select->where('eu_ancien_compte_credit.code_produit in (?)', array('CNCSnr','CNCSr'));
		$select->order('eu_ancien_compte_credit.date_octroi asc');
        $this->view->detailsalaire = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienEchange();
        $select = $tabela->select();
		if ($code_membre != '' || $code_membre != null) {
           $select->where('eu_ancien_echange.code_membre = ?',$code_membre);
		}
		$select->where('eu_ancien_echange.type_echange like ?','NR/NN');
        $select->order('date_echange asc');
        $this->view->escomptesalaire = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
        $select = $tabela->select();
	    if ($code_membre != '' || $code_membre != null) {
           //$select->where('eu_ancien_compte_credit.code_membre = ?',$code_membre);
		} else {
           $code_membre = '%';
        }		
		$select->where('eu_ancien_compte_credit.compte_source like ?','NR-TCNCS-'.$code_membre);
		$select->orwhere('eu_ancien_compte_credit.compte_source like ?','NN-TCNCS-'.$code_membre);
		$select->order('eu_ancien_compte_credit.date_octroi asc');
        $this->view->echangesalaire = $tabela->fetchAll($select);


$membre = $code_membre;
	
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNCS", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					




    } else {  
	       $this->view->message = "Champs * obligatoire ...";}
       
    } 
           $this->view->tabletri = 1;
    }



    public function relevegiecreditAction() {  
	        /* page index/relevecredit - Retrouve rpg/i */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
            //$this->_helper->layout->disableLayout();
            $this->_helper->layout()->setLayout('layoutpublic');
		   
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
			    if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
				    $tabela = new Application_Model_DbTable_Place();
				    $membre = $_POST['code_membre'];
				    if($membre != '') {
					    $select = $tabela->select();
					    $select->distinct();
		                $select->from(array('place'),array('membre','montant','lib','datedepot'));
					    $select->where('membre = ?', $membre);
						$select->where('montant > ?',0);
					    $select->where('lib like ?','CN'.'%');
	                }
	                $this->view->creditrpgi = $tabela->fetchAll($select);
			        $this->view->code_membre    = $membre;
	
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNP", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					
					
	            }
	        }
			$this->view->tabletri = 1;	
	}




    public function relevecreditAction() {
        /* page index/relevecredit - Retrouve rpg/i */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
        if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
        $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
        $compte = '';
        $membre = $_POST['code_membre'];
		$origine = '';
		
		
		if($membre != '' && $compte != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('date_octroi asc');
		} 
		else
		if($compte != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_produit = ?', $compte);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->order('date_octroi asc');
		} 
		else if($membre != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('date_octroi asc');
		} 
		else if($membre != '' && $compte != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->order('date_octroi asc');
		} else
        if ($compte != '' or $compte != null) {
		    $select = $tabela->select();
            $select->where('code_produit = ?', $compte);
			$select->order('date_octroi asc');
        } else
		if ($origine != '' or $origine != null) {
		    $select = $tabela->select();
            $select->where('compte_source like ?',$origine.'%');
		    $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('date_octroi asc');
            			
        } else
        if ($membre != '' or $membre != null) {
		    $select = $tabela->select();
            $select->where('code_membre = ?', $membre);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
			$select->order('date_octroi asc');
        } else {
		    $select = $tabela->select();
            $select->from($tabela);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('date_octroi asc');
		}
        		
		
        $this->view->creditrpgi = $tabela->fetchAll($select);
		$this->view->code_membre    = $code_membre;


	
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNP", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					





    } else {  
	    $this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
  }






    public function relevegcpAction() {
        /* page index/relevegcp - Retrouve gcp */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    
		$code_membre  = '';
		$designation  = '';
		$gcp          = 0;
		$escompte     = 0;
		$echange      = 0;
		$reste        = 0;
		$echu         = 0;

    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
        if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    
		   $db_gcp = new Application_Model_DbTable_EuAncienGcp();
		   $select_gcp = $db_gcp->select();
           $select_gcp->from($db_gcp,array('SUM(mont_gcp) as somme_gcp'));
           $select_gcp->where('code_membre = ?', $code_membre);
           $result_gcp = $db_gcp->fetchAll($select_gcp);
		   $row_gcp = $result_gcp->current();
		   $gcp = $row_gcp['somme_gcp'];
		   
		   
		   $db_escompte = new Application_Model_DbTable_EuAncienEscompte();
		   $select_escompte = $db_escompte->select();
		   $select_escompte->from($db_escompte,array('SUM(montant) as somme_escompte'));
		   $select_escompte->where('code_membre = ?', $code_membre);
		   $result_escompte = $db_escompte->fetchAll($select_escompte);
		   $row_escompte = $result_escompte->current();
		   $escompte = $row_escompte['somme_escompte'];
		   
		   
		   $db_echange = new Application_Model_DbTable_EuAncienEchange();
		   $select_echange = $db_echange->select();
		   $select_echange->from($db_echange,array('SUM(montant) as somme_echange'));
		   $select_echange->where('code_membre = ?', $code_membre);
		   $select_echange->where('type_echange = ?','NB/NB');
		   $result_echange = $db_echange->fetchAll($select_echange);
		   $row_echange = $result_echange->current();
		   $echange = $row_echange['somme_echange'];
		   $reste = floor($gcp - $escompte - $echange);
		   
		   
		   $db_tpagcp = new Application_Model_DbTable_EuAncienTpagcp();
		   $select_tpagcp = $db_tpagcp->select();
		   $select_tpagcp->from($db_tpagcp,array('SUM(mont_echu) as somme_echu'));
		   $select_tpagcp->where('code_membre = ?', $code_membre);
		   $result_tpagcp = $db_tpagcp->fetchAll($select_tpagcp);
		   $row_tpagcp = $result_tpagcp->current();
		   $echu = $row_tpagcp['somme_echu'];


		$this->view->code_membre = $code_membre;
		$this->view->designation = $designation;
		$this->view->gcp         = $gcp;
		$this->view->escompte    = $escompte;
		$this->view->echange     = $echange;
		$this->view->reste       = $reste;
		$this->view->echue       = $echu;	
	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienGcp();
		//if ($code_membre != '' || $code_membre != null) {
            $select = $tabela->select()->setIntegrityCheck(false);
            $select->from($tabela, array('id_gcp','date_conso', 'mont_gcp', 'mont_preleve', 'reste', 'code_cat', 'id_credit'))
		           ->join('eu_ancien_compte_credit', 'eu_ancien_compte_credit.id_credit = eu_ancien_gcp.id_credit', array('code_membre', 'code_produit'));
            $select->order('eu_ancien_gcp.date_conso asc');
			if ($code_membre != '' || $code_membre != null) {
			   $select->where('eu_ancien_gcp.code_membre like ?',$code_membre);
			}
            $this->view->consult = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienEscompte();
        $select = $tabela->select()->setIntegrityCheck(false);
		$select->from($tabela,array('*'));
		$select->join('eu_ancien_membre','eu_ancien_membre.ancien_code_membre = eu_ancien_escompte.code_membre_benef');
		if ($code_membre != '' || $code_membre != null) {
            $select->where('eu_ancien_escompte.code_membre like ?',$code_membre);
		}
        $select->order('eu_ancien_escompte.date_escompte asc');
        $this->view->escomptes = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienEchange();
        $select = $tabela->select();
		
		if ($code_membre != '' || $code_membre != null) {
           $select->where('eu_ancien_echange.code_membre like ?', $code_membre);
		}   
		$select->where('eu_ancien_echange.type_echange like ?','NB/NB');
        $select->order('date_echange asc');
        $this->view->echanges = $tabela->fetchAll($select);


					$membre = $code_membre;
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("GCP", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
  } 
        $this->view->tabletri = 1;
  }











    public function relevekacmAction()
    {
        /* page index/relevekcm - Retrouve les kacm */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

		   $code_membre  = '';
		   $designation  = '';
		   $fs           = 0;
		   $fl           = 0;
		   $fcps         = 0;
		   
		   $fsu          = 0;
		   $flu          = 0;
		   $fcpsu        = 0;
		   
		   $fsnu         = 0;
		   $flnu         = 0;
		   $fcpsnu       = 0;
		   
		   $kacm         = 0;

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    
				$db_fs = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fs = $db_fs->select();
				$select_fs->from($db_fs,array('SUM(CreditAmount) as somme_fs'));
				
				if($code_membre != '') {
                  $select_fs->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fs->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fs->where('Motif like ?','FS');
                $result_fs = $db_fs->fetchAll($select_fs);
		        $row_fs = $result_fs->current();
		        $fs = $row_fs['somme_fs'];
				
				$db_fl = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fl = $db_fl->select();
				$select_fl->from($db_fl,array('SUM(CreditAmount) as somme_fl'));
				
				if($code_membre != '') {
                  $select_fl->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fl->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fl->where('Motif like ?','FL');
                $result_fl = $db_fl->fetchAll($select_fl);
		        $row_fl = $result_fl->current();
		        $fl = $row_fl['somme_fl'];
				
				
				$db_cps = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cps = $db_cps->select();
				$select_cps->from($db_cps,array('SUM(CreditAmount) as somme_cps'));
				
				if($code_membre != '') {
                  $select_cps->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cps->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cps->where('Motif like ?','CPS');
                $result_cps = $db_cps->fetchAll($select_cps);
		        $row_cps = $result_cps->current();
		        $fcps = $row_cps['somme_cps'];
				
				
				$db_fsu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fsu = $db_fsu->select();
				$select_fsu->from($db_fsu,array('SUM(CreditAmount) as somme_fsu'));
				
				if($code_membre != '') {
                  $select_fsu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fsu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fsu->where('Motif like ?','FS');
				$select_fsu->where('IDDateTimeConsumed <> ?',0);
                $result_fsu = $db_fsu->fetchAll($select_fsu);
		        $row_fsu = $result_fsu->current();
		        $fsu = $row_fsu['somme_fsu'];
				
				
				$db_flu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_flu = $db_flu->select();
				$select_flu->from($db_flu,array('SUM(CreditAmount) as somme_flu'));
				
				if($code_membre != '') {
                  $select_flu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_flu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_flu->where('Motif like ?','FL');
				$select_flu->where('IDDateTimeConsumed <> ?',0);
                $result_flu = $db_flu->fetchAll($select_flu);
		        $row_flu = $result_flu->current();
		        $flu = $row_flu['somme_flu'];
				
				
				$db_cpsu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cpsu = $db_cpsu->select();
				$select_cpsu->from($db_cpsu,array('SUM(CreditAmount) as somme_cpsu'));
				
				if($code_membre != '') {
                  $select_cpsu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cpsu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cpsu->where('Motif like ?','CPS');
				$select_cpsu->where('IDDateTimeConsumed <> ?',0);
                $result_cpsu = $db_cpsu->fetchAll($select_cpsu);
		        $row_cpsu = $result_cpsu->current();
		        $fcpsu = $row_cpsu['somme_cpsu'];
				
				
				
				$db_fsnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fsnu = $db_fsnu->select();
				$select_fsnu->from($db_fsnu,array('SUM(CreditAmount) as somme_fsnu'));
				
				if($code_membre != '') {
                  $select_fsnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fsnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fsnu->where('Motif like ?','FS');
				$select_fsnu->where('IDDateTimeConsumed = ?',0);
                $result_fsnu = $db_fsnu->fetchAll($select_fsnu);
		        $row_fsnu = $result_fsnu->current();
		        $fsnu = $row_fsnu['somme_fsnu'];
				
				
				$db_flnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_flnu = $db_flnu->select();
				$select_flnu->from($db_flnu,array('SUM(CreditAmount) as somme_flnu'));
				
				if($code_membre != '') {
                  $select_flnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_flnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_flnu->where('Motif like ?','FL');
				$select_flnu->where('IDDateTimeConsumed = ?',0);
                $result_flnu = $db_flnu->fetchAll($select_flnu);
		        $row_flnu = $result_flnu->current();
		        $flnu = $row_flnu['somme_flnu'];
				
				
				$db_cpsnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cpsnu = $db_cpsnu->select();
				$select_cpsnu->from($db_cpsnu,array('SUM(CreditAmount) as somme_cpsnu'));
				
				if($code_membre != '') {
                  $select_cpsnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cpsnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cpsnu->where('Motif like ?','CPS');
				$select_cpsnu->where('IDDateTimeConsumed = ?',0);
                $result_cpsnu = $db_cpsnu->fetchAll($select_cpsnu);
		        $row_cpsnu = $result_cpsnu->current();
		        $fcpsnu = $row_cpsnu['somme_cpsnu'];


			$this->view->code_membre  = $code_membre;
			$this->view->designation  = $designation;
		    $this->view->fs           = $fs;
			$this->view->fl           = $fl;
			$this->view->fcps         = $fcps;
			
			$this->view->fsu           = $fsu;
			$this->view->flu           = $flu;
			$this->view->fcpsu         = $fcpsu;
			
			$this->view->fsnu           = $fsnu;
			$this->view->flnu           = $flnu;
			$this->view->fcpsnu         = $fcpsnu;
	
////////////////////////////////////////////////////////////////////////////////

		   $tabela = new Application_Model_DbTable_EuAncienSmsmoney();
		   //$code_membre = $this->_request->getParam("code_membre");
		   $select = $tabela->select();
		   
		    if($code_membre != '') {
	           $select->where('FromAccount like ?','NN-TR-'.$code_membre);
	        } else {
			   $select->where('FromAccount like ?','NN-TR-'.'%');
			}
			$select->where('Motif like ?','FS');
			$select->order('NEng asc');
			
			$this->view->detailfs = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

		   $tabela = new Application_Model_DbTable_EuAncienSmsmoney();
		   //$code_membre = $this->_request->getParam("code_membre");
		   $select = $tabela->select();
		   
		    if($code_membre != '') {
	           $select->where('FromAccount like ?','NN-TR-'.$code_membre);
	        } else {
			   $select->where('FromAccount like ?','NN-TR-'.'%');
			}
			$select->where('Motif like ?','FL');
			$select->order('NEng asc');
			
			$this->view->detailfl = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

		   $tabela = new Application_Model_DbTable_EuAncienSmsmoney();
		   //$code_membre = $this->_request->getParam("code_membre");
		   $select = $tabela->select();
		   
		    if($code_membre != '') {
	           $select->where('FromAccount like ?','NN-TR-'.$code_membre);
	        } else {
			   $select->where('FromAccount like ?','NN-TR-'.'%');
			}
			$select->where('Motif like ?','CPS');
			$select->order('NEng asc');
			
			$this->view->detailfcps = $tabela->fetchAll($select);




$membre = $code_membre;
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("KACM", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					





    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
  } 
        $this->view->tabletri = 1;
  }





    public function relevemf11000ppAction()
    {
        /* page index/relevemf11000 - Retrouve mf11000 */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    

			$num_bon          = '';
			$nom              = '';
            $code_membre      = '';
	        $designation      = '';
		    $mf11000_recu     = 0;
		    $mf11000_vendu    = 0;
		    $mf11000_restant  = 0;
		   
		    $entrees     = 0;
		    $sorties     = 0;
		    $solde       = 0;
		   
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['num_bon']) && $_POST['num_bon']!="") {
    
				$num_bon = $_POST['num_bon'];
				$nom = "";

				    $db_entrees = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_entrees = $db_entrees->select();
			        $select_entrees->from($db_entrees,array('SUM(mont_rep) as somme_entrees'));
			        $select_entrees->where('code_mf11000 like ?',$num_bon);
			        $result_entrees     = $db_entrees->fetchAll($select_entrees);
		            $row_entrees        = $result_entrees->current();
		            $entrees  = $row_entrees['somme_entrees'];
					
					$db_sorties = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_sorties = $db_sorties->select();
			        $select_sorties->from($db_sorties,array('SUM(mont_reglt) as somme_sorties'));
			        $select_sorties->where('code_mf11000 like ?',$num_bon);
			        $result_sorties     = $db_sorties->fetchAll($select_sorties);
		            $row_sorties        = $result_sorties->current();
		            $sorties  = $row_sorties['somme_sorties'];
					
					
					$db_solde = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_solde = $db_solde->select();
			        $select_solde->from($db_solde,array('SUM(solde_rep) as solde'));
			        $select_solde->where('code_mf11000 like ?',$num_bon);
			        $result_solde     = $db_solde->fetchAll($select_solde);
		            $row_solde        = $result_solde->current();
		            $solde  = $row_solde['solde'];
				
				


			$this->view->code_membre     = $code_membre;
			$this->view->designation     = $designation;
			$this->view->num_bon         = $num_bon;
			$this->view->nom             = $nom;
		    $this->view->mf11000_recu    = $mf11000_recu;
			$this->view->mf11000_vendu   = $mf11000_vendu;
			$this->view->mf11000_restant = $mf11000_restant;
			
			$this->view->entrees    = $entrees;
			$this->view->sorties    = $sorties;
			$this->view->solde      = $solde;
	
////////////////////////////////////////////////////////////////////////////////

		    $tabela = new Application_Model_DbTable_EuRepartitionMf11000();
		    $num_bon = $this->_request->getParam("num_bon");
		    $select = $tabela->select();
	        $select->where('code_mf11000 like ?',$num_bon);
			$select->order('id_rep asc');
			
			$this->view->detailbon = $tabela->fetchAll($select);


	
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("MF11000", $num_bon);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					


	

    } else {  
	    $this->view->message = "Champs * obligatoire ...";
	}
    	
    } 
        $this->view->tabletri = 1;
    }














    public function relevemf11000pmAction() {
        /* page index/relevemf11000 - Retrouve mf11000 */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

			$num_bon          = '';
			$nom              = '';
            $code_membre      = '';
	        $designation      = '';
		    $mf11000_recu     = 0;
		    $mf11000_vendu    = 0;
		    $mf11000_restant  = 0;
		   
		    $entrees     = 0;
		    $sorties     = 0;
		    $solde       = 0;
		   
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    

			    $db_dsms = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsms = $db_dsms->select();
			    $select_dsms->from($db_dsms,array('SUM(mont_sms) as somme_mf'));
			    $select_dsms->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsms->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsms->where('code_membre_dist like ?','%');
                }
			    $result_dsms = $db_dsms->fetchAll($select_dsms);
		        $row_dsms = $result_dsms->current();
		        $mf11000_recu = $row_dsms['somme_mf'];
			   
			   
			    $db_dsmsv = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsmsv = $db_dsmsv->select();
			    $select_dsmsv->from($db_dsmsv,array('SUM(mont_vendu) as somme_vendu'));
			    $select_dsmsv->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsmsv->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsmsv->where('code_membre_dist like ?','%');
                }
			    $result_dsmsv = $db_dsmsv->fetchAll($select_dsmsv);
		        $row_dsmsv = $result_dsmsv->current();
		        $mf11000_vendu = $row_dsmsv['somme_vendu'];
			   
			    $db_dsmss = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsmss = $db_dsmss->select();
			    $select_dsmss->from($db_dsmss,array('SUM(solde_sms) as somme_sms'));
			    $select_dsmss->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsmss->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsmss->where('code_membre_dist like ?','%');
                }
			    $result_dsmss     = $db_dsmss->fetchAll($select_dsmss);
		        $row_dsmss        = $result_dsmss->current();
		        $mf11000_restant  = $row_dsmss['somme_sms'];
				
				


			$this->view->code_membre     = $code_membre;
			$this->view->designation     = $designation;
			$this->view->num_bon         = $num_bon;
			$this->view->nom             = $nom;
		    $this->view->mf11000_recu    = $mf11000_recu;
			$this->view->mf11000_vendu   = $mf11000_vendu;
			$this->view->mf11000_restant = $mf11000_restant;
			
			$this->view->entrees    = $entrees;
			$this->view->sorties    = $sorties;
			$this->view->solde      = $solde;
	
            ////////////////////////////////////////////////////////////////////////////////

		    $tabela = new Application_Model_DbTable_EuAncienDetailSmsmoney();
		    $select = $tabela->select();
		    if($code_membre != '') {
	           $select->where('code_membre_dist like ?',$code_membre);
	        } else {
			   $select->where('code_membre_dist like ?','%');
			}
			$select->where('origine_sms like ?','MF');
			$select->order('id_detail_smsmoney asc');
			
			$this->view->detailmf11000 = $tabela->fetchAll($select);


	
			$membre = $code_membre;
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("MF11000", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					


	

    } else {  
	    $this->view->message = "Champs * obligatoire ...";}   
    } 
        $this->view->tabletri = 1;
    }



    public function relevemf107Action() {
            /* page index/relevemf107 - Retrouve mf107 */

            $sessionmcnp = new Zend_Session_Namespace('mcnp');
            //$this->_helper->layout->disableLayout();
            $this->_helper->layout()->setLayout('layoutpublic');
    

		    $code_membre  = '';
		    $designation  = '';
		    $soldemf107   = 0;
		   
            if (isset($_POST['ok']) && $_POST['ok']=="ok") {
                if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	                $code_membre = $_POST['code_membre'];
				    $designation = "";
    
			        $anciencompte_nn   = new Application_Model_EuAncienCompte();
		            $anciencm_map      = new Application_Model_EuAncienCompteMapper();
					$date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;
			        $rep = new Application_Model_EuRepartitionMf107();
			        $m_rep = new Application_Model_EuRepartitionMf107Mapper();
			        $dmf = new Application_Model_EuDetailMf107();
			        $mdmf = new Application_Model_EuDetailMf107Mapper();
			        $mf107 = new Application_Model_EuMembreFondateur107();
			        $mmf107 = new Application_Model_EuMembreFondateur107Mapper();
			        $montant = 0;
			        $nb_dmf = 0;
			        $code_compteancien = 'NN-TR-'.$code_membre;
					$soldemf107 = $m_rep->findSum($code_membre);	
				
				
			        $this->view->code_membre  = $code_membre;
			        $this->view->designation  = $designation;
                    $this->view->soldemf107  = $soldemf107;			
	
////////////////////////////////////////////////////////////////////////////////

			$mf107  = new Application_Model_EuMembreFondateur107();
			$mmf107 = new Application_Model_EuMembreFondateur107Mapper();
		    $tabela = new Application_Model_DbTable_EuRepartitionMf107();
		    $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false)
                   ->join('eu_detail_mf107', 'eu_detail_mf107.id_mf107 = eu_repartition_mf107.id_mf107',array('code_membre','id_mf107','mont_apport','pourcentage','numident'));
		    $select->where('eu_repartition_mf107.code_membre like ?',$code_membre);
			//$select->order('eu_repartition_mf107.id_rep asc');
			$select->order('eu_detail_mf107.code_membre asc');
		    //$select = $tabela->select();
	        
			$this->view->detailmf107 = $tabela->fetchAll($select);
			


	
			        $membre  = $code_membre;
					
///////////////////////////////////////////////////////////
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("MF107", $membre);
		if(count($relev) > 0){
			$this->view->relevedeja = 1;
		}else{
			$this->view->relevedeja = 0;
		}
///////////////////////////////////////////////////////////
					


	

    }   else {  
	        $this->view->message = "Champs * obligatoire ...";}
        } 
        $this->view->tabletri = 1;
    }







	 public function relevegiesalairepdfAction() {
    
	
        /* page index/relevegiesalairepdf - Génération de relevé rpg/i en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		
	            $code_membre =  (string)$this->_request->getParam('code');

				    $tabela = new Application_Model_DbTable_Credit();
				    $membre = $code_membre;
				    if($membre != '') {
					  $select = $tabela->select();
					  $select->where('membre = ?', $membre);
					  $select->where('libelle like ?','CNCS');
	                }
	                $creditcncs = $tabela->fetchAll($select);
			        $code_membre    = $code_membre;


////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("CNCS");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////



			$code_membre    = $code_membre;



$membre = (string)$this->_request->getParam('code');

					$t_physique = new Application_Model_DbTable_Physique();

if (substr($membre, -1) == "P") {
$membreee = new Application_Model_DbTable_Physique();
$membree = $membreee->find($membre);
$row = $membree->current();
$nom_membree = $row->nom.' '.$row->prenom;
} else if (substr($membre, -1) == "M") {
$membreee = new Application_Model_DbTable_Morale();
$membree = $membreee->find($membre);
$row = $membree->current();
$nom_membree = $row->nomm;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE DES SALAIRES CNCS</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        



<blockquote>Salaire CNCS</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Membre</th>
            <th align="center">Produit</th>
            <th align="right">Montant affecté</th>
	    <th align="right">Montant restant</th>
            <th align="center">Date debut</th>
	    <th align="center">Date fin</th>
        </tr>
    </thead>
    <tbody>
    ';
 $montantplace = 0;
$html .= '
    ';
 $montantcredi = 0;
$html .= '
    ';
 foreach ($creditcncs as $entry):  
 
$html .= '
        <tr>
          <td align="left">'.$entry->membre.'</td>
          <td align="center">'.$entry->libelle.'</td>
          <td align="right"><strong>'.number_format($entry->montplace,0,',',' ').'</strong></td>
		  <td align="right"><strong>'.number_format($entry->montantcredi,0,',',' ').'</strong></td>
          ';
 $date_deb = new Zend_Date($entry->datedeb);
$html .= '
          <td align="center">'.$date_deb->toString('dd/MM/yyyy').'</td>
		  ';
 $date_fin = new Zend_Date($entry->datefin);
$html .= '
          <td align="center">'.$date_fin->toString('dd/MM/yyyy').'</td>
        </tr>
    ';
 $montantplace += $entry->montplace;
$html .= '
    ';
 $montantcredi += $entry->montantcredi;
$html .= '
    ';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->libelle);
                $a->setRelevedetail_credit($entry->codecredi);
                $a->setRelevedetail_montant($entry->montplace);
                $a->setRelevedetail_date($entry->datedeb);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

 endforeach; 
$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Totaux</strong></td>
          <td align="right"><strong>'.number_format($montantplace,0,',',' ').'</strong></td>
		  <td align="right"><strong>'.number_format($montantcredi,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
		  <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>
<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_CNCS_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_CNCS_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }	





	 public function verifierrpgipdfAction() {
    
	
        /* page index/verifierrpgipdf - Génération de relevé rpg/i en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		
	            $code_membre =  (string)$this->_request->getParam('code');

			
				$tabela = new Application_Model_DbTable_EuAncienCompteCredit();
				$select = $tabela->select() ;
                $select->from($tabela)
		               ->order('id_credit asc');
			    if ($code_membre != '' || $code_membre != null) {
			       $select->where('code_membre like ?',$code_membre);
				   $select->where('code_produit IN (?)',array('RPGr','RPGnr','Ir','Inr'));
			    }
                $credits = $tabela->fetchAll($select);
				
			
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				$db_gcp = new Application_Model_DbTable_EuAncienGcp();
                $select = $tabela->select()->setIntegrityCheck(false);
                $select->from($db_gcp, array('id_gcp','date_conso', 'mont_gcp', 'mont_preleve','id_credit'))
		               ->join('eu_ancien_compte_credit', 'eu_ancien_compte_credit.id_credit = eu_ancien_gcp.id_credit', array('code_produit'))
					   ->join('eu_ancien_membre', 'eu_ancien_membre.ancien_code_membre = eu_ancien_gcp.code_membre', array('ancien_code_membre','raison_sociale'));
			    if ($code_membre != '' || $code_membre != null) {
			        $select->where('eu_ancien_compte_credit.code_membre like ?',$code_membre);
			    }
				$select->order('eu_ancien_gcp.id_credit asc');
                $consult = $db_gcp->fetchAll($select);
				
				
				///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				$db_cnnc = new Application_Model_DbTable_EuAncienCnnc();
				$select = $db_cnnc->select()->setIntegrityCheck(false);
				$select->from($db_cnnc)
				       ->join('eu_ancien_compte_credit', 'eu_ancien_compte_credit.id_credit = eu_ancien_cnnc.id_credit', array('code_produit'))
				       ->order('eu_ancien_cnnc.id_credit asc');
			    if ($code_membre != '' || $code_membre != null) {
			       $select->where('eu_ancien_cnnc.code_membre like ?',$code_membre);
				}
				$creditsnc = $db_cnnc->fetchAll($select);
				$code_membre = $code_membre;	



$membre = (string)$this->_request->getParam('code');

$membree = new Application_Model_EuAncienMembre();
$mapper_membree = new Application_Model_EuAncienMembreMapper();
$mapper_membree->find($membre, $membree);
if (substr($membre, -1) == "P") {
$nom_membree = $membree->nom_membre.' '.$membree->prenom_membre;
} else if (substr($membre, -1) == "M") {
$nom_membree = $membree->raison_sociale;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE DES VERIFICATIONS RPG/I</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        



	<blockquote>Historique des Credits RPG/I</blockquote>
	<table>
	        <thead>
                <tr>
					<th align="left">No crédit</th>
				    <th align="left">Produit</th>
				    <th align="left">Origine ressource</th>
					<th align="left">Montant CAPA</th>
					<th align="left">Montant Crédit</th>
					<th align="left">Date octroi</th>
				</tr>
			</thead>
			
			<tbody>
			';
 $montant_capa = 0;
$html .= '
			';
 $montant_credit = 0;
$html .= '
			';
 foreach ($credits as $entry): 
$html .= '
			        <tr ';
 if($entry->code_membre == $code_membre){
$html .= ' class="error"';
 }
$html .= '>
						<td align="left">'.$entry->id_credit.'</td>
						<td align="left">'.$entry->code_produit.'</td>
						<td align="left">'.$entry->compte_source.'</td>
						<td align="left"><strong>'.number_format($entry->montant_place,0,',',' ').'</strong></td>
						<td align="left"><strong>'.number_format($entry->montant_credit,0,',',' ').'</strong></td>
					    ';
 $date_octroi = new Zend_Date($entry->date_octroi, Zend_Date::ISO_8601);
$html .= '
                        <td align="center">'.$date_octroi->toString('dd/MM/yyyy').'</td>
			        </tr>
					';
 $montant_capa += $entry->montant_place;
$html .= '
					';
 $montant_credit += $entry->montant_credit;
$html .= '
			';
 endforeach; 
$html .= '
			        <tr>
					    <td align="left">&nbsp;</td>
                        <td align="left">&nbsp;</td>
                        <td align="right"><strong>Total</strong></td>
                        <td align="right"><strong>'.number_format($montant_capa,0,',',' ').'</strong></td>
						<td align="right"><strong>'.number_format($montant_credit,0,',',' ').'</strong></td>
                        <td align="center">&nbsp;</td>
                    </tr>
      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
			</tbody>
	</table>

    <br/>
    <br/>

    <blockquote>Historique des opérations de consommations effectuées</blockquote>
    <table>	
        <thead>
                <tr>        
                    <th align="left">No Crédit</th>
					<th align="left">Produit</th>
                    <th align="center">Distributeur</th>
					<th align="center">Raison sociale</th>
					<th align="right">Montant</th>
					<th align="center">Date opération</th>
                </tr>
		</thead>
        <tbody>
        ';
 $montant = 0;
$html .= '
		';
 foreach ($consult as $entry): 
$html .= '
		        <tr>
					<td align="left">'.$entry->id_credit.'</td>
					<td align="left">'.$entry->code_produit.'</td>
					<td align="left">'.$entry->ancien_code_membre.'</td>
					<td align="left">'.$entry->raison_sociale.'</td>
					<td align="right"><strong>'.number_format($entry->mont_gcp,0,',',' ').'</strong></td>
					';
 $date_conso = new Zend_Date($entry->date_conso, Zend_Date::ISO_8601);
$html .= '
                    <td align="center">'.$date_conso->toString('dd/MM/yyyy').'</td>
		        </tr>
				';
 $montant += $entry->mont_gcp;
$html .= '
		';
 endforeach; 
$html .= '
		        <tr>
				    <td align="left">&nbsp;</td>
				    <td align="left">&nbsp;</td>
                    <td align="left">&nbsp;</td>
                    <td align="right"><strong>Total</strong></td>
                    <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
                    <td align="center">&nbsp;</td>
                </tr>
      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
        </tbody>
    </table>
	
	<br/>
	<br/>
	
	<blockquote>Historique des crédits non consommés</blockquote>
    <table>	
        <thead>
                <tr>        
                    <th align="left">Numéro Crédit</th>
					<th align="left">Produit</th>
                    <th align="center">Montant non consommé</th>
					<th align="center">Date opération</th>
                </tr>
		</thead>
        <tbody>
        ';
 $montant = 0;
$html .= '
		';
 foreach ($creditsnc as $entry): 
$html .= '
		        <tr>
					<td align="left">'.$entry->id_credit.'</td>
					<td align="left">'.$entry->code_produit.'</td>
					<td align="right"><strong>'.number_format($entry->mont_credit,0,',',' ').'</strong></td>
					';
 $date_fin = new Zend_Date($entry->datefin, Zend_Date::ISO_8601);
$html .= '
                    <td align="center">'.$date_fin->toString('dd/MM/yyyy').'</td>
		        </tr>
				';
 $montant += $entry->mont_credit;
$html .= '
		';
 endforeach; 
$html .= '
		        <tr>
                    <td align="left">&nbsp;</td>
                    <td align="right"><strong>Total</strong></td>
                    <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
                    <td align="center">&nbsp;</td>
                </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
        </tbody>
    </table>
	
	
	
<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_VERIF_RPGI_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_VERIF_RPGI_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	




	 public function relevesalairepdfAction() {
    
	
        /* page index/relevesalairepdf - Génération de relevé salaire en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		

		    $code_membre  = '';
			$designation  = '';
			$cncs         = 0;
			$escompte     = 0;
			$echange      = 0;
		    $soldenr      = 0;
		    $soldenn      = 0;
		    $code_membre = '';

	            $code_membre =  (string)$this->_request->getParam('code');

				$designation = "";
    
				$db_cccncs = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_cccncs = $db_cccncs->select();
				$select_cccncs->from($db_cccncs,array('SUM(montant_place) as somme_cccncs'));
                $select_cccncs->where('code_membre = ?', $code_membre);
				$select_cccncs->where('code_produit in (?)',array('CNCSr','CNCSnr'));
                $result_cccncs = $db_cccncs->fetchAll($select_cccncs);
		        $row_cccncs = $result_cccncs->current();
		        $cncs = $row_cccncs['somme_cccncs'];
				
				
				$db_escompte     = new Application_Model_DbTable_EuAncienEchange();
				$select_escompte = $db_escompte->select();
				$select_escompte->from($db_escompte,array('SUM(montant) as somme_escompte'));
                $select_escompte->where('code_membre = ?', $code_membre);
				$select_escompte->where('type_echange like ?','NR/NN');
                $result_escompte   = $db_escompte->fetchAll($select_escompte);
		        $row_escompte = $result_escompte->current();
		        $escompte = $row_escompte['somme_escompte'];
				
				
				$db_echange      = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_echange  = $db_echange->select();
				$select_echange->from($db_echange,array('SUM(montant_place) as somme_echange'));
                //$select_echange->where('code_membre = ?', $code_membre);
				$select_echange->where('compte_source like ?','NR-TCNCS-'.$code_membre);
				$select_echange->orwhere('compte_source like ?','NN-TCNCS-'.$code_membre);
                $result_echange   = $db_echange->fetchAll($select_echange);
		        $row_echange = $result_echange->current();
		        $echange = $row_echange['somme_echange'];
				
				
				/*
				$db_ccnr = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_ccnr = $db_ccnr->select();
				$select_ccnr->from($db_ccnr,array('SUM(montant_credit) as somme_ccnr'));
                $select_ccnr->where('code_membre = ?', $code_membre);
				$select_ccnr->where('code_produit in (?)',array('CNCSr','CNCSnr'));
                $result_ccnr = $db_ccnr->fetchAll($select_ccnr);
		        $row_ccnr = $result_ccnr->current();
		        $soldenr = $row_ccnr['somme_ccnr'];*/
				
				
				
                 
				if(substr($code_membre,19,1) == 'M')  {
				    $db_cnn = new Application_Model_DbTable_EuAncienCompte();
				    $select_cnn = $db_cnn->select();
				    $select_cnn->from($db_cnn,array('SUM(solde) as somme_cnn'));
                    $select_cnn->where('code_membre = ?', $code_membre);
				    $select_cnn->where('code_cat in (?)',array('TCNCSEI','TPN','TCNCS'));
                    $result_cnn = $db_cnn->fetchAll($select_cnn);
		            $row_cnn = $result_cnn->current();
		            $soldenn = $row_cnn['somme_cnn'];
				
				} else {
				    $soldenn = abs($cncs-$escompte-$echange);
				
				}	


			$code_membre    = $code_membre;
			$designation    = $designation;
		    $cncs           = $cncs;
			$escompte       = $escompte;
			$echange        = $echange;
		    $soldenn        = $soldenn;		   
	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
        $select = $tabela->select();
		   
		if ($code_membre != '' || $code_membre != null) {
            $select->where('eu_ancien_compte_credit.code_membre = ?',$code_membre);
		} else {
            $code_membre = '%';
        }
		$select->where('eu_ancien_compte_credit.code_produit in (?)', array('CNCSnr','CNCSr'));
		$select->order('eu_ancien_compte_credit.date_octroi asc');
        $detailsalaire = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienEchange();
        $select = $tabela->select();
		if ($code_membre != '' || $code_membre != null) {
           $select->where('eu_ancien_echange.code_membre = ?',$code_membre);
		}
		$select->where('eu_ancien_echange.type_echange like ?','NR/NN');
        $select->order('date_echange asc');
        $escomptesalaire = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
        $select = $tabela->select();
	    if ($code_membre != '' || $code_membre != null) {
           //$select->where('eu_ancien_compte_credit.code_membre = ?',$code_membre);
		} else {
           $code_membre = '%';
        }		
		$select->where('eu_ancien_compte_credit.compte_source like ?','NR-TCNCS-'.$code_membre);
		$select->orwhere('eu_ancien_compte_credit.compte_source like ?','NN-TCNCS-'.$code_membre);
		$select->order('eu_ancien_compte_credit.date_octroi asc');
        $echangesalaire = $tabela->fetchAll($select);




////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("CNCS");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////




$membre = (string)$this->_request->getParam('code');

$membree = new Application_Model_EuAncienMembre();
$mapper_membree = new Application_Model_EuAncienMembreMapper();
$mapper_membree->find($membre, $membree);
if (substr($membre, -1) == "P") {
$nom_membree = $membree->nom_membre.' '.$membree->prenom_membre;
} else if (substr($membre, -1) == "M") {
$nom_membree = $membree->raison_sociale;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE SALAIRE CNCS</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





  <blockquote>Récapitulatif</blockquote>
<table>
    <thead>
        <tr>
            <th align="right">CNCS Global</th>
            <th align="right">CNCS Escompté</th>
            <th align="right">CNCS Echangé</th>
            <th align="right">Solde CNCS</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <td align="right"><strong>'.number_format($cncs,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($escompte,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($echange,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($soldenn,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>




  <blockquote>Détails salaires affectés</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Compte origine</th>
            <th align="center">Produit</th>
            <th align="right">Montant</th>
            <th align="center">Date</th>
        </tr>
    </thead>
    <tbody>
    ';

$montant = 0;
$html .= '

';

foreach ($detailsalaire as $entry): 
$html .= '

        <tr>
          <td align="left">'.$entry->compte_source.'</td>
          <td align="center">'.$entry->code_produit.'</td>
          <td align="right"><strong>'.number_format($entry->montant_place,0,',',' ').'</strong></td>
          ';

$date_op = new Zend_Date($entry->date_octroi, Zend_Date::ISO_8601);
$html .= '

          <td align="center">'.$date_op->toString('dd/MM/yyyy').'</td>
        </tr>
    ';

$montant += $entry->montant_place;
$html .= '

';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->code_produit);
                $a->setRelevedetail_credit($entry->id_credit);
                $a->setRelevedetail_montant($entry->montant_place);
                $a->setRelevedetail_date($entry->date_octroi);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 
$html .= '

        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>





  <blockquote>Détails salaires escomptés</blockquote>
<table>
    <thead>
        <tr>
            <th align="center">Produit</th>
            <th align="left">Compte Destinataire</th>
            <th align="right">Montant</th>
            <th align="center">Date</th>
        </tr>
    </thead>
    <tbody>
    ';

$montant = 0;
$html .= '

';

foreach ($escomptesalaire as $entry): 
$html .= '

        <tr>
          <td align="center">'.$entry->cat_echange.'</td>
          <td align="left">'.$entry->code_compte_obt.'</td>
          <td align="right"><strong>'.number_format($entry->montant,0,',',' ').'</strong></td>
          ';

$date_op = new Zend_Date($entry->date_echange, Zend_Date::ISO_8601);
$html .= '

          <td align="center">'.$date_op->toString('dd/MM/yyyy').'</td>
        </tr>
    ';

$montant += $entry->montant;
$html .= '

';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleveescompte();
                $ma = new Application_Model_EuReleveescompteMapper();
			
                $compteurescompte = $ma->findConuter() + 1;
                $a->setReleveescompte_id($compteurescompte);
                $a->setReleveescompte_releve($compteur);
                $a->setReleveescompte_produit($entry->code_produit);
                $a->setReleveescompte_escompte($entry->id_echange);
                $a->setReleveescompte_montant($entry->montant);
                $a->setReleveescompte_date($entry->date_echange);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 
$html .= '

        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>







  <blockquote>Détails salaires échangés</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Compte origine</th>
            <th align="left">Compte Destinataire</th>
            <th align="right">Montant</th>
            <th align="center">Date</th>
        </tr>
    </thead>
    <tbody>
    ';

$montant = 0;
$html .= '

';

foreach ($echangesalaire as $entry): 
$html .= '

        <tr>
          <td align="left">'.$entry->compte_source.'</td>
          <td align="left">'.$entry->code_compte.'</td>
          <td align="right"><strong>'.number_format($entry->montant_place,0,',',' ').'</strong></td>
          ';

$date_op = new Zend_Date($entry->date_octroi, Zend_Date::ISO_8601);
$html .= '

          <td align="center">'.$date_op->toString('dd/MM/yyyy').'</td>
        </tr>
    ';

$montant += $entry->montant_place;
$html .= '

';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleveechange();
                $ma = new Application_Model_EuReleveechangeMapper();
			
                $compteurechange = $ma->findConuter() + 1;
                $a->setReleveechange_id($compteurechange);
                $a->setReleveechange_releve($compteur);
                $a->setReleveechange_produit($entry->code_produit);
                $a->setReleveechange_echange($entry->id_credit);
                $a->setReleveechange_montant($entry->montant_place);
                $a->setReleveechange_date($entry->date_octroi);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 
$html .= '

        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_SALAIRE_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_SALAIRE_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }
       $file = $newchemin.$newnom.'.pdf';
       unlink($newfile);

	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	











	 public function relevegiecreditpdfAction() {
    
	
        /* page index/relevecreditpdf - Génération de relevé rpg/i en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		
	            $code_membre =  (string)$this->_request->getParam('code');

				    $tabela = new Application_Model_DbTable_Place();
				    $membre = $code_membre;
				    if($membre != '') {
					    $select = $tabela->select();
					    $select->distinct();
		                $select->from(array('place'),array('num','membre','montant','lib','datedepot'));
					    $select->where('membre = ?', $membre);
						$select->where('montant > ?',0);
					    $select->where('lib like ?','CN'.'%');
	                }
	                $creditrpgi = $tabela->fetchAll($select);
			        $code_membre    = $code_membre;


////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("CNP");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////



			$code_membre    = $code_membre;



$membre = (string)$this->_request->getParam('code');

					$t_physique = new Application_Model_DbTable_Physique();

if (substr($membre, -1) == "P") {
$membreee = new Application_Model_DbTable_Physique();
$membree = $membreee->find($membre);
$row = $membree->current();
$nom_membree = $row->nom.' '.$row->prenom;
} else if (substr($membre, -1) == "M") {
$membreee = new Application_Model_DbTable_Morale();
$membree = $membreee->find($membre);
$row = $membree->current();
$nom_membree = $row->nomm;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE DES CREDITS CNP</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





<blockquote>Crédits CNP</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Membre</th>
            <th align="center">Produit</th>
            <th align="right">Montant</th>
            <th align="center">Date</th>
        </tr>
    </thead>
    <tbody>
    ';
 $montantplace = 0;
$html .= '
';
 foreach ($creditrpgi as $entry): 
$html .= '
        <tr>
          <td align="left">'.$entry->membre.'</td>
          <td align="center">'.$entry->lib.'</td>
          <td align="right"><strong>'.number_format($entry->montant,0,',',' ').'</strong></td>
          ';
 $date_deb = new Zend_Date($entry->datedepot);
$html .= '
          <td align="center">'.$date_deb->toString('dd/MM/yyyy').'</td>
        </tr>
    ';
 $montantplace += $entry->montant;
$html .= '
';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->lib);
                $a->setRelevedetail_credit($entry->num);
                $a->setRelevedetail_montant($entry->montant);
                $a->setRelevedetail_date($entry->datedepot);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

 endforeach; 
$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Totaux</strong></td>
          <td align="right"><strong>'.number_format($montantplace,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>
<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_CNP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_CNP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	





	 public function relevecreditpdfAction() {
    
	
        /* page index/relevecreditpdf - Génération de relevé rpg/i en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		
	            $code_membre =  (string)$this->_request->getParam('code');

        $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
        $compte = '';
        $membre = (string)$this->_request->getParam('code');
		$origine = '';
		
		
		if($membre != '' && $compte != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('date_octroi asc');
		} 
		else
		if($compte != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_produit = ?', $compte);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->order('date_octroi asc');
		} 
		else if($membre != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('date_octroi asc');
		} 
		else if($membre != '' && $compte != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->order('date_octroi asc');
		} else
        if ($compte != '' or $compte != null) {
		    $select = $tabela->select();
            $select->where('code_produit = ?', $compte);
			$select->order('date_octroi asc');
        } else
		if ($origine != '' or $origine != null) {
		    $select = $tabela->select();
            $select->where('compte_source like ?',$origine.'%');
		    $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('date_octroi asc');
            			
        } else
        if ($membre != '' or $membre != null) {
		    $select = $tabela->select();
            $select->where('code_membre = ?', $membre);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
			$select->order('date_octroi asc');
        } else {
		    $select = $tabela->select();
            $select->from($tabela);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('date_octroi asc');
		}
        		
		
        $creditrpgi = $tabela->fetchAll($select);

////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienCreditConsommer();
        $compte = '';
        $membre = (string)$this->_request->getParam('code');
		$origine = '';
		
		
		if($membre != '' && $compte != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('date_consommation asc');
		} 
		else if($membre != '' && $compte != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->order('date_consommation asc');
		} else
        if ($compte != '' or $compte != null) {
		    $select = $tabela->select();
            $select->where('code_produit = ?', $compte);
			$select->order('date_consommation asc');
        } else
        if ($membre != '' or $membre != null) {
		    $select = $tabela->select();
            $select->where('code_membre = ?', $membre);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
			$select->order('date_consommation asc');
        } else {
		    $select = $tabela->select();
            $select->from($tabela);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('date_consommation asc');
		}
        		
		
        $creditrpgiconsommer = $tabela->fetchAll($select);

////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienCnnc();
        $compte = '';
        $membre = (string)$this->_request->getParam('code');
		$origine = '';
		
		
		if($membre != '' && $compte != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('libelle = ?', $compte);
		   $select->where('libelle in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('datefin asc');
		} 
		else if($membre != '' && $compte != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('libelle = ?', $compte);
		   $select->order('datefin asc');
		} else
        if ($compte != '' or $compte != null) {
		    $select = $tabela->select();
            $select->where('libelle = ?', $compte);
			$select->order('datefin asc');
        } else
        if ($membre != '' or $membre != null) {
		    $select = $tabela->select();
            $select->where('code_membre = ?', $membre);
			$select->where('libelle in (?)', array('RPGnr','RPGr','Inr','Ir'));
			$select->order('datefin asc');
        } else {
		    $select = $tabela->select();
            $select->from($tabela);
			$select->where('libelle in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('datefin asc');
		}
        		
		
        $creditrpgicnnc = $tabela->fetchAll($select);




			$code_membre    = $code_membre;



////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("CNP");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////









$membre = (string)$this->_request->getParam('code');

$membree = new Application_Model_EuAncienMembre();
$mapper_membree = new Application_Model_EuAncienMembreMapper();
$mapper_membree->find($membre, $membree);
if (substr($membre, -1) == "P") {
$nom_membree = $membree->nom_membre.' '.$membree->prenom_membre;
} else if (substr($membre, -1) == "M") {
$nom_membree = $membree->raison_sociale;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE RPG/I</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





  <blockquote>Compte RPG et I</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Compte</th>
            <th align="center">Produit</th>
            <th align="right">Montant CAPA</th>
            <th align="right">Montant Revenu</th>
            <th align="center">Date Début</th>
            <th align="center">Date Fin</th>
        </tr>
    </thead>
    <tbody>';
$montantplace = 0;
$html .= '
';
$montantcredit = 0;
$html .= '

';
foreach ($creditrpgi as $entry): 
$html .= '
        <tr>
          <td align="left">'.$entry->code_compte.'</td>
          <td align="center">'.$entry->code_produit.'</td>
          <td align="right"><strong>'.number_format($entry->montant_place,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->montant_credit,0,',',' ').'</strong></td>
          ';
$date_deb = new Zend_Date($entry->datedeb, Zend_Date::ISO_8601);
$html .= '<td align="center">'.$date_deb->toString('dd/MM/yyyy').'</td>
          ';
$date_fin = new Zend_Date($entry->datefin, Zend_Date::ISO_8601);
$html .= '

          <td align="center">'.$date_fin->toString('dd/MM/yyyy').'</td>
        </tr>';
$montantplace += $entry->montant_place;
$html .= '
';
$montantcredit += $entry->montant_credit;
$html .= '

';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->code_produit);
                $a->setRelevedetail_credit($entry->id_credit);
                $a->setRelevedetail_montant($entry->montant_place);
                $a->setRelevedetail_date($entry->date_octroi);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 


foreach ($creditrpgiconsommer as $entry): 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevecreditc();
                $ma = new Application_Model_EuRelevecreditcMapper();
			
                $compteurcreditc = $ma->findConuter() + 1;
                $a->setRelevecreditc_id($compteurcreditc);
                $a->setRelevecreditc_releve($compteur);
                $a->setRelevecreditc_produit($entry->code_produit);
                $a->setRelevecreditc_creditc($entry->id_consommation);
                $a->setRelevecreditc_montant($entry->mont_consommation);
                $a->setRelevecreditc_date($entry->date_consommation);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////
endforeach; 



foreach ($creditrpgicnnc as $entry): 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevecreditnonc();
                $ma = new Application_Model_EuRelevecreditnoncMapper();
			
                $compteurcreditnonc = $ma->findConuter() + 1;
                $a->setRelevecreditnonc_id($compteurcreditnonc);
                $a->setRelevecreditnonc_releve($compteur);
                $a->setRelevecreditnonc_produit($entry->libelle);
                $a->setRelevecreditnonc_creditnonc($entry->id_cnnc);
                $a->setRelevecreditnonc_montant($entry->mont_credit);
                $a->setRelevecreditnonc_date($entry->datefin);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////
endforeach; 



$html .= '

        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Totaux</strong></td>
          <td align="right"><strong>'.number_format($montantplace,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($montantcredit,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_RPG_I_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_RPG_I_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	











	 public function relevegcppdfAction() {
    
	
        /* page index/relevegcppdf - Génération de relevé gcp en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		

		$code_membre  = '';
		$designation  = '';
		$gcp          = 0;
		$escompte     = 0;
		$echange      = 0;
		$reste        = 0;
		$echu         = 0;
	            $code_membre =  (string)$this->_request->getParam('code');

				$designation = "";
    
		   $db_gcp = new Application_Model_DbTable_EuAncienGcp();
		   $select_gcp = $db_gcp->select();
           $select_gcp->from($db_gcp,array('SUM(mont_gcp) as somme_gcp'));
           $select_gcp->where('code_membre = ?', $code_membre);
           $result_gcp = $db_gcp->fetchAll($select_gcp);
		   $row_gcp = $result_gcp->current();
		   $gcp = $row_gcp['somme_gcp'];
		   
		   
		   $db_escompte = new Application_Model_DbTable_EuAncienEscompte();
		   $select_escompte = $db_escompte->select();
		   $select_escompte->from($db_escompte,array('SUM(montant) as somme_escompte'));
		   $select_escompte->where('code_membre = ?', $code_membre);
		   $result_escompte = $db_escompte->fetchAll($select_escompte);
		   $row_escompte = $result_escompte->current();
		   $escompte = $row_escompte['somme_escompte'];
		   
		   
		   $db_echange = new Application_Model_DbTable_EuAncienEchange();
		   $select_echange = $db_echange->select();
		   $select_echange->from($db_echange,array('SUM(montant) as somme_echange'));
		   $select_echange->where('code_membre = ?', $code_membre);
		   $select_echange->where('type_echange = ?','NB/NB');
		   $result_echange = $db_echange->fetchAll($select_echange);
		   $row_echange = $result_echange->current();
		   $echange = $row_echange['somme_echange'];
		   $reste = floor($gcp - $escompte - $echange);
		   
		   
		   $db_tpagcp = new Application_Model_DbTable_EuAncienTpagcp();
		   $select_tpagcp = $db_tpagcp->select();
		   $select_tpagcp->from($db_tpagcp,array('SUM(mont_echu) as somme_echu'));
		   $select_tpagcp->where('code_membre = ?', $code_membre);
		   $result_tpagcp = $db_tpagcp->fetchAll($select_tpagcp);
		   $row_tpagcp = $result_tpagcp->current();
		   $echu = $row_tpagcp['somme_echu'];


		$code_membre = $code_membre;
		$designation = $designation;
		$gcp         = $gcp;
		$escompte    = $escompte;
		$echange     = $echange;
		$reste       = $reste;
		$echue       = $echu;	
	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienGcp();
		//if ($code_membre != '' || $code_membre != null) {
            $select = $tabela->select()->setIntegrityCheck(false);
            $select->from($tabela, array('id_gcp','date_conso', 'mont_gcp', 'mont_preleve', 'reste', 'code_cat', 'id_credit'))
		           ->join('eu_ancien_compte_credit', 'eu_ancien_compte_credit.id_credit = eu_ancien_gcp.id_credit', array('code_membre', 'code_produit'));
            $select->order('eu_ancien_gcp.date_conso asc');
			if ($code_membre != '' || $code_membre != null) {
			   $select->where('eu_ancien_gcp.code_membre like ?',$code_membre);
			}
            $consult = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienEscompte();
        $select = $tabela->select()->setIntegrityCheck(false);
		$select->from($tabela,array('*'));
		$select->join('eu_ancien_membre','eu_ancien_membre.ancien_code_membre = eu_ancien_escompte.code_membre_benef');
		if ($code_membre != '' || $code_membre != null) {
            $select->where('eu_ancien_escompte.code_membre like ?',$code_membre);
		}
        $select->order('eu_ancien_escompte.date_escompte asc');
        $escomptes = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

        $tabela = new Application_Model_DbTable_EuAncienEchange();
        $select = $tabela->select();
		
		if ($code_membre != '' || $code_membre != null) {
           $select->where('eu_ancien_echange.code_membre like ?', $code_membre);
		}   
		$select->where('eu_ancien_echange.type_echange like ?','NB/NB');
        $select->order('date_echange asc');
        $echanges = $tabela->fetchAll($select);




$membre = (string)$this->_request->getParam('code');



////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("GCP");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////



$membree = new Application_Model_EuAncienMembre();
$mapper_membree = new Application_Model_EuAncienMembreMapper();
$mapper_membree->find($membre, $membree);
if (substr($membre, -1) == "P") {
$nom_membree = $membree->nom_membre.' '.$membree->prenom_membre;
} else if (substr($membre, -1) == "M") {
$nom_membree = $membree->raison_sociale;
}


$html = "";

$html .= '
<page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE GCp</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





  <blockquote>Récapitulatif</blockquote>
<table>
    <thead>
        <tr>
            <th align="right">Total GCP</th>
            <th align="right">GCP escomptées</th>
            <th align="right">GCP echangées en I et RPG</th>
            <th align="right">Solde GCP</th>
            <th align="right">GCP échues</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <td align="right"><strong>'.number_format($gcp,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($escompte,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($echange,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($reste,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($echue,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>




  <blockquote>Les ventes effectuées</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Code membre Acheteur</th>
            <th align="center">Produit</th>
            <th align="right">Montant</th>
            <th align="center">Date Opération</th>
        </tr>
    </thead>
    <tbody>
    ';
	$montant = 0;
	$html .= '
';
	foreach ($consult as $entry): 
	if($entry->code_membre == $membre){ $classes =' style="color:#F00;"'; }else{ $classes =''; }
	$html .= '
        <tr '.$classes.'>
          <td align="left">'.$entry->code_membre.'</td>
          <td align="center">'.$entry->code_produit.'</td>
          <td align="right"><strong>'.number_format($entry->mont_gcp,0,',',' ').'</strong></td>
          ';
	$date_op = new Zend_Date($entry->date_conso, Zend_Date::ISO_8601);
	$html .= '
          <td align="center">'.$date_op->toString('dd/MM/yyyy').'</td>
        </tr>
    ';
	$montant += $entry->mont_gcp;
	$html .= '
';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->code_produit);
                $a->setRelevedetail_credit($entry->id_gcp);
                $a->setRelevedetail_montant($entry->mont_gcp);
                $a->setRelevedetail_date($entry->date_conso);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

	endforeach; 
	$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>





  <blockquote>Les escomptes effectuées</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">PBF</th>
            <th align="left">Raison sociale</th>
            <th align="right">Montant</th>
            <th align="center">Date Escompte</th>
        </tr>
    </thead>
    <tbody>
    ';
	$montant = 0;
	$html .= '
';
	foreach ($escomptes as $entry): 
	$html .= '
        <tr>
          <td align="left">'.$entry->code_membre_benef.'</td>
          <td align="left">'.$entry->raison_sociale.'</td>
          <td align="right"><strong>'.number_format($entry->montant,0,',',' ').'</strong></td>
          ';
	$date_op = new Zend_Date($entry->date_escompte, Zend_Date::ISO_8601);
	$html .= '
          <td align="center">'.$date_op->toString('dd/MM/yyyy').'</td>
        </tr>
    ';
	$montant += $entry->montant;
	$html .= '
';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleveescompte();
                $ma = new Application_Model_EuReleveescompteMapper();
			
                $compteurescompte = $ma->findConuter() + 1;
                $a->setReleveescompte_id($compteurescompte);
                $a->setReleveescompte_releve($compteur);
                $a->setReleveescompte_produit("GCP");
                $a->setReleveescompte_escompte($entry->id_escompte);
                $a->setReleveescompte_montant($entry->solde);
                $a->setReleveescompte_date($entry->date_escompte);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

	endforeach; 
	$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>







  <blockquote>Les échanges effectués</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Type echange</th>
            <th align="left">Compte Destinataire</th>
            <th align="right">Montant</th>
            <th align="center">Date</th>
        </tr>
    </thead>
    <tbody>
    ';
	$montant = 0;
	$html .= '
';
	foreach ($echanges as $entry): 
	$html .= '
        <tr>
          <td align="left">'.$entry->type_echange.'</td>
          <td align="left">'.$entry->code_compte_obt.'</td>
          <td align="right"><strong>'.number_format($entry->montant,0,',',' ').'</strong></td>
          ';
	$date_op = new Zend_Date($entry->date_echange, Zend_Date::ISO_8601);
	$html .= '
          <td align="center">'.$date_op->toString('dd/MM/yyyy').'</td>
        </tr>
    ';
	$montant += $entry->montant;
	$html .= '
';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleveechange();
                $ma = new Application_Model_EuReleveechangeMapper();
			
                $compteurechange = $ma->findConuter() + 1;
                $a->setReleveechange_id($compteurechange);
                $a->setReleveechange_releve($compteur);
                $a->setReleveechange_produit($entry->code_produit);
                $a->setReleveechange_echange($entry->id_echange);
                $a->setReleveechange_montant($entry->montant);
                $a->setReleveechange_date($entry->date_echange);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

	endforeach; 
	$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($montant,0,',',' ').'</strong></td>
          <td align="center">&nbsp;</td>
        </tr>
      <tr>
        <td colspan="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_GCP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_GCP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);


	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	











	 public function relevekacmpdfAction() {
    
	
        /* page index/relevekacmpdf - Génération de relevé kacm en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		

		   $code_membre  = '';
		   $designation  = '';
		   $fs           = 0;
		   $fl           = 0;
		   $fcps         = 0;
		   
		   $fsu          = 0;
		   $flu          = 0;
		   $fcpsu        = 0;
		   
		   $fsnu         = 0;
		   $flnu         = 0;
		   $fcpsnu       = 0;
		   
		   $kacm         = 0;

	            $code_membre =  (string)$this->_request->getParam('code');

				$designation = "";
    
				$db_fs = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fs = $db_fs->select();
				$select_fs->from($db_fs,array('SUM(CreditAmount) as somme_fs'));
				
				if($code_membre != '') {
                  $select_fs->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fs->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fs->where('Motif like ?','FS');
                $result_fs = $db_fs->fetchAll($select_fs);
		        $row_fs = $result_fs->current();
		        $fs = $row_fs['somme_fs'];
				
				$db_fl = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fl = $db_fl->select();
				$select_fl->from($db_fl,array('SUM(CreditAmount) as somme_fl'));
				
				if($code_membre != '') {
                  $select_fl->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fl->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fl->where('Motif like ?','FL');
                $result_fl = $db_fl->fetchAll($select_fl);
		        $row_fl = $result_fl->current();
		        $fl = $row_fl['somme_fl'];
				
				
				$db_cps = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cps = $db_cps->select();
				$select_cps->from($db_cps,array('SUM(CreditAmount) as somme_cps'));
				
				if($code_membre != '') {
                  $select_cps->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cps->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cps->where('Motif like ?','CPS');
                $result_cps = $db_cps->fetchAll($select_cps);
		        $row_cps = $result_cps->current();
		        $fcps = $row_cps['somme_cps'];
				
				
				$db_fsu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fsu = $db_fsu->select();
				$select_fsu->from($db_fsu,array('SUM(CreditAmount) as somme_fsu'));
				
				if($code_membre != '') {
                  $select_fsu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fsu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fsu->where('Motif like ?','FS');
				$select_fsu->where('IDDateTimeConsumed <> ?',0);
                $result_fsu = $db_fsu->fetchAll($select_fsu);
		        $row_fsu = $result_fsu->current();
		        $fsu = $row_fsu['somme_fsu'];
				
				
				$db_flu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_flu = $db_flu->select();
				$select_flu->from($db_flu,array('SUM(CreditAmount) as somme_flu'));
				
				if($code_membre != '') {
                  $select_flu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_flu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_flu->where('Motif like ?','FL');
				$select_flu->where('IDDateTimeConsumed <> ?',0);
                $result_flu = $db_flu->fetchAll($select_flu);
		        $row_flu = $result_flu->current();
		        $flu = $row_flu['somme_flu'];
				
				
				$db_cpsu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cpsu = $db_cpsu->select();
				$select_cpsu->from($db_cpsu,array('SUM(CreditAmount) as somme_cpsu'));
				
				if($code_membre != '') {
                  $select_cpsu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cpsu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cpsu->where('Motif like ?','CPS');
				$select_cpsu->where('IDDateTimeConsumed <> ?',0);
                $result_cpsu = $db_cpsu->fetchAll($select_cpsu);
		        $row_cpsu = $result_cpsu->current();
		        $fcpsu = $row_cpsu['somme_cpsu'];
				
				
				
				$db_fsnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fsnu = $db_fsnu->select();
				$select_fsnu->from($db_fsnu,array('SUM(CreditAmount) as somme_fsnu'));
				
				if($code_membre != '') {
                  $select_fsnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fsnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fsnu->where('Motif like ?','FS');
				$select_fsnu->where('IDDateTimeConsumed = ?',0);
                $result_fsnu = $db_fsnu->fetchAll($select_fsnu);
		        $row_fsnu = $result_fsnu->current();
		        $fsnu = $row_fsnu['somme_fsnu'];
				
				
				$db_flnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_flnu = $db_flnu->select();
				$select_flnu->from($db_flnu,array('SUM(CreditAmount) as somme_flnu'));
				
				if($code_membre != '') {
                  $select_flnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_flnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_flnu->where('Motif like ?','FL');
				$select_flnu->where('IDDateTimeConsumed = ?',0);
                $result_flnu = $db_flnu->fetchAll($select_flnu);
		        $row_flnu = $result_flnu->current();
		        $flnu = $row_flnu['somme_flnu'];
				
				
				$db_cpsnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cpsnu = $db_cpsnu->select();
				$select_cpsnu->from($db_cpsnu,array('SUM(CreditAmount) as somme_cpsnu'));
				
				if($code_membre != '') {
                  $select_cpsnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cpsnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cpsnu->where('Motif like ?','CPS');
				$select_cpsnu->where('IDDateTimeConsumed = ?',0);
                $result_cpsnu = $db_cpsnu->fetchAll($select_cpsnu);
		        $row_cpsnu = $result_cpsnu->current();
		        $fcpsnu = $row_cpsnu['somme_cpsnu'];


			/*$code_membre  = $code_membre;
			$designation  = $designation;
		    $fs           = $fs;
			$fl           = $fl;
			$fcps         = $fcps;
			
			$fsu           = $fsu;
			$flu           = $flu;
			$fcpsu         = $fcpsu;
			
			$fsnu           = $fsnu;
			$flnu           = $flnu;
			$fcpsnu         = $fcpsnu;*/
	
////////////////////////////////////////////////////////////////////////////////

		   $tabela = new Application_Model_DbTable_EuAncienSmsmoney();
		   //$code_membre = $this->_request->getParam("code_membre");
		   $select = $tabela->select();
		   
		    if($code_membre != '') {
	           $select->where('FromAccount like ?','NN-TR-'.$code_membre);
	        } else {
			   $select->where('FromAccount like ?','NN-TR-'.'%');
			}
			$select->where('Motif like ?','FS');
			$select->order('NEng asc');
			
			$detailfs = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

		   $tabela = new Application_Model_DbTable_EuAncienSmsmoney();
		   //$code_membre = $this->_request->getParam("code_membre");
		   $select = $tabela->select();
		   
		    if($code_membre != '') {
	           $select->where('FromAccount like ?','NN-TR-'.$code_membre);
	        } else {
			   $select->where('FromAccount like ?','NN-TR-'.'%');
			}
			$select->where('Motif like ?','FL');
			$select->order('NEng asc');
			
			$detailfl = $tabela->fetchAll($select);

	
////////////////////////////////////////////////////////////////////////////////

		   $tabela = new Application_Model_DbTable_EuAncienSmsmoney();
		   //$code_membre = $this->_request->getParam("code_membre");
		   $select = $tabela->select();
		   
		    if($code_membre != '') {
	           $select->where('FromAccount like ?','NN-TR-'.$code_membre);
	        } else {
			   $select->where('FromAccount like ?','NN-TR-'.'%');
			}
			$select->where('Motif like ?','CPS');
			$select->order('NEng asc');
			
			$detailfcps = $tabela->fetchAll($select);




$membre = (string)$this->_request->getParam('code');



////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("KACM");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////



$membree = new Application_Model_EuAncienMembre();
$mapper_membree = new Application_Model_EuAncienMembreMapper();
$mapper_membree->find($membre, $membree);
if (substr($membre, -1) == "P") {
$nom_membree = $membree->nom_membre.' '.$membree->prenom_membre;
} else if (substr($membre, -1) == "M") {
$nom_membree = $membree->raison_sociale;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE FS - FL - FCPS</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





  <blockquote>Récapitulatif</blockquote>
<table>
    <thead>
        <tr>
            <th align="right">FS Transférés</th>
            <th align="right">FS utilisés</th>
            <th align="right">Solde FS</th>
            <th align="right">FL Transférés</th>
            <th align="right">FL utilisés</th>
            <th align="right">Solde FL</th>
            <th align="right">FCPS Transférés</th>
            <th align="right">FCPS utilisés</th>
            <th align="right">Solde FCPS</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <td align="right"><strong>'.number_format($fs,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($fsu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($fsnu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($fl,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($flu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($flnu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($fcps,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($fcpsu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($fcpsnu,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>


<br />
<br />


  <blockquote>Détails FS</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Compte Transfert</th>
            <th align="center">Code SMS</th>
            <th align="center">Motif</th>
            <th align="right">Montant Entré</th>
            <th align="right">Montant Sorti</th>
            <th align="right">Solde</th>
        </tr>
    </thead>
    <tbody>
    ';

	
			$tot_entrees = 0;
			$tot_sorties = 0;
			$tot_solde = 0;

$html .= '
';

foreach ($detailfs as $entry): 
$html .= '
';


		      if($entry->DestAccount_Consumed == NULL) {
			    $sortie = 0;
				$solde  = $entry->CreditAmount;
			  } else {
			    $sortie = $entry->CreditAmount;
				$solde  = 0;
			  }

$html .= '
        <tr>
          <td align="left">'.$entry->FromAccount.'</td>
          <td align="center">'.$entry->CreditCode.'</td>
          <td align="center">'.$entry->Motif.'</td>
          <td align="right"><strong>'.number_format($entry->CreditAmount,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($sortie,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($solde,0,',',' ').'</strong></td>
        </tr>
    ';


			   $tot_entrees += $entry->CreditAmount;
			   $tot_sorties += $sortie;
			   $tot_solde += $solde;
	
$html .= '
';


 
////////////////////////////////////////////////////
 $DateTime = new Zend_Date($entry->DateTime);

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->Motif);
                $a->setRelevedetail_credit($entry->NEng);
                $a->setRelevedetail_montant($solde);
                $a->setRelevedetail_date($DateTime->toString('yyyy-MM-dd'));
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 
$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="center">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($tot_entrees,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_sorties,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_solde,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>



<br />
<br />


  <blockquote>Détails FL</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Compte Transfert</th>
            <th align="center">Code SMS</th>
            <th align="center">Motif</th>
            <th align="right">Montant Entré</th>
            <th align="right">Montant Sorti</th>
            <th align="right">Solde</th>
        </tr>
    </thead>
    <tbody>
    ';

	
			$tot_entrees = 0;
			$tot_sorties = 0;
			$tot_solde = 0;

$html .= '
';

foreach ($detailfl as $entry): 
$html .= '
';


		      if($entry->DestAccount_Consumed == NULL) {
			    $sortie = 0;
				$solde  = $entry->CreditAmount;
			  } else {
			    $sortie = $entry->CreditAmount;
				$solde  = 0;
			  }

$html .= '
        <tr>
          <td align="left">'.$entry->FromAccount.'</td>
          <td align="center">'.$entry->CreditCode.'</td>
          <td align="center">'.$entry->Motif.'</td>
          <td align="right"><strong>'.number_format($entry->CreditAmount,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($sortie,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($solde,0,',',' ').'</strong></td>
        </tr>
    ';


			   $tot_entrees += $entry->CreditAmount;
			   $tot_sorties += $sortie;
			   $tot_solde += $solde;
	
$html .= '
';


 
////////////////////////////////////////////////////
 $DateTime = new Zend_Date($entry->DateTime);

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->Motif);
                $a->setRelevedetail_credit($entry->NEng);
                $a->setRelevedetail_montant($solde);
                $a->setRelevedetail_date($DateTime->toString('yyyy-MM-dd'));
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////


endforeach; 
$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="center">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($tot_entrees,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_sorties,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_solde,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>





<br />
<br />


  <blockquote>Détails FCPS</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Compte Transfert</th>
            <th align="center">Code SMS</th>
            <th align="center">Motif</th>
            <th align="right">Montant Entré</th>
            <th align="right">Montant Sorti</th>
            <th align="right">Solde</th>
        </tr>
    </thead>
    <tbody>
    ';

	
			$tot_entrees = 0;
			$tot_sorties = 0;
			$tot_solde = 0;

$html .= '
';

foreach ($detailfcps as $entry): 
$html .= '
';


		      if($entry->DestAccount_Consumed == NULL) {
			    $sortie = 0;
				$solde  = $entry->CreditAmount;
			  } else {
			    $sortie = $entry->CreditAmount;
				$solde  = 0;
			  }

$html .= '
        <tr>
          <td align="left">'.$entry->FromAccount.'</td>
          <td align="center">'.$entry->CreditCode.'</td>
          <td align="center">'.$entry->Motif.'</td>
          <td align="right"><strong>'.number_format($entry->CreditAmount,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($sortie,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($solde,0,',',' ').'</strong></td>
        </tr>
    ';


			   $tot_entrees += $entry->CreditAmount;
			   $tot_sorties += $sortie;
			   $tot_solde += $solde;
	
$html .= '
';


 
////////////////////////////////////////////////////
 $DateTime = new Zend_Date($entry->DateTime);

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->Motif);
                $a->setRelevedetail_credit($entry->NEng);
                $a->setRelevedetail_montant($solde);
                $a->setRelevedetail_date($DateTime->toString('yyyy-MM-dd'));
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////



endforeach; 
$html .= '
        <tr>
          <td align="left">&nbsp;</td>
          <td align="center">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($tot_entrees,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_sorties,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_solde,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_FS_FL_FCPS_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_FS_FL_FCPS_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);


////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	




	 public function verifiermf11000pdfAction() {
    
	
        /* page index/relevemf11000pppdf - Génération de relevé mf11000 pp en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		


		   
	            $num_bon =  (string)$this->_request->getParam('code');
    
				$nom = "";

			   $numero_bon = $num_bon;
		       $tabela = new Application_Model_DbTable_EuRepartitionMf11000();
		       $num_bon = $this->_request->getParam("num_bon");
		       $select = $tabela->select();
	           $select->where('code_mf11000 like ?',$numero_bon);
			   $select->order('id_rep asc');
			
			   $unitemf11000 = $tabela->fetchAll($select);
			   
			   ///////////////////////////////////////////////////////////////////////////////////
			   
			    $tab_smsmoney = new Application_Model_DbTable_EuAncienDetailSmsmoney();
		        $select = $tab_smsmoney->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		        $select->setIntegrityCheck(false)
                       ->join('eu_ancien_membre', 'eu_ancien_membre.ancien_code_membre = eu_ancien_detail_smsmoney.code_membre_dist');
		    
	            $select->where('eu_ancien_detail_smsmoney.num_bon like ?',$numero_bon);
	          
			    $select->where('eu_ancien_detail_smsmoney.origine_sms like ?','MF');
			    $select->order('eu_ancien_detail_smsmoney.id_detail_smsmoney asc');
			
			    $detailmf11000 = $tabela->fetchAll($select);




$membre = (string)$this->_request->getParam('code');

$membree = new Application_Model_EuMembreFondateur11000();
$mapper_membree = new Application_Model_EuMembreFondateur11000Mapper();
$mapper_membree->find($membre, $membree);
$nom_membree = $membree->nom.' '.$membree->prenom;


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>VERIFICATION MF11000 PERSONNE PHYSIQUE</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	




	<blockquote>Historique des unités MF11000</blockquote>
	<table>
	       <thead>
                <tr>
					<th align="left">Numéro bon</th>
				    <th align="left">Produit</th>
				    <th align="left">Montant encaissé</th>
					<th align="left">Montant utilisé</th>
					<th align="left">Montant restant</th>
					<th align="left">Date octroi</th>
				</tr>
			</thead>
			<tbody>
			      ';
 $montant_rep = 0; 
$html .= '
				  ';
 $montant_ut = 0; 
$html .= '
				  ';
 $montant_rest = 0;
$html .= '
                  ';
 foreach ($unitemf11000 as $entry): 
$html .= '
                        <tr ';
 if($entry->code_mf11000 == $code_mf11000) { 
$html .= ' class="error"';
 }
$html .= '>
			    <td align="left">'.$entry->code_mf11000.'</td>
			    <td align="left">MF11000</td>
			    <td align="left"><strong>'.number_format($entry->mont_rep,0,',',' ').'</strong></td>
			    <td align="left"><strong>'.number_format($entry->mont_reglt,0,',',' ').'</strong></td>
			    <td align="left"><strong>'.number_format($entry->solde_rep,0,',',' ').'</strong></td>
			    ';
 $date_octroi = new Zend_Date($entry->date_rep, Zend_Date::ISO_8601);
$html .= '
                            <td align="center">'.$date_octroi->toString('dd/MM/yyyy').'</td>
			</tr>
			';
 $montant_rep += $entry->mont_rep;
$html .= '
			';
 $montant_ut  += $entry->mont_reglt;
$html .= '
			';
 $montant_rest  += $entry->solde_rep;
$html .= '
                  ';
 endforeach; 
$html .= '
                        <tr>
                            <td align="left">&nbsp;</td>
                            <td align="right"><strong>Total</strong></td>
                            <td align="right"><strong>'.number_format($montant_rep,0,',',' ').'</strong></td>
			    <td align="right"><strong>'.number_format($montant_ut,0,',',' ').'</strong></td>
			    <td align="right"><strong>'.number_format($montant_rest,0,',',' ').'</strong></td>
                            <td align="center">&nbsp;</td>
                        </tr>

      <tr>
        <td colspan="6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
				  
			</tbody>	  
			
			
	</table>
	
	<br/>
	<br/>

        <br/>
        <br/>
        <br/>

	
	
        <blockquote>Historique des unités MF11000 mises en dépôt-vente</blockquote>
	<table>
	       <thead>
               <tr>
		    <th align="left">Numéro bon</th>
		    <th align="left">Produit</th>
		    <th align="left">Code Membre</th>
		    <th align="left">Raison sociale</th>
		    <th align="left">Montant transféré</th>
                    <th align="left">Montant vendu</th>
                    <th align="left">Montant restant</th>
		    <th align="left">Date octroi</th>
		</tr>
	      </thead>
	      <tbody>
	            ';
 $montant_transfert = 0; 
$html .= '
		    ';
 $montant_ut        = 0; 
$html .= '
		    ';
 $montant_rest      = 0;
$html .= '
                    ';
 foreach ($detailmf11000 as $entry): 
$html .= '
                          <tr ';
 if($entry->num_bon == $numero_bon) { 
$html .= ' class="error"';
 }
$html .= '>
			      <td align="left">'.$entry->num_bon.'</td>
			      <td align="left">MF11000</td>
                              <td align="left">'.$entry->code_membre_dist.'</td>
                              <td align="left">'.$entry->raison_sociale.'</td>
			      <td align="left"><strong>'.number_format($entry->mont_sms,0,',',' ').'</strong></td>
			      <td align="left"><strong>'.number_format($entry->mont_vendu,0,',',' ').'</strong></td>
			      <td align="left"><strong>'.number_format($entry->solde_sms,0,',',' ').'</strong></td>
			      ';
 $date_alloc = new Zend_Date($entry->date_allocation, Zend_Date::ISO_8601);
$html .= '
                              <td align="center">'.$date_alloc->toString('dd/MM/yyyy').'</td>
			   </tr>
			   ';
 $montant_transfert += $entry->mont_sms;
$html .= '
			   ';
 $montant_ut        += $entry->mont_vendu;
$html .= '
			   ';
 $montant_rest      += $entry->solde_sms;
$html .= '
                  ';
 endforeach; 
$html .= '
                        <tr>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="right"><strong>Total</strong></td>
                            <td align="right"><strong>'.number_format($montant_transfert,0,',',' ').'</strong></td>
			    <td align="right"><strong>'.number_format($montant_ut,0,',',' ').'</strong></td>
			    <td align="right"><strong>'.number_format($montant_rest,0,',',' ').'</strong></td>
                            <td align="center">&nbsp;</td>
                        </tr>	  
      <tr>
        <td colspan="8">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
			</tbody>	  		
	</table>


<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_MF11000_PP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_MF11000_PP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	





	 public function relevemf11000pppdfAction() {
    
	
        /* page index/relevemf11000pppdf - Génération de relevé mf11000 pp en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		


			$num_bon          = '';
			$nom              = '';
            $code_membre      = '';
	        $designation      = '';
		    $mf11000_recu     = 0;
		    $mf11000_vendu    = 0;
		    $mf11000_restant  = 0;
		   
		    $entrees     = 0;
		    $sorties     = 0;
		    $solde       = 0;
		   
	            $num_bon =  (string)$this->_request->getParam('code');
    
				$nom = "";

				    $db_entrees = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_entrees = $db_entrees->select();
			        $select_entrees->from($db_entrees,array('SUM(mont_rep) as somme_entrees'));
			        $select_entrees->where('code_mf11000 like ?',$num_bon);
			        $result_entrees     = $db_entrees->fetchAll($select_entrees);
		            $row_entrees        = $result_entrees->current();
		            $entrees  = $row_entrees['somme_entrees'];
					
					$db_sorties = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_sorties = $db_sorties->select();
			        $select_sorties->from($db_sorties,array('SUM(mont_reglt) as somme_sorties'));
			        $select_sorties->where('code_mf11000 like ?',$num_bon);
			        $result_sorties     = $db_sorties->fetchAll($select_sorties);
		            $row_sorties        = $result_sorties->current();
		            $sorties  = $row_sorties['somme_sorties'];
					
					
					$db_solde = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_solde = $db_solde->select();
			        $select_solde->from($db_solde,array('SUM(solde_rep) as solde'));
			        $select_solde->where('code_mf11000 like ?',$num_bon);
			        $result_solde     = $db_solde->fetchAll($select_solde);
		            $row_solde        = $result_solde->current();
		            $solde  = $row_solde['solde'];
				
				


			$code_membre     = $code_membre;
			$designation     = $designation;
			$num_bon         = $num_bon;
			$nom             = $nom;
		    $mf11000_recu    = $mf11000_recu;
			$mf11000_vendu   = $mf11000_vendu;
			$mf11000_restant = $mf11000_restant;
			
			$entrees    = $entrees;
			$sorties    = $sorties;
			$solde      = $solde;
	
////////////////////////////////////////////////////////////////////////////////

		    $tabela = new Application_Model_DbTable_EuRepartitionMf11000();
		    //$num_bon = $this->_request->getParam("num_bon");
		    $select = $tabela->select();
	        $select->where('code_mf11000 like ?',$num_bon);
			$select->order('id_rep asc');
			
			$detailbon = $tabela->fetchAll($select);




$membre = (string)$this->_request->getParam('code');



////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("MF11000");
                $a->setReleve_membre($num_bon);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////



$membree = new Application_Model_EuMembreFondateur11000();
$mapper_membree = new Application_Model_EuMembreFondateur11000Mapper();
$mapper_membree->find($membre, $membree);
$nom_membree = $membree->nom.' '.$membree->prenom;


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE MF11000 PERSONNE PHYSIQUE</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





  <blockquote>Récapitulatif</blockquote>
<table>
    <thead>
        <tr>
            <th align="right">Total Unité MF11000 reçu</th>
            <th align="right">Total Unité MF11000 utilisé</th>
            <th align="right">Total Unité MF11000 restant</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <td align="right"><strong>'.number_format($entrees,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($sorties,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($solde,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>


<br />
<br />


  <blockquote>Détails MF11000</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Numero Bon</th>
            <th align="center">Ressource</th>
            <th align="right">Montant reçu</th>
            <th align="right">Montant utilisé</th>
            <th align="right">Solde</th>
        </tr>
    </thead>
    <tbody>
    ';

			   $tot_entrees = 0;
			   $tot_sorties = 0;
			   $tot_solde = 0;
	
$html .= '

';
foreach ($detailbon as $entry): 
$html .= '

        <tr>
          <td align="left">'.$entry->code_mf11000.'</td>
          <td align="center">'.'MF11000'.'</td>
          <td align="right"><strong>'.number_format($entry->mont_rep,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->mont_reglt,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->solde_rep,0,',',' ').'</strong></td>
        </tr>
    ';

			    $tot_entrees += $entry->mont_rep;
			    $tot_sorties += $entry->mont_reglt;
			    $tot_solde += $entry->solde_rep;
	
$html .= '

';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit("MF11000");
                $a->setRelevedetail_credit($entry->id_rep);
                $a->setRelevedetail_montant($entry->solde_rep);
                $a->setRelevedetail_date($entry->date_rep);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 
$html .= '

        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($tot_entrees,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_sorties,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_solde,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_MF11000_PP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_MF11000_PP_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);


	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	








	 public function relevemf11000pmpdfAction() {
    
	
        /* page index/relevemf11000pmpdf - Génération de relevé mf11000 pm en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		

			$num_bon          = '';
			$nom              = '';
            $code_membre      = '';
	        $designation      = '';
		    $mf11000_recu     = 0;
		    $mf11000_vendu    = 0;
		    $mf11000_restant  = 0;
		   
		    $entrees     = 0;
		    $sorties     = 0;
		    $solde       = 0;
		   
	            $code_membre =  (string)$this->_request->getParam('code');

				$designation = "";
    

			    $db_dsms = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsms = $db_dsms->select();
			    $select_dsms->from($db_dsms,array('SUM(mont_sms) as somme_mf'));
			    $select_dsms->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsms->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsms->where('code_membre_dist like ?','%');
                }
			    $result_dsms = $db_dsms->fetchAll($select_dsms);
		        $row_dsms = $result_dsms->current();
		        $mf11000_recu = $row_dsms['somme_mf'];
			   
			   
			    $db_dsmsv = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsmsv = $db_dsmsv->select();
			    $select_dsmsv->from($db_dsmsv,array('SUM(mont_vendu) as somme_vendu'));
			    $select_dsmsv->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsmsv->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsmsv->where('code_membre_dist like ?','%');
                }
			    $result_dsmsv = $db_dsmsv->fetchAll($select_dsmsv);
		        $row_dsmsv = $result_dsmsv->current();
		        $mf11000_vendu = $row_dsmsv['somme_vendu'];
			   
			    $db_dsmss = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsmss = $db_dsmss->select();
			    $select_dsmss->from($db_dsmss,array('SUM(solde_sms) as somme_sms'));
			    $select_dsmss->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsmss->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsmss->where('code_membre_dist like ?','%');
                }
			    $result_dsmss     = $db_dsmss->fetchAll($select_dsmss);
		        $row_dsmss        = $result_dsmss->current();
		        $mf11000_restant  = $row_dsmss['somme_sms'];
				
				


			$code_membre     = $code_membre;
			$designation     = $designation;
			$num_bon         = $num_bon;
			$nom             = $nom;
		    $mf11000_recu    = $mf11000_recu;
			$mf11000_vendu   = $mf11000_vendu;
			$mf11000_restant = $mf11000_restant;
			
			$entrees    = $entrees;
			$sorties    = $sorties;
			$solde      = $solde;
	
////////////////////////////////////////////////////////////////////////////////

		    $tabela = new Application_Model_DbTable_EuAncienDetailSmsmoney();
		    $select = $tabela->select();
		    if($code_membre != '') {
	           $select->where('code_membre_dist like ?',$code_membre);
	        } else {
			   $select->where('code_membre_dist like ?','%');
			}
			$select->where('origine_sms like ?','MF');
			$select->order('id_detail_smsmoney asc');
			
			$detailmf11000 = $tabela->fetchAll($select);




$membre = (string)$this->_request->getParam('code');



////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("MF11000");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////



$membree = new Application_Model_EuAncienMembre();
$mapper_membree = new Application_Model_EuAncienMembreMapper();
$mapper_membree->find($membre, $membree);
if (substr($membre, -1) == "P") {
$nom_membree = $membree->nom_membre.' '.$membree->prenom_membre;
} else if (substr($membre, -1) == "M") {
$nom_membree = $membree->raison_sociale;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE MF11000 PERSONNE MORALE</h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





  <blockquote>Récapitulatif</blockquote>
<table>
    <thead>
        <tr>
            <th align="right">Total Unité MF11000 reçu</th>
            <th align="right">Total Unité MF11000 vendu</th>
            <th align="right">Total Unité MF11000 restant</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <td align="right"><strong>'.number_format($mf11000_recu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($mf11000_vendu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($mf11000_restant,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>


<br />
<br />


  <blockquote>Détails MF11000</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Numero Bon / Code membre</th>
            <th align="center">Ressource</th>
            <th align="right">Montant reçu</th>
            <th align="right">Montant vendu</th>
            <th align="right">Solde</th>
        </tr>
    </thead>
    <tbody>
    ';

			   $tot_entrees = 0;
			   $tot_sorties = 0;
			   $tot_solde = 0;
	
$html .= '

';
foreach ($detailmf11000 as $entry): 
$html .= '

';

		        if($entry->num_bon == null) {
				  $numero = $entry->code_membre;
			    } else {
			      $numero = $entry->num_bon;
			    }

$html .= '

        <tr>
          <td align="left">'.$numero.'</td>
          <td align="center">'.$entry->origine_sms.'11000'.'</td>
          <td align="right"><strong>'.number_format($entry->mont_sms,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->mont_vendu,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->solde_sms,0,',',' ').'</strong></td>
        </tr>
    ';

			    $tot_entrees += $entry->mont_sms;
			    $tot_sorties += $entry->mont_vendu;
			    $tot_solde += $entry->solde_sms;
	
$html .= '

';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit($entry->origine_sms.'11000');
                $a->setRelevedetail_credit($entry->id_detail_smsmoney);
                $a->setRelevedetail_montant($entry->solde_sms);
                $a->setRelevedetail_date($entry->date_allocation);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 
$html .= '

        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($tot_entrees,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_sorties,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_solde,0,',',' ').'</strong></td>
        </tr>
      <tr>
        <td colspan="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</td>
      </tr>
    </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_MF11000_PM_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_MF11000_PM_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);


	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
	    
    }
	










	 public function relevemf107pdfAction() {
    
	
        /* page index/relevemf107pdf - Génération de relevé mf107 en PDF */

		$this->_helper->layout->disableLayout();
		

		include("Transfert.php");
		
$date_id = new Zend_Date(Zend_Date::ISO_8601);
		

		    $code_membre  = '';
		    $designation  = '';
		    $soldemf107   = 0;
		   
	            $code_membre =  (string)$this->_request->getParam('code');

				$designation = "";
    

			        $anciencompte_nn   = new Application_Model_EuAncienCompte();
		            $anciencm_map      = new Application_Model_EuAncienCompteMapper();
					$date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;
			        $rep = new Application_Model_EuRepartitionMf107();
			        $m_rep = new Application_Model_EuRepartitionMf107Mapper();
			        $dmf = new Application_Model_EuDetailMf107();
			        $mdmf = new Application_Model_EuDetailMf107Mapper();
			        $mf107 = new Application_Model_EuMembreFondateur107();
			        $mmf107 = new Application_Model_EuMembreFondateur107Mapper();
			        $montant = 0;
			        $nb_dmf = 0;
			        $code_compteancien = 'NN-TR-'.$code_membre;
					$soldemf107 = $m_rep->findSum($code_membre);	
				
				
			$code_membre  = $code_membre;
			$designation  = $designation;
            $soldemf107  = $soldemf107;			
	
////////////////////////////////////////////////////////////////////////////////

			$mf107  = new Application_Model_EuMembreFondateur107();
			$mmf107 = new Application_Model_EuMembreFondateur107Mapper();
		    $tabela = new Application_Model_DbTable_EuRepartitionMf107();
		    $select = $tabela->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false)
                   ->join('eu_detail_mf107', 'eu_detail_mf107.id_mf107 = eu_repartition_mf107.id_mf107',array('code_membre','id_mf107','mont_apport','pourcentage','numident'));
		    $select->where('eu_repartition_mf107.code_membre like ?',$code_membre);
			//$select->order('eu_repartition_mf107.id_rep asc');
			$select->order('eu_detail_mf107.code_membre asc');
		    //$select = $tabela->select();
	        
			$detailmf107 = $tabela->fetchAll($select);
			



$membre = (string)$this->_request->getParam('code');



////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
			
                $compteur = $ma->findConuter() + 1;
                $a->setReleve_id($compteur);
                $a->setReleve_type("MF107");
                $a->setReleve_membre($code_membre);
                $a->setReleve_fichier(NULL);
                $a->setReleve_date($date_id->toString('yyyy-MM-dd'));
                $a->setPublier(-1);
                $ma->save($a);
					
////////////////////////////////////////////////////



$membree = new Application_Model_EuAncienMembre();
$mapper_membree = new Application_Model_EuAncienMembreMapper();
$mapper_membree->find($membre, $membree);
if (substr($membre, -1) == "P") {
$nom_membree = $membree->nom_membre.' '.$membree->prenom_membre;
} else if (substr($membre, -1) == "M") {
$nom_membree = $membree->raison_sociale;
}


$html = "";

$html .= '
    <page backbottom="15mm">
    <page_footer>
        <table>
<tr>
    <td align="center">
	<hr>
	Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425 - [ Page [[page_cu]] / [[page_nb]] ]</td>
  </tr>
        </table>
    </page_footer>

<table width="768" border="0">
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td align="right"><barcode type="C128B" value="'.$membre.'" style="height:10mm;" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2"></td>
  </tr>
  <tr>
    <td>
<strong><u><h3>RELEVE MF107 </h3></u></strong>
Membre : '.$nom_membree.' <strong style="font-size:16px;">('.$membre.')</strong><br />
Date d&rsquo;émission  du relevé : <strong>'.$date_id->toString('dd-MM-yyyy').'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td>
  </tr>
  </table>';

$html .= '
        

	





  <blockquote>Récapitulatif</blockquote>
<table>
    <thead>
        <tr>
            <th align="right">Solde MF107</th>
        </tr>
    </thead>
    <tbody>
        <tr>
          <td align="right"><strong>'.number_format($soldemf107,0,',',' ').'</strong></td>
        </tr>
    </tbody>
</table>


<br />
<br />


  <blockquote>Détails MF107</blockquote>
<table>
    <thead>
        <tr>
            <th align="left">Apporteur</th>
            <th align="center">Type</th>
            <th align="right">Montant apporté</th>
            <th align="right">% Perçu</th>
            <th align="right">Montant reçu</th>
            <th align="right">Montant utilisé</th>
            <th align="right">Solde</th>
        </tr>
    </thead>
    <tbody>
    ';

			   $tot_apport = 0;
			   $tot_pourcentage = 0;
			   $tot_entrees = 0;
			   $tot_sorties = 0;
			   $tot_solde = 0;
	
$html .= '

';
foreach ($detailmf107 as $entry): 
$html .= '

';

			$mf107  = new Application_Model_EuMembreFondateur107();
			$mmf107 = new Application_Model_EuMembreFondateur107Mapper();
			    $findmf107 = $mmf107->find($entry->numident,$mf107);
				$code_proprio = $mf107->getCode_membre();
				if(($code_proprio == $code_membre) && ($entry->code_membre == $code_membre)) {
				  $pourcentage = 100;
				}
			    elseif($code_proprio == $code_membre) {
				  $pourcentage = $entry->pourcentage;
				} elseif($entry->code_membre == $code_membre) {
				  $pourcentage = 100 - $entry->pourcentage;
				}

$html .= '

        <tr>
          <td align="left">'.$entry->code_membre.'</td>
          <td align="center">'.'MF107'.'</td>
          <td align="right"><strong>'.number_format($entry->mont_apport,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($pourcentage,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->mont_rep,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->mont_reglt,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($entry->solde_rep,0,',',' ').'</strong></td>
        </tr>
    ';

				$tot_apport += $entry->mont_apport;
				//$tot_pourcentage += $entry->pourcentage;
			    $tot_entrees += $entry->mont_rep;
			    $tot_sorties += $entry->mont_reglt;
			    $tot_solde += $entry->solde_rep;
	
$html .= '

';

 
////////////////////////////////////////////////////

                $a = new Application_Model_EuRelevedetail();
                $ma = new Application_Model_EuRelevedetailMapper();
			
                $compteurdetail = $ma->findConuter() + 1;
                $a->setRelevedetail_id($compteurdetail);
                $a->setRelevedetail_releve($compteur);
                $a->setRelevedetail_produit("MF107");
                $a->setRelevedetail_credit($entry->id_rep);
                $a->setRelevedetail_montant($entry->solde_rep);
                $a->setRelevedetail_date($entry->date_rep);
                $a->setPublier(0);
                $ma->save($a);
					
////////////////////////////////////////////////////

endforeach; 
$html .= '

        <tr>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>Total</strong></td>
          <td align="right"><strong>'.number_format($tot_apport,0,',',' ').'</strong></td>
          <td align="left">&nbsp;</td>
          <td align="right"><strong>'.number_format($tot_entrees,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_sorties,0,',',' ').'</strong></td>
          <td align="right"><strong>'.number_format($tot_solde,0,',',' ').'</strong></td>
        </tr>
    </tbody>
</table>

<br />
<br />
&nbsp;

</page>


  



';

$html .= '
  

';

		

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/releve.html';
$somecontent = $html;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }
    
    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
    
    fclose($handle);
                    
} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////	
$file = $filename;
if (!is_dir("../../webfiles/pdf_releve/")) {
mkdir("../../webfiles/pdf_releve/", 0777);
}

$newfile = "../../webfiles/pdf_releve/RELEVE_MF107_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))).".html"	;
$newnom = "RELEVE_MF107_".str_replace("/", "_", mettreaccents($membre)."_".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss'))));
$newchemin = "../../webfiles/pdf_releve/"	;

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);


	
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($compteur, $a);
			
                $a->setReleve_fichier($file);
                $ma->update($a);
					
////////////////////////////////////////////////////
	
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
                //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
        $this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));

/*		$tab = explode(".", $_SERVER['SERVER_NAME']);
$domaine = $tab[count($tab)-2].".".$tab[count($tab)-1];
if($domaine != "gacsource.net"){$domaine = "esmcgacsource.com";}
        //return str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file);
		$this->_redirect(str_replace("../../webfiles/", "http://webfiles.".$domaine."/", $file));
*/	    
    }
	




    public function trouvecode1Action() {
           
		   /* page index/trouvecode - Retrouve code membre */

            $sessionmcnp = new Zend_Session_Namespace('mcnp');
            //$this->_helper->layout->disableLayout();
            $this->_helper->layout()->setLayout('layoutpublic');
		   
		    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
			
			    if ((isset($_POST['nom']) && $_POST['nom']!="") || (isset($_POST['prenom']) && $_POST['prenom']!="") || (isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="") || (isset($_POST['code_membre']) && $_POST['code_membre']!="")) {
			       
				    if (isset($_POST["raison_sociale"])) $raison_sociale =  strtoupper($_POST["raison_sociale"]);
                    if (isset($_POST["nom"]))            $nom = strtoupper($_POST["nom"]);
                    if (isset($_POST["prenom"]))         $prenom = strtoupper($_POST["prenom"]);
				    if (isset($_POST["code_membre"])) $code_membre =  strtoupper($_POST["code_membre"]);
					$t_physique = new Application_Model_DbTable_Physique();
					$t_morale = new Application_Model_DbTable_Morale();
					
					
					if($nom !="" || $prenom !="" || ($code_membre !="" && substr($code_membre, -1) == "P")) {
					    $select = $t_physique->select();
                        $select->from($t_physique);
					if($nom !="") {
                        $select->where('nom like ?', '%'.$nom.'%');
					}
					if($prenom !="") {
                        $select->where('prenom like ?', '%'.$prenom.'%');
					}
					if($code_membre !="") {
                        $select->where('numidentp like ?', '%'.$code_membre.'%');
					}
					    $this->view->recherche = $t_physique->fetchAll($select);
						
					} elseif($raison_sociale !="" || ($code_membre !="" && substr($code_membre, -1) == "M"))   {
					    $select = $t_morale->select();
                        $select->from($t_morale);
					if($raison_sociale !="") {
                        $select->where('nomm like ?', '%'.$raison_sociale.'%');
					}
					if($code_membre !="") {
                        $select->where('numidentm like ?', '%'.$code_membre.'%');
					}
					    $this->view->recherche = $t_morale->fetchAll($select);
					
					}
					/*if($nom !="" && $prenom !="") {
					    $select = $t_physique->select();
                        $select->from($t_physique)
                               ->where('nom like ?', '%'.$nom.'%')
                               ->where('prenom like ?', '%'.$prenom.'%');
					    $this->view->recherche = $t_physique->fetchAll($select);
			        
					} elseif($nom !="") {
					    $select = $t_physique->select();
                        $select->from($t_physique)
                               ->where('nom like ?', '%'.$nom.'%');
					    $this->view->recherche = $t_physique->fetchAll($select);
					
					} elseif($prenom !="") {
					    $select = $t_physique->select();
                        $select->from($t_physique)
                               ->where('prenom like ?', '%'.$prenom.'%');
					    $this->view->recherche = $t_physique->fetchAll($select);
					
					} elseif($raison_sociale !="")   {
					    $select = $t_morale->select();
                        $select->from($t_morale)
                               ->where('nomm like ?', '%'.$raison_sociale.'%');
					    $this->view->recherche = $t_morale->fetchAll($select);
					
					}*/
			
			    }
			
			}
   
   
   
   
    }



    public function trouvecodeAction() {
        /* page index/trouvecode - Retrouve code membre */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    


    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
        if ((isset($_POST['nom']) && $_POST['nom']!="") || (isset($_POST['prenom']) && $_POST['prenom']!="") || (isset($_POST['raison_sociale']) && $_POST['raison_sociale']!="") || (isset($_POST['code_membre']) && $_POST['code_membre']!="")) {

	    if (isset($_POST["raison_sociale"])) $raison_sociale =  strtoupper($_POST["raison_sociale"]);
        if (isset($_POST["nom"])) $nom = strtoupper($_POST["nom"]);
        if (isset($_POST["prenom"])) $prenom = strtoupper($_POST["prenom"]);
	    if (isset($_POST["code_membre"])) $code_membre =  strtoupper($_POST["code_membre"]);

        $tabela = new Application_Model_DbTable_EuAncienMembre();
		
		if($raison_sociale !="" || $nom !="" || $prenom !="" || $code_membre !="") {
		    $select = $tabela->select();
            $select->from($tabela);
		if($raison_sociale !="") {
            $select->where('raison_sociale like ?', '%'.$raison_sociale.'%');
		}
		if($nom !="") {
            $select->where('nom_membre like ?', '%'.$nom .'%');
		}
		if($prenom !="") {
            $select->where('prenom_membre like ?', '%'.$prenom .'%');	 		  
		}
		if($code_membre !="") {
            $select->where('ancien_code_membre like ?', '%'.$code_membre .'%');
		}
	        $this->view->recherche = $tabela->fetchAll($select);
		}
		/*if($raison_sociale !="" && $nom !="" && $prenom !="") {
		    $select = $tabela->select();
            $select->from($tabela)
                   ->where('raison_sociale like ?', '%'.$raison_sociale.'%')
                   ->where('nom_membre like ?', '%'.$nom .'%')
                   ->where('prenom_membre like ?', '%'.$prenom .'%');	 		  
	        $this->view->recherche = $tabela->fetchAll($select);
	
	    } else if($raison_sociale !="" && $nom !="") {
		  $select = $tabela->select();
          $select->from($tabela)
                 ->where('raison_sociale like ?', '%'.$raison_sociale.'%')
                 ->where('nom_membre like ?', '%'.$nom.'%');	 		  
	      $this->view->recherche = $tabela->fetchAll($select);
		   
		} else if($raison_sociale !="" && $prenom !="") {
		  $select = $tabela->select();
          $select->from($tabela)
                 ->where('raison_sociale like ?', '%'.$raison_sociale.'%')
                 ->where('prenom_membre like ?', '%'.$prenom.'%');	 		  
	      $this->view->recherche = $tabela->fetchAll($select);
		
		} else if($nom!="" && $prenom!="") {
		   
		    $select = $tabela->select();
            $select->from($tabela)
                  ->where('nom_membre like ?', '%'.$nom . '%')
                  ->where('prenom_membre like ?', '%'.$prenom.'%');	 		  
	        $this->view->recherche = $tabela->fetchAll($select);
		   
		} else if($raison_sociale!="") {
		       
		    $select = $tabela->select();
            $select->from($tabela)
                  ->where('raison_sociale like ?', '%'.$raison_sociale.'%');	 		  
	        $this->view->recherche = $tabela->fetchAll($select);

		} else if($nom!="") {
		    
			$select = $tabela->select();
            $select->from($tabela)
                   ->where('nom_membre like ?', '%'.$nom .'%');	 		  
	        $this->view->recherche = $tabela->fetchAll($select);

		} else if($prenom!="") {
		  $select = $tabela->select();
          $select->from($tabela)
                 ->where('prenom_membre like ?', '%'.$prenom . '%');	 		  
	      $this->view->recherche = $tabela->fetchAll($select);
		
		}*/


    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
  } 
        $this->view->tabletri = 1;
  }







    public function relevegievalidationsalaireAction() {
        /* page index/relevevalidationsalaire - Retrouve salaire */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    


        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
        if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
				    $code_membre = $_POST['code_membre'];
				    $tabela = new Application_Model_DbTable_Credit();
				    $membre = $_POST['code_membre'];
				    if($membre != '') {
					  $select = $tabela->select();
					  $select->where('membre = ?', $membre);
					  $select->where('libelle like ?','CNCS');
	                }
	                $this->view->creditcncs = $tabela->fetchAll($select);
			        $this->view->code_membre    = $code_membre;
	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("CNCS", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNCS", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }

    
    
    





    public function relevevalidationsalaireAction()
    {
        /* page index/relevevalidationsalaire - Retrouve salaire */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

		    $code_membre  = '';
			$designation  = '';
			$cncs         = 0;
			$escompte     = 0;
			$echange      = 0;
		    $soldenr      = 0;
		    $soldenn      = 0;
		    $code_membre = '';

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    
				$db_cccncs = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_cccncs = $db_cccncs->select();
				$select_cccncs->from($db_cccncs,array('SUM(montant_place) as somme_cccncs'));
                $select_cccncs->where('code_membre = ?', $code_membre);
				$select_cccncs->where('code_produit in (?)',array('CNCSr','CNCSnr'));
                $result_cccncs = $db_cccncs->fetchAll($select_cccncs);
		        $row_cccncs = $result_cccncs->current();
		        $cncs = $row_cccncs['somme_cccncs'];
				
				
				$db_escompte     = new Application_Model_DbTable_EuAncienEchange();
				$select_escompte = $db_escompte->select();
				$select_escompte->from($db_escompte,array('SUM(montant) as somme_escompte'));
                $select_escompte->where('code_membre = ?', $code_membre);
				$select_escompte->where('type_echange like ?','NR/NN');
                $result_escompte   = $db_escompte->fetchAll($select_escompte);
		        $row_escompte = $result_escompte->current();
		        $escompte = $row_escompte['somme_escompte'];
				
				
				$db_echange      = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_echange  = $db_echange->select();
				$select_echange->from($db_echange,array('SUM(montant_place) as somme_echange'));
                //$select_echange->where('code_membre = ?', $code_membre);
				$select_echange->where('compte_source like ?','NR-TCNCS-'.$code_membre);
				$select_echange->orwhere('compte_source like ?','NN-TCNCS-'.$code_membre);
                $result_echange   = $db_echange->fetchAll($select_echange);
		        $row_echange = $result_echange->current();
		        $echange = $row_echange['somme_echange'];
				
				
				/*
				$db_ccnr = new Application_Model_DbTable_EuAncienCompteCredit();
				$select_ccnr = $db_ccnr->select();
				$select_ccnr->from($db_ccnr,array('SUM(montant_credit) as somme_ccnr'));
                $select_ccnr->where('code_membre = ?', $code_membre);
				$select_ccnr->where('code_produit in (?)',array('CNCSr','CNCSnr'));
                $result_ccnr = $db_ccnr->fetchAll($select_ccnr);
		        $row_ccnr = $result_ccnr->current();
		        $soldenr = $row_ccnr['somme_ccnr'];*/
				
				
				
                 
				if(substr($code_membre,19,1) == 'M')  {
				    $db_cnn = new Application_Model_DbTable_EuAncienCompte();
				    $select_cnn = $db_cnn->select();
				    $select_cnn->from($db_cnn,array('SUM(solde) as somme_cnn'));
                    $select_cnn->where('code_membre = ?', $code_membre);
				    $select_cnn->where('code_cat in (?)',array('TCNCSEI','TPN','TCNCS'));
                    $result_cnn = $db_cnn->fetchAll($select_cnn);
		            $row_cnn = $result_cnn->current();
		            $soldenn = $row_cnn['somme_cnn'];
				
				} else {
				    $soldenn = abs($cncs-$escompte-$echange);
				
				}	


			$this->view->code_membre    = $code_membre;
			$this->view->designation    = $designation;
		    $this->view->cncs           = $cncs;
			$this->view->escompte       = $escompte;
			$this->view->echange        = $echange;
		    $this->view->soldenn        = $soldenn;		   
	
	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("CNCS", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNCS", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }




    public function relevegievalidationcreditAction() {
        /* page index/relevevalidationcredit - Retrouve rpg/i */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				    $tabela = new Application_Model_DbTable_Place();
				    $membre = $_POST['code_membre'];
				    if($membre != '') {
					  $select = $tabela->select();
					  $select->where('membre = ?', $membre);
					  $select->where('lib like ?','CN'.'%');
	                }
	                $this->view->creditrpgi = $tabela->fetchAll($select);
			        $this->view->code_membre    = $code_membre;
	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("CNP", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNP", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }




    public function relevevalidationcreditAction() {
        /* page index/relevevalidationcredit - Retrouve rpg/i */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
                $tabela = new Application_Model_DbTable_EuAncienCompteCredit();
                $compte = '';
                $membre = $_POST['code_membre'];
		        $origine = '';
		
		
		if($membre != '' && $compte != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('date_octroi asc');
		} 
		else
		if($compte != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_produit = ?', $compte);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->order('date_octroi asc');
		} 
		else if($membre != '' && $origine != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('compte_source like ?',$origine.'%');
		   $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		   $select->order('date_octroi asc');
		} 
		else if($membre != '' && $compte != '') {
		   $select = $tabela->select();
		   $select->where('code_membre = ?', $membre);
		   $select->where('code_produit = ?', $compte);
		   $select->order('date_octroi asc');
		} else
        if ($compte != '' or $compte != null) {
		    $select = $tabela->select();
            $select->where('code_produit = ?', $compte);
			$select->order('date_octroi asc');
        } else
		if ($origine != '' or $origine != null) {
		    $select = $tabela->select();
            $select->where('compte_source like ?',$origine.'%');
		    $select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('date_octroi asc');
            			
        } else
        if ($membre != '' or $membre != null) {
		    $select = $tabela->select();
            $select->where('code_membre = ?', $membre);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
			$select->order('date_octroi asc');
        } else {
		    $select = $tabela->select();
            $select->from($tabela);
			$select->where('code_produit in (?)', array('RPGnr','RPGr','Inr','Ir'));
		    $select->order('date_octroi asc');
		}
        		
		
        $this->view->creditrpgi = $tabela->fetchAll($select);

			$this->view->code_membre    = $code_membre;


	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("CNP", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("CNP", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }











    public function relevevalidationgcpAction()
    {
        /* page index/relevevalidationgcp - Retrouve gcp */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

		$code_membre  = '';
		$designation  = '';
		$gcp          = 0;
		$escompte     = 0;
		$echange      = 0;
		$reste        = 0;
		$echu         = 0;

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    
		   $db_gcp = new Application_Model_DbTable_EuAncienGcp();
		   $select_gcp = $db_gcp->select();
           $select_gcp->from($db_gcp,array('SUM(mont_gcp) as somme_gcp'));
           $select_gcp->where('code_membre = ?', $code_membre);
           $result_gcp = $db_gcp->fetchAll($select_gcp);
		   $row_gcp = $result_gcp->current();
		   $gcp = $row_gcp['somme_gcp'];
		   
		   
		   $db_escompte = new Application_Model_DbTable_EuAncienEscompte();
		   $select_escompte = $db_escompte->select();
		   $select_escompte->from($db_escompte,array('SUM(montant) as somme_escompte'));
		   $select_escompte->where('code_membre = ?', $code_membre);
		   $result_escompte = $db_escompte->fetchAll($select_escompte);
		   $row_escompte = $result_escompte->current();
		   $escompte = $row_escompte['somme_escompte'];
		   
		   
		   $db_echange = new Application_Model_DbTable_EuAncienEchange();
		   $select_echange = $db_echange->select();
		   $select_echange->from($db_echange,array('SUM(montant) as somme_echange'));
		   $select_echange->where('code_membre = ?', $code_membre);
		   $select_echange->where('type_echange = ?','NB/NB');
		   $result_echange = $db_echange->fetchAll($select_echange);
		   $row_echange = $result_echange->current();
		   $echange = $row_echange['somme_echange'];
		   $reste = floor($gcp - $escompte - $echange);
		   
		   
		   $db_tpagcp = new Application_Model_DbTable_EuAncienTpagcp();
		   $select_tpagcp = $db_tpagcp->select();
		   $select_tpagcp->from($db_tpagcp,array('SUM(mont_echu) as somme_echu'));
		   $select_tpagcp->where('code_membre = ?', $code_membre);
		   $result_tpagcp = $db_tpagcp->fetchAll($select_tpagcp);
		   $row_tpagcp = $result_tpagcp->current();
		   $echu = $row_tpagcp['somme_echu'];


		$this->view->code_membre = $code_membre;
		$this->view->designation = $designation;
		$this->view->gcp         = $gcp;
		$this->view->escompte    = $escompte;
		$this->view->echange     = $echange;
		$this->view->reste       = $reste;
		$this->view->echue       = $echu;	
	
////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("GCP", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("GCP", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }












    public function relevevalidationkacmAction()
    {
        /* page index/relevevalidationkcm - Retrouve les kacm */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

		   $code_membre  = '';
		   $designation  = '';
		   $fs           = 0;
		   $fl           = 0;
		   $fcps         = 0;
		   
		   $fsu          = 0;
		   $flu          = 0;
		   $fcpsu        = 0;
		   
		   $fsnu         = 0;
		   $flnu         = 0;
		   $fcpsnu       = 0;
		   
		   $kacm         = 0;

  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    
				$db_fs = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fs = $db_fs->select();
				$select_fs->from($db_fs,array('SUM(CreditAmount) as somme_fs'));
				
				if($code_membre != '') {
                  $select_fs->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fs->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fs->where('Motif like ?','FS');
                $result_fs = $db_fs->fetchAll($select_fs);
		        $row_fs = $result_fs->current();
		        $fs = $row_fs['somme_fs'];
				
				$db_fl = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fl = $db_fl->select();
				$select_fl->from($db_fl,array('SUM(CreditAmount) as somme_fl'));
				
				if($code_membre != '') {
                  $select_fl->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fl->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fl->where('Motif like ?','FL');
                $result_fl = $db_fl->fetchAll($select_fl);
		        $row_fl = $result_fl->current();
		        $fl = $row_fl['somme_fl'];
				
				
				$db_cps = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cps = $db_cps->select();
				$select_cps->from($db_cps,array('SUM(CreditAmount) as somme_cps'));
				
				if($code_membre != '') {
                  $select_cps->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cps->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cps->where('Motif like ?','CPS');
                $result_cps = $db_cps->fetchAll($select_cps);
		        $row_cps = $result_cps->current();
		        $fcps = $row_cps['somme_cps'];
				
				
				$db_fsu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fsu = $db_fsu->select();
				$select_fsu->from($db_fsu,array('SUM(CreditAmount) as somme_fsu'));
				
				if($code_membre != '') {
                  $select_fsu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fsu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fsu->where('Motif like ?','FS');
				$select_fsu->where('IDDateTimeConsumed <> ?',0);
                $result_fsu = $db_fsu->fetchAll($select_fsu);
		        $row_fsu = $result_fsu->current();
		        $fsu = $row_fsu['somme_fsu'];
				
				
				$db_flu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_flu = $db_flu->select();
				$select_flu->from($db_flu,array('SUM(CreditAmount) as somme_flu'));
				
				if($code_membre != '') {
                  $select_flu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_flu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_flu->where('Motif like ?','FL');
				$select_flu->where('IDDateTimeConsumed <> ?',0);
                $result_flu = $db_flu->fetchAll($select_flu);
		        $row_flu = $result_flu->current();
		        $flu = $row_flu['somme_flu'];
				
				
				$db_cpsu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cpsu = $db_cpsu->select();
				$select_cpsu->from($db_cpsu,array('SUM(CreditAmount) as somme_cpsu'));
				
				if($code_membre != '') {
                  $select_cpsu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cpsu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cpsu->where('Motif like ?','CPS');
				$select_cpsu->where('IDDateTimeConsumed <> ?',0);
                $result_cpsu = $db_cpsu->fetchAll($select_cpsu);
		        $row_cpsu = $result_cpsu->current();
		        $fcpsu = $row_cpsu['somme_cpsu'];
				
				
				
				$db_fsnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_fsnu = $db_fsnu->select();
				$select_fsnu->from($db_fsnu,array('SUM(CreditAmount) as somme_fsnu'));
				
				if($code_membre != '') {
                  $select_fsnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_fsnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_fsnu->where('Motif like ?','FS');
				$select_fsnu->where('IDDateTimeConsumed = ?',0);
                $result_fsnu = $db_fsnu->fetchAll($select_fsnu);
		        $row_fsnu = $result_fsnu->current();
		        $fsnu = $row_fsnu['somme_fsnu'];
				
				
				$db_flnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_flnu = $db_flnu->select();
				$select_flnu->from($db_flnu,array('SUM(CreditAmount) as somme_flnu'));
				
				if($code_membre != '') {
                  $select_flnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_flnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_flnu->where('Motif like ?','FL');
				$select_flnu->where('IDDateTimeConsumed = ?',0);
                $result_flnu = $db_flnu->fetchAll($select_flnu);
		        $row_flnu = $result_flnu->current();
		        $flnu = $row_flnu['somme_flnu'];
				
				
				$db_cpsnu = new Application_Model_DbTable_EuAncienSmsmoney();
				$select_cpsnu = $db_cpsnu->select();
				$select_cpsnu->from($db_cpsnu,array('SUM(CreditAmount) as somme_cpsnu'));
				
				if($code_membre != '') {
                  $select_cpsnu->where('FromAccount like ?','NN-TR-'.$code_membre);
				} else {
                  $select_cpsnu->where('FromAccount like ?','NN-TR-'.'%');
                }				
				$select_cpsnu->where('Motif like ?','CPS');
				$select_cpsnu->where('IDDateTimeConsumed = ?',0);
                $result_cpsnu = $db_cpsnu->fetchAll($select_cpsnu);
		        $row_cpsnu = $result_cpsnu->current();
		        $fcpsnu = $row_cpsnu['somme_cpsnu'];


			$this->view->code_membre  = $code_membre;
			$this->view->designation  = $designation;
		    $this->view->fs           = $fs;
			$this->view->fl           = $fl;
			$this->view->fcps         = $fcps;
			
			$this->view->fsu           = $fsu;
			$this->view->flu           = $flu;
			$this->view->fcpsu         = $fcpsu;
			
			$this->view->fsnu           = $fsnu;
			$this->view->flnu           = $flnu;
			$this->view->fcpsnu         = $fcpsnu;
	
////////////////////////////////////////////////////////////////////////////////



	
	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("KACM", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("KACM", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }










    public function relevevalidationmf11000ppAction() {
        /* page index/relevevalidationmf11000 - Retrouve mf11000 */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublic');
    

			$num_bon          = '';
			$nom              = '';
            $code_membre      = '';
	        $designation      = '';
		    $mf11000_recu     = 0;
		    $mf11000_vendu    = 0;
		    $mf11000_restant  = 0;
		   
		    $entrees     = 0;
		    $sorties     = 0;
		    $solde       = 0;
		   
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
        if (isset($_POST['num_bon']) && $_POST['num_bon']!="") {
    
				$num_bon = $_POST['num_bon'];
				$nom = "";

				    $db_entrees = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_entrees = $db_entrees->select();
			        $select_entrees->from($db_entrees,array('SUM(mont_rep) as somme_entrees'));
			        $select_entrees->where('code_mf11000 like ?',$num_bon);
			        $result_entrees     = $db_entrees->fetchAll($select_entrees);
		            $row_entrees        = $result_entrees->current();
		            $entrees  = $row_entrees['somme_entrees'];
					
					$db_sorties = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_sorties = $db_sorties->select();
			        $select_sorties->from($db_sorties,array('SUM(mont_reglt) as somme_sorties'));
			        $select_sorties->where('code_mf11000 like ?',$num_bon);
			        $result_sorties     = $db_sorties->fetchAll($select_sorties);
		            $row_sorties        = $result_sorties->current();
		            $sorties  = $row_sorties['somme_sorties'];
					
					
					$db_solde = new Application_Model_DbTable_EuRepartitionMf11000();
			        $select_solde = $db_solde->select();
			        $select_solde->from($db_solde,array('SUM(solde_rep) as solde'));
			        $select_solde->where('code_mf11000 like ?',$num_bon);
			        $result_solde     = $db_solde->fetchAll($select_solde);
		            $row_solde        = $result_solde->current();
		            $solde  = $row_solde['solde'];
				
				


			$this->view->code_membre     = $code_membre;
			$this->view->designation     = $designation;
			$this->view->num_bon         = $num_bon;
			$this->view->nom             = $nom;
		    $this->view->mf11000_recu    = $mf11000_recu;
			$this->view->mf11000_vendu   = $mf11000_vendu;
			$this->view->mf11000_restant = $mf11000_restant;
			
			$this->view->entrees    = $entrees;
			$this->view->sorties    = $sorties;
			$this->view->solde      = $solde;
	
////////////////////////////////////////////////////////////////////////////////



	
	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("MF11000", $num_bon);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->num_bon    = "";
	            $_POST['num_bon'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("MF11000", $num_bon);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }








    public function relevevalidationmf11000pmAction() {
        /* page index/relevevalidationmf11000 - Retrouve mf11000 */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

			$num_bon          = '';
			$nom              = '';
            $code_membre      = '';
	        $designation      = '';
		    $mf11000_recu     = 0;
		    $mf11000_vendu    = 0;
		    $mf11000_restant  = 0;
		   
		    $entrees     = 0;
		    $sorties     = 0;
		    $solde       = 0;
		   
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    

			    $db_dsms = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsms = $db_dsms->select();
			    $select_dsms->from($db_dsms,array('SUM(mont_sms) as somme_mf'));
			    $select_dsms->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsms->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsms->where('code_membre_dist like ?','%');
                }
			    $result_dsms = $db_dsms->fetchAll($select_dsms);
		        $row_dsms = $result_dsms->current();
		        $mf11000_recu = $row_dsms['somme_mf'];
			   
			   
			    $db_dsmsv = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsmsv = $db_dsmsv->select();
			    $select_dsmsv->from($db_dsmsv,array('SUM(mont_vendu) as somme_vendu'));
			    $select_dsmsv->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsmsv->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsmsv->where('code_membre_dist like ?','%');
                }
			    $result_dsmsv = $db_dsmsv->fetchAll($select_dsmsv);
		        $row_dsmsv = $result_dsmsv->current();
		        $mf11000_vendu = $row_dsmsv['somme_vendu'];
			   
			    $db_dsmss = new Application_Model_DbTable_EuAncienDetailSmsmoney();
			    $select_dsmss = $db_dsmss->select();
			    $select_dsmss->from($db_dsmss,array('SUM(solde_sms) as somme_sms'));
			    $select_dsmss->where('origine_sms like ?','MF');
			    if($code_membre != '') {
                  $select_dsmss->where('code_membre_dist like ?',$code_membre);
				} else {
                  $select_dsmss->where('code_membre_dist like ?','%');
                }
			    $result_dsmss     = $db_dsmss->fetchAll($select_dsmss);
		        $row_dsmss        = $result_dsmss->current();
		        $mf11000_restant  = $row_dsmss['somme_sms'];
				
				


			$this->view->code_membre     = $code_membre;
			$this->view->designation     = $designation;
			$this->view->num_bon         = $num_bon;
			$this->view->nom             = $nom;
		    $this->view->mf11000_recu    = $mf11000_recu;
			$this->view->mf11000_vendu   = $mf11000_vendu;
			$this->view->mf11000_restant = $mf11000_restant;
			
			$this->view->entrees    = $entrees;
			$this->view->sorties    = $sorties;
			$this->view->solde      = $solde;
	
////////////////////////////////////////////////////////////////////////////////



	
	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("MF11000", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("MF11000", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }







    public function dotransfertAction() {
	    $db = Zend_Db_Table::getDefaultAdapter();
        $db->beginTransaction();
        try {
		    $date = new Zend_Date();
		    $compte_map = new Application_Model_EuCompteMapper();
            $compte      = new Application_Model_EuCompte();
			$sms_money   = new Application_Model_EuSmsmoney();
            $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			$det_sms   = new Application_Model_EuDetailSmsmoney();
			$det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			$det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			$det_vtesms  = new Application_Model_EuDetailVentesms();
			
			$mobile = $_POST['souscription_mobile'];
			//$nbre_compte = $_POST['souscription_nombre'];
			$fcaps = Util_Utils::getParametre('CAPS','valeur');
			
			
			
			$mont_fs = Util_Utils::getParametre('FS','valeur');
            $mont_fl = Util_Utils::getParametre('FL','valeur');
            $mont_kps = Util_Utils::getParametre('FKPS','valeur');
			
		    //$montant = $nbre_compte * $fcaps;
		    $membre_pbf = '0010010010010000018M';
	        $code_compte_pbf = "NN-TR-".$membre_pbf;
			$ret = $compte_map->find($code_compte_pbf,$compte);
			
			
			if(($_POST['souscription_programme'] == 'KACM') 
			    || ($_POST['souscription_programme'] == 'CMFH') 
				&& $_POST['souscription_autonome'] == 1) {
				
			    $codefs   = '';
                $codefl   = '';
                $codefkps = '';
				
				// Traitement des produits FS
				// insertion dans la table eu_smsmoney
				$lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
				if ($lignesdetfs != null) {
				    $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
					$nengfs = $money_map->findConuter() + 1;
                    $sms_money->setNEng($nengfs)
                	      ->setCode_Agence(null)
                          ->setCreditAmount($mont_fs)
                          ->setSentTo($mobile)
                          ->setMotif('FS')
                          ->setId_Utilisateur(null)
                          ->setCurrencyCode('XOF')
                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                          ->setFromAccount($code_compte_pbf)
                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                          ->setCreditCode($codefs)
                          ->setDestAccount(null)
                          ->setIDDatetimeConsumed(0)
                          ->setDestAccount_Consumed(null)
                          ->setDatetimeConsumed(null)
                          ->setNum_recu(null);
                    $money_map->save($sms_money);
					
			        if($ret) {
			            // Mise à jour du compte de transfert
				        $compte->setSolde($compte->getSolde() - $mont_fs);
                        $compte_map->update($compte);    
	                } else {
			            $db->rollback();
			            $this->view->message = 'Erreur de traitement : le compte est introuvable';
                        return;			   
			        }
					
				    $i = 0;
					$reste = $mont_fs;
					$nbre_lignesdetfs = count($lignesdetfs);
					while ($reste > 0 && $i < $nbre_lignesdetfs) {
					    $lignedetfs = $lignesdetfs[$i];
                        $id = $lignedetfs->getId_detail_smsmoney();
						$finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						if ($reste >= $lignedetfs->getSolde_sms()) {
						    //Mise à jour  des lignes d'enrégistrement
                            $reste = $reste - $lignedetfs->getSolde_sms();
							$lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
		                               ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
		                               ->setSolde_sms(0);
                            $det_sms_m->update($lignedetfs);			 							   
						} else  {
							//Mise à jour  des lignes d'enrégistrement
                            $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
						    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
							$lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                            $det_sms_m->update($lignedetfs);
						    $reste = 0;
						}
						
						//insertion dans la table eu_detailventesms
						$id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						           ->setId_detail_smsmoney($id)
                                   ->setCode_membre_dist($membre_pbf)
                                   ->setCode_membre(null)
                                   ->setType_tansfert('FS')
                                   ->setCreditcode($codefs)
                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                   ->setMont_vente($reste)
                                   ->setId_utilisateur(null)
                                   ->setCode_produit('FS');
                        $det_vte_sms->insert($det_vtesms->toArray());
					
						$i++;
					}
					
				} else {
				    $db->rollback();
			        $this->view->message = 'Erreur de traitement : le solde du compte FS est null';
                    return;
				}
				
				
				// Traitement des produits FL
                // insertion dans la table eu_smsmoney
				$lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
				if ($lignesdetfl != null) {
				    $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
				    $nengfl = $money_map->findConuter() + 1;
                    $sms_money->setNEng($nengfl)
                	      ->setCode_Agence(null)
                          ->setCreditAmount($mont_fl)
                          ->setSentTo($mobile)
                          ->setMotif('FL')
                          ->setId_Utilisateur(null)
                          ->setCurrencyCode('XOF')
                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                          ->setFromAccount($code_compte_pbf)
                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                          ->setCreditCode($codefl)
                          ->setDestAccount(null)
                          ->setIDDatetimeConsumed(0)
                          ->setDestAccount_Consumed(null)
                          ->setDatetimeConsumed(null)
                          ->setNum_recu(null);
                    $money_map->save($sms_money);
					
				
			        // Mise à jour du compte de transfert
				    $compte->setSolde($compte->getSolde() - $mont_fl);
                    $compte_map->update($compte);    
	                
				
				    $j = 0;
					$reste = $mont_fl;
					$nbre_lignesdetfl = count($lignesdetfl);
					while ($reste > 0 && $j < $nbre_lignesdetfl) {
					    $lignedetfl = $lignesdetfl[$j];
                        $id = $lignedetfl->getId_detail_smsmoney();
						$finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						if ($reste >= $lignedetfl->getSolde_sms()) {
						    //Mise à jour  des lignes d'enrégistrement
                            $reste = $reste - $lignedetfl->getSolde_sms();
							$lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
		                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
		                               ->setSolde_sms(0);
                            $det_sms_m->update($lignedetfl);			 							   
						} else  {
							//Mise à jour  des lignes d'enrégistrement
                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
						    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
							$lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                            $det_sms_m->update($lignedetfl);
						    $reste = 0;
						}
						//insertion dans la table eu_detailventesms
						$id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						           ->setId_detail_smsmoney($id)
                                   ->setCode_membre_dist($membre_pbf)
                                   ->setCode_membre(null)
                                   ->setType_tansfert('FL')
                                   ->setCreditcode($codefl)
                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                   ->setMont_vente($reste)
                                   ->setId_utilisateur(null)
                                   ->setCode_produit('FL');
                        $det_vte_sms->insert($det_vtesms->toArray());
						$j++;
					}
					
				} else {
				    $db->rollback();
			        $this->view->message = 'Erreur de traitement : le solde du compte FL est null';
                    return;
				}
				
				// Traitement des produits FKPS
				$lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FKPS');
				if ($lignesdetfkps != null) {
				    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
				    $nengfkps = $money_map->findConuter() + 1;
                    $sms_money->setNEng($nengfkps)
                	          ->setCode_Agence(null)
                              ->setCreditAmount($mont_fkps)
                              ->setSentTo($mobile)
                              ->setMotif('FKPS')
                              ->setId_Utilisateur(null)
                              ->setCurrencyCode('XOF')
                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                              ->setFromAccount($code_compte_pbf)
                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                              ->setCreditCode($codefkps)
                              ->setDestAccount(null)
                              ->setIDDatetimeConsumed(0)
                              ->setDestAccount_Consumed(null)
                              ->setDatetimeConsumed(null)
                              ->setNum_recu(null);
                    $money_map->save($sms_money);
					
					// Mise à jour du compte de transfert
				    $compte->setSolde($compte->getSolde() - $mont_fkps);
                    $compte_map->update($compte);
					
				    $k = 0;
					$reste = $mont_fkps;
					$nbre_lignesdetfkps = count($lignesdetfkps);
					while ($reste > 0 && $k < $nbre_lignesdetfkps) {
					    $lignedetfkps = $lignesdetfkps[$k];
                        $id = $lignedetfkps->getId_detail_smsmoney();
						$finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						if ($reste >= $lignedetfkps->getSolde_sms()) {
						    //Mise à jour  des lignes d'enrégistrement
                            $reste = $reste - $lignedetfkps->getSolde_sms();
							$lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
		                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
		                                 ->setSolde_sms(0);
                            $det_sms_m->update($lignedetfkps);			 							   
						} else  {
							//Mise à jour  des lignes d'enrégistrement
                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
						    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
							$lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                            $det_sms_m->update($lignedetfkps);
						    $reste = 0;
						}
						
						//insertion dans la table eu_detailventesms
						$id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						           ->setId_detail_smsmoney($id)
                                   ->setCode_membre_dist($membre_pbf)
                                   ->setCode_membre(null)
                                   ->setType_tansfert('FKPS')
                                   ->setCreditcode($codefl)
                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                   ->setMont_vente($reste)
                                   ->setId_utilisateur(null)
                                   ->setCode_produit('FKPS');
                        $det_vte_sms->insert($det_vtesms->toArray());
						$k++;
					}
					
				} 
				/*else {
				    $db->rollback();
			        $this->view->message = 'Erreur de traitement : le solde du compte FKPS est null';
                    return;
				}*/
				
				// insertion dans la table eu_code_activation
				$m_codeactivation = new Application_Model_EuCodeActivationMapper();
				$codeactivation = new Application_Model_EuCodeActivation();
			    $countcode = $m_codeactivation->findConuter() + 1;
				
				$codeactivation->setId_code_activation($countcode)
					           ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				$codeactivation->setCode_membre(null);   
			    $codeactivation->setCode_fs($codefs);
				$codeactivation->setCode_fl($codefl);
				$codeactivation->setCode_fkps($codefkps);
				$codeactivation->setSouscription_id($compteur_souscription);
				$m_codeactivation->save($codeactivation);
				
				$compteur = Util_Utils::findConuter() + 1;
				Util_Utils::addSms($compteur,$mobile,'Voici vos codes d"activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FKPS : '.$codefkps);
			
			
            } 
			
			if($_POST['souscription_programme'] == 'CMFH')   {
			    $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			    if($_POST['souscription_autonome'] == 1) {   
			      $nbre_compte = $_POST['souscription_nombre'] - 1; 
			    } else {
				  $nbre_compte = $_POST['souscription_nombre'];
				}
				$montant = $nbre_compte * $fcaps;
				
				// Traitement des produits CAPS
				$lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
				if ($lignedetfcaps != null) {
				    $nengfcaps = $money_map->findConuter() + 1;
                    $sms_money->setNEng($nengfcaps)
                	          ->setCode_Agence(null)
                              ->setCreditAmount($montant)
                              ->setSentTo($mobile)
                              ->setMotif('CAPS')
                              ->setId_Utilisateur(null)
                              ->setCurrencyCode('XOF')
                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                              ->setFromAccount($code_compte_pbf)
                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                              ->setCreditCode($codefcaps)
                              ->setDestAccount(null)
                              ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('yyyy-MM-dd HH:mm:ss')))
                              ->setDestAccount_Consumed('CAPS-'.$compteur_souscription)
                              ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                              ->setNum_recu(null);
                    $money_map->save($sms_money);
					
					// Mise à jour du compte de transfert
				    if($ret) {
			          // Mise à jour du compte de transfert
				      $compte->setSolde($compte->getSolde() - $montant);
                      $compte_map->update($compte);    
	                } else {
			          $db->rollback();
			          $this->view->message = 'Erreur de traitement : le compte est introuvable';
                      return;			   
			        }
					
				    $l = 0;
					$reste = $montant;
					$nbre_lignesdetfcaps = count($lignesdetfcaps);
					while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
					    $lignedetfcaps = $lignesdetfcaps[$l];
                        $id = $lignedetfcaps->getId_detail_smsmoney();
						$finddetsmsmoney = $det_sms_m->find($id,$det_sms);
						if ($reste >= $lignedetfcaps->getSolde_sms()) {
						    //Mise à jour  des lignes d'enrégistrement
                            $reste = $reste - $lignedetfcaps->getSolde_sms();
							$lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                  ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                  ->setSolde_sms(0);
                            $det_sms_m->update($lignedetfcaps);			 							   
						} else  {
							//Mise à jour  des lignes d'enrégistrement
                            $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						    $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							$lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                            $det_sms_m->update($lignedetfcaps);
						    $reste = 0;
						}
						//insertion dans la table eu_detailventesms
						$id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				        $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						           ->setId_detail_smsmoney($id)
                                   ->setCode_membre_dist($membre_pbf)
                                   ->setCode_membre(null)
                                   ->setType_tansfert('CAPS')
                                   ->setCreditcode($codefcaps)
                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                   ->setMont_vente($reste)
                                   ->setId_utilisateur(null)
                                   ->setCode_produit('CAPS');
                        $det_vte_sms->insert($det_vtesms->toArray());
						$l++;
					}
					
				} 
				else {
				    $db->rollback();
			        $this->view->message = 'Erreur de traitement : le solde du compte CAPS est null';
                    return;
				}
				
				// insertion dans la table eu_depot_vente
				$m_dvente = new Application_Model_EuDepotVenteMapper();
				$dvente = new Application_Model_EuDepotVente();
			    $countdvente = $m_dvente->findConuter() + 1;
				$dvente->setId_depot($countdvente)
					   ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				$dvente->setCode_membre(null);    
			    $dvente->setCode_produit('CAPS');
				$dvente->setMont_depot($montant);
				$dvente->setMont_vendu(0);
				$dvente->setSolde_depot($montant);
				$dvente->setId_utilisateur(null);
				$dvente->setType_depot(null);
				$dvente->setSouscription_id($compteur_souscription);
				$m_dvente->save($dvente);
				
				$compteur = Util_Utils::findConuter() + 1;
				Util_Utils::addSms($compteur,$mobile,$montant.' ont ete ajoute a votre code de souscription');
			
			}

   
        } catch (Exception $exc) {
            $db->rollback();
            $this->view->message = 'Erreur de traitement  ' . $exc->getMessage() . $exc->getTraceAsString();
            return;
        }
    }







    public function relevevalidationmf107Action()
    {
        /* page index/relevevalidationmf107 - Retrouve mf107 */

  $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublic');
    

		    $code_membre  = '';
		    $designation  = '';
		    $soldemf107   = 0;
		   
  if (isset($_POST['ok']) && $_POST['ok']=="ok") {
  if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
	            $code_membre = $_POST['code_membre'];
				$designation = "";
    

			        $anciencompte_nn   = new Application_Model_EuAncienCompte();
		            $anciencm_map      = new Application_Model_EuAncienCompteMapper();
					$date_fin = new Zend_Date(Zend_Date::ISO_8601);
                    $date_deb = clone $date_fin;
			        $rep = new Application_Model_EuRepartitionMf107();
			        $m_rep = new Application_Model_EuRepartitionMf107Mapper();
			        $dmf = new Application_Model_EuDetailMf107();
			        $mdmf = new Application_Model_EuDetailMf107Mapper();
			        $mf107 = new Application_Model_EuMembreFondateur107();
			        $mmf107 = new Application_Model_EuMembreFondateur107Mapper();
			        $montant = 0;
			        $nb_dmf = 0;
			        $code_compteancien = 'NN-TR-'.$code_membre;
					$soldemf107 = $m_rep->findSum($code_membre);	
				
				
			$this->view->code_membre  = $code_membre;
			$this->view->designation  = $designation;
            $this->view->soldemf107  = $soldemf107;			
	
////////////////////////////////////////////////////////////////////////////////



	
	
////////////////////////////////////////////////////////////////////////////////



        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre_1("MF107", $code_membre);
		if(count($relev) > 0){
			
			
			


    if (isset($_POST['ok1']) && $_POST['ok1']=="ok1") {
	  
////////////////////////////////////////////////////

                $a = new Application_Model_EuReleve();
                $ma = new Application_Model_EuReleveMapper();
				$ma->find($relev->releve_id, $a);
			
                $a->setPublier($_POST['publier']);
                $ma->update($a);
					
////////////////////////////////////////////////////
	            $sessionmcnp->errorlogin = "Validation bien effectuée";
			    $this->view->code_membre    = "";
	            $_POST['code_membre'] = "";
	            $this->view->message = "";

}
			
			
			
			
			} else {
				
        $a = new Application_Model_EuReleve();
        $ma = new Application_Model_EuReleveMapper();
		$relev = $ma->fetchAllByTypeMembre("MF107", $code_membre);
		if(count($relev) > 0){
	            $this->view->message = "Relevé déjà validé";
			$this->view->trouve    = 1;
		}else{
	            $this->view->message = "Veuillez d'abord faire la demande de relevé";
			}
				
				
		    }


			



    } else {  
	$this->view->message = "Champs * obligatoire ...";}
       
    } 
        $this->view->tabletri = 1;
    }



	
	
    public function reactivationsouscriptiongieppAction() {
        //$this->_helper->layout->disableLayout();
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        
        if (isset($_POST['ok']) && $_POST['ok']=="ok")   {
            if (isset($_POST['numident']) && $_POST['numident'] !="" 
                && isset($_POST['souscription_personne']) && $_POST['souscription_personne'] !="" 
                && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome'] !="" 
                && isset($_POST['souscription_mobile']) && $_POST['souscription_mobile'] !="" 
                && isset($_POST['souscription_programme']) && $_POST['souscription_programme'] !="" 
                && isset($_POST['code_activite']) && $_POST['code_activite'] !="" 
                && isset($_POST['souscription_nom']) && $_POST['souscription_nom'] !="" 
                && isset($_POST['souscription_prenom']) && $_POST['souscription_prenom'] !="") {
        
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
                    $souscriptioneu = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscriptioneu->select();
                    $selection->from($souscriptioneu)
                              ->where('souscription_ancien_membre like ?',$_POST['numident']);
                    $sous = $souscriptioneu->fetchAll($selection);
                    if(count($sous) == 0) {
                
                       $eusouscription = new Application_Model_DbTable_EuSouscription();
                       $select = $eusouscription->select();
                    if($_POST['souscription_personne'] == "PP") {
                       $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_nom'])));
                       $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_prenom'])));
                    } else {
                       $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));
                    }
                    $select->order(array("souscription_id ASC"));
                    $select->limit(1);
                    $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                        $souscription_ok = 1;
                        $souscription_first = $rowseusouscription->souscription_id;
                    } else {
                        $souscription_ok = 0;
                    }
                
                    $date_id = Zend_Date::now();
                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();
                    include("Transfert.php");
                
                    $compteur_souscription = $souscription_mapper->findConuter() + 1;
                    $souscription->setSouscription_id($compteur_souscription);
                    $souscription->setSouscription_personne($_POST['souscription_personne']);
                    $souscription->setSouscription_nom($_POST['souscription_nom']);
                    $souscription->setSouscription_prenom($_POST['souscription_prenom']);
                
                    $souscription->setSouscription_email($_POST['souscription_email']);
                    $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                    $souscription->setSouscription_membreasso(1);
                
                    $souscription->setSouscription_nombre(1);
                    $souscription->setSouscription_programme($_POST['souscription_programme']);
                    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                
                    $souscription->setCode_activite($_POST["code_activite"]);
                    $souscription->setId_metier($_POST["id_metier"]);
                    $souscription->setId_competence($_POST["id_competence"]);
                    $souscription->setSouscription_ville($_POST['souscription_ville']);
                    $souscription->setSouscription_quartier($_POST['souscription_quartier']);
                
                    if($souscription_ok == 1) {
                        $souscription->setSouscription_souscription($souscription_first);
                    } else {
                        $souscription->setSouscription_souscription($compteur_souscription);
                    }
                
                    $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                    $souscription->setSouscription_ancien_membre($_POST['numident']);
                    $souscription->setPublier(3);
                    $souscription->setErreur(0);
                    $souscription->setId_canton($_POST['id_canton']);
                    $souscription_mapper->save($souscription);
        
                    $html = "";
                    $html .= "Nom : ".$_POST['souscription_nom']."<br />";
                    $html .= "Prenom : ".$_POST['souscription_prenom']."<br />";
                    
                    $html .= "E-mail : ".$_POST['souscription_email']."<br />";
                    $html .= "Mobile : ".$_POST['souscription_mobile']."<br />";
                    $html .= "Ville : ".$_POST['souscription_ville']."<br />";
                    $html .= "Quartier : ".$_POST['souscription_quartier']."<br />";
                    $html .= "Programme : ".$_POST['souscription_programme']."<br />";
                    
                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
                        $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
                        $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
                        $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";

                    $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                    
                        
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                    
                    $htmlpdf = "";

                    $htmlpdf .= '
                        <page backbottom="15mm">
                        <page_footer>
                        <table>
                        <tr>
                           <td align="center">
                           <hr>
                           Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
                        </tr>
                        </table>
                        </page_footer>

                        <table width="768" border="0">
                        <tbody>
                        <tr>
                           <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
                        </tr>';
                        
                        if($souscription->souscription_personne == "PP") {
                            $souscrip = new Application_Model_EuSouscription();
                            $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                            $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");
        
                            if($souscription->souscription_programme == "KACM") {
                                //if($compteur_souscrip == 0) {$compteur_souscrip = 1029;}  
                                    $unite = 0; 
                                    $htmlpdf .= '
                                    <tr>
                                        <td colspan="4" align="center"><strong><em><u>N° Reçu Personne Physique : PP'.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                                    </tr>';
                            }
                        }
        
                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
                        $souscriptionM->update($souscription);
                        
                        if($souscription->souscription_autonome == 1) {
                            $souscription_nombre = $souscription->souscription_nombre;
                            if($souscription->souscription_personne == "PP") {
                                $autonome = 0;
                            }
                        
                        }
                        
                        if($souscription->souscription_personne == "PP") {
                            $htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_nom.' '.$souscription->souscription_prenom.'</em></strong></p></td>
                                </tr>';
                        }
                        
                        if($souscription->souscription_nombre > 0) {
                            $htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="left"><em><u>Nombre de Comptes Marchands ré-activés: '.$souscription->souscription_nombre.'</u></em></td>
                                </tr>';
                        } else {
                            $htmlpdf .= '
                                <tr>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                </tr>';
                        }
        
                        $htmlpdf .= '
                                <tr>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                </tr>';
                        $htmlpdf .= '
                                <tr>
                                    <td colspan="2" align="left"><em><strong>Libellé</strong></em></td>
                                    <td align="center"><em><strong>Nombre de compte ré-activé</strong></em></td>
                                    <td align="center"><strong><em>Montant ré-activation</em></strong></td>
                                </tr>';
  
                        $htmlpdf .= '
                                <tr style="background-color:#999;">
                                    <td colspan="2" align="left"><em><strong>Ré-activation de Comptes Marchands</strong></em></td>
                                    <td align="center"><em>'.$souscription_nombre.'</em></td>
                                    <td align="center"><em>'.$autonome.' FCFA</em></td>
                                </tr>';

                        $htmlpdf .= '
                                <tr>
                                    <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($autonome), 50).' CFA</em></td>
                                    <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
                                    Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                                </tr>'; 
  
                        if($souscription->souscription_programme == "KACM") {
                            $htmlpdf .= '
                                <tr>
                                    <td colspan="2" align="left">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td colspan="2" align="left">&nbsp;</td>
                                </tr>';
                        }
                        
                        $htmlpdf .= '
                                <tr>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                    <td align="left">&nbsp;</td>
                                </tr>
                                <tr>
                                    <td colspan="4" align="center">';
                                        if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")) {
                                            list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$souscription->souscription_vignette);
                                            $pourcent = 700 * 100 / $width;
                                            $width2 = 700;
                                            $height2 = $pourcent * $height / 100;
                                            $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />

                                            ';
                                        }
                                $htmlpdf .= '  </td>
                                        </tr>
                                        </tbody>
                                        </table>
                                        <br />
                                        <br />
                                        &nbsp;
                                       </page>';
                        $htmlpdf .= '';
                        
                        
                //////////////////////////////////////////////////////////////////////
                    $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                    $somecontent = $htmlpdf;

                // Assurons nous que le fichier est accessible en écriture
                if (is_writable($filename)) {
                    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                    // Le pointeur de fichier est placé à la fin du fichier
                    // c'est là que $somecontent sera placé
                    if (!$handle = fopen($filename, 'w+')) {
                        echo "Impossible d'ouvrir le fichier ($filename)";
                        exit;
                    }

                    // Ecrivons quelque chose dans notre fichier.
                    if (fwrite($handle, $somecontent) === FALSE) {
                        echo "Impossible d'écrire dans le fichier ($filename)";
                        exit;
                    }
                    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                    fclose($handle);    
                } else {
                    echo "Le fichier $filename n'est pas accessible en écriture.";
                }

                ////////////////////////////////////////////////////////////////////////////    
                $file = $filename;
                if (!is_dir("../../webfiles/pdf_souscription/")) {
                    mkdir("../../webfiles/pdf_souscription/", 0777);
                }
                /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

                $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
                $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                $newchemin = "../../webfiles/pdf_souscription/";

                copy($file, $newfile);

                ob_start();
                include(dirname(__FILE__).'/../'.$newfile);
                $content = ob_get_clean();
                
        
                // convert to PDF
                require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                try {
                    $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                    $html2pdf->pdf->SetDisplayMode('fullpage');
                    $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                    //$html2pdf->writeHTML($content);
                    $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                }
                catch(HTML2PDF_exception $e) {
                    echo $e;
                    exit;
                }
                $file = $newchemin.$newnom.'.pdf';
                $filena = $newnom.'.pdf';
                unlink($newfile);
                        
                if($souscription->souscription_email != "") {
                    $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                    Zend_Mail::setDefaultTransport($tr);        
                    $mail = new Zend_Mail();
                    //$mail->setBodyText('Mon texte de test');
                    $mail->setBodyHtml($html);
                    $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                    $mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
                    $mail->setSubject('Ré-activation Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                    
                    $monImage = file_get_contents($file);
                    $finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
                    $at = new Zend_Mime_Part($monImage);
                    $at->type        = finfo_file($finfo, $file);
                    $at->disposition = Zend_Mime::DISPOSITION_INLINE;
                    $at->encoding    = Zend_Mime::ENCODING_BASE64;
                    $at->filename    = $filena;
                    $mail->addAttachment($at);
                    $mail->send($tr);
                }
				
                $esmc_email = Util_Utils::getParamEsmc(3);
                $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                
                $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                Zend_Mail::setDefaultTransport($tr);        
                $mail = new Zend_Mail();
                //$mail->setBodyText('Mon texte de test');
                $mail->setBodyHtml($html);
                $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                $mail->addTo($esmc_email, "ESMC - SIF");
                $mail->setSubject('Ré-activation Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));

                $monImage = file_get_contents($file);
                $finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
                $at = new Zend_Mime_Part($monImage);
                $at->type        = finfo_file($finfo, $file);
                $at->disposition = Zend_Mime::DISPOSITION_INLINE;
                $at->encoding    = Zend_Mime::ENCODING_BASE64;
                $at->filename    = $filena;
                $mail->addAttachment($at);
                $mail->send($tr);
                
                // operation de transfert des codes kacm
                $date = new Zend_Date();
                $compte_map = new Application_Model_EuCompteMapper();
                $compte      = new Application_Model_EuCompte();
                $sms_money   = new Application_Model_EuSmsmoney();
                $money_map   = new Application_Model_EuSmsmoneyMapper();
            
                $det_sms   = new Application_Model_EuDetailSmsmoney();
                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
            
                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                $det_vtesms  = new Application_Model_EuDetailVentesms();
            
                $mobile = $souscription->souscription_mobile;
                //$nbre_compte = $souscription->souscription_nombre;
                $fcaps = Util_Utils::getParametre('CAPS','valeur');
                                        
                $mont_fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $mont_kps = Util_Utils::getParametre('FKPS','valeur');
            
                //$montant = $nbre_compte * $fcaps;
                $membre_pbf = '0000000000000000001M';
                $code_compte_pbf = "NN-TR-".$membre_pbf;
                $ret = $compte_map->find($code_compte_pbf,$compte);
                
                if($souscription->souscription_programme == 'KACM') {
                     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                         // Mise à jour du compte de transfert
                         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);    
                      } else {
                         $db->rollback();               
                         $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                         $this->view->numident = $_POST['numident'];
                         $this->view->nom_membre = $_POST['souscription_nom'];
                         $this->view->prenom_membre = $_POST['souscription_prenom'];
                         $this->view->ville_membre = $_POST['souscription_ville']; 
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
                         $this->_redirect('/index/reactivationsouscriptiongiepp/id/'.$_POST['numident']);
                         return;               
                      }
                      
                      $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
                      // Traitement des produits FS
                      // insertion dans la table eu_smsmoney
                      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                      // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
                      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                      // Traitement des produits FCPS
                      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
                      if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {                        
                            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);                                   
                                                        
                            $i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                  $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
                                  $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                  if ($reste >= $lignedetfs->getSolde_sms()) {
                                         //Mise à jour  des lignes d'enrégistrement
                                         //insertion dans la table eu_detailventesms
                                         $id_detail_vtsms = $det_vtesms->findConuter() + 1; 
                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                     ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                     ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);                                           
                                    } else  {
                                          //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;    
                                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                     ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                          $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
                                          $reste = 0;
                                     }
                                     $i++;
                                  }
                                                        
                                  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                                            ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
                                                        
                                  $j = 0;
                                  $reste = $mont_fl;
                                  $nbre_lignesdetfl = count($lignesdetfl);
                                  while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                        $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                           //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
                                           //insertion dans la table eu_detailventesms
                                           $id_detail_vtsms = $det_vtesms->findConuter() + 1;   
                                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                      ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);                                           
                                          } else  {
                                             //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                              $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
                                              $reste = 0;
                                           }
                                                        $j++;
                                       }
                                                    
                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
                                                    
                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);                                         
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }
                                                    
                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;
                
                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));           
                                                    $codeactivation->setCode_membre(null);   
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setSouscription_id($souscription->souscription_id);
                                                    $codeactivation->setOrigine_code('GIE');
                                                    $m_codeactivation->save($codeactivation);
                
                                                    $compteur = Util_Utils::findConuter() + 1;
                                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand ESMC : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
                                                
                                                    }  else {
                                                        $db->rollback();
                                                        $this->view->error = 'Le solde du compte de transfert est null';
                                                        $this->view->numident = $_POST['numident'];
                                                        $this->view->nom_membre = $_POST['souscription_nom'];
                                                        $this->view->prenom_membre = $_POST['souscription_prenom'];
                                                        $this->view->ville_membre = $_POST['souscription_ville']; 
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
                                                        $this->_redirect('/index/reactivationsouscriptiongiepp/id/'.$_POST['numident']);    
                                                    }   
                
                
                
                }
                
                $db->commit();
                $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
                $this->_redirect('/index/ancienpp');
                }   
                } catch (Exception $exc) {
                    $db->rollback();
                    $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
                    return;
                }   
            
            }   else {  $this->view->error = "Champs * obligatoire ...";  } 
            
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Physique();
            $membres = new Application_Model_DbTable_EuAncienMembre();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentp like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
      
            $this->view->numident = $trouvmembre->numidentp;
            $this->view->nom_membre = $trouvmembre->nom;
            $this->view->prenom_membre = $trouvmembre->prenom;
            //$this->view->sexe = $trouvmembre->sexe;
            //$this->view->profession = $trouvmembre->prof;
            //$this->view->tel = $trouvmembre->tel;
            $this->view->ville_membre = $trouvmembre->ville; 
            //$this->view->pere = $trouvmembre->pere;
            //$this->view->mere = $trouvmembre->mere;
            $this->view->quartier_membre = $trouvmembre->qartresid;
            //$this->view->bp = $trouvmembre->bp;
            //$this->view->nbre_enf = $trouvmembre->nbrenf;
            $this->view->email = $trouvmembre->email;
            $this->view->portable = $trouvmembre->portable;
            //$this->view->formation = $trouvmembre->formation;
            //$this->view->lieu_nais = $trouvmembre->lieunais;
        }
        
    }


    public function reactivationsouscriptionmcnpppAction() {
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!="" 
                && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="" 
                && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!="" 
                && isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!="" 
                && isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="" 
                && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
                && isset($_POST['souscription_nom']) && $_POST['souscription_nom']!="" 
                && isset($_POST['souscription_prenom']) && $_POST['souscription_prenom']!="") {
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                        $souscriptioneu = new Application_Model_DbTable_EuSouscription();
                        $selection = $souscriptioneu->select();
                        $selection->from($souscriptioneu)
                                  ->where('souscription_ancien_membre like ?',$_POST['ancien_code_membre']);
                        $sous = $souscriptioneu->fetchAll($selection);
                        if(count($sous) == 0) { 
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_nom'])));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_prenom'])));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                            $souscription_ok = 1;
                            $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                            $souscription_ok = 0;
                        }
                        $date_id = Zend_Date::now();
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
                        include("Transfert.php");
                        
                        $compteur_souscription = $souscription_mapper->findConuter() + 1;
                        $souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne($_POST['souscription_personne']);
                        $souscription->setSouscription_nom($_POST['souscription_nom']);
                        $souscription->setSouscription_prenom($_POST['souscription_prenom']);
                        
                        $souscription->setSouscription_email($_POST['souscription_email']);
                        $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                        $souscription->setSouscription_membreasso(1);
                        $souscription->setSouscription_nombre(1);
                        $souscription->setSouscription_programme($_POST['souscription_programme']);
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setCode_activite($_POST["code_activite"]);
                        $souscription->setId_metier($_POST["id_metier"]);
                        $souscription->setId_competence($_POST["id_competence"]);
                        $souscription->setSouscription_ville($_POST['souscription_ville']);
                        $souscription->setSouscription_quartier($_POST['souscription_quartier']);
                        
                        if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
                        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
                        }
            
                        $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                        $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
                        $souscription->setPublier(3);
                        $souscription->setErreur(0);
                        $souscription->setId_canton($_POST['id_canton']);
                        $souscription_mapper->save($souscription);
                        
                        $html = "";
                        
                        $html .= "Nom : ".$_POST['souscription_nom']."<br />";
                        $html .= "Prenom : ".$_POST['souscription_prenom']."<br />";
                        $html .= "E-mail : ".$_POST['souscription_email']."<br />";
                        $html .= "Mobile : ".$_POST['souscription_mobile']."<br />";
                        $html .= "Ville : ".$_POST['souscription_ville']."<br />";
                        $html .= "Quartier : ".$_POST['souscription_quartier']."<br />";
                        $html .= "Programme : ".$_POST['souscription_programme']."<br />";

                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
                        $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
                        $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
                        $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";

                        $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                        
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        
                        $htmlpdf = "";
                        $htmlpdf .='
                        <page backbottom="15mm">
                        <page_footer>
                        <table>
                        <tr>
                           <td align="center">
                           <hr>
                           Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
                        </tr>
                        </table>
                        </page_footer>

                        <table width="768" border="0">
                        <tbody>
                        <tr>
                        <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
                        </tr>';
                        
                        $souscrip = new Application_Model_EuSouscription();
                        $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                        $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");
        
                        //if($souscription->souscription_programme == "KACM") {
                            //if($compteur_souscrip == 0) {$compteur_souscrip = 1029;}  
                                $unite = 0; 
                                $htmlpdf .= '
                                <tr>
                                    <td colspan="4" align="center"><strong><em><u>N° Reçu Personne Physique : PP'.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                                </tr>';
                        //}
        
                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
                        $souscriptionM->update($souscription);
                        
                        /*if($souscription->souscription_autonome == 1) {
                            $souscription_nombre = $souscription->souscription_nombre;
                            if($souscription->souscription_personne == "PP") {
                                $autonome = 0;
                            }
                        }*/
                        
                        $souscription_nombre = $souscription->souscription_nombre;
                        if($souscription->souscription_personne == "PP") {
                           $autonome = 0;
                        }
                        
                        if($souscription->souscription_nombre > 0) {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left"><em><u>Nombre de Comptes Marchands ré-activés: '.$souscription->souscription_nombre.'</u></em></td>
                            </tr>';
                        } else {
                            $htmlpdf .= '
                            <tr>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                            </tr>';
                        }
        
                        $htmlpdf .= '
                            <tr>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                            </tr>';
                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><strong>Libellé</strong></em></td>
                            <td align="center"><em><strong>Nombre de compte ré-activé</strong></em></td>
                            <td align="center"><strong><em>Montant ré-activation</em></strong></td>
                        </tr>';
  
                        $htmlpdf .= '
                        <tr style="background-color:#999;">
                            <td colspan="2" align="left"><em><strong>Ré-activation de Comptes Marchands</strong></em></td>
                            <td align="center"><em>'.$souscription_nombre.'</em></td>
                            <td align="center"><em>'.$autonome.' FCFA</em></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($autonome), 50).' CFA</em></td>
                            <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
                            Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                        </tr>'; 
  
                        if($souscription->souscription_programme == "KACM") {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>';
                        }
  
  
                        $htmlpdf .= '
                        <tr>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                        </tr>
                        <tr>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                                <td align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="center">';
                            if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")){
                            list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$souscription->souscription_vignette);
                            $pourcent = 700 * 100 / $width;
                            $width2 = 700;
                            $height2 = $pourcent * $height / 100;
                            $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />
                            ';
                            }
                        $htmlpdf .= '  </td>
                        </tr>
  
                        </tbody>
                        </table>
                        <br />
                        <br />
                        &nbsp;
                        </page>';
                        $htmlpdf .= '';
                        
                        ////////////////////////////////////////////////////////////////////////////////
                        $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                        $somecontent = $htmlpdf;

                        // Assurons nous que le fichier est accessible en écriture
                        if (is_writable($filename)) {
                            // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                            // Le pointeur de fichier est placé à la fin du fichier
                            // c'est là que $somecontent sera placé
                        if (!$handle = fopen($filename, 'w+')) {
                            echo "Impossible d'ouvrir le fichier ($filename)";
                            exit;
                        }

                        // Ecrivons quelque chose dans notre fichier.
                        if (fwrite($handle, $somecontent) === FALSE) {
                            echo "Impossible d'écrire dans le fichier ($filename)";
                            exit;
                        }
                            //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                            fclose($handle);
                        } else {
                            echo "Le fichier $filename n'est pas accessible en écriture.";
                        }

                        ////////////////////////////////////////////////////////////////////////////    
                        $file = $filename;
                        if (!is_dir("../../webfiles/pdf_souscription/")) {
                            mkdir("../../webfiles/pdf_souscription/", 0777);
                        }
                        /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

                        $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
                        $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                        $newchemin = "../../webfiles/pdf_souscription/";

                        copy($file, $newfile);

                        ob_start();
                        include(dirname(__FILE__).'/../'.$newfile);
                        $content = ob_get_clean();

                        // convert to PDF
                        require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                        try {
                            $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                            $html2pdf->pdf->SetDisplayMode('fullpage');
                            $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                            //$html2pdf->writeHTML($content);
                            $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                        }
                        catch(HTML2PDF_exception $e) {
                            echo $e;
                            exit;
                        }
                        $file = $newchemin.$newnom.'.pdf';
                        $filena = $newnom.'.pdf';
                        unlink($newfile);
                        
                        ///////////////////////////////////////////////////////
                        
                        $esmc_email  = Util_Utils::getParamEsmc(3); 
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                        Zend_Mail::setDefaultTransport($tr);        
                        $mail = new Zend_Mail();
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($esmc_email, "ESMC - SIF");
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                        $mail->send();
                        
                        if($_POST['souscription_email'] != "") {
                            $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                            $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                            Zend_Mail::setDefaultTransport($tr);        
                            $mail = new Zend_Mail();

                            $mail->setBodyHtml($html);
                            $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                            $mail->addTo($_POST['souscription_email'], $_POST['souscription_nom']." ".$_POST['souscription_prenom']);
                            $mail->setSubject('Ré-activation par souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                            $mail->send($tr);

                        }
                        
                        // operation de transfert des codes kacm
                $date = new Zend_Date();
                $compte_map = new Application_Model_EuCompteMapper();
                $compte      = new Application_Model_EuCompte();
                $sms_money   = new Application_Model_EuSmsmoney();
                $money_map   = new Application_Model_EuSmsmoneyMapper();
            
                $det_sms   = new Application_Model_EuDetailSmsmoney();
                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
            
                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                $det_vtesms  = new Application_Model_EuDetailVentesms();
            
                $mobile = $souscription->souscription_mobile;
                //$nbre_compte = $souscription->souscription_nombre;
                $fcaps = Util_Utils::getParametre('CAPS','valeur');
                                        
                $mont_fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $mont_kps = Util_Utils::getParametre('FKPS','valeur');
            
                //$montant = $nbre_compte * $fcaps;
                $membre_pbf = '0000000000000000001M';
                $code_compte_pbf = "NN-TR-".$membre_pbf;
                $ret = $compte_map->find($code_compte_pbf,$compte);
                if($souscription->souscription_programme == 'KACM') {
                     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                         // Mise à jour du compte de transfert
                         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);    
                      } else {
                         $db->rollback();               
                         $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                         $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                         $this->view->nom_membre = $_POST['souscription_nom'];
                         $this->view->prenom_membre = $_POST['souscription_prenom'];
                         $this->view->ville_membre = $_POST['souscription_ville']; 
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
                         $this->_redirect('/index/reactivationsouscriptionmcnppp/id/'.$_POST['ancien_code_membre']);
                         return;               
                      }
                      
                      $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
                      // Traitement des produits FS
                      // insertion dans la table eu_smsmoney
                      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                      // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
                      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                      // Traitement des produits FCPS
                      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
                      if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {                        
                            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);                                   
                                                        
                            $i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                  $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
                                  $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                  if ($reste >= $lignedetfs->getSolde_sms()) {
                                         //Mise à jour  des lignes d'enrégistrement
                                         //insertion dans la table eu_detailventesms
                                         $id_detail_vtsms = $det_vtesms->findConuter() + 1; 
                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                     ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                     ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);                                           
                                    } else  {
                                          //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;    
                                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                     ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                          $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
                                          $reste = 0;
                                     }
                                     $i++;
                                  }
                                                        
                                  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                                            ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
                                                        
                                  $j = 0;
                                  $reste = $mont_fl;
                                  $nbre_lignesdetfl = count($lignesdetfl);
                                  while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                        $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                           //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
                                           //insertion dans la table eu_detailventesms
                                           $id_detail_vtsms = $det_vtesms->findConuter() + 1;   
                                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                      ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);                                           
                                          } else  {
                                             //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                              $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
                                              $reste = 0;
                                           }
                                                        $j++;
                                       }
                                                    
                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
                                                    
                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);                                         
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }
                                                    
                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;
                
                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));           
                                                    $codeactivation->setCode_membre(null);   
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setSouscription_id($souscription->souscription_id);
                                                    $codeactivation->setOrigine_code('MCNP');
                                                    $m_codeactivation->save($codeactivation);
                
                                                    $compteur = Util_Utils::findConuter() + 1;
                                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand ESMC : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
                                                
                                                    }  else {
                                                        $db->rollback();
                                                        $this->view->error = 'Erreur de traitement : le solde est null';
                                                        $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                                                        $this->view->nom_membre = $_POST['souscription_nom'];
                                                        $this->view->prenom_membre = $_POST['souscription_prenom'];
                                                        $this->view->ville_membre = $_POST['souscription_ville']; 
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
                                                        $this->_redirect('/index/reactivationsouscriptionmcnppp/id/'.$_POST['ancien_code_membre']); 
                                                    }   
                }
                        
                        $db->commit();
                        $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
                        $this->_redirect('/index/ancienppmcnp');
                        
                      } 
                        
                        
                    } catch (Exception $exc) {
                        $db->rollback();
                        $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
                        return;
                    }   
                    
                } else {  
                    $this->view->error = "Champs * obligatoire ...";  
                }
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_nais_membre as datenaismembre"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');       
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->nom_membre = $trouvmembre->nom_membre;
            $this->view->prenom_membre = $trouvmembre->prenom_membre;
            //$this->view->sexe = $trouvmembre->sexe_membre;
            //$this->view->profession = $trouvmembre->profession_membre;
            //$this->view->tel = $trouvmembre->tel_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre; 
            //$this->view->pere = $trouvmembre->pere_membre;
            //$this->view->mere = $trouvmembre->mere_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            //$this->view->bp = $trouvmembre->bp_membre;
            //$this->view->nbre_enf = $trouvmembre->nbr_enf_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->portable = $trouvmembre->portable_membre;
            //$this->view->formation = $trouvmembre->formation;
            //$this->view->lieu_nais = $trouvmembre->lieu_nais_membre;
            //$this->view->datnais = $trouvmembre->datenaismembre;
            //$this->view->sitfam = $trouvmembre->sitfam_membre;
            //$this->view->nation = $trouvmembre->id_pays;
            //$this->view->religion = $trouvmembre->id_religion_membre;
        }
    
    }

    
    
    



    public function reactivationsouscriptiongiepmAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        $request = $this->getRequest ();
		if ($request->isPost ()) {
            if (isset($_POST['numidentm']) && $_POST['numidentm']!="" 
                && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="" 
                && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!="" 
                && isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!="" 
                && isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="" 
                && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
                && isset($_POST['souscription_raison']) && $_POST['souscription_raison']!="" 
                && isset($_POST['type_acteur']) && $_POST['type_acteur']!="" 
                && isset($_POST['statut_juridique']) && $_POST['statut_juridique']!="" 
                && isset($_POST['souscription_type']) && $_POST['souscription_type']!="" 
                && isset($_POST['souscription_numero']) && $_POST['souscription_numero']!="" 
                && isset($_POST['souscription_date_numero']) && $_POST['souscription_date_numero']!="" 
                && isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!="" 
                && isset($_POST['souscription_montant']) && $_POST['souscription_montant']!="") {
                
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
                        $souscriptioneu = new Application_Model_DbTable_EuSouscription();
                        $selection = $souscriptioneu->select();
                        $selection->from($souscriptioneu)
                                  ->where('souscription_ancien_membre like ?',$_POST['numidentm']);
                        $sous = $souscriptioneu->fetchAll($selection);
                        if(count($sous) == 0) {
                    
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));
                        
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                            $souscription_ok = 1;
                            $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                            $souscription_ok = 0;
                        }
                        
                        $date_id = Zend_Date::now();
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
                        
                        include("Transfert.php");
                        if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
                            $chemin = "souscriptions";
                            $file = $_FILES['souscription_vignette']['name'];
                            $file1='souscription_vignette';
                            $souscription_vignette = $chemin."/".transfert($chemin,$file1);
                        } else {$souscription_vignette = "";}
                        
                        $compteur_souscription = $souscription_mapper->findConuter() + 1;
                        $souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne($_POST['souscription_personne']);
                        
                        $souscription->setSouscription_raison($_POST['souscription_raison']);
                        $souscription->setCode_type_acteur($_POST["type_acteur"]);
                        $souscription->setCode_statut($_POST["statut_juridique"]);
                        
                        $souscription->setSouscription_email($_POST['souscription_email']);
                        $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                        $souscription->setSouscription_membreasso(1);
                        $souscription->setSouscription_type($_POST['souscription_type']);
                        $souscription->setSouscription_numero($_POST['souscription_numero']);
                        $souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
                        if($_POST['souscription_type'] == "Banque") {
                            $souscription->setSouscription_banque($_POST['souscription_banque']);
                        }
                        
                        $souscription->setSouscription_montant($_POST['souscription_montant']);
                        $souscription->setSouscription_nombre($_POST['souscription_nombre']);
                        $souscription->setSouscription_programme($_POST['souscription_programme']);
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette($souscription_vignette);
                        $souscription->setCode_activite($_POST["code_activite"]);
                        $souscription->setId_metier($_POST["id_metier"]);
                        $souscription->setId_competence($_POST["id_competence"]);
                        $souscription->setSouscription_ville($_POST['souscription_ville']);
                        $souscription->setSouscription_quartier($_POST['souscription_quartier']);
                        
                        if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
                        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
                        }
            
                        $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                        $souscription->setSouscription_ancien_membre($_POST['numidentm']);
                        $souscription->setPublier(0);
                        $souscription->setErreur(0);
                        $souscription->setId_canton($_POST['id_canton']);
                        $souscription_mapper->save($souscription);
                        
                        
                        ////////////////////////////////////////////////////////////////////////////////////////
                        
                        $recubancaire = new Application_Model_EuRecubancaire();
                        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
                        
                        $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
                        $recubancaire->setRecubancaire_id($compteur_recubancaire);
                        $recubancaire->setRecubancaire_type($request->getParam("souscription_type"));
                        $recubancaire->setRecubancaire_numero($request->getParam("souscription_numero"));
                        $recubancaire->setRecubancaire_date_numero($request->getParam("souscription_date_numero"));
                        if($_POST['souscription_type'] == "Banque") {
                          $recubancaire->setRecubancaire_banque($request->getParam("souscription_banque"));
                        }
                        $recubancaire->setRecubancaire_montant($request->getParam("souscription_montant"));
                        $recubancaire->setRecubancaire_vignette($souscription_vignette);
                        $recubancaire->setRecubancaire_souscription($compteur_souscription);
                        $recubancaire->setPublier(1);
                        $recubancaire_mapper->save($recubancaire);
                        
                        
                        
                        
                        $html = "";
                        $html .= "Raison sociale : ".$_POST['souscription_raison']."<br />";
                        if($_POST["type_acteur"] == 'EI')   { $html .= "Type Association : Entreprise Industrie<br />";}
                        if($_POST["type_acteur"] == 'OE')   {$html .= "Type Association : Opérateur Economique<br />";}
                        if($_POST["type_acteur"] == 'OSE')  {$html .= "Type Association : Opérateur Socio-Economique<br />";}
                        if($_POST["type_acteur"] == 'PEI')  {$html .= "Type Association : Partenaire Entreprise Industrie<br />";}
                        if($_POST["type_acteur"] == 'POE')  {$html .= "Type Association : Partenaire Opérateur Economique<br />";}
                        if($_POST["type_acteur"] == 'POSE') {$html .= "Type Association : Partenaire Opérateur Socio-Economique<br />";}

                        $statutjuridique = new Application_Model_EuStatutJuridique();
                        $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                        $statutjuridiqueM->find($_POST["statut_juridique"], $statutjuridique);
                        $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br />";
            
                        $html .= "E-mail : ".$_POST['souscription_email']."<br />";
                        $html .= "Mobile : ".$_POST['souscription_mobile']."<br />";
                        $html .= "Ville : ".$_POST['souscription_ville']."<br />";
                        $html .= "Quartier : ".$_POST['souscription_quartier']."<br />";
                        $html .= "Programme : ".$_POST['souscription_programme']."<br />";
                        
                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
                        $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
                        $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
                        $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";


                        $html .= "Type : ".$_POST['souscription_type']."<br />";

                        if($_POST['souscription_type'] == "Banque") {
                            $banque = new Application_Model_EuBanque();
                            $banqueM = new Application_Model_EuBanqueMapper();
                            $banqueM->find($_POST['souscription_banque'], $banque);
                            $html .= "Banque : ".$banque->libelle_banque."<br/>";
                        }
                        $html .= "Numero Reçu Banque ou Numéro Transaction Flooz: ".$_POST['souscription_numero']."<br />";
                        $html .= "Date Reçu Banque ou Transaction Flooz: ".$_POST['souscription_date_numero']."<br />";
                        $html .= "Montant : ".$_POST['souscription_montant']."<br />";
                        $html .= "Nombre : ".$_POST['souscription_nombre']."<br />";

                        $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                        $html .= "Vignette : <a href='https://esmcgie.com/".$souscription_vignette."'>".$souscription_vignette."</a>";
                        
                        $esmc_email  = Util_Utils::getParamEsmc(3);
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                        Zend_Mail::setDefaultTransport($tr);        
                        $mail = new Zend_Mail();
                        //$mail->setBodyText('Mon texte de test');
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($esmc_email, "ESMC - SIF");
                        $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                        $mail->send();
                        
                        if($_POST['souscription_email'] != "") {
                            $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                            $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                            Zend_Mail::setDefaultTransport($tr);        
                            $mail = new Zend_Mail();
                            //$mail->setBodyText('Mon texte de test');
                            $mail->setBodyHtml($html);
                            $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                            $mail->addTo($_POST['souscription_email'], $_POST['souscription_raison']);
                            $mail->setSubject('Ré-activation par souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                            $mail->send($tr);
                        }

                        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($request->getParam("souscription_banque"),$request->getParam("souscription_numero"),$request->getParam("souscription_date_numero"));
                        if(count($relevebancairedetail) > 0) {
                              if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']) {
                                   validation_automatique($compteur_souscription);
                                   // operation de transfert
                                   $souscription = new Application_Model_EuSouscription();
                                   $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                   $souscriptionM->find($compteur_souscription, $souscription);
                                   $date = new Zend_Date();
                                   $compte_map = new Application_Model_EuCompteMapper();
                                   $compte      = new Application_Model_EuCompte();
                                   $sms_money   = new Application_Model_EuSmsmoney();
                                   $money_map   = new Application_Model_EuSmsmoneyMapper();
            
                                   $det_sms   = new Application_Model_EuDetailSmsmoney();
                                   $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
            
                                   $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                   $det_vtesms  = new Application_Model_EuDetailVentesms();
            
                                   $mobile = $souscription->souscription_mobile;
                                   //$nbre_compte = $souscription->souscription_nombre;
                                   $fcaps = Util_Utils::getParametre('CAPS','valeur');
                                        
                                   $mont_fs = Util_Utils::getParametre('FS','valeur');
                                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                                   $mont_kps = Util_Utils::getParametre('FKPS','valeur');
            
                                   //$montant = $nbre_compte * $fcaps;
                                   $membre_pbf = '0000000000000000001M';
                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
                                   $ret = $compte_map->find($code_compte_pbf,$compte);
                                   
                                   if($souscription->souscription_programme == 'KACM') {
                     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                         // Mise à jour du compte de transfert
                         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);    
                      } else {
                         $db->rollback();               
                         $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                         $this->view->numidentm = $_POST['numidentm'];
                         $this->view->raison = $_POST['souscription_raison'];
                         $this->view->ville_membre = $_POST['souscription_ville']; 
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
                         $this->_redirect('/index/reactivationsouscriptiongiepm/id/'.$_POST['numidentm']);
                         return;               
                      }
                      
                      $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
                      // Traitement des produits FS
                      // insertion dans la table eu_smsmoney
                      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                      // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
                      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                      // Traitement des produits FCPS
                      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
                      if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {                        
                            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);                                   
                                                        
                            $i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                  $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
                                  $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                  if ($reste >= $lignedetfs->getSolde_sms()) {
                                         //Mise à jour  des lignes d'enrégistrement
                                         //insertion dans la table eu_detailventesms
                                         $id_detail_vtsms = $det_vtesms->findConuter() + 1; 
                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                     ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                     ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);                                           
                                    } else  {
                                          //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;    
                                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                     ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                          $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
                                          $reste = 0;
                                     }
                                     $i++;
                                  }
                                                        
                                  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                                            ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
                                                        
                                  $j = 0;
                                  $reste = $mont_fl;
                                  $nbre_lignesdetfl = count($lignesdetfl);
                                  while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                        $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                           //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
                                           //insertion dans la table eu_detailventesms
                                           $id_detail_vtsms = $det_vtesms->findConuter() + 1;   
                                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                      ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);                                           
                                          } else  {
                                             //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                              $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
                                              $reste = 0;
                                           }
                                                        $j++;
                                       }
                                                    
                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
                                                    
                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);                                         
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }
                                                    
                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;
                
                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));           
                                                    $codeactivation->setCode_membre(null);   
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setSouscription_id($souscription->souscription_id);
                                                    $codeactivation->setOrigine_code('GIE');
                                                    $m_codeactivation->save($codeactivation);
                
                                                    $compteur = Util_Utils::findConuter() + 1;
                                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand ESMC : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
                                                
                                                    }  else {
                                                        $db->rollback();
                                                        $this->view->error = 'Erreur de traitement : le solde est null';
                                                        $this->view->numidentm = $_POST['numidentm'];
                                                        $this->view->raison = $_POST['souscription_raison'];
                                                        $this->view->ville_membre = $_POST['souscription_ville']; 
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
                                                        $this->_redirect('/index/reactivationsouscriptiongiepm/id/'.$_POST['numidentm']);   
                                                    }   
                                             }
                              
                              } else {
                                   $db->commit();
                                   $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre dépôt à la banque.";
                                   $this->_redirect('/index/ancienpm');/**/
                              }   

                        }  else {
                              $db->commit();
                              $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée. Votre demande n’est pas encore vérifiée, revenez plus tard.";
                              $this->_redirect('/index/ancienpm');/**/
                        }


                        
                        $db->commit();
                        $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
                        $this->_redirect('/index/ancienpm');
                      }
                    } catch (Exception $exc) {
                        $db->rollback();
                        $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
                        return;
                    }
        
            }   else {  
                $this->view->error = "Champs * obligatoire ...";  
            }
        
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Morale();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentm like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                   ->order('nomm ASC');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->numidentm = $trouvmembre->numidentm;
            $this->view->raison = $trouvmembre->nomm;
            //$this->view->code_rep = $trouvmembre->representant;
            $this->view->quartier_membre = $trouvmembre->qart;
            $this->view->ville_membre = $trouvmembre->ville;
            //$this->view->bp = $trouvmembre->bp;
            //$this->view->tel = $trouvmembre->tel;
            $this->view->portable = $trouvmembre->portable;
            $this->view->email = $trouvmembre->email;
            //$this->view->site_web = $trouvmembre->site;   
        }
        
    }


    public function reactivationsouscriptionmcnppmAction() {
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        if (isset($_POST['ok']) && $_POST['ok']=="ok")  {
            if (isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!="" 
                && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!="" 
                && isset($_POST['souscription_autonome']) && $_POST['souscription_autonome']!="" 
                && isset($_POST['souscription_mobile']) && $_POST['souscription_mobile']!="" 
                && isset($_POST['souscription_programme']) && $_POST['souscription_programme']!="" 
                && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
                && isset($_POST['souscription_raison']) && $_POST['souscription_raison']!="" 
                && isset($_POST['type_acteur']) && $_POST['type_acteur']!="" 
                && isset($_POST['statut_juridique']) && $_POST['statut_juridique']!="" 
                )  {  
                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
                    $souscriptioneu = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscriptioneu->select();
                    $selection->from($souscriptioneu)
                              ->where('souscription_ancien_membre like ?',$_POST['ancien_code_membre']);
                    $sous = $souscriptioneu->fetchAll($selection);
                    
                    if(count($sous) == 0) {
                
                    $eusouscription = new Application_Model_DbTable_EuSouscription();
                    $select = $eusouscription->select();
                    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "", $_POST['souscription_raison'])));  
                    $select->order(array("souscription_id ASC"));
                    $select->limit(1);
                    $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                      $souscription_ok = 1;
                      $souscription_first = $rowseusouscription->souscription_id;
                    } else {
                      $souscription_ok = 0;
                    }
                    
                    $date_id = Zend_Date::now();
                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();
                    include("Transfert.php");
                    
                    if(isset($_FILES['souscription_vignette']['name']) && $_FILES['souscription_vignette']['name']!="") {
                      $chemin   = "souscriptions";
                      $file = $_FILES['souscription_vignette']['name'];
                      $file1 = 'souscription_vignette';
                      $souscription_vignette = $chemin."/".transfert($chemin,$file1);
                    } else {
                      $souscription_vignette = "";
                    }
                    $compteur_souscription = $souscription_mapper->findConuter() + 1;
                    $souscription->setSouscription_id($compteur_souscription);
                    $souscription->setSouscription_personne($_POST['souscription_personne']);
                    
                    $souscription->setSouscription_raison($_POST['souscription_raison']);
                    $souscription->setCode_type_acteur($_POST["type_acteur"]);
                    $souscription->setCode_statut($_POST["statut_juridique"]);
                    
                    $souscription->setSouscription_email($_POST['souscription_email']);
                    $souscription->setSouscription_mobile($_POST['souscription_mobile']);
                    $souscription->setSouscription_membreasso(1);
                    
                    $tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    $result = $tafl->find($code_fl);
                    
                    if(count($result) == 0)  {
                        $souscription->setSouscription_type($_POST['souscription_type']);
                        $souscription->setSouscription_numero($_POST['souscription_numero']);
                        $souscription->setSouscription_date_numero($_POST['souscription_date_numero']);
                        if($_POST['souscription_type'] == "Banque") {
                            $souscription->setSouscription_banque($_POST['souscription_banque']);
                        }
                        $souscription->setSouscription_montant($_POST['souscription_montant']);
                        $souscription->setSouscription_nombre($_POST['souscription_nombre']);
                        $souscription->setPublier(0);
                    } else {
                        $souscription->setPublier(3);
                    }
                    $souscription->setSouscription_programme($_POST['souscription_programme']);
                    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $souscription->setSouscription_vignette($souscription_vignette);
                    $souscription->setCode_activite($_POST["code_activite"]);
                    $souscription->setId_metier($_POST["id_metier"]);
                    $souscription->setId_competence($_POST["id_competence"]);
                    $souscription->setSouscription_ville($_POST['souscription_ville']);
                    $souscription->setSouscription_quartier($_POST['souscription_quartier']);
                    
                    if($souscription_ok == 1) {
                      $souscription->setSouscription_souscription($souscription_first);
                    } else {
                      $souscription->setSouscription_souscription($compteur_souscription);
                    }
            
                    $souscription->setSouscription_autonome($_POST['souscription_autonome']);
                    $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
                    $souscription->setId_canton($_POST['id_canton']);
                    $souscription->setErreur(0);
                    $souscription_mapper->save($souscription);
                    
                    $html = "";
                    $html .= "Raison sociale : ".$_POST['souscription_raison']."<br/>";
                    if($_POST["type_acteur"] == 'EI')   {$html .= "Type Association : Entreprise Industrie<br/>";}
                    if($_POST["type_acteur"] == 'OE')   {$html .= "Type Association : Opérateur Economique<br/>";}
                    if($_POST["type_acteur"] == 'OSE')  {$html .= "Type Association : Opérateur Socio-Economique<br/>";}
                    if($_POST["type_acteur"] == 'PEI')  {$html .= "Type Association : Partenaire Entreprise Industrie<br/>";}
                    if($_POST["type_acteur"] == 'POE')  {$html .= "Type Association : Partenaire Opérateur Economique<br/>";}
                    if($_POST["type_acteur"] == 'POSE') {$html .= "Type Association : Partenaire Opérateur Socio-Economique<br/>";}
                    
                    $statutjuridique = new Application_Model_EuStatutJuridique();
                    $statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
                    $statutjuridiqueM->find($_POST["statut_juridique"], $statutjuridique);
                    $html .= "Statut juridique : ".$statutjuridique->libelle_statut."<br />";
            
                    $html .= "E-mail : ".$_POST['souscription_email']."<br/>";
                    $html .= "Mobile : ".$_POST['souscription_mobile']."<br/>";
                    $html .= "Ville : ".$_POST['souscription_ville']."<br/>";
                    $html .= "Quartier : ".$_POST['souscription_quartier']."<br/>";
                    $html .= "Programme : ".$_POST['souscription_programme']."<br/>";
                    
                        $activiteM = new Application_Model_DbTable_EuActivite();
                        $activite = $activiteM->find($_POST['code_activite']);
                        $row = $activite->current();
                        $html .= "Biens, Produits et Services : ".$row->nom_activite."<br />";

                        $metierM = new Application_Model_DbTable_EuMetier();
                        $metier = $metierM->find($_POST['id_metier']);
                        $row = $metier->current();
                        $html .= "Métier : ".$row->libelle_metier."<br />";

                        $competenceM = new Application_Model_DbTable_EuCompetence();
                        $competence = $competenceM->find($_POST['id_competence']);
                        $row = $competence->current();
                        $html .= "Compétence : ".$row->libelle_competence."<br />";

                    
                    $tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    $result = $tafl->find($code_fl);
                    
                    if(count($result) == 0) {
                        $html .= "Type : ".$_POST['souscription_type']."<br/>";
                        if($_POST['souscription_type'] == "Banque") {
                            $banque = new Application_Model_EuBanque();
                            $banqueM = new Application_Model_EuBanqueMapper();
                            $banqueM->find($_POST['souscription_banque'], $banque);
                            $html .= "Banque : ".$banque->libelle_banque."<br/>";
                        }

                        $html .= "Numero Reçu Banque ou Numéro Transaction Flooz: ".$_POST['souscription_numero']."<br/>";
                        $html .= "Date Reçu Banque ou Transaction Flooz: ".$_POST['souscription_date_numero']."<br/>";
                        $html .= "Montant : ".$_POST['souscription_montant']."<br/>";
                        $html .= "Nombre : ".$_POST['souscription_nombre']."<br/>";
                        
                        ///////////////////////////////////////////////////////////////////////////////////////
                            
                        $recubancaire = new Application_Model_EuRecubancaire();
                        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        
                        $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
                        $recubancaire->setRecubancaire_id($compteur_recubancaire);
                        $recubancaire->setRecubancaire_type($request->getParam("souscription_type"));
                        $recubancaire->setRecubancaire_numero($request->getParam("souscription_numero"));
                        $recubancaire->setRecubancaire_date_numero($request->getParam("souscription_date_numero"));
                        if($_POST['souscription_type'] == "Banque") {
                                $recubancaire->setRecubancaire_banque($request->getParam("souscription_banque"));
                        }
                        $recubancaire->setRecubancaire_montant($request->getParam("souscription_montant"));
                        $recubancaire->setRecubancaire_vignette($souscription_vignette);
                        $recubancaire->setRecubancaire_souscription($compteur_souscription);
                        $recubancaire->setPublier(1);
                        $recubancaire_mapper->save($recubancaire);
                        
                        $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($request->getParam("souscription_banque"),$request->getParam("souscription_numero"),$request->getParam("souscription_date_numero"));
                        if(count($relevebancairedetail) > 0) { 
                              if($relevebancairedetail->relevebancairedetail_montant >= $_POST['souscription_montant']) {
                                  include("automatisation.php");
                                  validation_automatique($compteur_souscription);
                                  // operation de transfert
                                   $souscription = new Application_Model_EuSouscription();
                                   $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                   $souscriptionM->find($compteur_souscription, $souscription);
                                   $date = new Zend_Date();
                                   $compte_map = new Application_Model_EuCompteMapper();
                                   $compte      = new Application_Model_EuCompte();
                                   $sms_money   = new Application_Model_EuSmsmoney();
                                   $money_map   = new Application_Model_EuSmsmoneyMapper();
            
                                   $det_sms   = new Application_Model_EuDetailSmsmoney();
                                   $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
            
                                   $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                   $det_vtesms  = new Application_Model_EuDetailVentesms();
            
                                   $mobile = $souscription->souscription_mobile;
                                   //$nbre_compte = $souscription->souscription_nombre;
                                   $fcaps = Util_Utils::getParametre('CAPS','valeur');
                                        
                                   $mont_fs = Util_Utils::getParametre('FS','valeur');
                                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                                   $mont_kps = Util_Utils::getParametre('FKPS','valeur');
            
                                   //$montant = $nbre_compte * $fcaps;
                                   $membre_pbf = '0000000000000000001M';
                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
                                   $ret = $compte_map->find($code_compte_pbf,$compte);
                                   
                                   if($souscription->souscription_programme == 'KACM') {
                     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                         // Mise à jour du compte de transfert
                         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);    
                      } else {
                         $db->rollback();               
                         $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                         $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                         $this->view->raison = $_POST['souscription_raison'];
                         $this->view->ville_membre = $_POST['souscription_ville']; 
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
                         $this->view->statut_juridique = $_POST['statut_juridique'];
                         $this->view->type_acteur = $_POST['type_acteur'];
                         $this->_redirect('/index/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']);
                         return;               
                      }
                      
                      $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
                      // Traitement des produits FS
                      // insertion dans la table eu_smsmoney
                      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                      // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
                      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                      // Traitement des produits FCPS
                      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
                      if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {                        
                            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);                                   
                                                        
                            $i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                  $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
                                  $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                  if ($reste >= $lignedetfs->getSolde_sms()) {
                                         //Mise à jour  des lignes d'enrégistrement
                                         //insertion dans la table eu_detailventesms
                                         $id_detail_vtsms = $det_vtesms->findConuter() + 1; 
                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                     ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                     ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);                                           
                                    } else  {
                                          //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;    
                                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                     ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                          $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
                                          $reste = 0;
                                     }
                                     $i++;
                                  }
                                                        
                                  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                                            ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
                                                        
                                  $j = 0;
                                  $reste = $mont_fl;
                                  $nbre_lignesdetfl = count($lignesdetfl);
                                  while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                        $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                           //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
                                           //insertion dans la table eu_detailventesms
                                           $id_detail_vtsms = $det_vtesms->findConuter() + 1;   
                                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                      ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);                                           
                                          } else  {
                                             //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                              $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
                                              $reste = 0;
                                           }
                                                        $j++;
                                       }
                                                    
                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
                                                    
                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);                                         
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }
                                                    
                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;
                
                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));           
                                                    $codeactivation->setCode_membre(null);   
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setSouscription_id($souscription->souscription_id);
                                                    $codeactivation->setOrigine_code('MCNP');
                                                    $m_codeactivation->save($codeactivation);
                
                                                    $compteur = Util_Utils::findConuter() + 1;
                                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand ESMC : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
                                                
                                                    }  else {
                                                        $db->rollback();
                                                        $this->view->error = 'Erreur de traitement : le solde est null';
                                                        $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                                                        $this->view->raison = $_POST['souscription_raison'];
                                                        $this->view->ville_membre = $_POST['souscription_ville']; 
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
                                                        $this->view->statut_juridique = $_POST['statut_juridique'];
                                                        $this->view->type_acteur = $_POST['type_acteur'];
                                                        $this->_redirect('/index/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']); 
                                                    }   
                                             }
                              } else {
                                   $db->commit();
                                   $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée, mais le montant est insuffisant. Veuillez compléter le montant par un autre dépôt à la banque.";
                                   $this->_redirect('/index/ancienpmmcnp');
                              
                              }
                        
                        } else {
                              $db->commit();
                              $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée. Votre demande n’est pas encore vérifiée, revenez plus tard.";
                              $this->_redirect('/index/ancienpmmcnp');
                        }   
                        
                    }
                    else {
                        $htmlpdf = "";
                        $htmlpdf .='
                        <page backbottom="15mm">
                        <page_footer>
                        <table>
                        <tr>
                           <td align="center">
                           <hr>
                           Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
                        </tr>
                        </table>
                        </page_footer>

                        <table width="768" border="0">
                        <tbody>
                        <tr>
                           <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'/images/entete.gif"  width="738" height="105"  /></td>
                        </tr>';
                        
                        $souscrip = new Application_Model_EuSouscription();
                        $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                        $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, $souscription->code_type_acteur);
        
                        if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OSE"){$compteur_souscrip = 4;}        
                        if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OE"){$compteur_souscrip = 5;}     
                        $unite = 0; 
                        $htmlpdf .= '
                        <tr>
                            <td colspan="4" align="center"><strong><em><u>N° Reçu '.$souscription->code_type_acteur.' : '.$souscription->code_type_acteur.''.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
                        </tr>';
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        $souscription->setSouscription_ordre($compteur_souscrip + 1);
                        $souscriptionM->update($souscription);
                        $autonome = 0;
                        
                        $htmlpdf .= '
                        <tr>
                            <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_raison.'</em></strong></p></td>
                        </tr>';
                        
                        if($souscription->souscription_nombre > 0) {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="4" align="left"><em><u>Nombre de Comptes Marchands ré-activés: '.$souscription->souscription_nombre.'</u></em></td>
                            </tr>';
                        } else {
                            $htmlpdf .= '
                            <tr>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            </tr>';
                        }
                        
                        $htmlpdf .= '
                        <tr>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                        </tr>';
                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><strong>Libellé</strong></em></td>
                            <td align="center"><em><strong>Nombre de compte ré-activé</strong></em></td>
                            <td align="center"><strong><em>Montant ré-activation</em></strong></td>
                        </tr>';
  
                        $htmlpdf .= '
                        <tr style="background-color:#999;">
                            <td colspan="2" align="left"><em><strong>Ré-activation de Comptes Marchands</strong></em></td>
                            <td align="center"><em>'.$souscription_nombre.'</em></td>
                            <td align="center"><em>'.$autonome.' FCFA</em></td>
                        </tr>';

                        $htmlpdf .= '
                        <tr>
                            <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.lettre(($autonome), 50).' CFA</em></td>
                            <td colspan="2" rowspan="3" align="left"><img src="'.Util_Utils::getParamEsmc(2).'/images/cachet.jpg" /><br />
                            Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
                        </tr>'; 
  
                        if($souscription->souscription_programme == "KACM") {
                            $htmlpdf .= '
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>
                            <tr>
                                <td colspan="2" align="left">&nbsp;</td>
                            </tr>';
                        }
                        
                        $htmlpdf .= '
                        <tr>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                            <td align="left">&nbsp;</td>
                        </tr>
                        <tr>
                            <td colspan="4" align="center">';
                            if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")){
                            list($width, $height, $type, $attr) = getimagesize(Util_Utils::getParamEsmc(2).$souscription->souscription_vignette);
                            $pourcent = 700 * 100 / $width;
                            $width2 = 700;
                            $height2 = $pourcent * $height / 100;
                            $htmlpdf .= '<img src="'.Util_Utils::getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />
                            ';
                            }
                        $htmlpdf .= '  </td>
                        </tr>
                        </tbody>
                        </table>
                        <br />
                        <br />
                        &nbsp;
                        </page>';
                        $htmlpdf .= '';
                        
                        ////////////////////////////////////////////////////////////////////////////////
                        $filename = ''.Util_Utils::getParamEsmc(1).'/souscriptions.html';
                        $somecontent = $htmlpdf;

                        // Assurons nous que le fichier est accessible en écriture
                        if (is_writable($filename)) {
                            // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                            // Le pointeur de fichier est placé à la fin du fichier
                             // c'est là que $somecontent sera placé
                        if (!$handle = fopen($filename, 'w+')) {
                            echo "Impossible d'ouvrir le fichier ($filename)";
                            exit;
                        }

                        // Ecrivons quelque chose dans notre fichier.
                        if (fwrite($handle, $somecontent) === FALSE) {
                            echo "Impossible d'écrire dans le fichier ($filename)";
                            exit;
                        }
                        //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";
                        fclose($handle);
                    
                        } else {
                           echo "Le fichier $filename n'est pas accessible en écriture.";
                        }

                        ////////////////////////////////////////////////////////////////////////////    
                        $file = $filename;
                        if (!is_dir("../../webfiles/pdf_souscription/")) {
                            mkdir("../../webfiles/pdf_souscription/", 0777);
                        }
                        /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

                        $newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id))."_.html";
                        $newnom = "SOUSCRIPTION_".str_replace("/", "_", mettreaccents($souscription->souscription_id)."_");
                        $newchemin = "../../webfiles/pdf_souscription/";
                        copy($file, $newfile);
                        ob_start();
                        include(dirname(__FILE__).'/../'.$newfile);
                        $content = ob_get_clean();

                        // convert to PDF
                        require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                        try {
                            $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                            $html2pdf->pdf->SetDisplayMode('fullpage');
                            $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                            //$html2pdf->writeHTML($content);
                            $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                        }
                        catch(HTML2PDF_exception $e) {
                            echo $e;
                            exit;
                        }

                        $file = $newchemin.$newnom.'.pdf';
                        $filena = $newnom.'.pdf';

                        unlink($newfile);
                        
                        // operation de transfert
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                   $souscriptionM->find($compteur_souscription, $souscription);
                                   $date = new Zend_Date();
                                   $compte_map = new Application_Model_EuCompteMapper();
                                   $compte      = new Application_Model_EuCompte();
                                   $sms_money   = new Application_Model_EuSmsmoney();
                                   $money_map   = new Application_Model_EuSmsmoneyMapper();
            
                                   $det_sms   = new Application_Model_EuDetailSmsmoney();
                                   $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
            
                                   $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                   $det_vtesms  = new Application_Model_EuDetailVentesms();
            
                                   $mobile = $souscription->souscription_mobile;
                                   //$nbre_compte = $souscription->souscription_nombre;
                                   $fcaps = Util_Utils::getParametre('CAPS','valeur');
                                        
                                   $mont_fs = Util_Utils::getParametre('FS','valeur');
                                   $mont_fl = Util_Utils::getParametre('FL','valeur');
                                   $mont_kps = Util_Utils::getParametre('FKPS','valeur');
            
                                   //$montant = $nbre_compte * $fcaps;
                                   $membre_pbf = '0000000000000000001M';
                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
                                   $ret = $compte_map->find($code_compte_pbf,$compte);
                                   
                                   if($souscription->souscription_programme == 'KACM') {
                     if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                         // Mise à jour du compte de transfert
                         $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                         $compte_map->update($compte);    
                      } else {
                         $db->rollback();               
                         $this->view->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                         $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                         $this->view->raison = $_POST['souscription_raison'];
                         $this->view->ville_membre = $_POST['souscription_ville']; 
                         $this->view->quartier_membre = $_POST['souscription_quartier'];
                         $this->view->email = $_POST['souscription_email'];
                         $this->view->portable = $_POST['souscription_mobile'];
                         $this->view->statut_juridique = $_POST['statut_juridique'];
                         $this->view->type_acteur = $_POST['type_acteur'];
                         $this->_redirect('/index/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']);
                         return;               
                      }
                      
                      $codefs   = '';
                      $codefl   = '';
                      $codefkps = '';
                      // Traitement des produits FS
                      // insertion dans la table eu_smsmoney
                      $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                      // Traitement des produits FL
                      // insertion dans la table eu_smsmoney
                      $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                      // Traitement des produits FCPS
                      $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
                      if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {                        
                            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);                                   
                                                        
                            $i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                  $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
                                  $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                  if ($reste >= $lignedetfs->getSolde_sms()) {
                                         //Mise à jour  des lignes d'enrégistrement
                                         //insertion dans la table eu_detailventesms
                                         $id_detail_vtsms = $det_vtesms->findConuter() + 1; 
                                         $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                    ->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $reste = $reste - $lignedetfs->getSolde_sms();
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                     ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                     ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);                                           
                                    } else  {
                                          //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;    
                                          $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                     ->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                          $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                          $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfs);
                                          $reste = 0;
                                     }
                                     $i++;
                                  }
                                                        
                                  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                  $nengfl = $money_map->findConuter() + 1;
                                  $sms_money->setNEng($nengfl)
                                            ->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
                                                        
                                  $j = 0;
                                  $reste = $mont_fl;
                                  $nbre_lignesdetfl = count($lignesdetfl);
                                  while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                        $lignedetfl = $lignesdetfl[$j];
                                        $id = $lignedetfl->getId_detail_smsmoney();
                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                           //Mise à jour  des lignes d'enrégistrement
                                           $reste = $reste - $lignedetfl->getSolde_sms();
                                           //insertion dans la table eu_detailventesms
                                           $id_detail_vtsms = $det_vtesms->findConuter() + 1;   
                                           $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                      ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FL')
                                                      ->setCreditcode($codefl)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfl->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FL');
                                            $det_vte_sms->insert($det_vtesms->toArray());
                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);                                           
                                          } else  {
                                             //Mise à jour  des lignes d'enrégistrement
                                            //insertion dans la table eu_detailventesms
                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                       ->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('FL')
                                                       ->setCreditcode($codefl)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($reste)
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('FL');
                                              $det_vte_sms->insert($det_vtesms->toArray());
                                              $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
                                              $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                              $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                              $det_sms_m->update($lignedetfl);
                                              $reste = 0;
                                           }
                                                        $j++;
                                       }
                                                    
                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);
                                                    
                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);                                         
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }
                                                    
                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;
                
                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));           
                                                    $codeactivation->setCode_membre(null);   
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setSouscription_id($souscription->souscription_id);
                                                    $codeactivation->setOrigine_code('MCNP');
                                                    $m_codeactivation->save($codeactivation);
                
                                                    $compteur = Util_Utils::findConuter() + 1;
                                                    Util_Utils::addSms($compteur,$mobile,'Voici vos codes d\'activation de compte marchand : '.' CODE FS : '.$codefs.' CODE FL : '.$codefl.' CODE FCPS : '.$codefkps);
                                                
                                                    }  else {
                                                        $db->rollback();
                                                        $this->view->error = 'Erreur de traitement : le solde est null';
                                                        $this->view->ancien_code_membre = $_POST['ancien_code_membre'];
                                                        $this->view->raison = $_POST['souscription_raison'];
                                                        $this->view->ville_membre = $_POST['souscription_ville']; 
                                                        $this->view->quartier_membre = $_POST['souscription_quartier'];
                                                        $this->view->email = $_POST['souscription_email'];
                                                        $this->view->portable = $_POST['souscription_mobile'];
                                                        $this->view->statut_juridique = $_POST['statut_juridique'];
                                                        $this->view->type_acteur = $_POST['type_acteur'];
                                                        $this->_redirect('/index/reactivationsouscriptionmcnppm/id/'.$_POST['ancien_code_membre']); 
                                                    }   
                                             }
                        
                        
                        
                        
                        
                    
                    }
                    $html .= "Date : ".$date_id->toString('yyyy-MM-dd HH:mm:ss')."<br />";
                    $tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    $result = $tafl->find($code_fl);
                    if(count($result) == 0) {
                       $html .= "Vignette : <a href='https://esmcgie.com/".$souscription_vignette."'>".$souscription_vignette."</a>";
                    }
                    
                    $esmc_email  = "server@gacsource.com";          
                    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5));
                    Zend_Mail::setDefaultTransport($tr);        
                    $mail = new Zend_Mail();
                    //$mail->setBodyText('Mon texte de test');
                    $mail->setBodyHtml($html);
                    $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                    $mail->addTo($esmc_email, "ESMC - SIF");
                    $mail->setSubject('Nouvelle souscription : '.$date_id->toString('dd-MM-yyyy HH:mm:ss'));
                    $mail->send();
                    
                    if($_POST['souscription_email'] != "") {
                        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
                        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                        Zend_Mail::setDefaultTransport($tr);        
                        $mail = new Zend_Mail();
                        //$mail->setBodyText('Mon texte de test');
                        $mail->setBodyHtml($html);
                        $mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC - SIF");
                        $mail->addTo($_POST['souscription_email'], $_POST['souscription_raison']);
                        $mail->setSubject('Ré-activation par souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                        $mail->send($tr);
                    }
                    $db->commit();
                    $sessionmcnp->errorlogin = "Demande de Quittance de Ré-activation bien effectuée";
                    $this->_redirect('/index/ancienpmmcnp');
                }   
                } catch (Exception $exc) {
                    $db->rollback();
                    $this->view->error = $exc->getMessage() . '=>' . $exc->getTraceAsString();
                    return;
                }
            }   else {  $this->view->error = "Champs * obligatoire ...";  }
            
        }   else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');        
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->raison = $trouvmembre->raison_sociale;
            //$this->view->code_rep = $trouvmembre->nom_membre." ".$trouvmembre->prenom_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
             //$this->view->bp = $trouvmembre->bp_membre;
            //$this->view->tel = $trouvmembre->tel_membre; 
            $this->view->portable = $trouvmembre->portable_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->site_web = $trouvmembre->site_web;
            $this->view->statut_juridique = $trouvmembre->code_statut;
            $this->view->type_acteur = $trouvmembre->code_type_acteur;
        }           
                    
    
    }
    
    
	
	
	
	
	public function ancienmppAction() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
	    if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	        if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Physique();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentp like ?', '%'.$_POST['code_membre'].'%')
			           ->where('etat_contrat = ?', 0);
		        $memb = $tabela->fetchAll($select);
		        if(count($memb) > 0) {
			        $table  = new Application_Model_DbTable_EuSouscription();
				    $selection = $table->select();
                    $selection->from($table)
                              ->where('souscription_ancien_membre like ?','%'.$_POST['code_membre'].'%')
							  ->where('souscription_programme like ?','KACM');
			        $sous = $table->fetchAll($selection);
                    if(count($sous) > 0) {
		              $trouvmembre = $memb->current();			
		              $this->_redirect('/index/ancienppedit/id/'.$trouvmembre->numidentp);
				    } else {
                      $this->view->message = "Vous devez faire la demande de quittance de ré-activation ...";
                    }				
		        }   else {  $this->view->message = "Votre numéro identité ReDeMARe est introuvable ou est déjà réactivé ...";}
		    }       else { $this->view->message = "Champs * obligatoire ...";} 
	    }
    }
	
	
	
	public function ancienmpmAction() {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
		
		if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	        if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Morale();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentm like ?', '%'.$_POST['code_membre'].'%')
			           ->where('etat_contrat = ?', 0)
	                   ->order('nomm ASC');
		        $memb = $tabela->fetchAll($select);
		        if(count($memb) > 0) {
				    $table  = new Application_Model_DbTable_EuSouscription();
				    $selection = $table->select();
                    $selection->from($table)
                              ->where('souscription_ancien_membre like ?', '%'.$_POST['code_membre'].'%')
							  ->where('souscription_programme like ?','KACM');
					$sous = $table->fetchAll($selection);
                    if(count($sous) > 0) {					
		              $trouvmembre = $memb->current();			
		              $this->_redirect('/index/ancienpmedit/id/'.$trouvmembre->numidentm);
					} else {
                      $this->view->message = "Vous devez faire la demande de quittance de ré-activation ...";
                    }					
		        } else { $this->view->message = "Pas de resultat ...";}
		    } else {  $this->view->message = "Champs * obligatoire ...";}
		   
	    }
	}
	
	
	public  function addquittanceinvalidAction() {
	        /* page administration/addintegrateur - Ajout d'une integrateur */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
			$param = (int)$this->_request->getParam('param');
			$this->view->param = $param;
		    //$this->_helper->layout->disableLayout();
 		    $this->_helper->layout()->setLayout('layoutpublicesmc');
		    $t_canton = new Application_Model_DbTable_EuCanton();
            $m_ville  = new Application_Model_EuVilleMapper();
		    $m_souscription2 = new Application_Model_EuSouscriptionMapper();
            $cantons  = $t_canton->fetchAll();
            $villes   = $m_ville->fetchAll();
            $this->view->cantons = $cantons;
            $this->view->villes  = $villes;
		    $request = $this->getRequest();
			
			if ($request->isPost ()) {
			    
				if (isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
				   && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
				   && isset($_POST['souscription_personne']) && $_POST['souscription_personne']!=""
				   && isset($_POST['souscription_programme']) && $_POST['souscription_programme']!=""
				   && isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
                   && isset($_POST['souscription_nombre']) && $_POST['souscription_nombre']!="" 
				   && isset($_POST['souscription_montant']) && $_POST['souscription_montant']!=""				   
				   && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1) {
				
				       $db = Zend_Db_Table::getDefaultAdapter();
                       $db->beginTransaction();
				       try {
					       // Traitement sur la table eu_souscription
						   $souscription0   = new Application_Model_EuSouscription();
                           $m_souscription0 = new Application_Model_EuSouscriptionMapper();
					       $membre = new Application_Model_EuMembre();
	                       $m_map  = new Application_Model_EuMembreMapper();
					       $membremoral = new Application_Model_EuMembreMorale();
	                       $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					       $nombre_compte = 0;
						   $nom = "";
						   $prenom = "";
						   $raison = "";
						   $code_type_acteur = "";
						   $id_souscription = "";
						   
						   $quittance_invalide = $m_souscription0->findquittanceinvalide($_POST['integrateur_souscription_ordre']);
						   if($quittance_invalide != NULL) {
						       $db->rollback();
						       $this->view->param = $param;
							   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							   $this->view->souscription_montant  = $_POST['souscription_montant'];
							   $this->view->souscription_nombre  = $_POST['souscription_nombre'];
					           $this->view->souscription_email  = $_POST['souscription_email'];
						       $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						       $this->view->id_canton  = $_POST['integrateur_canton'];
						       $this->view->id_ville   = $_POST['integrateur_ville'];
						       $this->view->code_membre = $_POST['integrateur_membre'];
		                       $sessionmcnp->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre']."  est  dejà utilisé ...";
                               return;
		                   }
						   
						   $programme = $request->getParam("souscription_programme");
						   $nombre    = $request->getParam("souscription_nombre");
						   $montant   = $request->getParam("souscription_montant");
						   
						   if($_POST['souscription_personne'] == "PP") {
						      $nom = $request->getParam("souscription_nom");
						      $prenom = $request->getParam("souscription_prenom");
						      $lignessous = $m_souscription0->findAllSouscriptionPP($nom,$prenom,$programme,$nombre,$montant);
						   } else {
						      $raison = $request->getParam("souscription_raison");
						      $code_type_acteur = $request->getParam("type_acteur");
                              $lignessous = $m_souscription0->findAllSouscriptionPM($raison,$code_type_acteur,$programme,$nombre,$montant);
                           }
						   
						   if($lignessous == false) {
                              $db->rollback();
					          $this->view->param = $param;
							  $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							  $this->view->souscription_montant  = $_POST['souscription_montant'];
							  $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						      $this->view->souscription_email  = $_POST['souscription_email'];
						      $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						      $this->view->id_canton  = $_POST['integrateur_canton'];
						      $this->view->id_ville   = $_POST['integrateur_ville'];
						      $this->view->code_membre = $_POST['integrateur_membre'];
		                      $sessionmcnp->error = "Veuillez revoir la saisie des informations de votre quittance";
					          return;
                           } else {
						      $lignesous = $lignessous[0];
						      $id_souscription = $lignesous->getSouscription_id();
						      $findsous = $m_souscription0->find($id_souscription,$souscription0);
                              $lignesous->setQuittance_invalide($request->getParam("integrateur_souscription_ordre"));
                              $m_souscription0->update($lignesous);								
						   }
						   
						   if(substr($_POST['integrateur_membre'],19,1) == 'P') {
						        $findmembre = $m_map->find($_POST['integrateur_membre'],$membre);
						        if($findmembre == false) {
						           $db->rollback();
					               $this->view->param = $param;
								   $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							       $this->view->souscription_montant  = $_POST['souscription_montant'];
							       $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						           $this->view->souscription_email  = $_POST['souscription_email'];
						           $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							       $this->view->id_canton  = $_POST['integrateur_canton'];
							       $this->view->id_ville   = $_POST['integrateur_ville'];
							       $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmcnp->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					               return;
						        }
						
					       }
					       else {
						        $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						        if($findmembre == false) {
						           $db->rollback();
					               $this->view->param = $param;
						           $this->view->souscription_email  = $_POST['souscription_email'];
						           $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							       $this->view->id_canton  = $_POST['integrateur_canton'];
							       $this->view->id_ville   = $_POST['integrateur_ville'];
							       $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmcnp->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					               return;
						       }
					      }
						  
						  $souscription3 = new Application_Model_EuSouscription();
                          $m_souscription3 = new Application_Model_EuSouscriptionMapper();
						  
						  $m_souscription3->find($id_souscription,$souscription3);  
						  $nombre_compte = $souscription3->souscription_nombre;
						  
						  if($nombre_compte >= 10)   {
						     include("Transfert.php");
		                     if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                          $chemin	= "integrateurs";
		                          $file = $_FILES['integrateur_diplome']['name'];
		                          $file1='integrateur_diplome';
		                          $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                     } else {$integrateur_diplome = "";}
								 
							 if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                        $chemin	= "integrateurs";
		                        $file = $_FILES['integrateur_document']['name'];
		                        $file1='integrateur_document';
		                        $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                      } else {$integrateur_document = "";}
							   
							  $date_id = new Zend_Date(Zend_Date::ISO_8601);
                              $a  = new Application_Model_EuIntegrateur();
                              $ma = new Application_Model_EuIntegrateurMapper();
							   
							  $compteur = $ma->findConuter() + 1;
                              $a->setIntegrateur_id($compteur);
                              $a->setIntegrateur_type($request->getParam("integrateur_type"));
                              $a->setIntegrateur_souscription($id_souscription);
								 
							  if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							        || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                    $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                    $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                    $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                              }
								 
							  if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22) {
                                if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                  $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                }
                                $a->setIntegrateur_education($_POST['integrateur_education']);
                                if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                  $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                }
                                $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                $a->setIntegrateur_document($integrateur_document);
                                $a->setIntegrateur_diplome($integrateur_diplome);
                               } 
							   
							   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                               $a->setIntegrateur_membreasso(0);
                               $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			                   $a->setPublier($request->getParam("publier"));
                               $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                               $a->setIntegrateurCanton($request->getParam("integrateur_canton"));
                               $a->setIntegrateurVille($request->getParam("integrateur_ville"));
							   $a->setCode_membre($request->getParam("integrateur_membre"));
                               $ma->save($a);
							   
							   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                               $integrateur  = new Application_Model_EuIntegrateur();
                               $integrateurM = new Application_Model_EuIntegrateurMapper();
                               $integrateurM->find($compteur,$integrateur);
		
                               $integrateur->setPublier(1);
		                       $integrateurM->update($integrateur);
								 
							   $code_agence = '';
							   ///////////////////////////////////////////////////////////////////////////////////////////////////////
							   if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
								    $membreasso   = new Application_Model_EuMembreasso();
                                    $m_membreasso = new Application_Model_EuMembreassoMapper();
		                            $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);
									
									$association = new Application_Model_EuAssociation();
                                    $m_association = new Application_Model_EuAssociationMapper();
		                            $m_association->find($membreasso->membreasso_association,$association);
		                            $code_agence = $association->code_agence;
									
									$recubancaire = new Application_Model_EuRecubancaire();
                                    $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
									
									$partagea = new Application_Model_EuPartagea();
                                    $partagea_mapper = new Application_Model_EuPartageaMapper();
									
									$partagem = new Application_Model_EuPartagem();
                                    $partagem_mapper = new Application_Model_EuPartagemMapper();
									
								 }
								 
								 $souscription = new Application_Model_EuSouscription();
                                 $m_souscription = new Application_Model_EuSouscriptionMapper();
								 
							     $complement   = new Application_Model_EuComplementQuittance();
                                 $m_complement = new Application_Model_EuComplementQuittanceMapper();
								 
								 $m_souscription->find($id_souscription, $souscription);
                                 $souscription->setCode_activite($request->getParam("code_activite"));
                                 $souscription->setId_metier($request->getParam("id_metier"));
                                 $souscription->setSouscription_email($request->getParam("souscription_email"));
                                 $m_souscription->update($souscription);
								 
								 $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						         $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
		                         $m_souscription->find($integrateur->integrateur_souscription,$souscription);
								
								 $integrateur2 = $m_integrateur2->fetchAllBySouscription($souscription->souscription_souscription);
							     $complement2  = $m_complement_quittance2->fetchAllBySouscription($souscription->souscription_souscription);
								
						         if(count($integrateur2) == 0  || count($complement2) == 0) {
								    $date_id = Zend_Date::now();
                                    $association = new Application_Model_EuAssociation();
                                    $association_mapper = new Application_Model_EuAssociationMapper();
								
								    $compteur_association = $association_mapper->findConuter() + 1;
                                    $association->setAssociation_id($compteur_association);
                                    $association->setAssociation_mobile($souscription->souscription_mobile);
                                    $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
                                    $association->setAssociation_numero($compteur_association."INT");
                                    $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                    $association->setAssociation_email($souscription->souscription_email);
                                    $association->setAssociation_recepisse(NULL);
                                    $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                    $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $association->setId_filiere(NULL);
                                    $association->setCode_type_acteur(NULL);
                                    $association->setCode_statut(NULL);
                                    $association->setCode_agence($code_agence);
                                    $association->setPublier(1);
                                    $association_mapper->save($association);
								
								    $date_id = Zend_Date::now();

                                    $membreasso = new Application_Model_EuMembreasso();
                                    $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								    $login = "";
								    $password = "";
			                    
								    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								       //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                       $login = "";
                                       while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)]; 
                                       }
									   $password = $login.$login;
									 
								    } else {
								       $login = $souscription->souscription_login;
									   $password = $souscription->souscription_passe;
								    }
								
                                    $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    $membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                    $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                    $membreasso->setMembreasso_association($compteur_association);
                                    $membreasso->setMembreasso_email($souscription->souscription_email);
                                    $membreasso->setMembreasso_login($login);
                                    $membreasso->setMembreasso_passe($password);
                                    $membreasso->setMembreasso_type(1);
                                    $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $membreasso->setPublier(1);
									$membreasso->setSouscription_id($souscription->souscription_id);
							        $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                    $membreasso_mapper->save($membreasso);
								
								    $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                    $html .= "<br/>";
                                    $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                    $html .= "<br/>";
							        $html .= "Login : ".$login."<br/>";
                                    $html .= "Mot de passe : ".$password."<br/>";
							   
							        $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							        $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                    Zend_Mail::setDefaultTransport($tr);		
                                    $mail = new Zend_Mail();
							   
							        $mail->setBodyHtml($html);
                                    $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                    $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                    $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                    $mail->send($tr); 
									
								}
								
								
								///////////////////////////////////////////////////////////////////////////////////////////////////////
							    $id_integrateur = $integrateur->integrateur_id;
							       
								 $cpte = $m_complement->findConuter() + 1;
								 $complement->setId_complement_quittance($cpte);
								 $complement->setIntegrateur_id($id_integrateur);
								 $complement->setSouscription_id($id_souscription);
								 $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
								 $m_complement->save($complement);
								 
								 
								 $eusouscription = new Application_Model_EuSouscription();
		                         $souscriptionM = new Application_Model_EuSouscriptionMapper();
								
								 $date = new Zend_Date();
		                         $compte_map = new Application_Model_EuCompteMapper();
                                 $compte      = new Application_Model_EuCompte();
			                     $sms_money   = new Application_Model_EuSmsmoney();
                                 $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                     $det_sms   = new Application_Model_EuDetailSmsmoney();
			                     $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                     $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                     $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							     // insertion dans la table eu_depot_vente
				                 $m_dvente = new Application_Model_EuDepotVenteMapper();
				                 $dvente = new Application_Model_EuDepotVente();
							   
							     $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                         $membre_pbf = '0000000000000000001M';
	                             $code_compte_pbf = "NN-TR-".$membre_pbf;
			                     $ret = $compte_map->find($code_compte_pbf,$compte);
								 
								 $finddepot = $m_dvente->findbysouscriptionmembre($id_souscription);
								 if($finddepot == NULL) {
								    $souscriptionM->find($id_souscription,$eusouscription);
								    $mobile = $eusouscription->souscription_mobile;
									if($eusouscription->souscription_programme == 'CMFH')   {
									   $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                           if($eusouscription->souscription_autonome == 1) {   
			                               $nbre_compte = $eusouscription->souscription_nombre - 1; 
			                           } else {
				                           $nbre_compte = $eusouscription->souscription_nombre;
				                       }
									   
									   $montant = $nbre_compte * $fcaps;
									   // Traitement des produits CAPS
									   $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									   $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
									   if ($lignesdetfcaps != null) {
									       $nengfcaps = $money_map->findConuter() + 1;
                                            $sms_money->setNEng($nengfcaps)
                	                                  ->setCode_Agence(null)
                                                      ->setCreditAmount($montant)
                                                      ->setSentTo($mobile)
                                                      ->setMotif('CAPS')
                                                      ->setId_Utilisateur(null)
                                                      ->setCurrencyCode('XOF')
                                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setFromAccount($code_compte_pbf)
                                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                      ->setCreditCode($codefcaps)
                                                      ->setDestAccount(null)
                                                      ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                      ->setDestAccount_Consumed('CAPS-'.$id_souscription)
                                                      ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                      ->setNum_recu(null);
                                            $money_map->save($sms_money);
											
											// Mise à jour du compte de transfert
				                            if($ret && ($cumulfcaps >= $montant)) {
			                                  // Mise à jour du compte de transfert
				                              $compte->setSolde($compte->getSolde() - $montant);
                                              $compte_map->update($compte);    
	                                        } else {
			                                  $db->rollback();
	                                          $this->view->param = $param;
											  $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							                  $this->view->souscription_montant  = $_POST['souscription_montant'];
							                  $this->view->souscription_nombre  = $_POST['souscription_nombre'];
											  $this->view->souscription_email  = $_POST['souscription_email'];
								              $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								              $this->view->id_canton  = $_POST['integrateur_canton'];
								              $this->view->id_ville   = $_POST['integrateur_ville'];
								              $this->view->code_membre = $_POST['integrateur_membre'];
			                                  $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte est insuffisant';
                                              return;			   
			                                }
									         $l = 0;
					                        $reste = $montant;
					                        $nbre_lignesdetfcaps = count($lignesdetfcaps);
										    while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										          $lignedetfcaps = $lignesdetfcaps[$l];
                                                  $id = $lignedetfcaps->getId_detail_smsmoney();
						                          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											      if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                             //Mise à jour  des lignes d'enrégistrement
                                                     $reste = $reste - $lignedetfcaps->getSolde_sms();
												     //insertion dans la table eu_detailventesms
						                             $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                     $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                        ->setId_detail_smsmoney($id)
                                                                ->setCode_membre_dist($membre_pbf)
                                                                ->setCode_membre(null)
                                                                ->setType_tansfert('CAPS')
                                                                ->setCreditcode($codefcaps)
                                                                ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                ->setId_utilisateur(null)
                                                                ->setCode_produit('CAPS');
                                                      $det_vte_sms->insert($det_vtesms->toArray());
															
							                          $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                            ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                            ->setSolde_sms(0);
                                                      $det_sms_m->update($lignedetfcaps);
  
						                            } else {
												      //Mise à jour  des lignes d'enrégistrement
												      //insertion dans la table eu_detailventesms
						                              $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                      $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                         ->setId_detail_smsmoney($id)
                                                                 ->setCode_membre_dist($membre_pbf)
                                                                 ->setCode_membre(null)
                                                                 ->setType_tansfert('CAPS')
                                                                 ->setCreditcode($codefcaps)
                                                                 ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                 ->setMont_vente($reste)
                                                                 ->setId_utilisateur(null)
                                                                 ->setCode_produit('CAPS');
                                                       $det_vte_sms->insert($det_vtesms->toArray());
															
                                                       $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                               $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                           $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                       $det_sms_m->update($lignedetfcaps);
						                               $reste = 0;
												     }
										             $l++;
										         }
												 
												 $countdvente = $m_dvente->findConuter() + 1;
				                                 $dvente->setId_depot($countdvente)
					                                    ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                                 $dvente->setCode_membre($_POST['integrateur_membre']);   
			                                     $dvente->setCode_produit('CAPS');
				                                 $dvente->setMont_depot($montant);
				                                 $dvente->setMont_vendu(0);
				                                 $dvente->setSolde_depot($montant);
				                                 $dvente->setId_utilisateur(null);
				                                 $dvente->setType_depot('AvecListe');
				                                 $dvente->setSouscription_id($id_souscription);
				                                 $m_dvente->save($dvente);
									   
									             $compteur = Util_Utils::findConuter() + 1;
				                                 Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
								
								                 include("automatisation.php");
								                 codegenerer($id_souscription);
									   } else  {
				                          $db->rollback();
	                                      $this->view->param = $param;
										  $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							              $this->view->souscription_montant  = $_POST['souscription_montant'];
							              $this->view->souscription_nombre  = $_POST['souscription_nombre'];
										  $this->view->souscription_email  = $_POST['souscription_email'];
								          $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								          $this->view->id_canton  = $_POST['integrateur_canton'];
								          $this->view->id_ville   = $_POST['integrateur_ville'];
								          $this->view->code_membre = $_POST['integrateur_membre'];
			                              $sessionmcnp->error = 'Le solde du compte CAPS est null';
                                          return;
				                      }
							
									}
								 
								 } else {
								    $m_dvente->find($finddepot->id_depot,$dvente);
									$dvente->setCode_membre($_POST['integrateur_membre']);
                                    $m_dvente->update($dvente);	
									
									include("automatisation.php");
								    recupcodegenerer($id_souscription);
								 }
						  
						  }
					
					   } catch (Exception $exc) {
						     $db->rollback();
	                         $this->view->param = $param;
							 $this->view->integrateur_souscription_ordre  = $_POST['integrateur_souscription_ordre'];
							 $this->view->souscription_montant  = $_POST['souscription_montant'];
							 $this->view->souscription_nombre  = $_POST['souscription_nombre'];
						     $this->view->souscription_email  = $_POST['souscription_email'];
						     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						     $this->view->id_canton  = $_POST['integrateur_canton'];
						     $this->view->id_ville   = $_POST['integrateur_ville'];
						     $this->view->code_membre = $_POST['integrateur_membre'];
                             $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                             return;
                        }
					
					
				   }
			
			}
	
	}
	
	
	public function codetegcAction() {
	  $this->_helper->layout->disableLayout();
      $code_membre = $_GET["code_membre"];
      $t_tab = new Application_Model_DbTable_EuTegc();
      $select = $t_tab->select();
	  if(substr($code_membre,19,1) == "M") {
	    $select->where('code_membre like ?', $code_membre);
	  } else {
	    $select->where('code_membre_physique like ?', $code_membre);
	  }
	  $select->where('nom_tegc is not null');
	  $select->order('nom_tegc asc');
	  $rows = $t_tab->fetchAll($select);
	  
	  $data = array();
	  if(count($rows) > 0) {
        for($i = 0; $i < count($rows); $i++) {
           $value = $rows[$i];
           $data[$i][0] = $value->code_tegc;
           $data[$i][1] = $value->nom_tegc;
        }
	  }	else {
         $data = "";
      }	  
      $this->view->data = $data;
   }


   public  function listbanqueAction() {
      $id_pays  = $_GET["id_pays"];
      $t_banque = new Application_Model_DbTable_EuBanque();
	  $select = $t_banque->select();
	  $select->where('id_pays like ?', $id_pays);
	  $select->order('libelle_banque asc');
	  $rows = $t_banque->fetchAll($select);
	  $data = array();
      for($i = 0; $i < count($rows); $i++) {
         $value = $rows[$i];
         $data[$i][0] = $value->code_banque;
         $data[$i][1] = $value->libelle_banque;
      }
      $this->view->data = $data;
   }
	
	

       public  function addoffreurprojetsouscriptionAction()  {
	   /*  page administration/addoffreurprojet - Ajout d'un offreurprojet  */
	   $sessionmcnp = new Zend_Session_Namespace('mcnp');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
 	   $t_canton = new Application_Model_DbTable_EuCanton();
       $m_ville = new Application_Model_EuVilleMapper();
	   $ville = new Application_Model_EuVille();
	   $m_filiere = new Application_Model_EuFiliereMapper();
	   $t_region = new Application_Model_DbTable_EuRegion();
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $t_pays = new Application_Model_DbTable_EuPays();
       $t_zone = new Application_Model_DbTable_EuZone();

       $cantons = $t_canton->fetchAll();
	   $regions = $t_region->fetchAll();
       $pays = $t_pays->fetchAll();
       $zones = $t_zone->fetchAll();
       $prefectures = $t_prefecture->fetchAll();
       $villes = $m_ville->fetchAll();
	   $filieres = $m_filiere->fetchAll();

	   $this->view->regions = $regions;
       $this->view->zones = $zones;
       $this->view->pays = $pays;
       $this->view->prefectures = $prefectures;
       $this->view->cantons = $cantons;
       $this->view->villes = $villes;
	   $this->view->filieres = $filieres;
	   $request = $this->getRequest();
	   
	   $param = (int) $this->_request->getParam('param');
	   
	   $typeoffreur = new Application_Model_EuTypeOffreurProjet();
       $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
       $typeoffreurM->find($param,$typeoffreur);
	   
	   $this->view->param = $param;
	   $this->view->souscription_montant = $typeoffreur->montant_param;
	   
	   if($request->isPost()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
		  try {  
              if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			    && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			    && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			    && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot'] !=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
                    
                    $param = (int) $this->_request->getParam('param');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

				    $membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
				   
				    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($param,$typeoffreur);
				   
				    $m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
							 
                   //$m_dmscm = new Application_Model_EuDetailMscmMapper();
                   //$dmscm = new Application_Model_EuDetailMscm();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
				   
				    $souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPS','valeur');
					
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
					    $type_souscription = $request->getParam("type_souscription");
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						  $mont_msbcm = $mont_bc * $bnpmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						  $mont_msbcm = $mont_bc * $bnpnmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						}   						
					}

				    $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
				    if($findmembre == false) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					  return;
				    }

				    $souscription_type_candidat= $request->getParam("souscription_type_candidat");
				    if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...";
					  return;
				    }
				   
				    if($typeoffreur->montant_param <  $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->code_membre = $request->getParam("offreur_projet_membre");
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->code_membre = $request->getParam("offreur_projet_membre");
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
				   
				    $offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';
				   
				    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                      $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
				   
				    if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
				       $bon_neutre2 = new Application_Model_EuBonNeutre();
					   $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					   $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					   $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					   $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					   $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					   $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					   $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					   
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
						   $this->view->code_membre = $request->getParam("offreur_projet_membre");
                           $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if(($offreur_membre != $offreur_code_membre)) {
						 $db->rollback();
	                     $this->view->param = $param;
						 $this->view->souscription_montant = $souscription_montant;
						 $this->view->code_membre = $request->getParam("offreur_projet_membre");
                         $sessionmcnp->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                         return;   
					    }
					   
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					   $i = 0;
					   $reste = $souscription_montant;
					   $nbre_lignesdetbon = count($lignesdetbon);
					   while($reste > 0 && $i < $nbre_lignesdetbon) {
                          $lignedetbon = $lignesdetbon[$i];
                          $id = $lignedetbon->getBon_neutre_detail_id();
						  $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						  if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                               $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                               $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                               $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                               foreach($appro_detail as $appro) {
							      $bnad = new Application_Model_EuBonNeutreApproDetail();
                                  $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                  if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                  } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                  }
										 
                                }
									   
							}
						  
						    //Mise à jour  des lignes d'enrégistrement
						    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                ->setBon_neutre_detail_montant_solde(0);
                            $bon_neutre_detailM->update($lignedetbon);


					   $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
					   $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
                       $bon_neutre_utilise->setUser_id(1);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						  
						  } else {
						      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                   $appro_montant_solde = $reste;
                                   foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                     }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						  

					   $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
					   $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
              		   $bon_neutre_utilise->setUser_id(1);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						        $reste = 0;
						  }
                          $i++;						
				       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					   $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					   $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					   //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					   $bon_neutre2M->update($bon_neutre2);
						  
					   /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
					   
					   
					   $eusouscription = new Application_Model_DbTable_EuSouscription();
					   $select = $eusouscription->select();

                       $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					   $select->order(array("souscription_id ASC"));
	                   $select->limit(1);
	                   $rowseusouscription = $eusouscription->fetchRow($select);
		               if(count($rowseusouscription) > 0) {
			             $souscription_ok = 1;
			             $souscription_first = $rowseusouscription->souscription_id;
			           } else {
			             $souscription_ok = 0;
			           }
					   
					   $eusouscription = new Application_Model_DbTable_EuSouscription();
	                   $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $sessionmcnp->error = "Login déjà existant ...";
						  return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $sessionmcnp->error = "Mot de passe incorret ...";
						  return;
	                    }
					   
					   $date_id = Zend_Date::now();
					   $souscription = new Application_Model_EuSouscription();
                       $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                       $compteur_souscription = $souscription_mapper->findConuter() + 1;
					   $souscription->setSouscription_id($compteur_souscription);
						
					   $souscription->setSouscription_raison($membremorale->raison_sociale);
                       $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                       $souscription->setCode_statut($membremorale->code_statut);
					   $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					   $souscription->setSouscription_membreasso(1);
						
					   $souscription->setSouscription_type("BAn");
                       $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                       $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                       $souscription->setSouscription_banque(null);
						
					   $souscription->setSouscription_montant($souscription_montant);
                       $souscription->setSouscription_nombre(null);
                       $souscription->setSouscription_programme("CMFH");
                       $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					   $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                       $souscription->setSouscription_vignette(null);
						
					   $souscription->setCode_activite(null);
                       $souscription->setId_metier(null);
                       $souscription->setId_competence(null);
					   $m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                       $souscription->setSouscription_ville($ville->lib_ville);
						
					   $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                         $souscription->setSouscription_souscription($souscription_first);
				        } else {
                         $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						
					   ///////////////////////////////////////////// validation acnev //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(1);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
						
					   ///////////////////////////////////////////// validation filiere //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(2);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
					   ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(3);
					   $souscriptionM->update($souscription);

					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
					   
					   // --- Faire la demande de configuration ----///////
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $date_idd = clone $date_id;
					   $demande   = new Application_Model_EuDemandeConfigte();
                       $m_demande = new Application_Model_EuDemandeConfigteMapper();
					   $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					    if($finddemande == false) {
					      $compteur_demande = $m_demande->findConuter() + 1;
			              $demande->setId_demande($compteur_demande);
                          $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                          $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			              $demande->setValider(3);
			              $demande->setId_canton($request->getParam("id_canton"));
			              $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $demande->setProduit_special(1);
						  $demande->setProduit_ordinaire(0);
			              $m_demande->save($demande);
					    }
					   
					   //--- Début de l'opération de mise sur chaine ---
					   $code = $_POST['offreur_projet_membre'];
					   $code_zone = $request->getParam("code_zone");
					   $id_filiere = $_POST['offreur_projet_filiere'];
					   $code_agence = substr($code,0,12);
				       $table = new Application_Model_DbTable_EuActeur();
					   $model_acteur = new Application_Model_EuActeur();
					   $mapper_acteur = new Application_Model_EuActeurMapper();
                       $selection = $table->select();
                       $selection->where('code_membre like ?',$code_agence.'%');
                       $selection->where('type_acteur like ?','gac_surveillance');
                       $resultat = $table->fetchAll($selection);
                       $trouvacteursur = $resultat->current();
                       $code_acteur = $trouvacteursur->code_acteur;
                       $acteur  =  $code_acteur;
					   
					   
					    //script de creation de TE des vendeurs ou offreurs de projet
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
							   	   
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
					    $code_te = "";
							   
					    $nom_tegc = $membremorale->raison_sociale;
							   
						$eutegc = new Application_Model_DbTable_EuTegc();
                        $select = $eutegc->select();
					    $select->where("code_membre like ? ", $code);
                        $rowseutegc = $eutegc->fetchAll($select);
							   
						if(count($rowseutegc) <= 0)  {
							$code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
								  
						    $te->setCode_tegc($code_te);
			                $te->setId_filiere($id_filiere);
			                $te->setMdv(12);
			                $te->setTranche_payement(1);
			                $te->setCode_membre($code);
                            $te->setCode_membre_physique(null);								  
			                $te->setMontant(0);
			                $te->setMontant_utilise(0);
			                $te->setSolde_tegc(0);
			                $te->setId_utilisateur(NULL);
			                $te->setNom_tegc($nom_tegc);
			                $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $te->setType_tegc("DISTRIBUTEUR");
						    $te->setRecurrent_illimite(0);
						    $te->setRecurrent_limite(0);
						    $te->setNonrecurrent(1);
						    $te->setPeriode1(0);
						    $te->setPeriode2(0);
							$te->setPeriode3(0);
							$te->setFormel(0);
						    $te->setRegime_tva(0);
						    $te->setSpecial(0);
						    $te->setOrdinaire(0);
							$te->setSubvention(0);
										
							$te->setCode_zone($request->getParam("code_zone"));
				            $te->setId_pays($request->getParam("id_pays"));
				            $te->setId_region($request->getParam("id_region"));
				            $te->setId_prefecture($request->getParam("id_prefecture"));
				            $te->setId_canton($request->getParam("id_canton"));

                            $m_te->save($te);

                            $id_prk = $m_prk->findConuter() + 1;
					        $prk->setId_prk($id_prk);
					        $prk->setCode_tegc($code_te);
					        $prk->setValeur(null);
					        $m_prk->save($prk);
								   
					    }
							   
					    $code_compte = 'NB-TPAGCP-'.$code;
				        $res = $map_compte->find($code_compte,$compte);
				
				        if(!$res) {
                            $compte->setCode_cat('TPAGCP')
                                   ->setCode_compte($code_compte)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TPAGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
				
				        $code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
							   
					    // Fin script de creation des TE vendeurs ou offreurs de projet
					   
					   
					   
					   
					   
					   
					   /*$findacteur = $mapper_acteur->findByActeur($code);
					   if($findacteur == false) {
					        if(($param == 1) || ($param == 4) || ($param == 7)) {
						      $id_type_acteur = 1;
						    }		   
						    if(($param == 2) || ($param == 5) || ($param == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($param == 3) || ($param == 6) || ($param == 9)) {
						      $id_type_acteur = 3;
						    }
						    if(($param == 1) || ($param == 2) || ($param == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($param == 4) || ($param == 5) || ($param == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($param == 7) || ($param == 8) || ($param == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
								 
						    // Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
                            $c_acteur->setType_acteur(null);
                    
                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());
								
								
						    // Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if($trouveuser) {
							       if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } 
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);			  
		                       }
							   
							   // Mise à jour de la table eu_membre_morale
				               $membremorale->setId_filiere($id_filiere);
				               $m_mapmorale->update($membremorale);
					           
							   //script de creation de TE des vendeurs ou offreurs de projet
							   $prk = new Application_Model_EuPrk();
                               $m_prk = new Application_Model_EuPrkMapper();
							   	   
                               $te   = new Application_Model_EuTegc();
							   $m_te = new Application_Model_EuTegcMapper();
							   $code_te = "";
							   
							   $nom_tegc = $membremorale->raison_sociale;
							   
							   $eutegc = new Application_Model_DbTable_EuTegc();
                               $select = $eutegc->select();
							   $select->where("code_membre like ? ", $code);
                               $rowseutegc = $eutegc->fetchAll($select);
							   
							   if(count($rowseutegc) <= 0)  {
							      $code_te = $m_te->getLastTegcByMembre($code);
								  if($code_te == NULL) {
			                         $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                      } else {
			                         $num_ordre = substr($code_te, -5);
                                     $num_ordre++;
                                     $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
								  
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere($id_filiere);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
			                      $te->setCode_membre($code);
                                  $te->setCode_membre_physique(null);								  
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("DISTRIBUTEUR");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($request->getParam("code_zone"));
				                  $te->setId_pays($request->getParam("id_pays"));
				                  $te->setId_region($request->getParam("id_region"));
				                  $te->setId_prefecture($request->getParam("id_prefecture"));
				                  $te->setId_canton($request->getParam("id_canton"));

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(null);
					              $m_prk->save($prk);
								   
							   }
							   
							   $code_compte = 'NB-TPAGCP-'.$code;
				               $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
				
				               $code_comptets = 'NB-TSGCP-'.$code;
				               $rests = $map_compte->find($code_comptets,$compte);
				
				               if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
							   
							   // Fin script de creation des TE vendeurs ou offreurs de projet
				
                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);
					   }
					   */
					   //---  Fin de l'opération de mise sur chaine ---
					   
					   // Mise à jour du type de fournisseur
					   //$membremoral = new Application_Model_EuMembreMorale();
	                   //$m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					   //$trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				       //$membremoral->setType_fournisseur($_POST['type_fournisseur']);
				       //$m_mapmoral->update($membremoral);
					   
					   
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $a = new Application_Model_EuOffreurProjet();
                       $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					   $compteur = $ma->findConuter() + 1;
					   $id_souscription = $compteur_souscription;
                                    
                       $a->setOffreur_projet_id($compteur);
                       $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                       $a->setOffreur_projet_souscription($id_souscription);
                       $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					   $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                       $a->setOffreur_projet_adresse($request->getParam("offreur_projet_quartier"));
                       $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
                       $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					   if($param >= 4) {
	                      $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                       }
							
					   $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                       $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                       $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                       $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                       $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                       $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                       $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                       $a->setOffreur_projet_membreasso(0);
                       $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                       $a->setOffreurProjetCanton($request->getParam("id_canton"));
                       $a->setOffreurProjetVille($request->getParam("offreur_projet_ville"));
					   $a->setOffreurProjetFournisseur($request->getParam("type_fournisseur"));
			           $a->setPublier($_POST['publier']);
                       $ma->save($a);
							  
							  
					   ////////////////////////////////////////////////////////////////////////////
                       $offreur_projet = new Application_Model_EuOffreurProjet();
                       $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                       $offreur_projetM->find($compteur,$offreur_projet);
		
                       $offreur_projet->setPublier(1);
		               $offreur_projetM->update($offreur_projet);
							
					   $id_offreur_projet = $offreur_projet->offreur_projet_id;
					   $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                       $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					   $cpte = $m_detailoffreur->findConuter() + 1;
					   $detailoffreur->setId_detail_offreur_projet($cpte);
					   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					   $detailoffreur->setSouscription_id($id_souscription);
					   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					   $m_detailoffreur->save($detailoffreur);
							  
					    /////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					   // Création du compte utilisateur intégrateur
                       $souscription = new Application_Model_EuSouscription();
                       $m_souscription = new Application_Model_EuSouscriptionMapper();
		               $m_souscription->find($id_souscription,$souscription);
							   
					   $date_id = Zend_Date::now();
                       $association = new Application_Model_EuAssociation();
                       $association_mapper = new Application_Model_EuAssociationMapper();

                       $login = "";
					   $password = "";
							  
					   if($finddepot == NULL  &&  $findmstiers == NULL) {
                            $compteur_association = $association_mapper->findConuter() + 1;
                            $association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                  $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                  }
								    $password = $login.$login; 
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }
										  
								$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id(null);
                                $membreasso_mapper->save($membreasso);
                        }
								  
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						
						$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						
						if($programme == "CM") {
						  $mstiers->setType_souscription("CAPS");	
						} else {
						   $mstiers->setType_souscription($request->getParam("type_souscription"));
						}
					    
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("CMFH");
                        $m_mstiers->save($mstiers);
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						if($programme == "CM") {
						   $type_bnp = "CAPS";
						} else {
						   $type_bnp = $request->getParam("type_souscription");	
						}
						$code_banque = $request->getParam("code_banque");
						$referencepaie   = $request->getParam("num_compte");
						$montant = $souscription_montant;
						
						if(isset($_POST["code_te"])) {
						  $code_tegc   = $request->getParam("code_te");   
						} else {
						  $eutegc = new Application_Model_DbTable_EuTegc();
                          $select = $eutegc->select();
						  $select->where("code_membre like ? ",$code);
                          $select->limit(1);
                          $rowseutegc = $eutegc->fetchRow($select);
                          $code_tegc = $rowseutegc->code_tegc;
						}
						
						$url = curl_init();
                        $resultjson = array();
					    curl_setopt_array(
					    $url,
						array(
							     CURLOPT_PORT => "9001",
                                 CURLOPT_URL => "http://10.10.20.7:9001/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                                   "content-type: application/json",
                                 ),
						 )
						 );
							
						$response = json_decode(curl_exec($url));
						$error = curl_error($url);
						
						if(($error === '')  && ($response->resultat == 1)) {
						    $db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							  $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							  $sessionmcnp->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/index/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
							
						} else {
							$db->rollback();
							$this->view->param = $param;
				            $this->view->souscription_montant = $souscription_montant;
			                $this->view->code_membre = $request->getParam("offreur_projet_membre");
							$sessionmcnp->error = "Echec operation ...";
							return;
						}	
				   }

            } else {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
			    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                $sessionmcnp->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}					   
	   
	    } catch (Exception $exc) {
		     $db->rollback();
	         $this->view->param = $param;
			 $this->view->souscription_montant = $souscription_montant;
			 $this->view->code_membre = $request->getParam("offreur_projet_membre");
             $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             return;
        }
	   
	   
	   }
	   
	
	}


	
	public function addoffreurprojetsouscriptionoldAction() {
	   /*  page administration/addoffreurprojet - Ajout d'un offreurprojet  */
	   $sessionmcnp = new Zend_Session_Namespace('mcnp');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
 	   $t_canton = new Application_Model_DbTable_EuCanton();
       $m_ville = new Application_Model_EuVilleMapper();
	   $ville = new Application_Model_EuVille();
	   $m_filiere = new Application_Model_EuFiliereMapper();
	   $t_region = new Application_Model_DbTable_EuRegion();
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $t_pays = new Application_Model_DbTable_EuPays();
       $t_zone = new Application_Model_DbTable_EuZone();

       $cantons = $t_canton->fetchAll();
	   $regions = $t_region->fetchAll();
       $pays = $t_pays->fetchAll();
       $zones = $t_zone->fetchAll();
       $prefectures = $t_prefecture->fetchAll();
       $villes = $m_ville->fetchAll();
	   $filieres = $m_filiere->fetchAll();

	   $this->view->regions = $regions;
       $this->view->zones = $zones;
       $this->view->pays = $pays;
       $this->view->prefectures = $prefectures;
       $this->view->cantons = $cantons;
       $this->view->villes = $villes;
	   $this->view->filieres = $filieres;
	   $request = $this->getRequest();
	   
	   $param = (int) $this->_request->getParam('param');
	   
	   $typeoffreur = new Application_Model_EuTypeOffreurProjet();
       $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
       $typeoffreurM->find($param,$typeoffreur);
	   
	   $this->view->param = $param;
	   $this->view->souscription_montant = $typeoffreur->montant_param;
	   
	   if($request->isPost()) {
	      if(isset($_POST['souscription_email']) && $_POST['souscription_email']!=""
			 && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			 && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			 && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			 && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			 && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot'] !=""
			 && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
				   $db = Zend_Db_Table::getDefaultAdapter();
                   $db->beginTransaction();
		           try {
				        $param = (int) $this->_request->getParam('param');
				   $id_utilisateur_acnev = 1;
                   $id_utilisateur_filiere = 2;
                   $id_utilisateur_technopole = 3;

				   $membremorale = new Application_Model_EuMembreMorale();
	               $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                   $compte = new Application_Model_EuCompte();
                   $map_compte = new Application_Model_EuCompteMapper();

			       $contrat = new Application_Model_EuContrat();
                   $map_contrat = new Application_Model_EuContratMapper();

				   $m_depotvente = new Application_Model_EuDepotVenteMapper();
				   $depotvente = new Application_Model_EuDepotVente();
				   
				   $typeoffreur = new Application_Model_EuTypeOffreurProjet();
                   $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                   $m_typeoffreur->find($param,$typeoffreur);
				   
				   $m_mstiers = new Application_Model_EuMstiersMapper();
                   $mstiers = new Application_Model_EuMstiers();
							 
                   //$m_dmscm = new Application_Model_EuDetailMscmMapper();
                   //$dmscm = new Application_Model_EuDetailMscm();

				   $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                   $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));

                   $date_id = Zend_Date::now();

				   $bon_neutre = new Application_Model_EuBonNeutre();
                   $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                   $id_type_acteur = "";
			       $id_type_creneau = "";
				   
				   $souscription_montant = $request->getParam("souscription_montant");
				   $statut = $request->getParam("liste");

				   $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
				   if($findmembre == false) {
					 $db->rollback();
	                 $this->view->param = $param;
				     $this->view->souscription_email = $request->getParam("souscription_email");
					 $this->view->code_membre = $request->getParam("offreur_projet_membre");
					 $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					 return;
				   }

				   $souscription_type_candidat= $request->getParam("souscription_type_candidat");
				   if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->souscription_email = $request->getParam("souscription_email");
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...";
					  return;
				   }
				   
				   if($typeoffreur->montant_param <  $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->souscription_email = $request->getParam("souscription_email");
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				   }
				   
				   $offreur_membre = $request->getParam("offreur_projet_membre");
				   $offreur_code_membre = '';
				   
				   $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				   if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->souscription_email  = $request->getParam("souscription_email");
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					  return;     
				   }
				   
				   if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $this->view->souscription_email  = $request->getParam("souscription_email");
					  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                      $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				   }
				   
				   
				   if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
				       $bon_neutre2 = new Application_Model_EuBonNeutre();
					   $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					   $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					   $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					   $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					   $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					   $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					   $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					   
					   if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
						   $this->view->souscription_email  = $request->getParam("souscription_email");
						   $this->view->code_membre = $request->getParam("offreur_projet_membre");
                           $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					   }
					   
					   if(($offreur_membre != $offreur_code_membre)) {
						 $db->rollback();
	                     $this->view->param = $param;
						 $this->view->souscription_montant = $souscription_montant;
						 $this->view->souscription_email  = $request->getParam("souscription_email");
						 $this->view->code_membre = $request->getParam("offreur_projet_membre");
                         $sessionmcnp->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                         return;   
					   }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					   $i = 0;
					   $reste = $souscription_montant;
					   $nbre_lignesdetbon = count($lignesdetbon);
					   while($reste > 0 && $i < $nbre_lignesdetbon) {
                          $lignedetbon = $lignesdetbon[$i];
                          $id = $lignedetbon->getBon_neutre_detail_id();
						  $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						  if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                               $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                               $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                               $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                               foreach($appro_detail as $appro) {
							      $bnad = new Application_Model_EuBonNeutreApproDetail();
                                  $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                  $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                  if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                    $bnad_M->update($bnad);
                                  } else {
                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                    $bnad_M->update($bnad);
                                    break;
                                  }
										 
                                }
									   
							}
						  
						    //Mise à jour  des lignes d'enrégistrement
						    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                ->setBon_neutre_detail_montant_solde(0);
                            $bon_neutre_detailM->update($lignedetbon);


					   $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
					   $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
              		   $bon_neutre_utilise->setUser_id(1);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						  } else {
						      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                   $appro_montant_solde = $reste;
                                   foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                     }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						  

					   $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
					   $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
              		   $bon_neutre_utilise->setUser_id(1);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						        $reste = 0;
						  }
                          $i++;						
				       }
					   
					   ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					   $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					   $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					   //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					   $bon_neutre2M->update($bon_neutre2);
						  
					   /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					   $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					   $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					   $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					   $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					   if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					   } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					   }
					   $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
					   $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					   $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
					   
					   
					   $eusouscription = new Application_Model_DbTable_EuSouscription();
					   $select = $eusouscription->select();

                       $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					   $select->order(array("souscription_id ASC"));
	                   $select->limit(1);
	                   $rowseusouscription = $eusouscription->fetchRow($select);
		               if(count($rowseusouscription) > 0) {
			             $souscription_ok = 1;
			             $souscription_first = $rowseusouscription->souscription_id;
			           } else {
			             $souscription_ok = 0;
			           }
					   
					   $eusouscription = new Application_Model_DbTable_EuSouscription();
	                   $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					   if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  $this->view->souscription_email = $request->getParam("souscription_email");
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $sessionmcnp->error = "Login déjà existant ...";
						  return;
	                   } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->souscription_montant = $souscription_montant;
						  $this->view->souscription_email = $request->getParam("souscription_email");
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                          $sessionmcnp->error = "Mot de passe incorret ...";
						  return;
	                   }
					   
					   $date_id = Zend_Date::now();
					   $souscription = new Application_Model_EuSouscription();
                       $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                       $compteur_souscription = $souscription_mapper->findConuter() + 1;
					   $souscription->setSouscription_id($compteur_souscription);
						
					   $souscription->setSouscription_raison($membremorale->raison_sociale);
                       $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                       $souscription->setCode_statut($membremorale->code_statut);
					   $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					   $souscription->setSouscription_membreasso(1);
						
					   $souscription->setSouscription_type("BAn");
                       $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                       $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                       $souscription->setSouscription_banque(null);
						
					   $souscription->setSouscription_montant($souscription_montant);
                       $souscription->setSouscription_nombre(null);
                       $souscription->setSouscription_programme("CMFH");
                       $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					   $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                       $souscription->setSouscription_vignette(null);
						
					   $souscription->setCode_activite(null);
                       $souscription->setId_metier(null);
                       $souscription->setId_competence(null);
					   $m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                       $souscription->setSouscription_ville($ville->lib_ville);
						
					   $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));
			                
					   if($finddepot == NULL && $findmstiers == NULL) {
                         $souscription->setSouscription_login($request->getParam("souscription_login"));
                         $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					   } else {
                         $souscription->setSouscription_login(null);
                         $souscription->setSouscription_passe(null);
                       }								  
						
					   if($souscription_ok == 1) {
                         $souscription->setSouscription_souscription($souscription_first);
				       } else {
                         $souscription->setSouscription_souscription($compteur_souscription);
					   }
						
					   $souscription->setSouscription_autonome(0);
			           $souscription->setPublier(0);
					   $souscription->setErreur(0);
					   $souscription->setId_canton($request->getParam("id_canton"));
                       $souscription_mapper->save($souscription);
						
						
					   ///////////////////////////////////////////// validation acnev //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(1);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
						
					   ///////////////////////////////////////////// validation filiere //////////////////////////////////
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(2);
					   $souscriptionM->update($souscription);
						
					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
						
					   ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					   $souscription = new Application_Model_EuSouscription();
					   $souscriptionM = new Application_Model_EuSouscriptionMapper();
					   $souscriptionM->find($compteur_souscription, $souscription);
								
					   $souscription->setPublier(3);
					   $souscriptionM->update($souscription);

					   $validation_quittance = new Application_Model_EuValidationQuittance();
					   $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					   $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					   $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					   $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					   $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					   $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					   $validation_quittance->setPublier(1);
					   $validation_quittance_mapper->save($validation_quittance);
					   
					   // --- Faire la demande de configuration ----///////
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $date_idd = clone $date_id;
					   $demande   = new Application_Model_EuDemandeConfigte();
                       $m_demande = new Application_Model_EuDemandeConfigteMapper();
					   $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					   if($finddemande == false) {
					      $compteur_demande = $m_demande->findConuter() + 1;
			              $demande->setId_demande($compteur_demande);
                          $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                          $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			              $demande->setValider(3);
			              $demande->setId_canton($request->getParam("id_canton"));
			              $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $demande->setProduit_special(1);
						  $demande->setProduit_ordinaire(0);
			              $m_demande->save($demande);
					   }
					   
					   //--- Début de l'opération de mise sur chaine ---
					   $code = $_POST['offreur_projet_membre'];
					   $code_zone = $request->getParam("code_zone");
					   $id_filiere = $_POST['offreur_projet_filiere'];
					   $code_agence = substr($code,0,12);
				       $table = new Application_Model_DbTable_EuActeur();
					   $model_acteur = new Application_Model_EuActeur();
					   $mapper_acteur = new Application_Model_EuActeurMapper();
                       $selection = $table->select();
                       $selection->where('code_membre like ?',$code_agence.'%');
                       $selection->where('type_acteur like ?','gac_surveillance');
                       $resultat = $table->fetchAll($selection);
                       $trouvacteursur = $resultat->current();
                       $code_acteur = $trouvacteursur->code_acteur;
                       $acteur  =  $code_acteur;
					   
					   $findacteur = $mapper_acteur->findByActeur($code);
					   
					   if($findacteur == false) {
					        if(($param == 1) || ($param == 4) || ($param == 7)) {
						      $id_type_acteur = 1;
						    }		   
						    if(($param == 2) || ($param == 5) || ($param == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($param == 3) || ($param == 6) || ($param == 9)) {
						      $id_type_acteur = 3;
						    }
						    if(($param == 1) || ($param == 2) || ($param == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($param == 4) || ($param == 5) || ($param == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($param == 7) || ($param == 8) || ($param == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                                    $num_ordre = substr($code_acteur, -4);
                                    $num_ordre++;
                                    $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                                 $acren->setCode_acteur($code_acteur);
                                 $acren->setId_filiere($id_filiere);
                                 $cm->save($acren);
								 
								 // Insertion dans la table eu_acteur
				                 $t_acteur = new Application_Model_DbTable_EuActeur();
				                 $c_acteur = new Application_Model_EuActeur();
								 $count = $c_acteur->findConuter() + 1;
											  
								 // Mise à jour des tables
				                 $filiere =  new Application_Model_EuFiliere();
                                 $map_filiere = new Application_Model_EuFiliereMapper();
                                 $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
								 $c_acteur->setId_acteur($count)
                                          ->setCode_acteur(NULL)
                                          ->setCode_division($filiere->getCode_division())
                                          ->setCode_membre($code)
                                          ->setId_utilisateur(NULL)
                                          ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				                if($id_type_acteur == 3) {
					              $c_acteur->setCode_activite('DETAILLANT');
			                    } else if($id_type_acteur == 2) {
					              $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                    } else if($id_type_acteur == 1) {
					              $c_acteur->setCode_activite('GROSSISTE');
				                }
						
			                    $c_acteur->setCode_source_create('SOURCE');
                                $c_acteur->setCode_monde_create('MONDE');
                                $c_acteur->setCode_zone_create($code_zone);
                                $c_acteur->setId_pays($request->getParam("id_pays"));
                                $c_acteur->setId_region($request->getParam("id_region"));
                                $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                                $c_acteur->setCode_agence_create($request->getParam("id_canton"));
                                
								if($id_filiere == 4) {
								  $c_acteur->setType_acteur('PBF');
								} else {
								  $c_acteur->setType_acteur(NULL);
								}
                    
                                $c_acteur->setCode_gac_chaine($acteur);
                                $t_acteur->insert($c_acteur->toArray());
								
								
								// Mise à jour de la table eu_utilisateur
                                $user_mapper = new Application_Model_EuUtilisateurMapper();
                                $userin = new Application_Model_EuUtilisateur();
				                $trouveuser = false;
				                $code_type_acteur = $membremorale->getCode_type_acteur();
				
				                $finduser = $user_mapper->findByMembre($code,"personne_morale");
				                if($finduser != false) {
				                  $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				                }
								
								if($trouveuser) {
								   if($id_filiere == 4) {
								      if($id_type_acteur == 3) {
									     $userin->setCode_groupe('pbf_detaillant');
                                         $userin->setCode_gac_filiere('pbf_detaillant');
                                         $userin->setCode_groupe_create('pbf_detaillant');
									  } elseif($id_type_acteur == 2) {
									     $userin->setCode_groupe('pbf_semi_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_semi_grossiste');
									  } elseif($id_type_acteur == 1) {
									     $userin->setCode_groupe('pbf_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_grossiste');
									  }
								   
								   } else {
								   
								   
								   if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   }
								   elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
								   
								   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);
											  
		                       }
								
								
											  
								/*if($trouveuser) {
							       if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } 
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);			  
		                       }*/
							   
							   // Mise à jour de la table eu_membre_morale
				               $membremorale->setId_filiere($id_filiere);
				               $m_mapmorale->update($membremorale);
					           
							   //script de creation de TE des vendeurs ou offreurs de projet
							   $prk = new Application_Model_EuPrk();
                               $m_prk = new Application_Model_EuPrkMapper();
							   	   
                               $te   = new Application_Model_EuTegc();
							   $m_te = new Application_Model_EuTegcMapper();
							   $code_te = "";
							   
							   $nom_tegc = $membremorale->raison_sociale;
							   
							   $eutegc = new Application_Model_DbTable_EuTegc();
                               $select = $eutegc->select();
							   $select->where("code_membre like ? ", $code);
                               $rowseutegc = $eutegc->fetchAll($select);
							   
							   if(count($rowseutegc) <= 0)  {
							      $code_te = $m_te->getLastTegcByMembre($code);
								  if($code_te == NULL) {
			                         $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                      } else {
			                         $num_ordre = substr($code_te, -5);
                                     $num_ordre++;
                                     $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
								  
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere($id_filiere);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
			                      $te->setCode_membre($code);
                                  $te->setCode_membre_physique(null);								  
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("DISTRIBUTEUR");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($request->getParam("code_zone"));
				                  $te->setId_pays($request->getParam("id_pays"));
				                  $te->setId_region($request->getParam("id_region"));
				                  $te->setId_prefecture($request->getParam("id_prefecture"));
				                  $te->setId_canton($request->getParam("id_canton"));

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(null);
					              $m_prk->save($prk);
								   
							   }
							   
							   $code_compte = 'NB-TPAGCP-'.$code;
				               $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
				
				               $code_comptets = 'NB-TSGCP-'.$code;
				               $rests = $map_compte->find($code_comptets,$compte);
				
				               if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
							   
							   // Fin script de creation des TE vendeurs ou offreurs de projet
				
                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);
					   }
					   //---  Fin de l'opération de mise sur chaine ---
					   
					   // Mise à jour du type de fournisseur
					   $membremoral = new Application_Model_EuMembreMorale();
	                   $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					   $trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				       $membremoral->setType_fournisseur($_POST['type_fournisseur']);
				       $m_mapmoral->update($membremoral);
					   
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $a = new Application_Model_EuOffreurProjet();
                       $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					   $compteur = $ma->findConuter() + 1;
					   $id_souscription = $compteur_souscription;
                                    
                       $a->setOffreur_projet_id($compteur);
                       $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                       $a->setOffreur_projet_souscription($id_souscription);
                       $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					   $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                       $a->setOffreur_projet_adresse($request->getParam("offreur_projet_adresse"));
                       $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
                       $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					   if($param >= 4) {
	                      $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                       }
							
					   $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                       $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                       $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                       $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                       $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                       $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                       $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                       $a->setOffreur_projet_membreasso(0);
                       $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                       $a->setOffreurProjetCanton($request->getParam("id_canton"));
                       $a->setOffreurProjetVille($request->getParam("offreur_projet_ville"));
			           $a->setPublier($_POST['publier']);
                       $ma->save($a);
							  
							  
					   ////////////////////////////////////////////////////////////////////////////
                       $offreur_projet = new Application_Model_EuOffreurProjet();
                       $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                       $offreur_projetM->find($compteur,$offreur_projet);
		
                       $offreur_projet->setPublier(1);
		               $offreur_projetM->update($offreur_projet);
							
					   $id_offreur_projet = $offreur_projet->offreur_projet_id;
					   $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                       $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					   $cpte = $m_detailoffreur->findConuter() + 1;
					   $detailoffreur->setId_detail_offreur_projet($cpte);
					   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					   $detailoffreur->setSouscription_id($id_souscription);
					   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					   $m_detailoffreur->save($detailoffreur);
							  
					   /////////////////////////////////////////////////////////////////////////////////////////
					   $code_agence = "";
							  
					   // Création du compte utilisateur intégrateur
                       $souscription = new Application_Model_EuSouscription();
                       $m_souscription = new Application_Model_EuSouscriptionMapper();
		               $m_souscription->find($id_souscription,$souscription);
							   
					   $date_id = Zend_Date::now();
                       $association = new Application_Model_EuAssociation();
                       $association_mapper = new Application_Model_EuAssociationMapper();

                       $login = "";
					   $password = "";
							  
					   if($finddepot == NULL  &&  $findmstiers == NULL) {
                            $compteur_association = $association_mapper->findConuter() + 1;
                            $association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                  $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                  }
								    $password = $login.$login; 
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }
										  
								$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id(null);
                                $membreasso_mapper->save($membreasso);
                        }
						
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						
						$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
					    $mstiers->setType_souscription("CAPS");
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
                        $m_mstiers->save($mstiers);
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = "CAPS";
						$code_banque = $request->getParam("code_banque");
						$referencepaie   = $request->getParam("num_compte");
						$montant = $souscription_montant;
						
						if(isset($_POST["code_te"])) {
						  $code_tegc   = $request->getParam("code_te");   
						} else {
						  $eutegc = new Application_Model_DbTable_EuTegc();
                          $select = $eutegc->select();
						  $select->where("code_membre like ? ",$code);
                          $select->limit(1);
                          $rowseutegc = $eutegc->fetchRow($select);
                          $code_tegc = $rowseutegc->code_tegc;
						}
						
						$url = curl_init();
                        $resultjson = array();
					    curl_setopt_array(
					    $url,
						array( 
                             CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                             CURLOPT_RETURNTRANSFER => true,
                             CURLOPT_ENCODING => "",
                             CURLOPT_MAXREDIRS => 10,
                             CURLOPT_TIMEOUT => 30,
                             CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                             CURLOPT_CUSTOMREQUEST => "POST",
							 CURLOPT_POSTFIELDS => "{
							  \n\t\"codeMembre\":\"$code\",
							   \n\t\"modePaiement\":\"$code_banque\",
								\n\t\"referencePaiement\":\"$referencepaie\",
								 \n\t\"montant\":\"$montant\",
								  \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								    \n\t\"souscriptionId\":\"$souscription_id\",
								     \n\t\"typeBnp\":\"$type_bnp\"
							  }",
							  CURLOPT_HTTPHEADER => array(
                                 "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                                 "content-type: application/json",
                              ),
						 )
						 );
							
						 $response = json_decode(curl_exec($url));
						 $error = curl_error($url);
						
						 if(($error === '') && ($reponse->resultat == 0)) {
						    $db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							  $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							  $sessionmcnp->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/index/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
				         } else {
							$db->rollback();
							$this->view->param = $param;
				            $this->view->souscription_montant = $souscription_montant;
			                $this->view->souscription_email = $request->getParam("souscription_email");
			                $this->view->code_membre = $request->getParam("offreur_projet_membre");
							$sessionmcnp->error = "Echec operation ...".$error;
							return;
						 }
				         curl_close($url);
				   }
				
				 } catch(Exception $exc) {
		             $db->rollback();
	                 $this->view->param = $param;
			         $this->view->souscription_montant = $souscription_montant;
			         $this->view->souscription_email = $request->getParam("souscription_email");
			         $this->view->code_membre = $request->getParam("offreur_projet_membre");
                     $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                     return;
                 }
	
	         } else {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
			    $this->view->souscription_email = $request->getParam("souscription_email");
			    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                $sessionmcnp->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			 }
	
	   }
	
	}
	
	

        
    public  function  addintegrateursouscriptionAction()   {
	    /* page public/addintegrateur - Ajout d'un integrateur */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
	    $param = (int) $this->_request->getParam('param');
	    
		$typeintegrateur = new Application_Model_EuTypeIntegrateur();
        $typeintegrateurM = new Application_Model_EuTypeIntegrateurMapper();
        $typeintegrateurM->find($param,$typeintegrateur);
		
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		 
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		 
		$this->view->param = $param;
		$this->view->integrateur_montant = $typeintegrateur->montant_param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		 
		$request = $this->getRequest();
		if($request->isPost())  {
		   if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			 && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
             && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""			   
			 && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  { 
                
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
					$param = (int) $this->_request->getParam('param');
					$m_typeintegrateur->find($param,$typeintegrateur);
						
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';   
					$integrateur_montant = $request->getParam("integrateur_montant");
					$statut = $request->getParam("liste");
					$programme = $request->getParam("programme");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPS','valeur');
					$bnpnmps  = Util_Utils::getParametre('BNPNMPS','valeur');
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $integrateur_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
					    $type_souscription = $request->getParam("type_souscription");
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						}   						
					}
					
					if(substr($membre_integrateur,19,1) == 'P')  {
					    $findmembre = $m_map->find($membre_integrateur,$membre);
					    if($findmembre == false) {
						   $db->rollback();
					       $this->view->param = $param;
					       $this->view->id_ville   = $request->getParam("integrateur_ville");
					       $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					       $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					       return;
					    }
						
					} else {
						$findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						}
					}
					  
					if($typeintegrateur->montant_param <  $integrateur_montant) {
					    $db->rollback();
					    $this->view->param = $param;
					    $this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    $this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					    return;
					}
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->id_ville   = $request->getParam("integrateur_ville");
					   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					   $this->view->code_membre = $membre_integrateur;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->id_ville   = $request->getParam("integrateur_ville");
					   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					   $this->view->code_membre = $membre_integrateur;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					  
					if(($param == 23) && (substr($membre_integrateur,19,1) == 'M')) {
					    $db->rollback();
					    $this->view->param = $param;
					    $this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    $this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les membres personnes physiques sont autorises a effectuer cette operation ...";
					    return;
					}
					  
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Votre Code BAn  incorrect ...";
                        return; 
					}
					  
					if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Montant restant du BAn est insuffisant ...";
                        return; 
					}
					   
					   
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
					       
						$bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						   
						   
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						    $db->rollback();
					        $this->view->param = $param;
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Montant restant du BAn est insuffisant ...";
                            return; 
						}
						   
						   
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->param = $param;
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                            return;   
						}
						   
						   
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$i = 0;
					    $reste = $integrateur_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                               $lignedetbon = $lignesdetbon[$i];
                               $id = $lignedetbon->getBon_neutre_detail_id();
						       $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							   if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									  foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
								  
								  }
								  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                  $bon_neutre_detailM->update($lignedetbon);


						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
              		   $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
								 
                                } else {
							        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);
					

						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
              		   $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
						          $reste = 0;
                               }							   
                               $i++;
                             }
							 
							 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
						     $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						     $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						     $bon_neutre2M->update($bon_neutre2);
						  
						     /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							 
							 $m_depotvente = new Application_Model_EuDepotVenteMapper();
				             $depotvente = new Application_Model_EuDepotVente();

                             $m_mstiers = new Application_Model_EuMstiersMapper();
				             $mstiers = new Application_Model_EuMstiers();
							 
							 //$m_dmscm = new Application_Model_EuDetailMscmMapper();
				             //$dmscm = new Application_Model_EuDetailMscm();
							 
						     $finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
							 $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							 
							 $eusouscription = new Application_Model_DbTable_EuSouscription();
						     $select = $eusouscription->select();
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                            $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						     } else {
						        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						     }
						
						     $select->order(array("souscription_id ASC"));
	                         $select->limit(1);
	                         $rowseusouscription = $eusouscription->fetchRow($select);
		                     if(count($rowseusouscription) > 0) {
			                    $souscription_ok = 1;
			                    $souscription_first = $rowseusouscription->souscription_id;
			                 } else {
			                    $souscription_ok = 0;
			                 }
							 
					         $eusouscription = new Application_Model_DbTable_EuSouscription();
	                         $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
						
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));
			            
                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
						include("Transfert.php");
		                   if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                      $chemin = "integrateurs";
		                      $file = $_FILES['integrateur_diplome']['name'];
		                      $file1='integrateur_diplome';
		                      $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                   } else { $integrateur_diplome = ""; }
						   
						   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                   } else {$integrateur_document = "";}
						      
						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();
						   
						   $compteur = $ma->findConuter() + 1;
						   $a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);
						   
						   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							     || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                 $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                 $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                 $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                           }
						   
						   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                           }
						   
						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso(0);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_quartier"));
                           $a->setIntegrateurCanton($request->getParam("id_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("integrateur_membre"));
                           $ma->save($a);
						   
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);
		
                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);
						   
						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						   $cpte = $m_complement->findConuter() + 1;
						   $complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						   $m_complement->save($complement);

                           // Création du compte utilisateur intégrateur
						   $souscription = new Application_Model_EuSouscription();
                           $m_souscription = new Application_Model_EuSouscriptionMapper();
		                   $m_souscription->find($compteur_souscription,$souscription);
						   $integrateur_souscription = $compteur_souscription;
							   
						   $date_id = Zend_Date::now();
                           $association = new Application_Model_EuAssociation();
                           $association_mapper = new Application_Model_EuAssociationMapper();
							   
						   $login = "";
						   $password = "";
						   $code_agence = "";

                           if($finddepot == NULL && $findmstiers == NULL) {
							       $compteur_association = $association_mapper->findConuter() + 1;
                                   $association->setAssociation_id($compteur_association);
                                   $association->setAssociation_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								   } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                   }
								   
                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);
								   
								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							       if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                      $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)]; 
                                      }
								      $password = $login.$login; 
								   } else {
								     $login = $souscription->souscription_login;
								     $password = $souscription->souscription_passe;
								   }
								  
								   $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                   $membreasso->setMembreasso_id($compteur_membreasso);
                                   $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								   } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                   }								  
                                  
                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);
						       }
							   
							   // insertion dans les tables eu_mstiers
							   $id_souscription = $compteur_souscription;
                               $id_mstiers = $m_mstiers->findConuter() + 1;
								  
							   $code_ban = $request->getParam("code_BAn");
							   $code_integrateur = $request->getParam("integrateur_membre");
							   $montant_souscris = $request->getParam("integrateur_montant");
								  
                               $mstiers->setId_mstiers($id_mstiers);
							   $mstiers->setCode_membre($code_integrateur);
							   $mstiers->setMontant_souscris($montant_souscris);
							   $mstiers->setMontant_utilise(0);
							   $mstiers->setMontant_restant($montant_souscris);
							   if($programme == "CM"){
								$mstiers->setType_souscription("CAPS");   
							   } else {
								$mstiers->setType_souscription($request->getParam("type_souscription"));  
							   }
							    $mstiers->setId_souscription($id_souscription);
							    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							    $mstiers->setBon_neutre_code($code_ban);
							    $mstiers->setType_mstiers($programme);
							    $mstiers->setStatut_mstiers($statut);
							   
					            if($param == 21 || $param == 24) {
							      $mstiers->setType_souscripteur("ODD");
								} else {
								  $mstiers->setType_souscripteur("CMFH");
                                  $m_mstiers->save($mstiers);  								  
							    }  
							   
                                // script de creation de TE de prestation
							    $eucompte = new Application_Model_EuCompte();
							    $m_compte = new Application_Model_EuCompteMapper();
									
							    $prk = new Application_Model_EuPrk();
                                $m_prk = new Application_Model_EuPrkMapper();
									
                                $te   = new Application_Model_EuTegc();
							    $m_te = new Application_Model_EuTegcMapper();
							    $code_te = "";
							    $nom_tegc = "";
									
							    $code_membre = $request->getParam("integrateur_membre");
							   
							    if(substr($code_membre,19,1)=='P') {
								  $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
							    } else {
								  $nom_tegc = $membremoral->raison_sociale;
							    }
									
							    $code_zone     = $request->getParam("code_zone");
			                    $id_pays       = $request->getParam("id_pays");
			                    $id_region     = $request->getParam("id_region");
			                    $id_prefecture = $request->getParam("id_prefecture");
			                    $id_canton     = $request->getParam("id_canton");
									
							    $num_compte = 'NB-TPAGCP-'.$code_membre;
				                $res = $m_compte->find($num_compte,$eucompte);
									
							    if(!$res) {
								  $eucompte->setCode_cat('TPAGCP')
                                           ->setCode_compte($num_compte)
										   ->setCode_type_compte('NB')
                                           ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte('TPAGCP')
                                           ->setSolde(0);
												 
								  if(substr($code_membre,19,1)=='P') {		 
                                     $eucompte->setCode_membre($code_membre)
                                              ->setCode_membre_morale(NULL);
								  } else  {
                                     $eucompte->setCode_membre(NULL)
                                              ->setCode_membre_morale($code_membre);
                                  }										         
                                  $m_compte->save($eucompte);
										
								  $code_te = $m_te->getLastTegcByMembre($code_membre);
								  if($code_te == NULL) {
			                        $code_te = 'TEGCP'.$code_membre. '00001';         
			                      } else {
			                        $num_ordre = substr($code_te, -5);
                                    $num_ordre++;
                                    $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
										
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere(NULL);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
								  if(substr($code_membre,19,1)=='M') {
			                         $te->setCode_membre($code_membre);
								  } else {
                                     $te->setCode_membre_physique($code_membre);
                                  }										
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit("Prestation");
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("PRESTATAIRE");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($code_zone);
				                  $te->setId_pays($id_pays);
				                  $te->setId_region($id_region);
				                  $te->setId_prefecture($id_prefecture);
				                  $te->setId_canton($id_canton);

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(null);
					              $m_prk->save($prk);
                                        										
							}
									
							$num_comptets = 'NB-TSGCP-'.$code_membre;
				            $rests = $m_compte->find($num_comptets,$eucompte);
									
							if(!$rests) {
								$eucompte->setCode_cat('TSGCP')
                                         ->setCode_compte($num_comptets)
										 ->setCode_type_compte('NB')
                                         ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte('TSGCP')
                                         ->setSolde(0);
												 
								if(substr($code_membre,19,1)=='P') {		 
                                   $eucompte->setCode_membre($code_membre)
                                            ->setCode_membre_morale(NULL);
								} else  {
                                   $eucompte->setCode_membre(NULL)
                                            ->setCode_membre_morale($code_membre);
                                }										         
                                $m_compte->save($eucompte);
									
                            }
							
						    // fin script de creation TE 
							if(isset($_POST["code_te"])) {
						      $code_tegc   = $request->getParam("code_te");   
						    } else {
                              $eutegc = new Application_Model_DbTable_EuTegc();
                              $select = $eutegc->select();
							  if(substr($code_membre,19,1)=='P') {
                                $select->where("code_membre_physique like ? ", $code_membre);
							  } else {
							    $select->where("code_membre like ? ", $code_membre);
							  }
                              $select->limit(1);
                              $rowseutegc = $eutegc->fetchRow($select);
                              $code_tegc = $rowseutegc->code_tegc;
							}
							
							$type_bnp = "";
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
							if($programme == "CM"){
                               $type_bnp = "CAPS";
							} else {
							   $type_bnp = $request->getParam("type_souscription");;
							}
							
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							  $url,
							  array(
							     CURLOPT_PORT => "9001",
                                 CURLOPT_URL => "http://10.10.20.7:9001/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                                   "content-type: application/json",
                                ),
							  )
							);
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
							    $db->commit();
							    if($finddepot == NULL && $findmstiers == NULL) {
							      $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						        } else {
							      $sessionmcnp->error = "Operation bien effectuee ...";
							    }
							   $this->_redirect('/index/addintegrateur/param/'.$_POST['integrateur_type']);
							} else {
							   $db->rollback();
							   $this->view->param = $param;
					           $this->view->id_ville   = $request->getParam("integrateur_ville");
					           $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					           $this->view->code_membre = $membre_integrateur;
					           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							   $sessionmcnp->error = "Echec operation ... : ".$error;
							   return;
							}
							curl_close($url);							 	 
					    }
				
				} catch (Exception $exc) {				   
				    $db->rollback();
					$this->view->param = $param;
					$this->view->id_ville   = $request->getParam("integrateur_ville");
					$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					$this->view->code_membre = $membre_integrateur;
					$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
			    }
               			   
		    } else  {
			    $this->view->param = $param;
				$this->view->id_ville = $request->getParam("integrateur_ville");
				$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
			    $this->view->code_membre = $membre_integrateur;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
		
		}
	
    }


	
	public function addintegrateursouscriptionoldAction() {
	    /* page public/addintegrateur - Ajout d'un integrateur */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		$param = (int) $this->_request->getParam('param');
		$this->view->param = $param;
		
		$typeintegrateur = new Application_Model_EuTypeIntegrateur();
        $typeintegrateurM = new Application_Model_EuTypeIntegrateurMapper();
        $typeintegrateurM->find($param,$typeintegrateur);
		
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		 
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		
		$this->view->integrateur_montant = $typeintegrateur->montant_param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		 
		$request = $this->getRequest();
		if($request->isPost())  {
	       if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			 && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
			 && isset($_POST['integrateur_email']) && $_POST['integrateur_email']!=""
             && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""			   
			 && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
			        $membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
					$param = (int) $this->_request->getParam('param');
					$m_typeintegrateur->find($param,$typeintegrateur);
						
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';   
					$integrateur_montant = $request->getParam("integrateur_montant");
					$statut = $request->getParam("liste");
					
					if(substr($membre_integrateur,19,1) == 'P')  {
					  $findmembre = $m_map->find($membre_integrateur,$membre);
					  if($findmembre == false) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					       $this->view->id_ville   = $request->getParam("integrateur_ville");
					       $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					       $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					       return;
					   }
						
					 } else {
						   $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						   }
					  }
					  
					  if($typeintegrateur->montant_param <  $integrateur_montant) {
					     $db->rollback();
					     $this->view->param = $param;
						 $this->view->integrateur_email   = $request->getParam("integrateur_email");
						 $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					     $this->view->id_ville   = $request->getParam("integrateur_ville");
						 $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					     $this->view->code_membre = $membre_integrateur;
						 $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                 $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					     return;
					  }
					  
					  if(($param == 23) && (substr($membre_integrateur,19,1) == 'M')) {
					    $db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					    $this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    $this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les membres personnes physiques sont autorises a effectuer cette operation ...";
					    return;
					  }
					  
					  
					  
					  $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					  if(count($bon_neutre) == 0) {
						 $db->rollback();
					     $this->view->param = $param;
						 $this->view->integrateur_email   = $request->getParam("integrateur_email");
						 $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						 $this->view->id_ville   = $request->getParam("integrateur_ville");
						 $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						 $this->view->code_membre = $membre_integrateur;
						 $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                         $this->view->error = "Votre Code BAn  incorrect ...";
                         return; 
					  }
					  
					  if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant)) {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Montant restant du BAn est insuffisant ...";
                        return; 
					   }

                       if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {					   
					       $bon_neutre2 = new Application_Model_EuBonNeutre();
						   $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						   $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						   $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					       $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						   $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						   $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						   $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						   
						   
						   if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $this->view->error = "Montant restant du BAn est insuffisant ...";
                              return; 
						   }
						   
						   
						   if($membre_integrateur != $code_membre_integrateur) {
						     $db->rollback();
					         $this->view->param = $param;
						     $this->view->integrateur_email   = $request->getParam("integrateur_email");
						     $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							 $this->view->id_ville   = $request->getParam("integrateur_ville");
							 $this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							 $this->view->code_membre = $membre_integrateur;
							 $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                             $this->view->error = "Le code membre du CMFH doit être celui du bon neutre ...";
                             return;   
						   }
						   
						   
						   ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					       ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						   $i = 0;
					       $reste = $integrateur_montant;
					       $nbre_lignesdetbon = count($lignesdetbon);
                           while($reste > 0 && $i < $nbre_lignesdetbon) {
                               $lignedetbon = $lignesdetbon[$i];
                               $id = $lignedetbon->getBon_neutre_detail_id();
						       $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							   if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							      $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								  if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
								      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									  foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
								  
								  }
								  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                  $bon_neutre_detailM->update($lignedetbon);


						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
              		   $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
								 
                               } else {
							      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);


						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   $bon_neutre_utilise->setUsertable("utilisateur");
              		   $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
						          $reste = 0;
                               }							   
                               $i++;
                             }
							 
							 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
						     $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						     $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						     $bon_neutre2M->update($bon_neutre2);
						  
						     /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							 
							 $m_depotvente = new Application_Model_EuDepotVenteMapper();
				             $depotvente = new Application_Model_EuDepotVente();

                             $m_mstiers = new Application_Model_EuMstiersMapper();
				             $mstiers = new Application_Model_EuMstiers();
							 
							 //$m_dmscm = new Application_Model_EuDetailMscmMapper();
				             //$dmscm = new Application_Model_EuDetailMscm();
							 
						     $finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
							 $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							 
							 $eusouscription = new Application_Model_DbTable_EuSouscription();
						     $select = $eusouscription->select();
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                            $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						     } else {
						        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						     }
						
						     $select->order(array("souscription_id ASC"));
	                         $select->limit(1);
	                         $rowseusouscription = $eusouscription->fetchRow($select);
		                     if(count($rowseusouscription) > 0) {
			                    $souscription_ok = 1;
			                    $souscription_first = $rowseusouscription->souscription_id;
			                 } else {
			                    $souscription_ok = 0;
			                 }
							 
					         $eusouscription = new Application_Model_DbTable_EuSouscription();
	                         $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
						
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));
			            
                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
						include("Transfert.php");
		                   if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                      $chemin = "integrateurs";
		                      $file = $_FILES['integrateur_diplome']['name'];
		                      $file1='integrateur_diplome';
		                      $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                   } else { $integrateur_diplome = ""; }
						   
						   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                   } else {$integrateur_document = "";}
						      
						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();
						   
						   $compteur = $ma->findConuter() + 1;
						   $a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);
						   
						   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							     || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                 $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                 $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                 $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                           }
						   
						   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                           }
						   
						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso(0);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                           $a->setIntegrateurCanton($request->getParam("id_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("integrateur_membre"));
                           $ma->save($a);
						   
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);
		
                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);
						   
						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						   $cpte = $m_complement->findConuter() + 1;
						   $complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						   $m_complement->save($complement);

                           // Création du compte utilisateur intégrateur
						   $souscription = new Application_Model_EuSouscription();
                           $m_souscription = new Application_Model_EuSouscriptionMapper();
		                   $m_souscription->find($compteur_souscription,$souscription);
						   $integrateur_souscription = $compteur_souscription;
							   
						   $date_id = Zend_Date::now();
                           $association = new Application_Model_EuAssociation();
                           $association_mapper = new Application_Model_EuAssociationMapper();
							   
						   $login = "";
						   $password = "";
						   $code_agence = "";

                           if($finddepot == NULL && $findmstiers == NULL) {
							       $compteur_association = $association_mapper->findConuter() + 1;
                                   $association->setAssociation_id($compteur_association);
                                   $association->setAssociation_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								   } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                   }
								   
                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);
								   
								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							       if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                      $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                         $login .= $liste[rand(0,61)]; 
                                      }
								      $password = $login.$login; 
								   } else {
								     $login = $souscription->souscription_login;
								     $password = $souscription->souscription_passe;
								   }
								  
								   $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                   $membreasso->setMembreasso_id($compteur_membreasso);
                                   $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								   if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								   } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                   }								  
                                  
                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);
						       }
							   
							   // insertion dans les tables eu_mstiers
							   $id_souscription = $compteur_souscription;
                               $id_mstiers = $m_mstiers->findConuter() + 1;
								  
							   $code_ban = $request->getParam("code_BAn");
							   $code_integrateur = $request->getParam("integrateur_membre");
							   $montant_souscris = $request->getParam("integrateur_montant");
								  
                               $mstiers->setId_mstiers($id_mstiers);
							   $mstiers->setCode_membre($code_integrateur);
							   $mstiers->setMontant_souscris($montant_souscris);
							   $mstiers->setMontant_utilise(0);
							   $mstiers->setMontant_restant($montant_souscris);
							   $mstiers->setType_souscription("CAPS");
							   $mstiers->setId_souscription($id_souscription);
							   $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							   $mstiers->setBon_neutre_code($code_ban);
							   $mstiers->setStatut_mstiers($statut);
                               $m_mstiers->save($mstiers);  								  
							      
							   
                               // script de creation de TE de prestation
							   $eucompte = new Application_Model_EuCompte();
							   $m_compte = new Application_Model_EuCompteMapper();
									
							   $prk = new Application_Model_EuPrk();
                               $m_prk = new Application_Model_EuPrkMapper();
									
                               $te   = new Application_Model_EuTegc();
							   $m_te = new Application_Model_EuTegcMapper();
							   $code_te = "";
							   $nom_tegc = "";
									
							   $code_membre = $request->getParam("integrateur_membre");
							   
							   if(substr($code_membre,19,1)=='P') {
								  $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
							   } else {
								  $nom_tegc = $membremoral->raison_sociale;
							   }
									
							   $code_zone     = $request->getParam("code_zone");
			                   $id_pays       = $request->getParam("id_pays");
			                   $id_region     = $request->getParam("id_region");
			                   $id_prefecture = $request->getParam("id_prefecture");
			                   $id_canton     = $request->getParam("id_canton");
									
							   $num_compte = 'NB-TPAGCP-'.$code_membre;
				               $res = $m_compte->find($num_compte,$eucompte);
									
							   if(!$res) {
								  $eucompte->setCode_cat('TPAGCP')
                                           ->setCode_compte($num_compte)
										   ->setCode_type_compte('NB')
                                           ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte('TPAGCP')
                                           ->setSolde(0);
												 
								  if(substr($code_membre,19,1)=='P') {		 
                                     $eucompte->setCode_membre($code_membre)
                                              ->setCode_membre_morale(NULL);
								  } else  {
                                     $eucompte->setCode_membre(NULL)
                                              ->setCode_membre_morale($code_membre);
                                  }										         
                                  $m_compte->save($eucompte);
										
								  $code_te = $m_te->getLastTegcByMembre($code_membre);
								  if($code_te == NULL) {
			                        $code_te = 'TEGCP'.$code_membre. '00001';         
			                      } else {
			                        $num_ordre = substr($code_te, -5);
                                    $num_ordre++;
                                    $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
										
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere(NULL);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
								  if(substr($code_membre,19,1)=='M') {
			                         $te->setCode_membre($code_membre);
								  } else {
                                     $te->setCode_membre_physique($code_membre);
                                  }										
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit("Prestation");
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("PRESTATAIRE");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($code_zone);
				                  $te->setId_pays($id_pays);
				                  $te->setId_region($id_region);
				                  $te->setId_prefecture($id_prefecture);
				                  $te->setId_canton($id_canton);

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(7);
					              $m_prk->save($prk);
                                        										
							}
									
							$num_comptets = 'NB-TSGCP-'.$code_membre;
				            $rests = $m_compte->find($num_comptets,$eucompte);
									
							if(!$rests) {
								$eucompte->setCode_cat('TSGCP')
                                         ->setCode_compte($num_comptets)
										 ->setCode_type_compte('NB')
                                         ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte('TSGCP')
                                         ->setSolde(0);
												 
								if(substr($code_membre,19,1)=='P') {		 
                                   $eucompte->setCode_membre($code_membre)
                                            ->setCode_membre_morale(NULL);
								} else  {
                                   $eucompte->setCode_membre(NULL)
                                            ->setCode_membre_morale($code_membre);
                                }										         
                                $m_compte->save($eucompte);
									
                             }
						    // fin script de creation TE
							
							$eutegc = new Application_Model_DbTable_EuTegc();
                            $select = $eutegc->select();
							if(substr($code_membre,19,1)=='P') {
                              $select->where("code_membre_physique like ? ", $code_membre);
							} else {
							  $select->where("code_membre like ? ", $code_membre);
							}
                            $select->limit(1);
                            $rowseutegc = $eutegc->fetchRow($select);

                            $code_tegc = $rowseutegc->code_tegc;
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
                            $type_bnp = "CAPS";
                            $montant = $request->getParam("integrateur_montant");
							$souscription_id = $compteur_souscription;
							$typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							$url,
							  array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                                   "content-type: application/json",
                                 ),
							  )
							);
							
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($reponse->resultat == 0)) {
							   $db->commit();
							   if($finddepot == NULL && $findmstiers == NULL) {
							     $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						       } else {
							     $sessionmcnp->error = "Operation bien effectuee ...";
							   }
							   $this->_redirect('/index/addintegrateur/param/'.$_POST['integrateur_type']);
							} else {
							   $db->rollback();
							   $this->view->param = $param;
					           $this->view->integrateur_email   = $request->getParam("integrateur_email");
					           $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					           $this->view->id_ville   = $request->getParam("integrateur_ville");
					           $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					           $this->view->code_membre = $membre_integrateur;
					           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							   $sessionmcnp->error = "Echec operation ... : ".$error;
							   return;
							}
							curl_close($url);
					}
					  
			 
			    } catch (Exception $exc) {				   
				    $db->rollback();
					$this->view->param = $param;
					$this->view->integrateur_email   = $request->getParam("integrateur_email");
					$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					$this->view->id_ville   = $request->getParam("integrateur_ville");
					$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					$this->view->code_membre = $membre_integrateur;
					$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
			     }
			 
			 } else {
			    $this->view->param = $param;
				$this->view->integrateur_email   = $request->getParam("integrateur_email");
				$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
				$this->view->id_ville = $request->getParam("integrateur_ville");
				$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
			    $this->view->code_membre = $membre_integrateur;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			 }
	
	    }
	}
	
	
	
	
	public  function addpostulatAction()  {
		/* page public/addpostulat - Ajout d'un postulat */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
	    $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
		 
            $t_candidat = new Application_Model_DbTable_EuTypeCandidat();
            $select = $t_candidat->select();
	    $select->where("id_type_candidat in (?) ", array(1,2,3,4,5,8,9,10,11));
            $candidats = $t_candidat->fetchAll($select);
	    $zones = $t_zone->fetchAll();
	    $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
            //$candidats  = $t_candidat->fetchAll();
	    $selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		
        $this->view->candidats = $candidats;
	    $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
	    $this->view->villes = $villes;
		
		$request = $this->getRequest();
	    if($request->isPost()) {
		
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
				$membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
		        $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
		        
		        $date_id = Zend_Date::now();
				
		        $postulat = new Application_Model_EuPostulat();
                $postulat_mapper = new Application_Model_EuPostulatMapper();
				
				$code_membre = $request->getParam("postulat_code_membre");
		        $id_type_candidat = $request->getParam("id_type_candidat");
		        $postulat_nom = $request->getParam("postulat_nom");  
		        $postulat_prenom = $request->getParam("postulat_prenom");
		        //$postulat_raison = $request->getParam("postulat_raison");
			
		        $postulat_mobile = trim($request->getParam("postulat_mobile"));
		        $postulat_email = $request->getParam("postulat_email");
			
	            $code_zone  = $request->getParam("code_zone");
		        $id_pays = $request->getParam("id_pays");
	            $id_region = $request->getParam("id_region");
		        $id_prefecture = $request->getParam("id_prefecture");
		        $id_canton = $request->getParam("id_canton");
		        $code_postulat = "";
				
				$db_postulat = new Application_Model_DbTable_EuPostulat();
			    $postulat_nom = str_replace("'", " ", $postulat_nom);
				$select = $db_postulat->select();
	            $select->where("LOWER(REPLACE(nom_postulat, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$postulat_nom)));
				
				$postulat_prenom = str_replace("'", " ", $postulat_prenom);
				$tabprenom = explode(" ", $postulat_prenom);
				foreach($tabprenom as $value) {
	              $select->where("LOWER(REPLACE(prenom_postulat, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				}
				
				/* if($postulat_raison != "") {
					$postulat_raison = str_replace("'", " ", $postulat_raison);
				    $tabraison = explode(" ", $postulat_raison);
				    foreach($tabraison as $raison) {
	                    $select->where("LOWER(REPLACE(raison_postulat, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$raison))."%' ");
				    }
				} */
				$select->where("id_canton = ? ", $id_canton);
				$select->where("id_type_candidat = ? ", $id_type_candidat);
				$select->limit(1);
	            $rowspostulat = $db_postulat->fetchRow($select);
				
				if(count($rowspostulat) <= 0)    {
                                    if(($code_membre != "") && (strlen($code_membre) != 20))  {
			                $db->rollback();	
			                $sessionmcnp->error = "Le numéro membre du postulant saisi  ".$code_membre."  est introuvable ...";
			                return;
		                    }
				    elseif(($code_membre != "") && (substr($code_membre,19,1) == 'P'))  {
			            $findmembre = $m_map->find($code_membre,$membre);
			            if($findmembre == false) {
			                $db->rollback();	
			                $sessionmcnp->error = "Le numéro membre du postulant saisi  ".$code_membre."  est introuvable ...";
			                return;
			            }
		            } elseif(($code_membre != "") && (substr($code_membre,19,1) == 'M'))  {
			            $findmembre = $m_map->find($code_membre,$membre);
			            if($findmembre == false) {
			                $db->rollback();	
		                    $sessionmcnp->error = "Le numéro membre du postulant saisi  ".$code_membre."  est introuvable ...";
			                return;
		                }	
		            }


                            if($code_membre != "") {
			         $depot = new Application_Model_EuDepotVente();
                                 $depot_mapper = new Application_Model_EuDepotVenteMapper();
				 $finddepot = $depot_mapper->fetchAllByMembre($code_membre);
			         if($finddepot != NULL)  {
				    $db->rollback();
                                    $sessionmcnp->error = "Votre candidature est déjà prise en compte en tant que CMFH. Connectez-vous à votre espace personnel pour actualiser votre profil CMFH ...";
                                    return;
			         }
			    }
                            
					
					do  {
	                    $code_postulat = strtoupper(Util_Utils::genererCodeSMS(6));
                        $postulat2_mapper = new Application_Model_EuPostulatMapper();
                        $postulat2 = $postulat2_mapper->fetchAllByCode($code_postulat);
                    } while(count($postulat2) > 0);
					
				    $compteur_postulat = $postulat_mapper->findConuter() + 1;
				    $postulat->setId_postulat($compteur_postulat);
				    $postulat->setCode_membre($code_membre);
				    $postulat->setId_type_candidat($id_type_candidat);
				    $postulat->setDate_postulat($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				    $postulat->setNom_postulat($postulat_nom);
				    $postulat->setPrenom_postulat($postulat_prenom);
				    $postulat->setRaison_postulat(null);
				    $postulat->setCode_zone($code_zone);
				    $postulat->setId_pays($id_pays);
				    $postulat->setId_region($id_region);
				    $postulat->setId_prefecture($id_prefecture);
				    $postulat->setId_canton($id_canton);
				    $postulat->setEmail_postulat($postulat_email);
				    $postulat->setMobile_postulat(trim($postulat_mobile));
				    $postulat->setTraiter(0);
				    $postulat->setCode_postulat($code_postulat);
				    $postulat_mapper->save($postulat);
				
				    $db->commit();
                    $sessionmcnp->error = "Opération bien effectuée. <br />
                    Vous venez d'ajouter un postulat. <br/>
                    Voici votre code postulat : ".$code_postulat." "."<br/>".
				    "Veuillez le conserver pour la suite des opérations";
				
				    $this->_redirect('/index/addpostulat');
				
				} else {
				    $sessionmcnp->error = "Voici le code postulat : <strong>".$rowspostulat->code_postulat."</strong><br />";
				    $this->_redirect('/index/addpostulat');
				}
				
			}  catch(Exception $exc) {
		        $db->rollback();
		        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                return;
		    }
		
		}
		
	}
	
	
	
	
	public function validerpostulatAction()  {
	    /* page public/addpostulat - Ajout d'un postulat */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
            $this->_helper->layout()->setLayout('layoutpublicesmc');
      
            $request = $this->getRequest();
	    if($request->isPost())  {
		 $t_postulat = new Application_Model_DbTable_EuPostulat();
		 $code_postulat = $request->getParam("code_postulat");

                 $postulat_mapper = new Application_Model_EuPostulatMapper();
                 $postulat = $postulat_mapper->fetchAllByCode($code_postulat);
			
		if(count($postulat) > 0 ) {
			    if(($postulat->code_membre != "" || $postulat->code_membre != NULL) && strlen($postulat->code_membre) == 20) {
		            $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                    $select->setIntegrityCheck(false);
                    $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                    $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                    $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		            $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		            $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		            $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                    $select->where('eu_postulat.code_postulat like ?', trim($code_postulat));
				
                    $entries = $t_postulat->fetchAll($select);
                    $this->view->entries = $entries;
		            $this->view->code_postulat = $code_postulat;
				
			        } else {
				        $sessionmcnp->error = "Le membre postulant ne dispose pas de compte marchand";
				        $this->view->code_postulat = $code_postulat;
			        }
		    } else  {
				$sessionmcnp->error = "Ce code postulat est erroné";
				$this->view->code_postulat = $code_postulat;
			}
		}
		
	}
	
	
	public  function  souscrireintegrateurAction()   {
	    /* page public/addpostulat - Ajout d'un postulat */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		$param = (int)$this->_request->getParam('id');
	    $this->view->id = $param;
	    $request = $this->getRequest();
        if($request->isPost())  {
	        if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!=""
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1) {
					
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
                    $postulat   = new Application_Model_EuPostulat();			
		            $m_postulat = new Application_Model_EuPostulatMapper();
		            $m_postulat->find($param,$postulat);

                    $m_integrateur = new Application_Model_EuTypeIntegrateurMapper();
					$integrateurs = $m_integrateur->fetchAll();
					
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$date_id = Zend_Date::now();
			  
			        $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';
					$type_candidat = "";
					
					$integrateur_montant = $request->getParam("integrateur_montant");
					$integrateur_nombre  = $request->getParam("integrateur_nombre");
					$integrateur_type    = $request->getParam("integrateur_type");
					$id_postulat    = $request->getParam("id_postulat");
					
					$m_typeintegrateur->find($integrateur_type,$typeintegrateur);

					$montant_souscription = $integrateur_nombre * 2187.5;
					
					if($param !=  $id_postulat) {
					    $db->rollback();
					    $this->view->id = $param;
					    $this->view->postulat = $postulat;
                        $this->view->integrateurs = $integrateurs;
		                $this->view->error = "L'identifiant du postulat est introuvable...Veuillez reprendre l'opération";
					    return;
					}
					
					if($typeintegrateur->montant_param >  $integrateur_montant) {
					    $db->rollback();
					    $this->view->id = $param;
					    $this->view->postulat = $postulat;
                        $this->view->integrateurs = $integrateurs;
		                $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					    return;
					}
					
					$type_candidat = $postulat->id_type_candidat;
			        if(substr($membre_integrateur,19,1) == 'P')  {
						$findmembre = $m_map->find($membre_integrateur,$membre);
						if($findmembre == false) {
						    $db->rollback();
							$this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;
		                    $sessionmcnp->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					        return;
						}
					} else {
						$findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
						if($findmembre == false) {
						    $db->rollback();
							$this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;
		                    $sessionmcnp->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					        return;
						}
				    }
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
					  $db->rollback();
					  $this->view->id = $param;
					  $this->view->postulat = $postulat;
                      $this->view->integrateurs = $integrateurs;  
                      $sessionmcnp->error = "Votre Code BAn  incorrect ...";
                      return;
					}
					
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
						$bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) && ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) && ($cumulbon < $montant_souscription)) {
						    $db->rollback();
	                        $this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            return;
						}
						
						if(($code_membre_integrateur != NULL)  && ($membre_integrateur != $code_membre_integrateur)) {
						    $db->rollback();
	                        $this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;
                            $sessionmcnp->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                            return;
						}
						
						$i = 0;
					    $reste = $montant_souscription;
					    $nbre_lignesdetbon = count($lignesdetbon);
						while ($reste > 0 && $i < $nbre_lignesdetbon) {
                                $lignedetbon = $lignesdetbon[$i];
                                $id = $lignedetbon->getBon_neutre_detail_id();
						        $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								    if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();

                                       foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }

                                       }

									}
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);


						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   		 $bon_neutre_utilise->setUsertable("utilisateur");
              		   		 $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 

                                } else {

                                    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                        }
                                    }
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);



						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   		 $bon_neutre_utilise->setUsertable("utilisateur");
              		   		 $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
						            $reste = 0;
                                }
                                $i++;
                        }
						
						
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						$bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						$bon_neutre2M->update($bon_neutre2);

						/*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
							
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);*/
						
						
						$m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();
						$finddepot = $m_depotvente->fetchAllByMembre($_POST['integrateur_membre']);
						
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                       $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}

						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }

						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->id = $param;
					       $this->view->postulat = $postulat;
                           $this->view->integrateurs = $integrateurs;
                           $sessionmcnp->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->id = $param;
					       $this->view->postulat = $postulat;
                           $this->view->integrateurs = $integrateurs;
                           $sessionmcnp->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

						$compteur_souscription = $souscription_mapper->findConuter() + 1;
						$souscription->setSouscription_id($compteur_souscription);

						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso(1);
						
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                        $souscription->setSouscription_banque(NULL);

						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($type_candidat);

                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));

						
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $souscription->setSouscription_ville($membre->ville_membre);
                            $souscription->setSouscription_quartier($membre->quartier_membre);
						} else {
                            $souscription->setSouscription_ville($membremoral->ville_membre);
                            $souscription->setSouscription_quartier($membremoral->quartier_membre);
                        }						

                        $souscription->setSouscription_email($postulat->email_postulat);
                        if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }

			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }

						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($postulat->id_canton);
                        $souscription->setId_postulat($postulat->id_postulat);
                        $souscription_mapper->save($souscription);
						
						// //// Mise à jour postulat //////////////////////////////////////////
                        $code_zone = $postulat->code_zone;
                        $id_pays = $postulat->id_pays;
                        $id_region = $postulat->id_region;
                        $id_prefecture = $postulat->id_prefecture;
                        $id_canton = $postulat->id_canton;
						$postulat->setTraiter(1);
						//$postulat->setCode_membre($request->getParam("integrateur_membre"));
						$m_postulat->update($postulat);
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(2);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

						///////////////////////////////////////////// validation technopole //////////////////////////////////

						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(3);
						$souscriptionM->update($souscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						$nombre_compte = $request->getParam("integrateur_nombre");
						
						if($nombre_compte >= 10) {
						    include("Transfert.php");
		                    if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                        $chemin = "integrateurs";
		                        $file = $_FILES['integrateur_diplome']['name'];
		                        $file1='integrateur_diplome';
		                        $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                    } else { $integrateur_diplome = ""; }

						    if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                        $chemin = "integrateurs";
		                        $file = $_FILES['integrateur_document']['name'];
		                        $file1='integrateur_document';
		                        $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                    } else {$integrateur_document = "";}

						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $a  = new Application_Model_EuIntegrateur();
                            $ma = new Application_Model_EuIntegrateurMapper();

                            $compteur = $ma->findConuter() + 1;
						    $a->setIntegrateur_id($compteur);
                            $a->setIntegrateur_type($request->getParam("integrateur_type"));
                            $a->setIntegrateur_souscription($compteur_souscription);

                            if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                                $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                                $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                            }

                            if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                }
                                if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                }
								$a->setIntegrateur_education($request->getParam("integrateur_education"));
                                $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                $a->setIntegrateur_document($integrateur_document);
                                $a->setIntegrateur_diplome($integrateur_diplome);
                            }

                            $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                            $a->setIntegrateur_membreasso(0);
                            $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			                $a->setPublier(1);
                            $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                            $a->setIntegrateurCanton($id_canton);
                            $a->setIntegrateurVille(null);
						    $a->setCode_membre($request->getParam("integrateur_membre"));
                            $ma->save($a);

                            $integrateur  = new Application_Model_EuIntegrateur();
                            $integrateurM = new Application_Model_EuIntegrateurMapper();
                            $integrateurM->find($compteur,$integrateur);
							
							$id_integrateur = $integrateur->integrateur_id;
						    $complement   = new Application_Model_EuComplementQuittance();
                            $m_complement = new Application_Model_EuComplementQuittanceMapper();							
							
							$cpte = $m_complement->findConuter() + 1;
						    $complement->setId_complement_quittance($cpte);
						    $complement->setIntegrateur_id($id_integrateur);
						    $complement->setSouscription_id($compteur_souscription);
						    $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						    $m_complement->save($complement);
							
							$code_agence = '';
							
							$date_id = Zend_Date::now();
                            $association = new Application_Model_EuAssociation();
                            $association_mapper = new Application_Model_EuAssociationMapper();

						    $login = "";
						    $password = "";
							
							if($finddepot == NULL) {
							    $compteur_association = $association_mapper->findConuter() + 1;
                                $association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
								if(substr($membre_integrateur,19,1) == 'P')  {
                                    $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								} else {
                                    $association->setAssociation_nom($souscription->souscription_raison);
                                }

                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);
							    
								$date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();

							    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								    $liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                    $login = "";
                                    while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)];
                                    }
								    $password = $login.$login;
								} else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
								}
								
								$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								if(substr($membre_integrateur,19,1) == 'P')  {
                                    $membreasso->setMembreasso_nom($souscription->souscription_nom);
									$membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								} else {
                                    $membreasso->setMembreasso_nom($souscription->souscription_raison);
									$membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                }

                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                $membreasso_mapper->save($membreasso);
								
							}
							
							// insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();

						    $membretierscode = new Application_Model_EuMembretierscode();
                            $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

						    $fcaps = Util_Utils::getParametre('CAPS','valeur');

						    //$membre_pbf = '0000000000000000001M';
	                                            //$code_compte_pbf = "NN-TR-".$membre_pbf;
			                            //$ret = $compte_map->find($code_compte_pbf,$compte);

						    $souscriptionM->find($compteur_souscription,$eusouscription);
							
							$mobile = $eusouscription->souscription_mobile;
						    $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
						    $nbre_compte = $eusouscription->souscription_nombre;
							$montant = $nbre_compte * $fcaps;
							$date = new Zend_Date();
							
							
							$countdvente = $m_dvente->findConuter() + 1;
				            $dvente->setId_depot($countdvente)
					               ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				            $dvente->setCode_membre($_POST['integrateur_membre']);
			                $dvente->setCode_produit('CAPS');
				            $dvente->setMont_depot($montant);
				            $dvente->setMont_vendu(0);
				            $dvente->setSolde_depot($montant);
				            $dvente->setId_utilisateur(null);
				            $dvente->setType_depot('AvecListe');
				            $dvente->setSouscription_id($compteur_souscription);
				            $m_dvente->save($dvente);


						    for($i = 0; $i < $nbre_compte; $i++) {
							    $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
							    $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
							    $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                $membretierscode->setMembretierscode_membretiers(0);
                                $membretierscode->setMembretierscode_code($membretierscode_code);
                                $membretierscode->setMembretierscode_souscription($compteur_souscription);
                                $membretierscode->setPublier(0);
                                $membretierscode->setCode_membre(NULL);
							    $membretierscode->setAllocation_cmfh_id(NULL);
                                $membretierscode_mapper->save($membretierscode);
						    }
							
							
							// script de creation de TE de prestation
						    $eucompte = new Application_Model_EuCompte();
							$m_compte = new Application_Model_EuCompteMapper();
									
                            $te   = new Application_Model_EuTegc();
							$m_te = new Application_Model_EuTegcMapper();
							
							$prk = new Application_Model_EuPrk();
                            $m_prk = new Application_Model_EuPrkMapper();
							
							$code_te = "";
							$nom_tegc = "";
									
						    $code_membre = $_POST['integrateur_membre'];
							if(substr($code_membre,19,1)=='P') {
							    $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
							} else {
							    $nom_tegc = $membremoral->raison_sociale;
							}
							
							$num_compte = 'NB-TPAGCP-'.$code_membre;
				            $res = $m_compte->find($num_compte,$eucompte);
							
							if(!$res) {
							    $eucompte->setCode_cat('TPAGCP')
                                         ->setCode_compte($num_compte)
										 ->setCode_type_compte('NB')
                                         ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte('TPAGCP')
                                         ->setSolde(0);
												 
								if(substr($code_membre,19,1)=='P') {		 
                                    $eucompte->setCode_membre($code_membre)
                                             ->setCode_membre_morale(NULL);
								} else  {
                                    $eucompte->setCode_membre(NULL)
                                             ->setCode_membre_morale($code_membre);
                                }										         
                                $m_compte->save($eucompte);
										
								$code_te = $te_mapper->getLastTegcByMembre($code_membre);
								if ($code_te == NULL) {
			                        $code_te = 'TEGCP'.$code_membre. '00001';         
			                    } else {
			                        $num_ordre = substr($code_te, -5);
                                    $num_ordre++;
                                    $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                    }
										
								$te->setCode_tegc($code_te);
			                    $te->setId_filiere(NULL);
			                    $te->setMdv(12);
			                    $te->setTranche_payement($tranche);
			                    $te->setCode_membre($code_membre);
			                    $te->setMontant(0);
			                    $te->setMontant_utilise(0);
			                    $te->setSolde_tegc(0);
			                    $te->setId_utilisateur(NULL);
			                    $te->setNom_tegc($nom_tegc);
			                    $te->setNom_produit("Prestation");
			                    $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					            $te->setType_tegc("PRESTATAIRE");
								$te->setRecurrent_illimite(0);
								$te->setRecurrent_limite(0);
							    $te->setNonrecurrent(1);
								$te->setPeriode1(0);
							    $te->setPeriode2(0);
								$te->setPeriode3(0);
								$te->setFormel(0);
								$te->setRegime_tva(0);
								$te->setSpecial(0);
								$te->setOrdinaire(1);
								$te->setSubvention(0);
										
								$te->setCode_zone($code_zone);
				                $te->setId_pays($id_pays);
				                $te->setId_region($id_region);
				                $te->setId_prefecture($id_prefecture);
				                $te->setId_canton($id_canton);

                                $m_te->save($te);
                                
								$id_prk = $m_prk->findConuter() + 1;
					            $prk->setId_prk($id_prk);
					            $prk->setCode_tegc($code_te);
					            $prk->setValeur(null);
					            $m_prk->save($prk);

						    }
							
							$num_comptets = 'NB-TSGCP-'.$code_membre;
				            $rests = $m_compte->find($num_comptets,$eucompte);
									
							if(!$rests) {
							    $eucompte->setCode_cat('TSGCP')
                                         ->setCode_compte($num_comptets)
									     ->setCode_type_compte('NB')
                                         ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                         ->setDesactiver(0)
                                         ->setLib_compte('TSGCP')
                                         ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                $m_compte->save($eucompte);		
                            }
						    //fin script de creation TE
							
							$db->commit();
						    if($finddepot == NULL) {
								$sessionmcnp->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
							} else  {
								$sessionmcnp->error = "Opération bien effectuée ...";
						    }
							$this->_redirect('/index/validerpostulat');
							
						} else {
						    $db->rollback();
						    $this->view->id = $param;
					        $this->view->postulat = $postulat;
                            $this->view->integrateurs = $integrateurs;
						    $sessionmcnp->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 10 ...";
						    return;
						}
					
					}

                } catch (Exception $exc) {
					$db->rollback();
					$this->view->id = $param;
					$this->view->postulat = $postulat;
                    $this->view->integrateurs = $integrateurs;
				    $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    return;
			    }				
					
					
					
		    }
	
	
	    }    else {
		    $id = $this->_request->getParam('id');
                    $postulat   = new Application_Model_EuPostulat();			
		    $m_postulat = new Application_Model_EuPostulatMapper();
		    $m_postulat->find($id,$postulat);
	            $this->view->postulat = $postulat;
   
                    $m_integrateur = new Application_Model_EuTypeIntegrateurMapper();
		    $integrateurs = $m_integrateur->fetchAll();
			
		    $this->view->integrateurs = $integrateurs;
	    }
		
		
	}
	
	
	public  function souscrireoffreurAction()  {
		
		/* page public/souscrireoffreur */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $filieres = $m_filiere->fetchAll();
	    $this->view->filieres = $filieres;
		
	    $param = (int)$this->_request->getParam('id');
	    $this->view->id = $param;
        $postulat   = new Application_Model_EuPostulat();			
        $m_postulat = new Application_Model_EuPostulatMapper();
	    $m_postulat->find($param,$postulat);
        $offreurs = "";
	                        
        $m_offreur = new Application_Model_EuTypeOffreurProjetMapper();
	    $offreurs = $m_offreur->fetchAll();
           
	    $request = $this->getRequest();
		if($request->isPost())  {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
			try {
		        if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			        && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			        && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""
			        && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			        && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!=""
			        && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
				
				        $id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;

						$membremorale = new Application_Model_EuMembreMorale();
	                    $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                        $compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();

			            $contrat = new Application_Model_EuContrat();
                        $map_contrat = new Application_Model_EuContratMapper();

						$m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

						$finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));

						$date_id = Zend_Date::now();

						$bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						
						$findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					    if($findmembre == false) {
					        $db->rollback();
	                        $this->view->id = $param;
					        $this->view->postulat = $postulat;
						    $this->view->offreurs = $offreurs;
					        $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					        return;
					    }
						
						$offreur_membre = $request->getParam("offreur_projet_membre");
						$offreur_code_membre = '';

						$souscription_nombre  = $request->getParam("souscription_nombre");
						$montant_souscription = $souscription_nombre * 2187.5;

                        $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
						if(count($bon_neutre) == 0) {
						  $db->rollback();
	                      $this->view->id = $param;
						  $this->view->postulat = $postulat;
						  $this->view->offreurs = $offreurs;
						  $this->view->code_membre = $request->getParam("offreur_projet_membre");
					      $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					      return;
						}
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
						    $bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);

						    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;

					        $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();

						    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);

						    if(($lignesdetbon == NULL) && ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) && ($cumulbon < $montant_souscription)) {
						      $db->rollback();
	                           $this->view->id = $param;
							   $this->view->postulat = $postulat;
						       $this->view->offreurs = $offreurs;
						       $this->view->code_membre = $request->getParam("offreur_projet_membre");
                               $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                               return;
						    }
							
							if(($offreur_code_membre != NULL)  && ($offreur_membre != $offreur_code_membre)) {
						      $db->rollback();
	                          $this->view->id = $param;
							  $this->view->postulat = $postulat;
						      $this->view->offreurs = $offreurs;
						      $this->view->code_membre = $request->getParam("offreur_projet_membre");
                              $sessionmcnp->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                              return;
						    }
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $i = 0;
					        $reste = $montant_souscription;
					        $nbre_lignesdetbon = count($lignesdetbon);
                            while ($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							       $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								   if($lignedetbon->getBon_neutre_appro_id() > 0) {
									  $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
                                      foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id, $bnad);
                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                       }
                                     }
								   }
								   //Mise à jour  des lignes d'enrégistrement
								   $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                       ->setBon_neutre_detail_montant_solde(0);
                                   $bon_neutre_detailM->update($lignedetbon);


						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   		 $bon_neutre_utilise->setUsertable("utilisateur");
              		   		 $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 

                                 } else {
								    if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
									   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $reste;
									   foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);
                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
									   }
									}

                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);


						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   		 $bon_neutre_utilise->setUsertable("utilisateur");
              		   		 $bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
						            $reste = 0;
                                }
                                $i++;
                            }
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
						    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						    $bon_neutre2->setBon_neutre_code_membre($offreur_membre);
						    $bon_neutre2M->update($bon_neutre2);

						    /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();

						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							
							$eusouscription = new Application_Model_DbTable_EuSouscription();
						    $select = $eusouscription->select();

                            $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						    $select->order(array("souscription_id ASC"));
	                        $select->limit(1);
	                        $rowseusouscription = $eusouscription->fetchRow($select);
		                    if(count($rowseusouscription) > 0) {
			                    $souscription_ok = 1;
			                    $souscription_first = $rowseusouscription->souscription_id;
			                } else {
			                    $souscription_ok = 0;
			                }

                            $eusouscription = new Application_Model_DbTable_EuSouscription();
	                        $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));

                            if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						        $db->rollback();
					            $this->view->id = $param;
							    $this->view->postulat = $postulat;
						        $this->view->offreurs = $offreurs;
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
								$sessionmcnp->error = "Login déjà existant ...";
							    return;    
	                        }  else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL) {
						        $db->rollback();
					            $this->view->id = $param;
							    $this->view->postulat = $postulat;
						        $this->view->offreurs = $offreurs;
						        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                $sessionmcnp->error = "Mot de passe incorret ...";
							    return;
	                        }
							
							$date_id = Zend_Date::now();
						    $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
						    $souscription->setSouscription_id($compteur_souscription);

						    $souscription->setSouscription_raison($membremorale->raison_sociale);
                            $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                            $souscription->setCode_statut($membremorale->code_statut);
						    $souscription->setSouscription_mobile($membremorale->portable_membre);

						    $souscription->setSouscription_membreasso(1);

						    $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);

                            $souscription->setSouscription_banque(null);

						    $souscription->setSouscription_montant($montant_souscription);
                            $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                            $souscription->setSouscription_programme("CMFH");
                            $souscription->setSouscription_type_candidat($postulat->id_type_candidat);

						    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $souscription->setSouscription_vignette(null);

						    $souscription->setCode_activite(null);
                            $souscription->setId_metier(null);
                            $souscription->setId_competence(null);
						 
                            $souscription->setSouscription_ville($membremorale->ville_membre);

						    $souscription->setSouscription_quartier($membremorale->quartier_membre);

					        if($finddepot == NULL) {
                               $souscription->setSouscription_login($request->getParam("souscription_login"));
                               $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						    } else {
                               $souscription->setSouscription_login(null);
                               $souscription->setSouscription_passe(null);
                            }

						    if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
				            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
					        }

				            $souscription->setSouscription_autonome(0);
			                $souscription->setPublier(0);
					        $souscription->setErreur(0);
					        $souscription->setId_canton($postulat->id_canton);
                            $souscription->setId_postulat($postulat->id_postulat);
                            $souscription_mapper->save($souscription);
							
							
						//Mise à jour postulat
                        $code_zone = $postulat->code_zone;
                        $id_pays = $postulat->id_pays;
                        $id_region = $postulat->id_region;
                        $id_prefecture = $postulat->id_prefecture;
						$id_canton = $postulat->id_canton;
						$postulat->setTraiter(1);
						$m_postulat->update($postulat);
						
					    ///////////////////////////////////////////// validation acnev //////////////////////////////////
				        $souscription = new Application_Model_EuSouscription();
				        $souscriptionM = new Application_Model_EuSouscriptionMapper();
				        $souscriptionM->find($compteur_souscription, $souscription);

					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);


						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);

						$souscription->setPublier(2);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);

						///////////////////////////////////////////// validation technopole //////////////////////////////////

						    $souscription = new Application_Model_EuSouscription();
						    $souscriptionM = new Application_Model_EuSouscriptionMapper();
						    $souscriptionM->find($compteur_souscription, $souscription);

						    $souscription->setPublier(3);
						    $souscriptionM->update($souscription);

						    $validation_quittance = new Application_Model_EuValidationQuittance();
						    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

						    $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $validation_quittance->setPublier(1);
						    $validation_quittance_mapper->save($validation_quittance);
							 
							$nombre_compte = $request->getParam("souscription_nombre");
							if($nombre_compte >= 100)   {
							    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                $a = new Application_Model_EuOffreurProjet();
                                $ma = new Application_Model_EuOffreurProjetMapper();

					            $compteur = $ma->findConuter() + 1;
					            $id_souscription = $compteur_souscription;

                                $a->setOffreur_projet_id($compteur);
                                $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                                $a->setOffreur_projet_souscription($id_souscription);
                                $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					            $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                                $a->setOffreur_projet_adresse($request->getParam("offreur_projet_adresse"));
                                $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
                                $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
					            if($_POST['offreur_projet_type'] >= 4) {
	                               $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                                }

					            $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                                $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                                $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                                $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                                $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                                $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                                $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                                $a->setOffreur_projet_membreasso(0);
                                $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                                $a->setOffreurProjetCanton($id_canton);
                                $a->setOffreurProjetVille(null);
			                    $a->setPublier(1);
                                $ma->save($a);
							  
							    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					            $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                                $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();

					            $cpte = $m_detailoffreur->findConuter() + 1;
					            $detailoffreur->setId_detail_offreur_projet($cpte);
					            $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					            $detailoffreur->setSouscription_id($id_souscription);
					            $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					            $m_detailoffreur->save($detailoffreur);
								
								
								/////////////////////////////////////////////////////////////////////////////////////////
					            $code_agence = "";
							  
							    // Création du compte utilisateur intégrateur
                                $souscription = new Application_Model_EuSouscription();
                                $m_souscription = new Application_Model_EuSouscriptionMapper();
		                        $m_souscription->find($id_souscription,$souscription);

					            $date_id = Zend_Date::now();
                                $association = new Application_Model_EuAssociation();
                                $association_mapper = new Application_Model_EuAssociationMapper();

                                $login = "";
						        $password = "";
								
								if($finddepot == NULL) {
								    $compteur_association = $association_mapper->findConuter() + 1;
                                    $association->setAssociation_id($compteur_association);
                                    $association->setAssociation_mobile($souscription->souscription_mobile);
                                    $association->setAssociation_nom($souscription->souscription_raison);
                                    $association->setAssociation_numero($compteur_association."INT");
                                    $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                    $association->setAssociation_email($souscription->souscription_email);
                                    $association->setAssociation_recepisse(NULL);
                                    $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                    $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $association->setId_filiere(NULL);
                                    $association->setCode_type_acteur(NULL);
                                    $association->setCode_statut(NULL);
                                    $association->setCode_agence($code_agence);
                                    $association->setPublier(1);
                                    $association_mapper->save($association);

							        $date_id = Zend_Date::now();

                                    $membreasso = new Application_Model_EuMembreasso();
                                    $membreasso_mapper = new Application_Model_EuMembreassoMapper();

								    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							            $liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                        $login = "";
                                        while(strlen($login) != 8) {
                                            $login .= $liste[rand(0,61)];
                                        }
								        $password = $login.$login;
						            } else {
								        $login = $souscription->souscription_login;
								        $password = $souscription->souscription_passe;
						            }
									
									$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    $membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                    $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                    $membreasso->setMembreasso_association($compteur_association);
                                    $membreasso->setMembreasso_email($souscription->souscription_email);
                                    $membreasso->setMembreasso_login($login);
                                    $membreasso->setMembreasso_passe($password);
                                    $membreasso->setMembreasso_type(1);
                                    $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                    $membreasso->setPublier(1);
								    $membreasso->setSouscription_id($souscription->souscription_id);
							        $membreasso->setIntegrateur_id(null);
                                    $membreasso_mapper->save($membreasso);
									
								}
								
								$eusouscription = new Application_Model_EuSouscription();
		                        $souscriptionM = new Application_Model_EuSouscriptionMapper();

							    $date = new Zend_Date();
								$compte      = new Application_Model_EuCompte();
		                        $map_compte  = new Application_Model_EuCompteMapper();
                                
			                    $sms_money   = new Application_Model_EuSmsmoney();
                                $money_map   = new Application_Model_EuSmsmoneyMapper();

			                    $det_sms   = new Application_Model_EuDetailSmsmoney();
			                    $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

			                    $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                    $det_vtesms  = new Application_Model_EuDetailVentesms();

							    // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();

							    $membretierscode = new Application_Model_EuMembretierscode();
                                $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

							    $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                        //$membre_pbf = '0000000000000000001M';
	                            //$code_compte_pbf = "NN-TR-".$membre_pbf;
			                    //$ret = $compte_map->find($code_compte_pbf,$compte);

							    $souscriptionM->find($id_souscription,$eusouscription);
						        $mobile = $eusouscription->souscription_mobile;
							    $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
							    $nbre_compte = $eusouscription->souscription_nombre;
							    $montant = $nbre_compte * $fcaps;
									   
							    $countdvente = $m_dvente->findConuter() + 1;
				                $dvente->setId_depot($countdvente)
					                   ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));
				                $dvente->setCode_membre($request->getParam("offreur_projet_membre"));
			                    $dvente->setCode_produit('CAPS');
				                $dvente->setMont_depot($montant);
				                $dvente->setMont_vendu(0);
				                $dvente->setSolde_depot($montant);
				                $dvente->setId_utilisateur(null);
				                $dvente->setType_depot('AvecListe');
				                $dvente->setSouscription_id($id_souscription);
				                $m_dvente->save($dvente);

								for($i = 0; $i < $nbre_compte; $i++) {
								    $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
								    $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
									$membretierscode->setMembretierscode_id($compteur_membretierscode);
                                    $membretierscode->setMembretierscode_membretiers(0);
                                    $membretierscode->setMembretierscode_code($membretierscode_code);
                                    $membretierscode->setMembretierscode_souscription($id_souscription);
                                    $membretierscode->setPublier(0);
                                    $membretierscode->setCode_membre(NULL);
								    $membretierscode->setAllocation_cmfh_id(NULL);
                                    $membretierscode_mapper->save($membretierscode);
							    }
								
								//script de creation de TE des vendeurs ou offreurs de projet
					            $prk = new Application_Model_EuPrk();
                                $m_prk = new Application_Model_EuPrkMapper();
							   	   
                                $te   = new Application_Model_EuTegc();
					            $m_te = new Application_Model_EuTegcMapper();
					            $code_te = "";
							   
					            $nom_tegc = $membremorale->raison_sociale;
						        $code = $request->getParam("offreur_projet_membre");
                                $id_filiere = $request->getParam("offreur_projet_filiere");								
						        $eutegc = new Application_Model_DbTable_EuTegc();
                                $select = $eutegc->select();
					            $select->where("code_membre like ? ", $code);
                                $rowseutegc = $eutegc->fetchAll($select);
								
								if(count($rowseutegc) <= 0)  {
							        $code_te = $m_te->getLastTegcByMembre($code);
						            if($code_te == NULL) {
			                            $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                        } else {
			                            $num_ordre = substr($code_te, -5);
                                        $num_ordre++;
                                        $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                        }
								  
						            $te->setCode_tegc($code_te);
			                        $te->setId_filiere($id_filiere);
			                        $te->setMdv(12);
			                        $te->setTranche_payement(1);
			                        $te->setCode_membre($code);
                                    $te->setCode_membre_physique(null);								  
			                        $te->setMontant(0);
			                        $te->setMontant_utilise(0);
			                        $te->setSolde_tegc(0);
			                        $te->setId_utilisateur(NULL);
			                        $te->setNom_tegc($nom_tegc);
			                        $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                        $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					                $te->setType_tegc("DISTRIBUTEUR");
						            $te->setRecurrent_illimite(0);
						            $te->setRecurrent_limite(0);
						            $te->setNonrecurrent(1);
						            $te->setPeriode1(0);
						            $te->setPeriode2(0);
							        $te->setPeriode3(0);
							        $te->setFormel(0);
						            $te->setRegime_tva(0);
						            $te->setSpecial(0);
						            $te->setOrdinaire(0);
							        $te->setSubvention(0);
										
							        $te->setCode_zone($code_zone);
				                    $te->setId_pays($id_pays);
				                    $te->setId_region($id_region);
				                    $te->setId_prefecture($id_prefecture);
				                    $te->setId_canton($id_canton);

                                    $m_te->save($te);

                                    $id_prk = $m_prk->findConuter() + 1;
					                $prk->setId_prk($id_prk);
					                $prk->setCode_tegc($code_te);
					                $prk->setValeur(null);
					                $m_prk->save($prk);
								   
					            }
								
								$code_compte = 'NB-TPAGCP-'.$code;
				                $res = $map_compte->find($code_compte,$compte);
				
				                if(!$res) {
                                    $compte->setCode_cat('TPAGCP')
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre(NULL)
                                           ->setCode_membre_morale($code)
                                           ->setCode_type_compte('NB')
                                           ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte('TPAGCP')
                                           ->setSolde(0);
                                    $map_compte->save($compte); 
                                }
				
				                $code_comptets = 'NB-TSGCP-'.$code;
				                $rests = $map_compte->find($code_comptets,$compte);
				
				                if(!$rests) {
                                    $compte->setCode_cat('TSGCP')
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre(NULL)
                                           ->setCode_membre_morale($code)
                                           ->setCode_type_compte('NB')
                                           ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte('TSGCP')
                                           ->setSolde(0);
                                    $map_compte->save($compte); 
                                }
								
								// Fin script de creation des TE vendeurs ou offreurs de projet
							
						    }  else {
							    $db->rollback();
	                            $this->view->param = $param;
								$this->view->offreurs = $offreurs;
							    $this->view->code_membre = $request->getParam("offreur_projet_membre");
							    $sessionmcnp->error = 'Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...';
						        return;
						    }
							
							
							if($finddepot == NULL) {
							   $db->commit();
                               $sessionmcnp->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace intégrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
		                    } else {
							   $db->commit();
						       $sessionmcnp->error = "Opération bien effectuée ...";
						    }
						    $this->_redirect('/index/validerpostulat');
						
						}
				
				}
		
		    }  catch (Exception $exc) {
				$db->rollback();
                $this->view->postulat = $postulat;
				$this->view->offreurs = $offreurs;				
                $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                return;
            }
		
		}
		
	}
	
	
	
	public function nbreAction() {
        $id_type_integrateur = $_GET["id_type_integrateur"];
        if ($id_type_integrateur != '') {
            $tintegrateur = new Application_Model_DbTable_EuTypeIntegrateur();
            $result = $tintegrateur->find($id_type_integrateur);
            $data = array();
            if(count($result) > 0) {
	       $data[0] = $result->current()->id_type_integrateur;
               $data[1] = $result->current()->montant_param;
            } else {
               $data = "";
            }
        }
        $this->view->data = $data;
    }
	
	
	
	
	public function offreurAction() {
        $id_type_offreur = $_GET["id_type_offreur"];
        if ($id_type_offreur != '') {
            $offre = new Application_Model_DbTable_EuTypeOffreurProjet();
            $result = $offre->find($id_type_offreur);
            $data = array();
            if(count($result) > 0) {
	           $data[0] = $result->current()->id_type_offreur_projet;
               $data[1] = $result->current()->montant_param;
            } else {
               $data = "";
            }
        }
        $this->view->data = $data;
    }
	
	
	
	public  function listpostulantvalidesAction()  {
	    /* page public/ listpostulantvalides */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

            $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
            $t_candidat = new Application_Model_DbTable_EuTypeCandidat();
		 
	    $zones = $t_zone->fetchAll();
            $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
            $candidats  = $t_candidat->fetchAll();

            $this->view->zones = $zones;
            $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
            $this->view->candidats = $candidats;
          
            $request = $this->getRequest();
            if($request->isPost())  {
            $type_candidat = $request->getParam("id_type_candidat");
            $code_zone = $request->getParam("code_zone");
            $id_pays = $request->getParam("id_pays");
            $id_region = $request->getParam("id_region");
            $id_prefecture = $request->getParam("id_prefecture");
            $id_canton = $request->getParam("id_canton");
			
	    $t_postulat = new Application_Model_DbTable_EuPostulat();
	    if(!empty($type_candidat) && empty($code_zone) && empty($id_pays) && empty($id_region) && empty($id_prefecture) && empty($id_canton))  {
		$select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		$select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		$select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		$select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
                $select->where('eu_postulat.traiter = ?', 1);
                
		$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		$this->view->id_type_candidat = $type_candidat;
				
            } elseif(!empty($type_candidat) && !empty($id_canton)) {
		$select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		$select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		$select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		$select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		$select->where('c.id_canton = ?', trim($id_canton));
                $select->where('eu_postulat.traiter = ?', 1);
				
		$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		$this->view->id_type_candidat = $type_candidat;
				
	        } elseif(!empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
                        $select->where('eu_postulat.traiter = ?', 1);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
						
	        }  elseif(!empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('r.id_region = ?', trim($id_region));
                        $select->where('eu_postulat.traiter = ?', 1);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;	
				
	        } else if (!empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('p.id_pays = ?', trim($id_pays));
                        $select->where('eu_postulat.traiter = ?', 1);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
				
	        } else if (!empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('z.code_zone = ?', trim($code_zone));
                        $select->where('eu_postulat.traiter = ?', 1);
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
	        }  else if (empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('c.id_canton = ?', trim($id_canton));
                $select->where('eu_postulat.traiter = ?', 1);

		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_canton = $id_canton;
				
	        } else if (empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
                        $select->where('eu_postulat.traiter = ?', 1);

		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_prefecture = $id_prefecture;
				
	        } else if (empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        $select->where('r.id_region = ?', trim($id_region));
                        $select->where('eu_postulat.traiter = ?', 1);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_region = $id_region;
		
	        } else if (empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                        $select->where('eu_postulat.traiter = ?', 1);
		        $select->where('p.id_pays = ?', trim($id_pays));
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_pays = $id_pays;
				
	        } else if (empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                        $select->where('eu_postulat.traiter = ?', 1);
		        $select->where('z.code_zone = ?', trim($code_zone));
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->code_zone = $code_zone;
			
	        }

            else {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.traiter = ?', 1);
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
	        }
		
	}
		
    $this->view->tabletri = 1;			
		
    }
	
	
	
	public  function listpostulantsAction()  {
		/* page public/listpostulant */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

        $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
        $t_candidat = new Application_Model_DbTable_EuTypeCandidat();
		 
	    $zones = $t_zone->fetchAll();
        $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
        $candidats  = $t_candidat->fetchAll();

        $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
        $this->view->candidats = $candidats;
          
        $request = $this->getRequest();
		if($request->isPost())  {
		    $type_candidat = $request->getParam("id_type_candidat");
            $code_zone = $request->getParam("code_zone");
            $id_pays = $request->getParam("id_pays");
            $id_region = $request->getParam("id_region");
            $id_prefecture = $request->getParam("id_prefecture");
            $id_canton = $request->getParam("id_canton");
			
			$t_postulat = new Application_Model_DbTable_EuPostulat();
			if(!empty($type_candidat) && empty($code_zone) && empty($id_pays) && empty($id_region) && empty($id_prefecture) && empty($id_canton))  {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        
				$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->id_type_candidat = $type_candidat;
		
		    }  elseif(!empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('c.id_canton = ?', trim($id_canton));
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				$this->view->id_canton = $id_canton;
				
	        }   elseif(!empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				$this->view->id_canton = $id_canton;
				$this->view->id_prefecture = $id_prefecture;
						
	        }   elseif(!empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('r.id_region = ?', trim($id_region));
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
                $this->view->id_canton = $id_canton;
				$this->view->id_prefecture = $id_prefecture;
                $this->view->id_region = $id_region;				
				
	        }  else if (!empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('p.id_pays = ?', trim($id_pays));
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
				$this->view->id_canton = $id_canton;
				$this->view->id_prefecture = $id_prefecture;
                $this->view->id_region = $id_region;
				$this->view->id_pays = $id_pays;
				
				
	        }   else if (!empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('eu_postulat.id_type_candidat = ?', trim($type_candidat));
		        $select->where('z.code_zone = ?', trim($code_zone));
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_type_candidat = $type_candidat;
				
				$this->view->id_canton = $id_canton;
				$this->view->id_prefecture = $id_prefecture;
                $this->view->id_region = $id_region;
				$this->view->id_pays = $id_pays;
				$this->view->code_zone = $code_zone;
				
	        }   else if (empty($type_candidat) && !empty($id_canton)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                $select->where('c.id_canton = ?', trim($id_canton));
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
		        $this->view->id_canton = $id_canton;
				
	        }   else if (empty($type_candidat) && !empty($id_prefecture)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        $select->where('pr.id_prefecture = ?', trim($id_prefecture));
				
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->id_canton = $id_canton;
		        $this->view->id_prefecture = $id_prefecture;
				
	        }   else if (empty($type_candidat) && !empty($id_region)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        $select->where('r.id_region = ?', trim($id_region));
		        
				$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->id_canton = $id_canton;
		        $this->view->id_prefecture = $id_prefecture;
		        $this->view->id_region = $id_region;
		
	        }   else if (empty($type_candidat) && !empty($id_pays)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('p.id_pays = ?', trim($id_pays));
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
				$this->view->id_canton = $id_canton;
		        $this->view->id_prefecture = $id_prefecture;
		        $this->view->id_region = $id_region;
		        $this->view->id_pays = $id_pays;
				
	        }   else if (empty($type_candidat) && !empty($code_zone)) {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
                
		        $select->where('z.code_zone = ?', trim($code_zone));
		        $entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
				
				$this->view->id_canton = $id_canton;
		        $this->view->id_prefecture = $id_prefecture;
		        $this->view->id_region = $id_region;
		        $this->view->id_pays = $id_pays;
		        $this->view->code_zone = $code_zone;
			
	        }  else {
		        $select = $t_postulat->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join(array('a' => 'eu_type_candidat'), 'eu_postulat.id_type_candidat = a.id_type_candidat');
                $select->join(array('z' => 'eu_zone'), 'eu_postulat.code_zone = z.code_zone');
                $select->join(array('p' => 'eu_pays'), 'eu_postulat.id_pays = p.id_pays');
		        $select->join(array('r' => 'eu_region'), 'eu_postulat.id_region = r.id_region');
		        $select->join(array('pr' => 'eu_prefecture'), 'eu_postulat.id_prefecture = pr.id_prefecture');
		        $select->join(array('c' => 'eu_canton'), 'eu_postulat.id_canton = c.id_canton');
		        
				
				$entries = $t_postulat->fetchAll($select);
                $this->view->entries = $entries;
	        }
		}
		$this->view->tabletri = 1;
		
	}
	
	
	
	public function addactivationppAction()  {
	    /* page public/addpostulat - Ajout d'un postulat */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
	    $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
            $t_canton = new Application_Model_DbTable_EuCanton(); 
		 
	    $zones = $t_zone->fetchAll();
	    $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
		
	    $this->view->zones = $zones;
            $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
		
	    $request = $this->getRequest();
            if($request->isPost()) {
	        if(isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
		    && isset($_POST['code_postulat']) && $_POST['code_postulat']!=""
            && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
            && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
            && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
            && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
            && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
            && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
            && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!="")    {
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$codesecret = Util_Utils::genererCodeSMS(8);
					
					$bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					
					$postulat_mapper = new Application_Model_EuPostulatMapper();
                    $postulat = $postulat_mapper->fetchAllByCode($request->getParam("code_postulat"));
					
			        /////////////////controle Code BAn ///////////////////////////////////////////////////
					if(count($bon_neutre) == 0) {
						$db->rollback();
                        $sessionmcnp->error = "Code BAn incorrect ...";
						$this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					/////////////////controle Code Postulat ///////////////////////////////////////////////////
					if(count($postulat) == 0) {
						$db->rollback();
                        $sessionmcnp->error = "Code Postulat incorrect ...";
						$this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					if((($postulat->code_membre != "") || ($postulat->code_membre != NULL)) && (strlen($postulat->code_membre) == 20)) {
					    $db->rollback();
                        $sessionmcnp->error = "Ce postulant dispose dejà d'un code membre";						
						$this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
					}
					
					///////////////// controle nom prenom //////////////////////////////////
                    $eupreinscription = new Application_Model_DbTable_EuMembre();
                    $select = $eupreinscription->select();
                    $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));

                    $tabprenom = explode("", $bon_neutre->bon_neutre_prenom);
                    foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                    }

                    $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                    $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                    $select->limit(1);
                    $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
                        $sessionmcnp->error = "Vous êtes déjà membre ...";
                        $db->rollback();
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					///////////////// controle email ////////////////////////////////////////////////////////
                    if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))) {
                        $sessionmcnp->error = "E-mail non valable ...";
                        $db->rollback();
                        $this->view->sexe = $request->getParam("sexe_membre");
                        $this->view->sitfam = $request->getParam("sitfam_membre");
                        $this->view->datnais = $request->getParam("date_nais_membre");
                        $this->view->nation = $request->getParam("nationalite_membre");
                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                        $this->view->formation = $request->getParam("formation");
                        $this->view->profession = $request->getParam("profession_membre");
                        $this->view->religion = $request->getParam("religion_membre");
                        $this->view->pere = $request->getParam("pere_membre");
                        $this->view->mere = $request->getParam("mere_membre");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        return;
                    }
					
					
					/////////////////controle nom prenom
                    $eusouscription = new Application_Model_DbTable_EuSouscription();
                    $select = $eusouscription->select();
                    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                    $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                    $select->order(array("souscription_id ASC"));
                    $select->limit(1);
                    $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                       $souscription_ok = 1;
                       $souscription_first = $rowseusouscription->souscription_id;
                    } else {
                       $souscription_ok = 0;
                    }
					
					
		    if(count($bon_neutre) > 0) {
			$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			$mont = 70000;
			$bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
			$montant_cm = 70000;
			if(($bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id)) >= 5000) {
			       $mont = 5000;
			       $montant_cm = 5000;
			       $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);	
			} else if($bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id) >= 70000) {
			       $mont = 70000;
			       $montant_cm = 70000;
			       $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
		        }
						
			/////////////////controle /////////////////////////////////////////////////
                        if($bon_neutre->bon_neutre_montant_solde < $montant_cm) {
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            return;
                        }
						
						/////////////////souscription KACM PP
                        $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                        $compteur_souscription = $souscription_mapper->findConuter() + 1;
                        $souscription->setSouscription_id($compteur_souscription);
                        $souscription->setSouscription_personne("PP");
                        $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                        $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                        $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                        $souscription->setSouscription_email($request->getParam("email_membre"));
                
				        $souscription->setSouscription_mobile(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0]);
                        $souscription->setSouscription_membreasso($sessionmembreasso->membreasso_id);
                        $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                        $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                        $souscription->setSouscription_montant($montant_cm);
                        $souscription->setSouscription_nombre(1);
                        $souscription->setSouscription_programme("KACM");
                        $souscription->setSouscription_type_candidat(0);
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
                        $souscription->setSouscription_ville($request->getParam("ville_membre"));
                        $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                        if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
                        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
                        }
                        $souscription->setSouscription_ordre(NULL);
                        $souscription->setSouscription_autonome(1);
                        $souscription->setPublier(0);
                        $souscription->setErreur(0);
                        $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        $bon_neutre2 = new Application_Model_EuBonNeutre();
                        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                        $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                        $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_cm);
                        $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_cm);
                        $bon_neutre2M->update($bon_neutre2);
						
						///////////////////////////////////////////////////////////////////////////////////////
                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //$mont = Util_Utils::getParamEsmc(14);
                        //$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                        //$bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                        
						
						if($bon_neutre_detail_somme < $mont) {
                            $sessionmembreasso->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            return;
                        } else {
                            $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                            foreach($bon_neutre_detail as $detail) {
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                                if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                                    $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);


                        $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                        $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                        $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                        $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                        $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                        $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                        $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   		 $bon_neutre_utilise2->setUsertable("utilisateur");
              		   		 $bon_neutre_utilise2->setUser_id(1);
                        $bon_neutre_utilise2M->save($bon_neutre_utilise2);
							
							
                                } else {
                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $mont;
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);


                        $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                        $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                        $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                        $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                        $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                        $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                        $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   		 $bon_neutre_utilise2->setUsertable("utilisateur");
              		   		 $bon_neutre_utilise2->setUser_id(1);
                        $bon_neutre_utilise2M->save($bon_neutre_utilise2);
							

                                    break;
                                }

                            }
                        }
						
						////////////////////////////////validation acnev
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(1);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);
						
						
						//////validation filere
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(2);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

                        //////validation technopole
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(3);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);
						
                        ////////////////////////////////////////////////////////////////////////////////////////////////////
						
						//operation de transfert
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        $date = new Zend_Date();
                        $compte_map = new Application_Model_EuCompteMapper();
                        $compte      = new Application_Model_EuCompte();
                        $sms_money   = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                        $mobile = $souscription->souscription_mobile;
                        //$nbre_compte = $souscription->souscription_nombre;
                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                        //$montant = $nbre_compte * $fcaps;
                        $membre_pbf = '0000000000000000001M';
                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                        $ret = $compte_map->find($code_compte_pbf,$compte);

                        $souscription2 = new Application_Model_EuSouscription();
                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                        $souscription2M->find($compteur_souscription, $souscription2);

                        $souscription2->setSouscription_autonome(1);
                        $souscription2->setSouscription_programme('KACM');
                        $souscription2M->update($souscription2);
						
						if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                           // Mise à jour du compte de transfert
                           $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                           $compte_map->update($compte);
                        } else {
                           $db->rollback();
                           $sessionmembreasso->error = 'Le compte de transfert est introuvable ou le solde du compte insuffisant';
                           $this->view->sexe = $request->getParam("sexe_membre");
                           $this->view->sitfam = $request->getParam("sitfam_membre");
                           $this->view->datnais = $request->getParam("date_nais_membre");
                           $this->view->nation = $request->getParam("nationalite_membre");
                           $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                           $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                           $this->view->formation = $request->getParam("formation");
                           $this->view->profession = $request->getParam("profession_membre");
                           $this->view->religion = $request->getParam("religion_membre");
                           $this->view->pere = $request->getParam("pere_membre");
                           $this->view->mere = $request->getParam("mere_membre");
                           $this->view->quartier_membre = $request->getParam("quartier_membre");
                           $this->view->ville_membre = $request->getParam("ville_membre");
                           $this->view->bp = $request->getParam("bp_membre");
                           $this->view->email = $request->getParam("email_membre");
                           return;
                        }
						
						$codefs   = '';
                        $codefl   = '';
                        $codefkps = '';

                        //Traitement des produits FS
                        //insertion dans la table eu_smsmoney
                        $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                        //Traitement des produits FL
                        //insertion dans la table eu_smsmoney
                        $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                        //Traitement des produits FCPS
                        $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
						
						if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
						    $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);
							
							$i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while($reste > 0 && $i < $nbre_lignesdetfs) {
                                $lignedetfs = $lignesdetfs[$i];
                                $id = $lignedetfs->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfs->getSolde_sms()) {
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                      ->setId_detail_smsmoney($id)
                                                      ->setCode_membre_dist($membre_pbf)
                                                      ->setCode_membre(null)
                                                      ->setType_tansfert('FS')
                                                      ->setCreditcode($codefs)
                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                      ->setMont_vente($lignedetfs->getSolde_sms())
                                                      ->setId_utilisateur(null)
                                                      ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfs->getSolde_sms();
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                               ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfs);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FS')
                                               ->setCreditcode($codefs)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfs);
                                    $reste = 0;
                                }
                                $i++;
                            }

                            $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfl = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfl)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fl)
                                      ->setSentTo($mobile)
                                      ->setMotif('FL')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefl)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $j = 0;
                            $reste = $mont_fl;
                            $nbre_lignesdetfl = count($lignesdetfl);
                            while($reste > 0 && $j < $nbre_lignesdetfl) {
                                $lignedetfl = $lignesdetfl[$j];
                                $id = $lignedetfl->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfl->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    $reste = $reste - $lignedetfl->getSolde_sms();
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfl->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfl);
									
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                    $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfl);
                                    $reste = 0;
                                }
                                $j++;
                            }

                            $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfkps = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfkps)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_kps)
                                      ->setSentTo($mobile)
                                      ->setMotif('FCPS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefkps)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                       ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $k = 0;
                            $reste = $mont_kps;
                            $nbre_lignesdetfkps = count($lignesdetfkps);
                            while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                $lignedetfkps = $lignesdetfkps[$k];
                                $id = $lignedetfkps->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfkps->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfkps->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfkps->getSolde_sms();
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                 ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfkps);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                    $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfkps);
                                    $reste = 0;
                                }
                                $k++;
                            }

                            // insertion dans la table eu_code_activation
                            $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                            $codeactivation = new Application_Model_EuCodeActivation();
                            $countcode = $m_codeactivation->findConuter() + 1;

                            $codeactivation->setId_code_activation($countcode)
                                           ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                            $codeactivation->setCode_membre(NULL);
                            $codeactivation->setCode_fs($codefs);
                            $codeactivation->setCode_fl($codefl);
                            $codeactivation->setCode_fkps($codefkps);
                            $codeactivation->setOrigine_code("ESMC");
                            $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                            $codeactivation->setSouscription_id($compteur_souscription);
                            $m_codeactivation->save($codeactivation);
							
							$smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                            $code_agence = $request->getParam("code_agence");
                            $code_zone = substr($request->getParam("code_agence"), 0, 3);
                            $id_pays = $request->getParam("id_pays");
                            $table = new Application_Model_DbTable_EuActeur();
                            $selection = $table->select();
                            $selection->where('code_membre like ?',$code_agence.'%');
                            $selection->where('type_acteur like ?','gac_surveillance');
                            $resultat = $table->fetchAll($selection);
                            $trouvacteursur = $resultat->current();
                            $code_acteur = $trouvacteursur->code_acteur;

                            $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $date_idd = clone $date_id;
                            $membre = new Application_Model_EuMembre();
                            $mapper = new Application_Model_EuMembreMapper();
                            $compte = new Application_Model_EuCompte();
                            $map_compte = new Application_Model_EuCompteMapper();
                            $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $code_activationM = new Application_Model_EuCodeActivationMapper();

                            $fs = Util_Utils::getParametre('FS','valeur');
                            $mont_fl = Util_Utils::getParametre('FL','valeur');
                            $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                            $ancien_code = '';
                            $tcartes = array();
                            $tscartes = array();


                            $code_fs = $codefs;
                            $code_fl = $codefl;
                            $code_fkps = $codefkps;


                    
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if($code == NULL) {
                                $code = $code_agence . '0000001' . 'P';
                            } else {
                                $num_ordre = substr($code, 12, 7);
                                $num_ordre++;
                                $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                                $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
							
							$date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if($date_nais >= $date_idd) {
								$db->rollback();
                                $sessionmcnp->error = "La date de naissance doit être antérieure à la date actuelle !!!";
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->email = $request->getParam("email_membre");
                                return;
                            }
							
							
							//////////////////////////////preinscription
                            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
                            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;
                            $preinscription = new Application_Model_EuPreinscription();
                            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();
                            $preinscription->setId_preinscription($compteur_preinscription)
                                           ->setNom_membre($bon_neutre->bon_neutre_nom)
                                           ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                                           ->setSexe_membre($request->getParam("sexe_membre"))
                                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                           ->setId_pays($request->getParam("id_pays"))
                                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                           ->setPere_membre($request->getParam("pere_membre"))
                                           ->setMere_membre($request->getParam("mere_membre"))
                                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                           ->setProfession_membre($request->getParam("profession_membre"))
                                           ->setFormation($request->getParam("formation"))
                                           ->setId_religion_membre($request->getParam("religion_membre"))
                                           ->setQuartier_membre($request->getParam("quartier_membre"))
                                           ->setVille_membre($request->getParam("ville_membre"))
                                           ->setBp_membre($request->getParam("bp_membre"))
						                   ->setTel_membre(null)
                                           ->setEmail_membre($request->getParam("email_membre"))
						                   ->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
                                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                           ->setCode_membre(NULL)
                                           ->setCode_agence($code_agence)
                                           ->setCode_fs($code_fs)
                                           ->setCode_fl($code_fl)
                                           ->setCode_fkps($code_fkps)
                                           ->setId_canton($request->getParam("id_canton"));
                            $preinscription->setPublier(1);
                            $preinsc_mapper->save($preinscription);
							
							
							///////////////////////////validation acnev
                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);


                //////validation filere
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(2);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                  $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                $validation_quittance->setPublier(1);
                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                $preinscription = new Application_Model_EuPreinscription();
                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                $preinscriptionM->find($compteur_preinscription, $preinscription);

                $preinscription->setPublier(3);
                $preinscriptionM->update($preinscription);


                $validation_quittance = new Application_Model_EuValidationQuittance();
                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                        ////////////////////////////////////////////


                        $mem = new Application_Model_EuMembre();
                        $mem_mapper = new Application_Model_EuMembreMapper();
                        $findmem = $mem_mapper->find($code,$mem);
						
						$mem->setEtat_membre('N');
						$mem_mapper->update($mem);

                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;
				            if($_POST['code_banque'][$i] != "") {
                                $cb->setCode_banque($_POST['code_banque'][$i])
                                   ->setId_compte($cb_compteur)
                                   ->setCode_membre($code)
                                   ->setCode_membre_morale(NULL)
                                   ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                $cb_mapper->save($cb);
				            }
                        }

                        $mapper_op = new Application_Model_EuOperationMapper();
                        $compteurfs = $mapper_op->findConuter() + 1;
                        $lib_op = 'Auto-enrôlement';
                        $type_op = 'AERL';
                        Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre($code)
                                 ->setCode_membre_morale(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur(NULL)
                                 ->setMont_fs($fs);
                        $fs_model->setOrigine_fs('N');
                
                        $tab_fs->insert($fs_model->toArray());

                        $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                        $userin = new Application_Model_EuUtilisateur();
                        $mapper = new Application_Model_EuUtilisateurMapper();
                        $id_user = $mapper->findConuter() + 1;
                        $userin->setId_utilisateur($id_user)
                               ->setId_utilisateur_parent(NULL)
                               ->setPrenom_utilisateur($bon_neutre->bon_neutre_prenom)
                               ->setNom_utilisateur($bon_neutre->bon_neutre_nom)
                               ->setLogin($code)
                               ->setPwd(md5($codesecret))
                               ->setDescription(NULL)
                               ->setUlock(0)
                               ->setCh_pwd_flog(0)
                               ->setCode_groupe('personne_physique')
                               ->setCode_groupe_create('personne_physique')
                               ->setConnecte(0)
                               ->setCode_agence($code_agence)
                               ->setCode_secteur(NULL)
                               ->setCode_zone($code_zone)
                               ->setId_pays($id_pays)
                               ->setCode_acteur($code_acteur)
                               ->setCode_membre($code)
                               ->setId_canton($request->getParam("id_canton"));
                        $mapper->save($userin);
						
						// Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper->findConuter() + 1;
                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(NULL);
                        $contrat->setId_type_creneau(NULL);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays(NULL);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere(NULL);
                        $mapper_contrat->save($contrat);
						
						$sms_fl = $sms_mapper->findByCreditCode($code_fl);
						$tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre($code)
                           ->setCode_membre_morale(NULL)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());
                        $fl->setOrigine_fl('N');
               
                        $tfl->insert($fl->toArray());

                        //Mise à jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }
                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);
						
						$tcartes[0]="TPAGCRPG";
                        $tcartes[1]="TCNCS";
                        $tcartes[2]="TPaNu";
                        $tcartes[3]="TPaR";
                        $tcartes[4]="TR";
                        $tcartes[5]="CAPA";

                        $tscartes[0]="TSRPG";
                        $tscartes[1]="TSCNCS";
                        $tscartes[2]="TSPaNu";
                        $tscartes[3]="TSPaR";
                        $tscartes[4]="TSCAPA";
						
						
						for($i = 0; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCS") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } else  {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }

                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                        }
						
						
						for($j = 0; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCS") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } else {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }
                        }
						
						$sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
						
						$carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($mont_cps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        $carte->setOrigine_fkps('N');
              
                        $t_carte->insert($carte->toArray());
                        $compteurcps = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                        $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                 ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
						
						
						
						$bon_neutre2 = new Application_Model_EuBonNeutre();
                        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                        $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                        if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)){
                            $bon_neutre2->setBon_neutre_code_membre($code);
                            $bon_neutre2M->update($bon_neutre2);
                        }

                        /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                        $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                        $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                        $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                        $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                        $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                        $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_utilise2->setBon_neutre_utilise_montant($montant_cm);
                        $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
							
                        //Mise a jour de eu_postulat
                        $postulat2 = new Application_Model_EuPostulat();
                        $postulat2M = new Application_Model_EuPostulatMapper();
                        $postulat2M->find($postulat->id_postulat,$postulat2);

                        if(($postulat2->code_membre == "" || $postulat2->code_membre == NULL)) {
                           $postulat2->setCode_membre($code);
                           $postulat2M->update($postulat2);
                        }


                        $convention = new Application_Model_DbTable_EuConvention();
                        $select2 = $convention->select();
                        $select2->where("code_activation = ?", $_POST['code_BAn']);
                        $select2->orwhere("(code_membre IS NULL");
                        $select2->where("code_membre = '')");
                        $select2->limit(1);

                        if($convention_rows = $convention->fetchRow($select2)){
                            $convention2 = new Application_Model_DbTable_EuConvention();
                            $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
                        }
						
						
						///////////////////////////////////////////////////////////////////////////////////////
                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmncp->codesecret = $codesecret;
                        $this->_redirect('/index/addactivationpp');	
					
					    }  else  {
                            $db->rollback();
					        $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
					        $sessionmcnp->error = "Le compte de transfert est introuvable ou le solde du compte insuffisant";
					        return;
						}
					
					}
				
				}  catch(Exception $exc) {
                    $db->rollback();
					$this->view->sexe = $request->getParam("sexe_membre");
                    $this->view->sitfam = $request->getParam("sitfam_membre");
                    $this->view->datnais = $request->getParam("date_nais_membre");
                    $this->view->nation = $request->getParam("nationalite_membre");
                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                    $this->view->formation = $request->getParam("formation");
                    $this->view->profession = $request->getParam("profession_membre");
                    $this->view->religion = $request->getParam("religion_membre");
                    $this->view->pere = $request->getParam("pere_membre");
                    $this->view->mere = $request->getParam("mere_membre");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    $this->view->email = $request->getParam("email_membre");
					$sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
					return;
                }
				
			} else {
				$this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->email = $request->getParam("email_membre");
			    $sessionmcnp->error = "Champs * obligatoire ...";
			}
	
	    }
	
	}
	
	
	
	
	public  function  addactivationpmAction()  {
	    /* page public/addpostulat - Ajout d'un postulat */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
	    $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_canton = new Application_Model_DbTable_EuCanton(); 
		 
	    $zones = $t_zone->fetchAll();
	    $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
		
	    $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
		
	    $request = $this->getRequest();
        if($request->isPost()) {		
		    if(isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
                && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
                && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
                && isset($_POST['code_statut']) && $_POST['code_statut']!=""
                && isset($_POST['code_rep']) && $_POST['code_rep']!=""
                && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
                && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
                && isset($_POST['email_membre']) && $_POST['email_membre']!=""
                && isset($_POST['id_pays']) && $_POST['id_pays']!=""
                && isset($_POST['code_agence']) && $_POST['code_agence']!=""
                && isset($_POST['code_activite']) && $_POST['code_activite']!=""
                && isset($_POST['id_canton']) && $_POST['id_canton']!="")   {
					$db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
					    
						$id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;
                        $codesecret = Util_Utils::genererCodeSMS(8);
                        $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                        $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					
					    $postulat_mapper = new Application_Model_EuPostulatMapper();
                        $postulat = $postulat_mapper->fetchAllByCode($request->getParam("code_postulat"));
					
					    /////////////////controle Code BAn ///////////////////////////////////////////////////
					    if(count($bon_neutre) == 0) {
						    $db->rollback();
                            $sessionmcnp->error = "Code BAn incorrect ...";
						    $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }
						
				        /////////////////controle Code Postulat ///////////////////////////////////////////////////
					if(count($postulat) == 0) {
						$db->rollback();
                        $sessionmcnp->error = "Code Postulat incorrect ...";
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
					
					if((($postulat->code_membre != "") || ($postulat->code_membre != NULL)) && (strlen($postulat->code_membre) == 20)) {
					    $db->rollback();
                        $sessionmcnp->error = "Ce postulant dispose dejà d'un code membre";						
						$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
					}
					
					/////////////////controle raison sociale
                    $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                    $select = $eupreinscription->select();
                    $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                    $select->limit(1);
                    $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
						$db->rollback();
                        $sessionmcnp->error = "Vous êtes déjà membre ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");    
                        return;
                    }
					
					/////////////////controle email
                    if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                        $db->rollback();
				        $sessionmcnp->error = "E-mail non valable ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");   
                        return;
                    }

                    /////////////////controle raison sociale
                    $eusouscription = new Application_Model_DbTable_EuSouscription();
                    $select = $eusouscription->select();
                    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                    $select->order(array("souscription_id ASC"));
                    $select->limit(1);
                    $rowseusouscription = $eusouscription->fetchRow($select);
                    if(count($rowseusouscription) > 0) {
                        $souscription_ok = 1;
                        $souscription_first = $rowseusouscription->souscription_id;
                    } else {
                        $souscription_ok = 0;
                    }
					
					
					///////////////// controle codemembre ////////////////////////////////
                    if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                        $membre = new Application_Model_EuMembre();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        if(!$membre_mapper->find($_POST['code_rep'], $membre))  {
							$db->rollback();
                            $sessionmcnp->error = "Le Code Membre est erroné ...";
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }
                    }
					
					if(count($bon_neutre) > 0)  {
                        
                        	/////////////////controle nom prenom
                            if($bon_neutre->bon_neutre_montant_solde < Util_Utils::getParamEsmc(15)) {
							    $db->rollback();
                                $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                                $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                $this->view->code_statut = $request->getParam("code_statut");
                                $this->view->domaine_activite = $request->getParam("domaine_activite");
                                $this->view->site_web = $request->getParam("site_web");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->id_pays = $request->getParam("id_pays");
                                $this->view->registre = $request->getParam("num_registre_membre");
                                return;
                            }

                            /////////////////souscription KACM PM //////////////////////////////////////
                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0]);
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(Util_Utils::getParamEsmc(15));
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);

                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            $bon_neutre2 = new Application_Model_EuBonNeutre();
                            $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                            $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                            $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + Util_Utils::getParamEsmc(15));
                            $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - Util_Utils::getParamEsmc(15));
                            $bon_neutre2M->update($bon_neutre2);
					
					        ///////////////////////////////////////////////////////////////////////////////////////
                            //////////////////////////////////////////////////////////////////////////////////////
                            $mont = Util_Utils::getParamEsmc(15);
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                            $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                            if($bon_neutre_detail_somme < $mont) {
							    $db->rollback();
                                $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                                $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                $this->view->code_statut = $request->getParam("code_statut");
                                $this->view->domaine_activite = $request->getParam("domaine_activite");
                                $this->view->site_web = $request->getParam("site_web");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->id_pays = $request->getParam("id_pays");
                                $this->view->registre = $request->getParam("num_registre_membre");
                                return;
                            } else {
                                $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                                foreach($bon_neutre_detail as $detail)  {
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);
                                if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                                    $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }

                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);


                        $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                        $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                        $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                        $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                        $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                        $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                        $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                        $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                        $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                        $bon_neutre_utilise2M->save($bon_neutre_utilise2);

								} else {
                                    if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                        $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                        $appro_montant_solde = $mont;
                                        foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                $bnad_M->update($bnad);
                                            } else {
                                                $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                $bnad_M->update($bnad);
                                                break;
                                            }

                                        }

                                    }

                                    $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                    $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                    $bon_neutre_detail2M->update($bon_neutre_detail2);


                        $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                        $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                        $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                        $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                        $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                        $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                        $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                        $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                        $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                        $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                    break;
                                }

                            }
              
				        }

                        //////validation acnev
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(1);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

                        //////validation filere
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(2);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                        //////validation technopole
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(3);
                        $souscriptionM->update($souscription);


                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

                        
                        // operation de transfert
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        $date = new Zend_Date();
                        $compte_map = new Application_Model_EuCompteMapper();
                        $compte     = new Application_Model_EuCompte();
                        $sms_money  = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                        $mobile = $souscription->souscription_mobile;
                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                        //$montant = $nbre_compte * $fcaps;
                        $membre_pbf = '0000000000000000001M';
                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                        $ret = $compte_map->find($code_compte_pbf,$compte);

                        $souscription2 = new Application_Model_EuSouscription();
                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                        $souscription2M->find($compteur_souscription, $souscription2);

                        $souscription2->setSouscription_autonome(1);
                        $souscription2->setSouscription_programme('KACM');
                        $souscription2M->update($souscription2);
						
						
						if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                            // Mise à jour du compte de transfert
                            $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                            $compte_map->update($compte);
                        } else {
							$db->rollback();
                            $sessionmcnp->error = 'Le compte de transfert est introuvable ou le solde du compte insuffisant';
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                                                  
                        }						
						
                        $codefs   = '';
                        $codefl   = '';
                        $codefkps = '';

                        // Traitement des produits FS
                        // insertion dans la table eu_smsmoney
                        $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                        // Traitement des produits FL
                        // insertion dans la table eu_smsmoney
                        $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                        // Traitement des produits FCPS
                        $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
						
						if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
                            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);
							
							$i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            while($reste > 0 && $i < $nbre_lignesdetfs) {
                                $lignedetfs = $lignesdetfs[$i];
                                $id = $lignedetfs->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfs->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FS')
                                               ->setCreditcode($codefs)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfs->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfs->getSolde_sms();
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                               ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfs);
									
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FS')
                                               ->setCreditcode($codefs)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                    $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfs);
                                    $reste = 0;
                                }
                                $i++;
                            }
							
							$codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfl = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfl)
                                       ->setCode_Agence(null)
                                       ->setCreditAmount($mont_fl)
                                       ->setSentTo($mobile)
                                       ->setMotif('FL')
                                       ->setId_Utilisateur(null)
                                       ->setCurrencyCode('XOF')
                                       ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                       ->setFromAccount($code_compte_pbf)
                                       ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                       ->setCreditCode($codefl)
                                       ->setDestAccount(null)
                                       ->setIDDatetimeConsumed(0)
                                       ->setDestAccount_Consumed(null)
                                       ->setDatetimeConsumed(null)
                                       ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $j = 0;
                            $reste = $mont_fl;
                            $nbre_lignesdetfl = count($lignesdetfl);
                            while($reste > 0 && $j < $nbre_lignesdetfl) {
                                $lignedetfl = $lignesdetfl[$j];
                                $id = $lignedetfl->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfl->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    $reste = $reste - $lignedetfl->getSolde_sms();
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfl->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                               ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfl);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FL')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FL');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                    $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                    $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfl);
                                    $reste = 0;
                                }
                                $j++;
                            }
							
							
							$codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfkps = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfkps)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_kps)
                                      ->setSentTo($mobile)
                                      ->setMotif('FCPS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefkps)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);

                            $k = 0;
                            $reste = $mont_kps;
                            $nbre_lignesdetfkps = count($lignesdetfkps);
                            while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                $lignedetfkps = $lignesdetfkps[$k];
                                $id = $lignedetfkps->getId_detail_smsmoney();
                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                if($reste >= $lignedetfkps->getSolde_sms()) {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfkps->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfkps->getSolde_sms();
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                 ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                 ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfkps);
                                } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
											   ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FCPS')
                                               ->setCreditcode($codefl)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($reste)
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FCPS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                    $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                    $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                    $det_sms_m->update($lignedetfkps);
                                    $reste = 0;
                                }
                                $k++;
                            }
							
							// insertion dans la table eu_code_activation
                            $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                            $codeactivation = new Application_Model_EuCodeActivation();
                            $countcode = $m_codeactivation->findConuter() + 1;

                            $codeactivation->setId_code_activation($countcode)
                                           ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                            $codeactivation->setCode_membre(NULL);
                            $codeactivation->setCode_fs($codefs);
                            $codeactivation->setCode_fl($codefl);
                            $codeactivation->setCode_fkps($codefkps);
                            $codeactivation->setOrigine_code("ESMC");
                            $codeactivation->setMembreasso_id($sessionmembreasso->membreasso_id);
                            $codeactivation->setSouscription_id($compteur_souscription);
                            $m_codeactivation->save($codeactivation);
							
							
							
							$utilisateur = NULL;
                            //$groupe = $user->code_groupe;
                            $code_agence = $request->getParam("code_agence");
                            $code_zone = substr($_POST['code_agence'], 0, 3);
                            $id_pays = $_POST['id_pays'];
                            $groupe = NULL;

                            $table = new Application_Model_DbTable_EuActeur();
                            $selection = $table->select();
                            $selection->where('code_membre like ?',$code_agence.'%');
                            $selection->where('type_acteur like ?','gac_surveillance');
                            $resultat = $table->fetchAll($selection);
                            $trouvacteursur = $resultat->current();
                            $code_acteur = $trouvacteursur->code_acteur;
                            $acteur      =  $code_acteur;

                            $fs = Util_Utils::getParametre('FS','valeur');
                            $mont_fl = Util_Utils::getParametre('FL','valeur');
                            $fcps = Util_Utils::getParametre('FKPS','valeur');

                            $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $date_idd = clone $date_id;

                            $code_fs = $codefs;
                            $code_fl = $codefl;
                            $code_fkps = $codefkps;
							
							$membre = new Application_Model_EuMembreMorale();
                            $mapper = new Application_Model_EuMembreMoraleMapper();
                            $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                            $mapper_op = new Application_Model_EuOperationMapper();
                            $compte = new Application_Model_EuCompte();
                            $map_compte = new Application_Model_EuCompteMapper();

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $tcartes = array();
                            $tscartes = array();
    
                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if($code == NULL) {
                                $code = $code_agence . '0000001' . 'M';
                            } else {
                                $num_ordre = substr($code, 12, 7);
                                $num_ordre++;
                                $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                                $code = $code_agence . $num_ordre_bis . 'M';
                            }
							
							///////////////////////////////preinscription morale
                            $preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
                            $compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                            $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                            $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                            $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($bon_neutre->bon_neutre_raison)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(null)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"));
                            $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


                            //////validation acnev
                            $validation_quittance = new Application_Model_EuValidationQuittance();
                            $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                            $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                            $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                            $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                            $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                            $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $validation_quittance->setPublier(1);
                            $validation_quittance_mapper->save($validation_quittance);


                            //////validation filere
                            $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                            $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                            $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                            $preinscriptionmorale->setPublier(2);
                            $preinscriptionmoraleM->update($preinscriptionmorale);


                            $validation_quittance = new Application_Model_EuValidationQuittance();
                            $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                            $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                            $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                            $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                            $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                            $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $validation_quittance->setPublier(1);
                            $validation_quittance_mapper->save($validation_quittance);

                            //////validation technopole
                            $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                            $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                            $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                            $preinscriptionmorale->setPublier(3);
                            $preinscriptionmoraleM->update($preinscriptionmorale);


                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                        ////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($bon_neutre->bon_neutre_raison);
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(null);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0]);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




                    /////////////
                    $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                    $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                    $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                    $preinscriptionmorale->setCode_membre_morale($code);
                    $preinscriptionmoraleM->update($preinscriptionmorale);
							
					for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
			            $compagnie = telephonecompagnie($_POST['code_telephonique'][$i], $_POST['numero_telephone'][$i]);
                        $numero_telephone = intval($_POST['code_telephonique'][$i]).$_POST['numero_telephone'][$i];
			   
			            if($compagnie == 1)  {
                            $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;		 
                        } else {
				            $date_id = new Zend_Date(Zend_Date::ISO_8601);
				            $telephone = new Application_Model_EuTelephone();
				            $m_telephone = new Application_Model_EuTelephoneMapper();
							 
			                $compteur = $m_telephone->findConuter() + 1;
			                $telephone->setId_telephone($compteur);
				            $telephone->setNumero_telephone($numero_telephone);
			                $telephone->setCompagnie_telephone($compagnie);
				            $telephone->setCode_membre($code);
			                $m_telephone->save($telephone);			 
			            }
			        }
			
			
			        $mem = new Application_Model_EuMembreMorale();
                    $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                    $findmem = $mem_mapper->find($code,$mem);
				    $mem->setEtat_membre('N');
				    $mem_mapper->update($mem);
					
					
					    // eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

                //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);

            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
            for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }


            //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;

                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

            // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
               $fs_model->setOrigine_fs('N');
            
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);
						
						
						$sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

            $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

            
               $fl->setOrigine_fl('N');
            

                        $tfl->insert($fl->toArray());

            //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

            //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                        //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TSCNCSEI";
                        $tcartes[2]="TSGCI";
                        $tcartes[3]="TSIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TSPaR";
                        $tcartes[7]="TSFS";
                        $tcartes[8]="TSPN";
                        $tcartes[9]="TSIB";
                        $tcartes[10]="TSPaNu";
                        $tcartes[11]="TSIN";
                        $tcartes[12]="TSCAPA";
                        $tcartes[13]="TSMARGE";
                        //$tcartes[14]="TSRE";
                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
						
						$sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
            
                        $carte->setOrigine_fkps('N');
            
                        $t_carte->insert($carte->toArray());

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
							
                        $bon_neutre2 = new Application_Model_EuBonNeutre();
                        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                        $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                        if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                            $bon_neutre2->setBon_neutre_code_membre($code);
                            $bon_neutre2M->update($bon_neutre2);
                        }

                        /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                        $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                        $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                        $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                        $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                        $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                        $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                        $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $bon_neutre_utilise2->setBon_neutre_utilise_montant(Util_Utils::getParamEsmc(15));
                        $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
				
		        //Mise a jour de eu_postulat
                        $postulat2 = new Application_Model_EuPostulat();
                        $postulat2M = new Application_Model_EuPostulatMapper();
                        $postulat2M->find($postulat->id_postulat,$postulat2);

                        if(($postulat2->code_membre == "" || $postulat2->code_membre == NULL)) {
                           $postulat2->setCode_membre($code);
                           $postulat2M->update($postulat2);
                        }
				
                        ///////////////////////////////////////////////////////////////////////////////////////						
							
		        $convention = new Application_Model_DbTable_EuConvention();
                        $select2 = $convention->select();
                        $select2->where("code_activation = ?", $_POST['code_BAn']);
                        $select2->orwhere("(code_membre IS NULL");
                        $select2->where("code_membre = '')");
                        $select2->limit(1);

                        if($convention_rows = $convention->fetchRow($select2)){
                            $convention2 = new Application_Model_DbTable_EuConvention();
                            $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
                        }

                        ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                        $this->_redirect('/index/addactivationpm');	
							

                        } else {
			                $db->rollback();
                            $sessionmcnp->error = 'Le compte de transfert est introuvable ou le solde du compte insuffisant';
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
			            }
						
						 
			}
					
					
					
					
					
					} catch(Exception $exc)  {
			            $db->rollback();
		                $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
		            }
					
				} else  {
                    $sessionmcnp->error = "Champs * obligatoire ...";
                    $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                    $this->view->code_statut = $request->getParam("code_statut");
                    $this->view->domaine_activite = $request->getParam("domaine_activite");
                    $this->view->site_web = $request->getParam("site_web");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    $this->view->email = $request->getParam("email_membre");
                    $this->view->id_pays = $request->getParam("id_pays");
                    $this->view->registre = $request->getParam("num_registre_membre");
                }
		
		
		}
	}
	
	public  function listcmfhAction()  {
	    /* page public/listcmfh -  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

        $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
        $m_type_candidat = new Application_Model_EuTypeCandidatMapper();
        $candidats = $m_type_candidat->fetchAll();
		 
	    $zones = $t_zone->fetchAll();
        $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();

        $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
	    $this->view->candidats = $candidats;
		
		$request = $this->getRequest();
	    if($request->isPost()) {
            $zone = $request->getParam("code_zone");
            $pays = $request->getParam("id_pays");
            $region = $request->getParam("id_region");
            $prefecture = $request->getParam("id_prefecture");
            $canton = $request->getParam("id_canton");
            $type = $request->getParam("id_type_candidat");
			$t_cmfh = new Application_Model_DbTable_EuCmfh();
			
	    if(!empty($type) && empty($zone) && empty($pays) && empty($region) && empty($prefecture) && empty($canton)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($canton)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->where('c.id_canton = ?', $canton);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($prefecture)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($region)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($pays)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_type_candidat.id_type_candidat = t.id_type_candidat');$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (!empty($type) && !empty($zone)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone);
            $select->where('eu_cmfh.id_type_candidat = ?', $type);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($canton)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->where('c.id_canton = ?', $canton);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($prefecture)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($region)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($pays)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else if (empty($type) && !empty($zone)) {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
			$select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone);
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        } else {
            $select = $t_cmfh->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_cmfh.id_canton = c.id_canton');
            $select->join(array('t' => 'eu_type_candidat'), 'eu_cmfh.id_type_candidat = t.id_type_candidat');
            $entries = $t_cmfh->fetchAll($select);
            $this->view->entries = $entries;
        }
		
		}
        $this->view->tabletri = 1;
    }
	
	
	
	
	public  function listcmfh1Action()  {
	    /* page public/listcmfh -  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

        $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
        $m_type_candidat = new Application_Model_EuTypeCandidatMapper();
        $candidats = $m_type_candidat->fetchAll();
		 
	    $zones = $t_zone->fetchAll();
        $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();

        $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
	    $this->view->candidats = $candidats;

        $request = $this->getRequest();
	    if($request->isPost()) {
	        $type = $request->getParam("id_type_candidat");
            $code_zone = $request->getParam("code_zone");
            $id_pays = $request->getParam("id_pays");
            $id_region = $request->getParam("id_region");
            $id_prefecture = $request->getParam("id_prefecture");
            $id_canton = $request->getParam("id_canton");
			
	        $t_souscription = new Application_Model_DbTable_EuSouscription();
	        $select = $t_souscription->select();
	        $select->distinct();
                $select->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison','souscription_type_candidat','id_canton','souscription_mobile','id_metier','id_competence'));
                $select->where('publier = ?',3);
                $select->where('souscription_type_candidat <> ?',0);
                $select->where('souscription_programme like ?','CMFH');			

	        $this->view->type = $type;
	        $this->view->code_zone = $code_zone;
	        $this->view->id_pays = $id_pays;
	        $this->view->id_region = $id_region;
	        $this->view->id_prefecture = $id_prefecture;
	        $this->view->id_canton = $id_canton;
	        $this->view->entries = $t_souscription->fetchAll($select);			
	    }
        $this->view->tabletri = 1;
    }
	
	
	
	public  function listcmfholdAction()  {
	    /* page public/listcmfh -  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

            $t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
            $m_type_candidat = new Application_Model_EuTypeCandidatMapper();
            $candidats = $m_type_candidat->fetchAll();
		 
	    $zones = $t_zone->fetchAll();
            $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();

            $this->view->zones = $zones;
            $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
	    $this->view->candidats = $candidats;

            $request = $this->getRequest();
	    if($request->isPost()) {
	        $type = $request->getParam("id_type_candidat");
                $code_zone = $request->getParam("code_zone");
                $id_pays = $request->getParam("id_pays");
                $id_region = $request->getParam("id_region");
                $id_prefecture = $request->getParam("id_prefecture");
                $id_canton = $request->getParam("id_canton");
			
	        $t_souscription = new Application_Model_DbTable_EuSouscription();
	        $select = $t_souscription->select();
		$select->distinct();
                $select->from(array('eu_souscription'),array('souscription_nom','souscription_prenom','souscription_raison','souscription_type_candidat','id_canton','souscription_mobile','id_metier','id_competence'));
                $select->where('publier = ?',3);
                $select->where('souscription_programme like ?','CMFH');
                if(!empty($this->type)) {
                    $select->where('souscription_type_candidat = ?', $type);
                } else {	
                  $select->where('souscription_type_candidat <> ?',0);
                }			
                $this->view->entries = $t_souscription->fetchAll($select);
			
	        $this->view->type = $type;
	        $this->view->code_zone = $code_zone;
	        $this->view->id_pays = $id_pays;
	        $this->view->id_region = $id_region;
	        $this->view->id_prefecture = $id_prefecture;
	        $this->view->id_canton = $id_canton;
	        
	    }
	    $this->view->tabletri = 1;
	
	}


    public  function montantAction()  {
		$this->_helper->layout->disableLayout();
		$integrateur_type = $_GET["integrateur_type"];
		$typeintegrateur = new Application_Model_EuTypeIntegrateur();
        $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
		$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
		
		$data = $typeintegrateur->montant_param;
		$this->view->data = $data;
	}
	
	
	public  function  montantbcAction()  {
		$this->_helper->layout->disableLayout();
		$integrateur_type = $_GET["integrateur_type"];
		$msbct = floor(Util_Utils::getParametre('MSBCT','valeur'));
		
		$this->view->data = $msbct;
	}
	
	
	
	
	
	
	
	public  function montant1Action()  {
		$this->_helper->layout->disableLayout();
		$integrateur_type = $_GET["integrateur_type"];
		$typeintegrateur = new Application_Model_EuTypeOffreurProjet();
        $m_typeintegrateur = new Application_Model_EuTypeOffreurProjetMapper();
		$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
		
		$data = 0;
		$data = $typeintegrateur->montant_param;
		$this->view->data = $data;
		
	}


    public function candidatAction()  {
		$this->_helper->layout->disableLayout();
		$integrateur_type = $_GET["integrateur_type"];
		$results = "";
		$ttype_candidat = new Application_Model_EuTypeCandidatMapper();
		if(($integrateur_type == 21)) {
		    $results = $ttype_candidat->fetchByIntegrateur12();
		} elseif(($integrateur_type == 23)) {
            $results = $ttype_candidat->fetchByIntegrateur8();
        } elseif(($integrateur_type == 24)) {
		    $results = $ttype_candidat->fetchByIntegrateur13();
		} elseif(($integrateur_type == 15)) {
		    $results = $ttype_candidat->fetchByIntegrateur2();
		} elseif(($integrateur_type == 16) ) {
		    $results = $ttype_candidat->fetchByIntegrateur3();
		} elseif(($integrateur_type == 17) ) {
		    $results = $ttype_candidat->fetchByIntegrateur4();
		} elseif(($integrateur_type == 18) ) {
		    $results = $ttype_candidat->fetchByIntegrateur5();
		} elseif(($integrateur_type == 22) ) {
		    $results = $ttype_candidat->fetchByIntegrateur1();
		} elseif(($integrateur_type == 29) ) {
		    $results = $ttype_candidat->fetchByIntegrateur10();
		} elseif(($integrateur_type == 30) ) {
		    $results = $ttype_candidat->fetchByIntegrateur11();
		} else if(($integrateur_type == 1) || ($integrateur_type == 2) || ($integrateur_type == 3) 
		    || ($integrateur_type == 4) || ($integrateur_type == 5) || ($integrateur_type == 6)
	        || ($integrateur_type == 7) || ($integrateur_type == 8) || ($integrateur_type == 25)
		    || ($integrateur_type == 26) || ($integrateur_type == 27) || ($integrateur_type == 28)) {
				 
		    $results = $ttype_candidat->fetchByIntegrateur9();
		}
		elseif(($integrateur_type == 19) || ($integrateur_type == 20)) {	 
		    $results = $ttype_candidat->fetchByIntegrateur9();
		}
        $data = array();
	    if(count($results) > 0) {
            for($i = 0; $i < count($results); $i++) {
                $value = $results[$i];
                $data[$i][0] = $value->id_type_candidat;
                $data[$i][1] = $value->libelle_type_candidat;
            }
	    } else {
            $data = "";
        }	  
        $this->view->data = $data; 		
	}
	
	
	public  function addeliAction()   {
		/* page public/addeli - Ajout d'un eli */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		$this->_helper->layout()->setLayout('layoutpublicesmc');
		
 	    //$this->_helper->layout()->setLayout('layoutpublicesmc');
		
		$t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
		
		$t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
		
		$t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
		
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
		
		$t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
		
		$request = $this->getRequest();
		if($request->isPost()) {
			if(isset($_POST['code_membre']) && $_POST['code_membre']!="" 
			&& isset($_POST['nom_membre']) && $_POST['nom_membre']!="" 
			&& isset($_POST['code_te']) && $_POST['code_te']!="")  {
			   $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction(); 
               try {
				   $membremoral = new Application_Model_EuMembreMorale();
                   $m_mapmoral = new Application_Model_EuMembreMoraleMapper();

                   $eli = new Application_Model_EuEli();
                   $m_eli = new Application_Model_EuEliMapper();
				  
				   $detaileli = new Application_Model_EuDetailEli();
                   $m_detaileli = new Application_Model_EuDetailEliMapper();

                   $code_membre = $request->getParam("code_membre");
				   $code_tegc = $request->getParam("code_te");
				   $libelle_eli = $request->getParam("libelle_eli");
				   
				   $db_convention = new Application_Model_DbTable_EuConvention();
				   $db_franchise = new Application_Model_DbTable_EuFranchise();
				   $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
				   $db_avr = new Application_Model_DbTable_EuFormAvr();
				   
				   $bai = 0;
                   $ban = 0;
                   $opi = 0;	

                   $montant_bai = 0;
                   $montant_ban = 0;
                   $montant_opi = 0;
				   $montant_eli = 0;
				   
				   
				   $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				   if($findmembre == false) {
				      $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Le code membre du fournisseur  ".$code_membre."  est introuvable ...";
                      return;
				   }
				  
				   if($membremoral->desactiver == 1) {
					  $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
					  $this->view->error = "Ce fournisseur dont le code membre que voici  ".$code_membre."  n'est pas autorisé à effectuer cette opération ...";
					  return;
				   }
				   
				   
				   $select = $db_convention->select();
				   $select->where('code_membre like  ?', $code_membre);
				   $rowsconvention = $db_convention->fetchRow($select);
				  
				   if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				   }
				   
				   $select = $db_franchise->select();
				   $select->where('code_membre_franchise like  ?', $code_membre);
				   $rowsfranchise = $db_franchise->fetchRow($select);
				  
				   if(count($rowsfranchise) == 0) {
					  $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                      return;
				   }
				   
				   $select = $db_convention_eli->select();
				   $select->where('code_membre like  ?', $code_membre);
				   $rowseli = $db_convention_eli->fetchRow($select);
				  
				   if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				   }
				   
				   
				   $select = $db_avr->select();
				   $select->where('code_membre_avr like  ?', $code_membre);
				   $rowsavr = $db_avr->fetchRow($select);
				  
				   if(count($rowsavr) == 0) {
					  $db->rollback();
					  $this->view->nom_membre = $request->getParam("nom_membre");
				      $this->view->code_membre = $request->getParam("code_membre");
                      $this->view->error = "Veuillez impérativement valider notre formulaire d'Achat Vente Réciproque ... ";
                      return;
				   }
				   
				   for($i = 0; $i < count($_POST['prix_unitaire']); $i++) {
					 if($_POST['prix_unitaire'][$i] > 0 && $_POST['quantite'][$i] > 0) {
					    $montant_eli = $montant_eli + ($_POST['prix_unitaire'][$i] * $_POST['quantite'][$i]);
					 } else {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Veuillez revoir votre saisie ... ";
                        return;						
					 }
				   }
				   
				   if(isset($_POST['bai']) && $_POST['bai'] == 1)  {
                     $bai = 1;					  
					 $montant_bai = $request->getParam("montant_bai");
					 if($montant_bai < 0) {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Montant BAi mal saisi ... ".$montant_bai;
                        return; 
					 }
				   }
				   
				   if(isset($_POST['ban']) && $_POST['ban'] == 1)  {
                     $ban = 1;					  
					 $montant_ban = $request->getParam("montant_ban");
					 if($montant_ban < 0) {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Montant BAn mal saisi ... ".$montant_ban;
                        return; 
					 }
				   }
				   
				   if(isset($_POST['opi']) && $_POST['opi'] == 1)  {
                     $opi = 1;					  
					 $montant_opi = $request->getParam("montant_opi");
					 if($montant_opi < 0) {
						$db->rollback();
			            $this->view->nom_membre = $request->getParam("nom_membre");
				        $this->view->code_membre = $request->getParam("code_membre");
                        $this->view->error = "Montant Opi mal saisi ... ".$montant_opi;
                        return; 
					 }
				   }
				   
				   if((isset($_POST['opi']) && $_POST['opi'] == 1) || (isset($_POST['ban']) && $_POST['ban'] == 1) || (isset($_POST['bai']) && $_POST['bai'] == 1)) {
				      if(($montant_bai + $montant_ban + $montant_opi) != $montant_eli) {
					      $db->rollback();
			              $this->view->nom_membre = $request->getParam("nom_membre");
				          $this->view->code_membre = $request->getParam("code_membre");
                          $this->view->error = "Le montant du mode de règlement n'est pas conforme au montant total des produits ...";
                          return;					  
				      }
				   }
				  
				   $date_id = Zend_Date::now();
				   $codeeli = "";
				   $numero_eli = "";
				   
                   $codeeli = strtoupper(Util_Utils::genererCodeSMS(6));
				   $numero_eli = "ELI-".$codeeli;
				   
				   /*
				   do {
                     $codeeli = strtoupper(Util_Utils::genererCodeSMS(6));
					 $numero_eli = "ELI-".$codeeli;
                     $eli_mapper = new Application_Model_EuEliMapper();
                     $eli2 = $eli_mapper->findByNumero($numero_eli);
                   }  while(count($eli2) > 0);
				   
				   */
				   
				   $eli->setCode_membre($code_membre);
				   $eli->setNumero_eli($numero_eli);
                   $eli->setLibelle_eli($libelle_eli);
                   $eli->setDate_eli($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                   $eli->setBai($bai);
                   $eli->setMontant_bai($montant_bai);
		           $eli->setBan($ban);
		           $eli->setMontant_ban($montant_ban);
		           $eli->setOpi($opi);
		           $eli->setMontant_opi($montant_opi);
		           $eli->setMontant_eli($montant_eli);
				   $eli->setCode_tegc($code_tegc);
		           $eli->setValider(0);
				   $eli->setRejeter(0);
		           $eli->setPayer(0);
				  
			       $eli->setUtilisateur(NULL);
			       $eli->setId_canton($membremoral->id_canton);
				   $m_eli->save($eli);
				   
				   $id_eli = $db->lastInsertId();
				  
				   for($i = 0; $i < count($_POST['prix_unitaire']); $i++) {
				       $detaileli->setId_eli($id_eli);
					   $detaileli->setType_bps($_POST['type_bps'][$i]);
					   $detaileli->setLibelle_produit($_POST['libelle_produit'][$i]);
					   $detaileli->setMontant_produit($_POST['quantite'][$i] * $_POST['prix_unitaire'][$i]);
					   $detaileli->setQuantite($_POST['quantite'][$i]);
					   $detaileli->setPrix_unitaire($_POST['prix_unitaire'][$i]);
					   $detaileli->setStatut(1);
					   $m_detaileli->save($detaileli); 
				   }
				  
				   $db->commit();
				   $sessionmcnp->error = "Operation bien effectuee ...";
				   $this->_redirect('/index/addeli'); 
				
			   } catch(Exception $exc) {				   
				  $db->rollback();
			      $this->view->nom_membre = $request->getParam("nom_membre");
				  $this->view->code_membre = $request->getParam("code_membre");
                  $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
			   }
				
			} else  {
			   $this->view->nom_membre = $request->getParam("nom_membre");
			   $this->view->code_membre = $request->getParam("code_membre");
               $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			   return;
		    }
			
			
			
		}
		
	}
	
	
	public function addinteAction()   {
		
		/* page public/addintegration - Ajout d'un integration */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $param = (int) $this->_request->getParam('param_int');
		
		$t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
		
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
	    $select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);
		
		$zones = $t_zone->fetchAll();
	    $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
	    $selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		
	    $this->view->param = $param;
	    $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
	    $this->view->villes = $villes;
	    $this->view->formations = $formations;
		
		
		
		
	}
	
	
	
	public function addintegrationAction()   {
	    /* page public/addintegration - Ajout d'un integration */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $param = (int) $this->_request->getParam('param_int');
		
		$msbct = floor(Util_Utils::getParametre('MSBCT','valeur'));
		
		$t_zone = new Application_Model_DbTable_EuZone();
	    $t_pays = new Application_Model_DbTable_EuPays();
	    $t_region = new Application_Model_DbTable_EuRegion();
	    $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_canton = new Application_Model_DbTable_EuCanton(); 
	    $t_ville = new Application_Model_DbTable_EuVille();
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
	    $select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);
		
		$zones = $t_zone->fetchAll();
	    $pays = $t_pays->fetchAll();
	    $regions = $t_region->fetchAll();
	    $prefectures = $t_prefecture->fetchAll();
	    $cantons  = $t_canton->fetchAll();
	    $selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		
		$this->view->msbct = $msbct;
		
	    $this->view->param = $param;
	    $this->view->zones = $zones;
        $this->view->pays = $pays;
	    $this->view->regions = $regions;
	    $this->view->prefectures = $prefectures;
	    $this->view->cantons = $cantons;
	    $this->view->villes = $villes;
	    $this->view->formations = $formations;
		
		$request = $this->getRequest();
	    if($request->isPost())  {
		   if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
		    && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
            && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!="" && $_POST['integrateur_montant'] > 0 			   
		    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try { 
                    $membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
				    $membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
				    $db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
				    $bpssouscription = new Application_Model_EuBpsSouscription();
                    $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
				    $comptebancaire = new Application_Model_EuCompteBancaire();
                    $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
				   
				    $ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
				    $param = (int) $this->_request->getParam('param_int');
				    $date_id = Zend_Date::now();
					
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
				    $cycle = new Application_Model_EuCycleFormation();
                    $m_cycle = new Application_Model_EuCycleFormationMapper();

                    $membre_integrateur  = $request->getParam("code_membre");
				    $findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($membre_integrateur);
				    $code_membre_integrateur = '';   
				    $integrateur_montant = $request->getParam("integrateur_montant");
				    $integrateur_type = $request->getParam("integrateur_type");
				    $statut = $request->getParam("liste");
				    $programme = $request->getParam("programme");
				    $type_kit = $request->getParam("kit");
				    $multiple = "";
				    $mont_msbcm = "";
				    $type_souscription = "";
				    $bps_demande = "";
				    $id_canton = NULL;
					$id_prefecture = NULL;
					$id_region = NULL;
					$id_pays = NULL;
					$code_zone = NULL;
				    $delai = "";
				   
				    $avecfs = false;
				    $mbc  = 0;
				    $vbc  = 0;
				    $mfs  = 0;
				    $vfs  = 0;
				    $mmat = 0;
				    $vmat = 0;
				    $mci  = 0;
				    $vci  = 0;
				    $mass = 0;
				    $vass = 0;
				    $mcb  = 0;
				    $vcb  = 0;
					
				    $dist_peripherique = NULL;
                    $dist_connectivite = NULL;
                    $dist_assurance    = NULL;
				    $id_cycle_formation = NULL;
					
				    $montant_peripherique = 0;
				    $montant_connectivite = 0;
				    $montant_assurance = 0;
				    $montant_compte = 0;

                    $mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
				    $mont_bc = 0;
					$mont_bps = 0;
				    $bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
				    $bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					$panupp  = Util_Utils::getParametre('TPANU','PP');
				    $panupm  =  Util_Utils::getParametre('TPANU','PM');
				   
				    $m_typeintegrateur->find($integrateur_type,$typeintegrateur);

                    if($programme == "CM") {
					   $type_souscription = $request->getParam("type_souscription_cm");		
				    } else if($programme == "BC") {
					   $type_souscription = $request->getParam("type_souscription_bc");
				    }
					
					if($programme == "CM" && $statut == "AvecListe") {
					   $multiple = $integrateur_montant/$mont_caps;
				    } elseif($programme == "BC" && $statut == "AvecListe") {					
                       if($type_kit == "KITSU") {
						    $mont_bc = 30000;
						    if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						       $mont_msbcm = 1800000;					
						    } else {
						       $mont_msbcm = 1443750;				
						    }
						  
					    } elseif($type_kit == "KITTECH") {
						  $mont_bc = $request->getParam("mont_bc");
						  $id_cycle_formation = $request->getParam("id_cycle_formation");
						  $findcycle = $m_cycle->find($id_cycle_formation,$cycle);
						  $mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
					    }
					    $multiple = $integrateur_montant/$mont_msbcm;
					    $vfs  = $multiple;
                    }
					
					$m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();

                    $m_mstiers = new Application_Model_EuMstiersMapper();
				    $mstiers = new Application_Model_EuMstiers();
						
				    $finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					$findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
					
					
					if(substr($membre_integrateur,19,1) == 'P')  {
					    $findmembre = $m_map->find($membre_integrateur,$membre);
					    if($findmembre == false) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					       return;
					    }
						
						if($membre->desactiver != 0) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
						$id_canton = $membre->id_canton;
						
					} else {
						$findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					        return;
						}
						
						if($membremoral->desactiver != 0) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
						$id_canton = $membremoral->id_canton;
					}
					
					if($findbancaire == NULL) {
					   $db->rollback();
					   $this->view->param = $param;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
					   $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					   return;
				    }
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'M')  {
				        $select = $db_franchise->select();
				        $select->where('code_membre_franchise like  ?', $membre_integrateur);
				        $rowsfranchise = $db_franchise->fetchRow($select);
				  
				        if(count($rowsfranchise) == 0) {
					      $db->rollback();
			              $this->view->param = $param;
					      $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                          $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                          return;
				        }  
					}
					
					$select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					if($findmstiers == NULL) {
					    if($msbct  > $integrateur_montant) {
					        $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;
					    }
					}
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'M' &&  ($integrateur_type == 1  || $integrateur_type == 3 ||  $integrateur_type == 5 ||  $integrateur_type == 7))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					    return;
					}
					
					if(substr($membre_integrateur,19,1) == 'P' &&  ($integrateur_type == 21  || $integrateur_type == 24 ))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les personnes morales sont autorisées à effectuer cette opération ....";
					    return;
					}
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $this->view->error = "Votre Code BAn  incorrect ...";
                      return; 
					}
					  
					if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant))  {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $this->view->error = "Montant restant du BAn est insuffisant ...";
                      return; 
					}
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
						$bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValideBc($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutreBc($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreApproBc($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Montant restant du BAn est insuffisant ...";
                            return; 
						}
						
						if($membre_integrateur != $code_membre_integrateur) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                           return;   
						}
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$i = 0;
					    $reste = $integrateur_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
						 
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						 
                        while($reste > 0 && $i < $nbre_lignesdetbon)  { 
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        } 
                                    }
								}
								
								// Save des BAn utilisés 
								$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
								
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
								$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->getBon_neutre_detail_id());
								$bon_neutre_utilise->setUsertable("membreasso");
                                $bon_neutre_utilise->setUser_id(1);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
								
								// Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
								 
                            } else  {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
								
								//--- Save des BAn Utilisés ---
								$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
								$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->getBon_neutre_detail_id());
								$bon_neutre_utilise->setUsertable("membreasso");
                                $bon_neutre_utilise->setUser_id(1);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
							   
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
                            }							   
                            $i++;
						}
						 
						////////////////////////////////////////////////////////////////////////////////////////////////////////////						
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						$bon_neutre2M->update($bon_neutre2);
						  
						 
						//$integrateur_montant_kacm = 0;
						//$integrateur_montant_bc = 0;
						 
						/*
						if($statut == "AvecListe") {
						    $integrateur_montant_kacm = $multiple * $mont_caps;
							$integrateur_montant_bc = $integrateur_montant - $integrateur_montant_kacm;
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_bc);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_kacm);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
						
						 } else {
				             $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						 
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
					         $bon_neutre_utiliseM->save($bon_neutre_utilise);
						 }
						 */
						 
						 
						
						 $eusouscription = new Application_Model_DbTable_EuSouscription();
						 $select = $eusouscription->select();
						 if(substr($membre_integrateur,19,1) == 'P')  {
						    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						 } else {
						    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						 }
						
						 $select->order(array("souscription_id ASC"));
	                     $select->limit(1);
	                     $rowseusouscription = $eusouscription->fetchRow($select);
		                 if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			             } else {
			                $souscription_ok = 0;
			             }
						 
						 $eusouscription = new Application_Model_DbTable_EuSouscription();
						 if(isset($_POST["souscription_login"])) {
        				   if($finddepot == NULL && $findmstiers == NULL) {		
	                          $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
						   }
						
						   if($finddepot == NULL && $findmstiers == NULL && $rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "") {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $this->view->error = "Login déjà existant ...";
						      return;
	                       }  else if($finddepot == NULL && $findmstiers == NULL && $request->getParam("souscription_passe") != $request->getParam("confirme") && $request->getParam("souscription_passe") != "") {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                              $this->view->error = "Mot de passe incorret ...";
						      return;
	                       }
						}
						
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $souscription->setSouscription_nom($membre->nom_membre);
                            $souscription->setSouscription_prenom($membre->prenom_membre);
						    $souscription->setSouscription_mobile($membre->portable_membre);
						    $souscription->setSouscription_personne("PP");
						    $souscription->setSouscription_ville($membre->ville_membre);
                            $souscription->setSouscription_quartier($membre->quartier_membre);
                            $souscription->setSouscription_email($membre->email_membre);
						} else {
						    $souscription->setSouscription_raison($membremoral->raison_sociale);
                            $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                            $souscription->setCode_statut($membremoral->code_statut);
						    $souscription->setSouscription_mobile($membremoral->portable_membre);
						    $souscription->setSouscription_personne("PM");
						    $souscription->setSouscription_ville($membremoral->ville_membre);
                            $souscription->setSouscription_quartier($membremoral->quartier_membre);
                            $souscription->setSouscription_email($membremoral->email_membre);
						}
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");


                        if(isset($_POST["integrateur_type_candidat"])) {
                           $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                        } else {
                           $souscription->setSouscription_type_candidat(NULL);
                        }
    
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($id_canton);
                        $souscription_mapper->save($souscription);
						
			            $compteur_souscription = $db->lastInsertId();
						
						$cmfh = new Application_Model_EuCmfh();
                        $cmfh_mapper = new Application_Model_EuCmfhMapper();
						
						$canton = new Application_Model_EuCanton();
                        $canton_mapper = new Application_Model_EuCantonMapper();
						
						$prefecture = new Application_Model_EuPrefecture();
                        $prefecture_mapper = new Application_Model_EuPrefectureMapper();
						
						$region = new Application_Model_EuRegion();
                        $region_mapper = new Application_Model_EuRegionMapper();
						
						$pays = new Application_Model_EuPays();
                        $pays_mapper = new Application_Model_EuPaysMapper();
						
						$zone = new Application_Model_EuZone();
                        $zone_mapper = new Application_Model_EuZoneMapper();
						
						if(($id_canton != "") && ($id_canton != NULL)) {
						   $canton_mapper->find($id_canton,$canton);
						   $id_prefecture = $canton->id_prefecture;
						   $prefecture_mapper->find($id_prefecture,$prefecture);
						   $id_region = $prefecture->id_region;
						   $region_mapper->find($id_region,$region);
						   $id_pays = $region->id_pays;
						   $pays_mapper->find($id_pays,$pays);
						   $code_zone = $pays->code_zone;
						}
						
						if(isset($_POST["integrateur_type_candidat"]))  {
				            $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($request->getParam("code_membre"),$request->getParam("integrateur_type_candidat"));
				            if($findrowscmfh == false)  {
					            $compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					            $cmfh->setId_cmfh($compteur_cmfh);
				                $cmfh->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				                $cmfh->setId_type_candidat($request->getParam("integrateur_type_candidat"));
					            $cmfh->setCode_membre($request->getParam("code_membre"));
                                $cmfh->setCode_zone_create($code_zone);
                                $cmfh->setId_pays($id_pays);
                                $cmfh->setId_region($id_region);
                                $cmfh->setId_prefecture($id_prefecture);
                                $cmfh->setId_canton($id_canton);
					            $cmfh_mapper->save($cmfh);
			                }
			            }
						 
						 
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						      
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						
						$a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						   
						if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22)  {
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						   
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso(0);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        $a->setIntegrateurCanton($id_canton);
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("code_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);
						
						//Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";
						
						
						if($finddepot == NULL && $findmstiers == NULL) {
							//$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
						    } else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
						    $date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
						
						
						//insertion dans les tables eu_mstiers
					    $id_souscription = $compteur_souscription;
                        //$id_mstiers = $m_mstiers->findConuter() + 1;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("code_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
						
						$mstiers->setCode_membre($code_integrateur);
					    $mstiers->setMontant_souscris($montant_souscris);
					    $mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($montant_souscris);
					    $mstiers->setType_souscription($type_souscription);  
					    $mstiers->setType_kit($type_kit);
                        $mstiers->setMontant_bc($mont_bc);
					    $mstiers->setMontant_peripherique($mmat);
						$mstiers->setMontant_connectivite($mci);
						$mstiers->setMontant_assurance($mass);
						$mstiers->setMontant_comptebancaire($mcb);
                        $mstiers->setId_cycle_formation($id_cycle_formation);  
					    $mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $mstiers->setBon_neutre_code($code_ban);
						$mstiers->setType_mstiers($programme);
					    $mstiers->setStatut_mstiers($statut);
						$mstiers->setBon_conso($vbc);
						$mstiers->setFrais_solvabilite($vfs);
						$mstiers->setPeripherique($vmat);
						$mstiers->setConnectivite($vci);
						$mstiers->setAssurance($vass);
						$mstiers->setCompte_bancaire($vcb);
					    $mstiers->setDistributeur_peripherique($dist_peripherique);
                        $mstiers->setDistributeur_connectivite($dist_connectivite);
                        $mstiers->setDistributeur_assurance($dist_assurance);
						   
					    if($param == 4) {
						  $mstiers->setType_souscripteur("ODD");
						} elseif($param == 5) {
						  $mstiers->setType_souscripteur("USER");  								  
					    } else {
						  $mstiers->setType_souscripteur("CMFH");
						}
                        $m_mstiers->save($mstiers);
						
						
						/*
						if($statut == "AvecListe")  {
							$mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_kacm);
					        $mstiers->setType_souscription("CAPS");  
							
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
							
                            $mstiers->setId_cycle_formation($id_cycle_formation);
                            							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique(NULL);
                            $mstiers->setDistributeur_connectivite(NULL);
                            $mstiers->setDistributeur_assurance(NULL);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
							
							
							$mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_bc);
					        $mstiers->setType_souscription($type_souscription);  
                            $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
							
						} else {
						   $mstiers->setCode_membre($code_integrateur);
					       $mstiers->setMontant_souscris($montant_souscris);
					       $mstiers->setMontant_utilise(0);
					       $mstiers->setMontant_restant($montant_souscris);
					       $mstiers->setType_souscription($type_souscription);  
					       $mstiers->setType_kit($type_kit);
                           $mstiers->setMontant_bc($mont_bc);
					       $mstiers->setMontant_peripherique($mmat);
						   $mstiers->setMontant_connectivite($mci);
						   $mstiers->setMontant_assurance($mass);
						   $mstiers->setMontant_comptebancaire($mcb);
                           $mstiers->setId_cycle_formation($id_cycle_formation);  
					       $mstiers->setId_souscription($id_souscription);
						   $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					       $mstiers->setBon_neutre_code($code_ban);
						   $mstiers->setType_mstiers($programme);
					       $mstiers->setStatut_mstiers($statut);
						   $mstiers->setBon_conso($vbc);
						   $mstiers->setFrais_solvabilite($vfs);
						   $mstiers->setPeripherique($vmat);
						   $mstiers->setConnectivite($vci);
						   $mstiers->setAssurance($vass);
						   $mstiers->setCompte_bancaire($vcb);
					       $mstiers->setDistributeur_peripherique($dist_peripherique);
                           $mstiers->setDistributeur_connectivite($dist_connectivite);
                           $mstiers->setDistributeur_assurance($dist_assurance);
						   
					       if($param == 4) {
						      $mstiers->setType_souscripteur("ODD");
						   } elseif($param == 5) {
						      $mstiers->setType_souscripteur("USER");  								  
					       } else {
						      $mstiers->setType_souscripteur("CMFH");
						   }
                           $m_mstiers->save($mstiers);
					  }
					  
					  */
						
						$id_mstiers = $db->lastInsertId();
						// script de creation de TE de prestation
						$eucompte = new Application_Model_EuCompte();
					    $m_compte = new Application_Model_EuCompteMapper();
									
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
									
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
						$code_te = "";
						$code_tegc = "";
						$nom_tegc = "";
									
						$code_membre = $request->getParam("code_membre");
							   
						if(substr($code_membre,19,1)=='P') {
						   $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						} else {
						   $nom_tegc = $membremoral->raison_sociale;
					    }
						
						$num_compte = 'NB-TPAGCP-'.$code_membre;
				        $res = $m_compte->find($num_compte,$eucompte);
												
						$num_comptets = 'NB-TSGCP-'.$code_membre;
				        $rests = $m_compte->find($num_comptets,$eucompte);
						
						if(!$rests) {
						    $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                $eucompte->setCode_membre($code_membre)
                                         ->setCode_membre_morale(NULL);
							} else  {
                                $eucompte->setCode_membre(NULL)
                                         ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);		
                         }
						 
						 // fin script de creation TE 
					    if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						} else {
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
							$code_tegc = $code_te;
					    }
						
						if($type_souscription != "BPS")   {
                            //$code_banque = $request->getParam("code_banque");
                            //$referencepaie   = $request->getParam("num_compte");
							$code_banque = $findbancaire->code_banque;
							$referencepaie = $findbancaire->num_compte_bancaire;
					        $type_bnp = $type_souscription;
								
                            $montant = $request->getParam("integrateur_montant");
					        $souscription_id = $compteur_souscription;
						    $typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							$url,
							array(
                                CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 30000000,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "POST",
								CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							));
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
								$db->commit();
							    $sessionmcnp->error = $response->message;
							    $this->_redirect('/index/addintegration/param_int/'.$param);
							} else {
							   $db->rollback();
							   $this->view->param = $param;
					           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							   $sessionmcnp->error = $response->message;
							   return;
							}
							curl_close($url);
						}
						else {
						  if(substr($code_integrateur,19,1) == 'P')  {
							 $mont_bps =  ($montant_souscris) + (($montant_souscris * $panupp)/100);
						  } else {
							 $mont_bps =  ($montant_souscris) + (($montant_souscris * $panupm)/100);
						  }
						  $bpssouscription->setBps_demande($request->getParam("bps_demande"));
						  $bpssouscription->setMontant_bps_souscription($mont_bps);
						  $bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bpssouscription->setId_mstiers($id_mstiers);
						  $bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
						  $bpssouscription->setCode_smcipn(NULL);
						  $bpssouscription->setAllouer(0);
                          $m_bpssouscription->save($bpssouscription);
							
						  $db->commit();
						  if($finddepot == NULL && $findmstiers == NULL) {
							 $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						  } else {
							 $sessionmcnp->error = "Operation bien effectuee ...";
						  }
						  $this->_redirect('/index/addintegration/param_int/'.$param);
						}
					}
		
		       } catch(Exception $exc) {				   
				  $db->rollback();
				  $this->view->param = $param;
			      $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                  $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
			   }
		
		   } else {
			   $this->view->param = $param;
			   $this->view->error = "Veuillez saisir les champs obligatoires (*)";
		   }
		
		}
		
	}


        
	public function addintegrationkitAction()  {
		/* page public/addintegration - Ajout d'un integration */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		$param = (int) $this->_request->getParam('param_int');
		
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
		$select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);
		
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		
		$this->view->param = $param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		$this->view->formations = $formations;
		$this->view->montant_bc = $montant_bc;
		
		$request = $this->getRequest();
		if($request->isPost())  {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			&& isset($_POST['code_activite']) && $_POST['code_activite']!="" 
            && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!="" && $_POST['integrateur_montant'] > 0 			   
			&& isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {    
		
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
					
		            $membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
                    $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
					$comptebancaire = new Application_Model_EuCompteBancaire();
                    $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
					
					$ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
					$param = (int) $this->_request->getParam('param_int');
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
					$cycle = new Application_Model_EuCycleFormation();
                    $m_cycle = new Application_Model_EuCycleFormationMapper();
					
					$membre_integrateur  = $request->getParam("code_membre");
					$findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($membre_integrateur);
					$code_membre_integrateur = '';   
					$integrateur_montant = $request->getParam("integrateur_montant");
					$integrateur_type = $request->getParam("integrateur_type");
					$statut = $request->getParam("liste");
					$programme = $request->getParam("programme");
					$type_kit = $request->getParam("kit");
					$multiple = "";
					$mont_msbcm = "";
					$type_souscription = "";
					$bps_demande = "";
					$delai = "";
					
					$avecfs = false;
					$mbc  = 0;
					$vbc  = 0;
					$mfs  = 0;
					$vfs  = 0;
					$mmat = 0;
					$vmat = 0;
					$mci  = 0;
					$vci  = 0;
					$mass = 0;
					$vass = 0;
					$mcb  = 0;
					$vcb  = 0;
					
					$dist_peripherique = NULL;
                    $dist_connectivite = NULL;
                    $dist_assurance    = NULL;
					$id_cycle_formation = NULL;
					
					$montant_peripherique = 0;
					$montant_connectivite = 0;
					$montant_assurance = 0;
					$montant_compte = 0;
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 0;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps  = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");		
					} else if($programme == "BC") {
					    $type_souscription = $request->getParam("type_souscription_bc");
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $integrateur_montant/$mont_caps;
						
				    } elseif($programme == "BC" && $statut == "AvecListe") {
						if(isset($_POST['mbc']) && $_POST['mbc'] == 1) {
						    $mbc = floor(Util_Utils::getParametre('MBC','valeur'));
							$mont_bc = $request->getParam("montant_bc");
							$vbc = 1;
							if($type_kit == "KITSU") {
								 if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						              $mont_msbcm = $mont_bc * $bnpmps;					
						         } else {
						              $mont_msbcm = $mont_bc * $bnpnmps;				
						         }
								
							} elseif($type_kit == "KITTECH") {
								$id_cycle_formation = $request->getParam("id_cycle_formation");
								$findcycle = $m_cycle->find($id_cycle_formation,$cycle);
								$mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
							}
					    }
						
						if(isset($_POST['mfs']) && $_POST['mfs'] == 1) {
						    $mfs = floor(Util_Utils::getParametre('CAPS','valeur'));
							$vfs = 1;
							$avecfs = true;
					    }
						
						if(isset($_POST['mmat']) && $_POST['mmat'] == 1) {
						    //$mmat = floor(Util_Utils::getParametre('MMAT','valeur'));
							$vmat = 1;
							$dist_peripherique = $request->getParam("dist_peripherique");
							$mmat = $request->getParam("montant_peripherique");
							
							$finddistperi = $m_mapmoral->find($dist_peripherique,$membremoral);
						    if($finddistperi == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_peripherique."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mci']) && $_POST['mci'] == 1) {
						    //$mci = floor(Util_Utils::getParametre('MCI','valeur')) * floor(Util_Utils::getParametre('MSBCri','PS'));
							$vci = 1;
							$dist_connectivite = $request->getParam("dist_connectivite");
							$mci = floor($request->getParam("montant_connectivite")) * floor(Util_Utils::getParametre('MSBCri','PS'));
							
							$finddistcon = $m_mapmoral->find($dist_connectivite,$membremoral);
						    if($finddistcon == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_connectivite."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mass']) && $_POST['mass'] == 1) {
						    //$mass = floor(Util_Utils::getParametre('MASS','valeur'));
							$vass = 1;
							$dist_assurance = $request->getParam("dist_assurance");
							$mass = $request->getParam("montant_assurance");
							
							$finddistass = $m_mapmoral->find($dist_assurance,$membremoral);
						    if($finddistass == false) {
						        $db->rollback();
					            $this->view->param = $param;
							    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                        $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_assurance."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mcb']) && $_POST['mcb'] == 1) {
						    //$mcb = floor(Util_Utils::getParametre('MCB','valeur'));
							$mcb = $request->getParam("montant_compte");
							$vcb = 1;
					    }
						
						$mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                        $multiple = $integrateur_montant/$mont_msbcm;
					} 
					
					/*
					elseif($programme == "BC" && $statut == "SansListe" && 
					    ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                        || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                        || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
						
						if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						    $mont_msbcm = $mont_bc * $bnpmps;
							$mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
							$mont_msbcm = $mont_msbcm + $mfs + $mmat + $mci + $mass + $mcb;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} 
					}
					*/
					
					if(substr($membre_integrateur,19,1) == 'P')  {
					    $findmembre = $m_map->find($membre_integrateur,$membre);
					    if($findmembre == false) {
						   $db->rollback();
					       $this->view->param = $param;
					       //$this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					       return;
					    }
						
						if($membre->desactiver != 0) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
					} else {
						$findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Le numéro membre du souscripteur saisi  ".$membre_integrateur."  est introuvable ...";
					        return;
						}
						
						if($membremoral->desactiver != 0) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
						
					}
					
					if($findbancaire == NULL) {
					   $db->rollback();
					   $this->view->param = $param;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
					   $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					   return;
				    }
					
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
				   
				    if(substr($membre_integrateur,19,1) == 'M')  {
				       $select = $db_franchise->select();
				       $select->where('code_membre_franchise like  ?', $membre_integrateur);
				       $rowsfranchise = $db_franchise->fetchRow($select);
				  
				       if(count($rowsfranchise) == 0) {
					      $db->rollback();
			              $this->view->param = $param;
					      $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                          $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                          return;
				       }
					   
					}
				   
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					if($typeintegrateur->montant_param  > $integrateur_montant) {
					    $db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					    return;
					}
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					/*
					if(stripos($multiple, ".") != FALSE && $programme == "BC" && $statut == "SansListe" && 
					    ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                        || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                        || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
							
						$db->rollback();
					    $this->view->param = $param;
					    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				        $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				        return;	
							
					}
					*/
					
					
					if(substr($membre_integrateur,19,1) == 'M' &&  ($integrateur_type == 1  || $integrateur_type == 3 ||  $integrateur_type == 5 ||  $integrateur_type == 7))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					    return;
					}
					
					if(substr($membre_integrateur,19,1) == 'P' &&  ($integrateur_type == 21  || $integrateur_type == 24 ))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les personnes morales sont autorisées à effectuer cette opération ....";
					    return;
					}
					
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Votre Code BAn  incorrect ...";
                        return; 
					}
					  
					if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Montant restant du BAn est insuffisant ...";
                        return; 
					}
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						    $db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Montant restant du BAn est insuffisant ...";
                            return; 
						}
						
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->param = $param;
							//$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                            return;   
						}
						      
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$i = 0;
					    $reste = $integrateur_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
										 
                                    }
								  
								}
								//Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
								 
                            } else  {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
							   
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
                            }							   
                            $i++;
                        }
							 
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
												
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						$bon_neutre2M->update($bon_neutre2);
						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						
						$integrateur_montant_kacm = 0;
						$integrateur_montant_bc = 0;
						
						if((isset($_POST['mfs']) && $_POST['mfs'] == 1)) {
							$integrateur_montant_kacm = $multiple * $mfs;
							$integrateur_montant_bc = $integrateur_montant - $integrateur_montant_kacm;
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_bc);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_kacm);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
						    
						
						} else {
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
						}
						
						$m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

                        $m_mstiers = new Application_Model_EuMstiersMapper();
				        $mstiers = new Application_Model_EuMstiers();
						
						$finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					    $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
						
						
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						if(isset($_POST["souscription_login"])) {
        				if($finddepot == NULL && $findmstiers == NULL) {		
	                       $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
						}
						
						if($finddepot == NULL && $findmstiers == NULL && $rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "") {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Login déjà existant ...";
						   return;
	                    }  else if($finddepot == NULL && $findmstiers == NULL && $request->getParam("souscription_passe") != $request->getParam("confirme") && $request->getParam("souscription_passe") != "") {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Mot de passe incorret ...";
						   return;
	                    }
						}
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $souscription->setSouscription_nom($membre->nom_membre);
                            $souscription->setSouscription_prenom($membre->prenom_membre);
						    $souscription->setSouscription_mobile($membre->portable_membre);
						    $souscription->setSouscription_personne("PP");
						    $souscription->setSouscription_ville($membre->ville_membre);
                            $souscription->setSouscription_quartier($membre->quartier_membre);
                            $souscription->setSouscription_email($membre->email_membre);
						} else {
						    $souscription->setSouscription_raison($membremoral->raison_sociale);
                            $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                            $souscription->setCode_statut($membremoral->code_statut);
						    $souscription->setSouscription_mobile($membremoral->portable_membre);
						    $souscription->setSouscription_personne("PM");
						    $souscription->setSouscription_ville($membremoral->ville_membre);
                            $souscription->setSouscription_quartier($membremoral->quartier_membre);
                            $souscription->setSouscription_email($membremoral->email_membre);
						}
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");


                        if(isset($_POST["integrateur_type_candidat"])) {
                           $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                        } else {
                           $souscription->setSouscription_type_candidat(NULL);
                        }

    
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);
						
			    $compteur_souscription = $db->lastInsertId();


                            $cmfh = new Application_Model_EuCmfh();
                            $cmfh_mapper = new Application_Model_EuCmfhMapper();
					
			    if(isset($_POST["integrateur_type_candidat"]))  {
				  $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($request->getParam("code_membre"),$request->getParam("integrateur_type_candidat"));
				  if($findrowscmfh == false)  {
					$compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					$cmfh->setId_cmfh($compteur_cmfh);
				        $cmfh->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				        $cmfh->setId_type_candidat($request->getParam("integrateur_type_candidat"));
					$cmfh->setCode_membre($request->getParam("code_membre"));
                                        $cmfh->setCode_zone_create($request->getParam("code_zone"));
                                        $cmfh->setId_pays($request->getParam("id_pays"));
                                        $cmfh->setId_region($request->getParam("id_region"));
                                        $cmfh->setId_prefecture($request->getParam("id_prefecture"));
                                        $cmfh->setId_canton($request->getParam("id_canton"));
					$cmfh_mapper->save($cmfh);
			           }
			     }
						
			     ///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						      
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						
						$a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						   
						/*if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
					    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                            $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                            $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                            $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                        }*/
						   
						if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22)  {
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						   
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso(0);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        $a->setIntegrateurCanton($request->getParam("id_canton"));
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("code_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						   
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);
						
						//Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";

                        if($finddepot == NULL && $findmstiers == NULL) {
							//$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
						    } else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
						    $date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
						
						//insertion dans les tables eu_mstiers
					    $id_souscription = $compteur_souscription;
                        //$id_mstiers = $m_mstiers->findConuter() + 1;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("code_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
								  
                        //$mstiers->setId_mstiers($id_mstiers);
						if((isset($_POST['mfs']) && $_POST['mfs'] == 1)) {
							$mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_kacm);
					        $mstiers->setType_souscription("CAPS");  
							
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
							
                            $mstiers->setId_cycle_formation($id_cycle_formation);
                            							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique(NULL);
                            $mstiers->setDistributeur_connectivite(NULL);
                            $mstiers->setDistributeur_assurance(NULL);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
							
							
							$mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($integrateur_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_bc);
					        $mstiers->setType_souscription($type_souscription);  
                            $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
							
						} else {
					        $mstiers->setCode_membre($code_integrateur);
					        $mstiers->setMontant_souscris($montant_souscris);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($montant_souscris);
					        $mstiers->setType_souscription($type_souscription);  
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);  
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						   
					        if($param == 4) {
							    $mstiers->setType_souscripteur("ODD");
						    } elseif($param == 5)  {
						        $mstiers->setType_souscripteur("USER");  								  
					        } else {
							    $mstiers->setType_souscripteur("CMFH");
						    }
                            $m_mstiers->save($mstiers);
						
						}
						
                        $id_mstiers = $db->lastInsertId();						
							   
                        // script de creation de TE de prestation
						$eucompte = new Application_Model_EuCompte();
					    $m_compte = new Application_Model_EuCompteMapper();
									
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
									
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
						$code_te = "";
						$code_tegc = "";
						$nom_tegc = "";
									
						$code_membre = $request->getParam("code_membre");
							   
						if(substr($code_membre,19,1)=='P') {
							$nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						} else {
						    $nom_tegc = $membremoral->raison_sociale;
					    }
									
						$code_zone     = $request->getParam("code_zone");
			            $id_pays       = $request->getParam("id_pays");
			            $id_region     = $request->getParam("id_region");
			            $id_prefecture = $request->getParam("id_prefecture");
			            $id_canton     = $request->getParam("id_canton");
									
						$num_compte = 'NB-TPAGCP-'.$code_membre;
				        $res = $m_compte->find($num_compte,$eucompte);
									
									
						$num_comptets = 'NB-TSGCP-'.$code_membre;
				        $rests = $m_compte->find($num_comptets,$eucompte);
									
						if(!$rests) {
						    $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                $eucompte->setCode_membre($code_membre)
                                         ->setCode_membre_morale(NULL);
							} else  {
                                $eucompte->setCode_membre(NULL)
                                         ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);		
                        }
							
						// fin script de creation TE 
					    if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						} else {
                            //$eutegc = new Application_Model_DbTable_EuTegc();
                            //$select = $eutegc->select();
							//if(substr($code_membre,19,1)=='P') {
                            //$select->where("code_membre_physique like ? ", $code_membre);
							//} else {
							//$select->where("code_membre like ? ", $code_membre);
							//}
                            //$select->limit(1);
                            //$rowseutegc = $eutegc->fetchRow($select);
                            //$code_tegc = $rowseutegc->code_tegc;
							
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
							
							$code_tegc = $code_te;
					    }
						
						
						if($type_souscription != "BPS")   {
                            //$code_banque = $request->getParam("code_banque");
                            //$referencepaie   = $request->getParam("num_compte");
							
							$code_banque = $findbancaire->code_banque;
							$referencepaie = $findbancaire->num_compte_bancaire;
					        $type_bnp = $type_souscription;
								
                            $montant = $request->getParam("integrateur_montant");
					        $souscription_id = $compteur_souscription;
						    $typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							$url,
							array(
                                CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 30000000,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "POST",
								CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							));
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
							    //$db->commit();
							    //if($finddepot == NULL && $findmstiers == NULL) {
							    //$sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						        //} else {
							    //  $sessionmcnp->error = "Operation bien effectuee ...".$response->resultat;
							    //}
								
								$db->commit();
							    $sessionmcnp->error = $response->message;
							    $this->_redirect('/index/addintegration/param_int/'.$param);
								
							} else {
							   $db->rollback();
							   $this->view->param = $param;
					           //$this->view->code_membre = $membre_integrateur;
					           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							   $sessionmcnp->error = $response->message;
							   //"Echec operation ... : ".$error.$response->resultat;
							   return;
							}
							curl_close($url);
						}
					    else {
							//$id_bps_souscription = $m_bpssouscription->findConuter() + 1;
							//$bpssouscription->setId_bps_souscription($id_bps_souscription);
							
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($request->getParam("integrateur_montant"));
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(NULL);
							$bpssouscription->setAllouer(0);
                            $m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmcnp->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/index/addintegration/param_int/'.$param);
						}
					
		            }
		
		        } catch(Exception $exc) {				   
				    $db->rollback();
					$this->view->param = $param;
					$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
			    }
			}  else  {
			    $this->view->param = $param;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
		}
	}



        public function addintegrationpreAction()   {
		/* page administration/addintegration - Ajout d'une integration */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		$t_canton = new Application_Model_DbTable_EuCanton();
	    $ville  = new Application_Model_EuVille();
        $m_ville  = new Application_Model_EuVilleMapper();
	    $m_souscription = new Application_Model_EuSouscriptionMapper();
		
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
		
		$param = (int)$this->_request->getParam('param_int');
	    $this->view->param = $param;
		
	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $cantons  = $t_canton->fetchAll();
        $villes   = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes  = $villes;
		
	    $request = $this->getRequest();
		if($request->isPost())  {
			if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			    && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
			    && isset($_POST['integrateur_email']) && $_POST['integrateur_email']!=""
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""			   
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
		        
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();

					$param = (int) $this->_request->getParam('param_int');
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						
					$membre_integrateur  = $request->getParam("code_membre");
					$integrateur_type  = $request->getParam("integrateur_type");
					$m_typeintegrateur->find($integrateur_type,$typeintegrateur);
					$code_membre_integrateur = '';
					
					$integrateur_montant = $request->getParam("integrateur_montant");
					$integrateur_nombre  = $request->getParam("integrateur_nombre");
					   
					$montant_souscription = $integrateur_nombre * 2187.5;
					
					if(substr($membre_integrateur,19,1) == 'P')  {
						   $findmembre = $m_map->find($membre_integrateur,$membre);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmcnp->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						   } 						 
					} else {
						   $findmembre = $m_mapmoral->find($_POST['code_membre'],$membremoral);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmcnp->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						}
						
					}
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
				      $this->view->integrateur_email   = $request->getParam("integrateur_email");
				      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					  $this->view->id_ville   = $request->getParam("integrateur_ville");
					  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					  $this->view->code_membre = $membre_integrateur;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $sessionmcnp->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'M')  {
				       $select = $db_franchise->select();
				       $select->where('code_membre_franchise like  ?', $membre_integrateur);
				       $rowsfranchise = $db_franchise->fetchRow($select);
				  
				       if(count($rowsfranchise) == 0) {
					       $db->rollback();
			               $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                           return;
				       }
					}
				   
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $membre_integrateur);
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->integrateur_email   = $request->getParam("integrateur_email");
					  $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					  $this->view->id_ville   = $request->getParam("integrateur_ville");
					  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					  $this->view->code_membre = $membre_integrateur;
					  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                      $sessionmcnp->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					
					if(substr($membre_integrateur,19,1) == 'M' &&  ($integrateur_type == 1  || $integrateur_type == 3 ||  $integrateur_type == 5 || $integrateur_type == 7))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
				        $this->view->id_ville   = $request->getParam("integrateur_ville");
					    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $sessionmcnp->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					    return;
				    
					}
					
					if(substr($membre_integrateur,19,1) == 'P' &&  ($integrateur_type == 21  || $integrateur_type == 24 ))  {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
				        $this->view->id_ville   = $request->getParam("integrateur_ville");
					    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $sessionmcnp->error = "Seuls les personnes morales sont autorisées à effectuer cette opération ....";
					    return;
					}
					
					
					
					
					if($typeintegrateur->montant_param >  $integrateur_montant) {
					    $db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $sessionmcnp->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					    return;
					}
					
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $sessionmcnp->error = "Votre Code BAn  incorrect ...";
                        return; 
					}
						
					if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						$db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
					    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                        return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
				        $bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);
				        
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant  ... ".$cumulbon;
                            return; 
						}
						
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $sessionmcnp->error = "Le code membre du CMFH doit être celui du bon neutre ...";
                            return;   
						}
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$i = 0;
					    $reste = $montant_souscription;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
								  
								}
								
								//Mise à jour  de eu_bon_neutre_utilise
								$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						        $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						        $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						        $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						        $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        if(substr($membre_integrateur,19,1) == 'P')  {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						        } else {
						            $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        }
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						        $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	        $bon_neutre_utilise->setUsertable("utilisateur");
              		   	        $bon_neutre_utilise->setUser_id(1);
						        $bon_neutre_utiliseM->save($bon_neutre_utilise);
								
								
								//Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                  $bon_neutre_detailM->update($lignedetbon);


						    
							
								 
                               } else {
							      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);
						  

						    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
						          $reste = 0;
                               }							   
                               $i++;
                            }
							
							////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
						    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						    //$bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						    $bon_neutre2M->update($bon_neutre2);
						  
						    /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							
							
							$m_depotvente = new Application_Model_EuDepotVenteMapper();
				            $depotvente = new Application_Model_EuDepotVente();	   
						    $finddepot = $m_depotvente->fetchAllByMembre($_POST['code_membre']);
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                       $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");


                        if(isset($_POST["integrateur_type_candidat"])) {
                            $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                        } else {
                            $souscription->setSouscription_type_candidat(NULL);
                        }
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
						
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));
			            
                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			   $souscription->setPublier(0);
			   $souscription->setErreur(0);
			   $souscription->setId_canton($request->getParam("id_canton"));
                           $souscription_mapper->save($souscription);
						
			   $compteur_souscription = $db->lastInsertId();

                             $cmfh = new Application_Model_EuCmfh();
                             $cmfh_mapper = new Application_Model_EuCmfhMapper();
					
			     if(isset($_POST["integrateur_type_candidat"])) {
				  $findrowscmfh = $cmfh_mapper->findByCmfhAndCandidat($request->getParam("code_membre"),$request->getParam("integrateur_type_candidat"));
				  if($findrowscmfh == false)  {
					$compteur_cmfh = $cmfh_mapper->findConuter() + 1;
					$cmfh->setId_cmfh($compteur_cmfh);
					$cmfh->setDate_creation($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					$cmfh->setId_type_candidat($request->getParam("integrateur_type_candidat"));
					$cmfh->setCode_membre($request->getParam("code_membre"));
                                        $cmfh->setCode_zone_create($request->getParam("code_zone"));
                                        $cmfh->setId_pays($request->getParam("id_pays"));
                                        $cmfh->setId_region($request->getParam("id_region"));
                                        $cmfh->setId_prefecture($request->getParam("id_prefecture"));
                                        $cmfh->setId_canton($request->getParam("id_canton"));
				        $cmfh_mapper->save($cmfh);
				   }
			       }
						
			       ///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						$nombre_compte = $request->getParam("integrateur_nombre");
						
						if($nombre_compte >= 10)   {
						    include("Transfert.php");
		                   if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                      $chemin = "integrateurs";
		                      $file = $_FILES['integrateur_diplome']['name'];
		                      $file1='integrateur_diplome';
		                      $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                   } else { $integrateur_diplome = ""; }
						   
						   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                   } else {$integrateur_document = "";}
						      
						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();
						   
						   //$compteur = $ma->findConuter() + 1;
						   //$a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);
						   
						   if($integrateur_type == 1 || $integrateur_type == 2 || $integrateur_type == 3|| $integrateur_type == 4 || $integrateur_type == 5 || $integrateur_type == 6 || $integrateur_type == 7 || $integrateur_type == 8
							     || $integrateur_type == 25 || $integrateur_type == 26 || $integrateur_type == 27 || $integrateur_type == 28) {
                                 $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                 $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                 $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                           }
						   
						   if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17|| $integrateur_type == 18 || $integrateur_type == 19 || $integrateur_type == 20 || $integrateur_type == 22)  {
                                 if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($integrateur_type == 15 || $integrateur_type == 16 || $integrateur_type == 17 || $integrateur_type == 18 || $integrateur_type == 22 || $integrateur_type == 29 || $integrateur_type == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                           }
						   
						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso(0);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                           $a->setIntegrateurCanton($request->getParam("id_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("code_membre"));
                           $ma->save($a);
						   
						   $compteur = $db->lastInsertId();
						   
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);
		
                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);
						   
						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						   //$cpte = $m_complement->findConuter() + 1;
						   //$complement->setId_complement_quittance($cpte);
						   
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						   $m_complement->save($complement);
						   $cpte = $db->lastInsertId();
						   
						   $code_agence = '';
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
						   if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {								 
							  $membreasso   = new Application_Model_EuMembreasso();
                              $m_membreasso = new Application_Model_EuMembreassoMapper();
		                      $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);
									
							  $association = new Application_Model_EuAssociation();
                              $m_association = new Application_Model_EuAssociationMapper();
		                      $m_association->find($membreasso->membreasso_association,$association);
		                      $code_agence = $association->code_agence;
                            }
							
							// Création du compte utilisateur intégrateur
							   $souscription = new Application_Model_EuSouscription();
                               $m_souscription = new Application_Model_EuSouscriptionMapper();
		                       $m_souscription->find($compteur_souscription,$souscription);
							   $integrateur_souscription = $compteur_souscription;
							   
							   $date_id = Zend_Date::now();
                               $association = new Application_Model_EuAssociation();
                               $association_mapper = new Application_Model_EuAssociationMapper();
							   
						       $login = "";
						       $password = "";
							   
							   if($finddepot == NULL) {
							       //$compteur_association = $association_mapper->findConuter() + 1;
                                   //$association->setAssociation_id($compteur_association);
								   
                                    $association->setAssociation_mobile($souscription->souscription_mobile);
								    if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								    } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                    }
								   
                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);
								   $compteur_association = $db->lastInsertId();
								   
								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							        if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                      $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)]; 
                                      }
								      $password = $login.$login; 
								    } else {
								      $login = $souscription->souscription_login;
								      $password = $souscription->souscription_passe;
								    }
								  
								    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    //$membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								    if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								    } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                    }								  
                                  
                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);
							
						        }
							   
							      // Transfert
								  $eusouscription = new Application_Model_EuSouscription();
		                          $souscriptionM = new Application_Model_EuSouscriptionMapper();
								 
								  $date = new Zend_Date();
		                          $compte_map = new Application_Model_EuCompteMapper();
                                  $compte      = new Application_Model_EuCompte();
			                      $sms_money   = new Application_Model_EuSmsmoney();
                                  $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                      $det_sms   = new Application_Model_EuDetailSmsmoney();
			                      $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                      $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                      $det_vtesms  = new Application_Model_EuDetailVentesms();
								 
								  // insertion dans la table eu_depot_vente
				                  $m_dvente = new Application_Model_EuDepotVenteMapper();
				                  $dvente = new Application_Model_EuDepotVente();
								  
								  $membretierscode = new Application_Model_EuMembretierscode();
                                  $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();
									  
								  $fcaps = Util_Utils::getParametre('CAPS','valeur');
									 
								  $membre_pbf = '0000000000000000001M';
	                              $code_compte_pbf = "NN-TR-".$membre_pbf;
			                      $ret = $compte_map->find($code_compte_pbf,$compte);
								  
								  $souscriptionM->find($compteur_souscription,$eusouscription);
								  
								  $mobile = $eusouscription->souscription_mobile;
								  $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
								  $nbre_compte = $eusouscription->souscription_nombre;
								  
								  $montant = $nbre_compte * $fcaps;
								  // Traitement des produits CAPS
								  $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
								  $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
								  
								  
								  
					              $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                  $dvente->setCode_membre($_POST['code_membre']);   
			                      $dvente->setCode_produit('CAPS');
				                  $dvente->setMont_depot($montant);
				                  $dvente->setMont_vendu(0);
				                  $dvente->setSolde_depot($montant);
				                  $dvente->setId_utilisateur(null);
				                  $dvente->setType_depot('AvecListe');
				                  $dvente->setSouscription_id($compteur_souscription);
				                  $m_dvente->save($dvente);
								  
								  
								  for($i = 0; $i < $nbre_compte; $i++) {
									 $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
									 $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
									 $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                     $membretierscode->setMembretierscode_membretiers(0);
                                     $membretierscode->setMembretierscode_code($membretierscode_code);
                                     $membretierscode->setMembretierscode_souscription($compteur_souscription);
                                     $membretierscode->setPublier(0);
                                     $membretierscode->setCode_membre(NULL);
									 $membretierscode->setAllocation_cmfh_id(NULL);
                                     $membretierscode_mapper->save($membretierscode);
								   }
								   
								    $compteur_sms = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');
						           
								    // script de creation de TE de prestation
								    $eucompte = new Application_Model_EuCompte();
								    $m_compte = new Application_Model_EuCompteMapper();
									
								    $prk = new Application_Model_EuPrk();
                                    $m_prk = new Application_Model_EuPrkMapper();
									
                                    $te   = new Application_Model_EuTegc();
									$m_te = new Application_Model_EuTegcMapper();
									$code_te = "";
									$nom_tegc = "";
									
									$code_membre = $_POST['code_membre'];
									if(substr($code_membre,19,1)=='P') {
									   $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
									} else {
									   $nom_tegc = $membremoral->raison_sociale;
									}
									
									$code_zone     =   $_POST['code_zone'];
			                        $id_pays       =   $_POST['id_pays'];
			                        $id_region     =   $_POST['id_region'];
			                        $id_prefecture =   $_POST['id_prefecture'];
			                        $id_canton     =   $_POST['id_canton'];
									
								    $num_compte = 'NB-TPAGCP-'.$code_membre;
				                    $res = $m_compte->find($num_compte,$eucompte);
									
									if(!$res) {
									    $eucompte->setCode_cat('TPAGCP')
                                             ->setCode_compte($num_compte)
											 ->setCode_type_compte('NB')
                                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                             ->setDesactiver(0)
                                             ->setLib_compte('TPAGCP')
                                             ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
										
										$code_te = $m_te->getLastTegcByMembre($code_membre);
										if ($code_te == NULL) {
			                               $code_te = 'TEGCP'.$code_membre. '00001';         
			                            } else {
			                               $num_ordre = substr($code_te, -5);
                                           $num_ordre++;
                                           $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                            }
										
										$te->setCode_tegc($code_te);
			                            $te->setId_filiere(NULL);
			                            $te->setMdv(12);
			                            $te->setTranche_payement(1);
										if(substr($code_membre,19,1)=='M') {
			                               $te->setCode_membre($code_membre);
										} else {
                                           $te->setCode_membre_physique($code_membre);
                                        }										
			                            $te->setMontant(0);
			                            $te->setMontant_utilise(0);
			                            $te->setSolde_tegc(0);
			                            $te->setId_utilisateur(NULL);
			                            $te->setNom_tegc($nom_tegc);
			                            $te->setNom_produit("Prestation");
			                            $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
										if(($integrateur_type == 21  || $integrateur_type == 24 ))  {
											
											$te->setType_tegc("DISTRIBUTEUR");
										} else {
					                      $te->setType_tegc("PRESTATAIRE");
										  
										}
										$te->setRecurrent_illimite(0);
										$te->setRecurrent_limite(0);
										$te->setNonrecurrent(1);
										$te->setPeriode1(0);
										$te->setPeriode2(0);
										$te->setPeriode3(0);
										$te->setFormel(0);
										$te->setRegime_tva(0);
										$te->setSpecial(0);
										$te->setOrdinaire(1);
										$te->setSubvention(0);
										
										$te->setCode_zone($code_zone);
				                        $te->setId_pays($id_pays);
				                        $te->setId_region($id_region);
				                        $te->setId_prefecture($id_prefecture);
				                        $te->setId_canton($id_canton);

                                        $m_te->save($te);

                                        $id_prk = $m_prk->findConuter() + 1;
					                    $prk->setId_prk($id_prk);
					                    $prk->setCode_tegc($code_te);
					                    $prk->setValeur(7);
					                    $m_prk->save($prk);
                                        										
									}
									
									$num_comptets = 'NB-TSGCP-'.$code_membre;
				                    $rests = $m_compte->find($num_comptets,$eucompte);
									
									if(!$rests) {
									    $eucompte->setCode_cat('TSGCP')
                                                 ->setCode_compte($num_comptets)
												 ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TSGCP')
                                                 ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
									
                                    }
								    // fin script de creation TE
										  
								    $db->commit();
								    if($finddepot == NULL) {
								     $sessionmcnp->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
								    } else {
								     $sessionmcnp->error = "Opération bien effectuée ...";
								   }
								   $this->_redirect('/index/addintegrationpre/param_int/'.$param);	
						
				        }  else {
						   $db->rollback();
						   $sessionmcnp->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 10 ...";
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
						   return;
						}
				
				
				
				    }
				
				} catch(Exception $exc) {				   
				    $db->rollback();
					$this->view->param = $param;
				    $this->view->integrateur_email   = $request->getParam("integrateur_email");
				    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					$this->view->id_ville   = $request->getParam("integrateur_ville");
					$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					$this->view->code_membre = $membre_integrateur;
				    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
			    }
		
			}
		
		}
		
	}



	
	
    public  function  addintegrateurAction()   {
	    /* page public/addintegrateur - Ajout d'un integrateur */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

	    $param = (int) $this->_request->getParam('param');
	    
	    $typeintegrateur = new Application_Model_EuTypeIntegrateur();
        $typeintegrateurM = new Application_Model_EuTypeIntegrateurMapper();
        $typeintegrateurM->find($param,$typeintegrateur);
		
		$t_zone = new Application_Model_DbTable_EuZone();
		$t_pays = new Application_Model_DbTable_EuPays();
		$t_region = new Application_Model_DbTable_EuRegion();
		$t_prefecture = new Application_Model_DbTable_EuPrefecture();
		$t_canton = new Application_Model_DbTable_EuCanton(); 
		$t_ville = new Application_Model_DbTable_EuVille();
		 
		$zones = $t_zone->fetchAll();
		$pays = $t_pays->fetchAll();
		$regions = $t_region->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
		$cantons  = $t_canton->fetchAll();
		$selection = $t_ville->select();
	    $selection->order('lib_ville asc');
        $villes = $t_ville->fetchAll($selection);
		 
		$this->view->param = $param;
		$this->view->integrateur_montant = $typeintegrateur->montant_param;
		$this->view->zones = $zones;
        $this->view->pays = $pays;
		$this->view->regions = $regions;
		$this->view->prefectures = $prefectures;
		$this->view->cantons = $cantons;
		$this->view->villes = $villes;
		 
		$request = $this->getRequest();
		if($request->isPost())  {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			    && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!="" && $_POST['integrateur_montant'] > 0 			   
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  { 
                
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
					$membre = new Application_Model_EuMembre();
	                $m_map  = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$typeintegrateur = new Application_Model_EuTypeIntegrateur();
                    $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
                    $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
					$ville = new Application_Model_EuVille();
	                $m_ville  = new Application_Model_EuVilleMapper();
					
					$param = (int) $this->_request->getParam('param');
					$m_typeintegrateur->find($param,$typeintegrateur);
						
					$date_id = Zend_Date::now();
					$id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
					
					$membre_integrateur  = $request->getParam("integrateur_membre");
					$code_membre_integrateur = '';   
					$integrateur_montant = $request->getParam("integrateur_montant");
					$statut = $request->getParam("liste");
					$programme = $request->getParam("programme");
					$multiple = "";
					$mont_msbcm = "";
					$type_souscription = "";
					$bps_demande = "";
					$delai = "";
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps  = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");		
					} else if($programme == "BC") {
					    $type_souscription = $request->getParam("type_souscription_bc");	
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $integrateur_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						    $mont_msbcm = $mont_bc * $bnpmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
                            $multiple = $integrateur_montant/$mont_msbcm;							
						}   						
					}
					
					if(substr($membre_integrateur,19,1) == 'P')  {
					    $findmembre = $m_map->find($membre_integrateur,$membre);
					    if($findmembre == false) {
						   $db->rollback();
					       $this->view->param = $param;
					       //$this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                   $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					       return;
					    }
						
						if($membre->desactiver == 1) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
						
						
					} else {
						$findmembre = $m_mapmoral->find($membre_integrateur,$membremoral);
						if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
							//$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $this->view->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					        return;
						}
						
						if($membremoral->desactiver == 1) {
							$db->rollback();
					        $this->view->param = $param;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
							$this->view->error = "Ce souscripteur dont le code membre que voici  ".$membre_integrateur."  n'est pas autorisé à effectuer cette opération ...";
							return;
						}
						
					}
					  
					if($typeintegrateur->montant_param  > $integrateur_montant) {
					    $db->rollback();
					    $this->view->param = $param;
					    //$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					    return;
					}
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   //$this->view->code_membre = $membre_integrateur;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   //$this->view->code_membre = $membre_integrateur;
					   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				       $this->view->error = "Le montant de souscription  ".$integrateur_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					if(substr($membre_integrateur,19,1) == 'M' &&  ($param == 1  || $param == 3 ||  $param == 5 ||  $param == 7))  {
						$db->rollback();
					    $this->view->param = $param;
						//$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					    return;
					}
					
					
					/*  
					if(($param == 23) && (substr($membre_integrateur,19,1) == 'M')) {
					    $db->rollback();
					    $this->view->param = $param;
					    //$this->view->id_ville   = $request->getParam("integrateur_ville");
						//$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    $this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                $this->view->error = "Seuls les membres personnes physiques sont autorises a effectuer cette operation ...";
					    return;
					}
					*/
					  
					$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					if(count($bon_neutre) == 0) {
						$db->rollback();
					    $this->view->param = $param;
						//$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Votre Code BAn  incorrect ...";
                        return; 
					}
					  
					if(($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant))  {
						$db->rollback();
					    $this->view->param = $param;
						//$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $this->view->error = "Montant restant du BAn est insuffisant ...";
                        return; 
					}
					   
					   
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $integrateur_montant)) {
					       
						$bon_neutre2 = new Application_Model_EuBonNeutre();
						$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						$code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						$lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						   
						   
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $integrateur_montant) || ($cumulbon < $integrateur_montant)) {
						    $db->rollback();
					        $this->view->param = $param;
							//$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Montant restant du BAn est insuffisant ...";
                            return; 
						}
						   
						   
						if($membre_integrateur != $code_membre_integrateur) {
						    $db->rollback();
					        $this->view->param = $param;
							//$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                            return;   
						}
						   
						   
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						$i = 0;
					    $reste = $integrateur_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							    $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									foreach ($appro_detail as $appro) {
									    $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
										 
                                    }
								  
								}
								//Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);


						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						//$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						//$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
								 
                            } else  {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
							   
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						  

						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						//$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						//$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
							 
						        $reste = 0;
                            }							   
                            $i++;
                        }
							 
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $integrateur_montant);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $integrateur_montant);
						$bon_neutre2M->update($bon_neutre2);
						  
						/*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						//$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						//$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
							 
					    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();

                        $m_mstiers = new Application_Model_EuMstiersMapper();
				        $mstiers = new Application_Model_EuMstiers();
							 
					    //$m_dmscm = new Application_Model_EuDetailMscmMapper();
				        //$dmscm = new Application_Model_EuDetailMscm();
							 
						$finddepot = $m_depotvente->fetchAllByMembre($membre_integrateur);
					    $findmstiers = $m_mstiers->fetchAllByMembre($membre_integrateur);
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						    $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						    $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
							 
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   //$this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL && $findmstiers == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   //$this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $this->view->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						//$compteur_souscription = $souscription_mapper->findConuter() + 1;
						//$souscription->setSouscription_id($compteur_souscription);
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $souscription->setSouscription_nom($membre->nom_membre);
                            $souscription->setSouscription_prenom($membre->prenom_membre);
						    $souscription->setSouscription_mobile($membre->portable_membre);
						    $souscription->setSouscription_personne("PP");
						    $souscription->setSouscription_ville($membre->ville_membre);
                            $souscription->setSouscription_quartier($membre->quartier_membre);
                            $souscription->setSouscription_email($membre->email_membre);
						} else {
						    $souscription->setSouscription_raison($membremoral->raison_sociale);
                            $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                            $souscription->setCode_statut($membremoral->code_statut);
						    $souscription->setSouscription_mobile($membremoral->portable_membre);
						    $souscription->setSouscription_personne("PM");
						    $souscription->setSouscription_ville($membremoral->ville_membre);
                            $souscription->setSouscription_quartier($membremoral->quartier_membre);
                            $souscription->setSouscription_email($membremoral->email_membre);
						}
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
						//$m_ville->find($request->getParam("integrateur_ville"),$ville);
						
                        if($finddepot == NULL && $findmstiers == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);

						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
							 
						include("Transfert.php");
		                if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_diplome']['name'];
		                    $file1='integrateur_diplome';
		                    $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                } else { $integrateur_diplome = ""; }
						   
						if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                    $chemin = "integrateurs";
		                    $file = $_FILES['integrateur_document']['name'];
		                    $file1='integrateur_document';
		                    $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                } else {$integrateur_document = "";}
						      
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a  = new Application_Model_EuIntegrateur();
                        $ma = new Application_Model_EuIntegrateurMapper();
						   
					    //$compteur = $ma->findConuter() + 1;
						//$a->setIntegrateur_id($compteur);
						
                        $a->setIntegrateur_type($request->getParam("integrateur_type"));
                        $a->setIntegrateur_souscription($compteur_souscription);
						
						$a->setIntegrateur_critere1('');
                        $a->setIntegrateur_critere2('');
                        $a->setIntegrateur_critere3('');
						   
						/*if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
					    || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                            $a->setIntegrateur_critere1($request->getParam("integrateur_critere1"));
                            $a->setIntegrateur_critere2($request->getParam("integrateur_critere2"));
                            $a->setIntegrateur_critere3($request->getParam("integrateur_critere3"));
                        }*/
						   
						if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                            if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                            }
                            $a->setIntegrateur_education($request->getParam("integrateur_education"));
                            if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                            }
                            $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                            $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                            $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                            $a->setIntegrateur_document($integrateur_document);
                            $a->setIntegrateur_diplome($integrateur_diplome);
                        }
						   
						$a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                        $a->setIntegrateur_membreasso(0);
                        $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			            $a->setPublier(0);
						if(substr($membre_integrateur,19,1) == 'P')  {
                            $a->setIntegrateurAdresse($membre->quartier_membre);
						} else {
							$a->setIntegrateurAdresse($membremoral->quartier_membre);
						}
                        $a->setIntegrateurCanton($request->getParam("id_canton"));
                        $a->setIntegrateurVille(null);
						$a->setCode_membre($request->getParam("integrateur_membre"));
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						   
						///////////////////////////////////////////////////////////////////////////////////////////////////////
                        $integrateur  = new Application_Model_EuIntegrateur();
                        $integrateurM = new Application_Model_EuIntegrateurMapper();
                        $integrateurM->find($compteur,$integrateur);
		
                        $integrateur->setPublier(1);
		                $integrateurM->update($integrateur);
						   
						$id_integrateur = $integrateur->integrateur_id;
						$complement   = new Application_Model_EuComplementQuittance();
                        $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						//$cpte = $m_complement->findConuter() + 1;
						//$complement->setId_complement_quittance($cpte);
						
						$complement->setIntegrateur_id($id_integrateur);
						$complement->setSouscription_id($compteur_souscription);
						$complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						$m_complement->save($complement);

                        //Création du compte utilisateur intégrateur
						$souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($compteur_souscription,$souscription);
						$integrateur_souscription = $compteur_souscription;
							   
						$date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();
							   
						$login = "";
						$password = "";
						$code_agence = "";

                        if($finddepot == NULL && $findmstiers == NULL) {
							//$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
						    } else {
                                $association->setAssociation_nom($souscription->souscription_raison);
                            }
								   
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
								   
						    $date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								//$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else  {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
								  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
						    if(substr($membre_integrateur,19,1) == 'P')  {
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
						    } else  {
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
							    $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            }								  
                                  
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id($integrateur->integrateur_id);
                            $membreasso_mapper->save($membreasso);
						}
							   
					    //insertion dans les tables eu_mstiers
					    $id_souscription = $compteur_souscription;
                        //$id_mstiers = $m_mstiers->findConuter() + 1;
								  
					    $code_ban = $request->getParam("code_BAn");
					    $code_integrateur = $request->getParam("integrateur_membre");
					    $montant_souscris = $request->getParam("integrateur_montant");
								  
                        //$mstiers->setId_mstiers($id_mstiers);
					    $mstiers->setCode_membre($code_integrateur);
					    $mstiers->setMontant_souscris($montant_souscris);
					    $mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($montant_souscris);
					    $mstiers->setType_souscription($type_souscription);  
							   
					    $mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $mstiers->setBon_neutre_code($code_ban);
						$mstiers->setType_mstiers($programme);
					    $mstiers->setStatut_mstiers($statut);
						
							   
					    if($param == 21 || $param == 24) {
							$mstiers->setType_souscripteur("ODD");
						} else  {
						    $mstiers->setType_souscripteur("CMFH");  								  
					    }
                        $m_mstiers->save($mstiers);
                        $id_mstiers = $db->lastInsertId();						
							   
                        // script de creation de TE de prestation
						$eucompte = new Application_Model_EuCompte();
					    $m_compte = new Application_Model_EuCompteMapper();
									
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
									
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
						$code_te = "";
						$code_tegc = "";
						$nom_tegc = "";
									
						$code_membre = $request->getParam("integrateur_membre");
							   
						if(substr($code_membre,19,1)=='P') {
							$nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
						} else {
						    $nom_tegc = $membremoral->raison_sociale;
					    }
									
						$code_zone     = $request->getParam("code_zone");
			            $id_pays       = $request->getParam("id_pays");
			            $id_region     = $request->getParam("id_region");
			            $id_prefecture = $request->getParam("id_prefecture");
			            $id_canton     = $request->getParam("id_canton");
									
						$num_compte = 'NB-TPAGCP-'.$code_membre;
				        $res = $m_compte->find($num_compte,$eucompte);
									
						/*
						if(!$res) {
						    $eucompte->setCode_cat('TPAGCP')
                                     ->setCode_compte($num_compte)
									 ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TPAGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                $eucompte->setCode_membre($code_membre)
                                         ->setCode_membre_morale(NULL);
							} else  {
                                $eucompte->setCode_membre(NULL)
                                         ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);
										
						    $code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
										
							$te->setCode_tegc($code_te);
			                $te->setId_filiere(NULL);
			                $te->setMdv(12);
			                $te->setTranche_payement(1);
						    if(substr($code_membre,19,1)=='M') {
			                    $te->setCode_membre($code_membre);
						    } else {
                                $te->setCode_membre_physique($code_membre);
                            }										
			                $te->setMontant(0);
			                $te->setMontant_utilise(0);
			                $te->setSolde_tegc(0);
			                $te->setId_utilisateur(NULL);
			                $te->setNom_tegc($nom_tegc);
			                $te->setNom_produit("Prestation");
			                $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $te->setType_tegc("PRESTATAIRE");
						    $te->setRecurrent_illimite(0);
						    $te->setRecurrent_limite(0);
						    $te->setNonrecurrent(1);
							$te->setPeriode1(0);
						    $te->setPeriode2(0);
						    $te->setPeriode3(0);
							$te->setFormel(0);
							$te->setRegime_tva(0);
							$te->setSpecial(0);
							$te->setOrdinaire(0);
							$te->setSubvention(0);
										
							$te->setCode_zone($code_zone);
				            $te->setId_pays($id_pays);
				            $te->setId_region($id_region);
				            $te->setId_prefecture($id_prefecture);
				            $te->setId_canton($id_canton);

                            $m_te->save($te);

                            //$id_prk = $m_prk->findConuter() + 1;
					        //$prk->setId_prk($id_prk);
					        $prk->setCode_tegc($code_te);
					        $prk->setValeur(null);
					        $m_prk->save($prk);
                                        										
					    }
						
						*/
									
						$num_comptets = 'NB-TSGCP-'.$code_membre;
				        $rests = $m_compte->find($num_comptets,$eucompte);
									
						if(!$rests) {
						    $eucompte->setCode_cat('TSGCP')
                                     ->setCode_compte($num_comptets)
								     ->setCode_type_compte('NB')
                                     ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                                     ->setDesactiver(0)
                                     ->setLib_compte('TSGCP')
                                     ->setSolde(0);
												 
							if(substr($code_membre,19,1)=='P') {		 
                                $eucompte->setCode_membre($code_membre)
                                         ->setCode_membre_morale(NULL);
							} else  {
                                $eucompte->setCode_membre(NULL)
                                         ->setCode_membre_morale($code_membre);
                            }										         
                            $m_compte->save($eucompte);		
                        }
							
						// fin script de creation TE 
					    if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc   = $request->getParam("code_te");   
						} else {
                            //$eutegc = new Application_Model_DbTable_EuTegc();
                            //$select = $eutegc->select();
							//if(substr($code_membre,19,1)=='P') {
                            //$select->where("code_membre_physique like ? ", $code_membre);
							//} else {
							//$select->where("code_membre like ? ", $code_membre);
							//}
                            //$select->limit(1);
                            //$rowseutegc = $eutegc->fetchRow($select);
                            //$code_tegc = $rowseutegc->code_tegc;
							
							$code_te = $m_te->getLastTegcByMembre($code_membre);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$code_membre. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
							
							$code_tegc = $code_te;
					    }
						
						
						if($type_souscription != "BPS")   {
                            $code_banque = $request->getParam("code_banque");
                            $referencepaie   = $request->getParam("num_compte");
					        $type_bnp = $type_souscription;
								
                            $montant = $request->getParam("integrateur_montant");
					        $souscription_id = $compteur_souscription;
						    $typeOpi = "BNP";

                            $url = curl_init();
                            $resultjson = array();
							curl_setopt_array(
							$url,
							array(
                                CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 30000000,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "POST",
								CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code_membre\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								}",
								CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
							));
							
							$response = json_decode(curl_exec($url));
							$error = curl_error($url);
							
							if(($error === '') && ($response->resultat == 1)) {
							    //$db->commit();
							    //if($finddepot == NULL && $findmstiers == NULL) {
							    //$sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						        //} else {
							    //  $sessionmcnp->error = "Operation bien effectuee ...".$response->resultat;
							    //}
								
								$db->commit();
							    $sessionmcnp->error = $response->message;
							    $this->_redirect('/index/addintegrateur/param/'.$_POST['integrateur_type']);
								
							} else {
							   $db->rollback();
							   $this->view->param = $param;
					           //$this->view->code_membre = $membre_integrateur;
					           $this->view->integrateur_montant = $request->getParam("integrateur_montant");
							   $sessionmcnp->error = $response->resultat;
							   //"Echec operation ... : ".$error.$response->resultat;
							   return;
							}
							curl_close($url);
						}
					    else {
							//$id_bps_souscription = $m_bpssouscription->findConuter() + 1;
							//$bpssouscription->setId_bps_souscription($id_bps_souscription);
							
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($request->getParam("integrateur_montant"));
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(NULL);
							$bpssouscription->setAllouer(0);
                            $m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmcnp->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/index/addintegrateur/param/'.$_POST['integrateur_type']);
						}
					}
				} catch (Exception $exc) {				   
				    $db->rollback();
					$this->view->param = $param;
					//$this->view->code_membre = $membre_integrateur;
					$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                    $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
			    }
               			   
		    } else  {
			    $this->view->param = $param;
			    //$this->view->code_membre = $membre_integrateur;
				$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			}
		
		}
	
    }
	
	
	public function addintegrateurpreAction() {
	    /* page administration/addintegrateur - Ajout d'une integrateur */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

            //$date_idold = new Zend_Date(Zend_Date::ISO_8601);
            //$date_iddold = clone $date_idold;
            
            //if($date_iddold->toString('yyyy-MM-dd') > "2018-01-31")  {
            //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/1');
            //}


	    $t_canton = new Application_Model_DbTable_EuCanton();
	    $ville  = new Application_Model_EuVille();
            $m_ville  = new Application_Model_EuVilleMapper();
	    $m_souscription = new Application_Model_EuSouscriptionMapper();
		
            $t_prefecture = new Application_Model_DbTable_EuPrefecture();
	    $t_region = new Application_Model_DbTable_EuRegion();
            $t_pays = new Application_Model_DbTable_EuPays();
            $t_zone = new Application_Model_DbTable_EuZone();
		
	    $regions = $t_region->fetchAll();
            $pays = $t_pays->fetchAll();
            $zones = $t_zone->fetchAll();
            $prefectures = $t_prefecture->fetchAll();
		
	    $this->view->regions = $regions;
            $this->view->zones = $zones;
            $this->view->pays = $pays;
            $this->view->prefectures = $prefectures;
            $cantons  = $t_canton->fetchAll();
            $villes   = $m_ville->fetchAll();
            $this->view->cantons = $cantons;
            $this->view->villes  = $villes;
		
	    $request = $this->getRequest();
		if ($request->isPost ())  {
		    if(isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			    && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
			    && isset($_POST['integrateur_email']) && $_POST['integrateur_email']!=""
                && isset($_POST['integrateur_montant']) && $_POST['integrateur_montant']!=""			   
			    && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
			   
		           $db = Zend_Db_Table::getDefaultAdapter();
                   $db->beginTransaction(); 
                   try {
				        $membre = new Application_Model_EuMembre();
	                    $m_map  = new Application_Model_EuMembreMapper();
					    $membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
                        $typeintegrateur = new Application_Model_EuTypeIntegrateur();
                        $m_typeintegrateur = new Application_Model_EuTypeIntegrateurMapper();

					    $param = (int) $this->_request->getParam('param');
						
					   $date_id = Zend_Date::now();
					   $param = (int)$this->_request->getParam('param');
					   $id_utilisateur_acnev = 1;
                       $id_utilisateur_filiere = 2;
                       $id_utilisateur_technopole = 3;
						
					   $bon_neutre = new Application_Model_EuBonNeutre();
                       $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                       $m_typeintegrateur->find($param,$typeintegrateur);
						
					   $membre_integrateur  = $request->getParam("integrateur_membre");
					   $code_membre_integrateur = '';
					   
					   $integrateur_montant = $request->getParam("integrateur_montant");
					   $integrateur_nombre  = $request->getParam("integrateur_nombre");
					   
					   $montant_souscription = $integrateur_nombre * 2187.5;
					   
					   if(substr($membre_integrateur,19,1) == 'P')  {
						   $findmembre = $m_map->find($membre_integrateur,$membre);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmcnp->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						   } 						 
					    } else {
						   $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						   if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->integrateur_email   = $request->getParam("integrateur_email");
						      $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							  $this->view->id_ville   = $request->getParam("integrateur_ville");
							  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							  $this->view->code_membre = $membre_integrateur;
							  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                      $sessionmcnp->error = "Le numéro membre du CMFH saisi  ".$membre_integrateur."  est introuvable ...";
					          return;
						  }
						
						}

                                           if(substr($membre_integrateur,19,1) == 'M' &&  ($param == 1  || $param == 3 ||  $param == 5 ||  $param == 7))  {
							$db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                    $sessionmcnp->error = "Seuls les personnes physiques sont autorisées à effectuer cette opération ....";
					        return;
						}

                                           if($typeintegrateur->montant_param >  $integrateur_montant) {
					        $db->rollback();
					        $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						$this->view->id_ville   = $request->getParam("integrateur_ville");
						$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						$this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
		                                $sessionmcnp->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;
					    }
					   
					   $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
					   if(count($bon_neutre) == 0) {
						  $db->rollback();
					      $this->view->param = $param;
						  $this->view->integrateur_email   = $request->getParam("integrateur_email");
						  $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						  $this->view->id_ville   = $request->getParam("integrateur_ville");
						  $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						  $this->view->code_membre = $membre_integrateur;
						  $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                              $sessionmcnp->error = "Votre Code BAn  incorrect ...";
                                              return; 
					    }
						
						if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                           return; 
						}
						
						
						
						if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
						   $bon_neutre2 = new Application_Model_EuBonNeutre();
						   $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						   $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
						   $code_membre_integrateur = $bon_neutre2->bon_neutre_code_membre;
					   
					           $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
						   $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
						   $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
						    //$cumulbon =  $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                            //$cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id);
                            $cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);
                            
						   if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
						        $db->rollback();
					                $this->view->param = $param;
						        $this->view->integrateur_email   = $request->getParam("integrateur_email");
						        $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                                        $sessionmcnp->error = "Montant restant du BAn est insuffisant  ... ".$cumulbon;
                                                        return; 
						    }
							
						    if($membre_integrateur != $code_membre_integrateur) {
						        $db->rollback();
					                $this->view->param = $param;
						        $this->view->integrateur_email   = $request->getParam("integrateur_email");
						        $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                                                        $sessionmcnp->error = "Le code membre du CMFH doit être celui du bon neutre ...";
                                                        return;   
						     }
							 
							 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						     $i = 0;
					         $reste = $montant_souscription;
					         $nbre_lignesdetbon = count($lignesdetbon);
                             while ($reste > 0 && $i < $nbre_lignesdetbon) {
                               $lignedetbon = $lignesdetbon[$i];
                               $id = $lignedetbon->getBon_neutre_detail_id();
						       $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							   if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							      $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
								  if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
								      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									  
									  foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
								  
								  }
								  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                      ->setBon_neutre_detail_montant_solde(0);
                                  $bon_neutre_detailM->update($lignedetbon);


						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);
						     
								 
                               } else {
							      if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);
						  

						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						     $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);

						          $reste = 0;
                               }							   
                               $i++;
                             }						 
						  
						     ////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  	
						     $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						     $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						     //$bon_neutre2->setBon_neutre_code_membre($membre_integrateur);
						     $bon_neutre2M->update($bon_neutre2);
						  
						     /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						     $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						     if(substr($membre_integrateur,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						     } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						     }
						     $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						     $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						     $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
						
						   /*
						   if($bon_neutre->bon_neutre_montant_solde <  $montant_souscription ) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->integrateur_email   = $request->getParam("integrateur_email");
						    $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
							$this->view->id_ville   = $request->getParam("integrateur_ville");
							$this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
							$this->view->code_membre = $membre_integrateur;
							$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            return; 
						  }
						  
						  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						  $bon_neutre2 = new Application_Model_EuBonNeutre();
						  $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						  $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);
								
						  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						  $bon_neutre2M->update($bon_neutre2);
						  
						  $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
						  $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						  
						  $compteur_bon_neutre_detail = $bon_neutre_detailM->findConuter() + 1;
						  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
						  $bon_neutre_detail->setBon_neutre_id($bon_neutre->bon_neutre_id);
						  if(substr($membre_integrateur,19,1) == 'P')  {
						     $bon_neutre_detail->setBon_neutre_detail_type("PP");
						  } else {
						     $bon_neutre_detail->setBon_neutre_detail_type("PM");
						  }
						  $bon_neutre_detail->setBon_neutre_detail_libelle("CMFH");
						  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						  $bon_neutre_detail->setBon_neutre_detail_montant($montant_souscription);
						  $bon_neutre_detailM->save($bon_neutre_detail);
						  */
						  
						  $m_depotvente = new Application_Model_EuDepotVenteMapper();
				        $depotvente = new Application_Model_EuDepotVente();	   
						$finddepot = $m_depotvente->fetchAllByMembre($_POST['integrateur_membre']);
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();
						if(substr($membre_integrateur,19,1) == 'P')  {
						   $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                       $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
						} else {
						   $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
						}
						
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			              $souscription_ok = 1;
			              $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("integrateur_login"));
						
						if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("integrateur_login") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Login déjà existant ...";
						   return;
	                    }  else if($request->getParam("integrateur_passe") != $request->getParam("confirme") && $request->getParam("integrateur_passe") != "" && $finddepot == NULL) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
                           $sessionmcnp->error = "Mot de passe incorret ...";
						   return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
						//$compteur_souscription = $souscription_mapper->findConuter() + 1;
						//$souscription->setSouscription_id($compteur_souscription);
						
						if(substr($membre_integrateur,19,1) == 'P')  {
                          $souscription->setSouscription_nom($membre->nom_membre);
                          $souscription->setSouscription_prenom($membre->prenom_membre);
						  $souscription->setSouscription_mobile($membre->portable_membre);
						  $souscription->setSouscription_personne("PP");
						} else {
						  $souscription->setSouscription_raison($membremoral->raison_sociale);
                          $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                          $souscription->setCode_statut($membremoral->code_statut);
						  $souscription->setSouscription_mobile($membremoral->portable_membre);
						  $souscription->setSouscription_personne("PM");
						}
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($request->getParam("integrateur_montant"));
                        $souscription->setSouscription_nombre($request->getParam("integrateur_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("integrateur_type_candidat"));
                            
                        $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
                        $souscription->setCode_activite($request->getParam("code_activite"));
                        $souscription->setId_metier($request->getParam("id_metier"));
                        $souscription->setId_competence($request->getParam("id_competence"));
						
						$m_ville->find($request->getParam("integrateur_ville"),$ville);
						
                        $souscription->setSouscription_ville($ville->lib_ville);
                        $souscription->setSouscription_quartier($request->getParam("integrateur_quartier"));
			            
                        $souscription->setSouscription_email($request->getParam("integrateur_email"));
                        if($finddepot == NULL) {						
                           $souscription->setSouscription_login($request->getParam("integrateur_login"));
                           $souscription->setSouscription_passe($request->getParam("integrateur_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }						
			                
			            if($souscription_ok == 1)  {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						
						$compteur_souscription = $db->lastInsertId();
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						
						///////////////////////////////////////////// validation filiere //////////////////////////////////
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(2);
						$souscriptionM->update($souscription);
						
						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						//$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						$souscription = new Application_Model_EuSouscription();
						$souscriptionM = new Application_Model_EuSouscriptionMapper();
						$souscriptionM->find($compteur_souscription, $souscription);
								
						$souscription->setPublier(3);
						$souscriptionM->update($souscription);


						$validation_quittance = new Application_Model_EuValidationQuittance();
						$validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						//$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						$validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						$validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						$validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$validation_quittance->setPublier(1);
						$validation_quittance_mapper->save($validation_quittance);
						
						$nombre_compte = $request->getParam("integrateur_nombre");
						
						if($nombre_compte >= 10)   {
						   include("Transfert.php");
		                   if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                      $chemin = "integrateurs";
		                      $file = $_FILES['integrateur_diplome']['name'];
		                      $file1='integrateur_diplome';
		                      $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                   } else { $integrateur_diplome = ""; }
						   
						   if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                     $chemin = "integrateurs";
		                     $file = $_FILES['integrateur_document']['name'];
		                     $file1='integrateur_document';
		                     $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                   } else {$integrateur_document = "";}
						      
						   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                           $a  = new Application_Model_EuIntegrateur();
                           $ma = new Application_Model_EuIntegrateurMapper();
						   
						   //$compteur = $ma->findConuter() + 1;
						   //$a->setIntegrateur_id($compteur);
                           $a->setIntegrateur_type($request->getParam("integrateur_type"));
                           $a->setIntegrateur_souscription($compteur_souscription);
						   
						   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							     || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                 $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                 $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                 $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                           }
						   
						   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22)  {
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_poste($request->getParam("integrateur_poste"));
                                 }
                                 $a->setIntegrateur_education($request->getParam("integrateur_education"));
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                    $a->setIntegrateur_affiliation($request->getParam("integrateur_affiliation"));
                                 }
                                 $a->setIntegrateur_formation($request->getParam("integrateur_formation"));
                                 $a->setIntegrateur_langue($request->getParam("integrateur_langue"));
                                 $a->setIntegrateur_experience($request->getParam("integrateur_experience"));
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                           }
						   
						   $a->setIntegrateur_attestation($request->getParam("integrateur_attestation"));
                           $a->setIntegrateur_membreasso(0);
                           $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			               $a->setPublier($_POST['publier']);
                           $a->setIntegrateurAdresse($request->getParam("integrateur_adresse"));
                           $a->setIntegrateurCanton($request->getParam("id_canton"));
                           $a->setIntegrateurVille($request->getParam("integrateur_ville"));
						   $a->setCode_membre($request->getParam("integrateur_membre"));
                           $ma->save($a);
						   
						   $compteur = $db->lastInsertId();
						   
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
                           $integrateur  = new Application_Model_EuIntegrateur();
                           $integrateurM = new Application_Model_EuIntegrateurMapper();
                           $integrateurM->find($compteur,$integrateur);
		
                           $integrateur->setPublier(1);
		                   $integrateurM->update($integrateur);
						   
						   $id_integrateur = $integrateur->integrateur_id;
						   $complement   = new Application_Model_EuComplementQuittance();
                           $m_complement = new Application_Model_EuComplementQuittanceMapper();
						   
						   //$cpte = $m_complement->findConuter() + 1;
						   //$complement->setId_complement_quittance($cpte);
						   
						   $complement->setIntegrateur_id($id_integrateur);
						   $complement->setSouscription_id($compteur_souscription);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						   $m_complement->save($complement);
						   $cpte = $db->lastInsertId();
						   
						   $code_agence = '';
						   ///////////////////////////////////////////////////////////////////////////////////////////////////////
						   if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {								 
							  $membreasso   = new Application_Model_EuMembreasso();
                              $m_membreasso = new Application_Model_EuMembreassoMapper();
		                      $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);
									
							  $association = new Application_Model_EuAssociation();
                              $m_association = new Application_Model_EuAssociationMapper();
		                      $m_association->find($membreasso->membreasso_association,$association);
		                      $code_agence = $association->code_agence;
                            }
							
							// Création du compte utilisateur intégrateur
							   $souscription = new Application_Model_EuSouscription();
                               $m_souscription = new Application_Model_EuSouscriptionMapper();
		                       $m_souscription->find($compteur_souscription,$souscription);
							   $integrateur_souscription = $compteur_souscription;
							   
							   $date_id = Zend_Date::now();
                               $association = new Application_Model_EuAssociation();
                               $association_mapper = new Application_Model_EuAssociationMapper();
							   
						       $login = "";
						       $password = "";
							   
							   if($finddepot == NULL) {
							       //$compteur_association = $association_mapper->findConuter() + 1;
                                   //$association->setAssociation_id($compteur_association);
								   
                                    $association->setAssociation_mobile($souscription->souscription_mobile);
								    if(substr($membre_integrateur,19,1) == 'P')  {
                                      $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								    } else {
                                      $association->setAssociation_nom($souscription->souscription_raison);
                                    }
								   
                                   $association->setAssociation_numero($compteur_association."INT");
                                   $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                   $association->setAssociation_email($souscription->souscription_email);
                                   $association->setAssociation_recepisse(NULL);
                                   $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                   $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                   $association->setId_filiere(NULL);
                                   $association->setCode_type_acteur(NULL);
                                   $association->setCode_statut(NULL);
                                   $association->setCode_agence($code_agence);
                                   $association->setPublier(1);
                                   $association_mapper->save($association);
								   $compteur_association = $db->lastInsertId();
								   
								   $date_id = Zend_Date::now();

                                   $membreasso = new Application_Model_EuMembreasso();
                                   $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 
							       if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                      $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                      $login = "";
                                      while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)]; 
                                      }
								      $password = $login.$login; 
								   } else {
								     $login = $souscription->souscription_login;
								     $password = $souscription->souscription_passe;
								    }
								  
								    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                    //$membreasso->setMembreasso_id($compteur_membreasso);
                                    $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								    if(substr($membre_integrateur,19,1) == 'P')  {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								    } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
									 $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                    }								  
                                  
                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);
							
						        }
							   
							      // Transfert
								  $eusouscription = new Application_Model_EuSouscription();
		                          $souscriptionM = new Application_Model_EuSouscriptionMapper();
								 
								  $date = new Zend_Date();
		                          $compte_map = new Application_Model_EuCompteMapper();
                                  $compte      = new Application_Model_EuCompte();
			                      $sms_money   = new Application_Model_EuSmsmoney();
                                  $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                      $det_sms   = new Application_Model_EuDetailSmsmoney();
			                      $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                      $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                  $det_vtesms  = new Application_Model_EuDetailVentesms();
                                  



                                  
								  // insertion dans la table eu_depot_vente
				                  $m_dvente = new Application_Model_EuDepotVenteMapper();
				                  $dvente = new Application_Model_EuDepotVente();
								  $membretierscode = new Application_Model_EuMembretierscode();
                                  $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();

								  $fcaps = Util_Utils::getParametre('CAPS','valeur');
									 
								  $membre_pbf = '0000000000000000001M';
	                              $code_compte_pbf = "NN-TR-".$membre_pbf;
			                      $ret = $compte_map->find($code_compte_pbf,$compte);
								  
								  $souscriptionM->find($compteur_souscription,$eusouscription);
								  
								  $mobile = $eusouscription->souscription_mobile;
								  $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
								  $nbre_compte = $eusouscription->souscription_nombre;
								  
								  $montant = $nbre_compte * $fcaps;
								  // Traitement des produits CAPS
								  $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
								  $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
								  
								  /* if ($lignesdetfcaps != null) {
								      $nengfcaps = $money_map->findConuter() + 1;
                                      $sms_money->setNEng($nengfcaps)
                	                            ->setCode_Agence(null)
                                                ->setCreditAmount($montant)
                                                ->setSentTo($mobile)
                                                ->setMotif('CAPS')
                                                ->setId_Utilisateur(null)
                                                ->setCurrencyCode('XOF')
                                                ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                ->setFromAccount($code_compte_pbf)
                                                ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                ->setCreditCode($codefcaps)
                                                ->setDestAccount(null)
                                                ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                ->setDestAccount_Consumed($compteur_souscription)
                                                ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                ->setNum_recu(null);
                                       $money_map->save($sms_money);
									   
									   // Mise à jour du compte de transfert
				                       if($ret && ($cumulfcaps >= $montant)) {
			                              // Mise à jour du compte de transfert
				                          $compte->setSolde($compte->getSolde() - $montant);
                                          $compte_map->update($compte);    
	                                   } else {
			                              $db->rollback();
	                                      $this->view->param = $param;
										  $this->view->souscription_email  = $_POST['souscription_email'];
								          $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								          $this->view->id_ville   = $_POST['integrateur_ville'];
								          $this->view->code_membre = $_POST['integrateur_membre'];
			                              $sessionmcnp->error = 'Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant';
										  //$this->_redirect('/index/addintegrateur/param/'.$param);
                                          return;			   
			                           }
									   
									   $l = 0;
					                   $reste = $montant;
					                   $nbre_lignesdetfcaps = count($lignesdetfcaps);
									   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
									         $lignedetfcaps = $lignesdetfcaps[$l];
                                             $id = $lignedetfcaps->getId_detail_smsmoney();
						                     $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											 if ($reste >= $lignedetfcaps->getSolde_sms()) {
												//Mise à jour  des lignes d'enrégistrement
                                                $reste = $reste - $lignedetfcaps->getSolde_sms();
												//insertion dans la table eu_detailventesms
						                        $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                   ->setId_detail_smsmoney($id)
                                                           ->setCode_membre_dist($membre_pbf)
                                                           ->setCode_membre(null)
                                                           ->setType_tansfert('CAPS')
                                                           ->setCreditcode($codefcaps)
                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                           ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                           ->setId_utilisateur(null)
                                                           ->setCode_produit('CAPS');
                                                 $det_vte_sms->insert($det_vtesms->toArray());
															
							                     $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                       ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                       ->setSolde_sms(0);
                                                 $det_sms_m->update($lignedetfcaps);
												 
											  } else {
												 //Mise à jour  des lignes d'enrégistrement
												 //insertion dans la table eu_detailventesms
						                         $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                 $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                    ->setId_detail_smsmoney($id)
                                                            ->setCode_membre_dist($membre_pbf)
                                                            ->setCode_membre(null)
                                                            ->setType_tansfert('CAPS')
                                                            ->setCreditcode($codefcaps)
                                                            ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                            ->setMont_vente($reste)
                                                            ->setId_utilisateur(null)
                                                            ->setCode_produit('CAPS');
                                                  $det_vte_sms->insert($det_vtesms->toArray());
															
                                                  $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                          $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                      $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                  $det_sms_m->update($lignedetfcaps);
						                          $reste = 0;
												 } 
											     $l++;
									   }
								  
								  } else {
									   $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						               $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						               $this->view->id_ville   = $request->getParam("integrateur_ville");
						               $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						               $this->view->code_membre = $membre_integrateur;
			                           $sessionmcnp->error = 'Le solde du compte de transfert  est vide';
                                       return;
								  }*/
								  
								  
								  //$countdvente = $m_dvente->findConuter() + 1;
				                  //$dvente->setId_depot($countdvente)
								  
					              $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                  $dvente->setCode_membre($_POST['integrateur_membre']);   
			                      $dvente->setCode_produit('CAPS');
				                  $dvente->setMont_depot($montant);
				                  $dvente->setMont_vendu(0);
				                  $dvente->setSolde_depot($montant);
				                  $dvente->setId_utilisateur(null);
				                  $dvente->setType_depot('AvecListe');
				                  $dvente->setSouscription_id($compteur_souscription);
				                  $m_dvente->save($dvente);
								  
								  
								  for($i = 0; $i < $nbre_compte; $i++) {
									 $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
									 $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
									 $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                     $membretierscode->setMembretierscode_membretiers(0);
                                     $membretierscode->setMembretierscode_code($membretierscode_code);
                                     $membretierscode->setMembretierscode_souscription($compteur_souscription);
                                     $membretierscode->setPublier(0);
                                     $membretierscode->setCode_membre(NULL);
									 $membretierscode->setAllocation_cmfh_id(NULL);
                                     $membretierscode_mapper->save($membretierscode);
								   }
								   
								    $compteur_sms = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');
						           
								    // script de creation de TE de prestation
								    $eucompte = new Application_Model_EuCompte();
								    $m_compte = new Application_Model_EuCompteMapper();
									
								    $prk = new Application_Model_EuPrk();
                                    $m_prk = new Application_Model_EuPrkMapper();
									
                                    $te   = new Application_Model_EuTegc();
									$m_te = new Application_Model_EuTegcMapper();
									$code_te = "";
									$nom_tegc = "";
									
									$code_membre = $_POST['integrateur_membre'];
									if(substr($code_membre,19,1)=='P') {
									   $nom_tegc = $membre->nom_membre." ".$membre->prenom_membre;
									} else {
									   $nom_tegc = $membremoral->raison_sociale;
									}
									
									$code_zone     =   $_POST['code_zone'];
			                        $id_pays       =   $_POST['id_pays'];
			                        $id_region     =   $_POST['id_region'];
			                        $id_prefecture =   $_POST['id_prefecture'];
			                        $id_canton     =   $_POST['id_canton'];
									
								    $num_compte = 'NB-TPAGCP-'.$code_membre;
				                    $res = $m_compte->find($num_compte,$eucompte);
									
									if(!$res) {
									    $eucompte->setCode_cat('TPAGCP')
                                             ->setCode_compte($num_compte)
											 ->setCode_type_compte('NB')
                                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                             ->setDesactiver(0)
                                             ->setLib_compte('TPAGCP')
                                             ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
										
										$code_te = $m_te->getLastTegcByMembre($code_membre);
										if ($code_te == NULL) {
			                               $code_te = 'TEGCP'.$code_membre. '00001';         
			                            } else {
			                               $num_ordre = substr($code_te, -5);
                                           $num_ordre++;
                                           $code_te = 'TEGCP'.$code_membre.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                            }
										
										$te->setCode_tegc($code_te);
			                            $te->setId_filiere(NULL);
			                            $te->setMdv(12);
			                            $te->setTranche_payement(1);
										if(substr($code_membre,19,1)=='M') {
			                               $te->setCode_membre($code_membre);
										} else {
                                           $te->setCode_membre_physique($code_membre);
                                        }										
			                            $te->setMontant(0);
			                            $te->setMontant_utilise(0);
			                            $te->setSolde_tegc(0);
			                            $te->setId_utilisateur(NULL);
			                            $te->setNom_tegc($nom_tegc);
			                            $te->setNom_produit("Prestation");
			                            $te->setDate_tegc($date->toString('yyyy-MM-dd HH:mm:ss'));
					                    $te->setType_tegc("PRESTATAIRE");
										$te->setRecurrent_illimite(0);
										$te->setRecurrent_limite(0);
										$te->setNonrecurrent(1);
										$te->setPeriode1(0);
										$te->setPeriode2(0);
										$te->setPeriode3(0);
										$te->setFormel(0);
										$te->setRegime_tva(0);
										$te->setSpecial(0);
										$te->setOrdinaire(1);
										$te->setSubvention(0);
										
										$te->setCode_zone($code_zone);
				                        $te->setId_pays($id_pays);
				                        $te->setId_region($id_region);
				                        $te->setId_prefecture($id_prefecture);
				                        $te->setId_canton($id_canton);

                                        $m_te->save($te);

                                        $id_prk = $m_prk->findConuter() + 1;
					                    $prk->setId_prk($id_prk);
					                    $prk->setCode_tegc($code_te);
					                    $prk->setValeur(7);
					                    $m_prk->save($prk);
                                        										
									}
									
									$num_comptets = 'NB-TSGCP-'.$code_membre;
				                    $rests = $m_compte->find($num_comptets,$eucompte);
									
									if(!$rests) {
									    $eucompte->setCode_cat('TSGCP')
                                                 ->setCode_compte($num_comptets)
												 ->setCode_type_compte('NB')
                                                 ->setDate_alloc($date->toString('yyyy-MM-dd'))
                                                 ->setDesactiver(0)
                                                 ->setLib_compte('TSGCP')
                                                 ->setSolde(0);
												 
										if(substr($code_membre,19,1)=='P') {		 
                                            $eucompte->setCode_membre($code_membre)
                                                     ->setCode_membre_morale(NULL);
										} else  {
                                            $eucompte->setCode_membre(NULL)
                                                     ->setCode_membre_morale($code_membre);
                                        }										         
                                        $m_compte->save($eucompte);
									
                                    }
								    // fin script de creation TE
										  
								    $db->commit();
								    if($finddepot == NULL) {
								     $sessionmcnp->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
								    } else {
								     $sessionmcnp->error = "Opération bien effectuée ...";
								   }
								   $this->_redirect('/index/addintegrateurpre/param/'.$_POST['integrateur_type']);
						
						} else {
						   $db->rollback();
						   $sessionmcnp->error = "Le nombre de comptes marchands souscrits doit être supérieur ou égale à 10 ...";
					       $this->view->param = $param;
						   $this->view->integrateur_email   = $request->getParam("integrateur_email");
						   $this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
						   $this->view->id_ville   = $request->getParam("integrateur_ville");
						   $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
						   $this->view->code_membre = $membre_integrateur;
						   $this->view->integrateur_montant = $request->getParam("integrateur_montant");
						   return;
						}
						  
						  
						}
					
				    } catch (Exception $exc) {				   
				        $db->rollback();
					    $this->view->param = $param;
						$this->view->integrateur_email   = $request->getParam("integrateur_email");
						$this->view->integrateur_adresse = $request->getParam("integrateur_adresse");
					    $this->view->id_ville   = $request->getParam("integrateur_ville");
					    $this->view->integrateur_quartier   =  $request->getParam("integrateur_quartier");
					    $this->view->code_membre = $membre_integrateur;
						$this->view->integrateur_montant = $request->getParam("integrateur_montant");
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                        return;
			        }
	
	        }
	    }
		
		$param = (int)$this->_request->getParam('param');
	    $this->view->param = $param;
	}
	
	
	
	
	public function addintegrateurquittanceAction() {
	   /* page administration/addintegrateur - Ajout d'une integrateur */
       $sessionmcnp = new Zend_Session_Namespace('mcnp');
	   //$this->_helper->layout->disableLayout();
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   $t_canton = new Application_Model_DbTable_EuCanton();
       $m_ville  = new Application_Model_EuVilleMapper();
	   $m_souscription2 = new Application_Model_EuSouscriptionMapper();
       $cantons  = $t_canton->fetchAll();
       $villes   = $m_ville->fetchAll();
       $this->view->cantons = $cantons;
       $this->view->villes  = $villes;
	   $request = $this->getRequest ();
	   
	   if ($request->isPost ()) {
	       if (isset($_POST['cpteur']) && $_POST['cpteur']!="" 
			  && isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
			  && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
			  && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" 
			  && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1)  {
				   
				 $db = Zend_Db_Table::getDefaultAdapter();
                 $db->beginTransaction();
				 try {
				     $param = (int) $this->_request->getParam('param');
					 
					 $souscription3 = new Application_Model_EuSouscription();
                     $m_souscription3 = new Application_Model_EuSouscriptionMapper();
					 $membre = new Application_Model_EuMembre();
	                 $m_map  = new Application_Model_EuMembreMapper();
					 $membremoral = new Application_Model_EuMembreMorale();
	                 $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					 
					 $nombre_compte = 0;
					 $cpte = $_POST['cpteur'];
					 
					 if(substr($_POST['integrateur_membre'],19,1) == 'P') {
						   $findmembre = $m_map->find($_POST['integrateur_membre'],$membre);
						   if($findmembre == false) {
						     $db->rollback();
					         $this->view->param = $param;
						     $this->view->souscription_email  = $_POST['souscription_email'];
						     $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							 $this->view->id_canton  = $_POST['integrateur_canton'];
							 $this->view->id_ville   = $_POST['integrateur_ville'];
							 $this->view->code_membre = $_POST['integrateur_membre'];
		                     $sessionmcnp->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					          return;
						   }
					  } else {
						  $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						  if($findmembre == false) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_email  = $_POST['souscription_email'];
						    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							$this->view->id_canton  = $_POST['integrateur_canton'];
							$this->view->id_ville   = $_POST['integrateur_ville'];
							$this->view->code_membre = $_POST['integrateur_membre'];
		                    $sessionmcnp->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					        return;
						  }
					   }
					   
					   // controle sur la saisie de plusieurs même numero de quittance
					   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				               $numero_quittance = $_POST['integrateur_souscription_ordre'.$i];
					           $j = $i + 1;
					           if($cpte > 1) {
					           while($j < $cpte) {
						           $num_quittance = $_POST['integrateur_souscription_ordre'.$j];
							       if($numero_quittance == $num_quittance) {  
							            $db->rollback();
					                    $this->view->param = $param;
								        $this->view->souscription_email  = $_POST['souscription_email'];
								        $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								        $this->view->id_canton  = $_POST['integrateur_canton'];
								        $this->view->id_ville   = $_POST['integrateur_ville'];
								        $this->view->code_membre = $_POST['integrateur_membre'];
		                                $sessionmcnp->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                    return;
							        }
							        $j++;
						         }
					          }
				         }
						 
						 // Controle de la validité des numéros de quittance saisis
						 for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                     $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'. $i]);
						     if($souscription_id == NULL) {
							      $db->rollback();
						          $this->view->param = $param;
								  $this->view->souscription_email  = $_POST['souscription_email'];
								  $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								  $this->view->id_canton  = $_POST['integrateur_canton'];
								  $this->view->id_ville   = $_POST['integrateur_ville'];
								  $this->view->code_membre = $_POST['integrateur_membre'];
		                          $sessionmcnp->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre'.$i]."  est  invalide ...";
							      //$this->_redirect('/index/addintegrateur/param/'.$param);
                                  return;
		                     }  
					     }
						 
						 // les numéros quittances saisis doivent appartenir au même souscripteur
						 if(count($_POST['cpteur']) > 1)  {
							$id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
							$m_souscription3->find($id,$souscription3);
							$souscription_souscription = $souscription3->souscription_souscription;
							for($i = 1; $i < $_POST['cpteur']; $i++)  {
							    $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								$m_souscription3->find($id,$souscription3);	
								if($souscription_souscription != $souscription3->souscription_souscription) {
								   $db->rollback();
								   $this->view->param = $param;
								   $this->view->souscription_email  = $_POST['souscription_email'];
								   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								   $this->view->id_canton  = $_POST['integrateur_canton'];
								   $this->view->id_ville   = $_POST['integrateur_ville'];
								   $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmcnp->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
							       //$this->_redirect('/index/addintegrateur/param/'.$param);
                                   return;
								  }    
							   }	   
						  }
                          
                          // Controle sur les numéros quittances déjà utilisés
						  $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						  $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
						  for($i = 0; $i < $_POST['cpteur']; $i++) {
						     $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							 $integrateur2 = $m_integrateur2->fetchAllBySouscription($souscription_id);
							 $complement2  = $m_complement_quittance2->fetchAllBySouscription($souscription_id);
							 if(count($integrateur2) > 0  || count($complement2) > 0) {
								  $db->rollback();
							      $this->view->param = $param;
								  $this->view->souscription_email = $_POST['souscription_email'];
								  $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								  $this->view->id_canton  = $_POST['integrateur_canton'];
								  $this->view->id_ville   = $_POST['integrateur_ville'];
								  $this->view->code_membre = $_POST['integrateur_membre'];
		                          $sessionmcnp->error = "Numéro de quittance  ".$_POST['integrateur_souscription_ordre'.$i]."  déjà  utilisé ...";
							      //$this->_redirect('/index/addintegrateur/param/'.$param);
                                  return;
	                          }
						   }

                           // Controle pour amener sur le formulaire de complement de quittance 
						   for($i = 0; $i < $_POST['cpteur']; $i++)   {
						      $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							  $m_souscription3->find($souscription_id,$souscription3);
							  $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription3->souscription_souscription);
							  $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription3->souscription_souscription);
							  if(count($integrateur2) > 0  || count($complement2) > 0) {
								 $db->rollback();
							     $this->view->param = $param;
							     $this->view->souscription_email  = $_POST['souscription_email'];
								 $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								 $this->view->id_canton  = $_POST['integrateur_canton'];
								 $this->view->id_ville   = $_POST['integrateur_ville'];
								 $this->view->code_membre = $_POST['integrateur_membre'];      
		                         $sessionmcnp->error = "Veuillez plutôt faire un complément avec le numéro quittance  ".$_POST['integrateur_souscription_ordre'.$i];
							     //$this->_redirect('/index/addintegrateur/param/'.$param);
                                 return;
	                           }
						   }

                           // cumul sur le nombre de comptes marchands souscrits
						   for($i = 0; $i < $_POST['cpteur']; $i++) {
						      $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							  $m_souscription3->find($souscription_id,$souscription3);  
						      $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
						   }

                           if($nombre_compte >= 10)   {
                             include("Transfert.php");
		                     if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                       $chemin = "integrateurs";
		                       $file = $_FILES['integrateur_diplome']['name'];
		                       $file1='integrateur_diplome';
		                       $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                      } else {$integrateur_diplome = "";}
								 
							  if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                        $chemin	= "integrateurs";
		                        $file = $_FILES['integrateur_document']['name'];
		                        $file1='integrateur_document';
		                        $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                       } else {$integrateur_document = "";}

                               $date_id = new Zend_Date(Zend_Date::ISO_8601);
                               $a  = new Application_Model_EuIntegrateur();
                               $ma = new Application_Model_EuIntegrateurMapper();

                               $compteur = $ma->findConuter() + 1;
							   $id_souscription = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
                               $a->setIntegrateur_id($compteur);
                               $a->setIntegrateur_type($_POST['integrateur_type']);
                               $a->setIntegrateur_souscription($id_souscription);
								 
							   if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							     || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                 $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                 $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                 $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                               }
								 
							   if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22) {
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                   $a->setIntegrateur_poste($_POST['integrateur_poste']);
                                 }
                                 $a->setIntegrateur_education($_POST['integrateur_education']);
                                 if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                   $a->setIntegrateur_affiliation($_POST['integrateur_affiliation']);
                                 }
                                 $a->setIntegrateur_formation($_POST['integrateur_formation']);
                                 $a->setIntegrateur_langue($_POST['integrateur_langue']);
                                 $a->setIntegrateur_experience($_POST['integrateur_experience']);
                                 $a->setIntegrateur_document($integrateur_document);
                                 $a->setIntegrateur_diplome($integrateur_diplome);
                               }
								 
							   $a->setIntegrateur_attestation($_POST['integrateur_attestation']);
                               $a->setIntegrateur_membreasso(0);
                               $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			                   $a->setPublier($_POST['publier']);
                               $a->setIntegrateurAdresse($_POST['integrateur_adresse']);
                               $a->setIntegrateurCanton($_POST['integrateur_canton']);
                               $a->setIntegrateurVille($_POST['integrateur_ville']);
							   $a->setCode_membre($_POST['integrateur_membre']);
                               $ma->save($a);


                               ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                 $integrateur  = new Application_Model_EuIntegrateur();
                                 $integrateurM = new Application_Model_EuIntegrateurMapper();
                                 $integrateurM->find($compteur,$integrateur);
		
                                 $integrateur->setPublier(1);
		                         $integrateurM->update($integrateur);

                                 ///////////////////////////////////////////////////////////////////////////////////////////////////////
							     $id_integrateur = $integrateur->integrateur_id;
							     $souscription = new Application_Model_EuSouscription();
                                 $m_souscription = new Application_Model_EuSouscriptionMapper();
							     $complement   = new Application_Model_EuComplementQuittance();
                                 $m_complement = new Application_Model_EuComplementQuittanceMapper();

                                 for($i = 0; $i < $_POST['cpteur']; $i++) {
						            $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								    $m_souscription->find($souscription_id,$souscription);
                                    $souscription->setCode_activite($_POST["code_activite"]);
                                    $souscription->setId_metier($_POST["id_metier"]);
                                    $souscription->setSouscription_email($_POST["souscription_email"]);
                                    $m_souscription->update($souscription);
								   
								    $cpte = $m_complement->findConuter() + 1;
								    $complement->setId_complement_quittance($cpte);
								    $complement->setIntegrateur_id($id_integrateur);
								    $complement->setSouscription_id($souscription_id);
								    $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
								    $m_complement->save($complement);   
						         }

                                 $code_agence = '';
								 ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                 if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {								 
							       $membreasso   = new Application_Model_EuMembreasso();
                                   $m_membreasso = new Application_Model_EuMembreassoMapper();
		                           $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);
									
								   $association = new Application_Model_EuAssociation();
                                   $m_association = new Application_Model_EuAssociationMapper();
		                           $m_association->find($membreasso->membreasso_association,$association);
		                           $code_agence = $association->code_agence;
                                 }
								 
								 // Création du compte utilisateur intégrateur
								 $souscription = new Application_Model_EuSouscription();
                                 $m_souscription = new Application_Model_EuSouscriptionMapper();
		                         $m_souscription->find($integrateur->integrateur_souscription,$souscription);
								 $integrateur_souscription = $integrateur->integrateur_souscription;
								
								 $date_id = Zend_Date::now();

                                 $association = new Application_Model_EuAssociation();
                                 $association_mapper = new Application_Model_EuAssociationMapper();
								
								 $compteur_association = $association_mapper->findConuter() + 1;
                                 $association->setAssociation_id($compteur_association);
                                 $association->setAssociation_mobile($souscription->souscription_mobile);
								 if($souscription->souscription_personne == "PP") {
                                   $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
								 } else {
                                   $association->setAssociation_nom($souscription->souscription_raison);
                                 }								 
                                 $association->setAssociation_numero($compteur_association."INT");
                                 $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                 $association->setAssociation_email($souscription->souscription_email);
                                 $association->setAssociation_recepisse(NULL);
                                 $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                 $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                 $association->setId_filiere(NULL);
                                 $association->setCode_type_acteur(NULL);
                                 $association->setCode_statut(NULL);
                                 $association->setCode_agence($code_agence);
                                 $association->setPublier(1);
                                 $association_mapper->save($association);
								 
								 $date_id = Zend_Date::now();

                                 $membreasso = new Application_Model_EuMembreasso();
                                 $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								 $login = "";
								 $password = "";
								 
								 if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                    $login = "";
                                    while(strlen($login) != 8) {
                                     $login .= $liste[rand(0,61)]; 
                                    }
									$password = $login.$login; 
								  } else {
								    $login = $souscription->souscription_login;
									$password = $souscription->souscription_passe;
								  }
								  
								  $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                  $membreasso->setMembreasso_id($compteur_membreasso);
                                  $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
								  if($souscription->souscription_personne == "PP") {
                                     $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                     $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
								  } else {
                                     $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                     $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                  }								  
                                  $membreasso->setMembreasso_association($compteur_association);
                                  $membreasso->setMembreasso_email($souscription->souscription_email);
                                  $membreasso->setMembreasso_login($login);
                                  $membreasso->setMembreasso_passe($password);
                                  $membreasso->setMembreasso_type(1);
                                  $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $membreasso->setPublier(1);
								  $membreasso->setSouscription_id($souscription->souscription_id);
							      $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                  $membreasso_mapper->save($membreasso);
								 
								 
								 // Transfert
								 $eusouscription = new Application_Model_EuSouscription();
		                         $souscriptionM = new Application_Model_EuSouscriptionMapper();
								 
								 $date = new Zend_Date();
		                         $compte_map = new Application_Model_EuCompteMapper();
                                 $compte      = new Application_Model_EuCompte();
			                     $sms_money   = new Application_Model_EuSmsmoney();
                                 $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                     $det_sms   = new Application_Model_EuDetailSmsmoney();
			                     $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                     $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                     $det_vtesms  = new Application_Model_EuDetailVentesms();
								 
								 // insertion dans la table eu_depot_vente
				                 $m_dvente = new Application_Model_EuDepotVenteMapper();
				                 $dvente = new Application_Model_EuDepotVente();
								 
								 $membretierscode = new Application_Model_EuMembretierscode();
                                 $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();
							   
							     $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                         $membre_pbf = '0000000000000000001M';
	                             $code_compte_pbf = "NN-TR-".$membre_pbf;
			                     $ret = $compte_map->find($code_compte_pbf,$compte);
								 
								 for($i = 0; $i < $_POST['cpteur']; $i++) {
								    $nombre = 0;
								    $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								    $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
                                    if($finddepot == NULL) { 
									   $souscriptionM->find($souscription_id,$eusouscription);
								       $mobile = $eusouscription->souscription_mobile;
									   /*if($eusouscription->souscription_autonome == 1) {
		                                  $nombre = $eusouscription->souscription_nombre - $eusouscription->souscription_autonome;
		                               } else {
		                                  $nombre = $eusouscription->souscription_nombre;
		                               }*/
									   
									   
									   if($eusouscription->souscription_programme == 'CMFH')   {
									      $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                              if($eusouscription->souscription_autonome == 1) {   
			                                $nbre_compte = $eusouscription->souscription_nombre - 1; 
			                              } else {
				                            $nbre_compte = $eusouscription->souscription_nombre;
				                          }
										  $montant = $nbre_compte * $fcaps;
										  // Traitement des produits CAPS
										  $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
										  $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
										  if ($lignesdetfcaps != null) {
										      $nengfcaps = $money_map->findConuter() + 1;
                                              $sms_money->setNEng($nengfcaps)
                	                                    ->setCode_Agence(null)
                                                        ->setCreditAmount($montant)
                                                        ->setSentTo($mobile)
                                                        ->setMotif('CAPS')
                                                        ->setId_Utilisateur(null)
                                                        ->setCurrencyCode('XOF')
                                                        ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                        ->setFromAccount($code_compte_pbf)
                                                        ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                        ->setCreditCode($codefcaps)
                                                        ->setDestAccount(null)
                                                        ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                        ->setDestAccount_Consumed($souscription_id)
                                                        ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                        ->setNum_recu(null);
                                               $money_map->save($sms_money);
											   
											   // Mise à jour du compte de transfert
				                               if($ret && ($cumulfcaps >= $montant)) {
			                                     // Mise à jour du compte de transfert
				                                 $compte->setSolde($compte->getSolde() - $montant);
                                                 $compte_map->update($compte);    
	                                           } else {
			                                     $db->rollback();
	                                             $this->view->param = $param;
											     $this->view->souscription_email  = $_POST['souscription_email'];
								                 $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                 $this->view->id_canton  = $_POST['integrateur_canton'];
								                 $this->view->id_ville   = $_POST['integrateur_ville'];
								                 $this->view->code_membre = $_POST['integrateur_membre'];
			                                     $sessionmcnp->error = 'Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant';
											     //$this->_redirect('/index/addintegrateur/param/'.$param);
                                                 return;			   
			                                   }
											   
											   $l = 0;
					                           $reste = $montant;
					                           $nbre_lignesdetfcaps = count($lignesdetfcaps);
											   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
											      $lignedetfcaps = $lignesdetfcaps[$l];
                                                  $id = $lignedetfcaps->getId_detail_smsmoney();
						                          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
												  if ($reste >= $lignedetfcaps->getSolde_sms()) {
												     //Mise à jour  des lignes d'enrégistrement
                                                     $reste = $reste - $lignedetfcaps->getSolde_sms();
												     //insertion dans la table eu_detailventesms
						                             $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                     $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                        ->setId_detail_smsmoney($id)
                                                                ->setCode_membre_dist($membre_pbf)
                                                                ->setCode_membre(null)
                                                                ->setType_tansfert('CAPS')
                                                                ->setCreditcode($codefcaps)
                                                                ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                ->setId_utilisateur(null)
                                                                ->setCode_produit('CAPS');
                                                       $det_vte_sms->insert($det_vtesms->toArray());
															
							                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                             ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                             ->setSolde_sms(0);
                                                       $det_sms_m->update($lignedetfcaps);
											        } else {
												       //Mise à jour  des lignes d'enrégistrement
												       //insertion dans la table eu_detailventesms
						                               $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                       $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                          ->setId_detail_smsmoney($id)
                                                                  ->setCode_membre_dist($membre_pbf)
                                                                  ->setCode_membre(null)
                                                                  ->setType_tansfert('CAPS')
                                                                  ->setCreditcode($codefcaps)
                                                                  ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setMont_vente($reste)
                                                                  ->setId_utilisateur(null)
                                                                  ->setCode_produit('CAPS');
                                                        $det_vte_sms->insert($det_vtesms->toArray());
															
                                                        $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                            $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                        $det_sms_m->update($lignedetfcaps);
						                                $reste = 0;
												     } 
											        $l++;
											   }
										  
										  } else {
										        $db->rollback();
	                                            $this->view->param = $param;
										        $this->view->souscription_email  = $_POST['souscription_email'];
								                $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                $this->view->id_canton  = $_POST['integrateur_canton'];
								                $this->view->id_ville   = $_POST['integrateur_ville'];
								                $this->view->code_membre = $_POST['integrateur_membre'];
			                                    $sessionmcnp->error = 'Le solde du compte de transfert CAPS est null';
		                                        //$this->_redirect('/index/addintegrateur/param/'.$param);
                                                return;
										  }
										  
										  $countdvente = $m_dvente->findConuter() + 1;
				                          $dvente->setId_depot($countdvente)
					                             ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                          $dvente->setCode_membre($_POST['integrateur_membre']);   
			                              $dvente->setCode_produit('CAPS');
				                          $dvente->setMont_depot($montant);
				                          $dvente->setMont_vendu(0);
				                          $dvente->setSolde_depot($montant);
				                          $dvente->setId_utilisateur(null);
				                          $dvente->setType_depot('AvecListe');
				                          $dvente->setSouscription_id($souscription_id);
				                          $m_dvente->save($dvente);
										  
										  for($i = 0; $i < $nbre_compte; $i++) {
										     $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
											 $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
											 $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                             $membretierscode->setMembretierscode_membretiers(0);
                                             $membretierscode->setMembretierscode_code($membretierscode_code);
                                             $membretierscode->setMembretierscode_souscription($souscription_id);
                                             $membretierscode->setPublier(0);
                                             $membretierscode->setCode_membre(NULL);
                                             $membretierscode_mapper->save($membretierscode);
										  }
										  
										  $compteur = Util_Utils::findConuter() + 1;
				                          Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
							
									   }

                                    } else {
                                        $m_dvente->find($finddepot->id_depot,$dvente);
									    $dvente->setCode_membre($_POST['integrateur_membre']);
                                        $m_dvente->update($dvente);
                                    } 									
								 
								 }
								 // Fin de la boucle FOR
                                 $db->commit();

								 $souscription = new Application_Model_EuSouscription();
		                         $souscriptionM = new Application_Model_EuSouscriptionMapper();
								 
                                 for($i = 0; $i < $_POST['cpteur']; $i++)  {
								    $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
									include("automatisation.php");
								    recupcodegenerer($souscription_id); 
                                 }
								 
								 $souscription = new Application_Model_EuSouscription();
                                 $m_souscription = new Application_Model_EuSouscriptionMapper();
		                         $m_souscription->find($integrateur_souscription,$souscription);

                                 $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                 $html .= "<br/>";
                                 $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                 $html .= "<br/>";
							     $html .= "Login : ".$login."<br/>";
                                 $html .= "Mot de passe : ".$password."<br/>";
							   
							     $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							     $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                 Zend_Mail::setDefaultTransport($tr);		
                                 $mail = new Zend_Mail();
							   
							     $mail->setBodyHtml($html);
                                 $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                 $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                 $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                 $mail->send($tr);

                                 $sessionmcnp->error = "Opération bien effectuée ...";
		                         $this->_redirect('/index/addintegrateur/param/'.$_POST['integrateur_type']);								 
								 
                           }
				 
				 } catch (Exception $exc) {
				    $db->rollback();
	                $this->view->param = $param;
					$this->view->souscription_email  = $_POST['souscription_email'];
					$this->view->integrateur_adresse = $_POST['integrateur_adresse'];
					$this->view->id_canton  = $_POST['integrateur_canton'];
				    $this->view->id_ville   = $_POST['integrateur_ville'];
				    $this->view->code_membre = $_POST['integrateur_membre'];
                    $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                    return;
                 }	   
				   
		   }		   
	   
	   }
	    
	   $param = (int)$this->_request->getParam('param');
	   $this->view->param = $param;
	
	}
	
	
	
	public function addintegrateur1Action() {
	        /* page administration/addintegrateur - Ajout d'une integrateur */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
		    //$this->_helper->layout->disableLayout();
 		    $this->_helper->layout()->setLayout('layoutpublicesmc');
		    $t_canton = new Application_Model_DbTable_EuCanton();
            $m_ville  = new Application_Model_EuVilleMapper();
		    $m_souscription2 = new Application_Model_EuSouscriptionMapper();
            $cantons  = $t_canton->fetchAll();
            $villes   = $m_ville->fetchAll();
            $this->view->cantons = $cantons;
            $this->view->villes  = $villes;
		    $request = $this->getRequest ();
			
			if ($request->isPost ()) {
			    if (isset($_POST['cpteur']) && $_POST['cpteur']!="" 
			       && isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" 
				   && isset($_POST['code_activite']) && $_POST['code_activite']!="" 
				   && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" 
				   && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation'] == 1) {
				   
				   $db = Zend_Db_Table::getDefaultAdapter();
                   $db->beginTransaction();
				   try {
				       $souscription3 = new Application_Model_EuSouscription();
                       $m_souscription3 = new Application_Model_EuSouscriptionMapper();
					   $membre = new Application_Model_EuMembre();
	                   $m_map  = new Application_Model_EuMembreMapper();
					   $membremoral = new Application_Model_EuMembreMorale();
	                   $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					   $param = (int)$this->_request->getParam('param');
					   $nombre_compte = 0;
					   $cpte = $_POST['cpteur'];
					   
					   if(substr($_POST['integrateur_membre'],19,1) == 'P') {
						  $findmembre = $m_map->find($_POST['integrateur_membre'],$membre);
						  if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->souscription_email  = $_POST['souscription_email'];
						      $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							  $this->view->id_canton  = $_POST['integrateur_canton'];
							  $this->view->id_ville   = $_POST['integrateur_ville'];
							  $this->view->code_membre = $_POST['integrateur_membre'];
		                      $sessionmcnp->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					          return;
						  }
						
						
					   }
					   
					   else {
						  $findmembre = $m_mapmoral->find($_POST['integrateur_membre'],$membremoral);
						  if($findmembre == false) {
						      $db->rollback();
					          $this->view->param = $param;
						      $this->view->souscription_email  = $_POST['souscription_email'];
						      $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							  $this->view->id_canton  = $_POST['integrateur_canton'];
							  $this->view->id_ville   = $_POST['integrateur_ville'];
							  $this->view->code_membre = $_POST['integrateur_membre'];
		                      $sessionmcnp->error = "Le numéro membre du CMFH  ".$_POST['integrateur_membre']." est introuvable ...";
					          return;
						  }
					   }
					   
						// controle sur la saisie de plusieurs même numero de quittance
						for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				               $numero_quittance = $_POST['integrateur_souscription_ordre'.$i];
					           $j = $i + 1;
					           if($cpte > 1) {
					           while($j < $cpte) {
						           $num_quittance = $_POST['integrateur_souscription_ordre'.$j];
							       if($numero_quittance == $num_quittance) {  
							            $db->rollback();
					                    $this->view->param = $param;
								        $this->view->souscription_email  = $_POST['souscription_email'];
								        $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								        $this->view->id_canton  = $_POST['integrateur_canton'];
								        $this->view->id_ville   = $_POST['integrateur_ville'];
								        $this->view->code_membre = $_POST['integrateur_membre'];
		                                $sessionmcnp->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                    return;
							        }
							        $j++;
						         }
					          }
				         }
						 
						 // Controle de la validité des numéros de quittance saisis
						 for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                     $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'. $i]);
						     if($souscription_id == NULL) {
							      $db->rollback();
						          $this->view->param = $param;
								  $this->view->souscription_email  = $_POST['souscription_email'];
								  $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								  $this->view->id_canton  = $_POST['integrateur_canton'];
								  $this->view->id_ville   = $_POST['integrateur_ville'];
								  $this->view->code_membre = $_POST['integrateur_membre'];
		                          $sessionmcnp->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre'.$i]."  est  invalide ...";
							      //$this->_redirect('/index/addintegrateur/param/'.$param);
                                  return;
		                     }  
					     }
						 
						 // les numéros quittances saisis doivent appartenir au même souscripteur
						 if(count($_POST['cpteur']) > 1)  {
							$id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
							$m_souscription3->find($id,$souscription3);
							$souscription_souscription = $souscription3->souscription_souscription;
							for($i = 1; $i < $_POST['cpteur']; $i++)  {
							    $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								$m_souscription3->find($id,$souscription3);	
								if($souscription_souscription != $souscription3->souscription_souscription) {
								   $db->rollback();
								   $this->view->param = $param;
								   $this->view->souscription_email  = $_POST['souscription_email'];
								   $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								   $this->view->id_canton  = $_POST['integrateur_canton'];
								   $this->view->id_ville   = $_POST['integrateur_ville'];
								   $this->view->code_membre = $_POST['integrateur_membre'];
		                           $sessionmcnp->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
							       //$this->_redirect('/index/addintegrateur/param/'.$param);
                                   return;
								  }    
							   }	   
						  }
						  
						  
						  // Controle sur les numéros quittances déjà utilisés
						  $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
						  $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
						  for($i = 0; $i < $_POST['cpteur']; $i++) {
						      $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							  $integrateur2 = $m_integrateur2->fetchAllBySouscription($souscription_id);
							  $complement2  = $m_complement_quittance2->fetchAllBySouscription($souscription_id);
							  if(count($integrateur2) > 0  || count($complement2) > 0) {
								  $db->rollback();
							      $this->view->param = $param;
								  $this->view->souscription_email = $_POST['souscription_email'];
								  $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								  $this->view->id_canton  = $_POST['integrateur_canton'];
								  $this->view->id_ville   = $_POST['integrateur_ville'];
								  $this->view->code_membre = $_POST['integrateur_membre'];
		                          $sessionmcnp->error = "Numéro de quittance  ".$_POST['integrateur_souscription_ordre'.$i]."  déjà  utilisé ...";
							      //$this->_redirect('/index/addintegrateur/param/'.$param);
                                  return;
	                           }
						   }
						   
						   // Controle pour amener sur le formulaire de complement de quittance 
						   for($i = 0; $i < $_POST['cpteur']; $i++)   {
						      $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							  $m_souscription3->find($souscription_id,$souscription3);
							  $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription3->souscription_souscription);
							  $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription3->souscription_souscription);
							  if(count($integrateur2) > 0  || count($complement2) > 0) {
								 $db->rollback();
							     $this->view->param = $param;
							     $this->view->souscription_email  = $_POST['souscription_email'];
								 $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								 $this->view->id_canton  = $_POST['integrateur_canton'];
								 $this->view->id_ville   = $_POST['integrateur_ville'];
								 $this->view->code_membre = $_POST['integrateur_membre'];      
		                         $sessionmcnp->error = "Veuillez plutôt faire un complément avec le numéro quittance  ".$_POST['integrateur_souscription_ordre'.$i];
							     //$this->_redirect('/index/addintegrateur/param/'.$param);
                                 return;
	                           }
						   }
						   
						   // cumul sur le nombre de comptes marchands souscrits
						   for($i = 0; $i < $_POST['cpteur']; $i++) {
						      $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							  $m_souscription3->find($souscription_id,$souscription3);  
						      $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
						   }
						   
						   if($nombre_compte >= 10)   {
						         include("Transfert.php");
		                         if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!="") {
		                            $chemin	= "integrateurs";
		                            $file = $_FILES['integrateur_diplome']['name'];
		                            $file1='integrateur_diplome';
		                            $integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		                         } else {$integrateur_diplome = "";}
								 
								 if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!="") {
		                             $chemin	= "integrateurs";
		                             $file = $_FILES['integrateur_document']['name'];
		                             $file1='integrateur_document';
		                             $integrateur_document = $chemin."/".transfert($chemin,$file1);
		                         } else {$integrateur_document = "";}
								 
								 
								 $date_id = new Zend_Date(Zend_Date::ISO_8601);
                                 $a  = new Application_Model_EuIntegrateur();
                                 $ma = new Application_Model_EuIntegrateurMapper();
								 
								 $compteur = $ma->findConuter() + 1;
							     $id_souscription = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre0']);
                                 $a->setIntegrateur_id($compteur);
                                 $a->setIntegrateur_type($_POST['integrateur_type']);
                                 $a->setIntegrateur_souscription($id_souscription);
								 
								 if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6 || $param == 7 || $param == 8
							        || $param == 25 || $param == 26 || $param == 27 || $param == 28) {
                                       $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
                                       $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
                                       $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
                                 }
								 
								 
								 if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22) {
                                      if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                         $a->setIntegrateur_poste($_POST['integrateur_poste']);
                                      }
                                      $a->setIntegrateur_education($_POST['integrateur_education']);
                                      if($param == 15 || $param == 16 || $param == 17 || $param == 18 || $param == 22 || $param == 29 || $param == 30) {
                                         $a->setIntegrateur_affiliation($_POST['integrateur_affiliation']);
                                      }
                                      $a->setIntegrateur_formation($_POST['integrateur_formation']);
                                      $a->setIntegrateur_langue($_POST['integrateur_langue']);
                                      $a->setIntegrateur_experience($_POST['integrateur_experience']);
                                      $a->setIntegrateur_document($integrateur_document);
                                      $a->setIntegrateur_diplome($integrateur_diplome);
                                 }
								 
								 $a->setIntegrateur_attestation($_POST['integrateur_attestation']);
                                 $a->setIntegrateur_membreasso(0);
                                 $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			                     $a->setPublier($_POST['publier']);
                                 $a->setIntegrateurAdresse($_POST['integrateur_adresse']);
                                 $a->setIntegrateurCanton($_POST['integrateur_canton']);
                                 $a->setIntegrateurVille($_POST['integrateur_ville']);
							     $a->setCode_membre($_POST['integrateur_membre']);
                                 $ma->save($a);
								 
								 ///////////////////////////////////////////////////////////////////////////////////////////////////////
                                 $integrateur  = new Application_Model_EuIntegrateur();
                                 $integrateurM = new Application_Model_EuIntegrateurMapper();
                                 $integrateurM->find($compteur,$integrateur);
		
                                 $integrateur->setPublier(1);
		                         $integrateurM->update($integrateur);
								 
								 ///////////////////////////////////////////////////////////////////////////////////////////////////////
							     $id_integrateur = $integrateur->integrateur_id;
							     $souscription = new Application_Model_EuSouscription();
                                 $m_souscription = new Application_Model_EuSouscriptionMapper();
							     $complement   = new Application_Model_EuComplementQuittance();
                                 $m_complement = new Application_Model_EuComplementQuittanceMapper();
								 
								 for($i = 0; $i < $_POST['cpteur']; $i++) {
						             $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								     $m_souscription->find($souscription_id, $souscription);
                                     $souscription->setCode_activite($_POST["code_activite"]);
                                     $souscription->setId_metier($_POST["id_metier"]);
                                     $souscription->setSouscription_email($_POST["souscription_email"]);
                                     $m_souscription->update($souscription);
								   
								     $cpte = $m_complement->findConuter() + 1;
								     $complement->setId_complement_quittance($cpte);
								     $complement->setIntegrateur_id($id_integrateur);
								     $complement->setSouscription_id($souscription_id);
								     $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
								     $m_complement->save($complement);   
						        }
								
								$code_agence = '';
								///////////////////////////////////////////////////////////////////////////////////////////////////////
                                if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
									$membreasso   = new Application_Model_EuMembreasso();
                                    $m_membreasso = new Application_Model_EuMembreassoMapper();
		                            $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);
									
									$association = new Application_Model_EuAssociation();
                                    $m_association = new Application_Model_EuAssociationMapper();
		                            $m_association->find($membreasso->membreasso_association,$association);
		                            $code_agence = $association->code_agence;
									
									$recubancaire = new Application_Model_EuRecubancaire();
                                    $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
									
									$partagea = new Application_Model_EuPartagea();
                                    $partagea_mapper = new Application_Model_EuPartageaMapper();
									
									$partagem = new Application_Model_EuPartagem();
                                    $partagem_mapper = new Application_Model_EuPartagemMapper();
									
									/*for($i = 0; $i < $_POST['cpteur']; $i++) {
									    $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
										$cumul_recubancaire = $recubancaire_mapper->findCumul($souscription_id);
										if($cumul_recubancaire > 0) {
							                 if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
			                                    $partagea_montant = floor($cumul_recubancaire / 100 * 5);
		                                     } else {
			                                    $partagea_montant = floor($cumul_recubancaire / 100 * 5);
		                                     }
							                 //////////////////////////////////////////////////////////////////////////////////////////////////////
											 $compteur_partagea = $partagea_mapper->findConuter() + 1;
                                             $partagea->setPartagea_id($compteur_partagea);
                                             $partagea->setPartagea_association($membreasso->membreasso_association);
                                             $partagea->setPartagea_integrateur($integrateur->integrateur_id);
                                             $partagea->setPartagea_montant($partagea_montant * 0.75);
                                             $partagea_mapper->save($partagea);
											 
											 //////////////////////////////////////////////////////////////////////////////////////////////////////
											 $compteur_partagem = $partagem_mapper->findConuter() + 1;
                                             $partagem->setPartagem_id($compteur_partagem);
                                             $partagem->setPartagem_membreasso($membreasso->membreasso_id);
                                             $partagem->setPartagem_integrateur($integrateur->integrateur_id);
                                             $partagem->setPartagem_montant($partagea_montant * 0.25);
                                             $partagem_mapper->save($partagem);
										}
							        }*/
									
							   }
								
								
								$eusouscription = new Application_Model_EuSouscription();
		                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
								
								$date = new Zend_Date();
		                        $compte_map = new Application_Model_EuCompteMapper();
                                $compte      = new Application_Model_EuCompte();
			                    $sms_money   = new Application_Model_EuSmsmoney();
                                $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                    $det_sms   = new Application_Model_EuDetailSmsmoney();
			                    $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                    $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                    $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							    // insertion dans la table eu_depot_vente
				                $m_dvente = new Application_Model_EuDepotVenteMapper();
				                $dvente = new Application_Model_EuDepotVente();
							   
							    $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                        $membre_pbf = '0000000000000000001M';
	                            $code_compte_pbf = "NN-TR-".$membre_pbf;
			                    $ret = $compte_map->find($code_compte_pbf,$compte);
								
								for($i = 0; $i < $_POST['cpteur']; $i++) {
								   $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								   $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
								   if($finddepot == NULL) {
								       $souscriptionM->find($souscription_id,$eusouscription);
								       $mobile = $eusouscription->souscription_mobile;
									   if($eusouscription->souscription_programme == 'CMFH')   {
									        $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                                if($eusouscription->souscription_autonome == 1) {   
			                                   $nbre_compte = $eusouscription->souscription_nombre - 1; 
			                                } else {
				                               $nbre_compte = $eusouscription->souscription_nombre;
				                            }
											
											$montant = $nbre_compte * $fcaps;
									        // Traitement des produits CAPS
											$lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
											$cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
											if ($lignesdetfcaps != null) {
											    $nengfcaps = $money_map->findConuter() + 1;
                                                $sms_money->setNEng($nengfcaps)
                	                                      ->setCode_Agence(null)
                                                          ->setCreditAmount($montant)
                                                          ->setSentTo($mobile)
                                                          ->setMotif('CAPS')
                                                          ->setId_Utilisateur(null)
                                                          ->setCurrencyCode('XOF')
                                                          ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setFromAccount($code_compte_pbf)
                                                          ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                          ->setCreditCode($codefcaps)
                                                          ->setDestAccount(null)
                                                          ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                          ->setDestAccount_Consumed('CAPS-'.$souscription_id)
                                                          ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                          ->setNum_recu(null);
                                                 $money_map->save($sms_money);
												 
												 // Mise à jour du compte de transfert
				                                 if($ret && ($cumulfcaps >= $montant)) {
			                                        // Mise à jour du compte de transfert
				                                    $compte->setSolde($compte->getSolde() - $montant);
                                                    $compte_map->update($compte);    
	                                             } else {
			                                        $db->rollback();
	                                                $this->view->param = $param;
											        $this->view->souscription_email  = $_POST['souscription_email'];
								                    $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                    $this->view->id_canton  = $_POST['integrateur_canton'];
								                    $this->view->id_ville   = $_POST['integrateur_ville'];
								                    $this->view->code_membre = $_POST['integrateur_membre'];
			                                        $sessionmcnp->error = 'Le compte de transfert est introuvable ou le solde du compte de transfert est insuffisant';
											        //$this->_redirect('/index/addintegrateur/param/'.$param);
                                                    return;			   
			                                      }
												  
												  $l = 0;
					                              $reste = $montant;
					                              $nbre_lignesdetfcaps = count($lignesdetfcaps);
												  while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										                $lignedetfcaps = $lignesdetfcaps[$l];
                                                        $id = $lignedetfcaps->getId_detail_smsmoney();
						                                $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											            if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                                     //Mise à jour  des lignes d'enrégistrement
                                                             $reste = $reste - $lignedetfcaps->getSolde_sms();
												             //insertion dans la table eu_detailventesms
						                                     $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                             $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                              ->setId_detail_smsmoney($id)
                                                                      ->setCode_membre_dist($membre_pbf)
                                                                      ->setCode_membre(null)
                                                                      ->setType_tansfert('CAPS')
                                                                      ->setCreditcode($codefcaps)
                                                                      ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                      ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                                      ->setId_utilisateur(null)
                                                                      ->setCode_produit('CAPS');
                                                             $det_vte_sms->insert($det_vtesms->toArray());
															
							                                 $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                                  ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                                  ->setSolde_sms(0);
                                                             $det_sms_m->update($lignedetfcaps);
  
						                                  } else {
												             //Mise à jour  des lignes d'enrégistrement
												             //insertion dans la table eu_detailventesms
						                                     $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                             $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                                ->setId_detail_smsmoney($id)
                                                                        ->setCode_membre_dist($membre_pbf)
                                                                        ->setCode_membre(null)
                                                                        ->setType_tansfert('CAPS')
                                                                        ->setCreditcode($codefcaps)
                                                                        ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                        ->setMont_vente($reste)
                                                                        ->setId_utilisateur(null)
                                                                        ->setCode_produit('CAPS');
                                                               $det_vte_sms->insert($det_vtesms->toArray());
															
                                                               $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                                   $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                               $det_sms_m->update($lignedetfcaps);
						                                       $reste = 0;
												          }
										                  $l++;
										            }
									        } else  {
				                                $db->rollback();
	                                            $this->view->param = $param;
										        $this->view->souscription_email  = $_POST['souscription_email'];
								                $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
								                $this->view->id_canton  = $_POST['integrateur_canton'];
								                $this->view->id_ville   = $_POST['integrateur_ville'];
								                $this->view->code_membre = $_POST['integrateur_membre'];
			                                    $sessionmcnp->error = 'Le solde du compte de transfert CAPS est null';
		                                        //$this->_redirect('/index/addintegrateur/param/'.$param);
                                                return;
				                            }
											
											$countdvente = $m_dvente->findConuter() + 1;
				                            $dvente->setId_depot($countdvente)
					                               ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                            $dvente->setCode_membre($_POST['integrateur_membre']);   
			                                $dvente->setCode_produit('CAPS');
				                            $dvente->setMont_depot($montant);
				                            $dvente->setMont_vendu(0);
				                            $dvente->setSolde_depot($montant);
				                            $dvente->setId_utilisateur(null);
				                            $dvente->setType_depot('AvecListe');
				                            $dvente->setSouscription_id($souscription_id);
				                            $m_dvente->save($dvente);
									   
									        $compteur = Util_Utils::findConuter() + 1;
				                            Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
								
								            include("automatisation.php");
								            codegenerer($souscription_id);
									   }
								
								   
								   } else {
								       $m_dvente->find($finddepot->id_depot,$dvente);
									   $dvente->setCode_membre($_POST['integrateur_membre']);
                                       $m_dvente->update($dvente);

                                       include("automatisation.php");
								       recupcodegenerer($souscription_id);									   
								   }
								
								
								}
								
								$souscription = new Application_Model_EuSouscription();
                                $m_souscription = new Application_Model_EuSouscriptionMapper();
		                        $m_souscription->find($integrateur->integrateur_souscription,$souscription);
								
								$date_id = Zend_Date::now();

                                $association = new Application_Model_EuAssociation();
                                $association_mapper = new Application_Model_EuAssociationMapper();
								
								$compteur_association = $association_mapper->findConuter() + 1;
                                $association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);
								
								
								$date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								$login = "";
								$password = "";
			                    
								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								     //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                     $login = "";
                                     while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)]; 
                                     }
									 $password = $login.$login;
									 
								} else {
								     $login = $souscription->souscription_login;
									 $password = $souscription->souscription_passe;
								}
								
                                $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                $membreasso->setMembreasso_nom($souscription->souscription_nom);
                                $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
								$membreasso->setSouscription_id($souscription->souscription_id);
							    $membreasso->setIntegrateur_id($integrateur->integrateur_id);
                                $membreasso_mapper->save($membreasso);
								
								
								$html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                $html .= "<br/>";
                                $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                $html .= "<br/>";
							    $html .= "Login : ".$login."<br/>";
                                $html .= "Mot de passe : ".$password."<br/>";
							   
							    $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							    $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                                Zend_Mail::setDefaultTransport($tr);		
                                $mail = new Zend_Mail();
							   
							    $mail->setBodyHtml($html);
                                $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                $mail->send($tr); 

							    $db->commit();
                                $sessionmcnp->error = "Opération bien effectuée ...";
		                        $this->_redirect('/index/addintegrateur/param/'.$_POST['integrateur_type']);
								
						   
						   } else {
						     $db->rollback();
							 $this->view->param = $param;
							 $this->view->souscription_email  = $_POST['souscription_email'];
							 $this->view->integrateur_adresse = $_POST['integrateur_adresse'];
							 $this->view->id_canton  = $_POST['integrateur_canton'];
							 $this->view->id_ville   = $_POST['integrateur_ville'];
							 $this->view->code_membre = $_POST['integrateur_membre'];
		                     $sessionmcnp->error = "Le nombre de comptes marchands souscrits est insuffisant pour effectuer cette operation ...";
							 return;
						   }
				   
				   } catch (Exception $exc) {
				        $db->rollback();
	                    $this->view->param = $param;
						$this->view->souscription_email  = $_POST['souscription_email'];
						$this->view->integrateur_adresse = $_POST['integrateur_adresse'];
						$this->view->id_canton  = $_POST['integrateur_canton'];
						$this->view->id_ville   = $_POST['integrateur_ville'];
						$this->view->code_membre = $_POST['integrateur_membre'];
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
		                //$this->_redirect('/index/addintegrateur/param/'.$param);
                        return;
                   } 
				   
				 }  
			}
	        $param = (int)$this->_request->getParam('param');
	        $this->view->param = $param;
	 }
	
	
	 
	 public function addintegrateurcomplementAction() {
	        /* page administration/addintegrateur - Ajout d'une integrateur */
		    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		    //$this->_helper->layout->disableLayout();
 		    $this->_helper->layout()->setLayout('layoutpublicesmc');
		    $request = $this->getRequest ();
		    $m_souscription2 = new Application_Model_EuSouscriptionMapper();
			
			if ($request->isPost ()) {
			    $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try  {
				     $nombre_compte = 0;
				     $cpte = $_POST['cpteur'];
					 
					 for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				         $numero_quittance = $_POST['integrateur_souscription_ordre'.$i];
					     $j = $i + 1;
					     if($cpte > 1) {
					         while($j < $cpte) {
						          $num_quittance = $_POST['integrateur_souscription_ordre'.$j];
							      if($numero_quittance == $num_quittance) {  
							         $db->rollback();
					                 $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		                             $sessionmcnp->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                 return;
							      }
							      $j++;
						    }
					     }
				      }
					  
					  $souscription_id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
				      if($souscription_id == NULL) {
					     $db->rollback();
					     $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		                 $sessionmcnp->error = "Ancien Numéro de quittance ".$_POST['ancien_numero_quittance']."  est  invalide ...";
					     return;
		              }
					  
					  
					  for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                  $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'. $i]);
					      if($souscription_id == NULL) {
					         $db->rollback();
						     $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                     $sessionmcnp->error = "Numéro de quittance ".$_POST['integrateur_souscription_ordre'.$i]."  est  invalide ...";
					         return;
		                  }  
					  }
					  
					  $souscription3 = new Application_Model_EuSouscription();
                      $m_souscription3 = new Application_Model_EuSouscriptionMapper();
					  $id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					  $m_souscription3->find($id,$souscription3);
					  $souscription_souscription = $souscription3->souscription_souscription;
					  for($i = 0; $i < $_POST['cpteur']; $i++)  {
						 $id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
						 $m_souscription3->find($id,$souscription3);	
						 if($souscription_souscription != $souscription3->souscription_souscription) {
							$db->rollback();
							$this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                    $sessionmcnp->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
                            return;
						 }    
					  }
					  
					  $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
					  $m_complement_quittance2 = new Application_Model_EuComplementQuittanceMapper();
					  for($i = 0; $i < $_POST['cpteur']; $i++) {
					      $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
					      $integrateur2    = $m_integrateur2->fetchAllBySouscription($souscription_id);
					      $complement2    = $m_complement_quittance2->fetchAllBySouscription($souscription_id);
					      if(count($integrateur2) > 0  || count($complement2) > 0) {
						     $db->rollback();
						     $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                     $sessionmcnp->error = "Numéro de quittance  ".$_POST['integrateur_souscription_ordre'.$i]."  déjà  utilisé ...";      
                             return;
	                      }
				      }
					
					  $id_souscription = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					  $integrateur2    = $m_integrateur2->fetchAllBySouscription($id_souscription);
					  $complement2    = $m_complement_quittance2->fetchAllBySouscription($id_souscription);
					  if((count($integrateur2) == 0)  || (count($complement2) == 0)) {
					     $db->rollback();
					     $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                 $sessionmcnp->error = "Ancien Numéro de quittance  ".$_POST['ancien_numero_quittance']."  non utilisé ...";      
                         return;
	                  }
					
					  for($i = 0; $i < $_POST['cpteur']; $i++) {
					     $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
					     $m_souscription3->find($souscription_id,$souscription3);  
					     $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
					  }
					
					  $complement   = new Application_Model_EuComplementQuittance();
                      $m_complement = new Application_Model_EuComplementQuittanceMapper();
					  $integrateur  = new Application_Model_EuIntegrateur();
                      $integrateurM = new Application_Model_EuIntegrateurMapper();
                      $integrateurM->find($complement2->integrateur_id,$integrateur);
					  
					  
					  
					  if($nombre_compte >= 10)   {
					  
					     if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0) {
							  $membreasso   = new Application_Model_EuMembreasso();
                              $m_membreasso = new Application_Model_EuMembreassoMapper();
		                      $m_membreasso->find($integrateur->integrateur_membreasso,$membreasso);
									
							  $association = new Application_Model_EuAssociation();
                              $m_association = new Application_Model_EuAssociationMapper();
		                      $m_association->find($membreasso->membreasso_association,$association);
		                      $code_agence = $association->code_agence;
									
							  $recubancaire = new Application_Model_EuRecubancaire();
                              $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
									
							  $partagea = new Application_Model_EuPartagea();
                              $partagea_mapper = new Application_Model_EuPartageaMapper();
									
							  $partagem = new Application_Model_EuPartagem();
                              $partagem_mapper = new Application_Model_EuPartagemMapper();
									
							/*
							for($i = 0; $i < $_POST['cpteur']; $i++) {
							    $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
								$cumul_recubancaire = $recubancaire_mapper->findCumul($souscription_id);
								if($cumul_recubancaire > 0) {
							        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL) {
			                          $partagea_montant = floor($cumul_recubancaire / 100 * 5);
		                            } else {
			                          $partagea_montant = floor($cumul_recubancaire / 100 * 5);
		                            }
							        //////////////////////////////////////////////////////////////////////////////////////////////////////
									$compteur_partagea = $partagea_mapper->findConuter() + 1;
                                    $partagea->setPartagea_id($compteur_partagea);
                                    $partagea->setPartagea_association($membreasso->membreasso_association);
                                    $partagea->setPartagea_integrateur($integrateur->integrateur_id);
                                    $partagea->setPartagea_montant($partagea_montant * 0.75);
                                    $partagea_mapper->save($partagea);
											 
									//////////////////////////////////////////////////////////////////////////////////////////////////////
									$compteur_partagem = $partagem_mapper->findConuter() + 1;
                                    $partagem->setPartagem_id($compteur_partagem);
                                    $partagem->setPartagem_membreasso($membreasso->membreasso_id);
                                    $partagem->setPartagem_integrateur($integrateur->integrateur_id);
                                    $partagem->setPartagem_montant($partagea_montant * 0.25);
                                    $partagem_mapper->save($partagem);
								}
						    }*/
					    }
					  
					    $date_id = new Zend_Date();
					
					    for($i = 0; $i < $_POST['cpteur']; $i++) {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
						   $cpte = $m_complement->findConuter() + 1;
						   $complement->setId_complement_quittance($cpte);
						   $complement->setIntegrateur_id($complement2->integrateur_id);
						   $complement->setSouscription_id($souscription_id);
						   $complement->setDate_complement_quittance($date_id->toString('yyyy-MM-dd'));
						   $m_complement->save($complement);
					
					    }
						
						$eusouscription = new Application_Model_EuSouscription();
		                $souscriptionM = new Application_Model_EuSouscriptionMapper();
							   
					    $date = new Zend_Date();
		                $compte_map = new Application_Model_EuCompteMapper();
                        $compte      = new Application_Model_EuCompte();
			            $sms_money   = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			            $det_sms   = new Application_Model_EuDetailSmsmoney();
			            $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			            $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			            $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
					    // insertion dans la table eu_depot_vente
				        $m_dvente = new Application_Model_EuDepotVenteMapper();
				        $dvente = new Application_Model_EuDepotVente();
							   
						$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                $membre_pbf = '0000000000000000001M';
	                    $code_compte_pbf = "NN-TR-".$membre_pbf;
			            $ret = $compte_map->find($code_compte_pbf,$compte);
						
						for($i = 0; $i < $_POST['cpteur']; $i++) {
						    $souscription_id = $souscriptionM->findIdSouscription($_POST['integrateur_souscription_ordre'.$i]);
							$finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
							if($finddepot == NULL) {
						       $souscriptionM->find($souscription_id,$eusouscription);
						       $mobile = $eusouscription->souscription_mobile;
							   
							   if($eusouscription->souscription_programme == 'CMFH')   {
							   
							        $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                        if($eusouscription->souscription_autonome == 1) {   
			                          $nbre_compte = $eusouscription->souscription_nombre - 1; 
			                        } else {
				                      $nbre_compte = $eusouscription->souscription_nombre;
                                    }
									
									$montant = $nbre_compte * $fcaps;
							        // Traitement des produits CAPS
				                    $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									$cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
								    if ($lignesdetfcaps != null) {
									    
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed($souscription_id)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                          $money_map->save($sms_money);
										   
									      // Mise à jour du compte de transfert
				                          if($ret && ($cumulfcaps >= $montant)) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);    
	                                      } else {
			                                 $db->rollback();
								             $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
			                                 $sessionmcnp->error = 'Le compte est introuvable ou le solde est insuffisant';
                                             return;			   
			                              }
										  
										  $l = 0;
					                      $reste = $montant;
					                      $nbre_lignesdetfcaps = count($lignesdetfcaps);
										  while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										    $lignedetfcaps = $lignesdetfcaps[$l];
                                            $id = $lignedetfcaps->getId_detail_smsmoney();
						                    $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                       //Mise à jour  des lignes d'enrégistrement
                                               $reste = $reste - $lignedetfcaps->getSolde_sms();
											   //insertion dans la table eu_detailventesms
						                       $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                               $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                  ->setId_detail_smsmoney($id)
                                                          ->setCode_membre_dist($membre_pbf)
                                                          ->setCode_membre(null)
                                                          ->setType_tansfert('CAPS')
                                                          ->setCreditcode($codefcaps)
                                                          ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                          ->setId_utilisateur(null)
                                                          ->setCode_produit('CAPS');
                                               $det_vte_sms->insert($det_vtesms->toArray());
															
							                   $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                     ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                     ->setSolde_sms(0);
                                               $det_sms_m->update($lignedetfcaps);		  
						                     } else {
												  //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }
									
									} else  {
				                       $db->rollback();
								       $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
			                           $sessionmcnp->error = 'Le solde du compte CAPS est null';
                                       return;
				                    }
									
									$countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                    $dvente->setCode_membre($integrateur->code_membre);   
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($souscription_id);
				                    $m_dvente->save($dvente);
									   
									$compteur = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
								
								    include("automatisation.php");
								    codegenerer($souscription_id);
							   
							   }
							   
							} else {
                                $m_dvente->find($finddepot->id_depot,$dvente);
							    $dvente->setCode_membre($integrateur->code_membre);
                                $m_dvente->update($dvente);
								
								include("automatisation.php");
								recupcodegenerer($souscription_id);
                            }							
						
						}
						
						$db->commit();
                        $sessionmcnp->error = "Opération bien effectuée ...";
		                $this->_redirect('/index/addintegrateurcomplement');
						
					  
					  } else {
						 $db->rollback();
					     $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		                 $sessionmcnp->error = "Le nombre de comptes marchands souscrits est insuffisant pour effectuer cette operation ...";
					     return;
					  }
			    } catch (Exception $exc) {
				     $db->rollback();
				     $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
				     $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                     return;
                }
			
			}
	 
	 }
	 
	 
	
	
	  public function addintegrateuroldAction() {
	       /* page administration/addintegrateur - Ajout d'une integrateur */
	       $sessionmcnp = new Zend_Session_Namespace('mcnp');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmc');
		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville = new Application_Model_EuVilleMapper ();
           $cantons = $t_canton->fetchAll();
           $villes = $m_ville->fetchAll();
           $this->view->cantons = $cantons;
           $this->view->villes = $villes;
		   
		   if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	          if (isset($_POST['integrateur_souscription_ordre']) && $_POST['integrateur_souscription_ordre']!="" && isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" && isset($_POST['code_activite']) && $_POST['code_activite']!="" && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation']==1) {   
		          $param = (int)$this->_request->getParam('param');
				  $sessionmcnp->error = "Pour des raisons techniques, veuillez patienter pour l'opérationalité de l'interface intégrateur ...";
		          $this->_redirect('/index/addintegrateur/param/'.$param);
	          }
			  
			} 
             
            $param = (int)$this->_request->getParam('param');
	        $this->view->param = $param;			 
	} 
	
	


    public function addintegrateurolderAction() {
        /* page administration/addintegrateur - Ajout d'une integrateur */

	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
		$t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper ();
        $cantons = $t_canton->fetchAll();
        $villes = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['integrateur_souscription_ordre']) && $_POST['integrateur_souscription_ordre']!="" && isset($_POST['integrateur_type']) && $_POST['integrateur_type']!="" && isset($_POST['code_activite']) && $_POST['code_activite']!="" && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" && isset($_POST['integrateur_attestation']) && $_POST['integrateur_attestation']==1) {

		            $param = (int)$this->_request->getParam('param');
	 //$this->view->param = $param;

        $m_souscription2 = new Application_Model_EuSouscriptionMapper();
		$souscription_id = $m_souscription2->findIdSouscription($_POST['integrateur_souscription_ordre']);
		
		if($souscription_id == NULL) {
		   $sessionmcnp->error = "Numéro de quittance invalide ...";
		} else {
			
        $souscription3 = new Application_Model_EuSouscription();
        $m_souscription3 = new Application_Model_EuSouscriptionMapper();
		$m_souscription3->find($souscription_id, $souscription3);
		
		if(count($souscription3) > 0 && $souscription3->souscription_nombre >= 10) {
		
        $m_integrateur2 = new Application_Model_EuIntegrateurMapper();
		$integrateur2 = $m_integrateur2->fetchAllBySouscription($souscription_id);
		
		if(count($integrateur2) > 0){
		   $sessionmcnp->error = "Numéro de quittance déjà utilisé ...";
			}else{

            $souscription = new Application_Model_EuSouscription();
            $m_souscription = new Application_Model_EuSouscriptionMapper();
		    $m_souscription->find($souscription_id, $souscription);
			
            $souscription->setCode_activite($_POST["code_activite"]);
            $souscription->setId_metier($_POST["id_metier"]);
            $souscription->setSouscription_email($_POST["souscription_email"]);
            $m_souscription->update($souscription);
			
		
			
		
		include("Transfert.php");
		if(isset($_FILES['integrateur_diplome']['name']) && $_FILES['integrateur_diplome']['name']!=""){
		$chemin	= "integrateurs";
		$file = $_FILES['integrateur_diplome']['name'];
		$file1='integrateur_diplome';
		$integrateur_diplome = $chemin."/".transfert($chemin,$file1);
		} else {$integrateur_diplome = "";}
			

		if(isset($_FILES['integrateur_document']['name']) && $_FILES['integrateur_document']['name']!=""){
		$chemin	= "integrateurs";
		$file = $_FILES['integrateur_document']['name'];
		$file1='integrateur_document';
		$integrateur_document = $chemin."/".transfert($chemin,$file1);
		} else {$integrateur_document = "";}
			

            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $a = new Application_Model_EuIntegrateur();
            $ma = new Application_Model_EuIntegrateurMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setIntegrateur_id($compteur);
            $a->setIntegrateur_type($_POST['integrateur_type']);
            $a->setIntegrateur_souscription($souscription_id);
if($param == 1 || $param == 2 || $param == 3|| $param == 4 || $param == 5 || $param == 6|| $param == 7 || $param == 8){
            $a->setIntegrateur_critere1($_POST['integrateur_critere1']);
            $a->setIntegrateur_critere2($_POST['integrateur_critere2']);
            $a->setIntegrateur_critere3($_POST['integrateur_critere3']);
}
if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 19 || $param == 20 || $param == 22){
if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 22) {
            $a->setIntegrateur_poste($_POST['integrateur_poste']);
}
            $a->setIntegrateur_education($_POST['integrateur_education']);
if($param == 15 || $param == 16 || $param == 17|| $param == 18 || $param == 22) {
            $a->setIntegrateur_affiliation($_POST['integrateur_affiliation']);
}
            $a->setIntegrateur_formation($_POST['integrateur_formation']);
            $a->setIntegrateur_langue($_POST['integrateur_langue']);
            $a->setIntegrateur_experience($_POST['integrateur_experience']);
            $a->setIntegrateur_document($integrateur_document);
            $a->setIntegrateur_diplome($integrateur_diplome);
}
            $a->setIntegrateur_attestation($_POST['integrateur_attestation']);
            $a->setIntegrateur_membreasso(0);/*$sessionmembreasso->membreasso_id*/
            $a->setIntegrateur_date($date_id->toString('yyyy-MM-dd'));
			$a->setPublier($_POST['publier']);
            $a->setIntegrateurAdresse($_POST['integrateur_adresse']);
            $a->setIntegrateurCanton($_POST['integrateur_canton']);
            $a->setIntegrateurVille($_POST['integrateur_ville']);
            $ma->save($a);
			

//////////////////////////////////////////////////////////
		
        $integrateur = new Application_Model_EuIntegrateur();
        $integrateurM = new Application_Model_EuIntegrateurMapper();
        $integrateurM->find($compteur, $integrateur);
		
        $integrateur->setPublier(1);
		$integrateurM->update($integrateur);
		
		
		
$id_integrateur = $integrateur->integrateur_id;
//////////////////////////////////////////
if($integrateur->integrateur_membreasso != 1 && $integrateur->integrateur_membreasso != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($integrateur->integrateur_membreasso, $membreasso);
			
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;
		
        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($integrateur->integrateur_souscription);
        //$cumul_recubancaire = 0;
		
		if($cumul_recubancaire > 0){
		
		if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
			
			/*if($integrateur->integrateur_type == "1"){
			$partagea_montant = floor(($cumul_recubancaire / 100 * 10) / 2);
				}else{
			$partagea_montant = floor(($cumul_recubancaire / 100 * 5) / 2);
					}*/
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}else{
			
			/*if($integrateur->integrateur_type == "1"){
			$partagea_montant = floor($cumul_recubancaire / 100 * 10);
				}else{
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
					}*/
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}
			
//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_integrateur($integrateur->integrateur_id);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);
			
//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_integrateur($integrateur->integrateur_id);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);
			
//////////////////////////////////////////

}
		
			}
				
			
        $membreasso_sous_m = new Application_Model_EuMembreassoMapper();
        $membreasso_sous = $membreasso_sous_m->fetchAllBySouscription($integrateur->integrateur_souscription);
			
			
			
///////////////////////////////////////////////////////////////			
if($integrateur->integrateur_type <= 8 && count($membreasso_sous) > 0){
	
        $souscription = new Application_Model_EuSouscription();
        $m_souscription = new Application_Model_EuSouscriptionMapper();
		$m_souscription->find($integrateur->integrateur_souscription, $souscription);

        $date_id = Zend_Date::now();

        $association = new Application_Model_EuAssociation();
        $association_mapper = new Application_Model_EuAssociationMapper();
			
            $compteur_association = $association_mapper->findConuter() + 1;
            $association->setAssociation_id($compteur_association);
            $association->setAssociation_mobile($souscription->souscription_mobile);
            $association->setAssociation_nom($souscription->souscription_nom." ".$souscription->souscription_prenom);
            $association->setAssociation_numero($compteur_association."INT");
            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
            $association->setAssociation_email($souscription->souscription_email);
            $association->setAssociation_recepisse(NULL);
            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $association->setId_filiere(NULL);
            $association->setCode_type_acteur(NULL);
            $association->setCode_statut(NULL);
            $association->setCode_agence($code_agence);
            $association->setPublier(1);
            $association_mapper->save($association);
			



			
        $date_id = Zend_Date::now();

        $membreasso = new Application_Model_EuMembreasso();
        $membreasso_mapper = new Application_Model_EuMembreassoMapper();
			
            $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
            $membreasso->setMembreasso_id($compteur_membreasso);
            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
            $membreasso->setMembreasso_nom($souscription->souscription_nom);
            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
            $membreasso->setMembreasso_association($compteur_association);
            $membreasso->setMembreasso_email($souscription->souscription_email);
            $membreasso->setMembreasso_login($souscription->souscription_login);
            $membreasso->setMembreasso_passe($souscription->souscription_passe);
            $membreasso->setMembreasso_type(1);
            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
            $membreasso->setPublier(1);
            $membreasso_mapper->save($membreasso);
			

$html = "Vous avez rempli le formulaire d'intégrateur, donc utilisez les mêmes Login et Mot de passe pour vous connecter à votre espace Intégrateur .";
$html .= "<br/>";
$html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Agrément OSE/OE</a>";
$html .= "<br/>";


$config = array('auth' => 'login',
                'username' => Util_Utils::getParamEsmc(3),
                'password' => Util_Utils::getParamEsmc(4));
 
$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);		
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(Util_Utils::getParamEsmc(3), "ESMC");
$mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->setSubject('Formulaire Intégrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
$mail->send($tr);

	}


			

//////////////////////////////////////////////////////////

             $sessionmcnp->error = "Opération bien effectuée ...";

		     $this->_redirect('/index/addintegrateur/param/'.$_POST['integrateur_type']);
								}
			
			} else {
		      $sessionmcnp->error = "Numéro de quittance doit être celui d'un CMFH Offreur de projet ...";
			}
		}

		} else {  $sessionmcnp->error = "Champs * obligatoire ...";  } 
		}
		
		
            $param = (int)$this->_request->getParam('param');
	 $this->view->param = $param;
		
		
    }






    public function addsouscriptioncomplementAction()
    {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
		

	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['ancien_recubancaire_type']) && $_POST['ancien_recubancaire_type']!="" && isset($_POST['ancien_recubancaire_numero']) && $_POST['ancien_recubancaire_numero']!="" && isset($_POST['ancien_recubancaire_date_numero']) && $_POST['ancien_recubancaire_date_numero']!="" && isset($_POST['recubancaire_type']) && $_POST['recubancaire_type']!="" && isset($_POST['recubancaire_numero']) && $_POST['recubancaire_numero']!="" && isset($_POST['recubancaire_date_numero']) && $_POST['recubancaire_date_numero']!="" && isset($_POST['recubancaire_montant']) && $_POST['recubancaire_montant']!=""
					&& isset($_FILES['recubancaire_vignette']['name']) && $_FILES['recubancaire_vignette']['name']!="" && verif_img($_FILES['recubancaire_vignette']['name']) == 1 
) {
		

        $recubancaireM = new Application_Model_EuRecubancaireMapper();
        $recubancaire = $recubancaireM->fetchAllByTypeNumeroDate($_POST['ancien_recubancaire_type'], $_POST['ancien_recubancaire_numero'], $_POST['ancien_recubancaire_date_numero']);
		if(count($recubancaire) > 0) {
			
			
			
        $date_id = Zend_Date::now();
		
		include("Transfert.php");
		if(isset($_FILES['recubancaire_vignette']['name']) && $_FILES['recubancaire_vignette']['name']!=""){
		$chemin	= "recubancaires";
		$file = $_FILES['recubancaire_vignette']['name'];
		$file1='recubancaire_vignette';
		$recubancaire_vignette = $chemin."/".transfert($chemin,$file1);
		} else {$recubancaire_vignette = "";}
            $recubancaire = new Application_Model_EuRecubancaire();
            $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
		
            $compteur_recubancaire = $recubancaire_mapper->findConuter() + 1;
            $recubancaire->setRecubancaire_id($compteur_recubancaire);
            $recubancaire->setRecubancaire_type($_POST['recubancaire_type']);
            $recubancaire->setRecubancaire_numero($_POST['recubancaire_numero']);
            $recubancaire->setRecubancaire_date_numero($_POST['recubancaire_date_numero']);
			if($_POST['recubancaire_type'] == "Banque") {
                $recubancaire->setRecubancaire_banque($_POST['recubancaire_banque']);
			}
            $recubancaire->setRecubancaire_montant($_POST['recubancaire_montant']);
            $recubancaire->setRecubancaire_vignette($recubancaire_vignette);
            $recubancaire->setRecubancaire_souscription($recubancaire->recubancaire_souscription);
			$recubancaire->setPublier(1);
            $recubancaire_mapper->save($recubancaire);
			
			
		    /*	
            $recubancaire2M = new Application_Model_EuRecubancaireMapper();
            $recubancaire2 = $recubancaire2M->findCumul($recubancaire->recubancaire_souscription);
			
            $souscription = new Application_Model_EuSouscription();
            $souscriptionM = new Application_Model_EuSouscriptionMapper();
            $souscriptionM->find($recubancaire->recubancaire_souscription, $souscription);	
		    if($recubancaire2 >= $_POST['souscription_montant']){*/	

            $sessionmcnp->error = "Opération bien effectuée";
		    $this->_redirect('/index/listsouscription2');/**/
			
		} else {
            $sessionmcnp->error = "Erreur : Veuillez rependre";
		}



		
			
			
			
			
			
			
		} else {  $sessionmcnp->error = "Champs * obligatoire ..."; }
	}
	 
	}



     
	 
	 public function addoffreurprojetcomplementAction() {
        /* page administration/addoffreurprojet - Ajout d'une offreurprojet */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
		$request = $this->getRequest ();
	   $m_souscription2 = new Application_Model_EuSouscriptionMapper();
	   if ($request->isPost ()) {
	       $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try {
               $nombre_compte = 0;
			   $cpte = $_POST['cpteur'];

               for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				     $numero_quittance = $_POST['offreur_projet_souscription_ordre'.$i];
					 $j = $i + 1;
					 if($cpte > 1) {
					      while($j < $cpte) {
						     $num_quittance = $_POST['offreur_projet_souscription_ordre'.$j];
							 if($numero_quittance == $num_quittance) {  
							    $db->rollback();
					            $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		                        $sessionmcnp->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					            return;
							 }
							 $j++;
						  }
					 }
				  }

                  $souscription_id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
				  if($souscription_id == NULL) {
					 $db->rollback();
					 $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
		             $sessionmcnp->error = "Ancien Numéro de quittance ".$_POST['ancien_numero_quittance']."  est  invalide ...";
					 return;
		           }

                   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		              $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'. $i]);
					  if($souscription_id == NULL) {
					     $db->rollback();
						 $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                 $sessionmcnp->error = "Numéro de quittance ".$_POST['offreur_projet_souscription_ordre'.$i]."  est  invalide ...";
					     return;
		               }  
					}

                    $souscription3 = new Application_Model_EuSouscription();
                    $m_souscription3 = new Application_Model_EuSouscriptionMapper();
					$id = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					$m_souscription3->find($id,$souscription3);
					$souscription_souscription = $souscription3->souscription_souscription;
					for($i = 0; $i < $_POST['cpteur']; $i++)  {
						$id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						$m_souscription3->find($id,$souscription3);	
						if($souscription_souscription != $souscription3->souscription_souscription) {
							$db->rollback();
							$this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                    $sessionmcnp->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
                            return;
						}    
					}

                    $m_offreur2 = new Application_Model_EuOffreurProjetMapper();
					$m_detail_offreur2 = new Application_Model_EuDetailOffreurProjetMapper();
					for($i = 0; $i < $_POST['cpteur']; $i++) {
					   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
					   $offreur2    = $m_offreur2->fetchAllBySouscription($souscription_id);
					   $detail2    = $m_detail_offreur2->fetchAllBySouscription($souscription_id);
					   if(count($offreur2) > 0  || count($detail2) > 0) {
						   $db->rollback();
						   $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		                   $sessionmcnp->error = "Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]."  déjà  utilisé ...";      
                           return;
	                   }
				    }	

                    $id_souscription = $m_souscription2->findIdSouscription($_POST['ancien_numero_quittance']);
					$offreur2    = $m_offreur2->fetchAllBySouscription($id_souscription);
					$detail2    = $m_detail_offreur2->fetchAllBySouscription($id_souscription);
					if((count($offreur2) == 0)  || (count($detail2) == 0)) {
					  $db->rollback();
					  $this->view->ancien_numero_quittance = $_POST['ancien_numero_quittance'];
		              $sessionmcnp->error = "Ancien Numéro de quittance  ".$_POST['ancien_numero_quittance']."  non utilisé ...";      
                      return;					
				    }
					
					/* for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   if(($souscription3->souscription_type_candidat != 6 && $souscription3->souscription_type_candidat == 7)) {
						       $db->rollback();
							   $this->view->param = $param;
							   $this->view->souscription_email = $_POST['souscription_email'];
							   $this->view->code_membre = $_POST['offreur_projet_membre'];      
						       $sessionmcnp->error = "Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]." doit être celui d'un CMFH Offreur de projet ou d'un offreur de BPS ...";
						   }
				     }*/
					
					
					for($i = 0; $i < $_POST['cpteur']; $i++) {
					   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
					   $m_souscription3->find($souscription_id,$souscription3);  
					   $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
					}
					
					if($nombre_compte >= 100)   {
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $a = new Application_Model_EuOffreurProjet();
                       $ma = new Application_Model_EuOffreurProjetMapper();
						   	
					   $id_offreur_projet = $detail2->offreur_projet_id;
					   $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                       $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
					   $offreur  = new Application_Model_EuOffreurProjet();
                       $offreurM = new Application_Model_EuOffreurProjetMapper();
                       $offreurM->find($id_offreur_projet,$offreur);
					   
							
					   for($i = 0; $i < $_POST['cpteur']; $i++) {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $cpte = $m_detailoffreur->findConuter() + 1;
						   $detailoffreur->setId_detail_offreur_projet($cpte);
						   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
						   $detailoffreur->setSouscription_id($souscription_id);
						   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
						   $m_detailoffreur->save($detailoffreur);
					    }
							
						/////////////////////////////////////////////////////////////////////////////////////////
						    $eusouscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();
							   
							$date = new Zend_Date();
		                    $compte_map = new Application_Model_EuCompteMapper();
                            $compte      = new Application_Model_EuCompte();
			                $sms_money   = new Application_Model_EuSmsmoney();
                            $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                $det_sms   = new Application_Model_EuDetailSmsmoney();
			                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							// insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();
							   
							$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                    $membre_pbf = '0000000000000000001M';
	                        $code_compte_pbf = "NN-TR-".$membre_pbf;
			                $ret = $compte_map->find($code_compte_pbf,$compte);
							
							for($i = 0; $i < $_POST['cpteur']; $i++) {
							   $souscription_id = $souscriptionM->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
							   $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
							   if($finddepot == NULL) {
							      $souscriptionM->find($souscription_id,$eusouscription);
								  $mobile = $eusouscription->souscription_mobile;
                                  if($eusouscription->souscription_programme == 'CMFH')   {
                                     $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                         if($eusouscription->souscription_autonome == 1) {   
			                            $nbre_compte = $eusouscription->souscription_nombre - 1; 
			                         } else {
				                        $nbre_compte = $eusouscription->souscription_nombre;
				                     }
									 $montant = $nbre_compte * $fcaps;
									 // Traitement des produits CAPS
				                     $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									 if ($lignesdetfcaps != null) {
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed($souscription_id)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                           $money_map->save($sms_money);
										   
										   // Mise à jour du compte de transfert
				                           if($ret) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);    
	                                       } else {
			                                 $db->rollback();
	                                         $this->view->param = $param;
											 $this->view->souscription_email  = $_POST['souscription_email'];
								             $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                 $sessionmcnp->error = 'Le compte est introuvable';
											 //$this->_redirect('/index/addintegrateur/param/'.$param);
                                             return;			   
			                               }
										   
										   $l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);

													  
						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }
									 
									 } else  {
				                       $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->souscription_email  = $_POST['souscription_email'];
								       $this->view->code_membre = $_POST['offreur_projet_membre'];
			                           $sessionmcnp->error = 'Le solde du compte CAPS est null';
		                               //$this->_redirect('/index/addintegrateur/param/'.$param);
                                       return;
				                    }
									
									$countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                    $dvente->setCode_membre($offreur->offreur_projet_code_membre);   
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($souscription_id);
				                    $m_dvente->save($dvente);
									   
									$compteur = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
								
								    include("automatisation.php");
								    codegenerer($souscription_id);
									
                                  }								     
							   } else {
							         $m_dvente->find($finddepot->id_depot,$dvente);
							         $dvente->setCode_membre($offreur->offreur_projet_code_membre);
									 $m_dvente->update($dvente);
									 
									 include("automatisation.php");
								     recupcodegenerer($souscription_id);
							   
							   }
                            }
				            $db->commit();
                            $sessionmcnp->error = "Opération bien effectuée ...";
		                    $this->_redirect('/index/addoffreurprojetcomplement');
				
				    }
	   
	       } catch (Exception $exc) {
			  $db->rollback();
			  $this->view->ancien_numero_quittance  = $_POST['ancien_numero_quittance'];
              return;
           }
	   
	   }
        
    }
    
   
   
   
    public function addoffreinvalidAction() {
	       /*page administration/addoffreurprojet - Ajout d'une offreurprojet */
	       $sessionmcnp = new Zend_Session_Namespace('mcnp');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmc');
 		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville = new Application_Model_EuVilleMapper();
		   $m_filiere = new Application_Model_EuFiliereMapper();
           $cantons = $t_canton->fetchAll();
           $villes = $m_ville->fetchAll();
		   $filieres = $m_filiere->fetchAll();
           $this->view->cantons = $cantons;
           $this->view->villes = $villes;
		   $this->view->filieres = $filieres;
		   $request = $this->getRequest();
		   
		   $param = (int)$this->_request->getParam('param');
	       $this->view->param = $param;
		   
		   $request = $this->getRequest();
		   if ($request->isPost()) {
		       if (isset($_POST['offreur_projet_souscription_ordre']) && $_POST['offreur_projet_souscription_ordre']!="" 
			      && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" 
			      && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!="" 
                  && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!="" 
			      && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!="" 
			      && isset($_POST['offreur_projet_stock_disponible']) && $_POST['offreur_projet_stock_disponible']!="" 
			      && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!="" 
			      && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!="" 
			      && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)    {
		                 $db = Zend_Db_Table::getDefaultAdapter();
                         $db->beginTransaction();
				         try   {
						       // Traitement sur la table eu_souscription
                               $souscription0   = new Application_Model_EuSouscription();
                               $m_souscription0 = new Application_Model_EuSouscriptionMapper();	
					           $membremorale = new Application_Model_EuMembreMorale();
	                           $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					           $nombre_compte = 0;
						       $param = (int) $this->_request->getParam('param');
					           $raison = "";
					           $code_type_acteur = "";
						       $id_souscription = "";
						
						       $quittance_invalide = $m_souscription0->findquittanceinvalide($_POST['offreur_projet_souscription_ordre']);
						       if($quittance_invalide != NULL) {
						          $db->rollback();
	                              $this->view->param = $param;
						          $this->view->souscription_email  = $_POST['souscription_email'];
						          $this->view->code_membre = $_POST['offreur_projet_membre'];
		                          $sessionmcnp->error = "Numéro de quittance ".$_POST['offreur_projet_souscription_ordre']."  est  dejà utilisé ...";
                                  return;
		                       }
							   
							   $programme = $request->getParam("souscription_programme");
						       $nombre    = $request->getParam("souscription_nombre");
						       $montant   = $request->getParam("souscription_montant");
						
					           $raison = $request->getParam("souscription_raison");
					           $code_type_acteur = $request->getParam("type_acteur");
                               $lignessous = $m_souscription0->findAllSouscriptionPM($raison,$code_type_acteur,$programme,$nombre,$montant);
                        
                               if($lignessous == false) {
                                   $db->rollback();
	                               $this->view->param = $param;
						           $this->view->souscription_email  = $_POST['souscription_email'];
						           $this->view->code_membre = $_POST['offreur_projet_membre'];
		                           $sessionmcnp->error = "Erreur de traitement : Veuillez revoir la saisie des informations de votre quittance";
					               return;
                               } else {
						           $lignesous = $lignessous[0];
						           $id_souscription = $lignesous->getSouscription_id();
						           $findsous = $m_souscription0->find($id_souscription,$souscription0);
                                   $lignesous->setSouscription_ordre($request->getParam("offreur_projet_souscription_ordre"));
                                   $m_souscription0->update($lignesous);								
					           }

                               $m_souscription2 = new Application_Model_EuSouscriptionMapper();
						       $souscription3 = new Application_Model_EuSouscription();
                               $m_souscription3 = new Application_Model_EuSouscriptionMapper();
						
						       $compte = new Application_Model_EuCompte();
                               $map_compte = new Application_Model_EuCompteMapper();
			
			                   $contrat = new Application_Model_EuContrat();
                               $map_contrat = new Application_Model_EuContratMapper();
						
						       $id_type_acteur = "";
			                   $id_type_creneau = "";
						
				               $param = (int)$this->_request->getParam('param');
						       $nombre_compte = 0;
						 
						       $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					           if($findmembre == false) {
					                $db->rollback();
	                                $this->view->param = $param;
						            $this->view->souscription_email  = $_POST['souscription_email'];
						            $this->view->code_membre = $_POST['offreur_projet_membre'];
					                $sessionmcnp->error = "Le numero du membre offreur de projet est introuvable ...";
					                return;
					            }
								
								$date_id = new Zend_Date(Zend_Date::ISO_8601);
                                $date_idd = clone $date_id;
						        $code = $_POST['offreur_projet_membre'];
						        $m_acteur = new Application_Model_EuActeurMapper();
						        $findacteur = $m_acteur->findByActeur($code);
								if($findacteur == false) {
						    $id_filiere = $_POST['offreur_projet_filiere'];
						    $code_agence = substr($code,0,12);
				            $table = new Application_Model_DbTable_EuActeur();
                            $selection = $table->select();
                            $selection->where('code_membre like ?',$code_agence.'%');
                            $selection->where('type_acteur like ?','gac_surveillance');
                            $resultat = $table->fetchAll($selection);
                            $trouvacteursur = $resultat->current();
                            $code_acteur = $trouvacteursur->code_acteur;
                            $acteur  =  $code_acteur;

						    if(($param == 1) || ($param == 4) || ($param == 7)) {
						        $id_type_acteur = 1;
						    }
						    if(($param == 2) || ($param == 5) || ($param == 8)) {
						        $id_type_acteur = 2;
						    }
						    if(($param == 3) || ($param == 6) || ($param == 9)) {
						       $id_type_acteur = 3;
						    }
						
						    if(($param == 1) || ($param == 2) || ($param == 3)) {
						       $id_type_creneau = 3;
						    }
						    if(($param == 4) || ($param == 5) || ($param == 6)) {
						       $id_type_creneau = 2;
						    }
						    if(($param == 7) || ($param == 8) || ($param == 9)) {
						        $id_type_creneau = 1;
						    }
						
						    // insertion dans la table eu_acteur_creneau
                            $cm    = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
				            $rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
                
				            $code_zone =  substr($membremorale->getCode_agence(),0,3);
                            $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if ($code_acteur == NULL) {
                                $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                                $num_ordre = substr($code_acteur, -4);
                                $num_ordre++;
                                $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
						
						    // Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
                            $table = new Application_Model_DbTable_EuActeur();
                            $select = $table->select();
                            $select->where('code_acteur like ?',$acteur);
                            $resultSet = $table->fetchAll($select);
                            $ligneacteur = $resultSet->current();
                            $count = $c_acteur->findConuter() + 1;
						
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
					
				            $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('detaillant');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('semi-grossiste');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('grossiste');
				            }
						
			                $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                            $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                            $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                            $c_acteur->setId_pays($ligneacteur->id_pays);
                            $c_acteur->setId_region($ligneacteur->id_region);
                            $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                            $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                            $c_acteur->setType_acteur('DSMS');
                    
                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());
						
						    // Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
						
						   if($trouveuser) {
				           if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                              $userin->setCode_groupe('oe_detaillant');
                              $userin->setCode_gac_filiere('oe_detaillant');
                              $userin->setCode_groupe_create('oe_detaillant');
                           } 
                           elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_detaillant');
                             $userin->setCode_gac_filiere('ose_detaillant');
                             $userin->setCode_groupe_create('ose_detaillant');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_semi_grossiste');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_semi_grossiste');
                          } 
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_grossiste');
                          }
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_grossiste');
                         }
				         $userin->setId_filiere($id_filiere);
                         $user_mapper->update($userin);
				
				       }
						
					   // Mise à jour de la table eu_membre_morale
				       $membremorale->setId_filiere($id_filiere);
				       $m_mapmorale->update($membremorale);
					   
					   // Recuperation de la PRK nr
                       $params = new Application_Model_EuParametresMapper();
                       $par = new Application_Model_EuParametres();
                       $prc = 0;
                       $par_prc = $params->find('prc','nr',$par);
                       if ($par_prc == true) {
                          $prc = $par->getMontant();
                       } 
            
                       $te_mapper = new Application_Model_EuTegcMapper();
                       $te = new Application_Model_EuTegc();
                       $code_te = 'TEGCP' .$id_filiere. $code;
                       $find_te = $te_mapper->find($code_te,$te);
                       if ($find_te == false) {
                           $te->setCode_tegc($code_te)
                              ->setId_filiere($id_filiere)
                              ->setMdv($prc)
                              ->setCode_membre($code)
                              ->setMontant(0)
                              ->setMontant_utilise(0)
                              ->setSolde_tegc(0);
                           $te_mapper->save($te);
                       } else {
                           $te->setId_filiere($id_filiere);
                           $te->setMdv($prc);
                           $te_mapper->update($te);
                       }
				
				       $code_compte = 'NB-TPAGCP-'.$code;
				       $res = $map_compte->find($code_compte,$compte);
				
				       if(!$res) {
                         $compte->setCode_cat('TPAGCP')
                                 ->setCode_compte($code_compte)
                                 ->setCode_membre(NULL)
                                 ->setCode_membre_morale($code)
                                 ->setCode_type_compte('NB')
                                 ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                 ->setDesactiver(0)
                                 ->setLib_compte('TPAGCP')
                                 ->setSolde(0);
                         $map_compte->save($compte); 
                       }
				
				       $code_comptets = 'NB-TSGCP-'.$code;
				       $rests = $map_compte->find($code_comptets,$compte);
				
				       if(!$rests) {
                              $compte->setCode_cat('TSGCP')
                                    ->setCode_compte($code_comptets)
                                    ->setCode_membre(NULL)
                                    ->setCode_membre_morale($code)
                                    ->setCode_type_compte('NB')
                                    ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                    ->setDesactiver(0)
                                    ->setLib_compte('TSGCP')
                                    ->setSolde(0);
                              $map_compte->save($compte); 
                       }
				
                       // Mise à jour de la table eu_contrat
				       $findcontrat = $map_contrat->findByMembre($code);
				       $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				       $contrat->setId_type_creneau($id_type_creneau);
				       $contrat->setId_type_acteur($id_type_acteur);
				       $map_contrat->update($contrat);
					   
					   }
					   
					   //--- Fin de l'opération de mise sur chaine ---
					   
					   
					   $m_souscription3->find($id_souscription,$souscription3);
					   if(($souscription3->souscription_type_candidat != 6 && $souscription3->souscription_type_candidat == 7)) {
						   $db->rollback();
					       $this->view->param = $param;
						   $this->view->souscription_email = $_POST['souscription_email'];
					       $this->view->code_membre = $_POST['offreur_projet_membre'];      
						   $sessionmcnp->error = "Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre']."  doit être celui d'un CMFH Offreur de projet ...";
						   return;
						}
						
						$m_souscription3->find($id_souscription,$souscription3);
                        $souscription3->setSouscription_email($_POST["souscription_email"]);
                        $m_souscription3->update($souscription3);						
						$nombre_compte = $souscription3->souscription_nombre;
						
						if($nombre_compte >= 100)   {
						      $date_id = new Zend_Date(Zend_Date::ISO_8601);
                             $a = new Application_Model_EuOffreurProjet();
                             $ma = new Application_Model_EuOffreurProjetMapper();
							 
							 $compteur = $ma->findConuter() + 1;
						     $id_souscription = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre']);
                             $a->setOffreur_projet_id($compteur);
                             $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                             $a->setOffreur_projet_souscription($id_souscription);
                             $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
						     $a->setOffreur_projet_code_membre($_POST['offreur_projet_membre']);
                             $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                             $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
                             $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
							 
							 if($param >= 4) {
	                           $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                             }
							 
							 $a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                             $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                             $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                             $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                             $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                             $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                             $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                             $a->setOffreur_projet_membreasso(0);/*$sessionmembreasso->membreasso_id*/
                             $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $a->setOffreurProjetCanton($_POST['offreur_projet_canton']);
                             $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			                 $a->setPublier($_POST['publier']);
                             $ma->save($a);
							
							 ////////////////////////////////////////////////////////////////////////////
                             $offreur_projet = new Application_Model_EuOffreurProjet();
                             $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                             $offreur_projetM->find($compteur, $offreur_projet);
		
		                     /////////////////////////////////////////////////////////////////////////////////////////
							 $code_agence = "";
						     if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
						         $membreasso = new Application_Model_EuMembreasso();
                                 $m_membreasso = new Application_Model_EuMembreassoMapper();
		                         $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);
			
                                 $association = new Application_Model_EuAssociation();
                                 $m_association = new Application_Model_EuAssociationMapper();
		                         $m_association->find($membreasso->membreasso_association, $association);
		                         $code_agence = $association->code_agence;
						     }
							 
							 $m_offreur_projet2 = new Application_Model_EuOffreurProjetMapper();
						     $m_detail_offreur2 = new Application_Model_EuDetailOffreurProjetMapper();
						
						     $souscription = new Application_Model_EuSouscription();
                             $m_souscription = new Application_Model_EuSouscriptionMapper();
		                     $m_souscription->find($id_souscription,$souscription);
						
                             $offreur2 = $m_offreur_projet2->fetchAllBySouscription($souscription->souscription_souscription);
						     $detailoffreur2 = $m_detail_offreur2->fetchAllBySouscription($souscription->souscription_souscription);

					         $date_id = Zend_Date::now();
							 
							 if((count($offreur2) == 0  || count($detailoffreur2) == 0)) {
                                $association = new Application_Model_EuAssociation();
                                $association_mapper = new Application_Model_EuAssociationMapper();
			
                                $compteur_association = $association_mapper->findConuter() + 1;
                                $association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_raison);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();
								$login = "";
								$password = "";
			                    
								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
								     //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                     $login = "";
                                     while(strlen($login) != 8) {
                                       $login .= $liste[rand(0,61)]; 
                                     }
									 $password = $login.$login;
									 
								} else {
								     $login = $souscription->souscription_login;
									 $password = $souscription->souscription_passe;
								}
			
                                $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                $membreasso->setMembreasso_id($compteur_membreasso);
                                $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                $membreasso->setMembreasso_association($compteur_association);
                                $membreasso->setMembreasso_email($souscription->souscription_email);
                                $membreasso->setMembreasso_login($login);
                                $membreasso->setMembreasso_passe($password);
                                $membreasso->setMembreasso_type(1);
                                $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $membreasso->setPublier(1);
					            $membreasso->setSouscription_id($id_souscription);
                                $membreasso_mapper->save($membreasso);
							   
							    $html ="";
					            $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                                $html .= "<br/>";
                                $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                                $html .= "<br/>";
					            $html .= "Login : ".$login."<br/>";
                                $html .= "Mot de passe : ".$password."<br/>";
							   
					            $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
					            $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5),$config);
                                Zend_Mail::setDefaultTransport($tr);		
                                $mail = new Zend_Mail();
							   
					            $mail->setBodyHtml($html);
                                $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                                $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                                $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                                $mail->send($tr);
						
						     }
							 
							 $offreur_projet->setPublier(1);
		                     $offreur_projetM->update($offreur_projet);
							
							 $id_offreur_projet = $offreur_projet->offreur_projet_id;
							 $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                             $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							 
							 $cpte = $m_detailoffreur->findConuter() + 1;
							 $detailoffreur->setId_detail_offreur_projet($cpte);
							 $detailoffreur->setOffreur_projet_id($id_offreur_projet);
							 $detailoffreur->setSouscription_id($id_souscription);
							 $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							 $m_detailoffreur->save($detailoffreur);
							 
							 $eusouscription = new Application_Model_EuSouscription();
		                     $souscriptionM = new Application_Model_EuSouscriptionMapper();
							   
							 $date = new Zend_Date();
		                     $compte_map = new Application_Model_EuCompteMapper();
                             $compte      = new Application_Model_EuCompte();
			                 $sms_money   = new Application_Model_EuSmsmoney();
                             $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                 $det_sms   = new Application_Model_EuDetailSmsmoney();
			                 $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                 $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                 $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							 // insertion dans la table eu_depot_vente
				             $m_dvente = new Application_Model_EuDepotVenteMapper();
				             $dvente = new Application_Model_EuDepotVente();
							   
							 $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                     $membre_pbf = '0000000000000000001M';
	                         $code_compte_pbf = "NN-TR-".$membre_pbf;
			                 $ret = $compte_map->find($code_compte_pbf,$compte);
							 
							 $finddepot = $m_dvente->findbysouscriptionmembre($id_souscription);
							 if($finddepot == NULL) {
							     $souscriptionM->find($id_souscription,$eusouscription);
								 $mobile = $eusouscription->souscription_mobile;
								 if($eusouscription->souscription_programme == 'CMFH')   {
                                     $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                         if($eusouscription->souscription_autonome == 1) {   
			                            $nbre_compte = $eusouscription->souscription_nombre - 1; 
			                         } else {
				                        $nbre_compte = $eusouscription->souscription_nombre;
				                     }
									 $montant = $nbre_compte * $fcaps;
									 // Traitement des produits CAPS
				                     $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									 if ($lignesdetfcaps != null) {
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed('CAPS-'.$id_souscription)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                           $money_map->save($sms_money);
										   
										   // Mise à jour du compte de transfert
				                           if($ret) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);    
	                                       } else {
			                                 $db->rollback();
	                                         $this->view->param = $param;
											 $this->view->souscription_email  = $_POST['souscription_email'];
								             $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                 $sessionmcnp->error = 'Le compte est introuvable';
											 //$this->_redirect('/index/addintegrateur/param/'.$param);
                                             return;			   
			                               }
										   
										   $l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);

													  
						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }
									 
									 } else  {
				                       $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->souscription_email  = $_POST['souscription_email'];
								       $this->view->code_membre = $_POST['offreur_projet_membre'];
			                           $sessionmcnp->error = 'Le solde du compte CAPS est null';
                                       return;
				                    }
									
									$countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                    $dvente->setCode_membre($_POST['offreur_projet_membre']);   
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($id_souscription);
				                    $m_dvente->save($dvente);
									   
									$compteur = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
								
								    include("automatisation.php");
								    codegenerer($id_souscription);
									
                                  }
							 
							 
							 
							 
							 
							 
							 }  else {
							    $m_dvente->find($finddepot->id_depot,$dvente);
							    $dvente->setCode_membre($_POST['offreur_projet_membre']);
							    $m_dvente->update($dvente);
								
								include("automatisation.php");
								recupcodegenerer($id_souscription); 
							 }
							  
						
						}
		   
		                 } catch (Exception $exc) {
				            $db->rollback();
	                        $this->view->param = $param;
					        $this->view->souscription_email  = $_POST['souscription_email'];
					        $this->view->code_membre = $_POST['offreur_projet_code_membre'];
                            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                            return;
                         }
		   
	              }
	
	       }
	
	}
	
	
	public  function addacteurpreAction()  {
		
		/* page administration/addoffreurprojet - Ajout d'un offreurprojet  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param_int');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
	   
	    $this->view->param = $param;
		
		$request = $this->getRequest();
        if($request->isPost ()) {
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
	        try {
				if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!="" 
			    && isset($_POST['code_membre']) && $_POST['code_membre']!=""
                && isset($_POST['param']) && $_POST['param']!=""				
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1) {
					$param = (int)$this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
						  
				    $membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
			
			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();
								 
				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
							   
				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("code_membre"));
						 
				    $date_id = Zend_Date::now();
						
				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						 
				    $id_type_acteur = "";
			        $id_type_creneau = "";
						  
					$findmembre = $m_mapmorale->find($_POST['code_membre'],$membremorale);
					if($findmembre == false) {
					    $db->rollback();
	                    $this->view->param = $param;
						$this->view->code_membre = $_POST['code_membre'];
					    $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					    return;
					}
					
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->code_membre = $_POST['code_membre'];
                      $sessionmcnp->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
				    $select = $db_franchise->select();
				    $select->where('code_membre_franchise like  ?', $request->getParam("code_membre"));
				    $rowsfranchise = $db_franchise->fetchRow($select);
				  
				    if(count($rowsfranchise) == 0) {
					   $db->rollback();
			           $this->view->param = $param;
					   $this->view->code_membre = $_POST['code_membre'];
                       $sessionmcnp->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                       return;
				    }
					
				   
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->code_membre = $_POST['code_membre'];
                      $sessionmcnp->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					
					$offreur_membre = $request->getParam("code_membre");
					$offreur_type = $request->getParam("offreur_projet_type");
				    $offreur_code_membre = '';
						  
				    $souscription_nombre  = $request->getParam("souscription_nombre");
				    $montant_souscription = $souscription_nombre * 2187.5;

                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
						$db->rollback();
	                    $this->view->param = $param;
						$this->view->code_membre = $request->getParam("code_membre");
					    $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					    return;     
				    }
					
					if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						$db->rollback();
	                    $this->view->param = $param;
						$this->view->code_membre = $request->getParam("code_membre");
                        $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                        return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
				        $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
				        $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
				        $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
			            $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
				        $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
				        $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                        $cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);
							 
				        if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
				            $db->rollback();
	                        $this->view->param = $param;
				            $this->view->code_membre = $request->getParam("code_membre");
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ... ".$cumulbon;
                            return; 
				        }
						 
				        if(($offreur_membre != $offreur_code_membre)) {
				            $db->rollback();
	                        $this->view->param = $param;
				            $this->view->code_membre = $request->getParam("code_membre");
                            $sessionmcnp->error = "Le code membre du souscripteur  doit être celui du bon neutre ...";
                            return;   
				        }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
				        $i = 0;
			            $reste = $montant_souscription;
					    $nbre_lignesdetbon = count($lignesdetbon);
                        while($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
									if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
									   
									}
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);

						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
							 
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
						
								 
                                 } else {
								 
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);


						  
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
							 
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						$bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);
						
						            $reste = 0;
                                }							   
                                $i++;
                        }						 
						  
						////////////////////////////////////////////////////////////////////////////////////////////////////////////	
						$bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						$bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);     
						$bon_neutre2M->update($bon_neutre2);
						  
						/*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						$bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
							 
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						} else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						}
						$bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						$bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						$bon_neutre_utiliseM->save($bon_neutre_utilise);*/
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
						$select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						$select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			               $souscription_ok = 1;
			               $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			               $souscription_ok = 0;
			            }


                        $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
                                  
                        if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->code_membre = $request->getParam("code_membre");
                            $sessionmcnp->error = "Login déjà existant ...";
							return;
	                    }  else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->code_membre = $request->getParam("code_membre");
                            $sessionmcnp->error = "Mot de passe incorret ...";
							return;
	                    }
						
						$date_id = Zend_Date::now();
						$souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                         //$compteur_souscription = $souscription_mapper->findConuter() + 1;
						 //$souscription->setSouscription_id($compteur_souscription);
						
						$souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
						$souscription->setSouscription_mobile($membremorale->portable_membre);
						
						$souscription->setSouscription_membreasso(1);
						
						$souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
						$souscription->setSouscription_montant($montant_souscription);
                        $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat(6);
						
						$souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
						$souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
						 
                        $souscription->setSouscription_ville($membremorale->ville_membre);
						
						$souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						} else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
						if($souscription_ok == 1) {
                           $souscription->setSouscription_souscription($souscription_first);
				        } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					    }
						
						$souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
                        $compteur_souscription = $db->lastInsertId();
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
					         $souscription->setPublier(1);
						     $souscriptionM->update($souscription);
						
						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						
						     ///////////////////////////////////////////// validation filiere //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
						     $souscription->setPublier(2);
						     $souscriptionM->update($souscription);
						
						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						     //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						     ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
						     $souscription->setPublier(3);
						     $souscriptionM->update($souscription);

						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						
						//--- Début de l'opération de mise sur chaine ---
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
						$code = $_POST['code_membre'];
						$code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
						    $id_filiere = $request->getParam("offreur_projet_filiere");
							if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						        $id_type_acteur = 1;
						    }		   
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						        $id_type_acteur = 2;
						    }
								  
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						        $id_type_acteur = 3;
						    }
						
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						        $id_type_creneau = 3;
						    }			   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						        $id_type_creneau = 2;
						    }			   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						        $id_type_creneau = 1;
						    }
							
							//insertion dans la table eu_acteur_creneau
								$cm  = new Application_Model_EuActeurCreneauMapper();
                                $acren = new Application_Model_EuActeurCreneau();
											  
								$rep_mapper = new Application_Model_EuRepresentationMapper();
				                $rep = $rep_mapper->findbyrep($code);
						
						        $acren->setNom_acteur($membremorale->getRaison_sociale());
                                $acren->setCode_membre($code);
                                $acren->setId_type_acteur($id_type_acteur);
              
                                $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                                $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                                $acren->setId_utilisateur(null);
                                $acren->setGroupe(null);
                                $acren->setCode_creneau(NULL);
                                $acren->setCode_gac_filiere(NULL);
                                $acren->setCode_gac(NULL);
											  
								$code_acteur = $cm->getLastActeurByCrenau($code_zone);
                                if($code_acteur == NULL) {
                                    $code_acteur = 'A' . $code_zone . '0001';
                                } else {
                                    $num_ordre = substr($code_acteur, -4);
                                    $num_ordre++;
                                    $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                                }
                                $acren->setCode_acteur($code_acteur);
                                $acren->setId_filiere($id_filiere);
                                $cm->save($acren);
								
								//Insertion dans la table eu_acteur
				                $t_acteur = new Application_Model_DbTable_EuActeur();
				                $c_acteur = new Application_Model_EuActeur();
								$count = $c_acteur->findConuter() + 1;
											  
								//Mise à jour des tables
				                $filiere =  new Application_Model_EuFiliere();
                                $map_filiere = new Application_Model_EuFiliereMapper();
                                $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
								$c_acteur->setId_acteur($count)
                                          ->setCode_acteur(NULL)
                                          ->setCode_division($filiere->getCode_division())
                                          ->setCode_membre($code)
                                          ->setId_utilisateur(NULL)
                                          ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				                
						
			                    $c_acteur->setCode_source_create('SOURCE');
                                $c_acteur->setCode_monde_create('MONDE');
                                $c_acteur->setCode_zone_create($code_zone);
                                $c_acteur->setId_pays($request->getParam("id_pays"));
                                $c_acteur->setId_region($request->getParam("id_region"));
                                $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                                $c_acteur->setCode_agence_create($request->getParam("id_canton"));
								$c_acteur->setId_prefecture($request->getParam("id_prefecture"));
                                $c_acteur->setId_canton($request->getParam("id_canton"));
								
                                if($param == 2) {
								  $c_acteur->setType_acteur('PBF');
								  if($id_type_acteur == 3) {
					                 $c_acteur->setCode_activite('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setCode_activite('GROSSISTE');
				                  }
								} else {
								  if($id_type_acteur == 3) {
					                 $c_acteur->setType_acteur('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setType_acteur('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setType_acteur('GROSSISTE');
				                  }
								  
								  if($id_type_creneau == 3) {
					                 $c_acteur->setCode_activite('DISTRIBUTION');
			                      } else if($id_type_creneau == 2) {
					                 $c_acteur->setCode_activite('TRANSFORMATION');
			                      } else if($id_type_creneau == 1) {
					                 $c_acteur->setCode_activite('PRODUCTION');
				                  }
								}
                                $c_acteur->setCode_gac_chaine($acteur);
                                $t_acteur->insert($c_acteur->toArray());
								
								// Mise à jour de la table eu_utilisateur
                                $user_mapper = new Application_Model_EuUtilisateurMapper();
                                $userin = new Application_Model_EuUtilisateur();
				                $trouveuser = false;
				                $code_type_acteur = $membremorale->getCode_type_acteur();
				
				                $finduser = $user_mapper->findByMembre($code,"personne_morale");
				                if($finduser != false) {
				                  $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				                }
								
								if($trouveuser) {
								   if($param == 2) {
								      if($id_type_acteur == 3) {
									     $userin->setCode_groupe('pbf_detaillant');
                                         $userin->setCode_gac_filiere('pbf_detaillant');
                                         $userin->setCode_groupe_create('pbf_detaillant');
									  } elseif($id_type_acteur == 2) {
									     $userin->setCode_groupe('pbf_semi_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_semi_grossiste');
									  } elseif($id_type_acteur == 1) {
									     $userin->setCode_groupe('pbf_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_grossiste');
									  }
								   
								   } else {
								   
								   
								   if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   }
								   elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
								   
								   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);
											  
		                        }
								
								// Mise à jour de la table eu_membre_morale
				                $membremorale->setId_filiere($id_filiere);
				                $m_mapmorale->update($membremorale);
								
								$params = new Application_Model_EuParametresMapper();
                                $par = new Application_Model_EuParametres();
                                $prc = 0;
                                $par_prc = $params->find('prc','nr',$par);
                                if($par_prc == true) {
                                  $prc = $par->getMontant();
                                }
											  
							    $te_mapper = new Application_Model_EuTegcMapper();
                                $te = new Application_Model_EuTegc();
								
								$prk = new Application_Model_EuPrk();
                                $m_prk = new Application_Model_EuPrkMapper();
						
                                //$code_te = 'TEGCP' .$id_filiere. $code;
							    $code_te = $te_mapper->getLastTegc();
			                    if($code_te == NULL) {
			                      $code_te = 'TEGCP'.$id_filiere.$code.'00001';         
			                    } else {
			                      $num_ordre = substr($code_te, -5);
                                  $num_ordre++;
                                  $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                    }
								
								$find_te = $te_mapper->find($code_te,$te);
                                if($find_te == false) {
								    $te->setCode_tegc($code_te);
			                        $te->setId_filiere($id_filiere);
			                        $te->setMdv(12);
			                        $te->setTranche_payement(1);
									$te->setCode_membre($code);
									$te->setCode_membre_physique(null);										
			                        $te->setMontant(0);
			                        $te->setMontant_utilise(0);
			                        $te->setSolde_tegc(0);
			                        $te->setId_utilisateur(NULL);
			                        $te->setNom_tegc($membremorale->raison_sociale);
			                        $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                        $te->setDate_tegc($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
					                $te->setType_tegc("DISTRIBUTEUR");
								    $te->setRecurrent_illimite(0);
							        $te->setRecurrent_limite(0);
								    $te->setNonrecurrent(1);
								    $te->setPeriode1(0);
									$te->setPeriode2(0);
								    $te->setPeriode3(0);
									$te->setFormel(0);
									$te->setRegime_tva(0);
									$te->setSpecial(1);
									$te->setOrdinaire(0);
									$te->setSubvention(0);
										
									$te->setCode_zone($code_zone);
				                    $te->setId_pays($request->getParam("id_pays"));
				                    $te->setId_region($request->getParam("id_region"));
				                    $te->setId_prefecture($request->getParam("id_prefecture"));
				                    $te->setId_canton($request->getParam("id_canton"));

                                    $te_mapper->save($te);

                                    $id_prk = $m_prk->findConuter() + 1;
					                $prk->setId_prk($id_prk);
					                $prk->setCode_tegc($code_te);
					                $prk->setValeur(null);
					                $m_prk->save($prk);
								
						        }
								
								$code_compte = 'NB-TPAGCP-'.$code;
				                $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                                }
				
				                $code_comptets = 'NB-TSGCP-'.$code;
				                $rests = $map_compte->find($code_comptets,$compte);
				
				                if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                                }
				
                                // Mise à jour de la table eu_contrat
				                $findcontrat = $map_contrat->findByMembre($code);
				                $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				                $contrat->setId_type_creneau($id_type_creneau);
				                $contrat->setId_type_acteur($id_type_acteur);
				                $map_contrat->update($contrat);
								
								
									
		
					    }
						//---  Fin de l'opération de mise sur chaine ---
						
						$nombre_compte = $request->getParam("souscription_nombre");
                        if($nombre_compte >= 100)   {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $a = new Application_Model_EuOffreurProjet();
                            $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					        //$compteur = $ma->findConuter() + 1;
					        $id_souscription = $compteur_souscription;
                                    
                            //$a->setOffreur_projet_id($compteur);
                              $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                              $a->setOffreur_projet_souscription($id_souscription);
                              $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					          $a->setOffreur_projet_code_membre($_POST['code_membre']);
                              $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                              if(isset($_POST['offreur_projet_produit'])) {
                                $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						      } else {
						        $a->setOffreur_projet_produit(null);
						      }
                              $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					          if($offreur_type >= 4) {
	                            $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                              }
							
					          $a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                              $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                              $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                              $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                              $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                              $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                              $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                              $a->setOffreur_projet_membreasso(0);
                              $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                              $a->setOffreurProjetCanton($request->getParam("id_canton"));
                              $a->setOffreurProjetVille(null);
			                  $a->setPublier($_POST['publier']);
                              $ma->save($a);
							  
							  $compteur = $db->lastInsertId();
							  
							   ////////////////////////////////////////////////////////////////////////////
                              $offreur_projet = new Application_Model_EuOffreurProjet();
                              $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                              $offreur_projetM->find($compteur,$offreur_projet);
		
                              $offreur_projet->setPublier(1);
		                      $offreur_projetM->update($offreur_projet);
							
					          $id_offreur_projet = $offreur_projet->offreur_projet_id;
					          $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                              $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					          //$cpte = $m_detailoffreur->findConuter() + 1;
					          //$detailoffreur->setId_detail_offreur_projet($cpte);
							  
					          $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					          $detailoffreur->setSouscription_id($id_souscription);
					          $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					          $m_detailoffreur->save($detailoffreur);

                              /////////////////////////////////////////////////////////////////////////////////////////
					          $code_agence = "";
							  
							   ////////////////////////////////////////////////////////////////////////////
                              $offreur_projet = new Application_Model_EuOffreurProjet();
                              $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                              $offreur_projetM->find($compteur,$offreur_projet);
		
                              $offreur_projet->setPublier(1);
		                      $offreur_projetM->update($offreur_projet);
							
					          $id_offreur_projet = $offreur_projet->offreur_projet_id;
					          $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                              $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					          //$cpte = $m_detailoffreur->findConuter() + 1;
					          //$detailoffreur->setId_detail_offreur_projet($cpte);
							  
					          $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					          $detailoffreur->setSouscription_id($id_souscription);
					          $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					          $m_detailoffreur->save($detailoffreur);

                              /////////////////////////////////////////////////////////////////////////////////////////
					          $code_agence = "";
							  if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
					            $membreasso = new Application_Model_EuMembreasso();
                                $m_membreasso = new Application_Model_EuMembreassoMapper();
		                        $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);
			
                                $association = new Application_Model_EuAssociation();
                                $m_association = new Application_Model_EuAssociationMapper();
		                        $m_association->find($membreasso->membreasso_association, $association);
		                        $code_agence = $association->code_agence;
					          }
							  
							  // Création du compte utilisateur intégrateur
                              $souscription = new Application_Model_EuSouscription();
                              $m_souscription = new Application_Model_EuSouscriptionMapper();
		                      $m_souscription->find($id_souscription,$souscription);
							   
					          $date_id = Zend_Date::now();
                              $association = new Application_Model_EuAssociation();
                              $association_mapper = new Application_Model_EuAssociationMapper();

                              $login = "";
						      $password = "";

                              if($finddepot == NULL) {
                                //$compteur_association = $association_mapper->findConuter() + 1;
                                //$association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_raison);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);
								$compteur_association = $db->lastInsertId();
							   
							    $date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                  $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                  }
								    $password = $login.$login; 
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }
										  
										  $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                          $membreasso->setMembreasso_id($compteur_membreasso);
                                          $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                          $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                          $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                          $membreasso->setMembreasso_association($compteur_association);
                                          $membreasso->setMembreasso_email($souscription->souscription_email);
                                          $membreasso->setMembreasso_login($login);
                                          $membreasso->setMembreasso_passe($password);
                                          $membreasso->setMembreasso_type(1);
                                          $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                          $membreasso->setPublier(1);
								          $membreasso->setSouscription_id($souscription->souscription_id);
							              $membreasso->setIntegrateur_id(null);
                                          $membreasso_mapper->save($membreasso);
                                }
								
								$eusouscription = new Application_Model_EuSouscription();
		                               $souscriptionM = new Application_Model_EuSouscriptionMapper();
							   
							           $date = new Zend_Date();
		                               $compte_map  = new Application_Model_EuCompteMapper();
                                       $compte      = new Application_Model_EuCompte();
			                           $sms_money   = new Application_Model_EuSmsmoney();
                                       $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                           $det_sms   = new Application_Model_EuDetailSmsmoney();
			                           $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                           $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                           $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							           // insertion dans la table eu_depot_vente
				                       $m_dvente = new Application_Model_EuDepotVenteMapper();
				                       $dvente = new Application_Model_EuDepotVente();
									   
									   $membretierscode = new Application_Model_EuMembretierscode();
                                       $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();
							   
							           $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                               $membre_pbf = '0000000000000000001M';
	                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
			                           $ret = $compte_map->find($code_compte_pbf,$compte);
							
							           $souscriptionM->find($id_souscription,$eusouscription);
						               $mobile = $eusouscription->souscription_mobile;
							           $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
							           $nbre_compte = $eusouscription->souscription_nombre;
							           $montant = $nbre_compte * $fcaps;
									   
									   // Traitement des produits CAPS
                                       $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									   $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
									   
									   
									   //$countdvente = $m_dvente->findConuter() + 1;
				                           //$dvente->setId_depot($countdvente)
										   
					                       $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                           $dvente->setCode_membre($_POST['code_membre']);   
			                               $dvente->setCode_produit('CAPS');
				                           $dvente->setMont_depot($montant);
				                           $dvente->setMont_vendu(0);
				                           $dvente->setSolde_depot($montant);
				                           $dvente->setId_utilisateur(null);
				                           $dvente->setType_depot('AvecListe');
				                           $dvente->setSouscription_id($id_souscription);
				                           $m_dvente->save($dvente);
										   
										   for($i = 0; $i < $nbre_compte; $i++) {
										     $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
											 $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
											 $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                             $membretierscode->setMembretierscode_membretiers(0);
                                             $membretierscode->setMembretierscode_code($membretierscode_code);
                                             $membretierscode->setMembretierscode_souscription($id_souscription);
                                             $membretierscode->setPublier(0);
                                             $membretierscode->setCode_membre(NULL);
											 $membretierscode->setAllocation_cmfh_id(NULL);
                                             $membretierscode_mapper->save($membretierscode);
										   }
										   
										   //$compteur_sms = Util_Utils::findConuter() + 1;
				                           Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');
						           
							  
							  
							  
						
						
						
						}   else {
						    $db->rollback();
	                        $this->view->param = $param;
							$this->view->code_membre = $request->getParam("code_membre");
							$sessionmcnp->error = 'Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...';
						    return;
						}
						
						$db->commit();
						if($finddepot == NULL) {
                            $sessionmcnp->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace intégrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
		                } else {
						    $sessionmcnp->error = "Opération bien effectuée ...";
						}
						$this->_redirect('/index/addacteurpre/param/'.$param);
						
						
						
					}	   
						   
			    }  else  {
			        $this->view->param = $param;
			        $this->view->code_membre = $request->getParam("code_membre");
                    $sessionmcnp->error = "Veuillez renseigner les champs obligatoires (*)";
				    return;
			}
		
		
		
			} catch (Exception $exc) {
				  $db->rollback();
	              $this->view->param = $param;
				  $this->view->code_membre = $request->getParam("code_membre");
                  $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
            }
			
			
		}
		
	}
	
	
	
	
	public  function inscriptionbcAction() {
		/* page administration/inscriptionbc - Ajout d'une inscription  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		$request = $this->getRequest();
	    if($request->isPost()) {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {	
                $mstiersliste = new Application_Model_EuMstiersListebc();
		        $m_mstiersliste = new Application_Model_EuMstiersListebcMapper();
			    $t_mstiersliste = new Application_Model_DbTable_EuMstiersListebc();
			
		        $mstiers   = new Application_Model_EuMstiers();
                $m_mstiers = new Application_Model_EuMstiersMapper();
			    $t_fifo = new Application_Model_DbTable_EuMembreFifo();
			
                $membre  = new Application_Model_EuMembre();
	            $m_map   = new Application_Model_EuMembreMapper();
		        $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
			 
		        $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
			 
		        $apporteur = NULL;
			    $nom_benef = NULL;
			    $prenom_benef = NULL;
                $type_inscription = $request->getParam("type_inscription");
		        $type_souscription = $request->getParam("type_souscription");
	            $beneficiaire = NULL;
				
		        $mont_msbcm = 0;
			    $nbre_be = 0;
                $bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
                $bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
			
			    $bc  = 0;
		        $fs  = 0;
			    $mat = 0;
			    $ci  = 0;
			    $ass = 0;
			    $cb  = 0;


                if($type_inscription == 0) {
				    $nom_benef = $request->getParam("nom_beneficiaire");
				    $prenom_benef = $request->getParam("prenom_beneficiaire");
				    $fs  = 1;
			    } elseif($type_inscription == 1) {
				    $beneficiaire = $request->getParam("code_membre_beneficiaire");
			    }
			
			    if($beneficiaire != NULL) {
			        $findbeneficiaire = $m_map->find($beneficiaire,$membre);
			        if($findbeneficiaire == false) {
			            $this->view->error = "Le code membre du beneficiaire saisi  ".$beneficiaire."  est introuvable ...";
                        $db->rollback();
                        return;      
			        }
			    }

                $mstierslistebc_mapper = new Application_Model_EuMstiersListebcMapper();

			    $apporteur = $request->getParam("code_membre_apporteur");
			    if(substr($apporteur,19,1) == 'P') {
				    $findmembre = $m_map->find($apporteur,$membre);
				    if($findmembre == false) {
				        $this->view->error = "Le numéro membre du souscripteur saisi  ".$apporteur."  est introuvable ...";
                        $db->rollback();
                        return;      
			        }
			    } else {
			        $findmembre = $m_mapmoral->find($apporteur,$membremoral);
				    if($findmembre == false) {
			            $this->view->error = "Le numéro membre du souscripteur saisi  ".$apporteur."  est introuvable ...";
                        $db->rollback();
			            return;
				    }	 
			    }
				  
			    if($apporteur == $beneficiaire) {
					$this->view->error = "Impossible de faire la souscription pour tiers à vous-meme ...";
                    $db->rollback();
			        return;
			    }


                $cumulsolde = $m_mstiers->findcumulbc($apporteur,$type_souscription);
			    if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
				    $mont_msbcm = 1800000;						
                } else {
				    $mont_msbcm = 1443750;					
                }
					
			    $count = $mstierslistebc_mapper->findcountbenef($apporteur) + 1;
				$nbre_be = floor($cumulsolde/$mont_msbcm);
					
			    if($nbre_be < $count) {
				    $this->view->error = "Le souscripteur apporteur ne dispose pas de bon de consommation pour tiers ...";
                    $db->rollback();
                    return;
			    }

		        $mstiersliste->setCode_membre_apporteur($apporteur)
				             ->setCode_membre_beneficiaire($beneficiaire)
				             ->setType_souscription($type_souscription)
                             ->setType_kit("KITSU")
				             ->setCode_bnp(null)
                             ->setType_liste("AvecListe")
				             ->setUtilisateur(1)
				             ->setDate_listebc($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
				             ->setStatut(0)
				             ->setBon_conso($bc)
				             ->setFrais_solvabilite($fs)
				             ->setPeripherique($mat)
				             ->setConnectivite($ci)
				             ->setAssurance($ass)
				             ->setCompte_bancaire($cb)
							 ->setBon_neutre_id(NULL)
							 ->setNom_membre($nom_benef)
							 ->setPrenom_membre($prenom_benef);
			    $m_mstiersliste->save($mstiersliste);
			 
			    $db->commit();
			    $sessionmcnp->error = "Operation bien effectuée ...";
			    $this->_redirect('/index/inscriptionbc');			    
			
			} catch (Exception $exc) {
		        $db->rollback();
			    $error = "Erreur d'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                $this->view->error = $error;
                return;
		    }
			
		}
		
	}
	
	
	
	
	public  function addacteurAction()  {
	    /* page administration/addoffreurprojet - Ajout d'un offreurprojet  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
		
		$msbct = floor(Util_Utils::getParametre('MSBCT','valeur'));
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
		$select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
		$this->view->formations = $formations;
		$this->view->montant_bc = $montant_bc;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param_int');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
	   
	    $this->view->param = $param;
		if($request->isPost()) {
		   if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
		   && isset($_POST['code_membre']) && $_POST['code_membre']!=""
		   && isset($_POST['param']) && $_POST['param']!=""
		   && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1) {
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {
				    $param = (int) $this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$comptebancaire = new Application_Model_EuCompteBancaire();
                    $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
					
					$offreur_type = $request->getParam("offreur_projet_type");
					$typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($offreur_type,$typeoffreur);
					
					$m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
					
					$cycle = new Application_Model_EuCycleFormation();
                    $m_cycle = new Application_Model_EuCycleFormationMapper();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("code_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("code_membre"));
					
					$findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($request->getParam("code_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
					
					$souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
					$type_kit = $request->getParam("kit");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					
					$id_canton = NULL;
					$id_prefecture = NULL;
					$id_region = NULL;
					$id_pays = NULL;
					$code_zone = NULL;
					
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 0;
					$mont_bps = 0;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					$panupp  = Util_Utils::getParametre('TPANU','PP');
				    $panupm  =  Util_Utils::getParametre('TPANU','PM');
					
					$avecfs = false;
                    $mbc  = 0;
                    $vbc  = 0;
                    $mfs  = 0;
                    $vfs  = 0;
                    $mmat = 0;
                    $vmat = 0;
                    $mci  = 0;
                    $vci  = 0;
                    $mass = 0;
                    $vass = 0;
                    $mcb  = 0;
                    $vcb  = 0;
					
					$dist_peripherique  = NULL;
                    $dist_connectivite  = NULL;
                    $dist_assurance     = NULL;
					$id_cycle_formation = NULL;
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					  $multiple = $souscription_montant/$mont_caps;		
				    } 
					elseif($programme == "BC" && $statut == "AvecListe") {
					    if($type_kit == "KITSU")  {
						   $mont_bc = 30000;
						   if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						       $mont_msbcm = 1800000;					
						   } else {
						       $mont_msbcm = 1443750;				
						   }
					    }  else if($type_kit == "KITTECH") {
						   $mont_bc = $request->getParam("mont_bc");
						   $id_cycle_formation = $request->getParam("id_cycle_formation");
						   $findcycle = $m_cycle->find($id_cycle_formation,$cycle);
						   $mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
					    }
					    $multiple = $souscription_montant/$mont_msbcm;
					    $vfs  = $multiple;
					   
					}
					
					$findmembre = $m_mapmorale->find($_POST['code_membre'],$membremorale);
				    if($findmembre == false) {
					    $db->rollback();
	                    $this->view->param = $param;
					    $this->view->souscription_montant = $souscription_montant;
					    $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					    return;
				    }
					
					if($membremorale->desactiver != 0) {
					    $db->rollback();
	                    $this->view->param = $param;	
						$this->view->souscription_montant = $souscription_montant;
					    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$request->getParam("code_membre")."  n'est pas autorisé à effectuer cette opération ...";
					    return;
					}
					
					if($findbancaire == NULL) {
					   $db->rollback();
	                   $this->view->param = $param;	
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					   return;
				    }
					
					$id_canton = $membremorale->id_canton;
					$canton = new Application_Model_EuCanton();
                    $canton_mapper = new Application_Model_EuCantonMapper();
						
				    $prefecture = new Application_Model_EuPrefecture();
                    $prefecture_mapper = new Application_Model_EuPrefectureMapper();
						
				    $region = new Application_Model_EuRegion();
                    $region_mapper = new Application_Model_EuRegionMapper();
						
				    $pays = new Application_Model_EuPays();
                    $pays_mapper = new Application_Model_EuPaysMapper();
						
				    $zone = new Application_Model_EuZone();
                    $zone_mapper = new Application_Model_EuZoneMapper();
						
				    if(($id_canton != "") && ($id_canton != NULL)) {
					    $canton_mapper->find($id_canton,$canton);
						$id_prefecture = $canton->id_prefecture;
						$prefecture_mapper->find($id_prefecture,$prefecture);
						$id_region = $prefecture->id_region;
						$region_mapper->find($id_region,$region);
						$id_pays = $region->id_pays;
						$pays_mapper->find($id_pays,$pays);
						$code_zone = $pays->code_zone;
				    }
					
					$select = $db_convention->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
				    $select = $db_franchise->select();
				    $select->where('code_membre_franchise like  ?', $request->getParam("code_membre"));
				    $rowsfranchise = $db_franchise->fetchRow($select);
				  
				    if(count($rowsfranchise) == 0) {
					   $db->rollback();
			           $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
                       $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                       return;
				    }
				
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					if($findmstiers == NULL) {
					    if($msbct > $souscription_montant) {
					        $db->rollback();
					        $this->view->param = $param;
					        $this->view->souscription_montant = $souscription_montant;
					        $sessionmcnp->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					        return;     
				        }
					}
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					$offreur_membre = $request->getParam("code_membre");
				    $offreur_code_membre = '';
				   
				    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
					    $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValideBc($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutreBc($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreApproBc($bon_neutre->bon_neutre_id);
						
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
                           $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if(($offreur_membre != $offreur_code_membre)) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $sessionmcnp->error = "Le code membre du souscripteur  doit être celui du bon neutre ...";
                            return;   
					    }

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
						
						$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						
					    while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                    foreach($appro_detail as $appro) {
							            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
										 
                                    }
									   
							    }
								
								// Save des BAn utilisés 
								$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
								$bon_neutre_utilise->setUsertable("membreasso");
                                $bon_neutre_utilise->setUser_id(1);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
								
						  
						        //Mise à jour  des lignes d'enrégistrement
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
						  
						    } else {
						        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
								
								// Save des BAn utilisés 
								$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						        $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
								$bon_neutre_utilise->setUsertable("membreasso");
                                $bon_neutre_utilise->setUser_id(1);
					            $bon_neutre_utiliseM->save($bon_neutre_utilise);
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
						    }
                            $i++;						
				        }
					   
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					    $bon_neutre2M->update($bon_neutre2);
						
						//$integrateur_montant_kacm = 0;
						//$integrateur_montant_bc = 0;
						/*
						$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						   $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						   $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
                        */						

						/*
						if($statut == "AvecListe") {
						    $integrateur_montant_kacm = $multiple * $mont_caps;
							$integrateur_montant_bc = $souscription_montant - $integrateur_montant_kacm;
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_bc);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($integrateur_montant_kacm);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
						
						} else {
                            $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					        if(substr($offreur_membre,19,1) == 'P')  {
						      $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					        } else {
						      $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					        }
					        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
                        }
						
						*/
						
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $sessionmcnp->error = "Login déjà existant ...";
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $sessionmcnp->error = "Mot de passe incorret ...";
						    return;
	                    }

                        $date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                        //$compteur_souscription = $souscription_mapper->findConuter() + 1;
					    //$souscription->setSouscription_id($compteur_souscription);
						
					    $souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $souscription->setSouscription_membreasso(1);
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
                        $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($id_canton);
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
						// --- Faire la demande de configuration ----///////
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("code_membre"));
					   
					    if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("code_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($id_canton);
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
						
						//--- Début de l'opération de mise sur chaine ---
						$code = $request->getParam("code_membre");
					    $code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						if(isset($_POST['offreur_projet_filiere'])) {
					        $id_filiere = $_POST['offreur_projet_filiere'];
						}
						$code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
					        if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						      $id_type_acteur = 1;
						    }
							
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						      $id_type_acteur = 3;
						    }
							
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
							
							// Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($id_pays);
                            $c_acteur->setId_region($id_region);
                            $c_acteur->setCode_secteur_create($id_prefecture);
                            $c_acteur->setCode_agence_create($id_canton);
							$c_acteur->setId_prefecture($id_prefecture);
                            $c_acteur->setId_canton($id_canton);
							
							if($param == 2) {
								  $c_acteur->setType_acteur('PBF');
								  if($id_type_acteur == 3) {
					                 $c_acteur->setCode_activite('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setCode_activite('GROSSISTE');
				                  }
								} else {
								  if($id_type_acteur == 3) {
					                 $c_acteur->setType_acteur('DETAILLANT');
			                      } else if($id_type_acteur == 2) {
					                 $c_acteur->setType_acteur('SEMI-GROSSISTE');
			                      } else if($id_type_acteur == 1) {
					                 $c_acteur->setType_acteur('GROSSISTE');
				                  }
								  
								  if($id_type_creneau == 3) {
					                 $c_acteur->setCode_activite('DISTRIBUTION');
			                      } else if($id_type_creneau == 2) {
					                 $c_acteur->setCode_activite('TRANSFORMATION');
			                      } else if($id_type_creneau == 1) {
					                 $c_acteur->setCode_activite('PRODUCTION');
				                  }
								}
                    
                            $c_acteur->setCode_gac_chaine(NULL);
                            $t_acteur->insert($c_acteur->toArray());
							
							// Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if(($trouveuser) &&  ($param == 1)) {
							    if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                } 
                                elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                } 
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                }
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							if(($trouveuser) &&  ($param == 2)) {
							    if($id_type_acteur == 3) {
                                    $userin->setCode_groupe('pbf_detaillant');
                                    $userin->setCode_gac_filiere('pbf_detaillant');
                                    $userin->setCode_groupe_create('pbf_detaillant');
                                } 
                                 elseif($id_type_acteur == 2 ) {
                                    $userin->setCode_groupe('pbf_semi_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_semi_grossiste');
                                }  
                                elseif($id_type_acteur == 1 ) {
                                    $userin->setCode_groupe('pbf_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							// Mise à jour de la table eu_membre_morale
				            $membremorale->setId_filiere($id_filiere);
				            $m_mapmorale->update($membremorale);
							
							
							// Mise à jour de la table eu_contrat
				            $findcontrat = $map_contrat->findByMembre($code);
				            $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				            $contrat->setId_type_creneau($id_type_creneau);
				            $contrat->setId_type_acteur($id_type_acteur);
				            $map_contrat->update($contrat);
							
						}
						//---  Fin de l'opération de mise sur chaine ---
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
						
						$a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("code_membre"));
                        $a->setOffreur_projet_adresse($membremorale->quartier_membre);
						if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
                        $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
						
					    if($offreur_type >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
						if(isset($_POST['offreur_projet_nom_entrepot'])) {
                          $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                          $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
						} else {
						  $a->setOffreur_projet_nom_entrepot(null);
                          $a->setOffreur_projet_adresse_entrepot(null);
						}
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso(0);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($id_canton);
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    $a->setOffreurProjetFournisseur(null);
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
						
						
						/////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    //Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";
						
						
						if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }
						
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						$mstiers->setCode_membre($request->getParam("code_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						$mstiers->setType_souscription($type_souscription);
						
						$mstiers->setType_kit($type_kit);
                        $mstiers->setMontant_bc($mont_bc);
					    $mstiers->setMontant_peripherique($mmat);
					    $mstiers->setMontant_connectivite($mci);
					    $mstiers->setMontant_assurance($mass);
					    $mstiers->setMontant_comptebancaire($mcb);
                        $mstiers->setId_cycle_formation($id_cycle_formation);
							
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setBon_conso($vbc);
                        $mstiers->setFrais_solvabilite($vfs);
                        $mstiers->setPeripherique($vmat);
                        $mstiers->setConnectivite($vci);
                        $mstiers->setAssurance($vass);
                        $mstiers->setCompte_bancaire($vcb);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("USER");
				        $mstiers->setDistributeur_peripherique($dist_peripherique);
                        $mstiers->setDistributeur_connectivite($dist_connectivite);
                        $mstiers->setDistributeur_assurance($dist_assurance);
                        $m_mstiers->save($mstiers);
						
						/*
						if($statut == "AvecListe") {
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($integrateur_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_kacm);
					        $mstiers->setType_souscription("CAPS");  
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						    $mstiers->setType_souscripteur("USER");  								  
                            $m_mstiers->save($mstiers);
							
							
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($integrateur_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($integrateur_montant_bc);
					        $mstiers->setType_souscription($type_souscription);  
                            $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
							$mstiers->setMontant_connectivite($mci);
							$mstiers->setMontant_assurance($mass);
							$mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
						    $mstiers->setType_souscripteur("USER");  								  
                            $m_mstiers->save($mstiers);
							
						} else {
						   $mstiers->setCode_membre($request->getParam("code_membre"));
					       $mstiers->setMontant_souscris($souscription_montant);
						   $mstiers->setMontant_utilise(0);
					       $mstiers->setMontant_restant($souscription_montant);
						   $mstiers->setType_souscription($type_souscription);
						
						   $mstiers->setType_kit($type_kit);
                           $mstiers->setMontant_bc($mont_bc);
					       $mstiers->setMontant_peripherique($mmat);
					       $mstiers->setMontant_connectivite($mci);
					       $mstiers->setMontant_assurance($mass);
					       $mstiers->setMontant_comptebancaire($mcb);
                           $mstiers->setId_cycle_formation($id_cycle_formation);
							
						   $mstiers->setId_souscription($id_souscription);
						   $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						   $mstiers->setBon_neutre_code($code_ban);
						   $mstiers->setStatut_mstiers($statut);
						   $mstiers->setBon_conso($vbc);
                           $mstiers->setFrais_solvabilite($vfs);
                           $mstiers->setPeripherique($vmat);
                           $mstiers->setConnectivite($vci);
                           $mstiers->setAssurance($vass);
                           $mstiers->setCompte_bancaire($vcb);
						   $mstiers->setType_mstiers($programme);
						   $mstiers->setType_souscripteur("USER");
				           $mstiers->setDistributeur_peripherique($dist_peripherique);
                           $mstiers->setDistributeur_connectivite($dist_connectivite);
                           $mstiers->setDistributeur_assurance($dist_assurance);
                           $m_mstiers->save($mstiers);
						}
                         */						
						$id_mstiers = $db->lastInsertId();
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;	
						
						$m_te = new Application_Model_EuTegcMapper();
                        $te = new Application_Model_EuTegc();
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc  = $request->getParam("code_te");   
						}
						$code_banque = "";
						$referencepaie = "";
						$montant = 0;
						
						if($type_souscription != "BPS") {
						    //$code_banque = $request->getParam("code_banque");
						    //$referencepaie   = $request->getParam("num_compte");
							$code_banque = $findbancaire->code_banque;
                            $referencepaie = $findbancaire->num_compte_bancaire;
						    $montant = $souscription_montant;
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST", 
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
								$db->commit();
						        $sessionmcnp->error = $response->message;
							    $this->_redirect('/index/addacteur/param_int/'.$param);
							
						    } else {
							    $db->rollback();
							    $this->view->param = $param;
				                $this->view->souscription_montant = $souscription_montant;
							    $sessionmcnp->error = $response->message;
							    return;
						    }
						
						}  else  {
							$mont_bps =  ($souscription_montant) + (($souscription_montant * $panupm)/100);
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($mont_bps);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmcnp->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/index/addacteur/param_int/'.$param);
					   }
						
					}
				   
			   } catch (Exception $exc) {
		           $db->rollback();
	               $this->view->param = $param;
			       $this->view->souscription_montant = $souscription_montant;
                   $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                   return;
               }
		
		
		   } else {
			   $this->view->param = $param;
			   $sessionmcnp->error = "Veuillez renseigner les champs obligatoires (*) ...";
		   }
		}
		
	}
	
	
	
	
	public  function addacteurkitAction()  {
		
		/* page administration/addoffreurprojet - Ajout d'un offreurprojet  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
		$montant_bc = floor(Util_Utils::getParametre('BCM','valeur'));
		
		$t_formation = new Application_Model_DbTable_EuCycleFormation();
		$select = $t_formation->select();
	    $select->order('id asc');
	    $select->from($t_formation);
	    $formations = $t_formation->fetchAll($select);

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
		$this->view->formations = $formations;
		$this->view->montant_bc = $montant_bc;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param_int');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
	   
	    $this->view->param = $param;
		if($request->isPost()) {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
		        if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['code_membre']) && $_POST['code_membre']!=""
				&& isset($_POST['param']) && $_POST['param']!=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
					
					$param = (int) $this->_request->getParam('param_int');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;
					
					$membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$comptebancaire = new Application_Model_EuCompteBancaire();
                    $m_comptebancaire = new Application_Model_EuCompteBancaireMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
					$db_convention = new Application_Model_DbTable_EuConvention();
				    $db_franchise = new Application_Model_DbTable_EuFranchise();
				    $db_convention_eli = new Application_Model_DbTable_EuConventionEliOpi();
					
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
					
					$offreur_type = $request->getParam("offreur_projet_type");
					$typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($offreur_type,$typeoffreur);
					
					$m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
					
					$cycle = new Application_Model_EuCycleFormation();
                    $m_cycle = new Application_Model_EuCycleFormationMapper();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("code_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("code_membre"));
					
					$findbancaire = $m_comptebancaire->findByCodeMembrePrincipal($request->getParam("code_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
					
					$souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
					$type_kit = $request->getParam("kit");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 0;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					$avecfs = false;
                    $mbc  = 0;
                    $vbc  = 0;
                    $mfs  = 0;
                    $vfs  = 0;
                    $mmat = 0;
                    $vmat = 0;
                    $mci  = 0;
                    $vci  = 0;
                    $mass = 0;
                    $vass = 0;
                    $mcb  = 0;
                    $vcb  = 0;
					
					$dist_peripherique = NULL;
                    $dist_connectivite = NULL;
                    $dist_assurance    = NULL;
					$id_cycle_formation = NULL;
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } 
					elseif($programme == "BC" && $statut == "AvecListe") {
                        if(isset($_POST['mbc']) && $_POST['mbc'] == 1) {
						    $mbc = floor(Util_Utils::getParametre('MBC','valeur'));
							$mont_bc = $request->getParam("montant_bc");
							$vbc = 1;
							if($type_kit == "KITSU") {
								 if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						              $mont_msbcm = $mont_bc * $bnpmps;					
						         } else {
						              $mont_msbcm = $mont_bc * $bnpnmps;				
						         }
								
							} else if($type_kit == "KITTECH") {
								$id_cycle_formation = $request->getParam("id_cycle_formation");
								$findcycle = $m_cycle->find($id_cycle_formation,$cycle);
								$mont_msbcm = floor($mont_bc * $cycle->taux_cycle_formation);
							}
					    }
						
						if(isset($_POST['mfs']) && $_POST['mfs'] == 1) {
						    $mfs = floor(Util_Utils::getParametre('CAPS','valeur'));
							$vfs = 1;
							$avecfs = true;
					    }
						
						if(isset($_POST['mmat']) && $_POST['mmat'] == 1) {
						    //$mmat = floor(Util_Utils::getParametre('MMAT','valeur'));
							$mmat = $request->getParam("montant_peripherique");
							$vmat = 1;
							$dist_peripherique = $request->getParam("dist_peripherique");
							
							$finddistperi = $m_mapmorale->find($dist_peripherique,$membremorale);
						    if($finddistperi == false) {
						        $db->rollback();
	                            $this->view->param = $param;
					            $this->view->souscription_montant = $souscription_montant;
					            $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_peripherique."  est introuvable ...";
					            return;
						    }
							
					    }
						
						if(isset($_POST['mci']) && $_POST['mci'] == 1) {
						    $mci = floor($request->getParam("montant_connectivite")) * floor(Util_Utils::getParametre('MSBCri','PS'));
							$vci = 1;
							$dist_connectivite = $request->getParam("dist_connectivite");
							
							$finddistcon = $m_mapmorale->find($dist_connectivite,$membremorale);
						    if($finddistcon == false) {
						        $db->rollback();
	                            $this->view->param = $param;
					            $this->view->souscription_montant = $souscription_montant;
					            $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_connectivite."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mass']) && $_POST['mass'] == 1) {
						    //$mass = floor(Util_Utils::getParametre('MASS','valeur'));
							$mass = $request->getParam("montant_assurance");
							$vass = 1;
							$dist_assurance = $request->getParam("dist_assurance");
							
							$finddistass = $m_mapmorale->find($dist_assurance,$membremorale);
						    if($finddistass == false) {
						        $db->rollback();
	                            $this->view->param = $param;
					            $this->view->souscription_montant = $souscription_montant;
					            $this->view->error = "Le numéro membre de ce distributeur saisi  ".$dist_assurance."  est introuvable ...";
					            return;
						    }
					    }
						
						if(isset($_POST['mcb']) && $_POST['mcb'] == 1) {
						    //$mcb = floor(Util_Utils::getParametre('MCB','valeur'));
							$mcb = $request->getParam("montant_compte");
							$vcb = 1;
					    }
						
						$mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                        $multiple = $souscription_montant/$mont_msbcm;
					}  
					
					/*
					elseif($programme == "BC" && $statut == "SansListe" && 
					    ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                        || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                        || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
						
						if($type_souscription == "CMIT" || $type_souscription == "CAPU" || $type_souscription == "BPS") {
						    $mont_msbcm = $mont_bc * $bnpmps;
							$mont_msbcm = $mont_msbcm  + $mfs + $mmat + $mci + $mass + $mcb;
                            $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						    $mont_msbcm = $mont_bc * $bnpnmps;
							$mont_msbcm = $mont_msbcm + $mfs + $mmat + $mci + $mass + $mcb;
                            $multiple = $souscription_montant/$mont_msbcm;							
						} 
					}
					*/
					
					$findmembre = $m_mapmorale->find($_POST['code_membre'],$membremorale);
				    if($findmembre == false) {
					    $db->rollback();
	                    $this->view->param = $param;
					    $this->view->souscription_montant = $souscription_montant;
					    $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					    return;
				    }
					
					if($membremorale->desactiver != 0) {
					    $db->rollback();
	                    $this->view->param = $param;	
						$this->view->souscription_montant = $souscription_montant;
					    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$request->getParam("code_membre")."  n'est pas autorisé à effectuer cette opération ...";
					    return;
					}
					
					if($findbancaire == NULL) {
					   $db->rollback();
	                   $this->view->param = $param;	
					   $this->view->souscription_montant = $souscription_montant;
					   $this->view->error = "Veuillez mettre à jour votre compte bancaire ...";
					   return;
				    }
					
                    $select = $db_convention->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowsconvention = $db_convention->fetchRow($select);
				  
				    if(count($rowsconvention) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver la convention de collaboration ... ";
                      return;
				    }
					
				    $select = $db_franchise->select();
				    $select->where('code_membre_franchise like  ?', $request->getParam("code_membre"));
				    $rowsfranchise = $db_franchise->fetchRow($select);
				  
				    if(count($rowsfranchise) == 0) {
					   $db->rollback();
			           $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
                       $this->view->error = "Veuillez impérativement lire et approuver notre document de franchise ... ";
                       return;
				    }
				
				    $select = $db_convention_eli->select();
				    $select->where('code_membre like  ?', $request->getParam("code_membre"));
				    $rowseli = $db_convention_eli->fetchRow($select);
				  
				    if(count($rowseli) == 0) {
					  $db->rollback();
			          $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $this->view->error = "Veuillez impérativement lire et approuver notre document d'Engagement de Livraison Irrévocable ... ";
                      return;
				    }
					
					
					if($typeoffreur->montant_param > $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $sessionmcnp->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(stripos($multiple, ".") != FALSE && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
					/*
					if(stripos($multiple, ".") != FALSE && $programme == "BC" && $statut == "SansListe" && 
					    ((isset($_POST['mbc']) && $_POST['mbc'] == 1) || ((isset($_POST['mfs']) && $_POST['mfs'] == 1)) 
                        || ((isset($_POST['mmat']) && $_POST['mmat'] == 1))  || ((isset($_POST['mci']) && $_POST['mci'] == 1))
                        || ((isset($_POST['mass']) && $_POST['mass'] == 1)) || ((isset($_POST['mcb']) && $_POST['mcb'] == 1) ))) {
							
						$db->rollback();
					    $this->view->param = $param;
					    $this->view->integrateur_montant = $request->getParam("integrateur_montant");
				        $this->view->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				        return;		
					}
					*/
					
					
					$offreur_membre = $request->getParam("code_membre");
				    $offreur_code_membre = '';
				   
				    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
                      $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
					
					if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
						$bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
						
						
						if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
                           $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if(($offreur_membre != $offreur_code_membre)) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $sessionmcnp->error = "Le code membre du souscripteur  doit être celui du bon neutre ...";
                            return;   
					    }
						
						////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
					    while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                    foreach($appro_detail as $appro) {
							            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
										 
                                    }
									   
							    }
						  
						        //Mise à jour  des lignes d'enrégistrement
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);
						  
						    } else {
						        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);
						        $reste = 0;
						    }
                            $i++;						
				        }
					   
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					    $bon_neutre2M->update($bon_neutre2);
						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
						
						$souscription_montant_kacm = 0;
						$souscription_montant_bc = 0;
						
						if((isset($_POST['mfs']) && $_POST['mfs'] == 1)) {
							$souscription_montant_kacm = $multiple * $mfs;
							$souscription_montant_bc = $souscription_montant - $souscription_montant_kacm;
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant_bc);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							
							$bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("KACM");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant_kacm);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
							
							
						} else {
					        $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					        if(substr($offreur_membre,19,1) == 'P')  {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					        } else {
						        $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					        }
					        $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					        $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					        $bon_neutre_utiliseM->save($bon_neutre_utilise);
						}
						
						$eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $sessionmcnp->error = "Login déjà existant ...";
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
                            $sessionmcnp->error = "Mot de passe incorret ...";
						    return;
	                    }
						
						$date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                        //$compteur_souscription = $souscription_mapper->findConuter() + 1;
					    //$souscription->setSouscription_id($compteur_souscription);
						
					    $souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $souscription->setSouscription_membreasso(1);
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
					    //$m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                        $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						
						///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						// --- Faire la demande de configuration ----///////
						$table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
						
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("code_membre"));
					   
					    if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("code_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
						
						//--- Début de l'opération de mise sur chaine ---
						$code = $request->getParam("code_membre");
					    $code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						if(isset($_POST['offreur_projet_filiere'])) {
					        $id_filiere = $_POST['offreur_projet_filiere'];
						}
						$code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						
						$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
					        if(($offreur_type == 1) || ($offreur_type == 4) || ($offreur_type == 7)) {
						      $id_type_acteur = 1;
						    }
							
						    if(($offreur_type == 2) || ($offreur_type == 5) || ($offreur_type == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($offreur_type == 3) || ($offreur_type == 6) || ($offreur_type == 9)) {
						      $id_type_acteur = 3;
						    }
							
						    if(($offreur_type == 1) || ($offreur_type == 2) || ($offreur_type == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($offreur_type == 4) || ($offreur_type == 5) || ($offreur_type == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($offreur_type == 7) || ($offreur_type == 8) || ($offreur_type == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
							
							// Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
							$c_acteur->setId_prefecture($request->getParam("id_prefecture"));
                            $c_acteur->setId_canton($request->getParam("id_canton"));
							
							if($param == 2) {
                                $c_acteur->setType_acteur("PBF");
							} else {
								$c_acteur->setType_acteur(NULL);
							}
                    
                            $c_acteur->setCode_gac_chaine(NULL);
                            $t_acteur->insert($c_acteur->toArray());
							
							// Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if(($trouveuser) &&  ($param == 1)) {
							    if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                } 
                                elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                } 
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                }
                                elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							if(($trouveuser) &&  ($param == 2)) {
							    if($id_type_acteur == 3) {
                                    $userin->setCode_groupe('pbf_detaillant');
                                    $userin->setCode_gac_filiere('pbf_detaillant');
                                    $userin->setCode_groupe_create('pbf_detaillant');
                                } 
                                 elseif($id_type_acteur == 2 ) {
                                    $userin->setCode_groupe('pbf_semi_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_semi_grossiste');
                                }  
                                elseif($id_type_acteur == 1 ) {
                                    $userin->setCode_groupe('pbf_grossiste');
                                    $userin->setCode_gac_filiere(NULL);
                                    $userin->setCode_groupe_create('pbf_grossiste');
                                }
				                $userin->setId_filiere($id_filiere);
                                $user_mapper->update($userin);			  
		                    }
							
							// Mise à jour de la table eu_membre_morale
				            $membremorale->setId_filiere($id_filiere);
				            $m_mapmorale->update($membremorale);
							
							
							// Mise à jour de la table eu_contrat
				            $findcontrat = $map_contrat->findByMembre($code);
				            $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				            $contrat->setId_type_creneau($id_type_creneau);
				            $contrat->setId_type_acteur($id_type_acteur);
				            $map_contrat->update($contrat);
							
						}
						//---  Fin de l'opération de mise sur chaine ---
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
						
						$a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("code_membre"));
                        $a->setOffreur_projet_adresse($membremorale->quartier_membre);
						if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
                        $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
						
					    if($offreur_type >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
						if(isset($_POST['offreur_projet_nom_entrepot'])) {
                          $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                          $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
						} else {
						  $a->setOffreur_projet_nom_entrepot(null);
                          $a->setOffreur_projet_adresse_entrepot(null);
						}
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso(0);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($request->getParam("id_canton"));
                        $a->setOffreurProjetVille($membremorale->ville_membre);
					    $a->setOffreurProjetFournisseur(null);
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
						
						////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
						
						
						/////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    //Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";
						
						
						if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }
						
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						//$mstiers->setId_mstiers($id_mstiers);
						if((isset($_POST['mfs']) && $_POST['mfs'] == 1))  {
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($souscription_montant_kacm);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($souscription_montant_kacm);
					        $mstiers->setType_souscription("CAPS"); 
                            
							$mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
							
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers("CM");
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setType_souscripteur("USER");
							$mstiers->setDistributeur_peripherique(NULL);
                            $mstiers->setDistributeur_connectivite(NULL);
                            $mstiers->setDistributeur_assurance(NULL);
                            $m_mstiers->save($mstiers);
							
							$mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($souscription_montant_bc);
					        $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($souscription_montant_bc);
					        $mstiers->setType_souscription($type_souscription);
 
                            $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
 
					        $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setType_mstiers($programme);
					        $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
						    $mstiers->setFrais_solvabilite($vfs);
						    $mstiers->setPeripherique($vmat);
						    $mstiers->setConnectivite($vci);
						    $mstiers->setAssurance($vass);
						    $mstiers->setCompte_bancaire($vcb);
							$mstiers->setType_souscripteur("USER");
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
                            $m_mstiers->save($mstiers);
							
						} else {
					        $mstiers->setCode_membre($request->getParam("code_membre"));
					        $mstiers->setMontant_souscris($souscription_montant);
						    $mstiers->setMontant_utilise(0);
					        $mstiers->setMontant_restant($souscription_montant);
						    $mstiers->setType_souscription($type_souscription);
						
						    $mstiers->setType_kit($type_kit);
                            $mstiers->setMontant_bc($mont_bc);
							$mstiers->setMontant_peripherique($mmat);
					        $mstiers->setMontant_connectivite($mci);
					        $mstiers->setMontant_assurance($mass);
					        $mstiers->setMontant_comptebancaire($mcb);
                            $mstiers->setId_cycle_formation($id_cycle_formation);
							
						    $mstiers->setId_souscription($id_souscription);
						    $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $mstiers->setBon_neutre_code($code_ban);
						    $mstiers->setStatut_mstiers($statut);
						    $mstiers->setBon_conso($vbc);
                            $mstiers->setFrais_solvabilite($vfs);
                            $mstiers->setPeripherique($vmat);
                            $mstiers->setConnectivite($vci);
                            $mstiers->setAssurance($vass);
                            $mstiers->setCompte_bancaire($vcb);
						    $mstiers->setType_mstiers($programme);
						    $mstiers->setType_souscripteur("USER");
							$mstiers->setDistributeur_peripherique($dist_peripherique);
                            $mstiers->setDistributeur_connectivite($dist_connectivite);
                            $mstiers->setDistributeur_assurance($dist_assurance);
                            $m_mstiers->save($mstiers);
						}
						
						$id_mstiers = $db->lastInsertId();
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;	
						
						$m_te = new Application_Model_EuTegcMapper();
                        $te = new Application_Model_EuTegc();
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						    $code_tegc  = $request->getParam("code_te");   
						} 
						/*
						else {
						    $code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
						    $code_tegc = $code_te;
						}
						*/
						
						$code_banque = "";
						$referencepaie = "";
						$montant = 0;
						
						if($type_souscription != "BPS") {
						    //$code_banque = $request->getParam("code_banque");
						    //$referencepaie   = $request->getParam("num_compte");
							$code_banque = $findbancaire->code_banque;
                            $referencepaie = $findbancaire->num_compte_bancaire;
						    $montant = $souscription_montant;
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST", 
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
								$db->commit();
						        $sessionmcnp->error = $response->message;
							    $this->_redirect('/index/addacteur/param_int/'.$param);
							
						    } else {
							    $db->rollback();
							    $this->view->param = $param;
				                $this->view->souscription_montant = $souscription_montant;
							    $sessionmcnp->error = $response->message;
							    return;
						    }
						
						}  else  {
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($souscription_montant);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmcnp->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/index/addacteur/param_int/'.$param);
						}
						
					}
					
				} else  {
			        $this->view->param = $param;
				    $this->view->souscription_montant = $souscription_montant;
                    $sessionmcnp->error = "Veuillez renseigner les champs obligatoires (*)";
				    return;
			    }
			
			} catch (Exception $exc) {
		        $db->rollback();
	            $this->view->param = $param;
			    $this->view->souscription_montant = $souscription_montant;
                $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                return;
            }
			
		}
	}
	
	
	
	
   

        
	public  function addoffreurprojetAction()  {
	    /* page administration/addoffreurprojet - Ajout d'un offreurprojet  */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

 	    $t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper();
	    $ville = new Application_Model_EuVille();
	    $m_filiere = new Application_Model_EuFiliereMapper();
	    $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();

        $cantons = $t_canton->fetchAll();
	    $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $villes = $m_ville->fetchAll();
	    $filieres = $m_filiere->fetchAll();

	    $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
	    $this->view->filieres = $filieres;
	    $request = $this->getRequest();
	   
	    $param = (int) $this->_request->getParam('param');
	   
	    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
        $typeoffreurM = new Application_Model_EuTypeOffreurProjetMapper();
        $typeoffreurM->find($param,$typeoffreur);
	   
	    $this->view->param = $param;
	    $this->view->souscription_montant = $typeoffreur->montant_param;
	   
	    if($request->isPost()) {
	        $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {  
                if(isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!=""
			    && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!=""
			    && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!=""
			    && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot'] !=""
			    && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
                    
                    $param = (int) $this->_request->getParam('param');
				    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

				    $membremorale = new Application_Model_EuMembreMorale();
	                $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
					
					$bpssouscription = new Application_Model_EuBpsSouscription();
	                $m_bpssouscription = new Application_Model_EuBpsSouscriptionMapper();
					
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();

			        $contrat = new Application_Model_EuContrat();
                    $map_contrat = new Application_Model_EuContratMapper();

				    $m_depotvente = new Application_Model_EuDepotVenteMapper();
				    $depotvente = new Application_Model_EuDepotVente();
				   
				    $typeoffreur = new Application_Model_EuTypeOffreurProjet();
                    $m_typeoffreur = new Application_Model_EuTypeOffreurProjetMapper();
                    $m_typeoffreur->find($param,$typeoffreur);
				   
				    $m_mstiers = new Application_Model_EuMstiersMapper();
                    $mstiers = new Application_Model_EuMstiers();
							 
                    //$m_dmscm = new Application_Model_EuDetailMscmMapper();
                    //$dmscm = new Application_Model_EuDetailMscm();

				    $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
                    $findmstiers = $m_mstiers->fetchAllByMembre($request->getParam("offreur_projet_membre"));

                    $date_id = Zend_Date::now();

				    $bon_neutre = new Application_Model_EuBonNeutre();
                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                    $id_type_acteur = "";
			        $id_type_creneau = "";
				   
				    $souscription_montant = $request->getParam("souscription_montant");
				    $programme = $request->getParam("programme");
				    $statut = $request->getParam("liste");
					$multiple = "";
					$mont_msbcm="";
					$type_souscription = "";
					$mont_caps = floor(Util_Utils::getParametre('CAPS','valeur'));
					$mont_bc = 30000;
					$bnpmps  = Util_Utils::getParametre('BNPMPSFS','valeur');
					$bnpnmps = Util_Utils::getParametre('BNPNMPSFS','valeur');
					
					if($programme == "CM") {
					    $type_souscription = $request->getParam("type_souscription_cm");	
					} elseif($programme == "BC") {
						$type_souscription = $request->getParam("type_souscription_bc");
					}
					
					
					if($programme == "CM" && $statut == "AvecListe") {
					    $multiple = $souscription_montant/$mont_caps;		
				    } elseif($programme == "BC" && $statut == "AvecListe") {
                        if($type_souscription == "CMIT" || $type_souscription == "CAPU") {
						  $mont_msbcm = $mont_bc * $bnpmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						} else {
						  $mont_msbcm = $mont_bc * $bnpnmps;
                          $multiple = $souscription_montant/$mont_msbcm;							
						}   						
					}

				    $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
				    if($findmembre == false) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					  return;
				    }
					
					if($membremorale->desactiver == 1) {
					    $db->rollback();
	                    $this->view->param = $param;	
						$this->view->souscription_montant = $souscription_montant;
					    $this->view->error = "Ce souscripteur dont le code membre que voici  ".$request->getParam("offreur_projet_membre")."  n'est pas autorisé à effectuer cette opération ...";
					    return;
					}
					

				    $souscription_type_candidat= $request->getParam("souscription_type_candidat");
				    if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...";
					  return;
				    }
				   
				    if($typeoffreur->montant_param > $souscription_montant) {
					  $db->rollback();
					  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Le montant de souscription ne doit pas etre inferieur au montant predefini ...";
					  return;     
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "CM") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
					   //$this->view->code_membre = $request->getParam("offreur_projet_membre");
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital d'achat du compte marchand prédéfini  ".$mont_caps;
				       return;
				    }
					
					if(is_int($multiple) == false && $statut == "AvecListe" &&  $programme == "BC") {
				       $db->rollback();
					   $this->view->param = $param;
					   $this->view->souscription_montant = $souscription_montant;
					   //$this->view->code_membre = $request->getParam("offreur_projet_membre");
				       $sessionmcnp->error = "Le montant de souscription  ".$souscription_montant."  n'est pas un multiple du capital du bon de consommation  prédéfini  ".$mont_msbcm;
				       return;
				    }
					
				   
				    $offreur_membre = $request->getParam("offreur_projet_membre");
				    $offreur_code_membre = '';
				   
				    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				    if(count($bon_neutre) == 0) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
					  $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					  return;     
				    }
				   
				    if(($bon_neutre->bon_neutre_montant_solde <  $souscription_montant)) {
					  $db->rollback();
	                  $this->view->param = $param;
					  $this->view->souscription_montant = $souscription_montant;
					  //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                      $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                      return; 
				    }
				   
				    if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $souscription_montant)) {
				        $bon_neutre2 = new Application_Model_EuBonNeutre();
					    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
					    $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
					    $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
					    $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
					    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
					    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
					   
					    if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $souscription_montant) || ($cumulbon < $souscription_montant)) {
						   $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_montant = $souscription_montant;
						   //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                           $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                           return; 
					    }
					   
					    if(($offreur_membre != $offreur_code_membre)) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
						    //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmcnp->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                            return;   
					    }
					   
					   
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
					    $i = 0;
					    $reste = $souscription_montant;
					    $nbre_lignesdetbon = count($lignesdetbon);
					    while($reste > 0 && $i < $nbre_lignesdetbon) {
                            $lignedetbon = $lignesdetbon[$i];
                            $id = $lignedetbon->getBon_neutre_detail_id();
						    $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
						    if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                    foreach($appro_detail as $appro) {
							            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                        } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                        }
										 
                                    }
									   
							    }
						  
						        //Mise à jour  des lignes d'enrégistrement
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                    ->setBon_neutre_detail_montant_solde(0);
                                $bon_neutre_detailM->update($lignedetbon);

						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
					    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						  
						    } else {
						        if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                    $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                    $appro_montant_solde = $reste;
                                    foreach ($appro_detail as $appro) {
                                        $bnad = new Application_Model_EuBonNeutreApproDetail();
                                        $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                        $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                        if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                        } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                        }
                                    }								   
                                }
								 
                                //Mise à jour  des lignes d'enrégistrement
								$lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						        $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                $bon_neutre_detailM->update($lignedetbon);

						  
					    $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
					    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);
					   
						        $reste = 0;
						    }
                            $i++;						
				        }
					   
					    ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
					    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $souscription_montant);
					    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $souscription_montant);
					    //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
					    $bon_neutre2M->update($bon_neutre2);
						  
					    /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
					    $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
					   
					    $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
					    $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
					    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
					    if(substr($offreur_membre,19,1) == 'P')  {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
					    } else {
						  $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
					    }
					    $bon_neutre_utilise->setBon_neutre_utilise_libelle("BC");
					    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $bon_neutre_utilise->setBon_neutre_utilise_montant($souscription_montant);
					    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
					    $select = $eusouscription->select();

                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
					    $select->order(array("souscription_id ASC"));
	                    $select->limit(1);
	                    $rowseusouscription = $eusouscription->fetchRow($select);
		                if(count($rowseusouscription) > 0) {
			                $souscription_ok = 1;
			                $souscription_first = $rowseusouscription->souscription_id;
			            } else {
			                $souscription_ok = 0;
			            }
					   
					    $eusouscription = new Application_Model_DbTable_EuSouscription();
	                    $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
					   
					    if($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
						    //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmcnp->error = "Login déjà existant ...";
						    return;
	                    } else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL && $findmstiers == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_montant = $souscription_montant;
						    //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmcnp->error = "Mot de passe incorret ...";
						    return;
	                    }
					   
					    $date_id = Zend_Date::now();
					    $souscription = new Application_Model_EuSouscription();
                        $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                        //$compteur_souscription = $souscription_mapper->findConuter() + 1;
					    //$souscription->setSouscription_id($compteur_souscription);
						
					    $souscription->setSouscription_raison($membremorale->raison_sociale);
                        $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                        $souscription->setCode_statut($membremorale->code_statut);
					    $souscription->setSouscription_mobile($membremorale->portable_membre);
						
					    $souscription->setSouscription_membreasso(1);
						
					    $souscription->setSouscription_type("BAn");
                        $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                        $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                        $souscription->setSouscription_banque(null);
						
					    $souscription->setSouscription_montant($souscription_montant);
                        $souscription->setSouscription_nombre(null);
                        $souscription->setSouscription_programme("CMFH");
                        $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
					    $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $souscription->setSouscription_vignette(null);
						
					    $souscription->setCode_activite(null);
                        $souscription->setId_metier(null);
                        $souscription->setId_competence(null);
					    //$m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                        $souscription->setSouscription_ville($membremorale->ville_membre);
					    $souscription->setSouscription_quartier($membremorale->quartier_membre);
			                
					    if($finddepot == NULL && $findmstiers == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
					    } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                        }								  
						
					    if($souscription_ok == 1) {
                            $souscription->setSouscription_souscription($souscription_first);
				        } else {
                            $souscription->setSouscription_souscription($compteur_souscription);
					    }
					    $souscription->setSouscription_autonome(0);
			            $souscription->setPublier(0);
					    $souscription->setErreur(0);
					    $souscription->setId_canton($request->getParam("id_canton"));
                        $souscription_mapper->save($souscription);
						$compteur_souscription = $db->lastInsertId();
						
					    ///////////////////////////////////////////// validation acnev //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(1);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
						
					    ///////////////////////////////////////////// validation filiere //////////////////////////////////
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription,$souscription);
								
					    $souscription->setPublier(2);
					    $souscriptionM->update($souscription);
						
					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
						
					    ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
					    $souscription = new Application_Model_EuSouscription();
					    $souscriptionM = new Application_Model_EuSouscriptionMapper();
					    $souscriptionM->find($compteur_souscription, $souscription);
								
					    $souscription->setPublier(3);
					    $souscriptionM->update($souscription);

					    $validation_quittance = new Application_Model_EuValidationQuittance();
					    $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
					    //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					    //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
					    $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
					    $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
					    $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $validation_quittance->setPublier(1);
					    $validation_quittance_mapper->save($validation_quittance);
					   
					    // --- Faire la demande de configuration ----///////
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
					    $demande   = new Application_Model_EuDemandeConfigte();
                        $m_demande = new Application_Model_EuDemandeConfigteMapper();
					    $finddemande = $m_demande->findbymembre($request->getParam("offreur_projet_membre"));
					   
					    if($finddemande == false) {
					        $compteur_demande = $m_demande->findConuter() + 1;
			                $demande->setId_demande($compteur_demande);
                            $demande->setNom_produit($request->getParam("offreur_projet_produit"));
                            $demande->setCode_membre_morale($request->getParam("offreur_projet_membre"));
			                $demande->setValider(3);
			                $demande->setId_canton($request->getParam("id_canton"));
			                $demande->setDate_demande($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $demande->setProduit_special(1);
						    $demande->setProduit_ordinaire(0);
			                $m_demande->save($demande);
					    }
					   
					    //--- Début de l'opération de mise sur chaine ---
					    $code = $_POST['offreur_projet_membre'];
					    $code_zone = $request->getParam("code_zone");
						$id_filiere = "";
						if(isset($_POST['offreur_projet_filiere'])) {
					      $id_filiere = $_POST['offreur_projet_filiere'];
						}
					    $code_agence = substr($code,0,12);
				        $table = new Application_Model_DbTable_EuActeur();
					    $model_acteur = new Application_Model_EuActeur();
					    $mapper_acteur = new Application_Model_EuActeurMapper();
                        $selection = $table->select();
                        $selection->where('code_membre like ?',$code_agence.'%');
                        $selection->where('type_acteur like ?','gac_surveillance');
                        $resultat = $table->fetchAll($selection);
                        $trouvacteursur = $resultat->current();
                        $code_acteur = $trouvacteursur->code_acteur;
                        $acteur  =  $code_acteur;
					   
					   
					    //script de creation de TE des vendeurs ou offreurs de projet
					    $prk = new Application_Model_EuPrk();
                        $m_prk = new Application_Model_EuPrkMapper();
							   	   
                        $te   = new Application_Model_EuTegc();
					    $m_te = new Application_Model_EuTegcMapper();
					    $code_te = "";
						$code_tegc = "";
							   
					    $nom_tegc = $membremorale->raison_sociale;
							   
						$eutegc = new Application_Model_DbTable_EuTegc();
                        $select = $eutegc->select();
					    $select->where("code_membre like ? ", $code);
                        $rowseutegc = $eutegc->fetchAll($select);
						
						/*
						if(count($rowseutegc) <= 0)  {
							$code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
								  
						    $te->setCode_tegc($code_te);
			                $te->setId_filiere($id_filiere);
			                $te->setMdv(12);
			                $te->setTranche_payement(1);
			                $te->setCode_membre($code);
                            $te->setCode_membre_physique(null);								  
			                $te->setMontant(0);
			                $te->setMontant_utilise(0);
			                $te->setSolde_tegc(0);
			                $te->setId_utilisateur(NULL);
			                $te->setNom_tegc($nom_tegc);
			                $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					        $te->setType_tegc("DISTRIBUTEUR");
						    $te->setRecurrent_illimite(0);
						    $te->setRecurrent_limite(0);
						    $te->setNonrecurrent(1);
						    $te->setPeriode1(0);
						    $te->setPeriode2(0);
							$te->setPeriode3(0);
							$te->setFormel(0);
						    $te->setRegime_tva(0);
						    $te->setSpecial(0);
						    $te->setOrdinaire(0);
							$te->setSubvention(0);
										
							$te->setCode_zone($request->getParam("code_zone"));
				            $te->setId_pays($request->getParam("id_pays"));
				            $te->setId_region($request->getParam("id_region"));
				            $te->setId_prefecture($request->getParam("id_prefecture"));
				            $te->setId_canton($request->getParam("id_canton"));

                            $m_te->save($te);

                            //$id_prk = $m_prk->findConuter() + 1;
					        //$prk->setId_prk($id_prk);
					        $prk->setCode_tegc($code_te);
					        $prk->setValeur(null);
					        $m_prk->save($prk);
								   
					    }
							   
					    $code_compte = 'NB-TPAGCP-'.$code;
				        $res = $map_compte->find($code_compte,$compte);
				
				        if(!$res) {
                            $compte->setCode_cat('TPAGCP')
                                   ->setCode_compte($code_compte)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TPAGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
						*/
				
				        $code_comptets = 'NB-TSGCP-'.$code;
				        $rests = $map_compte->find($code_comptets,$compte);
				
				        if(!$rests) {
                            $compte->setCode_cat('TSGCP')
                                   ->setCode_compte($code_comptets)
                                   ->setCode_membre(NULL)
                                   ->setCode_membre_morale($code)
                                   ->setCode_type_compte('NB')
                                   ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                   ->setDesactiver(0)
                                   ->setLib_compte('TSGCP')
                                   ->setSolde(0);
                            $map_compte->save($compte); 
                        }
							   
					    // Fin script de creation des TE vendeurs ou offreurs de projet
					   
					    /*$findacteur = $mapper_acteur->findByActeur($code);
					    if($findacteur == false) {
					        if(($param == 1) || ($param == 4) || ($param == 7)) {
						      $id_type_acteur = 1;
						    }		   
						    if(($param == 2) || ($param == 5) || ($param == 8)) {
						      $id_type_acteur = 2;
						    } 
						    if(($param == 3) || ($param == 6) || ($param == 9)) {
						      $id_type_acteur = 3;
						    }
						    if(($param == 1) || ($param == 2) || ($param == 3)) {
						      $id_type_creneau = 3;
						    }
										   
						    if(($param == 4) || ($param == 5) || ($param == 6)) {
						      $id_type_creneau = 2;
						    }
										   
						    if(($param == 7) || ($param == 8) || ($param == 9)) {
						      $id_type_creneau = 1;
						    }
							
							// insertion dans la table eu_acteur_creneau
							$cm  = new Application_Model_EuActeurCreneauMapper();
                            $acren = new Application_Model_EuActeurCreneau();
											  
							$rep_mapper = new Application_Model_EuRepresentationMapper();
				            $rep = $rep_mapper->findbyrep($code);
						
						    $acren->setNom_acteur($membremorale->getRaison_sociale());
                            $acren->setCode_membre($code);
                            $acren->setId_type_acteur($id_type_acteur);
              
                            $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                            $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                            $acren->setId_utilisateur(null);
                            $acren->setGroupe(null);
                            $acren->setCode_creneau(NULL);
                            $acren->setCode_gac_filiere(NULL);
                            $acren->setCode_gac(NULL);
											  
						    $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                            if($code_acteur == NULL) {
                              $code_acteur = 'A' . $code_zone . '0001';
                            } else {
                              $num_ordre = substr($code_acteur, -4);
                              $num_ordre++;
                              $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                            }
						
                            $acren->setCode_acteur($code_acteur);
                            $acren->setId_filiere($id_filiere);
                            $cm->save($acren);
								 
						    // Insertion dans la table eu_acteur
				            $t_acteur = new Application_Model_DbTable_EuActeur();
				            $c_acteur = new Application_Model_EuActeur();
						    $count = $c_acteur->findConuter() + 1;
											  
						    // Mise à jour des tables
				            $filiere =  new Application_Model_EuFiliere();
                            $map_filiere = new Application_Model_EuFiliereMapper();
                            $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
						    $c_acteur->setId_acteur($count)
                                     ->setCode_acteur(NULL)
                                     ->setCode_division($filiere->getCode_division())
                                     ->setCode_membre($code)
                                     ->setId_utilisateur(NULL)
                                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				            if($id_type_acteur == 3) {
					           $c_acteur->setCode_activite('DETAILLANT');
			                } else if($id_type_acteur == 2) {
					           $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                } else if($id_type_acteur == 1) {
					           $c_acteur->setCode_activite('GROSSISTE');
				            }
						
			                $c_acteur->setCode_source_create('SOURCE');
                            $c_acteur->setCode_monde_create('MONDE');
                            $c_acteur->setCode_zone_create($code_zone);
                            $c_acteur->setId_pays($request->getParam("id_pays"));
                            $c_acteur->setId_region($request->getParam("id_region"));
                            $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                            $c_acteur->setCode_agence_create($request->getParam("id_canton"));
                            $c_acteur->setType_acteur(null);
                    
                            $c_acteur->setCode_gac_chaine($acteur);
                            $t_acteur->insert($c_acteur->toArray());
								
								
						    // Mise à jour de la table eu_utilisateur
                            $user_mapper = new Application_Model_EuUtilisateurMapper();
                            $userin = new Application_Model_EuUtilisateur();
				            $trouveuser = false;
				            $code_type_acteur = $membremorale->getCode_type_acteur();
				
				            $finduser = $user_mapper->findByMembre($code,"personne_morale");
				            if($finduser != false) {
				               $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				            }
											  
						    if($trouveuser) {
							       if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } 
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);			  
		                       }
							   
							   // Mise à jour de la table eu_membre_morale
				               $membremorale->setId_filiere($id_filiere);
				               $m_mapmorale->update($membremorale);
					           
							   //script de creation de TE des vendeurs ou offreurs de projet
							   $prk = new Application_Model_EuPrk();
                               $m_prk = new Application_Model_EuPrkMapper();
							   	   
                               $te   = new Application_Model_EuTegc();
							   $m_te = new Application_Model_EuTegcMapper();
							   $code_te = "";
							   
							   $nom_tegc = $membremorale->raison_sociale;
							   
							   $eutegc = new Application_Model_DbTable_EuTegc();
                               $select = $eutegc->select();
							   $select->where("code_membre like ? ", $code);
                               $rowseutegc = $eutegc->fetchAll($select);
							   
							   if(count($rowseutegc) <= 0)  {
							      $code_te = $m_te->getLastTegcByMembre($code);
								  if($code_te == NULL) {
			                         $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                      } else {
			                         $num_ordre = substr($code_te, -5);
                                     $num_ordre++;
                                     $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                      }
								  
								  $te->setCode_tegc($code_te);
			                      $te->setId_filiere($id_filiere);
			                      $te->setMdv(12);
			                      $te->setTranche_payement(1);
			                      $te->setCode_membre($code);
                                  $te->setCode_membre_physique(null);								  
			                      $te->setMontant(0);
			                      $te->setMontant_utilise(0);
			                      $te->setSolde_tegc(0);
			                      $te->setId_utilisateur(NULL);
			                      $te->setNom_tegc($nom_tegc);
			                      $te->setNom_produit($request->getParam("offreur_projet_produit"));
			                      $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					              $te->setType_tegc("DISTRIBUTEUR");
								  $te->setRecurrent_illimite(0);
								  $te->setRecurrent_limite(0);
								  $te->setNonrecurrent(1);
								  $te->setPeriode1(0);
								  $te->setPeriode2(0);
								  $te->setPeriode3(0);
								  $te->setFormel(0);
								  $te->setRegime_tva(0);
								  $te->setSpecial(0);
								  $te->setOrdinaire(0);
								  $te->setSubvention(0);
										
								  $te->setCode_zone($request->getParam("code_zone"));
				                  $te->setId_pays($request->getParam("id_pays"));
				                  $te->setId_region($request->getParam("id_region"));
				                  $te->setId_prefecture($request->getParam("id_prefecture"));
				                  $te->setId_canton($request->getParam("id_canton"));

                                  $m_te->save($te);

                                  $id_prk = $m_prk->findConuter() + 1;
					              $prk->setId_prk($id_prk);
					              $prk->setCode_tegc($code_te);
					              $prk->setValeur(null);
					              $m_prk->save($prk);
								   
							   }
							   
							   $code_compte = 'NB-TPAGCP-'.$code;
				               $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
				
				               $code_comptets = 'NB-TSGCP-'.$code;
				               $rests = $map_compte->find($code_comptets,$compte);
				
				               if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
							   
							   // Fin script de creation des TE vendeurs ou offreurs de projet
				
                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);
					   }
					   */
					   //---  Fin de l'opération de mise sur chaine ---
					   
					   // Mise à jour du type de fournisseur
					   //$membremoral = new Application_Model_EuMembreMorale();
	                   //$m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					   //$trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				       //$membremoral->setType_fournisseur($_POST['type_fournisseur']);
				       //$m_mapmoral->update($membremoral);
					   
					    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $a = new Application_Model_EuOffreurProjet();
                        $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					    //$compteur = $ma->findConuter() + 1;
					    $id_souscription = $compteur_souscription;
                                    
                        //$a->setOffreur_projet_id($compteur);
                        $a->setOffreur_projet_type($request->getParam("offreur_projet_type"));
                        $a->setOffreur_projet_souscription($id_souscription);
                        $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					    $a->setOffreur_projet_code_membre($request->getParam("offreur_projet_membre"));
                        $a->setOffreur_projet_adresse($membremorale->quartier_membre);
						if(isset($_POST['offreur_projet_produit'])) {
                            $a->setOffreur_projet_produit($request->getParam("offreur_projet_produit"));
						} else {
						    $a->setOffreur_projet_produit(null);
						}
                        $a->setOffreur_projet_operationnel($request->getParam("offreur_projet_operationnel"));
					    if($param >= 4) {
	                        $a->setOffreur_projet_capacite_production($request->getParam("offreur_projet_capacite_production"));
                        }
							
					    $a->setOffreur_projet_stock_disponible($request->getParam("offreur_projet_stock_disponible"));
                        $a->setOffreur_projet_qte_max($request->getParam("offreur_projet_qte_max"));
                        $a->setOffreur_projet_qte_moyen($request->getParam("offreur_projet_qte_moyen"));
                        $a->setOffreur_projet_qte_min($request->getParam("offreur_projet_qte_min"));
                        $a->setOffreur_projet_nom_entrepot($request->getParam("offreur_projet_nom_entrepot"));
                        $a->setOffreur_projet_adresse_entrepot($request->getParam("offreur_projet_adresse_entrepot"));
                        $a->setOffreur_projet_description_projet($request->getParam("offreur_projet_description_projet"));
                        $a->setOffreur_projet_membreasso(0);
                        $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                        $a->setOffreurProjetCanton($request->getParam("id_canton"));
                        $a->setOffreurProjetVille($membremorale->ville_membre);
						if(isset($_POST['type_fournisseur'])) {
					        $a->setOffreurProjetFournisseur($request->getParam("type_fournisseur"));
						} else {
							$a->setOffreurProjetFournisseur(null);
						}
			            $a->setPublier(0);
                        $ma->save($a);
						$compteur = $db->lastInsertId();
							  
							  
					    ////////////////////////////////////////////////////////////////////////////
                        $offreur_projet = new Application_Model_EuOffreurProjet();
                        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                        $offreur_projetM->find($compteur,$offreur_projet);
		
                        $offreur_projet->setPublier(1);
		                $offreur_projetM->update($offreur_projet);
							
					    $id_offreur_projet = $offreur_projet->offreur_projet_id;
					    $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                        $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					    //$cpte = $m_detailoffreur->findConuter() + 1;
					    //$detailoffreur->setId_detail_offreur_projet($cpte);
					    $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					    $detailoffreur->setSouscription_id($id_souscription);
					    $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					    $m_detailoffreur->save($detailoffreur);
							  
					    /////////////////////////////////////////////////////////////////////////////////////////
					    $code_agence = "";
							  
					    //Création du compte utilisateur intégrateur
                        $souscription = new Application_Model_EuSouscription();
                        $m_souscription = new Application_Model_EuSouscriptionMapper();
		                $m_souscription->find($id_souscription,$souscription);
							   
					    $date_id = Zend_Date::now();
                        $association = new Application_Model_EuAssociation();
                        $association_mapper = new Application_Model_EuAssociationMapper();

                        $login = "";
					    $password = "";
							  
					    if($finddepot == NULL  &&  $findmstiers == NULL) {
                            //$compteur_association = $association_mapper->findConuter() + 1;
                            //$association->setAssociation_id($compteur_association);
							
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							$compteur_association = $db->lastInsertId();
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
						    if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							    //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                                $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                $login = "";
                                while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                }
								$password = $login.$login; 
						    } else {
								$login = $souscription->souscription_login;
								$password = $souscription->souscription_passe;
						    }
										  
						    //$compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                            //$membreasso->setMembreasso_id($compteur_membreasso);
							
                            $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                            $membreasso->setMembreasso_nom($souscription->souscription_raison);
                            $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                            $membreasso->setMembreasso_association($compteur_association);
                            $membreasso->setMembreasso_email($souscription->souscription_email);
                            $membreasso->setMembreasso_login($login);
                            $membreasso->setMembreasso_passe($password);
                            $membreasso->setMembreasso_type(1);
                            $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $membreasso->setPublier(1);
						    $membreasso->setSouscription_id($souscription->souscription_id);
							$membreasso->setIntegrateur_id(null);
                            $membreasso_mapper->save($membreasso);
                        }
								  
						//insertion dans les tables eu_mscm et eu_detail_mscm
					    //$id_souscription = $compteur_souscription;
						//$id_mstiers = $m_mstiers->findConuter() + 1;
						$code_ban = $request->getParam("code_BAn");
						
						//$mstiers->setId_mstiers($id_mstiers);
						
					    $mstiers->setCode_membre($request->getParam("offreur_projet_membre"));
					    $mstiers->setMontant_souscris($souscription_montant);
						$mstiers->setMontant_utilise(0);
					    $mstiers->setMontant_restant($souscription_montant);
						$mstiers->setType_souscription($type_souscription);
						
						$mstiers->setId_souscription($id_souscription);
						$mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						$mstiers->setBon_neutre_code($code_ban);
						$mstiers->setStatut_mstiers($statut);
						$mstiers->setType_mstiers($programme);
						$mstiers->setType_souscripteur("CMFH");
                        $m_mstiers->save($mstiers);
						$id_mstiers = $db->lastInsertId();
						
						$souscription_id = $compteur_souscription;
						$code_tegc = "";
						$typeOpi = "BNP";
						$type_bnp = $type_souscription;	
						
						if(isset($_POST["code_te"]) && $_POST["code_te"] != "") {
						  $code_tegc  = $request->getParam("code_te");   
						} else {
						  //$eutegc = new Application_Model_DbTable_EuTegc();
                          //$select = $eutegc->select();
						  //$select->where("code_membre like ? ",$code);
                          //$select->limit(1);
                          //$rowseutegc = $eutegc->fetchRow($select);
                          //$code_tegc = $rowseutegc->code_tegc;
						  
						  $code_te = $m_te->getLastTegcByMembre($code);
						    if($code_te == NULL) {
			                    $code_te = 'TEGCP'.$id_filiere.$code. '00001';         
			                } else {
			                    $num_ordre = substr($code_te, -5);
                                $num_ordre++;
                                $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                }
						  
						    $code_tegc = $code_te;
						}
						
						$code_banque = "";
						$referencepaie = "";
						$montant = 0;
						
						if($type_souscription != "BPS") {
						    $code_banque = $request->getParam("code_banque");
						    $referencepaie   = $request->getParam("num_compte");
						    $montant = $souscription_montant;
						
						    $url = curl_init();
                            $resultjson = array();
					        curl_setopt_array(
					        $url,
						    array(
                                 CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                                 CURLOPT_RETURNTRANSFER => true,
                                 CURLOPT_ENCODING => "",
                                 CURLOPT_MAXREDIRS => 10,
                                 CURLOPT_TIMEOUT => 30000000,
                                 CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                 CURLOPT_CUSTOMREQUEST => "POST",
								 CURLOPT_POSTFIELDS => "{
								   \n\t\"codeMembre\":\"$code\",
								   \n\t\"modePaiement\":\"$code_banque\",
								   \n\t\"referencePaiement\":\"$referencepaie\",
								   \n\t\"montant\":\"$montant\",
								   \n\t\"codeTegc\":\"$code_tegc\",
								   \n\t\"typeOpi\":\"$typeOpi\",
								   \n\t\"souscriptionId\":\"$souscription_id\",
								   \n\t\"typeBnp\":\"$type_bnp\"
								 }",
								 CURLOPT_HTTPHEADER => array(
                                   "authorization: Basic dXNlcndlYnNlcnZpY2U6VXNlckAwNiEyMDE3X1NlSTIqJcK1I2ljZQ==",
                                   "content-type: application/json",
                                ),
						    ));
						    $response = json_decode(curl_exec($url));
						    $error = curl_error($url);
						
						    if(($error === '')  && ($response->resultat == 1)) {
						        //$db->commit();
							    //if($finddepot == NULL && $findmstiers == NULL) {
							        //$sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						        //} else {
							        //$sessionmcnp->error = "Operation bien effectuee ...".$response->message;
							    //}
								
								$db->commit();
						        $sessionmcnp->error = $response->message;
							    $this->_redirect('/index/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
							
						    } else {
							    $db->rollback();
							    $this->view->param = $param;
				                $this->view->souscription_montant = $souscription_montant;
			                    //$this->view->code_membre = $request->getParam("offreur_projet_membre");
							    $sessionmcnp->error = $response->message;
								//"Echec operation ...".$response->resultat;
							    return;
						    }
							
						}  else  {
							//$id_bps_souscription = $m_bpssouscription->findConuter() + 1;
						    //$bpssouscription->setId_bps_souscription($id_bps_souscription);
							$bpssouscription->setBps_demande($request->getParam("bps_demande"));
							$bpssouscription->setMontant_bps_souscription($souscription_montant);
							$bpssouscription->setDate_bps_souscription($date_id->toString('yyyy-MM-dd HH:mm:ss'));
							$bpssouscription->setId_mstiers($id_mstiers);
							$bpssouscription->setDelai_bps_souscription($request->getParam("delai_souscription"));
							$bpssouscription->setCode_smcipn(null);
							$bpssouscription->setAllouer(0);
							$m_bpssouscription->save($bpssouscription);
							
							$db->commit();
							if($finddepot == NULL && $findmstiers == NULL) {
							    $sessionmcnp->error = "Operation bien effectuee ... Voici votre Login et Mot de passe pour acceder a votre espace integrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
						    } else {
							    $sessionmcnp->error = "Operation bien effectuee ...";
							}
							$this->_redirect('/index/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
						}
				    }
            } else  {
			    $this->view->param = $param;
				$this->view->souscription_montant = $souscription_montant;
			    //$this->view->code_membre = $request->getParam("offreur_projet_membre");
                $sessionmcnp->error = "Veuillez renseigner les champs obligatoires (*)";
				return;
			}					   
	   
	    } catch (Exception $exc) {
		    $db->rollback();
	        $this->view->param = $param;
			$this->view->souscription_montant = $souscription_montant;
			//$this->view->code_membre = $request->getParam("offreur_projet_membre");
            $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            return;
        }
	   
	   
	   }
	   
	
	}
	
	
	public function inscriptionbcfortiersAction() {
		/* page administration/addoffreurprojet - Ajout d'une offreurprojet */
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		
		
	}
	
	

   
    public function addoffreurprojetpreAction()   {
           /* page administration/addoffreurprojet - Ajout d'une offreurprojet */
	       $sessionmcnp = new Zend_Session_Namespace('mcnp');
           //$this->_helper->layout->disableLayout();
 	       $this->_helper->layout()->setLayout('layoutpublicesmc');

           //$date_idold = new Zend_Date(Zend_Date::ISO_8601);
           //$date_iddold = clone $date_idold;
            
           //if($date_iddold->toString('yyyy-MM-dd') > "2018-01-31")  {
           //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/1');
           //}


 	   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville = new Application_Model_EuVilleMapper();
	   $ville = new Application_Model_EuVille();
	   $m_filiere = new Application_Model_EuFiliereMapper();
	   $t_region = new Application_Model_DbTable_EuRegion();
           $t_prefecture = new Application_Model_DbTable_EuPrefecture();
           $t_pays = new Application_Model_DbTable_EuPays();
           $t_zone = new Application_Model_DbTable_EuZone();
		   
           $cantons = $t_canton->fetchAll();
	   $regions = $t_region->fetchAll();
           $pays = $t_pays->fetchAll();
           $zones = $t_zone->fetchAll();
           $prefectures = $t_prefecture->fetchAll();
           $villes = $m_ville->fetchAll();
	   $filieres = $m_filiere->fetchAll();
		   
	   $this->view->regions = $regions;
           $this->view->zones = $zones;
           $this->view->pays = $pays;
           $this->view->prefectures = $prefectures;
           $this->view->cantons = $cantons;
           $this->view->villes = $villes;
	   $this->view->filieres = $filieres;
	   $request = $this->getRequest();

           if($request->isPost ()) {
               $db = Zend_Db_Table::getDefaultAdapter();
               $db->beginTransaction();
	       try  {
                     if (isset($_POST['souscription_email']) && $_POST['souscription_email']!="" 
			           && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!="" 
			           && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!="" 
			           && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""  
			           && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!="" 
			           && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!="" 
			           && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1)   {
					      
						  $param = (int)$this->_request->getParam('param');
						  $id_utilisateur_acnev = 1;
                          $id_utilisateur_filiere = 2;
                          $id_utilisateur_technopole = 3;
						  
						  $membremorale = new Application_Model_EuMembreMorale();
	                      $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();

                          $compte = new Application_Model_EuCompte();
                          $map_compte = new Application_Model_EuCompteMapper();
			
			              $contrat = new Application_Model_EuContrat();
                          $map_contrat = new Application_Model_EuContratMapper();
								 
						  $m_depotvente = new Application_Model_EuDepotVenteMapper();
				          $depotvente = new Application_Model_EuDepotVente();
							   
						  $finddepot = $m_depotvente->fetchAllByMembre($request->getParam("offreur_projet_membre"));
						 
						  $date_id = Zend_Date::now();
						
						  $bon_neutre = new Application_Model_EuBonNeutre();
                          $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
						 
						  $id_type_acteur = "";
			              $id_type_creneau = "";
						  
						  $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					      if($findmembre == false) {
					         $db->rollback();
	                         $this->view->param = $param;
						     $this->view->souscription_email  = $_POST['souscription_email'];
						     $this->view->code_membre = $_POST['offreur_projet_membre'];
					         $sessionmcnp->error = "Le numéro du membre offreur de projet ou de Biens,Produits et Service est introuvable ...";
					         return;
					      }
						  
						  
						  $souscription_type_candidat= $request->getParam("souscription_type_candidat");
						  if(($souscription_type_candidat != 6 && $souscription_type_candidat != 7)) {
					         $db->rollback();
					         $this->view->param = $param;
					         $this->view->souscription_email = $_POST['souscription_email'];
					         $this->view->code_membre = $_POST['offreur_projet_membre'];      
					         $sessionmcnp->error = "Le type de CMFH doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...";
						     return;
					      }
						  
						  $offreur_membre = $request->getParam("offreur_projet_membre");
						  $offreur_code_membre = '';
						  
						  $souscription_nombre  = $request->getParam("souscription_nombre");
						  $montant_souscription = $souscription_nombre * 2187.5;

                          $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
						  if(count($bon_neutre) == 0) {
						    $db->rollback();
	                        $this->view->param = $param;
						    $this->view->souscription_email  = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
					        $sessionmcnp->error = "Votre Code BAn  incorrect ...";
					        return;     
						  }
						  
						  if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
						       $db->rollback();
	                           $this->view->param = $param;
						       $this->view->souscription_email  = $request->getParam("souscription_email");
						       $this->view->code_membre = $request->getParam("offreur_projet_membre");
                               $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                               return; 
						    }
						  
						  
						  
			      if((count($bon_neutre) > 0) && ($bon_neutre->bon_neutre_montant_solde >=  $montant_souscription)) {
						     
				   $bon_neutre2 = new Application_Model_EuBonNeutre();
				   $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
				   $bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
				   $offreur_code_membre = $bon_neutre2->bon_neutre_code_membre;
					   
			           $bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
				   $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
							 
				   $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
				   //$cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    //$cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id);
                    $cumulbon = $bon_neutre_detailM->getSumByBonNeutreold($bon_neutre->bon_neutre_id) + $bon_neutre_detailM->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id);
							 
				   if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
				       $db->rollback();
	                               $this->view->param = $param;
				       $this->view->souscription_email  = $request->getParam("souscription_email");
				       $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                       $sessionmcnp->error = "Montant restant du BAn est insuffisant ... ".$cumulbon;
                                       return; 
				   }
						 
				   if(($offreur_membre != $offreur_code_membre)) {
				        $db->rollback();
	                                $this->view->param = $param;
				        $this->view->souscription_email  = $request->getParam("souscription_email");
				        $this->view->code_membre = $request->getParam("offreur_projet_membre");
                                        $sessionmcnp->error = "Le code membre du CMFH  doit être celui du bon neutre ...";
                                        return;   
				   }
							
				   ////////////////////////////////////////////////////////////////////////////////////////////////////////////
				   $i = 0;
			           $reste = $montant_souscription;
					         $nbre_lignesdetbon = count($lignesdetbon);
                             while ($reste > 0 && $i < $nbre_lignesdetbon) {
                                 $lignedetbon = $lignesdetbon[$i];
                                 $id = $lignedetbon->getBon_neutre_detail_id();
						         $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
							     if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
							        $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
									if ($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                       $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                       $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                       $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();
									   
                                       foreach ($appro_detail as $appro) {
									     $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                            $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                            $bnad_M->update($bnad);
                                         } else {
                                            $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                            $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                            $bnad_M->update($bnad);
                                            break;
                                         }
										 
                                       }
									   
									}
									
								    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                        ->setBon_neutre_detail_montant_solde(0);
                                    $bon_neutre_detailM->update($lignedetbon);
						  
						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
							 
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
						    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
						 
								 
                                 } else {
								 
								    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                    }
								 
                                    //Mise à jour  des lignes d'enrégistrement
								    $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						            $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                    $bon_neutre_detailM->update($lignedetbon);

						  
						     $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
							 
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
						    $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);
						 
						            $reste = 0;
                                 }							   
                                 $i++;
                             }						 
						  
						     ////////////////////////////////////////////////////////////////////////////////////////////////////////////	
						     $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						     $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						     //$bon_neutre2->setBon_neutre_code_membre($offreur_membre);
						     $bon_neutre2M->update($bon_neutre2);
						  
						     /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
						     $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
						     //$compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
						     //$bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
							 
						    $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
						    } else {
						       $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
						    }
						    $bon_neutre_utilise->setBon_neutre_utilise_libelle("CMFH");
						    $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
						    $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
						 
						     
						    
							/*
							if($bon_neutre->bon_neutre_montant_solde  <  $montant_souscription ) {
						      $db->rollback();
	                          $this->view->param = $param;
						      $this->view->souscription_email  = $request->getParam("souscription_email");
						      $this->view->code_membre = $request->getParam("offreur_projet_membre");
					          $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
					          return;
						    }
									 
							$bon_neutre2 = new Application_Model_EuBonNeutre();
						    $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
						    $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);
								
						    $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
						    $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
						    $bon_neutre2M->update($bon_neutre2);
						  
						    $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
						    $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						  
						    $compteur_bon_neutre_detail = $bon_neutre_detailM->findConuter() + 1;
						    $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
						    $bon_neutre_detail->setBon_neutre_id($bon_neutre->bon_neutre_id);
						    if(substr($offreur_membre,19,1) == 'P')  {
						      $bon_neutre_detail->setBon_neutre_detail_type("PP");
						    } else {
						      $bon_neutre_detail->setBon_neutre_detail_type("PM");
						    }
						    $bon_neutre_detail->setBon_neutre_detail_libelle("CMFH");
						    $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						    $bon_neutre_detail->setBon_neutre_detail_montant($montant_souscription);
						    $bon_neutre_detailM->save($bon_neutre_detail);
							
							*/
							
							$eusouscription = new Application_Model_DbTable_EuSouscription();
						 $select = $eusouscription->select();

                         $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremorale->raison_sociale)));
						 $select->order(array("souscription_id ASC"));
	                     $select->limit(1);
	                     $rowseusouscription = $eusouscription->fetchRow($select);
		                 if(count($rowseusouscription) > 0) {
			               $souscription_ok = 1;
			               $souscription_first = $rowseusouscription->souscription_id;
			             } else {
			               $souscription_ok = 0;
			             }


                         $eusouscription = new Application_Model_DbTable_EuSouscription();
	                     $select = $eusouscription->select()->where('souscription_login = ?',$request->getParam("souscription_login"));
                                  
                         if ($rowseusouscription = $eusouscription->fetchRow($select) && $request->getParam("souscription_login") != "" && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_email = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmcnp->error = "Login déjà existant ...";
							return;
	                     }  else if($request->getParam("souscription_passe") != $request->getParam("confirme") && $finddepot == NULL) {
						    $db->rollback();
					        $this->view->param = $param;
						    $this->view->souscription_email = $request->getParam("souscription_email");
						    $this->view->code_membre = $request->getParam("offreur_projet_membre");
                            $sessionmcnp->error = "Mot de passe incorret ...";
							return;
	                     }
						 
						 
						 $date_id = Zend_Date::now();
						 $souscription = new Application_Model_EuSouscription();
                         $souscription_mapper = new Application_Model_EuSouscriptionMapper();	

                         //$compteur_souscription = $souscription_mapper->findConuter() + 1;
						 //$souscription->setSouscription_id($compteur_souscription);
						
						 $souscription->setSouscription_raison($membremorale->raison_sociale);
                         $souscription->setCode_type_acteur($membremorale->code_type_acteur);
                         $souscription->setCode_statut($membremorale->code_statut);
						 $souscription->setSouscription_mobile($membremorale->portable_membre);
						
						 $souscription->setSouscription_membreasso(1);
						
						 $souscription->setSouscription_type("BAn");
                         $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                         $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
			            
                         $souscription->setSouscription_banque(null);
						
						 $souscription->setSouscription_montant($montant_souscription);
                         $souscription->setSouscription_nombre($request->getParam("souscription_nombre"));
                         $souscription->setSouscription_programme("CMFH");
                         $souscription->setSouscription_type_candidat($request->getParam("souscription_type_candidat"));
						
						 $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $souscription->setSouscription_vignette(null);
						
						 $souscription->setCode_activite(null);
                         $souscription->setId_metier(null);
                         $souscription->setId_competence(null);
						 $m_ville->find($request->getParam("offreur_projet_ville"),$ville);
                         $souscription->setSouscription_ville($ville->lib_ville);
						
						 $souscription->setSouscription_quartier($request->getParam("offreur_projet_quartier"));
			                
					     if($finddepot == NULL) {
                           $souscription->setSouscription_login($request->getParam("souscription_login"));
                           $souscription->setSouscription_passe($request->getParam("souscription_passe"));
						 } else {
                           $souscription->setSouscription_login(null);
                           $souscription->setSouscription_passe(null);
                         }								  
						
						 if($souscription_ok == 1) {
                           $souscription->setSouscription_souscription($souscription_first);
				         } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
					     }
						
						 $souscription->setSouscription_autonome(0);
			             $souscription->setPublier(0);
					     $souscription->setErreur(0);
					     $souscription->setId_canton($request->getParam("id_canton"));
                         $souscription_mapper->save($souscription);
                         $compteur_souscription = $db->lastInsertId();						 

                         ///////////////////////////////////////////// validation acnev //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
					         $souscription->setPublier(1);
						     $souscriptionM->update($souscription);
						
						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						
						     ///////////////////////////////////////////// validation filiere //////////////////////////////////
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
						     $souscription->setPublier(2);
						     $souscriptionM->update($souscription);
						
						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
						     //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);
						
						     ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
						     $souscription = new Application_Model_EuSouscription();
						     $souscriptionM = new Application_Model_EuSouscriptionMapper();
						     $souscriptionM->find($compteur_souscription, $souscription);
								
						     $souscription->setPublier(3);
						     $souscriptionM->update($souscription);

						     $validation_quittance = new Application_Model_EuValidationQuittance();
						     $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
						     //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
					         //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
						     $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
						     $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
						     $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
						     $validation_quittance->setPublier(1);
						     $validation_quittance_mapper->save($validation_quittance);						 
						 
						      //--- Début de l'opération de mise sur chaine ---
							  
							  $date_id = new Zend_Date(Zend_Date::ISO_8601);
                             $date_idd = clone $date_id;
						     $code = $_POST['offreur_projet_membre'];
							 $code_zone = $request->getParam("code_zone");
						     $id_filiere = $_POST['offreur_projet_filiere'];
						     $code_agence = substr($code,0,12);
				             $table = new Application_Model_DbTable_EuActeur();
							 $model_acteur = new Application_Model_EuActeur();
							 $mapper_acteur = new Application_Model_EuActeurMapper();
                             $selection = $table->select();
                             $selection->where('code_membre like ?',$code_agence.'%');
                             $selection->where('type_acteur like ?','gac_surveillance');
                             $resultat = $table->fetchAll($selection);
                             $trouvacteursur = $resultat->current();
                             $code_acteur = $trouvacteursur->code_acteur;
                             $acteur  =  $code_acteur;
									   
							 $findacteur = $mapper_acteur->findByActeur($code);
							 if($findacteur == false) {
									   
								  if(($param == 1) || ($param == 4) || ($param == 7)) {
						            $id_type_acteur = 1;
						          }
										   
						          if(($param == 2) || ($param == 5) || ($param == 8)) {
						            $id_type_acteur = 2;
						          }
								  
						          if(($param == 3) || ($param == 6) || ($param == 9)) {
						            $id_type_acteur = 3;
						          }
						
						          if(($param == 1) || ($param == 2) || ($param == 3)) {
						            $id_type_creneau = 3;
						          }
										   
						          if(($param == 4) || ($param == 5) || ($param == 6)) {
						            $id_type_creneau = 2;
						          }
										   
						          if(($param == 7) || ($param == 8) || ($param == 9)) {
						            $id_type_creneau = 1;
						          }
										   
								//insertion dans la table eu_acteur_creneau
								$cm  = new Application_Model_EuActeurCreneauMapper();
                                $acren = new Application_Model_EuActeurCreneau();
											  
								$rep_mapper = new Application_Model_EuRepresentationMapper();
				                $rep = $rep_mapper->findbyrep($code);
						
						        $acren->setNom_acteur($membremorale->getRaison_sociale());
                                $acren->setCode_membre($code);
                                $acren->setId_type_acteur($id_type_acteur);
              
                                $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                                $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                                $acren->setId_utilisateur(null);
                                $acren->setGroupe(null);
                                $acren->setCode_creneau(NULL);
                                $acren->setCode_gac_filiere(NULL);
                                $acren->setCode_gac(NULL);
											  
								$code_acteur = $cm->getLastActeurByCrenau($code_zone);
                                if($code_acteur == NULL) {
                                    $code_acteur = 'A' . $code_zone . '0001';
                                } else {
                                    $num_ordre = substr($code_acteur, -4);
                                    $num_ordre++;
                                    $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                                }
						
                                $acren->setCode_acteur($code_acteur);
                                $acren->setId_filiere($id_filiere);
                                $cm->save($acren);
											  
						        //Insertion dans la table eu_acteur
				                $t_acteur = new Application_Model_DbTable_EuActeur();
				                $c_acteur = new Application_Model_EuActeur();
								$count = $c_acteur->findConuter() + 1;
											  
								//Mise à jour des tables
				                $filiere =  new Application_Model_EuFiliere();
                                $map_filiere = new Application_Model_EuFiliereMapper();
                                $find_filiere = $map_filiere->find($id_filiere,$filiere);
											  
								$c_acteur->setId_acteur($count)
                                          ->setCode_acteur(NULL)
                                          ->setCode_division($filiere->getCode_division())
                                          ->setCode_membre($code)
                                          ->setId_utilisateur(NULL)
                                          ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				                if($id_type_acteur == 3) {
					              $c_acteur->setCode_activite('DETAILLANT');
			                    } else if($id_type_acteur == 2) {
					              $c_acteur->setCode_activite('SEMI-GROSSISTE');
			                    } else if($id_type_acteur == 1) {
					              $c_acteur->setCode_activite('GROSSISTE');
				                }
						
			                    $c_acteur->setCode_source_create('SOURCE');
                                $c_acteur->setCode_monde_create('MONDE');
                                $c_acteur->setCode_zone_create($code_zone);
                                $c_acteur->setId_pays($request->getParam("id_pays"));
                                $c_acteur->setId_region($request->getParam("id_region"));
                                $c_acteur->setCode_secteur_create($request->getParam("id_prefecture"));
                                $c_acteur->setCode_agence_create($request->getParam("id_canton"));
								
                                if($id_filiere == 4) {
								  $c_acteur->setType_acteur('PBF');
								} else {
								  $c_acteur->setType_acteur(NULL);
								}
                    
                                $c_acteur->setCode_gac_chaine($acteur);
                                $t_acteur->insert($c_acteur->toArray());
											  
							    // Mise à jour de la table eu_utilisateur
                                $user_mapper = new Application_Model_EuUtilisateurMapper();
                                $userin = new Application_Model_EuUtilisateur();
				                $trouveuser = false;
				                $code_type_acteur = $membremorale->getCode_type_acteur();
				
				                $finduser = $user_mapper->findByMembre($code,"personne_morale");
				                if($finduser != false) {
				                  $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				                }
											  
								if($trouveuser) {
								   if($id_filiere == 4) {
								      if($id_type_acteur == 3) {
									     $userin->setCode_groupe('pbf_detaillant');
                                         $userin->setCode_gac_filiere('pbf_detaillant');
                                         $userin->setCode_groupe_create('pbf_detaillant');
									  } elseif($id_type_acteur == 2) {
									     $userin->setCode_groupe('pbf_semi_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_semi_grossiste');
									  } elseif($id_type_acteur == 1) {
									     $userin->setCode_groupe('pbf_grossiste');
                                         $userin->setCode_gac_filiere(NULL);
                                         $userin->setCode_groupe_create('pbf_grossiste');
									  }
								   
								   } else {
								   
								   
								   if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_detaillant');
                                     $userin->setCode_gac_filiere('oe_detaillant');
                                     $userin->setCode_groupe_create('oe_detaillant');
                                   } 
                                   elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   } elseif($id_type_acteur == 3 && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_detaillant');
                                     $userin->setCode_gac_filiere('ose_detaillant');
                                     $userin->setCode_groupe_create('ose_detaillant');
                                   }
								   elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   } elseif($id_type_acteur == 2  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_semi_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_semi_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'PEI') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'OE') {
                                     $userin->setCode_groupe('oe_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('oe_grossiste');
                                   }
                                   elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   } elseif($id_type_acteur == 1  && $code_type_acteur == 'POSE') {
                                     $userin->setCode_groupe('ose_grossiste');
                                     $userin->setCode_gac_filiere(NULL);
                                     $userin->setCode_groupe_create('ose_grossiste');
                                   }
								   
								   }
				                   $userin->setId_filiere($id_filiere);
                                   $user_mapper->update($userin);
											  
		                       }
											  
					           // Mise à jour de la table eu_membre_morale
				               $membremorale->setId_filiere($id_filiere);
				               $m_mapmorale->update($membremorale);
											  
						       // Recuperation de la PRK nr
							   /*
                               $params = new Application_Model_EuParametresMapper();
                               $par = new Application_Model_EuParametres();
                               $prc = 0;
                               $par_prc = $params->find('prc','nr',$par);
                               if ($par_prc == true) {
                                  $prc = $par->getMontant();
                               }
											  
							   $te_mapper = new Application_Model_EuTegcMapper();
                               $te = new Application_Model_EuTegc();
                               //$code_te = 'TEGCP' .$id_filiere. $code;
							   $code_te = $te_mapper->getLastTegc();
			                   if ($code_te == NULL) {
			                      $code_te = 'TEGCP'.$id_filiere.$code.'00001';         
			                   } else {
			                      $num_ordre = substr($code_te, -5);
                                  $num_ordre++;
                                  $code_te = 'TEGCP'.$id_filiere.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			                   }
                               $find_te = $te_mapper->find($code_te,$te);
                               if ($find_te == false) {
                                  $te->setCode_tegc($code_te)
                                     ->setId_filiere($id_filiere)
                                     ->setMdv($prc)
									 ->setNom_tegc($membremorale->raison_sociale)
                                     ->setCode_membre($code)
                                     ->setMontant(0)
                                     ->setMontant_utilise(0)
                                     ->setSolde_tegc(0);
                                  $te_mapper->save($te);
                               } else {
                                  $te->setId_filiere($id_filiere);
                                  $te->setMdv($prc);
                                  $te_mapper->update($te);
                               }
							   */
				
				               $code_compte = 'NB-TPAGCP-'.$code;
				               $res = $map_compte->find($code_compte,$compte);
				
				               if(!$res) {
                                 $compte->setCode_cat('TPAGCP')
                                        ->setCode_compte($code_compte)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TPAGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
				
				               $code_comptets = 'NB-TSGCP-'.$code;
				               $rests = $map_compte->find($code_comptets,$compte);
				
				               if(!$rests) {
                                 $compte->setCode_cat('TSGCP')
                                        ->setCode_compte($code_comptets)
                                        ->setCode_membre(NULL)
                                        ->setCode_membre_morale($code)
                                        ->setCode_type_compte('NB')
                                        ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                        ->setDesactiver(0)
                                        ->setLib_compte('TSGCP')
                                        ->setSolde(0);
                                 $map_compte->save($compte); 
                               }
				
                               // Mise à jour de la table eu_contrat
				               $findcontrat = $map_contrat->findByMembre($code);
				               $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				               $contrat->setId_type_creneau($id_type_creneau);
				               $contrat->setId_type_acteur($id_type_acteur);
				               $map_contrat->update($contrat);
						}
								 
                        //---  Fin de l'opération de mise sur chaine ---
						
						// Mise à jour du type de fournisseur
						$membremoral = new Application_Model_EuMembreMorale();
	                    $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
						$trouvermembre = $m_mapmoral->find($_POST['offreur_projet_membre'],$membremoral);
				        $membremoral->setType_fournisseur($_POST['type_fournisseur']);
				        $m_mapmoral->update($membremoral);
						
						
						$nombre_compte = $request->getParam("souscription_nombre");
                        if($nombre_compte >= 100)   {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                              $a = new Application_Model_EuOffreurProjet();
                              $ma = new Application_Model_EuOffreurProjetMapper();	
					   
					          //$compteur = $ma->findConuter() + 1;
					          $id_souscription = $compteur_souscription;
                                    
                              //$a->setOffreur_projet_id($compteur);
                              $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                              $a->setOffreur_projet_souscription($id_souscription);
                              $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
					          $a->setOffreur_projet_code_membre($_POST['offreur_projet_membre']);
                              $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                              $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
                              $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
					          if($param >= 4) {
	                            $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                              }
							
					          $a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                              $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                              $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                              $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                              $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                              $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                              $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                              $a->setOffreur_projet_membreasso(0);
                              $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                              $a->setOffreurProjetCanton($request->getParam("id_canton"));
                              $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			                  $a->setPublier($_POST['publier']);
                              $ma->save($a);
							  
							  $compteur = $db->lastInsertId();
							  
							  
							  ////////////////////////////////////////////////////////////////////////////
                              $offreur_projet = new Application_Model_EuOffreurProjet();
                              $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                              $offreur_projetM->find($compteur,$offreur_projet);
		
                              $offreur_projet->setPublier(1);
		                      $offreur_projetM->update($offreur_projet);
							
					          $id_offreur_projet = $offreur_projet->offreur_projet_id;
					          $detailoffreur = new Application_Model_EuDetailOffreurProjet();
                              $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
					          //$cpte = $m_detailoffreur->findConuter() + 1;
					          //$detailoffreur->setId_detail_offreur_projet($cpte);
							  
					          $detailoffreur->setOffreur_projet_id($id_offreur_projet);
					          $detailoffreur->setSouscription_id($id_souscription);
					          $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
					          $m_detailoffreur->save($detailoffreur);

                              /////////////////////////////////////////////////////////////////////////////////////////
					          $code_agence = "";
									
							  if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
					            $membreasso = new Application_Model_EuMembreasso();
                                $m_membreasso = new Application_Model_EuMembreassoMapper();
		                        $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);
			
                                $association = new Application_Model_EuAssociation();
                                $m_association = new Application_Model_EuAssociationMapper();
		                        $m_association->find($membreasso->membreasso_association, $association);
		                        $code_agence = $association->code_agence;
					          }

                              // Création du compte utilisateur intégrateur
                              $souscription = new Application_Model_EuSouscription();
                              $m_souscription = new Application_Model_EuSouscriptionMapper();
		                      $m_souscription->find($id_souscription,$souscription);
							   
					          $date_id = Zend_Date::now();
                              $association = new Application_Model_EuAssociation();
                              $association_mapper = new Application_Model_EuAssociationMapper();

                              $login = "";
						      $password = "";

                              if($finddepot == NULL) {
                                //$compteur_association = $association_mapper->findConuter() + 1;
                                //$association->setAssociation_id($compteur_association);
                                $association->setAssociation_mobile($souscription->souscription_mobile);
                                $association->setAssociation_nom($souscription->souscription_raison);
                                $association->setAssociation_numero($compteur_association."INT");
                                $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                                $association->setAssociation_email($souscription->souscription_email);
                                $association->setAssociation_recepisse(NULL);
                                $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                                $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $association->setId_filiere(NULL);
                                $association->setCode_type_acteur(NULL);
                                $association->setCode_statut(NULL);
                                $association->setCode_agence($code_agence);
                                $association->setPublier(1);
                                $association_mapper->save($association);
								$compteur_association = $db->lastInsertId();
							   
							    $date_id = Zend_Date::now();

                                $membreasso = new Application_Model_EuMembreasso();
                                $membreasso_mapper = new Application_Model_EuMembreassoMapper();
										  
								if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							      //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                                  $login = "";
                                  while(strlen($login) != 8) {
                                    $login .= $liste[rand(0,61)]; 
                                  }
								    $password = $login.$login; 
						        } else {
								    $login = $souscription->souscription_login;
								    $password = $souscription->souscription_passe;
						        }
										  
										  $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                                          $membreasso->setMembreasso_id($compteur_membreasso);
                                          $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                                          $membreasso->setMembreasso_nom($souscription->souscription_raison);
                                          $membreasso->setMembreasso_prenom($souscription->souscription_prenom);
                                          $membreasso->setMembreasso_association($compteur_association);
                                          $membreasso->setMembreasso_email($souscription->souscription_email);
                                          $membreasso->setMembreasso_login($login);
                                          $membreasso->setMembreasso_passe($password);
                                          $membreasso->setMembreasso_type(1);
                                          $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                          $membreasso->setPublier(1);
								          $membreasso->setSouscription_id($souscription->souscription_id);
							              $membreasso->setIntegrateur_id(null);
                                          $membreasso_mapper->save($membreasso);
                                  }

                                  $eusouscription = new Application_Model_EuSouscription();
		                               $souscriptionM = new Application_Model_EuSouscriptionMapper();
							   
							           $date = new Zend_Date();
		                               $compte_map  = new Application_Model_EuCompteMapper();
                                       $compte      = new Application_Model_EuCompte();
			                           $sms_money   = new Application_Model_EuSmsmoney();
                                       $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                           $det_sms   = new Application_Model_EuDetailSmsmoney();
			                           $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                           $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                           $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							           // insertion dans la table eu_depot_vente
				                       $m_dvente = new Application_Model_EuDepotVenteMapper();
				                       $dvente = new Application_Model_EuDepotVente();
									   
									   $membretierscode = new Application_Model_EuMembretierscode();
                                       $membretierscode_mapper = new Application_Model_EuMembretierscodeMapper();
							   
							           $fcaps = Util_Utils::getParametre('CAPS','valeur');

		                               $membre_pbf = '0000000000000000001M';
	                                   $code_compte_pbf = "NN-TR-".$membre_pbf;
			                           $ret = $compte_map->find($code_compte_pbf,$compte);
							
							           $souscriptionM->find($id_souscription,$eusouscription);
						               $mobile = $eusouscription->souscription_mobile;
							           $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
							           $nbre_compte = $eusouscription->souscription_nombre;
							           $montant = $nbre_compte * $fcaps;
									   
									   // Traitement des produits CAPS
                                       $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									   $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
                                       
                                       //if ($lignesdetfcaps != null) {
                                           /*$nengfcaps = $money_map->findConuter() + 1;
                                           $sms_money->setNEng($nengfcaps)
                	                                ->setCode_Agence(null)
                                                    ->setCreditAmount($montant)
                                                    ->setSentTo($mobile)
                                                    ->setMotif('CAPS')
                                                    ->setId_Utilisateur(null)
                                                    ->setCurrencyCode('XOF')
                                                    ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setFromAccount($code_compte_pbf)
                                                    ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                    ->setCreditCode($codefcaps)
                                                    ->setDestAccount(null)
                                                    ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                    ->setDestAccount_Consumed($id_souscription)
                                                    ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                    ->setNum_recu(null);
                                           $money_map->save($sms_money);*/
										   
										   // Mise à jour du compte de transfert
				                           /*if($ret && ($cumulfcaps >= $montant)) {
			                                  // Mise à jour du compte de transfert
				                              $compte->setSolde($compte->getSolde() - $montant);
                                              $compte_map->update($compte);    
	                                       } else {
			                                  $db->rollback();
	                                          $this->view->param = $param;
											  $this->view->souscription_email  = $_POST['souscription_email'];
								              $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                  $sessionmcnp->error = 'Le compte de transfert est introuvable ou le solde du compte  est insuffisant';
                                              return;			   
			                               }*/
										   
										   /* $l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);
	  
						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										 
										   }*/
										   
										   //$countdvente = $m_dvente->findConuter() + 1;
				                           //$dvente->setId_depot($countdvente)
										   
					                       $dvente->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                           $dvente->setCode_membre($_POST['offreur_projet_membre']);   
			                               $dvente->setCode_produit('CAPS');
				                           $dvente->setMont_depot($montant);
				                           $dvente->setMont_vendu(0);
				                           $dvente->setSolde_depot($montant);
				                           $dvente->setId_utilisateur(null);
				                           $dvente->setType_depot('AvecListe');
				                           $dvente->setSouscription_id($id_souscription);
				                           $m_dvente->save($dvente);
										   
										   for($i = 0; $i < $nbre_compte; $i++) {
										     $membretierscode_code = strtoupper(Util_Utils::genererCodeSMS(8));
											 $compteur_membretierscode = $membretierscode_mapper->findConuter() + 1;
											 $membretierscode->setMembretierscode_id($compteur_membretierscode);
                                             $membretierscode->setMembretierscode_membretiers(0);
                                             $membretierscode->setMembretierscode_code($membretierscode_code);
                                             $membretierscode->setMembretierscode_souscription($id_souscription);
                                             $membretierscode->setPublier(0);
                                             $membretierscode->setCode_membre(NULL);
											 $membretierscode->setAllocation_cmfh_id(NULL);
                                             $membretierscode_mapper->save($membretierscode);
										   }
										   
										   //$compteur_sms = Util_Utils::findConuter() + 1;
				                           Util_Utils::addSms2new($mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre espace professionnel');
						           

                                       /*} else  {
				                           $db->rollback();
	                                       $this->view->param = $param;
									       $this->view->souscription_email  = $_POST['souscription_email'];
								           $this->view->code_membre = $_POST['offreur_projet_membre'];
			                               $sessionmcnp->error = 'Le solde du compte de transfert est vide';
                                          return;
				                       }*/									   
						  
					   
					    } else {
						    $db->rollback();
	                        $this->view->param = $param;
							$this->view->souscription_email  = $_POST['souscription_email'];
							$this->view->code_membre = $_POST['offreur_projet_membre'];
							$sessionmcnp->error = 'Le nombre de comptes marchands souscrits doit être supérieur ou égale à 100 ...';
						    return;
						}
						
						$db->commit();
						if($finddepot == NULL) {
                            $sessionmcnp->error = "Opération bien effectuée ... Voici votre Login et Mot de passe pour accéder à votre espace intégrateur : LOGIN :  ".$login."  MOT DE PASSE : ".$password;
		                 } else {
						    $sessionmcnp->error = "Opération bien effectuée ...";
						 }
						 $this->_redirect('/index/addoffreurprojetpre/param/'.$_POST['offreur_projet_type']);
						  
						 }
					   
				 }
           		   
	
	            } catch (Exception $exc) {
				  $db->rollback();
	              $this->view->param = $param;
				  $this->view->souscription_email  = $request->getParam("souscription_email");
				  $this->view->code_membre = $request->getParam("offreur_projet_membre");
                  $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                  return;
                }
	
	
	       }
	
	       $param = (int) $this->_request->getParam('param');
	       $this->view->param = $param;
	}
	
	
	public function calculeropiAction() {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $prk = Util_Utils::getParametre('OPI','prk');
	   $this->view->prk = $prk;
	   
	   $pck = Util_Utils::getParametre('pck','nr');
	   $this->view->pck = $pck;
	   
	   $tauxescompte = Util_Utils::getParametre('taux','escompte');
	   $this->view->tauxescompte = $tauxescompte;
	   
	   $serie = Util_Utils::getParametre('prc','nr');
	   $this->view->serie = $serie;

           $tpanupp = Util_Utils::getParametre('TPANU','PP');
	   $this->view->tpanupp = $tpanupp;
		
	   $bnpmpsfs = Util_Utils::getParametre('BNPMPSFS','valeur');
           $this->view->bnpmpsfs = $bnpmpsfs;

	
	}
	
	public function calculermsbcnrarAction() {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $prk = Util_Utils::getParametre('OPI','prk');
	   $this->view->prk = $prk;
	   
	   $pck = Util_Utils::getParametre('pck','nr');
	   $this->view->pck = $pck;
	   
	   $tauxescompte = Util_Utils::getParametre('taux','escompte');
	   $this->view->tauxescompte = $tauxescompte;
	   
	   $serie = Util_Utils::getParametre('prc','nr');
	   $this->view->serie = $serie;


           $tpanupp = Util_Utils::getParametre('TPANU','PP');
	   $this->view->tpanupp = $tpanupp;
		
	   $bnpmpsfs = Util_Utils::getParametre('BNPMPSFS','valeur');
           $this->view->bnpmpsfs = $bnpmpsfs;
	
	
	}
	
	
	public function calculernopiAction()  {
	    /* page administration/ -  */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		/*
            $tabela = new Application_Model_DbTable_EuSerieOpi();
	    $select = $tabela->select();
	    $select->from($tabela);
	    $series = $tabela->fetchAll($select);
	    $this->view->series = $series;
           */
        
	    $serie = Util_Utils::getParametre('prc','nr');
	    $this->view->serie = $serie;
        		
	}
   
   
    public function calculermsbcnrAction()   {
	    /* page administration/ -  */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	    $tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
	    $select->where('code_type_credit IN  (?)', array("IMM","AP","AG","PFS"));
	    //$select->where('code_type_credit <>  ?', "CNPGRE");
	    //$select->where('type_produit like  ?', "PS");
	    $select->order('lib_type_credit desc');
	    $select->from($tabela);
	    $prks = $tabela->fetchAll($select);
	    $this->view->prks = $prks;
		
	    $tauxescompte = Util_Utils::getParametre('taux','escompte');
	    $pck = Util_Utils::getParametre('pck','nr');
	    $this->view->tauxescompte = $tauxescompte;
	    $this->view->pck = $pck;     
	}
	
	
	public function calculerpjAction()   {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $tabela = new Application_Model_DbTable_EuTypeCredit();
	   $select = $tabela->select();
	   $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	   //$select->where('code_type_credit <>  ?', "CNPGRE");
	   //$select->where('type_produit like  ?', "PS");
	   $select->order('lib_type_credit desc');
	   $select->from($tabela);
	   $produits = $tabela->fetchAll($select);
	   $this->view->produits = $produits;
	   
	   $tauxescompte = Util_Utils::getParametre('taux','escompte');
	   $this->view->tauxescompte = $tauxescompte;
	   
	   $pck = Util_Utils::getParametre('pck','nr');
	   $this->view->pck = $pck;
	   
	   $prk = Util_Utils::getParametre('OPI','prk');
	   $this->view->prk = $prk;
	   
	   $serie = Util_Utils::getParametre('prc','nr');
	   $this->view->serie = $serie;
	}
	
	
	public function calculerpbpsAction() {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $tabela = new Application_Model_DbTable_EuTypeCredit();
	   $select = $tabela->select();
	   $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	   //$select->where('code_type_credit <>  ?', "CNPGRE");
	   //$select->where('type_produit like  ?', "PS");
	   $select->order('lib_type_credit desc');
	   $select->from($tabela);
	   $produits = $tabela->fetchAll($select);
	   $this->view->produits = $produits;
	   
	   $tauxescompte = Util_Utils::getParametre('taux','escompte');
	   $this->view->tauxescompte = $tauxescompte;
	   
	   $pck = Util_Utils::getParametre('pck','nr');
	   $this->view->pck = $pck;
	   
	   $prk = Util_Utils::getParametre('OPI','prk');
	   $this->view->prk = $prk;
	   
	   $serie = Util_Utils::getParametre('prc','nr');
	   $this->view->serie = $serie;
	}
	
	
	
	
	
	public function calculermsbcnrpreAction() {
	    /* page administration */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	       
	}
	
	
	public function calculermbcnrpreAction() {
	    /* page administration */
            $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    
	}
	
	public function calculermsbcfAction()  {
	  /* page administration/ -  */
          $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	  $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	  $tabela = new Application_Model_DbTable_EuCycleFormation();
	  $select = $tabela->select();
	  $select->order('id asc');
	  $select->from($tabela);
	  $formations = $tabela->fetchAll($select);
	   
	  $this->view->formations = $formations;
	}
	
	
	public function calculermbcfAction()  {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	    
	   $tabela = new Application_Model_DbTable_EuCycleFormation();
	   $select = $tabela->select();
	   $select->order('nom_cycle_formation asc');
	   $select->from($tabela);
	   $formations = $tabela->fetchAll($select); 
	   $this->view->formations = $formations;
	}
	
	
	
	 
	 
    public function calculermsbcrAction()  {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $tabela = new Application_Model_DbTable_EuTypeCredit();
	   $select = $tabela->select();
	   $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	   //$select->where('code_type_credit like  ?', "CNP"."%");
	   //$select->where('code_type_credit <>  ?', "CNPGRE");
	   //$select->where('code_type_credit <>  ?', "CNPSxSFSV");
	   //$select->where('type_produit like  ?', "PS");
	   $select->order('lib_type_credit desc');
	   $select->from($tabela);
	   $produits = $tabela->fetchAll($select);
	   $this->view->produits = $produits;
	   
	   $msbcripo = Util_Utils::getParametre('MSBCri','PO');
	   $msbcrips = Util_Utils::getParametre('MSBCri','PS');
	   $msbcrlpm = Util_Utils::getParametre('MSBCrl','PM');
	   $msbcrlpo = Util_Utils::getParametre('MSBCrl','PO');
	   $msbcrlps = Util_Utils::getParametre('MSBCrl','PS');
	   
	   $this->view->msbcripo = $msbcripo;
	   $this->view->msbcrips = $msbcrips;
	   $this->view->msbcrlpm = $msbcrlpm;
	   $this->view->msbcrlpo = $msbcrlpo;
	   $this->view->msbcrlps = $msbcrlps;
	   
	   
	   
    }
	
	
	public function calculermsbcrjAction() {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   $tabela = new Application_Model_DbTable_EuBps();
	   $select = $tabela->select();
	   $select->from($tabela);
	   $bpss = $tabela->fetchAll($select);

	   $this->view->bpss = $bpss;
	}
	 
	 
	public function calculermbcnrAction()   {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $tabela = new Application_Model_DbTable_EuTypeCredit();
	   $select = $tabela->select();
	   //$select->where('code_type_credit <>  ?', "CNPGRE");
	   //$select->where('type_produit like  ?', "PS");
	   //$select->order('lib_type_credit asc');
	   $select->where('code_type_credit IN  (?)', array("IMM","AP","AG","PFS"));
	   $select->order('lib_type_credit desc');
	   $select->from($tabela);
	   $prks = $tabela->fetchAll($select);
	   $this->view->prks = $prks;
	   
	   $tauxescompte = Util_Utils::getParametre('taux','escompte');
	   $pck = Util_Utils::getParametre('pck','nr');
	   $this->view->tauxescompte = $tauxescompte;
	   $this->view->pck = $pck;	 
	}
	
	public function calculermbcrjAction() {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $tabela = new Application_Model_DbTable_EuBps();
	   $select = $tabela->select();
	   $select->from($tabela);
	   $bpss = $tabela->fetchAll($select);

	   $this->view->bpss = $bpss; 
	}
	
	  
	public function calculermbcrAction()  {
	   /* page administration/ -  */
           $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	   $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $tabela = new Application_Model_DbTable_EuTypeCredit();
	   $select = $tabela->select();
	   //$select->where('code_type_credit like  ?', "CNP"."%");
	   //$select->where('code_type_credit <>  ?', "CNPGRE");
	   //$select->where('code_type_credit <>  ?', "CNPSxSFSV");
	   //$select->where('type_produit like  ?', "PS");
	   //$select->order('lib_type_credit asc');
	   $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	   $select->order('lib_type_credit desc');
	   $select->from($tabela);
	   $produits = $tabela->fetchAll($select);
	   $this->view->produits = $produits;
	   
	   $msbcripo = Util_Utils::getParametre('MSBCri','PO');
	   $msbcrips = Util_Utils::getParametre('MSBCri','PS');
	   $msbcrlpm = Util_Utils::getParametre('MSBCrl','PM');
	   $msbcrlpo = Util_Utils::getParametre('MSBCrl','PO');
	   $msbcrlps = Util_Utils::getParametre('MSBCrl','PS');
	   
	   $this->view->msbcripo = $msbcripo;
	   $this->view->msbcrips = $msbcrips;
	   $this->view->msbcrlpm = $msbcrlpm;
	   $this->view->msbcrlpo = $msbcrlpo;
	   $this->view->msbcrlps = $msbcrlps;
	 
	}
	
	
	
	
	
	public function calculermsbcmAction() {
	    /* page administration/ -  */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
	    $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	    //$select->where('code_type_credit like  ?', "CNP"."%");
	    //$select->where('code_type_credit <>  ?', "CNPGRE");
	    //$select->where('code_type_credit <>  ?', "CNPSxSFSV");
	    //$select->where('type_produit like  ?', "PS");
	    //$select->order('lib_type_credit asc');
	    $select->order('lib_type_credit desc');
	    $select->from($tabela);
	    $produits = $tabela->fetchAll($select);
	    $this->view->produits = $produits;
	   
	    $bnpmpo = Util_Utils::getParametre('BNPMPO','valeur');
	    $bnpmpofs = Util_Utils::getParametre('BNPMPOFS','valeur');
        $bnpmpsfs = Util_Utils::getParametre('BNPMPSFS','valeur');
        $bnpmps = Util_Utils::getParametre('BNPMPS','valeur');
	    $pck   = Util_Utils::getParametre('pck','r');
	    $tpanu    = Util_Utils::getParametre('TPANU','valeur');
        $tpanupm    = Util_Utils::getParametre('TPANU','PM');
	    $tpanupp    = Util_Utils::getParametre('TPANU','PP');
		
		$caps = Util_Utils::getParametre('CAPS','valeur');
		$mmat = Util_Utils::getParametre('MMAT','valeur');
		$mbc = Util_Utils::getParametre('MBC','valeur');
		$mass = Util_Utils::getParametre('MASS','valeur');
		$mdeposit = Util_Utils::getParametre('MDEPOSIT','valeur');
		$mci = Util_Utils::getParametre('MCI','valeur');
		$msbcrips = Util_Utils::getParametre('MSBCri','PS');

        $this->view->bnpmpo = $bnpmpo;
	    $this->view->bnpmpofs = $bnpmpofs;
        $this->view->bnpmpsfs = $bnpmpsfs;
        $this->view->bnpmps = $bnpmps;
        $this->view->pck = $pck;
        $this->view->tpanu = $tpanu;
        $this->view->tpanupm = $tpanupm;
	    $this->view->tpanupp = $tpanupp;
		$this->view->caps = $caps;
		$this->view->mmat = $mmat;
		$this->view->mbc = $mbc;
		$this->view->mass = $mass;
		$this->view->mdeposit = $mdeposit;
		$this->view->mci = $mci;
		$this->view->msbcrips = $msbcrips;
	   
	}
	
	
	
	
	
	
	
	public function calculermbcnmAction() {
	    /* page administration/ -  */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
	    //$select->where('code_type_credit like  ?', "CNP"."%");
	    //$select->where('code_type_credit <>  ?', "CNPGRE");
	    //$select->where('code_type_credit <>  ?', "CNPSxSFSV");
	    //$select->where('type_produit like  ?', "PS");
	    //$select->order('lib_type_credit asc');
	    $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	    $select->order('lib_type_credit desc');
	    $select->from($tabela);
	    $produits = $tabela->fetchAll($select);
	    $this->view->produits = $produits;
	   
	    $bnpnmpo = Util_Utils::getParametre('BNPNMPO','valeur');
	    $bnpnmpofs = Util_Utils::getParametre('BNPNMPOFS','valeur');
        $bnpnmpsfs = Util_Utils::getParametre('BNPNMPSFS','valeur');
        $bnpnmps = Util_Utils::getParametre('BNPNMPS','valeur');
	    $pck   = Util_Utils::getParametre('pck','r');
		
		$caps = Util_Utils::getParametre('CAPS','valeur');
		$mmat = Util_Utils::getParametre('MMAT','valeur');
		$mbc = Util_Utils::getParametre('MBC','valeur');
		$mass = Util_Utils::getParametre('MASS','valeur');
		$mdeposit = Util_Utils::getParametre('MDEPOSIT','valeur');
		$mci = Util_Utils::getParametre('MCI','valeur');
		$msbcrips = Util_Utils::getParametre('MSBCri','PS');

        $this->view->bnpnmpo = $bnpnmpo;
	    $this->view->bnpnmpofs = $bnpnmpofs;
        $this->view->bnpnmpsfs = $bnpnmpsfs;
        $this->view->bnpnmps = $bnpnmps;
	    $this->view->pck     = $pck;
		
		$this->view->caps = $caps;
		$this->view->mmat = $mmat;
		$this->view->mbc = $mbc;
		$this->view->mass = $mass;
		$this->view->mdeposit = $mdeposit;
		$this->view->mci = $mci;
		$this->view->msbcrips = $msbcrips;
	
	}
	
	
	public function calculermbcmAction() {
	    /* page administration/ -  */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
	    $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	    $select->order('lib_type_credit desc');
	    $select->from($tabela);
	    $produits = $tabela->fetchAll($select);
	    $this->view->produits = $produits;
	   
	    $bnpmpo = Util_Utils::getParametre('BNPMPO','valeur');
	    $bnpmpofs = Util_Utils::getParametre('BNPMPOFS','valeur');
        $bnpmpsfs = Util_Utils::getParametre('BNPMPSFS','valeur');
        $bnpmps = Util_Utils::getParametre('BNPMPS','valeur');
	    $pck      = Util_Utils::getParametre('pck','r');
	    $tpanu    = Util_Utils::getParametre('TPANU','valeur');
        $tpanupm    = Util_Utils::getParametre('TPANU','PM');
	    $tpanupp    = Util_Utils::getParametre('TPANU','PP');
		
		$caps = Util_Utils::getParametre('CAPS','valeur');
		$mmat = Util_Utils::getParametre('MMAT','valeur');
		$mbc = Util_Utils::getParametre('MBC','valeur');
		$mass = Util_Utils::getParametre('MASS','valeur');
		$mdeposit = Util_Utils::getParametre('MDEPOSIT','valeur');
		$mci = Util_Utils::getParametre('MCI','valeur');
		$msbcrips = Util_Utils::getParametre('MSBCri','PS');

        $this->view->bnpmpo = $bnpmpo;
	    $this->view->bnpmpofs = $bnpmpofs;
        $this->view->bnpmpsfs = $bnpmpsfs;
        $this->view->bnpmps = $bnpmps;
        $this->view->pck  = $pck;
        $this->view->tpanu = $tpanu;
        $this->view->tpanupm = $tpanupm;
        $this->view->tpanupp = $tpanupp;

        $this->view->caps = $caps;
		$this->view->mmat = $mmat;
		$this->view->mbc = $mbc;
		$this->view->mass = $mass;
		$this->view->mdeposit = $mdeposit;
		$this->view->mci = $mci;
		$this->view->msbcrips = $msbcrips;
		
	}



    public function calculermbcbpsAction() {

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

        $bnpmpo = Util_Utils::getParametre('BNPMPO','valeur');
	    $bnpmpofs = Util_Utils::getParametre('BNPMPOFS','valeur');
        $bnpmpsfs = Util_Utils::getParametre('BNPMPSFS','valeur');
        $bnpmps = Util_Utils::getParametre('BNPMPS','valeur');
	    $pck = Util_Utils::getParametre('pck','r');
	    $tpanu = Util_Utils::getParametre('TPANU','valeur');
        $tpanupm = Util_Utils::getParametre('TPANU','PM');
	    $tpanupp = Util_Utils::getParametre('TPANU','PP');
		
		
		$caps = Util_Utils::getParametre('CAPS','valeur');
		$mmat = Util_Utils::getParametre('MMAT','valeur');
		$mbc = Util_Utils::getParametre('MBC','valeur');
		$mass = Util_Utils::getParametre('MASS','valeur');
		$mdeposit = Util_Utils::getParametre('MDEPOSIT','valeur');
		$mci = Util_Utils::getParametre('MCI','valeur');
		$msbcrips = Util_Utils::getParametre('MSBCri','PS');

        $this->view->bnpmpo = $bnpmpo;
	    $this->view->bnpmpofs = $bnpmpofs;
        $this->view->bnpmpsfs = $bnpmpsfs;
        $this->view->bnpmps = $bnpmps;
        $this->view->pck  = $pck;
        $this->view->tpanu = $tpanu;
        $this->view->tpanupm    = $tpanupm;
        $this->view->tpanupp    = $tpanupp;
		
		$this->view->caps = $caps;
		$this->view->mmat = $mmat;
		$this->view->mbc = $mbc;
		$this->view->mass = $mass;
		$this->view->mdeposit = $mdeposit;
		$this->view->mci = $mci;
		$this->view->msbcrips = $msbcrips;
		
    }
        

	
	public function calculermsbcnmAction() {
	    /* page administration/ -  */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	    $tabela = new Application_Model_DbTable_EuTypeCredit();
	    $select = $tabela->select();
	    $select->where('code_type_credit IN  (?)', array("IMM","AP","PFS"));
	    $select->order('lib_type_credit desc');
	    $select->from($tabela);
	    $produits = $tabela->fetchAll($select);
	    $this->view->produits = $produits;
	   
	    $bnpnmpo = Util_Utils::getParametre('BNPNMPO','valeur');
	    $bnpnmpofs = Util_Utils::getParametre('BNPNMPOFS','valeur');
        $bnpnmpsfs = Util_Utils::getParametre('BNPNMPSFS','valeur');
        $bnpnmps = Util_Utils::getParametre('BNPNMPS','valeur');
	    $pck       = Util_Utils::getParametre('pck','r');
		
		$caps = Util_Utils::getParametre('CAPS','valeur');
		$mmat = Util_Utils::getParametre('MMAT','valeur');
		$mbc = Util_Utils::getParametre('MBC','valeur');
		$mass = Util_Utils::getParametre('MASS','valeur');
		$mdeposit = Util_Utils::getParametre('MDEPOSIT','valeur');
		$mci = Util_Utils::getParametre('MCI','valeur');
		$msbcrips = Util_Utils::getParametre('MSBCri','PS');

        $this->view->bnpnmpo = $bnpnmpo;
	    $this->view->bnpnmpofs = $bnpnmpofs;
        $this->view->bnpnmpsfs = $bnpnmpsfs;
        $this->view->bnpnmps = $bnpnmps;
	    $this->view->pck  = $pck;
		
		$this->view->caps = $caps;
		$this->view->mmat = $mmat;
		$this->view->mbc = $mbc;
		$this->view->mass = $mass;
		$this->view->mdeposit = $mdeposit;
		$this->view->mci = $mci;
		$this->view->msbcrips = $msbcrips;
		
		
	}
	
	
	
   
    public function addoffreurprojetquittanceAction() {  
	       /* page administration/addoffreurprojet - Ajout d'une offreurprojet */
	       $sessionmcnp = new Zend_Session_Namespace('mcnp');
		   //$this->_helper->layout->disableLayout();
 		   $this->_helper->layout()->setLayout('layoutpublicesmc');
 		   $t_canton = new Application_Model_DbTable_EuCanton();
           $m_ville = new Application_Model_EuVilleMapper ();
		   $m_filiere = new Application_Model_EuFiliereMapper();
           $cantons = $t_canton->fetchAll();
           $villes = $m_ville->fetchAll();
		   $filieres = $m_filiere->fetchAll();
           $this->view->cantons = $cantons;
           $this->view->villes = $villes;
		   $this->view->filieres = $filieres;
		   $request = $this->getRequest ();
		   if ($request->isPost ()) {
		       if (isset($_POST['offreur_projet_souscription_ordre0']) && $_POST['offreur_projet_souscription_ordre0']!="" 
			        && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" 
			        && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!="" 
			        && isset($_POST['offreur_projet_membre']) && $_POST['offreur_projet_membre']!="" 
			        && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!=""  
			        && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!="" 
			        && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!="" 
			        && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation'] == 1) {
				  
				    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
				    try {
					    $membremorale = new Application_Model_EuMembreMorale();
	                    $m_mapmorale  = new Application_Model_EuMembreMoraleMapper();
						$m_souscription2 = new Application_Model_EuSouscriptionMapper();
						$souscription3 = new Application_Model_EuSouscription();
                        $m_souscription3 = new Application_Model_EuSouscriptionMapper();
						
						$compte = new Application_Model_EuCompte();
                        $map_compte = new Application_Model_EuCompteMapper();
			
			            $contrat = new Application_Model_EuContrat();
                        $map_contrat = new Application_Model_EuContratMapper();
						
						$id_type_acteur = "";
			            $id_type_creneau = "";
						
				        $param = (int)$this->_request->getParam('param');
						$nombre_compte = 0;
					    $cpte = $_POST['cpteur'];
					   
					    $findmembre = $m_mapmorale->find($_POST['offreur_projet_membre'],$membremorale);
					    if($findmembre == false) {
					       $db->rollback();
	                       $this->view->param = $param;
						   $this->view->souscription_email  = $_POST['souscription_email'];
						   $this->view->code_membre = $_POST['offreur_projet_membre'];
					       $sessionmcnp->error = "Le numero du membre offreur de projet est introuvable ...";
					       return;
					    }
						
						//--- Début de l'opération de mise sur chaine ---
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
                        $date_idd = clone $date_id;
						$code = $_POST['offreur_projet_membre'];
						$m_acteur = new Application_Model_EuActeurMapper();
						$findacteur = $m_acteur->findByActeur($code);
						
						if($findacteur == false) {
						   $id_filiere = $_POST['offreur_projet_filiere'];
						   $code_agence = substr($code,0,12);
				           $table = new Application_Model_DbTable_EuActeur();
                           $selection = $table->select();
                           $selection->where('code_membre like ?',$code_agence.'%');
                           $selection->where('type_acteur like ?','gac_surveillance');
                           $resultat = $table->fetchAll($selection);
                           $trouvacteursur = $resultat->current();
                           $code_acteur = $trouvacteursur->code_acteur;
                           $acteur  =  $code_acteur;

						   if(($param == 1) || ($param == 4) || ($param == 7)) {
						      $id_type_acteur = 1;
						   }
						   if(($param == 2) || ($param == 5) || ($param == 8)) {
						      $id_type_acteur = 2;
						   }
						   if(($param == 3) || ($param == 6) || ($param == 9)) {
						      $id_type_acteur = 3;
						   }
						
						   if(($param == 1) || ($param == 2) || ($param == 3)) {
						      $id_type_creneau = 3;
						   }
						   if(($param == 4) || ($param == 5) || ($param == 6)) {
						      $id_type_creneau = 2;
						   }
						   if(($param == 7) || ($param == 8) || ($param == 9)) {
						     $id_type_creneau = 1;
						   }
						
						   // insertion dans la table eu_acteur_creneau
                           $cm    = new Application_Model_EuActeurCreneauMapper();
                           $acren = new Application_Model_EuActeurCreneau();
				           $rep_mapper = new Application_Model_EuRepresentationMapper();
				           $rep = $rep_mapper->findbyrep($code);
						
						   $acren->setNom_acteur($membremorale->getRaison_sociale());
                           $acren->setCode_membre($code);
                           $acren->setId_type_acteur($id_type_acteur);
              
                           $acren->setCode_membre_gestionnaire($rep->getCode_membre());
                           $acren->setDate_creation($date_idd->toString('yyyy-MM-dd'));
                           $acren->setId_utilisateur(null);
                           $acren->setGroupe(null);
                           $acren->setCode_creneau(NULL);
                           $acren->setCode_gac_filiere(NULL);
                           $acren->setCode_gac(NULL);
                
				           $code_zone =  substr($membremorale->getCode_agence(),0,3);
                           $code_acteur = $cm->getLastActeurByCrenau($code_zone);
                           if ($code_acteur == NULL) {
                               $code_acteur = 'A' . $code_zone . '0001';
                           } else {
                               $num_ordre = substr($code_acteur, -4);
                               $num_ordre++;
                               $code_acteur = 'A' . $code_zone . str_pad($num_ordre, 4, 0, STR_PAD_LEFT);
                           }
						
                           $acren->setCode_acteur($code_acteur);
                           $acren->setId_filiere($id_filiere);
                           $cm->save($acren);
						
						   // Insertion dans la table eu_acteur
				           $t_acteur = new Application_Model_DbTable_EuActeur();
				           $c_acteur = new Application_Model_EuActeur();
                           $table = new Application_Model_DbTable_EuActeur();
                           $select = $table->select();
                           $select->where('code_acteur like ?',$acteur);
                           $resultSet = $table->fetchAll($select);
                           $ligneacteur = $resultSet->current();
                           $count = $c_acteur->findConuter() + 1;
						
						   // Mise à jour des tables
				           $filiere =  new Application_Model_EuFiliere();
                           $map_filiere = new Application_Model_EuFiliereMapper();
                           $find_filiere = $map_filiere->find($id_filiere,$filiere);
					
				           $c_acteur->setId_acteur($count)
                                 ->setCode_acteur(NULL)
                                 ->setCode_division($filiere->getCode_division())
                                 ->setCode_membre($code)
                                 ->setId_utilisateur(NULL)
                                 ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
				        if($id_type_acteur == 3) {
					        $c_acteur->setCode_activite('detaillant');
			            } else if($id_type_acteur == 2) {
					        $c_acteur->setCode_activite('semi-grossiste');
			            } else if($id_type_acteur == 1) {
					        $c_acteur->setCode_activite('grossiste');
				        }
						
			            $c_acteur->setCode_source_create($ligneacteur->code_source_create);
                        $c_acteur->setCode_monde_create($ligneacteur->code_monde_create);
                        $c_acteur->setCode_zone_create($ligneacteur->code_zone_create);
                        $c_acteur->setId_pays($ligneacteur->id_pays);
                        $c_acteur->setId_region($ligneacteur->id_region);
                        $c_acteur->setCode_secteur_create($ligneacteur->code_secteur_create);
                        $c_acteur->setCode_agence_create($ligneacteur->code_agence_create);
                        $c_acteur->setType_acteur('DSMS');
                    
                        $c_acteur->setCode_gac_chaine($acteur);
                        $t_acteur->insert($c_acteur->toArray());
						
						// Mise à jour de la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
				        $trouveuser = false;
				        $code_type_acteur = $membremorale->getCode_type_acteur();
				
				        $finduser = $user_mapper->findByMembre($code,"personne_morale");
				        if($finduser != false) {
				           $trouveuser = $user_mapper->find($finduser->id_utilisateur,$userin);
				        }
						
						if($trouveuser) {
				           if($id_type_acteur == 3 && $code_type_acteur == 'EI') {
                              $userin->setCode_groupe('oe_detaillant');
                              $userin->setCode_gac_filiere('oe_detaillant');
                              $userin->setCode_groupe_create('oe_detaillant');
                           } 
                           elseif($id_type_acteur == 3 && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_detaillant');
                             $userin->setCode_gac_filiere('ose_detaillant');
                             $userin->setCode_groupe_create('ose_detaillant');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_semi_grossiste');
                          } elseif($id_type_acteur == 2  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_semi_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_semi_grossiste');
                          } 
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'EI') {
                             $userin->setCode_groupe('oe_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('oe_grossiste');
                          }
                          elseif($id_type_acteur == 1  && $code_type_acteur == 'OSE') {
                             $userin->setCode_groupe('ose_grossiste');
                             $userin->setCode_gac_filiere(NULL);
                             $userin->setCode_groupe_create('ose_grossiste');
                         }
				         $userin->setId_filiere($id_filiere);
                         $user_mapper->update($userin);
				
				       }
						
					   // Mise à jour de la table eu_membre_morale
				       $membremorale->setId_filiere($id_filiere);
				       $m_mapmorale->update($membremorale);
					   
					   // Recuperation de la PRK nr
                       $params = new Application_Model_EuParametresMapper();
                       $par = new Application_Model_EuParametres();
                       $prc = 0;
                       $par_prc = $params->find('prc','nr',$par);
                       if ($par_prc == true) {
                           $prc = $par->getMontant();
                       } 
            
                       $te_mapper = new Application_Model_EuTegcMapper();
                       $te = new Application_Model_EuTegc();
                       $code_te = 'TEGCP' .$id_filiere. $code;
                       $find_te = $te_mapper->find($code_te,$te);
                       if ($find_te == false) {
                           $te->setCode_tegc($code_te)
                              ->setId_filiere($id_filiere)
                              ->setMdv($prc)
                              ->setCode_membre($code)
                              ->setMontant(0)
                              ->setMontant_utilise(0)
                              ->setSolde_tegc(0);
                           $te_mapper->save($te);
                       } else {
                           $te->setId_filiere($id_filiere);
                           $te->setMdv($prc);
                           $te_mapper->update($te);
                       }
				
				       $code_compte = 'NB-TPAGCP-'.$code;
				       $res = $map_compte->find($code_compte,$compte);
				
				       if(!$res) {
                          $compte->setCode_cat('TPAGCP')
                                 ->setCode_compte($code_compte)
                                 ->setCode_membre(NULL)
                                 ->setCode_membre_morale($code)
                                 ->setCode_type_compte('NB')
                                 ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                 ->setDesactiver(0)
                                 ->setLib_compte('TPAGCP')
                                 ->setSolde(0);
                          $map_compte->save($compte); 
                      }
				
				      $code_comptets = 'NB-TSGCP-'.$code;
				      $rests = $map_compte->find($code_comptets,$compte);
				
				      if(!$rests) {
                         $compte->setCode_cat('TSGCP')
                                ->setCode_compte($code_comptets)
                                ->setCode_membre(NULL)
                                ->setCode_membre_morale($code)
                                ->setCode_type_compte('NB')
                                ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                ->setDesactiver(0)
                                ->setLib_compte('TSGCP')
                                ->setSolde(0);
                         $map_compte->save($compte); 
                     }
				
                    // Mise à jour de la table eu_contrat
				    $findcontrat = $map_contrat->findByMembre($code);
				    $trouvecontrat = $map_contrat->find($findcontrat->id_contrat,$contrat);
				    $contrat->setId_type_creneau($id_type_creneau);
				    $contrat->setId_type_acteur($id_type_acteur);
				    $map_contrat->update($contrat);
					   
					}   
					//--- Fin de l'opération de mise sur chaine --- 
						
						
						
					    for($i = 0 ; $i <  $_POST['cpteur'] ; $i++)   {
				            $numero_quittance = $_POST['offreur_projet_souscription_ordre'.$i];
					        $j = $i + 1;
					        if($cpte > 1) {
					           while($j < $cpte) {
						             $num_quittance = $_POST['offreur_projet_souscription_ordre'.$j];
							         if($numero_quittance == $num_quittance) {  
							            $db->rollback();
					                    $this->view->param = $param;
								        $this->view->souscription_email  = $_POST['souscription_email'];
								        $this->view->code_membre = $_POST['offreur_projet_membre'];
		                                $sessionmcnp->error = "Numéro de quittance  ".$numero_quittance." saisi plusieurs fois ...";
					                    return;
							         }
							         $j++;
						       }
					       }
				       }
					   
					   for($i = 0 ; $i <  $_POST['cpteur'] ; $i++) {
		                   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'. $i]);
						   if($souscription_id == NULL) {
							  $db->rollback();
						      $this->view->param = $param;
							  $this->view->souscription_email  = $_POST['souscription_email'];
							  $this->view->code_membre = $_POST['offreur_projet_membre'];
		                      $sessionmcnp->error = "Numéro de quittance ".$_POST['offreur_projet_souscription_ordre'.$i]."  est  invalide ...";
							  //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                              return;
		                    }  
					    }
						
						if(count($_POST['cpteur']) > 1)  {
							$id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre0']);
							$m_souscription3->find($id,$souscription3);
							$souscription_souscription = $souscription3->souscription_souscription;
							for($i = 1; $i < $_POST['cpteur']; $i++)  {
							    $id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
								$m_souscription3->find($id,$souscription3);	
								if($souscription_souscription != $souscription3->souscription_souscription) {
								   $db->rollback();
								   $this->view->param = $param;
								   $this->view->souscription_email  = $_POST['souscription_email'];
								   $this->view->code_membre = $_POST['offreur_projet_membre'];
		                           $sessionmcnp->error = "Les numéros quittances doivent appartenir au même souscripteur !!! ";
							       //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                                   return;
								  }    
							}	   
						}
						  
						$m_offreur_projet2 = new Application_Model_EuOffreurProjetMapper();
						$m_detail_offreur2 = new Application_Model_EuDetailOffreurProjetMapper();
						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $offreur2        = $m_offreur_projet2->fetchAllBySouscription($souscription_id);
						   $detailoffreur2  = $m_detail_offreur2->fetchAllBySouscription($souscription_id);
						   if(count($offreur2) > 0  || count($detailoffreur2) > 0) {
						     $db->rollback();
							 $this->view->param = $param;
							 $this->view->souscription_email = $_POST['souscription_email'];
							 $this->view->code_membre = $_POST['offreur_projet_membre'];
		                     $sessionmcnp->error = "Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]." est  déjà  utilisé ...";
							 //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                             return;
	                       }
						}
						
						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   $offreur2    = $m_offreur_projet2->fetchAllBySouscription($souscription3->souscription_souscription);
						   $detailoffreur2    = $m_detail_offreur2->fetchAllBySouscription($souscription3->souscription_souscription);
						   if((count($offreur2) > 0  || count($detailoffreur2) > 0)) {
							 $db->rollback();
							 $this->view->param = $param;
							 $this->view->souscription_email = $_POST['souscription_email'];
							 $this->view->code_membre = $_POST['offreur_projet_membre'];      
		                     $sessionmcnp->error = "Veuillez plutôt faire un complément avec le numéro quittance  ".$_POST['offreur_projet_souscription_ordre'.$i];
							 //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                             return;
	                       }
						}
						
						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   if(($souscription3->souscription_type_candidat != 6 && $souscription3->souscription_type_candidat != 7)) {
						       $db->rollback();
							   $this->view->param = $param;
							   $this->view->souscription_email = $_POST['souscription_email'];
							   $this->view->code_membre = $_POST['offreur_projet_membre'];      
						       $sessionmcnp->error = "Numéro de quittance  ".$_POST['offreur_projet_souscription_ordre'.$i]." doit être celui d'un CMFH Offreur de projet ou d'un Offreur de BPS ...";
						       return;
						   }
						}
						
						
						for($i = 0; $i < $_POST['cpteur']; $i++)   {
						   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
						   $m_souscription3->find($souscription_id,$souscription3);
						   $nombre_compte = $nombre_compte + $souscription3->souscription_nombre;
                           $souscription3->setSouscription_email($_POST["souscription_email"]);
                           $m_souscription3->update($souscription3);						     
					    }
						
						if($nombre_compte >= 100)   {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                            $a = new Application_Model_EuOffreurProjet();
                            $ma = new Application_Model_EuOffreurProjetMapper();
						   
						    $compteur = $ma->findConuter() + 1;
						    $id_souscription = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre0']);
                            $a->setOffreur_projet_id($compteur);
                            $a->setOffreur_projet_type($_POST['offreur_projet_type']);
                            $a->setOffreur_projet_souscription($id_souscription);
                            $a->setOffreur_projet_raison_sociale($membremorale->getRaison_sociale());
						    $a->setOffreur_projet_code_membre($_POST['offreur_projet_membre']);
                            $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
                            $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
                            $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
							if($param >= 4) {
	                           $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
                            }
							
							$a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
                            $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
                            $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
                            $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
                            $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
                            $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
                            $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
                            $a->setOffreur_projet_membreasso(0);/*$sessionmembreasso->membreasso_id*/
                            $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
                            $a->setOffreurProjetCanton($_POST['offreur_projet_canton']);
                            $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			                $a->setPublier($_POST['publier']);
                            $ma->save($a);
							
							////////////////////////////////////////////////////////////////////////////
                            $offreur_projet = new Application_Model_EuOffreurProjet();
                            $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
                            $offreur_projetM->find($compteur, $offreur_projet);
		
                            $offreur_projet->setPublier(1);
		                    $offreur_projetM->update($offreur_projet);
							
							$id_offreur_projet = $offreur_projet->offreur_projet_id;
							$detailoffreur = new Application_Model_EuDetailOffreurProjet();
                            $m_detailoffreur = new Application_Model_EuDetailOffreurProjetMapper();
							
							for($i = 0; $i < $_POST['cpteur']; $i++) {
							   $souscription_id = $m_souscription2->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
							   $cpte = $m_detailoffreur->findConuter() + 1;
							   $detailoffreur->setId_detail_offreur_projet($cpte);
							   $detailoffreur->setOffreur_projet_id($id_offreur_projet);
							   $detailoffreur->setSouscription_id($souscription_id);
							   $detailoffreur->setDate_detail_offreur_projet($date_id->toString('yyyy-MM-dd'));
							   $m_detailoffreur->save($detailoffreur);
							}
							
							/////////////////////////////////////////////////////////////////////////////////////////
							$code_agence = "";
							if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0) {
							   $membreasso = new Application_Model_EuMembreasso();
                               $m_membreasso = new Application_Model_EuMembreassoMapper();
		                       $m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);
			
                               $association = new Application_Model_EuAssociation();
                               $m_association = new Application_Model_EuAssociationMapper();
		                       $m_association->find($membreasso->membreasso_association, $association);
		                       $code_agence = $association->code_agence;
							}
							
							$eusouscription = new Application_Model_EuSouscription();
		                    $souscriptionM = new Application_Model_EuSouscriptionMapper();
							   
							$date = new Zend_Date();
		                    $compte_map = new Application_Model_EuCompteMapper();
                            $compte      = new Application_Model_EuCompte();
			                $sms_money   = new Application_Model_EuSmsmoney();
                            $money_map   = new Application_Model_EuSmsmoneyMapper();
			
			                $det_sms   = new Application_Model_EuDetailSmsmoney();
			                $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
			
			                $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
			                $det_vtesms  = new Application_Model_EuDetailVentesms();
							   
							// insertion dans la table eu_depot_vente
				            $m_dvente = new Application_Model_EuDepotVenteMapper();
				            $dvente = new Application_Model_EuDepotVente();
							   
							$fcaps = Util_Utils::getParametre('CAPS','valeur');

		                    $membre_pbf = '0000000000000000001M';
	                        $code_compte_pbf = "NN-TR-".$membre_pbf;
			                $ret = $compte_map->find($code_compte_pbf,$compte);
							
							for($i = 0; $i < $_POST['cpteur']; $i++) {
							   $souscription_id = $souscriptionM->findIdSouscription($_POST['offreur_projet_souscription_ordre'.$i]);
							   $finddepot = $m_dvente->findbysouscriptionmembre($souscription_id);
							   if($finddepot == NULL) {
							      $souscriptionM->find($souscription_id,$eusouscription);
								  $mobile = $eusouscription->souscription_mobile;
                                  if($eusouscription->souscription_programme == 'CMFH')   {
                                     $codefcaps   = strtoupper(Util_Utils::genererCodeSMS(8));
			                         if($eusouscription->souscription_autonome == 1) {   
			                            $nbre_compte = $eusouscription->souscription_nombre - 1; 
			                         } else {
				                        $nbre_compte = $eusouscription->souscription_nombre;
				                     }
									 $montant = $nbre_compte * $fcaps;
									 // Traitement des produits CAPS
				                     $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
									 if ($lignesdetfcaps != null) {
									     $nengfcaps = $money_map->findConuter() + 1;
                                         $sms_money->setNEng($nengfcaps)
                	                               ->setCode_Agence(null)
                                                   ->setCreditAmount($montant)
                                                   ->setSentTo($mobile)
                                                   ->setMotif('CAPS')
                                                   ->setId_Utilisateur(null)
                                                   ->setCurrencyCode('XOF')
                                                   ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setFromAccount($code_compte_pbf)
                                                   ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                   ->setCreditCode($codefcaps)
                                                   ->setDestAccount(null)
                                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                                   ->setDestAccount_Consumed($souscription_id)
                                                   ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                                   ->setNum_recu(null);
                                           $money_map->save($sms_money);
										   
										   // Mise à jour du compte de transfert
				                           if($ret) {
			                                 // Mise à jour du compte de transfert
				                             $compte->setSolde($compte->getSolde() - $montant);
                                             $compte_map->update($compte);    
	                                       } else {
			                                 $db->rollback();
	                                         $this->view->param = $param;
											 $this->view->souscription_email  = $_POST['souscription_email'];
								             $this->view->code_membre = $_POST['offreur_projet_membre'];
			                                 $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable';
											 //$this->_redirect('/index/addintegrateur/param/'.$param);
                                             return;			   
			                               }
										   
										   $l = 0;
					                       $reste = $montant;
					                       $nbre_lignesdetfcaps = count($lignesdetfcaps);
										   while ($reste > 0 && $l < $nbre_lignesdetfcaps) {
										       $lignedetfcaps = $lignesdetfcaps[$l];
                                               $id = $lignedetfcaps->getId_detail_smsmoney();
						                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
											   if ($reste >= $lignedetfcaps->getSolde_sms()) {
						                          //Mise à jour  des lignes d'enrégistrement
                                                  $reste = $reste - $lignedetfcaps->getSolde_sms();
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
							                       $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
		                                                         ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
		                                                         ->setSolde_sms(0);
                                                   $det_sms_m->update($lignedetfcaps);

													  
						                         } else {
												   //Mise à jour  des lignes d'enrégistrement
												  //insertion dans la table eu_detailventesms
						                          $id_detail_vtsms = $det_vtesms->findConuter() + 1;	
				                                  $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
						                                     ->setId_detail_smsmoney($id)
                                                             ->setCode_membre_dist($membre_pbf)
                                                             ->setCode_membre(null)
                                                             ->setType_tansfert('CAPS')
                                                             ->setCreditcode($codefcaps)
                                                             ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                             ->setMont_vente($reste)
                                                             ->setId_utilisateur(null)
                                                             ->setCode_produit('CAPS');
                                                   $det_vte_sms->insert($det_vtesms->toArray());
															
                                                   $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
						                           $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
							                       $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                                   $det_sms_m->update($lignedetfcaps);
						                           $reste = 0;
												}
										        $l++;
										   }
									 
									 } else  {
				                       $db->rollback();
	                                   $this->view->param = $param;
									   $this->view->souscription_email  = $_POST['souscription_email'];
								       $this->view->code_membre = $_POST['offreur_projet_membre'];
			                           $sessionmcnp->error = 'Le solde du compte CAPS est null';
		                               //$this->_redirect('/index/addintegrateur/param/'.$param);
                                       return;
				                    }
									
									$countdvente = $m_dvente->findConuter() + 1;
				                    $dvente->setId_depot($countdvente)
					                       ->setDate_depot($date->toString('yyyy-MM-dd HH:mm:ss'));		   
				                    $dvente->setCode_membre($_POST['offreur_projet_membre']);   
			                        $dvente->setCode_produit('CAPS');
				                    $dvente->setMont_depot($montant);
				                    $dvente->setMont_vendu(0);
				                    $dvente->setSolde_depot($montant);
				                    $dvente->setId_utilisateur(null);
				                    $dvente->setType_depot('AvecListe');
				                    $dvente->setSouscription_id($souscription_id);
				                    $m_dvente->save($dvente);
									   
									$compteur = Util_Utils::findConuter() + 1;
				                    Util_Utils::addSms($compteur,$mobile,'Vous avez la reponse de votre souscription a '.$nbre_compte.' comptes marchands ESMC. Veuillez consultez votre email');
								
								    include("automatisation.php");
								    codegenerer($souscription_id);
									
                                  }								  
								   
							   } else {
							         $m_dvente->find($finddepot->id_depot,$dvente);
							         $dvente->setCode_membre($_POST['offreur_projet_membre']);
									 $m_dvente->update($dvente);
									 
									 include("automatisation.php");
								     recupcodegenerer($souscription_id);
							   }
							
                            }

                            $souscription = new Application_Model_EuSouscription();
                            $m_souscription = new Application_Model_EuSouscriptionMapper();
		                    $m_souscription->find($offreur_projet->offreur_projet_souscription,$souscription);
							   
							$date_id = Zend_Date::now();

                            $association = new Application_Model_EuAssociation();
                            $association_mapper = new Application_Model_EuAssociationMapper();
			
                            $compteur_association = $association_mapper->findConuter() + 1;
                            $association->setAssociation_id($compteur_association);
                            $association->setAssociation_mobile($souscription->souscription_mobile);
                            $association->setAssociation_nom($souscription->souscription_raison);
                            $association->setAssociation_numero($compteur_association."INT");
                            $association->setAssociation_date_agrement($date_id->toString('yyyy-MM-dd'));
                            $association->setAssociation_email($souscription->souscription_email);
                            $association->setAssociation_recepisse(NULL);
                            $association->setAssociation_adresse($souscription->souscription_quartier." - ".$souscription->souscription_ville);
                            $association->setAssociation_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $association->setId_filiere(NULL);
                            $association->setCode_type_acteur(NULL);
                            $association->setCode_statut(NULL);
                            $association->setCode_agence($code_agence);
                            $association->setPublier(1);
                            $association_mapper->save($association);
							   
							$date_id = Zend_Date::now();

                            $membreasso = new Application_Model_EuMembreasso();
                            $membreasso_mapper = new Application_Model_EuMembreassoMapper();
							$login = "";
							$password = "";
			                    
							if(($souscription->souscription_login == NULL) or ($souscription->souscription_login == '')) {
							   //$liste = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                               $login = "";
                               while(strlen($login) != 8) {
                                  $login .= $liste[rand(0,61)]; 
                               }
							   $password = $login.$login;
									 
							} else {
							   $login = $souscription->souscription_login;
							   $password = $souscription->souscription_passe;
							}
			
                             $compteur_membreasso = $membreasso_mapper->findConuter() + 1;
                             $membreasso->setMembreasso_id($compteur_membreasso);
                             $membreasso->setMembreasso_mobile($souscription->souscription_mobile);
                             $membreasso->setMembreasso_nom($souscription->souscription_raison);
                             $membreasso->setMembreasso_prenom(null);
                             $membreasso->setMembreasso_association($compteur_association);
                             $membreasso->setMembreasso_email($souscription->souscription_email);
                             $membreasso->setMembreasso_login($login);
                             $membreasso->setMembreasso_passe($password);
                             $membreasso->setMembreasso_type(1);
                             $membreasso->setMembreasso_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $membreasso->setPublier(1);
							 $membreasso->setSouscription_id($souscription->souscription_id);
                             $membreasso_mapper->save($membreasso);
							   
							 $html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter à votre espace Integrateur.";
                             $html .= "<br/>";
                             $html .= "Connectez vous aussi : <a href='https://esmcgie.com/integrateur/login'>Connexion Integrateur</a>";
                             $html .= "<br/>";
							 $html .= "Login : ".$login."<br/>";
                             $html .= "Mot de passe : ".$password."<br/>";
							   
							 $config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
							 $tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
                             Zend_Mail::setDefaultTransport($tr);		
                             $mail = new Zend_Mail();
							   
							 $mail->setBodyHtml($html);
                             $mail->setFrom(Util_Utils::getParamEsmc(3),"ESMC");
                             $mail->addTo($souscription->souscription_email,$souscription->souscription_nom." ".$souscription->souscription_prenom);
                             $mail->setSubject('Formulaire Integrateur : '.$date_id->toString('dd-MM-yyyy HH:mm'));
                             $mail->send($tr); 

							 $db->commit();
                             $sessionmcnp->error = "Opération bien effectuée ...";
		                     $this->_redirect('/index/addoffreurprojet/param/'.$_POST['offreur_projet_type']);

						}
	
	              } catch (Exception $exc) {
				        $db->rollback();
	                    $this->view->param = $param;
						$this->view->souscription_email  = $_POST['souscription_email'];
						$this->view->code_membre = $_POST['offreur_projet_code_membre'];
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
		                //$this->_redirect('/index/addoffreurprojet/param/'.$param);
                        return;
                   }
	
	       }
		   
		   }
		   
		   $param = (int)$this->_request->getParam('param');
	       $this->view->param = $param;

     }

    public function addoffreurprojetoldAction() {
        /* page administration/addoffreurprojet - Ajout d'une offreurprojet */

	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
		//$this->_helper->layout->disableLayout();
 		$this->_helper->layout()->setLayout('layoutpublicesmc');
 		$t_canton = new Application_Model_DbTable_EuCanton();
        $m_ville = new Application_Model_EuVilleMapper ();
        $cantons = $t_canton->fetchAll();
        $villes = $m_ville->fetchAll();
        $this->view->cantons = $cantons;
        $this->view->villes = $villes;
		
	if (isset($_POST['ok']) && $_POST['ok']=="ok") {
	if (isset($_POST['offreur_projet_souscription_ordre']) && $_POST['offreur_projet_souscription_ordre']!="" && isset($_POST['souscription_email']) && $_POST['souscription_email']!="" && isset($_POST['offreur_projet_type']) && $_POST['offreur_projet_type']!="" && isset($_POST['offreur_projet_raison_sociale']) && $_POST['offreur_projet_raison_sociale']!="" && isset($_POST['offreur_projet_produit']) && $_POST['offreur_projet_produit']!="" && isset($_POST['offreur_projet_stock_disponible']) && $_POST['offreur_projet_stock_disponible']!="" && isset($_POST['offreur_projet_nom_entrepot']) && $_POST['offreur_projet_nom_entrepot']!="" && isset($_POST['offreur_projet_adresse_entrepot']) && $_POST['offreur_projet_adresse_entrepot']!="" && isset($_POST['offreur_projet_attestation']) && $_POST['offreur_projet_attestation']==1) {

		            $param = (int)$this->_request->getParam('param');
	 //$this->view->param = $param;

        $m_souscription2 = new Application_Model_EuSouscriptionMapper();
		$souscription_id = $m_souscription2->findIdSouscriptionOffreur($_POST['offreur_projet_souscription_ordre']);
		
		if($souscription_id == NULL) {
		   $sessionmcnp->error = "Numéro de quittance invalide ...";
		} else {
			
        $souscription3 = new Application_Model_EuSouscription();
        $m_souscription3 = new Application_Model_EuSouscriptionMapper();
		$m_souscription3->find($souscription_id, $souscription3);
		
		if(count($souscription3) > 0 && $souscription3->souscription_nombre >= 100 && ($souscription3->souscription_type_candidat == 6 || $souscription3->souscription_type_candidat == 7)){
		
        $m_offreur_projet2 = new Application_Model_EuOffreurProjetMapper();
		$offreur_projet2 = $m_offreur_projet2->fetchAllBySouscription($souscription_id);
		
		if(count($offreur_projet2) > 0){
		   $sessionmcnp->error = "Numéro de quittance déjà utilisé ...";
			}else{



            $souscription = new Application_Model_EuSouscription();
            $m_souscription = new Application_Model_EuSouscriptionMapper();
		    $m_souscription->find($souscription_id, $souscription);
			
            $souscription->setSouscription_email($_POST["souscription_email"]);
            $m_souscription->update($souscription);



            $date_id = new Zend_Date(Zend_Date::ISO_8601);
            $a = new Application_Model_EuOffreurProjet();
            $ma = new Application_Model_EuOffreurProjetMapper();
			
            $compteur = $ma->findConuter() + 1;
            $a->setOffreur_projet_id($compteur);
            $a->setOffreur_projet_type($_POST['offreur_projet_type']);
            $a->setOffreur_projet_souscription($souscription_id);
            $a->setOffreur_projet_raison_sociale($_POST['offreur_projet_raison_sociale']);
            $a->setOffreur_projet_adresse($_POST['offreur_projet_adresse']);
            $a->setOffreur_projet_produit($_POST['offreur_projet_produit']);
            $a->setOffreur_projet_operationnel($_POST['offreur_projet_operationnel']);
if($param >= 4){
	        $a->setOffreur_projet_capacite_production($_POST['offreur_projet_capacite_production']);
}
            $a->setOffreur_projet_stock_disponible($_POST['offreur_projet_stock_disponible']);
            $a->setOffreur_projet_qte_max($_POST['offreur_projet_qte_max']);
            $a->setOffreur_projet_qte_moyen($_POST['offreur_projet_qte_moyen']);
            $a->setOffreur_projet_qte_min($_POST['offreur_projet_qte_min']);
            $a->setOffreur_projet_nom_entrepot($_POST['offreur_projet_nom_entrepot']);
            $a->setOffreur_projet_adresse_entrepot($_POST['offreur_projet_adresse_entrepot']);
            $a->setOffreur_projet_description_projet($_POST['offreur_projet_description_projet']);
            $a->setOffreur_projet_membreasso(0);/*$sessionmembreasso->membreasso_id*/
            $a->setOffreur_projet_date($date_id->toString('yyyy-MM-dd'));
            $a->setOffreurProjetCanton($_POST['offreur_projet_canton']);
            $a->setOffreurProjetVille($_POST['offreur_projet_ville']);
			$a->setPublier($_POST['publier']);
            $ma->save($a);
			

////////////////////////////////////////////////////////////////////////////

        $offreur_projet = new Application_Model_EuOffreurProjet();
        $offreur_projetM = new Application_Model_EuOffreurProjetMapper();
        $offreur_projetM->find($compteur, $offreur_projet);
		
        $offreur_projet->setPublier($this->_request->getParam('publier'));
		$offreur_projetM->update($offreur_projet);
		
		
		
		
$id_offreur_projet = $offreur_projet->offreur_projet_id;
//////////////////////////////////////////
if($offreur_projet->offreur_projet_membreasso != 1 && $offreur_projet->offreur_projet_membreasso != 0){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
		$m_membreasso->find($offreur_projet->offreur_projet_membreasso, $membreasso);
			
        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
		$m_association->find($membreasso->membreasso_association, $association);
		$code_agence = $association->code_agence;
		
        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($offreur_projet->offreur_projet_souscription);
        //$cumul_recubancaire = 0;
		
		if($cumul_recubancaire > 0){

		
		if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){
			
			/*if($offreur_projet->offreur_projet_type == "1"){
			$partagea_montant = floor(($cumul_recubancaire / 100 * 10) / 2);
				}else{
			$partagea_montant = floor(($cumul_recubancaire / 100 * 5) / 2);
					}*/
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}else{
			
			/*if($offreur_projet->offreur_projet_type == "1"){
			$partagea_montant = floor($cumul_recubancaire / 100 * 10);
				}else{
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
					}*/
			$partagea_montant = floor($cumul_recubancaire / 100 * 5);
			
		}
			
//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_offreur_projet($id_offreur_projet);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea_mapper->save($partagea);
			
//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_offreur_projet($id_offreur_projet);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem_mapper->save($partagem);
			
//////////////////////////////////////////

}
}

////////////////////////////////////////////////////////////////////////////

            $sessionmcnp->error = "Opération bien effectuée ...";


		$this->_redirect('/index/addoffreurprojet/param/'.$_POST['offreur_projet_type']);
				}
			
			}else{
		   $sessionmcnp->error = "Numéro de quittance doit être celui d'un CMFH Offreur de projet ...";
				}
		}
		} else {  $sessionmcnp->error = "Champs * obligatoire ...";  } 
		}
		
		
            $param = (int)$this->_request->getParam('param');
	 $this->view->param = $param;
		
		
    } 


   public function listoffreurAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $zone = $request->getParam("code_zone");
        $pays = $request->getParam("id_pays");
        $region = $request->getParam("id_region");
        $prefecture = $request->getParam("id_prefecture");
        $canton = $request->getParam("id_canton");
        $type = $request->getParam("type_offreur");
        $t_offreur_projet = new Application_Model_DbTable_EuOffreurProjet();
        if (!empty($type) && empty($zone) && empty($pays) && empty($region) && empty($prefecture) && empty($canton)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->joinLeft(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->where('offreur_projet_type = ?', $type)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($canton)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->where('c.id_canton = ?', $canton);
            $select->where('offreur_projet_type = ?', $type)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($prefecture)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture);
            $select->where('offreur_projet_type = ?', $type)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($region)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region);
            $select->where('offreur_projet_type = ?', $type)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($pays)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays);
            $select->where('offreur_projet_type = ?', $type)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($zone)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone);
            $select->where('offreur_projet_type = ?', $type)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($canton)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->where('c.id_canton = ?', $canton)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($prefecture)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($region)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($pays)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($zone)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->join(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone)->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('t' => 'eu_type_offreur_projet'), 'eu_offreur_projet.offreur_projet_type = t.id_type_offreur_projet', array('libelle_type_offreur_projet'));
            $select->joinLeft(array('c' => 'eu_canton'), 'eu_offreur_projet.offreur_projet_canton = c.id_canton', array('nom_canton'));
            $select->where('publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        }
    }

    public function listintAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $zone = $request->getParam("code_zone");
        $pays = $request->getParam("id_pays");
        $region = $request->getParam("id_region");
        $prefecture = $request->getParam("id_prefecture");
        $canton = $request->getParam("id_canton");
        $type = $request->getParam("type_integrateur");
        $t_offreur_projet = new Application_Model_DbTable_EuIntegrateur();
        if (!empty($type) && empty($zone) && empty($pays) && empty($region) && empty($prefecture) && empty($canton)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->joinLeft(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->where('integrateur_type = ?', $type)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($canton)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->where('c.id_canton = ?', $canton);
            $select->where('integrateur_type = ?', $type)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($prefecture)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture);
            $select->where('integrateur_type = ?', $type)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($region)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region);
            $select->where('integrateur_type = ?', $type)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($pays)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays);
            $select->where('integrateur_type = ?', $type)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (!empty($type) && !empty($zone)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone);
            $select->where('integrateur_type = ?', $type)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($canton)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->where('c.id_canton = ?', $canton)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($prefecture)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->where('p.id_prefecture =  ?', $prefecture)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($region)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->where('r.id_region =  ?', $region)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($pays)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->where('y.id_pays =  ?', $pays)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else if (empty($type) && !empty($zone)) {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->join(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->join(array('p' => 'eu_prefecture'), 'c.id_prefecture = p.id_prefecture');
            $select->join(array('r' => 'eu_region'), 'p.id_region = r.id_region');
            $select->join(array('y' => 'eu_pays'), 'r.id_pays = y.id_pays');
            $select->join(array('z' => 'eu_zone'), 'z.code_zone = y.code_zone');
            $select->where('z.code_zone =  ?', $zone)->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        } else {
            $select = $t_offreur_projet->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join(array('s' => 'eu_souscription'), 'eu_integrateur.integrateur_souscription = s.souscription_id', array('souscription_nom', 'souscription_prenom', 'souscription_raison', 'souscription_mobile', 'souscription_email'));
            $select->join(array('ti' => 'eu_type_integrateur'), 'eu_integrateur.integrateur_type = ti.id_type_integrateur', array('libelle_type_integrateur'));
            $select->joinLeft(array('c' => 'eu_canton'), 'eu_integrateur.integrateur_canton = c.id_canton', array('nom_canton'));
            $select->where('eu_integrateur.publier = ?', 1);
            $entries = $t_offreur_projet->fetchAll($select);
            $this->view->offreurs = $entries;
        }
    }

    public function loadcantonAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $prefecture = $request->getParam("id_prefecture");
        $t_canton = new Application_Model_DbTable_EuCanton();
        if (!empty($prefecture)) {
            $select = $t_canton->select()->where('id_prefecture = ?', $prefecture);
            $this->view->cantons = $t_canton->fetchAll($select);
        } else {
            $this->view->cantons = $t_canton->fetchAll();
        }
    }

    public function prefectureAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $region = $request->getParam("id_region");
        $entries = array();
        $t_prefect = new Application_Model_DbTable_EuPrefecture();
        if (!empty($region)) {
            $select = $t_prefect->select()->where('id_region = ?', $region);
            $entries = $t_prefect->fetchAll($select);
            $this->view->prefectures = $entries;
        } else {
            $this->view->prefectures = $t_prefect->fetchAll();
        }
    }

    public function loadregionAction() {
        $this->_helper->layout()->disableLayout();
        $request = $this->getRequest();
        $pays = $request->getParam("id_pays");
        $t_region = new Application_Model_DbTable_EuRegion();
        if (!empty($pays)) {
            $select = $t_region->select()->where('id_pays = ?', $pays);
            $this->view->regions = $t_region->fetchAll($select);
        } else {
            $this->view->regions = $t_region->fetchAll();
        }
    }

    public function loadpaysAction() {
        $this->_helper->layout()->disableLayout();
        $request = $this->getRequest();
        $zone = $request->getParam("code_zone");
        $t_pays = new Application_Model_DbTable_EuPays();
        if (!empty($zone)) {
            $select = $t_pays->select()->where('code_zone = ?', $zone);
            $this->view->pays = $t_pays->fetchAll($select);
        } else {
            $this->view->pays = $t_pays->fetchAll();
        }
    }

    public function rechercheoffreurAction() {
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        $t_canton = new Application_Model_DbTable_EuCanton();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
        $m_type_offreur = new Application_Model_EuTypeOffreurProjetMapper();
        $type_offreurs = $m_type_offreur->fetchAll();
        $cantons = $t_canton->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->type_offreurs = $type_offreurs;
        $this->view->cantons = $cantons;
        $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
    }

    public function rechercheintegrateurAction() {
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        $t_canton = new Application_Model_DbTable_EuCanton();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
        $m_type_integrateur = new Application_Model_EuTypeIntegrateurMapper();
        $type_integrateurs = $m_type_integrateur->fetchAll();
        $cantons = $t_canton->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->type_integrateurs = $type_integrateurs;
        $this->view->cantons = $cantons;
        $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
    }





    
    
    


    
    
    public function rechercheractivationAction()   {
       $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmc');
         
       if(isset($_POST['ok']) && $_POST['ok']=="ok")   {
            $d_membre = new Application_Model_DbTable_EuMembre();
            $d_membremorale = new Application_Model_DbTable_EuMembreMorale();
          
            if (isset($_POST['nom_membre']) && ($_POST['nom_membre']!="") && isset($_POST['prenom_membre']) && ($_POST['prenom_membre']!="") && isset($_POST['date_nais_membre']) && ($_POST['date_nais_membre']!=""))  {
               $nom_membre = $_POST['nom_membre'];
               $prenom_membre = $_POST['prenom_membre'];
               $date_nais_membre = $_POST['date_nais_membre'];
               $lieu_nais_membre = $_POST['lieu_nais_membre'];
               $select = $d_membre->select();
               $select->where('nom_membre like ?', '%'.$nom_membre.'%');
               $select->where('prenom_membre like ?', '%'.$prenom_membre.'%');
               $select->where('date_nais_membre like ?', '%'.$date_nais_membre.'%');
               $select->where('lieu_nais_membre like ?', '%'.$lieu_nais_membre.'%');
               $entries = $d_membre->fetchAll($select);
               $this->view->nom_membre = $nom_membre;
               $this->view->prenom_membre = $prenom_membre;
               $this->view->date_nais_membre = $date_nais_membre;
               $this->view->lieu_nais_membre = $lieu_nais_membre;
               $this->view->entries = $entries; 
               
            } elseif(isset($_POST['raison_sociale']) && ($_POST['raison_sociale']!="")) {
               $raison_sociale = $_POST['raison_sociale'];
               $select = $d_membremorale->select();
               $select->where('raison_sociale like ?', '%'.$raison_sociale.'%');
               $results = $d_membremorale->fetchAll($select);
               $this->view->raison_sociale = $raison_sociale;
               $this->view->results = $results; 
               
            } else {
                 $sessionmcnp->error = "Champs obligatoire ...";
                 
               }                
            }
       $this->view->tabletri = 1;             
    }
    
    
    
    
    



    



    
    
    public function webtvAction()   {
       $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcwebtv');
         
             
    }
    
    
    
    


	

}



